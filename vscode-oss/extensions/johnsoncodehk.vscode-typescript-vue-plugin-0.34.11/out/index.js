"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../packages/source-map/out/index.js
var require_out = __commonJS({
  "../../packages/source-map/out/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SourceMapBase = exports2.Mode = void 0;
    var Mode;
    (function(Mode2) {
      Mode2[Mode2["Offset"] = 0] = "Offset";
      Mode2[Mode2["Totally"] = 1] = "Totally";
      Mode2[Mode2["Expand"] = 2] = "Expand";
    })(Mode = exports2.Mode || (exports2.Mode = {}));
    var SourceMapBase = class {
      constructor(_mappings) {
        this.mappings = _mappings !== null && _mappings !== void 0 ? _mappings : [];
      }
      getSourceRange(start, end, filter2) {
        for (const mapped of this.getRanges(start, end !== null && end !== void 0 ? end : start, false, filter2)) {
          return mapped;
        }
      }
      getMappedRange(start, end, filter2) {
        for (const mapped of this.getRanges(start, end !== null && end !== void 0 ? end : start, true, filter2)) {
          return mapped;
        }
      }
      getSourceRanges(start, end, filter2) {
        return this.getRanges(start, end !== null && end !== void 0 ? end : start, false, filter2);
      }
      getMappedRanges(start, end, filter2) {
        return this.getRanges(start, end !== null && end !== void 0 ? end : start, true, filter2);
      }
      *getRanges(startOffset, endOffset, sourceToTarget, filter2) {
        for (const mapping of this.mappings) {
          if (filter2 && !filter2(mapping.data))
            continue;
          const mapped = this.getRange(startOffset, endOffset, sourceToTarget, mapping.mode, mapping.sourceRange, mapping.mappedRange, mapping.data);
          if (mapped) {
            yield getMapped(mapped);
          } else if (mapping.additional) {
            for (const other of mapping.additional) {
              const mapped2 = this.getRange(startOffset, endOffset, sourceToTarget, other.mode, other.sourceRange, other.mappedRange, mapping.data);
              if (mapped2) {
                yield getMapped(mapped2);
                break;
              }
            }
          }
        }
        function getMapped(mapped) {
          return mapped;
        }
      }
      getRange(start, end, sourceToTarget, mode, sourceRange, targetRange, data) {
        const mappedToRange = sourceToTarget ? targetRange : sourceRange;
        const mappedFromRange = sourceToTarget ? sourceRange : targetRange;
        if (mode === Mode.Totally) {
          if (start === mappedFromRange.start && end === mappedFromRange.end) {
            const _start = mappedToRange.start;
            const _end = mappedToRange.end;
            return [{
              start: Math.min(_start, _end),
              end: Math.max(_start, _end)
            }, data];
          }
        } else if (mode === Mode.Offset) {
          if (start >= mappedFromRange.start && end <= mappedFromRange.end) {
            const _start = mappedToRange.start + start - mappedFromRange.start;
            const _end = mappedToRange.end + end - mappedFromRange.end;
            return [{
              start: Math.min(_start, _end),
              end: Math.max(_start, _end)
            }, data];
          }
        } else if (mode === Mode.Expand) {
          if (start >= mappedFromRange.start && end <= mappedFromRange.end) {
            const _start = mappedToRange.start;
            const _end = mappedToRange.end;
            return [{
              start: Math.min(_start, _end),
              end: Math.max(_start, _end)
            }, data];
          }
        }
      }
    };
    exports2.SourceMapBase = SourceMapBase;
  }
});

// ../../packages/vue-typescript/out/utils/sourceMaps.js
var require_sourceMaps = __commonJS({
  "../../packages/vue-typescript/out/utils/sourceMaps.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Teleport = exports2.EmbeddedFileSourceMap = void 0;
    var SourceMaps = require_out();
    var EmbeddedFileSourceMap = class extends SourceMaps.SourceMapBase {
    };
    exports2.EmbeddedFileSourceMap = EmbeddedFileSourceMap;
    var Teleport = class extends SourceMaps.SourceMapBase {
      *findTeleports(start, end, filter2) {
        for (const [teleRange, data] of this.getMappedRanges(start, end, filter2 ? (data2) => filter2(data2.toTarget) : void 0)) {
          yield [teleRange, data.toTarget];
        }
        for (const [teleRange, data] of this.getSourceRanges(start, end, filter2 ? (data2) => filter2(data2.toTarget) : void 0)) {
          yield [teleRange, data.toTarget];
        }
      }
    };
    exports2.Teleport = Teleport;
  }
});

// ../../packages/vue-typescript/out/utils/string.js
var require_string = __commonJS({
  "../../packages/vue-typescript/out/utils/string.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.replaceToComment = exports2.SearchTexts = void 0;
    exports2.SearchTexts = {
      Components: "/* __VLS_.SearchTexts.Components */",
      GlobalAttrs: "/* __VLS_.SearchTexts.GlobalAttrs */",
      PropsCompletion: (tag2) => `/* __VLS_.SearchTexts.Completion.Props.${tag2} */`,
      EmitCompletion: (tag2) => `/* __VLS_.SearchTexts.Completion.Emit.${tag2} */`
    };
    function replaceToComment(str, start, end) {
      if (Math.abs(end - start) >= 4) {
        return str.substring(0, start) + "/*" + " ".repeat(Math.abs(end - start) - 4) + "*/" + str.substring(end);
      }
      return str.substring(0, start) + " ".repeat(Math.abs(end - start)) + str.substring(end);
    }
    exports2.replaceToComment = replaceToComment;
  }
});

// ../../packages/code-gen/out/index.js
var require_out2 = __commonJS({
  "../../packages/code-gen/out/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeCodeGen = exports2.CodeGen = void 0;
    var CodeGen = class {
      constructor() {
        this.text = "";
        this.mappings = [];
      }
      getText() {
        return this.text;
      }
      getMappings(sourceRangeParser) {
        if (!sourceRangeParser) {
          return this.mappings;
        }
        return this.mappings.map((mapping) => Object.assign(Object.assign({}, mapping), { sourceRange: sourceRangeParser(mapping.data, mapping.sourceRange), additional: mapping.additional ? mapping.additional.map((extraMapping) => Object.assign(Object.assign({}, extraMapping), { sourceRange: sourceRangeParser(mapping.data, extraMapping.sourceRange) })) : void 0 }));
      }
      addCode(str, sourceRange, mode, data, extraSourceRanges) {
        const targetRange = this.addText(str);
        this.addMapping2({
          mappedRange: targetRange,
          sourceRange,
          mode,
          data,
          additional: extraSourceRanges ? extraSourceRanges.map((extraSourceRange) => ({
            mappedRange: targetRange,
            mode,
            sourceRange: extraSourceRange
          })) : void 0
        });
        return targetRange;
      }
      addMapping(str, sourceRange, mode, data) {
        const targetRange = {
          start: this.text.length,
          end: this.text.length + str.length
        };
        this.addMapping2({ mappedRange: targetRange, sourceRange, mode, data });
        return targetRange;
      }
      addMapping2(mapping) {
        this.mappings.push(mapping);
      }
      addText(str) {
        const range2 = {
          start: this.text.length,
          end: this.text.length + str.length
        };
        this.text += str;
        return range2;
      }
    };
    exports2.CodeGen = CodeGen;
    function mergeCodeGen(a, b) {
      const aLength = a.getText().length;
      for (const mapping of b.getMappings()) {
        a.addMapping2(Object.assign(Object.assign({}, mapping), { mappedRange: {
          start: mapping.mappedRange.start + aLength,
          end: mapping.mappedRange.end + aLength
        }, additional: mapping.additional ? mapping.additional.map((mapping_2) => Object.assign(Object.assign({}, mapping_2), { mappedRange: {
          start: mapping_2.mappedRange.start + aLength,
          end: mapping_2.mappedRange.end + aLength
        } })) : void 0 }));
      }
      a.addText(b.getText());
    }
    exports2.mergeCodeGen = mergeCodeGen;
  }
});

// ../../node_modules/.pnpm/@vue+shared@3.2.31/node_modules/@vue/shared/dist/shared.cjs.prod.js
var require_shared_cjs_prod = __commonJS({
  "../../node_modules/.pnpm/@vue+shared@3.2.31/node_modules/@vue/shared/dist/shared.cjs.prod.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function makeMap2(str, expectsLowerCase) {
      const map2 = /* @__PURE__ */ Object.create(null);
      const list2 = str.split(",");
      for (let i = 0; i < list2.length; i++) {
        map2[list2[i]] = true;
      }
      return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
    }
    var PatchFlagNames2 = {
      [1]: `TEXT`,
      [2]: `CLASS`,
      [4]: `STYLE`,
      [8]: `PROPS`,
      [16]: `FULL_PROPS`,
      [32]: `HYDRATE_EVENTS`,
      [64]: `STABLE_FRAGMENT`,
      [128]: `KEYED_FRAGMENT`,
      [256]: `UNKEYED_FRAGMENT`,
      [512]: `NEED_PATCH`,
      [1024]: `DYNAMIC_SLOTS`,
      [2048]: `DEV_ROOT_FRAGMENT`,
      [-1]: `HOISTED`,
      [-2]: `BAIL`
    };
    var slotFlagsText2 = {
      [1]: "STABLE",
      [2]: "DYNAMIC",
      [3]: "FORWARDED"
    };
    var GLOBALS_WHITE_LISTED2 = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
    var isGloballyWhitelisted2 = /* @__PURE__ */ makeMap2(GLOBALS_WHITE_LISTED2);
    var range2 = 2;
    function generateCodeFrame2(source, start = 0, end = source.length) {
      let lines = source.split(/(\r?\n)/);
      const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);
      lines = lines.filter((_, idx) => idx % 2 === 0);
      let count = 0;
      const res = [];
      for (let i = 0; i < lines.length; i++) {
        count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
        if (count >= start) {
          for (let j = i - range2; j <= i + range2 || end > count; j++) {
            if (j < 0 || j >= lines.length)
              continue;
            const line = j + 1;
            res.push(`${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
            const lineLength = lines[j].length;
            const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
            if (j === i) {
              const pad2 = start - (count - (lineLength + newLineSeqLength));
              const length2 = Math.max(1, end > count ? lineLength - pad2 : end - start);
              res.push(`   |  ` + " ".repeat(pad2) + "^".repeat(length2));
            } else if (j > i) {
              if (end > count) {
                const length2 = Math.max(Math.min(end - count, lineLength), 1);
                res.push(`   |  ` + "^".repeat(length2));
              }
              count += lineLength + newLineSeqLength;
            }
          }
          break;
        }
      }
      return res.join("\n");
    }
    var specialBooleanAttrs2 = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
    var isSpecialBooleanAttr = /* @__PURE__ */ makeMap2(specialBooleanAttrs2);
    var isBooleanAttr2 = /* @__PURE__ */ makeMap2(specialBooleanAttrs2 + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);
    function includeBooleanAttr(value) {
      return !!value || value === "";
    }
    var unsafeAttrCharRE2 = /[>/="'\u0009\u000a\u000c\u0020]/;
    var attrValidationCache2 = {};
    function isSSRSafeAttrName2(name) {
      if (attrValidationCache2.hasOwnProperty(name)) {
        return attrValidationCache2[name];
      }
      const isUnsafe = unsafeAttrCharRE2.test(name);
      if (isUnsafe) {
        console.error(`unsafe attribute name: ${name}`);
      }
      return attrValidationCache2[name] = !isUnsafe;
    }
    var propsToAttrMap2 = {
      acceptCharset: "accept-charset",
      className: "class",
      htmlFor: "for",
      httpEquiv: "http-equiv"
    };
    var isNoUnitNumericStyleProp2 = /* @__PURE__ */ makeMap2(`animation-iteration-count,border-image-outset,border-image-slice,border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,stroke-miterlimit,stroke-opacity,stroke-width`);
    var isKnownHtmlAttr2 = /* @__PURE__ */ makeMap2(`accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`);
    var isKnownSvgAttr2 = /* @__PURE__ */ makeMap2(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
    function normalizeStyle2(value) {
      if (isArray2(value)) {
        const res = {};
        for (let i = 0; i < value.length; i++) {
          const item = value[i];
          const normalized = isString2(item) ? parseStringStyle2(item) : normalizeStyle2(item);
          if (normalized) {
            for (const key in normalized) {
              res[key] = normalized[key];
            }
          }
        }
        return res;
      } else if (isString2(value)) {
        return value;
      } else if (isObject2(value)) {
        return value;
      }
    }
    var listDelimiterRE2 = /;(?![^(]*\))/g;
    var propertyDelimiterRE2 = /:(.+)/;
    function parseStringStyle2(cssText) {
      const ret = {};
      cssText.split(listDelimiterRE2).forEach((item) => {
        if (item) {
          const tmp = item.split(propertyDelimiterRE2);
          tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
      });
      return ret;
    }
    function stringifyStyle2(styles) {
      let ret = "";
      if (!styles || isString2(styles)) {
        return ret;
      }
      for (const key in styles) {
        const value = styles[key];
        const normalizedKey = key.startsWith(`--`) ? key : hyphenate2(key);
        if (isString2(value) || typeof value === "number" && isNoUnitNumericStyleProp2(normalizedKey)) {
          ret += `${normalizedKey}:${value};`;
        }
      }
      return ret;
    }
    function normalizeClass2(value) {
      let res = "";
      if (isString2(value)) {
        res = value;
      } else if (isArray2(value)) {
        for (let i = 0; i < value.length; i++) {
          const normalized = normalizeClass2(value[i]);
          if (normalized) {
            res += normalized + " ";
          }
        }
      } else if (isObject2(value)) {
        for (const name in value) {
          if (value[name]) {
            res += name + " ";
          }
        }
      }
      return res.trim();
    }
    function normalizeProps(props) {
      if (!props)
        return null;
      let { class: klass, style } = props;
      if (klass && !isString2(klass)) {
        props.class = normalizeClass2(klass);
      }
      if (style) {
        props.style = normalizeStyle2(style);
      }
      return props;
    }
    var HTML_TAGS2 = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
    var SVG_TAGS2 = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
    var VOID_TAGS2 = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
    var isHTMLTag2 = /* @__PURE__ */ makeMap2(HTML_TAGS2);
    var isSVGTag2 = /* @__PURE__ */ makeMap2(SVG_TAGS2);
    var isVoidTag2 = /* @__PURE__ */ makeMap2(VOID_TAGS2);
    var escapeRE2 = /["'&<>]/;
    function escapeHtml2(string2) {
      const str = "" + string2;
      const match = escapeRE2.exec(str);
      if (!match) {
        return str;
      }
      let html = "";
      let escaped;
      let index;
      let lastIndex = 0;
      for (index = match.index; index < str.length; index++) {
        switch (str.charCodeAt(index)) {
          case 34:
            escaped = "&quot;";
            break;
          case 38:
            escaped = "&amp;";
            break;
          case 39:
            escaped = "&#39;";
            break;
          case 60:
            escaped = "&lt;";
            break;
          case 62:
            escaped = "&gt;";
            break;
          default:
            continue;
        }
        if (lastIndex !== index) {
          html += str.slice(lastIndex, index);
        }
        lastIndex = index + 1;
        html += escaped;
      }
      return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
    }
    var commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
    function escapeHtmlComment(src) {
      return src.replace(commentStripRE, "");
    }
    function looseCompareArrays(a, b) {
      if (a.length !== b.length)
        return false;
      let equal = true;
      for (let i = 0; equal && i < a.length; i++) {
        equal = looseEqual(a[i], b[i]);
      }
      return equal;
    }
    function looseEqual(a, b) {
      if (a === b)
        return true;
      let aValidType = isDate2(a);
      let bValidType = isDate2(b);
      if (aValidType || bValidType) {
        return aValidType && bValidType ? a.getTime() === b.getTime() : false;
      }
      aValidType = isArray2(a);
      bValidType = isArray2(b);
      if (aValidType || bValidType) {
        return aValidType && bValidType ? looseCompareArrays(a, b) : false;
      }
      aValidType = isObject2(a);
      bValidType = isObject2(b);
      if (aValidType || bValidType) {
        if (!aValidType || !bValidType) {
          return false;
        }
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) {
          return false;
        }
        for (const key in a) {
          const aHasKey = a.hasOwnProperty(key);
          const bHasKey = b.hasOwnProperty(key);
          if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
            return false;
          }
        }
      }
      return String(a) === String(b);
    }
    function looseIndexOf(arr, val) {
      return arr.findIndex((item) => looseEqual(item, val));
    }
    var toDisplayString2 = (val) => {
      return isString2(val) ? val : val == null ? "" : isArray2(val) || isObject2(val) && (val.toString === objectToString2 || !isFunction2(val.toString)) ? JSON.stringify(val, replacer2, 2) : String(val);
    };
    var replacer2 = (_key, val) => {
      if (val && val.__v_isRef) {
        return replacer2(_key, val.value);
      } else if (isMap2(val)) {
        return {
          [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
            entries[`${key} =>`] = val2;
            return entries;
          }, {})
        };
      } else if (isSet2(val)) {
        return {
          [`Set(${val.size})`]: [...val.values()]
        };
      } else if (isObject2(val) && !isArray2(val) && !isPlainObject2(val)) {
        return String(val);
      }
      return val;
    };
    var EMPTY_OBJ2 = {};
    var EMPTY_ARR = [];
    var NOOP2 = () => {
    };
    var NO2 = () => false;
    var onRE2 = /^on[^a-z]/;
    var isOn2 = (key) => onRE2.test(key);
    var isModelListener = (key) => key.startsWith("onUpdate:");
    var extend2 = Object.assign;
    var remove2 = (arr, el) => {
      const i = arr.indexOf(el);
      if (i > -1) {
        arr.splice(i, 1);
      }
    };
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var hasOwn2 = (val, key) => hasOwnProperty2.call(val, key);
    var isArray2 = Array.isArray;
    var isMap2 = (val) => toTypeString2(val) === "[object Map]";
    var isSet2 = (val) => toTypeString2(val) === "[object Set]";
    var isDate2 = (val) => val instanceof Date;
    var isFunction2 = (val) => typeof val === "function";
    var isString2 = (val) => typeof val === "string";
    var isSymbol2 = (val) => typeof val === "symbol";
    var isObject2 = (val) => val !== null && typeof val === "object";
    var isPromise2 = (val) => {
      return isObject2(val) && isFunction2(val.then) && isFunction2(val.catch);
    };
    var objectToString2 = Object.prototype.toString;
    var toTypeString2 = (value) => objectToString2.call(value);
    var toRawType = (value) => {
      return toTypeString2(value).slice(8, -1);
    };
    var isPlainObject2 = (val) => toTypeString2(val) === "[object Object]";
    var isIntegerKey = (key) => isString2(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
    var isReservedProp2 = /* @__PURE__ */ makeMap2(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
    var isBuiltInDirective2 = /* @__PURE__ */ makeMap2("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
    var cacheStringFunction2 = (fn) => {
      const cache = /* @__PURE__ */ Object.create(null);
      return (str) => {
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
      };
    };
    var camelizeRE2 = /-(\w)/g;
    var camelize2 = cacheStringFunction2((str) => {
      return str.replace(camelizeRE2, (_, c) => c ? c.toUpperCase() : "");
    });
    var hyphenateRE2 = /\B([A-Z])/g;
    var hyphenate2 = cacheStringFunction2((str) => str.replace(hyphenateRE2, "-$1").toLowerCase());
    var capitalize2 = cacheStringFunction2((str) => str.charAt(0).toUpperCase() + str.slice(1));
    var toHandlerKey2 = cacheStringFunction2((str) => str ? `on${capitalize2(str)}` : ``);
    var hasChanged = (value, oldValue) => !Object.is(value, oldValue);
    var invokeArrayFns = (fns, arg) => {
      for (let i = 0; i < fns.length; i++) {
        fns[i](arg);
      }
    };
    var def = (obj, key, value) => {
      Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
      });
    };
    var toNumber = (val) => {
      const n2 = parseFloat(val);
      return isNaN(n2) ? val : n2;
    };
    var _globalThis;
    var getGlobalThis = () => {
      return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    };
    exports2.EMPTY_ARR = EMPTY_ARR;
    exports2.EMPTY_OBJ = EMPTY_OBJ2;
    exports2.NO = NO2;
    exports2.NOOP = NOOP2;
    exports2.PatchFlagNames = PatchFlagNames2;
    exports2.camelize = camelize2;
    exports2.capitalize = capitalize2;
    exports2.def = def;
    exports2.escapeHtml = escapeHtml2;
    exports2.escapeHtmlComment = escapeHtmlComment;
    exports2.extend = extend2;
    exports2.generateCodeFrame = generateCodeFrame2;
    exports2.getGlobalThis = getGlobalThis;
    exports2.hasChanged = hasChanged;
    exports2.hasOwn = hasOwn2;
    exports2.hyphenate = hyphenate2;
    exports2.includeBooleanAttr = includeBooleanAttr;
    exports2.invokeArrayFns = invokeArrayFns;
    exports2.isArray = isArray2;
    exports2.isBooleanAttr = isBooleanAttr2;
    exports2.isBuiltInDirective = isBuiltInDirective2;
    exports2.isDate = isDate2;
    exports2.isFunction = isFunction2;
    exports2.isGloballyWhitelisted = isGloballyWhitelisted2;
    exports2.isHTMLTag = isHTMLTag2;
    exports2.isIntegerKey = isIntegerKey;
    exports2.isKnownHtmlAttr = isKnownHtmlAttr2;
    exports2.isKnownSvgAttr = isKnownSvgAttr2;
    exports2.isMap = isMap2;
    exports2.isModelListener = isModelListener;
    exports2.isNoUnitNumericStyleProp = isNoUnitNumericStyleProp2;
    exports2.isObject = isObject2;
    exports2.isOn = isOn2;
    exports2.isPlainObject = isPlainObject2;
    exports2.isPromise = isPromise2;
    exports2.isReservedProp = isReservedProp2;
    exports2.isSSRSafeAttrName = isSSRSafeAttrName2;
    exports2.isSVGTag = isSVGTag2;
    exports2.isSet = isSet2;
    exports2.isSpecialBooleanAttr = isSpecialBooleanAttr;
    exports2.isString = isString2;
    exports2.isSymbol = isSymbol2;
    exports2.isVoidTag = isVoidTag2;
    exports2.looseEqual = looseEqual;
    exports2.looseIndexOf = looseIndexOf;
    exports2.makeMap = makeMap2;
    exports2.normalizeClass = normalizeClass2;
    exports2.normalizeProps = normalizeProps;
    exports2.normalizeStyle = normalizeStyle2;
    exports2.objectToString = objectToString2;
    exports2.parseStringStyle = parseStringStyle2;
    exports2.propsToAttrMap = propsToAttrMap2;
    exports2.remove = remove2;
    exports2.slotFlagsText = slotFlagsText2;
    exports2.stringifyStyle = stringifyStyle2;
    exports2.toDisplayString = toDisplayString2;
    exports2.toHandlerKey = toHandlerKey2;
    exports2.toNumber = toNumber;
    exports2.toRawType = toRawType;
    exports2.toTypeString = toTypeString2;
  }
});

// ../../node_modules/.pnpm/@vue+shared@3.2.31/node_modules/@vue/shared/dist/shared.cjs.js
var require_shared_cjs = __commonJS({
  "../../node_modules/.pnpm/@vue+shared@3.2.31/node_modules/@vue/shared/dist/shared.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function makeMap2(str, expectsLowerCase) {
      const map2 = /* @__PURE__ */ Object.create(null);
      const list2 = str.split(",");
      for (let i = 0; i < list2.length; i++) {
        map2[list2[i]] = true;
      }
      return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
    }
    var PatchFlagNames2 = {
      [1]: `TEXT`,
      [2]: `CLASS`,
      [4]: `STYLE`,
      [8]: `PROPS`,
      [16]: `FULL_PROPS`,
      [32]: `HYDRATE_EVENTS`,
      [64]: `STABLE_FRAGMENT`,
      [128]: `KEYED_FRAGMENT`,
      [256]: `UNKEYED_FRAGMENT`,
      [512]: `NEED_PATCH`,
      [1024]: `DYNAMIC_SLOTS`,
      [2048]: `DEV_ROOT_FRAGMENT`,
      [-1]: `HOISTED`,
      [-2]: `BAIL`
    };
    var slotFlagsText2 = {
      [1]: "STABLE",
      [2]: "DYNAMIC",
      [3]: "FORWARDED"
    };
    var GLOBALS_WHITE_LISTED2 = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
    var isGloballyWhitelisted2 = /* @__PURE__ */ makeMap2(GLOBALS_WHITE_LISTED2);
    var range2 = 2;
    function generateCodeFrame2(source, start = 0, end = source.length) {
      let lines = source.split(/(\r?\n)/);
      const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);
      lines = lines.filter((_, idx) => idx % 2 === 0);
      let count = 0;
      const res = [];
      for (let i = 0; i < lines.length; i++) {
        count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
        if (count >= start) {
          for (let j = i - range2; j <= i + range2 || end > count; j++) {
            if (j < 0 || j >= lines.length)
              continue;
            const line = j + 1;
            res.push(`${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
            const lineLength = lines[j].length;
            const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
            if (j === i) {
              const pad2 = start - (count - (lineLength + newLineSeqLength));
              const length2 = Math.max(1, end > count ? lineLength - pad2 : end - start);
              res.push(`   |  ` + " ".repeat(pad2) + "^".repeat(length2));
            } else if (j > i) {
              if (end > count) {
                const length2 = Math.max(Math.min(end - count, lineLength), 1);
                res.push(`   |  ` + "^".repeat(length2));
              }
              count += lineLength + newLineSeqLength;
            }
          }
          break;
        }
      }
      return res.join("\n");
    }
    var specialBooleanAttrs2 = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
    var isSpecialBooleanAttr = /* @__PURE__ */ makeMap2(specialBooleanAttrs2);
    var isBooleanAttr2 = /* @__PURE__ */ makeMap2(specialBooleanAttrs2 + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);
    function includeBooleanAttr(value) {
      return !!value || value === "";
    }
    var unsafeAttrCharRE2 = /[>/="'\u0009\u000a\u000c\u0020]/;
    var attrValidationCache2 = {};
    function isSSRSafeAttrName2(name) {
      if (attrValidationCache2.hasOwnProperty(name)) {
        return attrValidationCache2[name];
      }
      const isUnsafe = unsafeAttrCharRE2.test(name);
      if (isUnsafe) {
        console.error(`unsafe attribute name: ${name}`);
      }
      return attrValidationCache2[name] = !isUnsafe;
    }
    var propsToAttrMap2 = {
      acceptCharset: "accept-charset",
      className: "class",
      htmlFor: "for",
      httpEquiv: "http-equiv"
    };
    var isNoUnitNumericStyleProp2 = /* @__PURE__ */ makeMap2(`animation-iteration-count,border-image-outset,border-image-slice,border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,stroke-miterlimit,stroke-opacity,stroke-width`);
    var isKnownHtmlAttr2 = /* @__PURE__ */ makeMap2(`accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`);
    var isKnownSvgAttr2 = /* @__PURE__ */ makeMap2(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
    function normalizeStyle2(value) {
      if (isArray2(value)) {
        const res = {};
        for (let i = 0; i < value.length; i++) {
          const item = value[i];
          const normalized = isString2(item) ? parseStringStyle2(item) : normalizeStyle2(item);
          if (normalized) {
            for (const key in normalized) {
              res[key] = normalized[key];
            }
          }
        }
        return res;
      } else if (isString2(value)) {
        return value;
      } else if (isObject2(value)) {
        return value;
      }
    }
    var listDelimiterRE2 = /;(?![^(]*\))/g;
    var propertyDelimiterRE2 = /:(.+)/;
    function parseStringStyle2(cssText) {
      const ret = {};
      cssText.split(listDelimiterRE2).forEach((item) => {
        if (item) {
          const tmp = item.split(propertyDelimiterRE2);
          tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
      });
      return ret;
    }
    function stringifyStyle2(styles) {
      let ret = "";
      if (!styles || isString2(styles)) {
        return ret;
      }
      for (const key in styles) {
        const value = styles[key];
        const normalizedKey = key.startsWith(`--`) ? key : hyphenate2(key);
        if (isString2(value) || typeof value === "number" && isNoUnitNumericStyleProp2(normalizedKey)) {
          ret += `${normalizedKey}:${value};`;
        }
      }
      return ret;
    }
    function normalizeClass2(value) {
      let res = "";
      if (isString2(value)) {
        res = value;
      } else if (isArray2(value)) {
        for (let i = 0; i < value.length; i++) {
          const normalized = normalizeClass2(value[i]);
          if (normalized) {
            res += normalized + " ";
          }
        }
      } else if (isObject2(value)) {
        for (const name in value) {
          if (value[name]) {
            res += name + " ";
          }
        }
      }
      return res.trim();
    }
    function normalizeProps(props) {
      if (!props)
        return null;
      let { class: klass, style } = props;
      if (klass && !isString2(klass)) {
        props.class = normalizeClass2(klass);
      }
      if (style) {
        props.style = normalizeStyle2(style);
      }
      return props;
    }
    var HTML_TAGS2 = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
    var SVG_TAGS2 = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
    var VOID_TAGS2 = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
    var isHTMLTag2 = /* @__PURE__ */ makeMap2(HTML_TAGS2);
    var isSVGTag2 = /* @__PURE__ */ makeMap2(SVG_TAGS2);
    var isVoidTag2 = /* @__PURE__ */ makeMap2(VOID_TAGS2);
    var escapeRE2 = /["'&<>]/;
    function escapeHtml2(string2) {
      const str = "" + string2;
      const match = escapeRE2.exec(str);
      if (!match) {
        return str;
      }
      let html = "";
      let escaped;
      let index;
      let lastIndex = 0;
      for (index = match.index; index < str.length; index++) {
        switch (str.charCodeAt(index)) {
          case 34:
            escaped = "&quot;";
            break;
          case 38:
            escaped = "&amp;";
            break;
          case 39:
            escaped = "&#39;";
            break;
          case 60:
            escaped = "&lt;";
            break;
          case 62:
            escaped = "&gt;";
            break;
          default:
            continue;
        }
        if (lastIndex !== index) {
          html += str.slice(lastIndex, index);
        }
        lastIndex = index + 1;
        html += escaped;
      }
      return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
    }
    var commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
    function escapeHtmlComment(src) {
      return src.replace(commentStripRE, "");
    }
    function looseCompareArrays(a, b) {
      if (a.length !== b.length)
        return false;
      let equal = true;
      for (let i = 0; equal && i < a.length; i++) {
        equal = looseEqual(a[i], b[i]);
      }
      return equal;
    }
    function looseEqual(a, b) {
      if (a === b)
        return true;
      let aValidType = isDate2(a);
      let bValidType = isDate2(b);
      if (aValidType || bValidType) {
        return aValidType && bValidType ? a.getTime() === b.getTime() : false;
      }
      aValidType = isArray2(a);
      bValidType = isArray2(b);
      if (aValidType || bValidType) {
        return aValidType && bValidType ? looseCompareArrays(a, b) : false;
      }
      aValidType = isObject2(a);
      bValidType = isObject2(b);
      if (aValidType || bValidType) {
        if (!aValidType || !bValidType) {
          return false;
        }
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) {
          return false;
        }
        for (const key in a) {
          const aHasKey = a.hasOwnProperty(key);
          const bHasKey = b.hasOwnProperty(key);
          if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
            return false;
          }
        }
      }
      return String(a) === String(b);
    }
    function looseIndexOf(arr, val) {
      return arr.findIndex((item) => looseEqual(item, val));
    }
    var toDisplayString2 = (val) => {
      return isString2(val) ? val : val == null ? "" : isArray2(val) || isObject2(val) && (val.toString === objectToString2 || !isFunction2(val.toString)) ? JSON.stringify(val, replacer2, 2) : String(val);
    };
    var replacer2 = (_key, val) => {
      if (val && val.__v_isRef) {
        return replacer2(_key, val.value);
      } else if (isMap2(val)) {
        return {
          [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
            entries[`${key} =>`] = val2;
            return entries;
          }, {})
        };
      } else if (isSet2(val)) {
        return {
          [`Set(${val.size})`]: [...val.values()]
        };
      } else if (isObject2(val) && !isArray2(val) && !isPlainObject2(val)) {
        return String(val);
      }
      return val;
    };
    var EMPTY_OBJ2 = Object.freeze({});
    var EMPTY_ARR = Object.freeze([]);
    var NOOP2 = () => {
    };
    var NO2 = () => false;
    var onRE2 = /^on[^a-z]/;
    var isOn2 = (key) => onRE2.test(key);
    var isModelListener = (key) => key.startsWith("onUpdate:");
    var extend2 = Object.assign;
    var remove2 = (arr, el) => {
      const i = arr.indexOf(el);
      if (i > -1) {
        arr.splice(i, 1);
      }
    };
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var hasOwn2 = (val, key) => hasOwnProperty2.call(val, key);
    var isArray2 = Array.isArray;
    var isMap2 = (val) => toTypeString2(val) === "[object Map]";
    var isSet2 = (val) => toTypeString2(val) === "[object Set]";
    var isDate2 = (val) => val instanceof Date;
    var isFunction2 = (val) => typeof val === "function";
    var isString2 = (val) => typeof val === "string";
    var isSymbol2 = (val) => typeof val === "symbol";
    var isObject2 = (val) => val !== null && typeof val === "object";
    var isPromise2 = (val) => {
      return isObject2(val) && isFunction2(val.then) && isFunction2(val.catch);
    };
    var objectToString2 = Object.prototype.toString;
    var toTypeString2 = (value) => objectToString2.call(value);
    var toRawType = (value) => {
      return toTypeString2(value).slice(8, -1);
    };
    var isPlainObject2 = (val) => toTypeString2(val) === "[object Object]";
    var isIntegerKey = (key) => isString2(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
    var isReservedProp2 = /* @__PURE__ */ makeMap2(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
    var isBuiltInDirective2 = /* @__PURE__ */ makeMap2("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
    var cacheStringFunction2 = (fn) => {
      const cache = /* @__PURE__ */ Object.create(null);
      return (str) => {
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
      };
    };
    var camelizeRE2 = /-(\w)/g;
    var camelize2 = cacheStringFunction2((str) => {
      return str.replace(camelizeRE2, (_, c) => c ? c.toUpperCase() : "");
    });
    var hyphenateRE2 = /\B([A-Z])/g;
    var hyphenate2 = cacheStringFunction2((str) => str.replace(hyphenateRE2, "-$1").toLowerCase());
    var capitalize2 = cacheStringFunction2((str) => str.charAt(0).toUpperCase() + str.slice(1));
    var toHandlerKey2 = cacheStringFunction2((str) => str ? `on${capitalize2(str)}` : ``);
    var hasChanged = (value, oldValue) => !Object.is(value, oldValue);
    var invokeArrayFns = (fns, arg) => {
      for (let i = 0; i < fns.length; i++) {
        fns[i](arg);
      }
    };
    var def = (obj, key, value) => {
      Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
      });
    };
    var toNumber = (val) => {
      const n2 = parseFloat(val);
      return isNaN(n2) ? val : n2;
    };
    var _globalThis;
    var getGlobalThis = () => {
      return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    };
    exports2.EMPTY_ARR = EMPTY_ARR;
    exports2.EMPTY_OBJ = EMPTY_OBJ2;
    exports2.NO = NO2;
    exports2.NOOP = NOOP2;
    exports2.PatchFlagNames = PatchFlagNames2;
    exports2.camelize = camelize2;
    exports2.capitalize = capitalize2;
    exports2.def = def;
    exports2.escapeHtml = escapeHtml2;
    exports2.escapeHtmlComment = escapeHtmlComment;
    exports2.extend = extend2;
    exports2.generateCodeFrame = generateCodeFrame2;
    exports2.getGlobalThis = getGlobalThis;
    exports2.hasChanged = hasChanged;
    exports2.hasOwn = hasOwn2;
    exports2.hyphenate = hyphenate2;
    exports2.includeBooleanAttr = includeBooleanAttr;
    exports2.invokeArrayFns = invokeArrayFns;
    exports2.isArray = isArray2;
    exports2.isBooleanAttr = isBooleanAttr2;
    exports2.isBuiltInDirective = isBuiltInDirective2;
    exports2.isDate = isDate2;
    exports2.isFunction = isFunction2;
    exports2.isGloballyWhitelisted = isGloballyWhitelisted2;
    exports2.isHTMLTag = isHTMLTag2;
    exports2.isIntegerKey = isIntegerKey;
    exports2.isKnownHtmlAttr = isKnownHtmlAttr2;
    exports2.isKnownSvgAttr = isKnownSvgAttr2;
    exports2.isMap = isMap2;
    exports2.isModelListener = isModelListener;
    exports2.isNoUnitNumericStyleProp = isNoUnitNumericStyleProp2;
    exports2.isObject = isObject2;
    exports2.isOn = isOn2;
    exports2.isPlainObject = isPlainObject2;
    exports2.isPromise = isPromise2;
    exports2.isReservedProp = isReservedProp2;
    exports2.isSSRSafeAttrName = isSSRSafeAttrName2;
    exports2.isSVGTag = isSVGTag2;
    exports2.isSet = isSet2;
    exports2.isSpecialBooleanAttr = isSpecialBooleanAttr;
    exports2.isString = isString2;
    exports2.isSymbol = isSymbol2;
    exports2.isVoidTag = isVoidTag2;
    exports2.looseEqual = looseEqual;
    exports2.looseIndexOf = looseIndexOf;
    exports2.makeMap = makeMap2;
    exports2.normalizeClass = normalizeClass2;
    exports2.normalizeProps = normalizeProps;
    exports2.normalizeStyle = normalizeStyle2;
    exports2.objectToString = objectToString2;
    exports2.parseStringStyle = parseStringStyle2;
    exports2.propsToAttrMap = propsToAttrMap2;
    exports2.remove = remove2;
    exports2.slotFlagsText = slotFlagsText2;
    exports2.stringifyStyle = stringifyStyle2;
    exports2.toDisplayString = toDisplayString2;
    exports2.toHandlerKey = toHandlerKey2;
    exports2.toNumber = toNumber;
    exports2.toRawType = toRawType;
    exports2.toTypeString = toTypeString2;
  }
});

// ../../node_modules/.pnpm/@vue+shared@3.2.31/node_modules/@vue/shared/index.js
var require_shared = __commonJS({
  "../../node_modules/.pnpm/@vue+shared@3.2.31/node_modules/@vue/shared/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_shared_cjs_prod();
    } else {
      module2.exports = require_shared_cjs();
    }
  }
});

// ../../packages/vue-code-gen/out/generators/script.js
var require_script = __commonJS({
  "../../packages/vue-code-gen/out/generators/script.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.genConstructorOverloads = exports2.generate = void 0;
    var code_gen_1 = require_out2();
    var SourceMaps = require_out();
    var shared_1 = require_shared();
    var path3 = require("path");
    function generate2(lsType, fileName, script, scriptSetup, scriptRanges, scriptSetupRanges, getHtmlGen, getStyleBindTexts, vueLibName, shimComponentOptions) {
      const codeGen = new code_gen_1.CodeGen();
      const teleports = [];
      const usedTypes = {
        DefinePropsToOptions: false,
        mergePropDefaults: false,
        ConstructorOverloads: false
      };
      if (lsType === "template") {
        codeGen.addText("// @ts-nocheck\n");
      }
      writeScriptSrc();
      writeScript();
      writeScriptSetup();
      if (lsType === "script" && !script && !scriptSetup) {
        codeGen.addCode("export default {} as any", {
          start: 0,
          end: 0
        }, SourceMaps.Mode.Expand, {
          vueTag: "sfc",
          capabilities: {}
        });
      }
      if (usedTypes.DefinePropsToOptions) {
        codeGen.addText(`type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
`);
        codeGen.addText(`type __VLS_TypePropsToRuntimeProps<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? { type: import('${vueLibName}').PropType<__VLS_NonUndefinedable<T[K]>> } : { type: import('${vueLibName}').PropType<T[K]>, required: true } };
`);
      }
      if (usedTypes.mergePropDefaults) {
        codeGen.addText(`type __VLS_WithDefaults<P, D> = {
			// use 'keyof Pick<P, keyof P>' instead of 'keyof P' to keep props jsdoc
			[K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
				default: D[K]
			} : P[K]
		};
`);
      }
      if (usedTypes.ConstructorOverloads) {
        codeGen.addText("type __VLS_UnionToIntersection<U> = (U extends unknown ? (arg: U) => unknown : never) extends ((arg: infer P) => unknown) ? P : never;\n");
        if (scriptSetupRanges && scriptSetupRanges.emitsTypeNums !== -1) {
          codeGen.addText(genConstructorOverloads("__VLS_ConstructorOverloads", scriptSetupRanges.emitsTypeNums));
        } else {
          codeGen.addText(genConstructorOverloads("__VLS_ConstructorOverloads"));
        }
      }
      if (lsType === "template") {
        writeExportOptions();
        writeConstNameOption();
        writeExportTypes();
      }
      if (lsType === "script" && scriptSetup) {
        codeGen.addCode("", {
          start: scriptSetup.content.length,
          end: scriptSetup.content.length
        }, SourceMaps.Mode.Offset, {
          vueTag: "scriptSetup",
          capabilities: {}
        });
      }
      codeGen.addMapping2({
        data: {
          vueTag: "sfc",
          capabilities: {
            diagnostic: lsType === "script"
          }
        },
        mode: SourceMaps.Mode.Expand,
        mappedRange: {
          start: 0,
          end: codeGen.getText().length
        },
        sourceRange: {
          start: 0,
          end: 0
        }
      });
      return {
        codeGen,
        teleports
      };
      function writeScriptSrc() {
        if (!(script === null || script === void 0 ? void 0 : script.src))
          return;
        let src = script.src;
        if (src.endsWith(".d.ts"))
          src = src.substring(0, src.length - ".d.ts".length);
        else if (src.endsWith(".ts"))
          src = src.substring(0, src.length - ".ts".length);
        else if (src.endsWith(".tsx"))
          src = src.substring(0, src.length - ".tsx".length);
        codeGen.addText(`export * from `);
        codeGen.addCode(`'${src}'`, { start: -1, end: -1 }, SourceMaps.Mode.Offset, {
          vueTag: "scriptSrc",
          capabilities: {
            basic: lsType === "script",
            references: true,
            definitions: lsType === "script",
            rename: true,
            diagnostic: lsType === "script",
            completion: lsType === "script",
            semanticTokens: lsType === "script"
          }
        });
        codeGen.addText(`;
`);
        codeGen.addText(`export { default } from '${src}';
`);
      }
      function writeScript() {
        if (!script)
          return;
        if (!!scriptSetup && (scriptRanges === null || scriptRanges === void 0 ? void 0 : scriptRanges.exportDefault)) {
          addVirtualCode("script", 0, scriptRanges.exportDefault.start);
          addVirtualCode("script", scriptRanges.exportDefault.end, script.content.length);
        } else {
          let isExportRawObject = false;
          if (scriptRanges === null || scriptRanges === void 0 ? void 0 : scriptRanges.exportDefault) {
            isExportRawObject = script.content.substring(scriptRanges.exportDefault.expression.start, scriptRanges.exportDefault.expression.end).startsWith("{");
          }
          if (isExportRawObject && shimComponentOptions && (scriptRanges === null || scriptRanges === void 0 ? void 0 : scriptRanges.exportDefault)) {
            addVirtualCode("script", 0, scriptRanges.exportDefault.expression.start);
            codeGen.addText(`(await import('${vueLibName}')).defineComponent(`);
            addVirtualCode("script", scriptRanges.exportDefault.expression.start, scriptRanges.exportDefault.expression.end);
            codeGen.addText(`)`);
            addVirtualCode("script", scriptRanges.exportDefault.expression.end, script.content.length);
          } else {
            addVirtualCode("script", 0, script.content.length);
          }
        }
      }
      function addVirtualCode(vueTag, start, end) {
        codeGen.addCode((vueTag === "script" ? script : scriptSetup).content.substring(start, end), { start, end }, SourceMaps.Mode.Offset, {
          vueTag,
          capabilities: {
            basic: lsType === "script",
            references: true,
            definitions: lsType === "script",
            rename: true,
            diagnostic: true,
            completion: lsType === "script",
            semanticTokens: lsType === "script"
          }
        });
      }
      function addExtraReferenceVirtualCode(vueTag, start, end) {
        codeGen.addCode((vueTag === "scriptSetup" ? scriptSetup : script).content.substring(start, end), { start, end }, SourceMaps.Mode.Offset, {
          vueTag,
          capabilities: {
            references: true,
            definitions: true,
            rename: true
          }
        });
      }
      function writeScriptSetup() {
        var _a;
        if (!scriptSetup)
          return;
        if (!scriptSetupRanges)
          return;
        codeGen.addCode(scriptSetup.content.substring(0, scriptSetupRanges.importSectionEndOffset), {
          start: 0,
          end: scriptSetupRanges.importSectionEndOffset
        }, SourceMaps.Mode.Offset, {
          vueTag: "scriptSetup",
          capabilities: {
            basic: lsType === "script",
            references: true,
            definitions: lsType === "script",
            diagnostic: lsType === "script",
            rename: true,
            completion: lsType === "script",
            semanticTokens: lsType === "script"
          }
        });
        codeGen.addText("export default await (async () => {\n");
        codeGen.addCode(scriptSetup.content.substring(scriptSetupRanges.importSectionEndOffset), {
          start: scriptSetupRanges.importSectionEndOffset,
          end: scriptSetup.content.length
        }, SourceMaps.Mode.Offset, {
          vueTag: "scriptSetup",
          capabilities: {
            basic: lsType === "script",
            references: true,
            definitions: lsType === "script",
            diagnostic: lsType === "script",
            rename: true,
            completion: lsType === "script",
            semanticTokens: lsType === "script"
          }
        });
        if (scriptSetupRanges === null || scriptSetupRanges === void 0 ? void 0 : scriptSetupRanges.withDefaultsArg) {
          codeGen.addText(`const __VLS_withDefaultsArg = (<T>(t: T) => t)(`);
          addExtraReferenceVirtualCode("scriptSetup", scriptSetupRanges.withDefaultsArg.start, scriptSetupRanges.withDefaultsArg.end);
          codeGen.addText(`);
`);
        }
        codeGen.addText(`return (await import('${vueLibName}')).defineComponent({
`);
        if (script && ((_a = scriptRanges === null || scriptRanges === void 0 ? void 0 : scriptRanges.exportDefault) === null || _a === void 0 ? void 0 : _a.args)) {
          const args = scriptRanges.exportDefault.args;
          codeGen.addText(`...(`);
          addVirtualCode("script", args.start, args.end);
          codeGen.addText(`),
`);
        }
        if (scriptSetup && scriptSetupRanges) {
          if (scriptSetupRanges.propsRuntimeArg || scriptSetupRanges.propsTypeArg) {
            codeGen.addText(`props: (`);
            if (scriptSetupRanges.propsTypeArg) {
              usedTypes.DefinePropsToOptions = true;
              codeGen.addText(`{} as `);
              if (scriptSetupRanges.withDefaultsArg) {
                usedTypes.mergePropDefaults = true;
                codeGen.addText(`__VLS_WithDefaults<`);
              }
              codeGen.addText(`__VLS_TypePropsToRuntimeProps<`);
              addExtraReferenceVirtualCode("scriptSetup", scriptSetupRanges.propsTypeArg.start, scriptSetupRanges.propsTypeArg.end);
              codeGen.addText(`>`);
              if (scriptSetupRanges.withDefaultsArg) {
                codeGen.addText(`, typeof __VLS_withDefaultsArg`);
                codeGen.addText(`>`);
              }
            } else if (scriptSetupRanges.propsRuntimeArg) {
              addExtraReferenceVirtualCode("scriptSetup", scriptSetupRanges.propsRuntimeArg.start, scriptSetupRanges.propsRuntimeArg.end);
            }
            codeGen.addText(`),
`);
          }
          if (scriptSetupRanges.emitsTypeArg) {
            usedTypes.ConstructorOverloads = true;
            codeGen.addText(`emits: ({} as __VLS_UnionToIntersection<__VLS_ConstructorOverloads<`);
            addExtraReferenceVirtualCode("scriptSetup", scriptSetupRanges.emitsTypeArg.start, scriptSetupRanges.emitsTypeArg.end);
            codeGen.addText(`>>),
`);
          } else if (scriptSetupRanges.emitsRuntimeArg) {
            codeGen.addText(`emits: (`);
            addExtraReferenceVirtualCode("scriptSetup", scriptSetupRanges.emitsRuntimeArg.start, scriptSetupRanges.emitsRuntimeArg.end);
            codeGen.addText(`),
`);
          }
          const bindingsArr = [];
          if (scriptSetupRanges) {
            bindingsArr.push({
              bindings: scriptSetupRanges.bindings,
              content: scriptSetup.content,
              vueTag: "scriptSetup"
            });
          }
          if (scriptRanges && script) {
            bindingsArr.push({
              bindings: scriptRanges.bindings,
              content: script.content,
              vueTag: "script"
            });
          }
          codeGen.addText(`setup() {
`);
          if (lsType === "script") {
            codeGen.addText(`() => {
`);
            for (const bindText of getStyleBindTexts()) {
              codeGen.addText("// @ts-ignore\n");
              codeGen.addText(bindText + ";\n");
            }
            writeTemplate();
            codeGen.addText(`};
`);
            if (scriptSetupRanges.exposeTypeArg) {
              codeGen.addText(`return { } as `);
              addExtraReferenceVirtualCode("scriptSetup", scriptSetupRanges.exposeTypeArg.start, scriptSetupRanges.exposeTypeArg.end);
              codeGen.addText(`;
`);
            } else if (scriptSetupRanges.exposeRuntimeArg) {
              codeGen.addText(`return `);
              addExtraReferenceVirtualCode("scriptSetup", scriptSetupRanges.exposeRuntimeArg.start, scriptSetupRanges.exposeRuntimeArg.end);
              codeGen.addText(`;
`);
            } else {
              codeGen.addText(`return { };
`);
            }
            ;
          }
          if (lsType === "template") {
            codeGen.addText(`return {
`);
            for (const { bindings, content } of bindingsArr) {
              for (const expose of bindings) {
                const varName = content.substring(expose.start, expose.end);
                const templateSideRange = codeGen.addText(varName);
                codeGen.addText(`: `);
                const scriptSideRange = codeGen.addText(varName);
                codeGen.addText(",\n");
                teleports.push({
                  sourceRange: scriptSideRange,
                  mappedRange: templateSideRange,
                  mode: SourceMaps.Mode.Offset,
                  data: {
                    toSource: {
                      capabilities: {
                        definitions: true,
                        references: true,
                        rename: true
                      }
                    },
                    toTarget: {
                      capabilities: {
                        definitions: true,
                        references: true,
                        rename: true
                      }
                    }
                  }
                });
              }
            }
            codeGen.addText(`};
`);
          }
          codeGen.addText(`},
`);
        }
        codeGen.addText(`});
`);
        codeGen.addText(`})();
`);
      }
      function writeExportOptions() {
        var _a;
        codeGen.addText(`
`);
        codeGen.addText(`export const __VLS_options = {
`);
        if (script && ((_a = scriptRanges === null || scriptRanges === void 0 ? void 0 : scriptRanges.exportDefault) === null || _a === void 0 ? void 0 : _a.args)) {
          const args = scriptRanges.exportDefault.args;
          codeGen.addText(`...(`);
          codeGen.addCode(script.content.substring(args.start, args.end), args, SourceMaps.Mode.Offset, {
            vueTag: "script",
            capabilities: {
              references: true,
              rename: true
            }
          });
          codeGen.addText(`),
`);
        }
        if ((scriptSetupRanges === null || scriptSetupRanges === void 0 ? void 0 : scriptSetupRanges.propsRuntimeArg) && scriptSetup) {
          codeGen.addText(`props: (`);
          codeGen.addCode(scriptSetup.content.substring(scriptSetupRanges.propsRuntimeArg.start, scriptSetupRanges.propsRuntimeArg.end), scriptSetupRanges.propsRuntimeArg, SourceMaps.Mode.Offset, {
            vueTag: "scriptSetup",
            capabilities: {
              references: true,
              definitions: true,
              rename: true
            }
          });
          codeGen.addText(`),
`);
        } else if ((scriptSetupRanges === null || scriptSetupRanges === void 0 ? void 0 : scriptSetupRanges.propsTypeArg) && scriptSetup) {
          codeGen.addText(`props: ({} as `);
          codeGen.addCode(scriptSetup.content.substring(scriptSetupRanges.propsTypeArg.start, scriptSetupRanges.propsTypeArg.end), scriptSetupRanges.propsTypeArg, SourceMaps.Mode.Offset, {
            vueTag: "scriptSetup",
            capabilities: {
              references: true,
              definitions: true,
              rename: true
            }
          });
          codeGen.addText(`),
`);
        }
        if ((scriptSetupRanges === null || scriptSetupRanges === void 0 ? void 0 : scriptSetupRanges.emitsRuntimeArg) && scriptSetup) {
          codeGen.addText(`emits: (`);
          codeGen.addCode(scriptSetup.content.substring(scriptSetupRanges.emitsRuntimeArg.start, scriptSetupRanges.emitsRuntimeArg.end), scriptSetupRanges.emitsRuntimeArg, SourceMaps.Mode.Offset, {
            vueTag: "scriptSetup",
            capabilities: {
              references: true,
              definitions: true,
              rename: true
            }
          });
          codeGen.addText(`),
`);
        } else if ((scriptSetupRanges === null || scriptSetupRanges === void 0 ? void 0 : scriptSetupRanges.emitsTypeArg) && scriptSetup) {
          codeGen.addText(`emits: ({} as `);
          codeGen.addCode(scriptSetup.content.substring(scriptSetupRanges.emitsTypeArg.start, scriptSetupRanges.emitsTypeArg.end), scriptSetupRanges.emitsTypeArg, SourceMaps.Mode.Offset, {
            vueTag: "scriptSetup",
            capabilities: {}
          });
          codeGen.addText(`),
`);
        }
        codeGen.addText(`};
`);
      }
      function writeExportTypes() {
        const bindingsArr = [];
        if (scriptSetupRanges && scriptSetup) {
          bindingsArr.push({
            typeBindings: scriptSetupRanges.typeBindings,
            content: scriptSetup.content
          });
        }
        codeGen.addText("export {\n");
        for (const bindings of bindingsArr) {
          for (const typeBinding of bindings.typeBindings) {
            const text = bindings.content.substring(typeBinding.start, typeBinding.end);
            codeGen.addText(`${text} as __VLS_types_${text},
`);
          }
        }
        codeGen.addText("};\n");
      }
      function writeConstNameOption() {
        var _a;
        codeGen.addText(`
`);
        if (script && ((_a = scriptRanges === null || scriptRanges === void 0 ? void 0 : scriptRanges.exportDefault) === null || _a === void 0 ? void 0 : _a.args)) {
          const args = scriptRanges.exportDefault.args;
          codeGen.addText(`export const __VLS_name = (await import('./__VLS_types')).getNameOption(`);
          codeGen.addText(`${script.content.substring(args.start, args.end)} as const`);
          codeGen.addText(`);
`);
        } else if (scriptSetup) {
          codeGen.addText(`export declare const __VLS_name: '${path3.basename(fileName.substring(0, fileName.lastIndexOf(".")))}';
`);
        } else {
          codeGen.addText(`export const __VLS_name = undefined;
`);
        }
      }
      function writeTemplate() {
        const htmlGen = getHtmlGen();
        if (!htmlGen)
          return;
        let bindingNames = [];
        if (scriptSetupRanges) {
          bindingNames = bindingNames.concat(scriptSetupRanges.bindings.map((range2) => {
            var _a;
            return (_a = scriptSetup === null || scriptSetup === void 0 ? void 0 : scriptSetup.content.substring(range2.start, range2.end)) !== null && _a !== void 0 ? _a : "";
          }));
        }
        if (scriptRanges) {
          bindingNames = bindingNames.concat(scriptRanges.bindings.map((range2) => {
            var _a;
            return (_a = script === null || script === void 0 ? void 0 : script.content.substring(range2.start, range2.end)) !== null && _a !== void 0 ? _a : "";
          }));
        }
        codeGen.addText("// @ts-ignore\n");
        codeGen.addText("[");
        for (const varName of bindingNames) {
          if (!!htmlGen.tagNames[varName] || !!htmlGen.tagNames[(0, shared_1.hyphenate)(varName)]) {
            codeGen.addText(varName + ", ");
          }
        }
        for (const tag2 of Object.keys(htmlGen.tagNames)) {
          if (tag2.indexOf(".") >= 0) {
            codeGen.addText(tag2 + ", ");
          }
        }
        codeGen.addText("];\n");
        codeGen.addText("// @ts-ignore\n");
        codeGen.addText("[");
        codeGen.addText([...htmlGen.identifiers].join(", "));
        codeGen.addText("];\n");
      }
    }
    exports2.generate = generate2;
    function genConstructorOverloads(name = "ConstructorOverloads", nums) {
      let code = `type ${name}<T> =
`;
      if (nums === void 0) {
        for (let i = 8; i >= 1; i--) {
          gen(i);
        }
      } else {
        gen(nums);
      }
      code += `// 0
`;
      code += `{};
`;
      return code;
      function gen(i) {
        code += `// ${i}
`;
        code += `T extends {
`;
        for (let j = 1; j <= i; j++) {
          code += `(event: infer E${j}, ...payload: infer P${j}): void;
`;
        }
        code += `} ? (
`;
        for (let j = 1; j <= i; j++) {
          if (j > 1)
            code += "& ";
          code += `(E${j} extends string ? { [K${j} in E${j}]: (...payload: P${j}) => void } : {})
`;
        }
        code += `) :
`;
      }
    }
    exports2.genConstructorOverloads = genConstructorOverloads;
  }
});

// ../../packages/vue-code-gen/out/parsers/scriptSetupRanges.js
var require_scriptSetupRanges = __commonJS({
  "../../packages/vue-code-gen/out/parsers/scriptSetupRanges.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getStartEnd = exports2.findBindingVars = exports2.parseBindingRanges = exports2.parseScriptSetupRanges = void 0;
    function parseScriptSetupRanges(ts, ast) {
      let foundNonImportExportNode = false;
      let notOnTopTypeExports = [];
      let importSectionEndOffset = 0;
      let withDefaultsArg;
      let propsRuntimeArg;
      let propsTypeArg;
      let emitsRuntimeArg;
      let emitsTypeArg;
      let exposeRuntimeArg;
      let exposeTypeArg;
      let emitsTypeNums = -1;
      const bindings = parseBindingRanges(ts, ast, false);
      const typeBindings = parseBindingRanges(ts, ast, true);
      ast.forEachChild((node2) => {
        var _a;
        const isTypeExport = (ts.isTypeAliasDeclaration(node2) || ts.isInterfaceDeclaration(node2)) && ((_a = node2.modifiers) === null || _a === void 0 ? void 0 : _a.some((mod) => mod.kind === ts.SyntaxKind.ExportKeyword));
        if (!foundNonImportExportNode && !ts.isImportDeclaration(node2) && !isTypeExport && !ts.isEmptyStatement(node2) && !ts.isImportEqualsDeclaration(node2)) {
          importSectionEndOffset = node2.getStart(ast);
          foundNonImportExportNode = true;
        } else if (isTypeExport && foundNonImportExportNode) {
          notOnTopTypeExports.push(_getStartEnd(node2));
        }
      });
      ast.forEachChild(visitNode);
      return {
        importSectionEndOffset,
        notOnTopTypeExports,
        bindings,
        typeBindings,
        withDefaultsArg,
        propsRuntimeArg,
        propsTypeArg,
        emitsRuntimeArg,
        emitsTypeArg,
        emitsTypeNums,
        exposeRuntimeArg,
        exposeTypeArg
      };
      function _getStartEnd(node2) {
        return getStartEnd(node2, ast);
      }
      function visitNode(node2) {
        var _a;
        if (ts.isCallExpression(node2) && ts.isIdentifier(node2.expression)) {
          const callText = node2.expression.getText(ast);
          if (callText === "defineProps" || callText === "defineEmits" || callText === "defineExpose") {
            if (node2.arguments.length) {
              const runtimeArg = node2.arguments[0];
              if (callText === "defineProps") {
                propsRuntimeArg = _getStartEnd(runtimeArg);
              } else if (callText === "defineEmits") {
                emitsRuntimeArg = _getStartEnd(runtimeArg);
              } else if (callText === "defineExpose") {
                exposeRuntimeArg = _getStartEnd(runtimeArg);
              }
            }
            if ((_a = node2.typeArguments) === null || _a === void 0 ? void 0 : _a.length) {
              const typeArg = node2.typeArguments[0];
              if (callText === "defineProps") {
                propsTypeArg = _getStartEnd(typeArg);
              } else if (callText === "defineEmits") {
                emitsTypeArg = _getStartEnd(typeArg);
                if (ts.isTypeLiteralNode(typeArg)) {
                  emitsTypeNums = typeArg.members.length;
                }
              } else if (callText === "defineExpose") {
                exposeTypeArg = _getStartEnd(typeArg);
              }
            }
          } else if (callText === "withDefaults") {
            if (node2.arguments.length >= 2) {
              const arg = node2.arguments[1];
              withDefaultsArg = _getStartEnd(arg);
            }
          }
        }
        node2.forEachChild((child) => visitNode(child));
      }
    }
    exports2.parseScriptSetupRanges = parseScriptSetupRanges;
    function parseBindingRanges(ts, sourceFile, isType) {
      const bindings = [];
      sourceFile.forEachChild((node2) => {
        if (!isType) {
          if (ts.isVariableStatement(node2)) {
            for (const node_2 of node2.declarationList.declarations) {
              const vars = _findBindingVars(node_2.name);
              for (const _var of vars) {
                bindings.push(_var);
              }
            }
          } else if (ts.isFunctionDeclaration(node2)) {
            if (node2.name && ts.isIdentifier(node2.name)) {
              bindings.push(_getStartEnd(node2.name));
            }
          } else if (ts.isClassDeclaration(node2)) {
            if (node2.name) {
              bindings.push(_getStartEnd(node2.name));
            }
          } else if (ts.isEnumDeclaration(node2)) {
            bindings.push(_getStartEnd(node2.name));
          }
        } else {
          if (ts.isTypeAliasDeclaration(node2)) {
            bindings.push(_getStartEnd(node2.name));
          } else if (ts.isInterfaceDeclaration(node2)) {
            bindings.push(_getStartEnd(node2.name));
          }
        }
        if (ts.isImportDeclaration(node2)) {
          if (node2.importClause && (isType || !node2.importClause.isTypeOnly)) {
            if (node2.importClause.name) {
              bindings.push(_getStartEnd(node2.importClause.name));
            }
            if (node2.importClause.namedBindings) {
              if (ts.isNamedImports(node2.importClause.namedBindings)) {
                for (const element of node2.importClause.namedBindings.elements) {
                  bindings.push(_getStartEnd(element.name));
                }
              } else if (ts.isNamespaceImport(node2.importClause.namedBindings)) {
                bindings.push(_getStartEnd(node2.importClause.namedBindings.name));
              }
            }
          }
        }
      });
      return bindings;
      function _getStartEnd(node2) {
        return getStartEnd(node2, sourceFile);
      }
      function _findBindingVars(left) {
        return findBindingVars(ts, left, sourceFile);
      }
    }
    exports2.parseBindingRanges = parseBindingRanges;
    function findBindingVars(ts, left, sourceFile) {
      const vars = [];
      worker(left);
      return vars;
      function worker(_node) {
        if (ts.isIdentifier(_node)) {
          vars.push(getStartEnd(_node, sourceFile));
        } else if (ts.isObjectBindingPattern(_node) || ts.isArrayBindingPattern(_node)) {
          for (const property of _node.elements) {
            if (ts.isBindingElement(property)) {
              worker(property.name);
            }
          }
        } else if (ts.isPropertyAssignment(_node)) {
          worker(_node.initializer);
        } else if (ts.isShorthandPropertyAssignment(_node)) {
          vars.push(getStartEnd(_node.name, sourceFile));
        } else if (ts.isSpreadAssignment(_node) || ts.isSpreadElement(_node)) {
          worker(_node.expression);
        }
      }
    }
    exports2.findBindingVars = findBindingVars;
    function getStartEnd(node2, sourceFile) {
      const start = node2.getStart(sourceFile);
      const end = node2.getEnd();
      return {
        start,
        end
      };
    }
    exports2.getStartEnd = getStartEnd;
  }
});

// ../../packages/vue-code-gen/out/parsers/scriptRanges.js
var require_scriptRanges = __commonJS({
  "../../packages/vue-code-gen/out/parsers/scriptRanges.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseScriptRanges = void 0;
    var scriptSetupRanges_1 = require_scriptSetupRanges();
    function parseScriptRanges(ts, ast, hasScriptSetup, withComponentOption, withNode) {
      let exportDefault;
      const bindings = hasScriptSetup ? (0, scriptSetupRanges_1.parseBindingRanges)(ts, ast, false) : [];
      ast.forEachChild((node2) => {
        if (ts.isExportAssignment(node2)) {
          let obj;
          if (ts.isObjectLiteralExpression(node2.expression)) {
            obj = node2.expression;
          } else if (ts.isCallExpression(node2.expression) && node2.expression.arguments.length) {
            const arg0 = node2.expression.arguments[0];
            if (ts.isObjectLiteralExpression(arg0)) {
              obj = arg0;
            }
          }
          if (obj) {
            let componentsOptionNode;
            if (withComponentOption) {
              obj.forEachChild((node3) => {
                if (ts.isPropertyAssignment(node3) && ts.isIdentifier(node3.name)) {
                  if (node3.name.escapedText === "components" && ts.isObjectLiteralExpression(node3.initializer)) {
                    componentsOptionNode = node3.initializer;
                  }
                }
              });
            }
            exportDefault = Object.assign(Object.assign({}, _getStartEnd(node2)), { expression: _getStartEnd(node2.expression), args: _getStartEnd(obj), argsNode: withNode ? obj : void 0, componentsOption: componentsOptionNode ? _getStartEnd(componentsOptionNode) : void 0, componentsOptionNode: withNode ? componentsOptionNode : void 0 });
          }
        }
      });
      return {
        exportDefault,
        bindings
      };
      function _getStartEnd(node2) {
        return (0, scriptSetupRanges_1.getStartEnd)(node2, ast);
      }
    }
    exports2.parseScriptRanges = parseScriptRanges;
  }
});

// ../../node_modules/.pnpm/@babel+parser@7.17.3/node_modules/@babel/parser/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/.pnpm/@babel+parser@7.17.3/node_modules/@babel/parser/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var BaseParser2 = class {
      constructor() {
        this.sawUnambiguousESM = false;
        this.ambiguousScriptDifferentAst = false;
      }
      hasPlugin(pluginConfig) {
        if (typeof pluginConfig === "string") {
          return this.plugins.has(pluginConfig);
        } else {
          const [pluginName, pluginOptions] = pluginConfig;
          if (!this.hasPlugin(pluginName)) {
            return false;
          }
          const actualOptions = this.plugins.get(pluginName);
          for (const key of Object.keys(pluginOptions)) {
            if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {
              return false;
            }
          }
          return true;
        }
      }
      getPluginOption(plugin2, name) {
        var _this$plugins$get;
        return (_this$plugins$get = this.plugins.get(plugin2)) == null ? void 0 : _this$plugins$get[name];
      }
    };
    function setTrailingComments2(node2, comments) {
      if (node2.trailingComments === void 0) {
        node2.trailingComments = comments;
      } else {
        node2.trailingComments.unshift(...comments);
      }
    }
    function setLeadingComments2(node2, comments) {
      if (node2.leadingComments === void 0) {
        node2.leadingComments = comments;
      } else {
        node2.leadingComments.unshift(...comments);
      }
    }
    function setInnerComments2(node2, comments) {
      if (node2.innerComments === void 0) {
        node2.innerComments = comments;
      } else {
        node2.innerComments.unshift(...comments);
      }
    }
    function adjustInnerComments2(node2, elements, commentWS) {
      let lastElement = null;
      let i = elements.length;
      while (lastElement === null && i > 0) {
        lastElement = elements[--i];
      }
      if (lastElement === null || lastElement.start > commentWS.start) {
        setInnerComments2(node2, commentWS.comments);
      } else {
        setTrailingComments2(lastElement, commentWS.comments);
      }
    }
    var CommentsParser2 = class extends BaseParser2 {
      addComment(comment2) {
        if (this.filename)
          comment2.loc.filename = this.filename;
        this.state.comments.push(comment2);
      }
      processComment(node2) {
        const {
          commentStack
        } = this.state;
        const commentStackLength = commentStack.length;
        if (commentStackLength === 0)
          return;
        let i = commentStackLength - 1;
        const lastCommentWS = commentStack[i];
        if (lastCommentWS.start === node2.end) {
          lastCommentWS.leadingNode = node2;
          i--;
        }
        const {
          start: nodeStart
        } = node2;
        for (; i >= 0; i--) {
          const commentWS = commentStack[i];
          const commentEnd = commentWS.end;
          if (commentEnd > nodeStart) {
            commentWS.containingNode = node2;
            this.finalizeComment(commentWS);
            commentStack.splice(i, 1);
          } else {
            if (commentEnd === nodeStart) {
              commentWS.trailingNode = node2;
            }
            break;
          }
        }
      }
      finalizeComment(commentWS) {
        const {
          comments
        } = commentWS;
        if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
          if (commentWS.leadingNode !== null) {
            setTrailingComments2(commentWS.leadingNode, comments);
          }
          if (commentWS.trailingNode !== null) {
            setLeadingComments2(commentWS.trailingNode, comments);
          }
        } else {
          const {
            containingNode: node2,
            start: commentStart
          } = commentWS;
          if (this.input.charCodeAt(commentStart - 1) === 44) {
            switch (node2.type) {
              case "ObjectExpression":
              case "ObjectPattern":
              case "RecordExpression":
                adjustInnerComments2(node2, node2.properties, commentWS);
                break;
              case "CallExpression":
              case "OptionalCallExpression":
                adjustInnerComments2(node2, node2.arguments, commentWS);
                break;
              case "FunctionDeclaration":
              case "FunctionExpression":
              case "ArrowFunctionExpression":
              case "ObjectMethod":
              case "ClassMethod":
              case "ClassPrivateMethod":
                adjustInnerComments2(node2, node2.params, commentWS);
                break;
              case "ArrayExpression":
              case "ArrayPattern":
              case "TupleExpression":
                adjustInnerComments2(node2, node2.elements, commentWS);
                break;
              case "ExportNamedDeclaration":
              case "ImportDeclaration":
                adjustInnerComments2(node2, node2.specifiers, commentWS);
                break;
              default: {
                setInnerComments2(node2, comments);
              }
            }
          } else {
            setInnerComments2(node2, comments);
          }
        }
      }
      finalizeRemainingComments() {
        const {
          commentStack
        } = this.state;
        for (let i = commentStack.length - 1; i >= 0; i--) {
          this.finalizeComment(commentStack[i]);
        }
        this.state.commentStack = [];
      }
      resetPreviousNodeTrailingComments(node2) {
        const {
          commentStack
        } = this.state;
        const {
          length: length2
        } = commentStack;
        if (length2 === 0)
          return;
        const commentWS = commentStack[length2 - 1];
        if (commentWS.leadingNode === node2) {
          commentWS.leadingNode = null;
        }
      }
      takeSurroundingComments(node2, start, end) {
        const {
          commentStack
        } = this.state;
        const commentStackLength = commentStack.length;
        if (commentStackLength === 0)
          return;
        let i = commentStackLength - 1;
        for (; i >= 0; i--) {
          const commentWS = commentStack[i];
          const commentEnd = commentWS.end;
          const commentStart = commentWS.start;
          if (commentStart === end) {
            commentWS.leadingNode = node2;
          } else if (commentEnd === start) {
            commentWS.trailingNode = node2;
          } else if (commentEnd < start) {
            break;
          }
        }
      }
    };
    var ErrorCodes2 = Object.freeze({
      SyntaxError: "BABEL_PARSER_SYNTAX_ERROR",
      SourceTypeModuleError: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"
    });
    var ErrorMessages2 = makeErrorTemplates2({
      AccessorIsGenerator: "A %0ter cannot be a generator.",
      ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
      AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
      AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
      AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
      AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
      AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
      AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
      BadGetterArity: "A 'get' accesor must not have any formal parameters.",
      BadSetterArity: "A 'set' accesor must have exactly one formal parameter.",
      BadSetterRestParameter: "A 'set' accesor function argument must not be a rest parameter.",
      ConstructorClassField: "Classes may not have a field named 'constructor'.",
      ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
      ConstructorIsAccessor: "Class constructor may not be an accessor.",
      ConstructorIsAsync: "Constructor can't be an async function.",
      ConstructorIsGenerator: "Constructor can't be a generator.",
      DeclarationMissingInitializer: "'%0' require an initialization value.",
      DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.",
      DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
      DecoratorExportClass: "Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.",
      DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
      DecoratorStaticBlock: "Decorators can't be used with a static block.",
      DeletePrivateField: "Deleting a private field is not allowed.",
      DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
      DuplicateConstructor: "Duplicate constructor in the same class.",
      DuplicateDefaultExport: "Only one default export allowed per module.",
      DuplicateExport: "`%0` has already been exported. Exported identifiers must be unique.",
      DuplicateProto: "Redefinition of __proto__ property.",
      DuplicateRegExpFlags: "Duplicate regular expression flag.",
      ElementAfterRest: "Rest element must be last element.",
      EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
      ExportBindingIsString: "A string literal cannot be used as an exported binding without `from`.\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?",
      ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
      ForInOfLoopInitializer: "'%0' loop variable declaration may not have an initializer.",
      ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
      ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
      GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
      IllegalBreakContinue: "Unsyntactic %0.",
      IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
      IllegalReturn: "'return' outside of function.",
      ImportBindingIsString: 'A string literal cannot be used as an imported binding.\n- Did you mean `import { "%0" as foo }`?',
      ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
      ImportCallArity: "`import()` requires exactly %0.",
      ImportCallNotNewExpression: "Cannot use new with import(...).",
      ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
      IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
      InvalidBigIntLiteral: "Invalid BigIntLiteral.",
      InvalidCodePoint: "Code point out of bounds.",
      InvalidCoverInitializedName: "Invalid shorthand property initializer.",
      InvalidDecimal: "Invalid decimal.",
      InvalidDigit: "Expected number in radix %0.",
      InvalidEscapeSequence: "Bad character escape sequence.",
      InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
      InvalidEscapedReservedWord: "Escape sequence in keyword %0.",
      InvalidIdentifier: "Invalid identifier %0.",
      InvalidLhs: "Invalid left-hand side in %0.",
      InvalidLhsBinding: "Binding invalid left-hand side in %0.",
      InvalidNumber: "Invalid number.",
      InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
      InvalidOrUnexpectedToken: "Unexpected character '%0'.",
      InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
      InvalidPrivateFieldResolution: "Private name #%0 is not defined.",
      InvalidPropertyBindingPattern: "Binding member expression.",
      InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
      InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
      LabelRedeclaration: "Label '%0' is already declared.",
      LetInLexicalBinding: "'let' is not allowed to be used as a name in 'let' or 'const' declarations.",
      LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
      MalformedRegExpFlags: "Invalid regular expression flag.",
      MissingClassName: "A class name is required.",
      MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
      MissingSemicolon: "Missing semicolon.",
      MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
      MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
      ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
      ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
      ModuleAttributesWithDuplicateKeys: 'Duplicate key "%0" is not allowed in module attributes.',
      ModuleExportNameHasLoneSurrogate: "An export name cannot include a lone surrogate, found '\\u%0'.",
      ModuleExportUndefined: "Export '%0' is not defined.",
      MultipleDefaultsInSwitch: "Multiple default clauses.",
      NewlineAfterThrow: "Illegal newline after throw.",
      NoCatchOrFinally: "Missing catch or finally clause.",
      NumberIdentifier: "Identifier directly after number.",
      NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
      ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
      OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
      OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
      OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
      ParamDupe: "Argument name clash.",
      PatternHasAccessor: "Object pattern can't contain getter or setter.",
      PatternHasMethod: "Object pattern can't contain methods.",
      PipeBodyIsTighter: "Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
      PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
      PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
      PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "%0" }.',
      PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
      PipeUnparenthesizedBody: "Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.",
      PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
      PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
      PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
      PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
      PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
      PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
      PrivateInExpectedIn: "Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).",
      PrivateNameRedeclaration: "Duplicate private name #%0.",
      RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
      RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
      RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
      RecordNoProto: "'__proto__' is not allowed in Record expressions.",
      RestTrailingComma: "Unexpected trailing comma after rest element.",
      SloppyFunction: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
      StaticPrototype: "Classes may not have static property named prototype.",
      StrictDelete: "Deleting local variable in strict mode.",
      StrictEvalArguments: "Assigning to '%0' in strict mode.",
      StrictEvalArgumentsBinding: "Binding '%0' in strict mode.",
      StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
      StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
      StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
      StrictWith: "'with' in strict mode.",
      SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
      SuperPrivateField: "Private fields can't be accessed on super.",
      TrailingDecorator: "Decorators must be attached to a class element.",
      TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
      TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
      TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
      UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
      UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
      UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
      UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
      UnexpectedKeyword: "Unexpected keyword '%0'.",
      UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
      UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
      UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
      UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
      UnexpectedPrivateField: "Unexpected private name.",
      UnexpectedReservedWord: "Unexpected reserved word '%0'.",
      UnexpectedSuper: "'super' is only allowed in object methods and classes.",
      UnexpectedToken: "Unexpected token '%0'.",
      UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
      UnsupportedBind: "Binding should be performed on object property.",
      UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
      UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
      UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
      UnsupportedMetaProperty: "The only valid meta property for %0 is %0.%1.",
      UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
      UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
      UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
      UnterminatedComment: "Unterminated comment.",
      UnterminatedRegExp: "Unterminated regular expression.",
      UnterminatedString: "Unterminated string constant.",
      UnterminatedTemplate: "Unterminated template.",
      VarRedeclaration: "Identifier '%0' has already been declared.",
      YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
      YieldInParameter: "Yield expression is not allowed in formal parameters.",
      ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
    }, ErrorCodes2.SyntaxError);
    var SourceTypeModuleErrorMessages2 = makeErrorTemplates2({
      ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: "module"'`,
      ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: "module"'`
    }, ErrorCodes2.SourceTypeModuleError);
    function keepReasonCodeCompat2(reasonCode, syntaxPlugin) {
      {
        if (syntaxPlugin === "flow" && reasonCode === "PatternIsOptional") {
          return "OptionalBindingPattern";
        }
      }
      return reasonCode;
    }
    function makeErrorTemplates2(messages, code, syntaxPlugin) {
      const templates = {};
      Object.keys(messages).forEach((reasonCode) => {
        templates[reasonCode] = Object.freeze({
          code,
          reasonCode: keepReasonCodeCompat2(reasonCode, syntaxPlugin),
          template: messages[reasonCode]
        });
      });
      return Object.freeze(templates);
    }
    var ParserError2 = class extends CommentsParser2 {
      raise({
        code,
        reasonCode,
        template
      }, origin, ...params) {
        return this.raiseWithData(origin.node ? origin.node.loc.start : origin.at, {
          code,
          reasonCode
        }, template, ...params);
      }
      raiseOverwrite(loc, {
        code,
        template
      }, ...params) {
        const pos = loc.index;
        const message = template.replace(/%(\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;
        if (this.options.errorRecovery) {
          const errors2 = this.state.errors;
          for (let i = errors2.length - 1; i >= 0; i--) {
            const error2 = errors2[i];
            if (error2.pos === pos) {
              return Object.assign(error2, {
                message
              });
            } else if (error2.pos < pos) {
              break;
            }
          }
        }
        return this._raise({
          code,
          loc,
          pos
        }, message);
      }
      raiseWithData(loc, data, errorTemplate, ...params) {
        const pos = loc.index;
        const message = errorTemplate.replace(/%(\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;
        return this._raise(Object.assign({
          loc,
          pos
        }, data), message);
      }
      _raise(errorContext, message) {
        const err = new SyntaxError(message);
        Object.assign(err, errorContext);
        if (this.options.errorRecovery) {
          if (!this.isLookahead)
            this.state.errors.push(err);
          return err;
        } else {
          throw err;
        }
      }
    };
    var {
      defineProperty
    } = Object;
    var toUnenumerable = (object2, key) => defineProperty(object2, key, {
      enumerable: false,
      value: object2[key]
    });
    function toESTreeLocation(node2) {
      toUnenumerable(node2.loc.start, "index");
      toUnenumerable(node2.loc.end, "index");
      return node2;
    }
    var estree2 = (superClass) => class extends superClass {
      parse() {
        const file = toESTreeLocation(super.parse());
        if (this.options.tokens) {
          file.tokens = file.tokens.map(toESTreeLocation);
        }
        return file;
      }
      parseRegExpLiteral({
        pattern,
        flags
      }) {
        let regex = null;
        try {
          regex = new RegExp(pattern, flags);
        } catch (e) {
        }
        const node2 = this.estreeParseLiteral(regex);
        node2.regex = {
          pattern,
          flags
        };
        return node2;
      }
      parseBigIntLiteral(value) {
        let bigInt;
        try {
          bigInt = BigInt(value);
        } catch (_unused) {
          bigInt = null;
        }
        const node2 = this.estreeParseLiteral(bigInt);
        node2.bigint = String(node2.value || value);
        return node2;
      }
      parseDecimalLiteral(value) {
        const decimal = null;
        const node2 = this.estreeParseLiteral(decimal);
        node2.decimal = String(node2.value || value);
        return node2;
      }
      estreeParseLiteral(value) {
        return this.parseLiteral(value, "Literal");
      }
      parseStringLiteral(value) {
        return this.estreeParseLiteral(value);
      }
      parseNumericLiteral(value) {
        return this.estreeParseLiteral(value);
      }
      parseNullLiteral() {
        return this.estreeParseLiteral(null);
      }
      parseBooleanLiteral(value) {
        return this.estreeParseLiteral(value);
      }
      directiveToStmt(directive) {
        const directiveLiteral = directive.value;
        const stmt = this.startNodeAt(directive.start, directive.loc.start);
        const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);
        expression.value = directiveLiteral.extra.expressionValue;
        expression.raw = directiveLiteral.extra.raw;
        stmt.expression = this.finishNodeAt(expression, "Literal", directiveLiteral.loc.end);
        stmt.directive = directiveLiteral.extra.raw.slice(1, -1);
        return this.finishNodeAt(stmt, "ExpressionStatement", directive.loc.end);
      }
      initFunction(node2, isAsync) {
        super.initFunction(node2, isAsync);
        node2.expression = false;
      }
      checkDeclaration(node2) {
        if (node2 != null && this.isObjectProperty(node2)) {
          this.checkDeclaration(node2.value);
        } else {
          super.checkDeclaration(node2);
        }
      }
      getObjectOrClassMethodParams(method) {
        return method.value.params;
      }
      isValidDirective(stmt) {
        var _stmt$expression$extr;
        return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
      }
      parseBlockBody(node2, ...args) {
        super.parseBlockBody(node2, ...args);
        const directiveStatements = node2.directives.map((d) => this.directiveToStmt(d));
        node2.body = directiveStatements.concat(node2.body);
        delete node2.directives;
      }
      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);
        if (method.typeParameters) {
          method.value.typeParameters = method.typeParameters;
          delete method.typeParameters;
        }
        classBody.body.push(method);
      }
      parsePrivateName() {
        const node2 = super.parsePrivateName();
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return node2;
          }
        }
        return this.convertPrivateNameToPrivateIdentifier(node2);
      }
      convertPrivateNameToPrivateIdentifier(node2) {
        const name = super.getPrivateNameSV(node2);
        node2 = node2;
        delete node2.id;
        node2.name = name;
        node2.type = "PrivateIdentifier";
        return node2;
      }
      isPrivateName(node2) {
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return super.isPrivateName(node2);
          }
        }
        return node2.type === "PrivateIdentifier";
      }
      getPrivateNameSV(node2) {
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return super.getPrivateNameSV(node2);
          }
        }
        return node2.name;
      }
      parseLiteral(value, type) {
        const node2 = super.parseLiteral(value, type);
        node2.raw = node2.extra.raw;
        delete node2.extra;
        return node2;
      }
      parseFunctionBody(node2, allowExpression, isMethod = false) {
        super.parseFunctionBody(node2, allowExpression, isMethod);
        node2.expression = node2.body.type !== "BlockStatement";
      }
      parseMethod(node2, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
        let funcNode = this.startNode();
        funcNode.kind = node2.kind;
        funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
        funcNode.type = "FunctionExpression";
        delete funcNode.kind;
        node2.value = funcNode;
        if (type === "ClassPrivateMethod") {
          node2.computed = false;
        }
        type = "MethodDefinition";
        return this.finishNode(node2, type);
      }
      parseClassProperty(...args) {
        const propertyNode = super.parseClassProperty(...args);
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return propertyNode;
          }
        }
        propertyNode.type = "PropertyDefinition";
        return propertyNode;
      }
      parseClassPrivateProperty(...args) {
        const propertyNode = super.parseClassPrivateProperty(...args);
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return propertyNode;
          }
        }
        propertyNode.type = "PropertyDefinition";
        propertyNode.computed = false;
        return propertyNode;
      }
      parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
        const node2 = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
        if (node2) {
          node2.type = "Property";
          if (node2.kind === "method")
            node2.kind = "init";
          node2.shorthand = false;
        }
        return node2;
      }
      parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
        const node2 = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
        if (node2) {
          node2.kind = "init";
          node2.type = "Property";
        }
        return node2;
      }
      isAssignable(node2, isBinding) {
        if (node2 != null && this.isObjectProperty(node2)) {
          return this.isAssignable(node2.value, isBinding);
        }
        return super.isAssignable(node2, isBinding);
      }
      toAssignable(node2, isLHS = false) {
        if (node2 != null && this.isObjectProperty(node2)) {
          const {
            key,
            value
          } = node2;
          if (this.isPrivateName(key)) {
            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
          }
          this.toAssignable(value, isLHS);
          return node2;
        }
        return super.toAssignable(node2, isLHS);
      }
      toAssignableObjectExpressionProp(prop, ...args) {
        if (prop.kind === "get" || prop.kind === "set") {
          this.raise(ErrorMessages2.PatternHasAccessor, {
            node: prop.key
          });
        } else if (prop.method) {
          this.raise(ErrorMessages2.PatternHasMethod, {
            node: prop.key
          });
        } else {
          super.toAssignableObjectExpressionProp(prop, ...args);
        }
      }
      finishCallExpression(node2, optional) {
        super.finishCallExpression(node2, optional);
        if (node2.callee.type === "Import") {
          node2.type = "ImportExpression";
          node2.source = node2.arguments[0];
          if (this.hasPlugin("importAssertions")) {
            var _node$arguments$;
            node2.attributes = (_node$arguments$ = node2.arguments[1]) != null ? _node$arguments$ : null;
          }
          delete node2.arguments;
          delete node2.callee;
        }
        return node2;
      }
      toReferencedArguments(node2) {
        if (node2.type === "ImportExpression") {
          return;
        }
        super.toReferencedArguments(node2);
      }
      parseExport(node2) {
        super.parseExport(node2);
        switch (node2.type) {
          case "ExportAllDeclaration":
            node2.exported = null;
            break;
          case "ExportNamedDeclaration":
            if (node2.specifiers.length === 1 && node2.specifiers[0].type === "ExportNamespaceSpecifier") {
              node2.type = "ExportAllDeclaration";
              node2.exported = node2.specifiers[0].exported;
              delete node2.specifiers;
            }
            break;
        }
        return node2;
      }
      parseSubscript(base2, startPos, startLoc, noCalls, state) {
        const node2 = super.parseSubscript(base2, startPos, startLoc, noCalls, state);
        if (state.optionalChainMember) {
          if (node2.type === "OptionalMemberExpression" || node2.type === "OptionalCallExpression") {
            node2.type = node2.type.substring(8);
          }
          if (state.stop) {
            const chain = this.startNodeAtNode(node2);
            chain.expression = node2;
            return this.finishNode(chain, "ChainExpression");
          }
        } else if (node2.type === "MemberExpression" || node2.type === "CallExpression") {
          node2.optional = false;
        }
        return node2;
      }
      hasPropertyAsPrivateName(node2) {
        if (node2.type === "ChainExpression") {
          node2 = node2.expression;
        }
        return super.hasPropertyAsPrivateName(node2);
      }
      isOptionalChain(node2) {
        return node2.type === "ChainExpression";
      }
      isObjectProperty(node2) {
        return node2.type === "Property" && node2.kind === "init" && !node2.method;
      }
      isObjectMethod(node2) {
        return node2.method || node2.kind === "get" || node2.kind === "set";
      }
      finishNodeAt(node2, type, endLoc) {
        return toESTreeLocation(super.finishNodeAt(node2, type, endLoc));
      }
      resetEndLocation(node2, endLoc = this.state.lastTokEndLoc) {
        super.resetEndLocation(node2, endLoc);
        toESTreeLocation(node2);
      }
    };
    var TokContext2 = class {
      constructor(token, preserveSpace) {
        this.token = void 0;
        this.preserveSpace = void 0;
        this.token = token;
        this.preserveSpace = !!preserveSpace;
      }
    };
    var types2 = {
      brace: new TokContext2("{"),
      j_oTag: new TokContext2("<tag"),
      j_cTag: new TokContext2("</tag"),
      j_expr: new TokContext2("<tag>...</tag>", true)
    };
    {
      types2.template = new TokContext2("`", true);
    }
    var beforeExpr2 = true;
    var startsExpr2 = true;
    var isLoop2 = true;
    var isAssign2 = true;
    var prefix2 = true;
    var postfix2 = true;
    var ExportedTokenType2 = class {
      constructor(label, conf = {}) {
        this.label = void 0;
        this.keyword = void 0;
        this.beforeExpr = void 0;
        this.startsExpr = void 0;
        this.rightAssociative = void 0;
        this.isLoop = void 0;
        this.isAssign = void 0;
        this.prefix = void 0;
        this.postfix = void 0;
        this.binop = void 0;
        this.label = label;
        this.keyword = conf.keyword;
        this.beforeExpr = !!conf.beforeExpr;
        this.startsExpr = !!conf.startsExpr;
        this.rightAssociative = !!conf.rightAssociative;
        this.isLoop = !!conf.isLoop;
        this.isAssign = !!conf.isAssign;
        this.prefix = !!conf.prefix;
        this.postfix = !!conf.postfix;
        this.binop = conf.binop != null ? conf.binop : null;
        {
          this.updateContext = null;
        }
      }
    };
    var keywords$12 = /* @__PURE__ */ new Map();
    function createKeyword2(name, options = {}) {
      options.keyword = name;
      const token = createToken2(name, options);
      keywords$12.set(name, token);
      return token;
    }
    function createBinop2(name, binop) {
      return createToken2(name, {
        beforeExpr: beforeExpr2,
        binop
      });
    }
    var tokenTypeCounter2 = -1;
    var tokenTypes2 = [];
    var tokenLabels2 = [];
    var tokenBinops2 = [];
    var tokenBeforeExprs2 = [];
    var tokenStartsExprs2 = [];
    var tokenPrefixes2 = [];
    function createToken2(name, options = {}) {
      var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
      ++tokenTypeCounter2;
      tokenLabels2.push(name);
      tokenBinops2.push((_options$binop = options.binop) != null ? _options$binop : -1);
      tokenBeforeExprs2.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);
      tokenStartsExprs2.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);
      tokenPrefixes2.push((_options$prefix = options.prefix) != null ? _options$prefix : false);
      tokenTypes2.push(new ExportedTokenType2(name, options));
      return tokenTypeCounter2;
    }
    function createKeywordLike2(name, options = {}) {
      var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
      ++tokenTypeCounter2;
      keywords$12.set(name, tokenTypeCounter2);
      tokenLabels2.push(name);
      tokenBinops2.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);
      tokenBeforeExprs2.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);
      tokenStartsExprs2.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);
      tokenPrefixes2.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);
      tokenTypes2.push(new ExportedTokenType2("name", options));
      return tokenTypeCounter2;
    }
    var tt2 = {
      bracketL: createToken2("[", {
        beforeExpr: beforeExpr2,
        startsExpr: startsExpr2
      }),
      bracketHashL: createToken2("#[", {
        beforeExpr: beforeExpr2,
        startsExpr: startsExpr2
      }),
      bracketBarL: createToken2("[|", {
        beforeExpr: beforeExpr2,
        startsExpr: startsExpr2
      }),
      bracketR: createToken2("]"),
      bracketBarR: createToken2("|]"),
      braceL: createToken2("{", {
        beforeExpr: beforeExpr2,
        startsExpr: startsExpr2
      }),
      braceBarL: createToken2("{|", {
        beforeExpr: beforeExpr2,
        startsExpr: startsExpr2
      }),
      braceHashL: createToken2("#{", {
        beforeExpr: beforeExpr2,
        startsExpr: startsExpr2
      }),
      braceR: createToken2("}", {
        beforeExpr: beforeExpr2
      }),
      braceBarR: createToken2("|}"),
      parenL: createToken2("(", {
        beforeExpr: beforeExpr2,
        startsExpr: startsExpr2
      }),
      parenR: createToken2(")"),
      comma: createToken2(",", {
        beforeExpr: beforeExpr2
      }),
      semi: createToken2(";", {
        beforeExpr: beforeExpr2
      }),
      colon: createToken2(":", {
        beforeExpr: beforeExpr2
      }),
      doubleColon: createToken2("::", {
        beforeExpr: beforeExpr2
      }),
      dot: createToken2("."),
      question: createToken2("?", {
        beforeExpr: beforeExpr2
      }),
      questionDot: createToken2("?."),
      arrow: createToken2("=>", {
        beforeExpr: beforeExpr2
      }),
      template: createToken2("template"),
      ellipsis: createToken2("...", {
        beforeExpr: beforeExpr2
      }),
      backQuote: createToken2("`", {
        startsExpr: startsExpr2
      }),
      dollarBraceL: createToken2("${", {
        beforeExpr: beforeExpr2,
        startsExpr: startsExpr2
      }),
      templateTail: createToken2("...`", {
        startsExpr: startsExpr2
      }),
      templateNonTail: createToken2("...${", {
        beforeExpr: beforeExpr2,
        startsExpr: startsExpr2
      }),
      at: createToken2("@"),
      hash: createToken2("#", {
        startsExpr: startsExpr2
      }),
      interpreterDirective: createToken2("#!..."),
      eq: createToken2("=", {
        beforeExpr: beforeExpr2,
        isAssign: isAssign2
      }),
      assign: createToken2("_=", {
        beforeExpr: beforeExpr2,
        isAssign: isAssign2
      }),
      slashAssign: createToken2("_=", {
        beforeExpr: beforeExpr2,
        isAssign: isAssign2
      }),
      xorAssign: createToken2("_=", {
        beforeExpr: beforeExpr2,
        isAssign: isAssign2
      }),
      moduloAssign: createToken2("_=", {
        beforeExpr: beforeExpr2,
        isAssign: isAssign2
      }),
      incDec: createToken2("++/--", {
        prefix: prefix2,
        postfix: postfix2,
        startsExpr: startsExpr2
      }),
      bang: createToken2("!", {
        beforeExpr: beforeExpr2,
        prefix: prefix2,
        startsExpr: startsExpr2
      }),
      tilde: createToken2("~", {
        beforeExpr: beforeExpr2,
        prefix: prefix2,
        startsExpr: startsExpr2
      }),
      doubleCaret: createToken2("^^", {
        startsExpr: startsExpr2
      }),
      doubleAt: createToken2("@@", {
        startsExpr: startsExpr2
      }),
      pipeline: createBinop2("|>", 0),
      nullishCoalescing: createBinop2("??", 1),
      logicalOR: createBinop2("||", 1),
      logicalAND: createBinop2("&&", 2),
      bitwiseOR: createBinop2("|", 3),
      bitwiseXOR: createBinop2("^", 4),
      bitwiseAND: createBinop2("&", 5),
      equality: createBinop2("==/!=/===/!==", 6),
      lt: createBinop2("</>/<=/>=", 7),
      gt: createBinop2("</>/<=/>=", 7),
      relational: createBinop2("</>/<=/>=", 7),
      bitShift: createBinop2("<</>>/>>>", 8),
      bitShiftL: createBinop2("<</>>/>>>", 8),
      bitShiftR: createBinop2("<</>>/>>>", 8),
      plusMin: createToken2("+/-", {
        beforeExpr: beforeExpr2,
        binop: 9,
        prefix: prefix2,
        startsExpr: startsExpr2
      }),
      modulo: createToken2("%", {
        binop: 10,
        startsExpr: startsExpr2
      }),
      star: createToken2("*", {
        binop: 10
      }),
      slash: createBinop2("/", 10),
      exponent: createToken2("**", {
        beforeExpr: beforeExpr2,
        binop: 11,
        rightAssociative: true
      }),
      _in: createKeyword2("in", {
        beforeExpr: beforeExpr2,
        binop: 7
      }),
      _instanceof: createKeyword2("instanceof", {
        beforeExpr: beforeExpr2,
        binop: 7
      }),
      _break: createKeyword2("break"),
      _case: createKeyword2("case", {
        beforeExpr: beforeExpr2
      }),
      _catch: createKeyword2("catch"),
      _continue: createKeyword2("continue"),
      _debugger: createKeyword2("debugger"),
      _default: createKeyword2("default", {
        beforeExpr: beforeExpr2
      }),
      _else: createKeyword2("else", {
        beforeExpr: beforeExpr2
      }),
      _finally: createKeyword2("finally"),
      _function: createKeyword2("function", {
        startsExpr: startsExpr2
      }),
      _if: createKeyword2("if"),
      _return: createKeyword2("return", {
        beforeExpr: beforeExpr2
      }),
      _switch: createKeyword2("switch"),
      _throw: createKeyword2("throw", {
        beforeExpr: beforeExpr2,
        prefix: prefix2,
        startsExpr: startsExpr2
      }),
      _try: createKeyword2("try"),
      _var: createKeyword2("var"),
      _const: createKeyword2("const"),
      _with: createKeyword2("with"),
      _new: createKeyword2("new", {
        beforeExpr: beforeExpr2,
        startsExpr: startsExpr2
      }),
      _this: createKeyword2("this", {
        startsExpr: startsExpr2
      }),
      _super: createKeyword2("super", {
        startsExpr: startsExpr2
      }),
      _class: createKeyword2("class", {
        startsExpr: startsExpr2
      }),
      _extends: createKeyword2("extends", {
        beforeExpr: beforeExpr2
      }),
      _export: createKeyword2("export"),
      _import: createKeyword2("import", {
        startsExpr: startsExpr2
      }),
      _null: createKeyword2("null", {
        startsExpr: startsExpr2
      }),
      _true: createKeyword2("true", {
        startsExpr: startsExpr2
      }),
      _false: createKeyword2("false", {
        startsExpr: startsExpr2
      }),
      _typeof: createKeyword2("typeof", {
        beforeExpr: beforeExpr2,
        prefix: prefix2,
        startsExpr: startsExpr2
      }),
      _void: createKeyword2("void", {
        beforeExpr: beforeExpr2,
        prefix: prefix2,
        startsExpr: startsExpr2
      }),
      _delete: createKeyword2("delete", {
        beforeExpr: beforeExpr2,
        prefix: prefix2,
        startsExpr: startsExpr2
      }),
      _do: createKeyword2("do", {
        isLoop: isLoop2,
        beforeExpr: beforeExpr2
      }),
      _for: createKeyword2("for", {
        isLoop: isLoop2
      }),
      _while: createKeyword2("while", {
        isLoop: isLoop2
      }),
      _as: createKeywordLike2("as", {
        startsExpr: startsExpr2
      }),
      _assert: createKeywordLike2("assert", {
        startsExpr: startsExpr2
      }),
      _async: createKeywordLike2("async", {
        startsExpr: startsExpr2
      }),
      _await: createKeywordLike2("await", {
        startsExpr: startsExpr2
      }),
      _from: createKeywordLike2("from", {
        startsExpr: startsExpr2
      }),
      _get: createKeywordLike2("get", {
        startsExpr: startsExpr2
      }),
      _let: createKeywordLike2("let", {
        startsExpr: startsExpr2
      }),
      _meta: createKeywordLike2("meta", {
        startsExpr: startsExpr2
      }),
      _of: createKeywordLike2("of", {
        startsExpr: startsExpr2
      }),
      _sent: createKeywordLike2("sent", {
        startsExpr: startsExpr2
      }),
      _set: createKeywordLike2("set", {
        startsExpr: startsExpr2
      }),
      _static: createKeywordLike2("static", {
        startsExpr: startsExpr2
      }),
      _yield: createKeywordLike2("yield", {
        startsExpr: startsExpr2
      }),
      _asserts: createKeywordLike2("asserts", {
        startsExpr: startsExpr2
      }),
      _checks: createKeywordLike2("checks", {
        startsExpr: startsExpr2
      }),
      _exports: createKeywordLike2("exports", {
        startsExpr: startsExpr2
      }),
      _global: createKeywordLike2("global", {
        startsExpr: startsExpr2
      }),
      _implements: createKeywordLike2("implements", {
        startsExpr: startsExpr2
      }),
      _intrinsic: createKeywordLike2("intrinsic", {
        startsExpr: startsExpr2
      }),
      _infer: createKeywordLike2("infer", {
        startsExpr: startsExpr2
      }),
      _is: createKeywordLike2("is", {
        startsExpr: startsExpr2
      }),
      _mixins: createKeywordLike2("mixins", {
        startsExpr: startsExpr2
      }),
      _proto: createKeywordLike2("proto", {
        startsExpr: startsExpr2
      }),
      _require: createKeywordLike2("require", {
        startsExpr: startsExpr2
      }),
      _keyof: createKeywordLike2("keyof", {
        startsExpr: startsExpr2
      }),
      _readonly: createKeywordLike2("readonly", {
        startsExpr: startsExpr2
      }),
      _unique: createKeywordLike2("unique", {
        startsExpr: startsExpr2
      }),
      _abstract: createKeywordLike2("abstract", {
        startsExpr: startsExpr2
      }),
      _declare: createKeywordLike2("declare", {
        startsExpr: startsExpr2
      }),
      _enum: createKeywordLike2("enum", {
        startsExpr: startsExpr2
      }),
      _module: createKeywordLike2("module", {
        startsExpr: startsExpr2
      }),
      _namespace: createKeywordLike2("namespace", {
        startsExpr: startsExpr2
      }),
      _interface: createKeywordLike2("interface", {
        startsExpr: startsExpr2
      }),
      _type: createKeywordLike2("type", {
        startsExpr: startsExpr2
      }),
      _opaque: createKeywordLike2("opaque", {
        startsExpr: startsExpr2
      }),
      name: createToken2("name", {
        startsExpr: startsExpr2
      }),
      string: createToken2("string", {
        startsExpr: startsExpr2
      }),
      num: createToken2("num", {
        startsExpr: startsExpr2
      }),
      bigint: createToken2("bigint", {
        startsExpr: startsExpr2
      }),
      decimal: createToken2("decimal", {
        startsExpr: startsExpr2
      }),
      regexp: createToken2("regexp", {
        startsExpr: startsExpr2
      }),
      privateName: createToken2("#name", {
        startsExpr: startsExpr2
      }),
      eof: createToken2("eof"),
      jsxName: createToken2("jsxName"),
      jsxText: createToken2("jsxText", {
        beforeExpr: true
      }),
      jsxTagStart: createToken2("jsxTagStart", {
        startsExpr: true
      }),
      jsxTagEnd: createToken2("jsxTagEnd"),
      placeholder: createToken2("%%", {
        startsExpr: true
      })
    };
    function tokenIsIdentifier2(token) {
      return token >= 93 && token <= 128;
    }
    function tokenKeywordOrIdentifierIsKeyword2(token) {
      return token <= 92;
    }
    function tokenIsKeywordOrIdentifier2(token) {
      return token >= 58 && token <= 128;
    }
    function tokenIsLiteralPropertyName2(token) {
      return token >= 58 && token <= 132;
    }
    function tokenComesBeforeExpression2(token) {
      return tokenBeforeExprs2[token];
    }
    function tokenCanStartExpression2(token) {
      return tokenStartsExprs2[token];
    }
    function tokenIsAssignment2(token) {
      return token >= 29 && token <= 33;
    }
    function tokenIsFlowInterfaceOrTypeOrOpaque2(token) {
      return token >= 125 && token <= 127;
    }
    function tokenIsLoop2(token) {
      return token >= 90 && token <= 92;
    }
    function tokenIsKeyword2(token) {
      return token >= 58 && token <= 92;
    }
    function tokenIsOperator2(token) {
      return token >= 39 && token <= 59;
    }
    function tokenIsPostfix2(token) {
      return token === 34;
    }
    function tokenIsPrefix2(token) {
      return tokenPrefixes2[token];
    }
    function tokenIsTSTypeOperator2(token) {
      return token >= 117 && token <= 119;
    }
    function tokenIsTSDeclarationStart2(token) {
      return token >= 120 && token <= 126;
    }
    function tokenLabelName2(token) {
      return tokenLabels2[token];
    }
    function tokenOperatorPrecedence2(token) {
      return tokenBinops2[token];
    }
    function tokenIsRightAssociative2(token) {
      return token === 57;
    }
    function tokenIsTemplate(token) {
      return token >= 24 && token <= 25;
    }
    function getExportedToken2(token) {
      return tokenTypes2[token];
    }
    {
      tokenTypes2[8].updateContext = (context) => {
        context.pop();
      };
      tokenTypes2[5].updateContext = tokenTypes2[7].updateContext = tokenTypes2[23].updateContext = (context) => {
        context.push(types2.brace);
      };
      tokenTypes2[22].updateContext = (context) => {
        if (context[context.length - 1] === types2.template) {
          context.pop();
        } else {
          context.push(types2.template);
        }
      };
      tokenTypes2[138].updateContext = (context) => {
        context.push(types2.j_expr, types2.j_oTag);
      };
    }
    var Position3 = class {
      constructor(line, col, index) {
        this.line = void 0;
        this.column = void 0;
        this.index = void 0;
        this.line = line;
        this.column = col;
        this.index = index;
      }
    };
    var SourceLocation2 = class {
      constructor(start, end) {
        this.start = void 0;
        this.end = void 0;
        this.filename = void 0;
        this.identifierName = void 0;
        this.start = start;
        this.end = end;
      }
    };
    function createPositionWithColumnOffset(position, columnOffset) {
      const {
        line,
        column,
        index
      } = position;
      return new Position3(line, column + columnOffset, index + columnOffset);
    }
    var nonASCIIidentifierStartChars2 = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
    var nonASCIIidentifierChars2 = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
    var nonASCIIidentifierStart2 = new RegExp("[" + nonASCIIidentifierStartChars2 + "]");
    var nonASCIIidentifier2 = new RegExp("[" + nonASCIIidentifierStartChars2 + nonASCIIidentifierChars2 + "]");
    nonASCIIidentifierStartChars2 = nonASCIIidentifierChars2 = null;
    var astralIdentifierStartCodes2 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
    var astralIdentifierCodes2 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
    function isInAstralSet2(code, set) {
      let pos = 65536;
      for (let i = 0, length2 = set.length; i < length2; i += 2) {
        pos += set[i];
        if (pos > code)
          return false;
        pos += set[i + 1];
        if (pos >= code)
          return true;
      }
      return false;
    }
    function isIdentifierStart2(code) {
      if (code < 65)
        return code === 36;
      if (code <= 90)
        return true;
      if (code < 97)
        return code === 95;
      if (code <= 122)
        return true;
      if (code <= 65535) {
        return code >= 170 && nonASCIIidentifierStart2.test(String.fromCharCode(code));
      }
      return isInAstralSet2(code, astralIdentifierStartCodes2);
    }
    function isIdentifierChar2(code) {
      if (code < 48)
        return code === 36;
      if (code < 58)
        return true;
      if (code < 65)
        return false;
      if (code <= 90)
        return true;
      if (code < 97)
        return code === 95;
      if (code <= 122)
        return true;
      if (code <= 65535) {
        return code >= 170 && nonASCIIidentifier2.test(String.fromCharCode(code));
      }
      return isInAstralSet2(code, astralIdentifierStartCodes2) || isInAstralSet2(code, astralIdentifierCodes2);
    }
    var reservedWords2 = {
      keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
      strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
      strictBind: ["eval", "arguments"]
    };
    var keywords2 = new Set(reservedWords2.keyword);
    var reservedWordsStrictSet2 = new Set(reservedWords2.strict);
    var reservedWordsStrictBindSet2 = new Set(reservedWords2.strictBind);
    function isReservedWord2(word, inModule) {
      return inModule && word === "await" || word === "enum";
    }
    function isStrictReservedWord2(word, inModule) {
      return isReservedWord2(word, inModule) || reservedWordsStrictSet2.has(word);
    }
    function isStrictBindOnlyReservedWord2(word) {
      return reservedWordsStrictBindSet2.has(word);
    }
    function isStrictBindReservedWord2(word, inModule) {
      return isStrictReservedWord2(word, inModule) || isStrictBindOnlyReservedWord2(word);
    }
    function isKeyword2(word) {
      return keywords2.has(word);
    }
    function isIteratorStart2(current, next, next2) {
      return current === 64 && next === 64 && isIdentifierStart2(next2);
    }
    var reservedWordLikeSet2 = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
    function canBeReservedWord2(word) {
      return reservedWordLikeSet2.has(word);
    }
    var SCOPE_OTHER2 = 0;
    var SCOPE_PROGRAM2 = 1;
    var SCOPE_FUNCTION2 = 2;
    var SCOPE_ARROW2 = 4;
    var SCOPE_SIMPLE_CATCH2 = 8;
    var SCOPE_SUPER2 = 16;
    var SCOPE_DIRECT_SUPER2 = 32;
    var SCOPE_CLASS2 = 64;
    var SCOPE_STATIC_BLOCK2 = 128;
    var SCOPE_TS_MODULE2 = 256;
    var SCOPE_VAR2 = SCOPE_PROGRAM2 | SCOPE_FUNCTION2 | SCOPE_TS_MODULE2;
    var BIND_KIND_VALUE2 = 1;
    var BIND_KIND_TYPE2 = 2;
    var BIND_SCOPE_VAR2 = 4;
    var BIND_SCOPE_LEXICAL2 = 8;
    var BIND_SCOPE_FUNCTION2 = 16;
    var BIND_FLAGS_NONE2 = 64;
    var BIND_FLAGS_CLASS2 = 128;
    var BIND_FLAGS_TS_ENUM2 = 256;
    var BIND_FLAGS_TS_CONST_ENUM2 = 512;
    var BIND_FLAGS_TS_EXPORT_ONLY2 = 1024;
    var BIND_FLAGS_FLOW_DECLARE_FN2 = 2048;
    var BIND_CLASS2 = BIND_KIND_VALUE2 | BIND_KIND_TYPE2 | BIND_SCOPE_LEXICAL2 | BIND_FLAGS_CLASS2;
    var BIND_LEXICAL2 = BIND_KIND_VALUE2 | 0 | BIND_SCOPE_LEXICAL2 | 0;
    var BIND_VAR2 = BIND_KIND_VALUE2 | 0 | BIND_SCOPE_VAR2 | 0;
    var BIND_FUNCTION2 = BIND_KIND_VALUE2 | 0 | BIND_SCOPE_FUNCTION2 | 0;
    var BIND_TS_INTERFACE2 = 0 | BIND_KIND_TYPE2 | 0 | BIND_FLAGS_CLASS2;
    var BIND_TS_TYPE2 = 0 | BIND_KIND_TYPE2 | 0 | 0;
    var BIND_TS_ENUM2 = BIND_KIND_VALUE2 | BIND_KIND_TYPE2 | BIND_SCOPE_LEXICAL2 | BIND_FLAGS_TS_ENUM2;
    var BIND_TS_AMBIENT2 = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY2;
    var BIND_NONE2 = 0 | 0 | 0 | BIND_FLAGS_NONE2;
    var BIND_OUTSIDE2 = BIND_KIND_VALUE2 | 0 | 0 | BIND_FLAGS_NONE2;
    var BIND_TS_CONST_ENUM2 = BIND_TS_ENUM2 | BIND_FLAGS_TS_CONST_ENUM2;
    var BIND_TS_NAMESPACE2 = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY2;
    var BIND_FLOW_DECLARE_FN2 = BIND_FLAGS_FLOW_DECLARE_FN2;
    var CLASS_ELEMENT_FLAG_STATIC2 = 4;
    var CLASS_ELEMENT_KIND_GETTER2 = 2;
    var CLASS_ELEMENT_KIND_SETTER2 = 1;
    var CLASS_ELEMENT_KIND_ACCESSOR2 = CLASS_ELEMENT_KIND_GETTER2 | CLASS_ELEMENT_KIND_SETTER2;
    var CLASS_ELEMENT_STATIC_GETTER2 = CLASS_ELEMENT_KIND_GETTER2 | CLASS_ELEMENT_FLAG_STATIC2;
    var CLASS_ELEMENT_STATIC_SETTER2 = CLASS_ELEMENT_KIND_SETTER2 | CLASS_ELEMENT_FLAG_STATIC2;
    var CLASS_ELEMENT_INSTANCE_GETTER2 = CLASS_ELEMENT_KIND_GETTER2;
    var CLASS_ELEMENT_INSTANCE_SETTER2 = CLASS_ELEMENT_KIND_SETTER2;
    var CLASS_ELEMENT_OTHER2 = 0;
    var Scope2 = class {
      constructor(flags) {
        this.var = /* @__PURE__ */ new Set();
        this.lexical = /* @__PURE__ */ new Set();
        this.functions = /* @__PURE__ */ new Set();
        this.flags = flags;
      }
    };
    var ScopeHandler2 = class {
      constructor(raise, inModule) {
        this.scopeStack = [];
        this.undefinedExports = /* @__PURE__ */ new Map();
        this.raise = raise;
        this.inModule = inModule;
      }
      get inFunction() {
        return (this.currentVarScopeFlags() & SCOPE_FUNCTION2) > 0;
      }
      get allowSuper() {
        return (this.currentThisScopeFlags() & SCOPE_SUPER2) > 0;
      }
      get allowDirectSuper() {
        return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER2) > 0;
      }
      get inClass() {
        return (this.currentThisScopeFlags() & SCOPE_CLASS2) > 0;
      }
      get inClassAndNotInNonArrowFunction() {
        const flags = this.currentThisScopeFlags();
        return (flags & SCOPE_CLASS2) > 0 && (flags & SCOPE_FUNCTION2) === 0;
      }
      get inStaticBlock() {
        for (let i = this.scopeStack.length - 1; ; i--) {
          const {
            flags
          } = this.scopeStack[i];
          if (flags & SCOPE_STATIC_BLOCK2) {
            return true;
          }
          if (flags & (SCOPE_VAR2 | SCOPE_CLASS2)) {
            return false;
          }
        }
      }
      get inNonArrowFunction() {
        return (this.currentThisScopeFlags() & SCOPE_FUNCTION2) > 0;
      }
      get treatFunctionsAsVar() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
      }
      createScope(flags) {
        return new Scope2(flags);
      }
      enter(flags) {
        this.scopeStack.push(this.createScope(flags));
      }
      exit() {
        this.scopeStack.pop();
      }
      treatFunctionsAsVarInScope(scope) {
        return !!(scope.flags & SCOPE_FUNCTION2 || !this.inModule && scope.flags & SCOPE_PROGRAM2);
      }
      declareName(name, bindingType, loc) {
        let scope = this.currentScope();
        if (bindingType & BIND_SCOPE_LEXICAL2 || bindingType & BIND_SCOPE_FUNCTION2) {
          this.checkRedeclarationInScope(scope, name, bindingType, loc);
          if (bindingType & BIND_SCOPE_FUNCTION2) {
            scope.functions.add(name);
          } else {
            scope.lexical.add(name);
          }
          if (bindingType & BIND_SCOPE_LEXICAL2) {
            this.maybeExportDefined(scope, name);
          }
        } else if (bindingType & BIND_SCOPE_VAR2) {
          for (let i = this.scopeStack.length - 1; i >= 0; --i) {
            scope = this.scopeStack[i];
            this.checkRedeclarationInScope(scope, name, bindingType, loc);
            scope.var.add(name);
            this.maybeExportDefined(scope, name);
            if (scope.flags & SCOPE_VAR2)
              break;
          }
        }
        if (this.inModule && scope.flags & SCOPE_PROGRAM2) {
          this.undefinedExports.delete(name);
        }
      }
      maybeExportDefined(scope, name) {
        if (this.inModule && scope.flags & SCOPE_PROGRAM2) {
          this.undefinedExports.delete(name);
        }
      }
      checkRedeclarationInScope(scope, name, bindingType, loc) {
        if (this.isRedeclaredInScope(scope, name, bindingType)) {
          this.raise(ErrorMessages2.VarRedeclaration, {
            at: loc
          }, name);
        }
      }
      isRedeclaredInScope(scope, name, bindingType) {
        if (!(bindingType & BIND_KIND_VALUE2))
          return false;
        if (bindingType & BIND_SCOPE_LEXICAL2) {
          return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);
        }
        if (bindingType & BIND_SCOPE_FUNCTION2) {
          return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);
        }
        return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH2 && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);
      }
      checkLocalExport(id2) {
        const {
          name
        } = id2;
        const topLevelScope = this.scopeStack[0];
        if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {
          this.undefinedExports.set(name, id2.loc.start);
        }
      }
      currentScope() {
        return this.scopeStack[this.scopeStack.length - 1];
      }
      currentVarScopeFlags() {
        for (let i = this.scopeStack.length - 1; ; i--) {
          const {
            flags
          } = this.scopeStack[i];
          if (flags & SCOPE_VAR2) {
            return flags;
          }
        }
      }
      currentThisScopeFlags() {
        for (let i = this.scopeStack.length - 1; ; i--) {
          const {
            flags
          } = this.scopeStack[i];
          if (flags & (SCOPE_VAR2 | SCOPE_CLASS2) && !(flags & SCOPE_ARROW2)) {
            return flags;
          }
        }
      }
    };
    var FlowScope2 = class extends Scope2 {
      constructor(...args) {
        super(...args);
        this.declareFunctions = /* @__PURE__ */ new Set();
      }
    };
    var FlowScopeHandler2 = class extends ScopeHandler2 {
      createScope(flags) {
        return new FlowScope2(flags);
      }
      declareName(name, bindingType, loc) {
        const scope = this.currentScope();
        if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN2) {
          this.checkRedeclarationInScope(scope, name, bindingType, loc);
          this.maybeExportDefined(scope, name);
          scope.declareFunctions.add(name);
          return;
        }
        super.declareName(...arguments);
      }
      isRedeclaredInScope(scope, name, bindingType) {
        if (super.isRedeclaredInScope(...arguments))
          return true;
        if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN2) {
          return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));
        }
        return false;
      }
      checkLocalExport(id2) {
        if (!this.scopeStack[0].declareFunctions.has(id2.name)) {
          super.checkLocalExport(id2);
        }
      }
    };
    var lineBreak2 = /\r\n?|[\n\u2028\u2029]/;
    var lineBreakG2 = new RegExp(lineBreak2.source, "g");
    function isNewLine2(code) {
      switch (code) {
        case 10:
        case 13:
        case 8232:
        case 8233:
          return true;
        default:
          return false;
      }
    }
    var skipWhiteSpace2 = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
    var skipWhiteSpaceInLine2 = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/y;
    var skipWhiteSpaceToLineBreak2 = new RegExp("(?=(" + skipWhiteSpaceInLine2.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
    function isWhitespace2(code) {
      switch (code) {
        case 9:
        case 11:
        case 12:
        case 32:
        case 160:
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    }
    var State2 = class {
      constructor() {
        this.strict = void 0;
        this.curLine = void 0;
        this.lineStart = void 0;
        this.startLoc = void 0;
        this.endLoc = void 0;
        this.errors = [];
        this.potentialArrowAt = -1;
        this.noArrowAt = [];
        this.noArrowParamsConversionAt = [];
        this.maybeInArrowParameters = false;
        this.inType = false;
        this.noAnonFunctionType = false;
        this.hasFlowComment = false;
        this.isAmbientContext = false;
        this.inAbstractClass = false;
        this.topicContext = {
          maxNumOfResolvableTopics: 0,
          maxTopicIndex: null
        };
        this.soloAwait = false;
        this.inFSharpPipelineDirectBody = false;
        this.labels = [];
        this.decoratorStack = [[]];
        this.comments = [];
        this.commentStack = [];
        this.pos = 0;
        this.type = 135;
        this.value = null;
        this.start = 0;
        this.end = 0;
        this.lastTokEndLoc = null;
        this.lastTokStartLoc = null;
        this.lastTokStart = 0;
        this.context = [types2.brace];
        this.canStartJSXElement = true;
        this.containsEsc = false;
        this.strictErrors = /* @__PURE__ */ new Map();
        this.tokensLength = 0;
      }
      init({
        strictMode,
        sourceType,
        startLine,
        startColumn
      }) {
        this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === "module";
        this.curLine = startLine;
        this.lineStart = -startColumn;
        this.startLoc = this.endLoc = new Position3(startLine, startColumn, 0);
      }
      curPosition() {
        return new Position3(this.curLine, this.pos - this.lineStart, this.pos);
      }
      clone(skipArrays) {
        const state = new State2();
        const keys = Object.keys(this);
        for (let i = 0, length2 = keys.length; i < length2; i++) {
          const key = keys[i];
          let val = this[key];
          if (!skipArrays && Array.isArray(val)) {
            val = val.slice();
          }
          state[key] = val;
        }
        return state;
      }
    };
    var _isDigit2 = function isDigit2(code) {
      return code >= 48 && code <= 57;
    };
    var VALID_REGEX_FLAGS2 = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]);
    var forbiddenNumericSeparatorSiblings2 = {
      decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],
      hex: [46, 88, 95, 120]
    };
    var allowedNumericSeparatorSiblings2 = {};
    allowedNumericSeparatorSiblings2.bin = [48, 49];
    allowedNumericSeparatorSiblings2.oct = [...allowedNumericSeparatorSiblings2.bin, 50, 51, 52, 53, 54, 55];
    allowedNumericSeparatorSiblings2.dec = [...allowedNumericSeparatorSiblings2.oct, 56, 57];
    allowedNumericSeparatorSiblings2.hex = [...allowedNumericSeparatorSiblings2.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];
    var Token2 = class {
      constructor(state) {
        this.type = state.type;
        this.value = state.value;
        this.start = state.start;
        this.end = state.end;
        this.loc = new SourceLocation2(state.startLoc, state.endLoc);
      }
    };
    var Tokenizer2 = class extends ParserError2 {
      constructor(options, input2) {
        super();
        this.isLookahead = void 0;
        this.tokens = [];
        this.state = new State2();
        this.state.init(options);
        this.input = input2;
        this.length = input2.length;
        this.isLookahead = false;
      }
      pushToken(token) {
        this.tokens.length = this.state.tokensLength;
        this.tokens.push(token);
        ++this.state.tokensLength;
      }
      next() {
        this.checkKeywordEscapes();
        if (this.options.tokens) {
          this.pushToken(new Token2(this.state));
        }
        this.state.lastTokStart = this.state.start;
        this.state.lastTokEndLoc = this.state.endLoc;
        this.state.lastTokStartLoc = this.state.startLoc;
        this.nextToken();
      }
      eat(type) {
        if (this.match(type)) {
          this.next();
          return true;
        } else {
          return false;
        }
      }
      match(type) {
        return this.state.type === type;
      }
      createLookaheadState(state) {
        return {
          pos: state.pos,
          value: null,
          type: state.type,
          start: state.start,
          end: state.end,
          context: [this.curContext()],
          inType: state.inType,
          startLoc: state.startLoc,
          lastTokEndLoc: state.lastTokEndLoc,
          curLine: state.curLine,
          lineStart: state.lineStart,
          curPosition: state.curPosition
        };
      }
      lookahead() {
        const old = this.state;
        this.state = this.createLookaheadState(old);
        this.isLookahead = true;
        this.nextToken();
        this.isLookahead = false;
        const curr = this.state;
        this.state = old;
        return curr;
      }
      nextTokenStart() {
        return this.nextTokenStartSince(this.state.pos);
      }
      nextTokenStartSince(pos) {
        skipWhiteSpace2.lastIndex = pos;
        return skipWhiteSpace2.test(this.input) ? skipWhiteSpace2.lastIndex : pos;
      }
      lookaheadCharCode() {
        return this.input.charCodeAt(this.nextTokenStart());
      }
      codePointAtPos(pos) {
        let cp = this.input.charCodeAt(pos);
        if ((cp & 64512) === 55296 && ++pos < this.input.length) {
          const trail = this.input.charCodeAt(pos);
          if ((trail & 64512) === 56320) {
            cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
          }
        }
        return cp;
      }
      setStrict(strict) {
        this.state.strict = strict;
        if (strict) {
          this.state.strictErrors.forEach(({
            message,
            loc
          }) => this.raise(message, {
            at: loc
          }));
          this.state.strictErrors.clear();
        }
      }
      curContext() {
        return this.state.context[this.state.context.length - 1];
      }
      nextToken() {
        this.skipSpace();
        this.state.start = this.state.pos;
        if (!this.isLookahead)
          this.state.startLoc = this.state.curPosition();
        if (this.state.pos >= this.length) {
          this.finishToken(135);
          return;
        }
        this.getTokenFromCode(this.codePointAtPos(this.state.pos));
      }
      skipBlockComment() {
        let startLoc;
        if (!this.isLookahead)
          startLoc = this.state.curPosition();
        const start = this.state.pos;
        const end = this.input.indexOf("*/", start + 2);
        if (end === -1) {
          throw this.raise(ErrorMessages2.UnterminatedComment, {
            at: this.state.curPosition()
          });
        }
        this.state.pos = end + 2;
        lineBreakG2.lastIndex = start + 2;
        while (lineBreakG2.test(this.input) && lineBreakG2.lastIndex <= end) {
          ++this.state.curLine;
          this.state.lineStart = lineBreakG2.lastIndex;
        }
        if (this.isLookahead)
          return;
        const comment2 = {
          type: "CommentBlock",
          value: this.input.slice(start + 2, end),
          start,
          end: end + 2,
          loc: new SourceLocation2(startLoc, this.state.curPosition())
        };
        if (this.options.tokens)
          this.pushToken(comment2);
        return comment2;
      }
      skipLineComment(startSkip) {
        const start = this.state.pos;
        let startLoc;
        if (!this.isLookahead)
          startLoc = this.state.curPosition();
        let ch = this.input.charCodeAt(this.state.pos += startSkip);
        if (this.state.pos < this.length) {
          while (!isNewLine2(ch) && ++this.state.pos < this.length) {
            ch = this.input.charCodeAt(this.state.pos);
          }
        }
        if (this.isLookahead)
          return;
        const end = this.state.pos;
        const value = this.input.slice(start + startSkip, end);
        const comment2 = {
          type: "CommentLine",
          value,
          start,
          end,
          loc: new SourceLocation2(startLoc, this.state.curPosition())
        };
        if (this.options.tokens)
          this.pushToken(comment2);
        return comment2;
      }
      skipSpace() {
        const spaceStart = this.state.pos;
        const comments = [];
        loop:
          while (this.state.pos < this.length) {
            const ch = this.input.charCodeAt(this.state.pos);
            switch (ch) {
              case 32:
              case 160:
              case 9:
                ++this.state.pos;
                break;
              case 13:
                if (this.input.charCodeAt(this.state.pos + 1) === 10) {
                  ++this.state.pos;
                }
              case 10:
              case 8232:
              case 8233:
                ++this.state.pos;
                ++this.state.curLine;
                this.state.lineStart = this.state.pos;
                break;
              case 47:
                switch (this.input.charCodeAt(this.state.pos + 1)) {
                  case 42: {
                    const comment2 = this.skipBlockComment();
                    if (comment2 !== void 0) {
                      this.addComment(comment2);
                      if (this.options.attachComment)
                        comments.push(comment2);
                    }
                    break;
                  }
                  case 47: {
                    const comment2 = this.skipLineComment(2);
                    if (comment2 !== void 0) {
                      this.addComment(comment2);
                      if (this.options.attachComment)
                        comments.push(comment2);
                    }
                    break;
                  }
                  default:
                    break loop;
                }
                break;
              default:
                if (isWhitespace2(ch)) {
                  ++this.state.pos;
                } else if (ch === 45 && !this.inModule) {
                  const pos = this.state.pos;
                  if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
                    const comment2 = this.skipLineComment(3);
                    if (comment2 !== void 0) {
                      this.addComment(comment2);
                      if (this.options.attachComment)
                        comments.push(comment2);
                    }
                  } else {
                    break loop;
                  }
                } else if (ch === 60 && !this.inModule) {
                  const pos = this.state.pos;
                  if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {
                    const comment2 = this.skipLineComment(4);
                    if (comment2 !== void 0) {
                      this.addComment(comment2);
                      if (this.options.attachComment)
                        comments.push(comment2);
                    }
                  } else {
                    break loop;
                  }
                } else {
                  break loop;
                }
            }
          }
        if (comments.length > 0) {
          const end = this.state.pos;
          const CommentWhitespace = {
            start: spaceStart,
            end,
            comments,
            leadingNode: null,
            trailingNode: null,
            containingNode: null
          };
          this.state.commentStack.push(CommentWhitespace);
        }
      }
      finishToken(type, val) {
        this.state.end = this.state.pos;
        this.state.endLoc = this.state.curPosition();
        const prevType = this.state.type;
        this.state.type = type;
        this.state.value = val;
        if (!this.isLookahead) {
          this.updateContext(prevType);
        }
      }
      replaceToken(type) {
        this.state.type = type;
        this.updateContext();
      }
      readToken_numberSign() {
        if (this.state.pos === 0 && this.readToken_interpreter()) {
          return;
        }
        const nextPos = this.state.pos + 1;
        const next = this.codePointAtPos(nextPos);
        if (next >= 48 && next <= 57) {
          throw this.raise(ErrorMessages2.UnexpectedDigitAfterHash, {
            at: this.state.curPosition()
          });
        }
        if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
          this.expectPlugin("recordAndTuple");
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "hash") {
            throw this.raise(next === 123 ? ErrorMessages2.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages2.TupleExpressionHashIncorrectStartSyntaxType, {
              at: this.state.curPosition()
            });
          }
          this.state.pos += 2;
          if (next === 123) {
            this.finishToken(7);
          } else {
            this.finishToken(1);
          }
        } else if (isIdentifierStart2(next)) {
          ++this.state.pos;
          this.finishToken(134, this.readWord1(next));
        } else if (next === 92) {
          ++this.state.pos;
          this.finishToken(134, this.readWord1());
        } else {
          this.finishOp(27, 1);
        }
      }
      readToken_dot() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next >= 48 && next <= 57) {
          this.readNumber(true);
          return;
        }
        if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
          this.state.pos += 3;
          this.finishToken(21);
        } else {
          ++this.state.pos;
          this.finishToken(16);
        }
      }
      readToken_slash() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) {
          this.finishOp(31, 2);
        } else {
          this.finishOp(56, 1);
        }
      }
      readToken_interpreter() {
        if (this.state.pos !== 0 || this.length < 2)
          return false;
        let ch = this.input.charCodeAt(this.state.pos + 1);
        if (ch !== 33)
          return false;
        const start = this.state.pos;
        this.state.pos += 1;
        while (!isNewLine2(ch) && ++this.state.pos < this.length) {
          ch = this.input.charCodeAt(this.state.pos);
        }
        const value = this.input.slice(start + 2, this.state.pos);
        this.finishToken(28, value);
        return true;
      }
      readToken_mult_modulo(code) {
        let type = code === 42 ? 55 : 54;
        let width = 1;
        let next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 42 && next === 42) {
          width++;
          next = this.input.charCodeAt(this.state.pos + 2);
          type = 57;
        }
        if (next === 61 && !this.state.inType) {
          width++;
          type = code === 37 ? 33 : 30;
        }
        this.finishOp(type, width);
      }
      readToken_pipe_amp(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === code) {
          if (this.input.charCodeAt(this.state.pos + 2) === 61) {
            this.finishOp(30, 3);
          } else {
            this.finishOp(code === 124 ? 41 : 42, 2);
          }
          return;
        }
        if (code === 124) {
          if (next === 62) {
            this.finishOp(39, 2);
            return;
          }
          if (this.hasPlugin("recordAndTuple") && next === 125) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
              throw this.raise(ErrorMessages2.RecordExpressionBarIncorrectEndSyntaxType, {
                at: this.state.curPosition()
              });
            }
            this.state.pos += 2;
            this.finishToken(9);
            return;
          }
          if (this.hasPlugin("recordAndTuple") && next === 93) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
              throw this.raise(ErrorMessages2.TupleExpressionBarIncorrectEndSyntaxType, {
                at: this.state.curPosition()
              });
            }
            this.state.pos += 2;
            this.finishToken(4);
            return;
          }
        }
        if (next === 61) {
          this.finishOp(30, 2);
          return;
        }
        this.finishOp(code === 124 ? 43 : 45, 1);
      }
      readToken_caret() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61 && !this.state.inType) {
          this.finishOp(32, 2);
        } else if (next === 94 && this.hasPlugin(["pipelineOperator", {
          proposal: "hack",
          topicToken: "^^"
        }])) {
          this.finishOp(37, 2);
          const lookaheadCh = this.input.codePointAt(this.state.pos);
          if (lookaheadCh === 94) {
            throw this.unexpected();
          }
        } else {
          this.finishOp(44, 1);
        }
      }
      readToken_atSign() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 64 && this.hasPlugin(["pipelineOperator", {
          proposal: "hack",
          topicToken: "@@"
        }])) {
          this.finishOp(38, 2);
        } else {
          this.finishOp(26, 1);
        }
      }
      readToken_plus_min(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === code) {
          this.finishOp(34, 2);
          return;
        }
        if (next === 61) {
          this.finishOp(30, 2);
        } else {
          this.finishOp(53, 1);
        }
      }
      readToken_lt() {
        const {
          pos
        } = this.state;
        const next = this.input.charCodeAt(pos + 1);
        if (next === 60) {
          if (this.input.charCodeAt(pos + 2) === 61) {
            this.finishOp(30, 3);
            return;
          }
          this.finishOp(51, 2);
          return;
        }
        if (next === 61) {
          this.finishOp(49, 2);
          return;
        }
        this.finishOp(47, 1);
      }
      readToken_gt() {
        const {
          pos
        } = this.state;
        const next = this.input.charCodeAt(pos + 1);
        if (next === 62) {
          const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;
          if (this.input.charCodeAt(pos + size) === 61) {
            this.finishOp(30, size + 1);
            return;
          }
          this.finishOp(52, size);
          return;
        }
        if (next === 61) {
          this.finishOp(49, 2);
          return;
        }
        this.finishOp(48, 1);
      }
      readToken_eq_excl(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) {
          this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
          return;
        }
        if (code === 61 && next === 62) {
          this.state.pos += 2;
          this.finishToken(19);
          return;
        }
        this.finishOp(code === 61 ? 29 : 35, 1);
      }
      readToken_question() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        const next2 = this.input.charCodeAt(this.state.pos + 2);
        if (next === 63) {
          if (next2 === 61) {
            this.finishOp(30, 3);
          } else {
            this.finishOp(40, 2);
          }
        } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
          this.state.pos += 2;
          this.finishToken(18);
        } else {
          ++this.state.pos;
          this.finishToken(17);
        }
      }
      getTokenFromCode(code) {
        switch (code) {
          case 46:
            this.readToken_dot();
            return;
          case 40:
            ++this.state.pos;
            this.finishToken(10);
            return;
          case 41:
            ++this.state.pos;
            this.finishToken(11);
            return;
          case 59:
            ++this.state.pos;
            this.finishToken(13);
            return;
          case 44:
            ++this.state.pos;
            this.finishToken(12);
            return;
          case 91:
            if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
              if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                throw this.raise(ErrorMessages2.TupleExpressionBarIncorrectStartSyntaxType, {
                  at: this.state.curPosition()
                });
              }
              this.state.pos += 2;
              this.finishToken(2);
            } else {
              ++this.state.pos;
              this.finishToken(0);
            }
            return;
          case 93:
            ++this.state.pos;
            this.finishToken(3);
            return;
          case 123:
            if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
              if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                throw this.raise(ErrorMessages2.RecordExpressionBarIncorrectStartSyntaxType, {
                  at: this.state.curPosition()
                });
              }
              this.state.pos += 2;
              this.finishToken(6);
            } else {
              ++this.state.pos;
              this.finishToken(5);
            }
            return;
          case 125:
            ++this.state.pos;
            this.finishToken(8);
            return;
          case 58:
            if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
              this.finishOp(15, 2);
            } else {
              ++this.state.pos;
              this.finishToken(14);
            }
            return;
          case 63:
            this.readToken_question();
            return;
          case 96:
            this.readTemplateToken();
            return;
          case 48: {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (next === 120 || next === 88) {
              this.readRadixNumber(16);
              return;
            }
            if (next === 111 || next === 79) {
              this.readRadixNumber(8);
              return;
            }
            if (next === 98 || next === 66) {
              this.readRadixNumber(2);
              return;
            }
          }
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            this.readNumber(false);
            return;
          case 34:
          case 39:
            this.readString(code);
            return;
          case 47:
            this.readToken_slash();
            return;
          case 37:
          case 42:
            this.readToken_mult_modulo(code);
            return;
          case 124:
          case 38:
            this.readToken_pipe_amp(code);
            return;
          case 94:
            this.readToken_caret();
            return;
          case 43:
          case 45:
            this.readToken_plus_min(code);
            return;
          case 60:
            this.readToken_lt();
            return;
          case 62:
            this.readToken_gt();
            return;
          case 61:
          case 33:
            this.readToken_eq_excl(code);
            return;
          case 126:
            this.finishOp(36, 1);
            return;
          case 64:
            this.readToken_atSign();
            return;
          case 35:
            this.readToken_numberSign();
            return;
          case 92:
            this.readWord();
            return;
          default:
            if (isIdentifierStart2(code)) {
              this.readWord(code);
              return;
            }
        }
        throw this.raise(ErrorMessages2.InvalidOrUnexpectedToken, {
          at: this.state.curPosition()
        }, String.fromCodePoint(code));
      }
      finishOp(type, size) {
        const str = this.input.slice(this.state.pos, this.state.pos + size);
        this.state.pos += size;
        this.finishToken(type, str);
      }
      readRegexp() {
        const startLoc = this.state.startLoc;
        const start = this.state.start + 1;
        let escaped, inClass;
        let {
          pos
        } = this.state;
        for (; ; ++pos) {
          if (pos >= this.length) {
            throw this.raise(ErrorMessages2.UnterminatedRegExp, {
              at: createPositionWithColumnOffset(startLoc, 1)
            });
          }
          const ch = this.input.charCodeAt(pos);
          if (isNewLine2(ch)) {
            throw this.raise(ErrorMessages2.UnterminatedRegExp, {
              at: createPositionWithColumnOffset(startLoc, 1)
            });
          }
          if (escaped) {
            escaped = false;
          } else {
            if (ch === 91) {
              inClass = true;
            } else if (ch === 93 && inClass) {
              inClass = false;
            } else if (ch === 47 && !inClass) {
              break;
            }
            escaped = ch === 92;
          }
        }
        const content = this.input.slice(start, pos);
        ++pos;
        let mods = "";
        const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
        while (pos < this.length) {
          const cp = this.codePointAtPos(pos);
          const char = String.fromCharCode(cp);
          if (VALID_REGEX_FLAGS2.has(cp)) {
            if (cp === 118) {
              this.expectPlugin("regexpUnicodeSets", nextPos());
              if (mods.includes("u")) {
                this.raise(ErrorMessages2.IncompatibleRegExpUVFlags, {
                  at: nextPos()
                });
              }
            } else if (cp === 117) {
              if (mods.includes("v")) {
                this.raise(ErrorMessages2.IncompatibleRegExpUVFlags, {
                  at: nextPos()
                });
              }
            }
            if (mods.includes(char)) {
              this.raise(ErrorMessages2.DuplicateRegExpFlags, {
                at: nextPos()
              });
            }
          } else if (isIdentifierChar2(cp) || cp === 92) {
            this.raise(ErrorMessages2.MalformedRegExpFlags, {
              at: nextPos()
            });
          } else {
            break;
          }
          ++pos;
          mods += char;
        }
        this.state.pos = pos;
        this.finishToken(133, {
          pattern: content,
          flags: mods
        });
      }
      readInt(radix, len, forceLen, allowNumSeparator = true) {
        const start = this.state.pos;
        const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings2.hex : forbiddenNumericSeparatorSiblings2.decBinOct;
        const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings2.hex : radix === 10 ? allowedNumericSeparatorSiblings2.dec : radix === 8 ? allowedNumericSeparatorSiblings2.oct : allowedNumericSeparatorSiblings2.bin;
        let invalid = false;
        let total = 0;
        for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
          const code = this.input.charCodeAt(this.state.pos);
          let val;
          if (code === 95) {
            const prev = this.input.charCodeAt(this.state.pos - 1);
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (allowedSiblings.indexOf(next) === -1) {
              this.raise(ErrorMessages2.UnexpectedNumericSeparator, {
                at: this.state.curPosition()
              });
            } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {
              this.raise(ErrorMessages2.UnexpectedNumericSeparator, {
                at: this.state.curPosition()
              });
            }
            if (!allowNumSeparator) {
              this.raise(ErrorMessages2.NumericSeparatorInEscapeSequence, {
                at: this.state.curPosition()
              });
            }
            ++this.state.pos;
            continue;
          }
          if (code >= 97) {
            val = code - 97 + 10;
          } else if (code >= 65) {
            val = code - 65 + 10;
          } else if (_isDigit2(code)) {
            val = code - 48;
          } else {
            val = Infinity;
          }
          if (val >= radix) {
            if (this.options.errorRecovery && val <= 9) {
              val = 0;
              this.raise(ErrorMessages2.InvalidDigit, {
                at: this.state.curPosition()
              }, radix);
            } else if (forceLen) {
              val = 0;
              invalid = true;
            } else {
              break;
            }
          }
          ++this.state.pos;
          total = total * radix + val;
        }
        if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {
          return null;
        }
        return total;
      }
      readRadixNumber(radix) {
        const startLoc = this.state.curPosition();
        let isBigInt = false;
        this.state.pos += 2;
        const val = this.readInt(radix);
        if (val == null) {
          this.raise(ErrorMessages2.InvalidDigit, {
            at: createPositionWithColumnOffset(startLoc, 2)
          }, radix);
        }
        const next = this.input.charCodeAt(this.state.pos);
        if (next === 110) {
          ++this.state.pos;
          isBigInt = true;
        } else if (next === 109) {
          throw this.raise(ErrorMessages2.InvalidDecimal, {
            at: startLoc
          });
        }
        if (isIdentifierStart2(this.codePointAtPos(this.state.pos))) {
          throw this.raise(ErrorMessages2.NumberIdentifier, {
            at: this.state.curPosition()
          });
        }
        if (isBigInt) {
          const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, "");
          this.finishToken(131, str);
          return;
        }
        this.finishToken(130, val);
      }
      readNumber(startsWithDot) {
        const start = this.state.pos;
        const startLoc = this.state.curPosition();
        let isFloat = false;
        let isBigInt = false;
        let isDecimal = false;
        let hasExponent = false;
        let isOctal = false;
        if (!startsWithDot && this.readInt(10) === null) {
          this.raise(ErrorMessages2.InvalidNumber, {
            at: this.state.curPosition()
          });
        }
        const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;
        if (hasLeadingZero) {
          const integer2 = this.input.slice(start, this.state.pos);
          this.recordStrictModeErrors(ErrorMessages2.StrictOctalLiteral, startLoc);
          if (!this.state.strict) {
            const underscorePos = integer2.indexOf("_");
            if (underscorePos > 0) {
              this.raise(ErrorMessages2.ZeroDigitNumericSeparator, {
                at: createPositionWithColumnOffset(startLoc, underscorePos)
              });
            }
          }
          isOctal = hasLeadingZero && !/[89]/.test(integer2);
        }
        let next = this.input.charCodeAt(this.state.pos);
        if (next === 46 && !isOctal) {
          ++this.state.pos;
          this.readInt(10);
          isFloat = true;
          next = this.input.charCodeAt(this.state.pos);
        }
        if ((next === 69 || next === 101) && !isOctal) {
          next = this.input.charCodeAt(++this.state.pos);
          if (next === 43 || next === 45) {
            ++this.state.pos;
          }
          if (this.readInt(10) === null) {
            this.raise(ErrorMessages2.InvalidOrMissingExponent, {
              at: startLoc
            });
          }
          isFloat = true;
          hasExponent = true;
          next = this.input.charCodeAt(this.state.pos);
        }
        if (next === 110) {
          if (isFloat || hasLeadingZero) {
            this.raise(ErrorMessages2.InvalidBigIntLiteral, {
              at: startLoc
            });
          }
          ++this.state.pos;
          isBigInt = true;
        }
        if (next === 109) {
          this.expectPlugin("decimal", this.state.curPosition());
          if (hasExponent || hasLeadingZero) {
            this.raise(ErrorMessages2.InvalidDecimal, {
              at: startLoc
            });
          }
          ++this.state.pos;
          isDecimal = true;
        }
        if (isIdentifierStart2(this.codePointAtPos(this.state.pos))) {
          throw this.raise(ErrorMessages2.NumberIdentifier, {
            at: this.state.curPosition()
          });
        }
        const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
        if (isBigInt) {
          this.finishToken(131, str);
          return;
        }
        if (isDecimal) {
          this.finishToken(132, str);
          return;
        }
        const val = isOctal ? parseInt(str, 8) : parseFloat(str);
        this.finishToken(130, val);
      }
      readCodePoint(throwOnInvalid) {
        const ch = this.input.charCodeAt(this.state.pos);
        let code;
        if (ch === 123) {
          ++this.state.pos;
          code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos, true, throwOnInvalid);
          ++this.state.pos;
          if (code !== null && code > 1114111) {
            if (throwOnInvalid) {
              this.raise(ErrorMessages2.InvalidCodePoint, {
                at: this.state.curPosition()
              });
            } else {
              return null;
            }
          }
        } else {
          code = this.readHexChar(4, false, throwOnInvalid);
        }
        return code;
      }
      readString(quote) {
        let out = "", chunkStart = ++this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.length) {
            throw this.raise(ErrorMessages2.UnterminatedString, {
              at: this.state.startLoc
            });
          }
          const ch = this.input.charCodeAt(this.state.pos);
          if (ch === quote)
            break;
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.readEscapedChar(false);
            chunkStart = this.state.pos;
          } else if (ch === 8232 || ch === 8233) {
            ++this.state.pos;
            ++this.state.curLine;
            this.state.lineStart = this.state.pos;
          } else if (isNewLine2(ch)) {
            throw this.raise(ErrorMessages2.UnterminatedString, {
              at: this.state.startLoc
            });
          } else {
            ++this.state.pos;
          }
        }
        out += this.input.slice(chunkStart, this.state.pos++);
        this.finishToken(129, out);
      }
      readTemplateContinuation() {
        if (!this.match(8)) {
          this.unexpected(null, 8);
        }
        this.state.pos--;
        this.readTemplateToken();
      }
      readTemplateToken() {
        let out = "", chunkStart = this.state.pos, containsInvalid = false;
        ++this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.length) {
            throw this.raise(ErrorMessages2.UnterminatedTemplate, {
              at: createPositionWithColumnOffset(this.state.startLoc, 1)
            });
          }
          const ch = this.input.charCodeAt(this.state.pos);
          if (ch === 96) {
            ++this.state.pos;
            out += this.input.slice(chunkStart, this.state.pos);
            this.finishToken(24, containsInvalid ? null : out);
            return;
          }
          if (ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
            this.state.pos += 2;
            out += this.input.slice(chunkStart, this.state.pos);
            this.finishToken(25, containsInvalid ? null : out);
            return;
          }
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.state.pos);
            const escaped = this.readEscapedChar(true);
            if (escaped === null) {
              containsInvalid = true;
            } else {
              out += escaped;
            }
            chunkStart = this.state.pos;
          } else if (isNewLine2(ch)) {
            out += this.input.slice(chunkStart, this.state.pos);
            ++this.state.pos;
            switch (ch) {
              case 13:
                if (this.input.charCodeAt(this.state.pos) === 10) {
                  ++this.state.pos;
                }
              case 10:
                out += "\n";
                break;
              default:
                out += String.fromCharCode(ch);
                break;
            }
            ++this.state.curLine;
            this.state.lineStart = this.state.pos;
            chunkStart = this.state.pos;
          } else {
            ++this.state.pos;
          }
        }
      }
      recordStrictModeErrors(message, loc) {
        if (this.state.strict && !this.state.strictErrors.has(loc.index)) {
          this.raise(message, {
            at: loc
          });
        } else {
          this.state.strictErrors.set(loc.index, {
            loc,
            message
          });
        }
      }
      readEscapedChar(inTemplate) {
        const throwOnInvalid = !inTemplate;
        const ch = this.input.charCodeAt(++this.state.pos);
        ++this.state.pos;
        switch (ch) {
          case 110:
            return "\n";
          case 114:
            return "\r";
          case 120: {
            const code = this.readHexChar(2, false, throwOnInvalid);
            return code === null ? null : String.fromCharCode(code);
          }
          case 117: {
            const code = this.readCodePoint(throwOnInvalid);
            return code === null ? null : String.fromCodePoint(code);
          }
          case 116:
            return "	";
          case 98:
            return "\b";
          case 118:
            return "\v";
          case 102:
            return "\f";
          case 13:
            if (this.input.charCodeAt(this.state.pos) === 10) {
              ++this.state.pos;
            }
          case 10:
            this.state.lineStart = this.state.pos;
            ++this.state.curLine;
          case 8232:
          case 8233:
            return "";
          case 56:
          case 57:
            if (inTemplate) {
              return null;
            } else {
              this.recordStrictModeErrors(ErrorMessages2.StrictNumericEscape, createPositionWithColumnOffset(this.state.curPosition(), -1));
            }
          default:
            if (ch >= 48 && ch <= 55) {
              const codePos = createPositionWithColumnOffset(this.state.curPosition(), -1);
              const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);
              let octalStr = match[0];
              let octal = parseInt(octalStr, 8);
              if (octal > 255) {
                octalStr = octalStr.slice(0, -1);
                octal = parseInt(octalStr, 8);
              }
              this.state.pos += octalStr.length - 1;
              const next = this.input.charCodeAt(this.state.pos);
              if (octalStr !== "0" || next === 56 || next === 57) {
                if (inTemplate) {
                  return null;
                } else {
                  this.recordStrictModeErrors(ErrorMessages2.StrictNumericEscape, codePos);
                }
              }
              return String.fromCharCode(octal);
            }
            return String.fromCharCode(ch);
        }
      }
      readHexChar(len, forceLen, throwOnInvalid) {
        const codeLoc = this.state.curPosition();
        const n2 = this.readInt(16, len, forceLen, false);
        if (n2 === null) {
          if (throwOnInvalid) {
            this.raise(ErrorMessages2.InvalidEscapeSequence, {
              at: codeLoc
            });
          } else {
            this.state.pos = codeLoc.index - 1;
          }
        }
        return n2;
      }
      readWord1(firstCode) {
        this.state.containsEsc = false;
        let word = "";
        const start = this.state.pos;
        let chunkStart = this.state.pos;
        if (firstCode !== void 0) {
          this.state.pos += firstCode <= 65535 ? 1 : 2;
        }
        while (this.state.pos < this.length) {
          const ch = this.codePointAtPos(this.state.pos);
          if (isIdentifierChar2(ch)) {
            this.state.pos += ch <= 65535 ? 1 : 2;
          } else if (ch === 92) {
            this.state.containsEsc = true;
            word += this.input.slice(chunkStart, this.state.pos);
            const escStart = this.state.curPosition();
            const identifierCheck = this.state.pos === start ? isIdentifierStart2 : isIdentifierChar2;
            if (this.input.charCodeAt(++this.state.pos) !== 117) {
              this.raise(ErrorMessages2.MissingUnicodeEscape, {
                at: this.state.curPosition()
              });
              chunkStart = this.state.pos - 1;
              continue;
            }
            ++this.state.pos;
            const esc = this.readCodePoint(true);
            if (esc !== null) {
              if (!identifierCheck(esc)) {
                this.raise(ErrorMessages2.EscapedCharNotAnIdentifier, {
                  at: escStart
                });
              }
              word += String.fromCodePoint(esc);
            }
            chunkStart = this.state.pos;
          } else {
            break;
          }
        }
        return word + this.input.slice(chunkStart, this.state.pos);
      }
      readWord(firstCode) {
        const word = this.readWord1(firstCode);
        const type = keywords$12.get(word);
        if (type !== void 0) {
          this.finishToken(type, tokenLabelName2(type));
        } else {
          this.finishToken(128, word);
        }
      }
      checkKeywordEscapes() {
        const {
          type
        } = this.state;
        if (tokenIsKeyword2(type) && this.state.containsEsc) {
          this.raise(ErrorMessages2.InvalidEscapedReservedWord, {
            at: this.state.startLoc
          }, tokenLabelName2(type));
        }
      }
      updateContext(prevType) {
      }
    };
    var ClassScope2 = class {
      constructor() {
        this.privateNames = /* @__PURE__ */ new Set();
        this.loneAccessors = /* @__PURE__ */ new Map();
        this.undefinedPrivateNames = /* @__PURE__ */ new Map();
      }
    };
    var ClassScopeHandler2 = class {
      constructor(raise) {
        this.stack = [];
        this.undefinedPrivateNames = /* @__PURE__ */ new Map();
        this.raise = raise;
      }
      current() {
        return this.stack[this.stack.length - 1];
      }
      enter() {
        this.stack.push(new ClassScope2());
      }
      exit() {
        const oldClassScope = this.stack.pop();
        const current = this.current();
        for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {
          if (current) {
            if (!current.undefinedPrivateNames.has(name)) {
              current.undefinedPrivateNames.set(name, loc);
            }
          } else {
            this.raise(ErrorMessages2.InvalidPrivateFieldResolution, {
              at: loc
            }, name);
          }
        }
      }
      declarePrivateName(name, elementType, loc) {
        const {
          privateNames,
          loneAccessors,
          undefinedPrivateNames
        } = this.current();
        let redefined = privateNames.has(name);
        if (elementType & CLASS_ELEMENT_KIND_ACCESSOR2) {
          const accessor = redefined && loneAccessors.get(name);
          if (accessor) {
            const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC2;
            const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC2;
            const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR2;
            const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR2;
            redefined = oldKind === newKind || oldStatic !== newStatic;
            if (!redefined)
              loneAccessors.delete(name);
          } else if (!redefined) {
            loneAccessors.set(name, elementType);
          }
        }
        if (redefined) {
          this.raise(ErrorMessages2.PrivateNameRedeclaration, {
            at: loc
          }, name);
        }
        privateNames.add(name);
        undefinedPrivateNames.delete(name);
      }
      usePrivateName(name, loc) {
        let classScope;
        for (classScope of this.stack) {
          if (classScope.privateNames.has(name))
            return;
        }
        if (classScope) {
          classScope.undefinedPrivateNames.set(name, loc);
        } else {
          this.raise(ErrorMessages2.InvalidPrivateFieldResolution, {
            at: loc
          }, name);
        }
      }
    };
    var kExpression2 = 0;
    var kMaybeArrowParameterDeclaration2 = 1;
    var kMaybeAsyncArrowParameterDeclaration2 = 2;
    var kParameterDeclaration2 = 3;
    var ExpressionScope2 = class {
      constructor(type = kExpression2) {
        this.type = void 0;
        this.type = type;
      }
      canBeArrowParameterDeclaration() {
        return this.type === kMaybeAsyncArrowParameterDeclaration2 || this.type === kMaybeArrowParameterDeclaration2;
      }
      isCertainlyParameterDeclaration() {
        return this.type === kParameterDeclaration2;
      }
    };
    var ArrowHeadParsingScope2 = class extends ExpressionScope2 {
      constructor(type) {
        super(type);
        this.errors = /* @__PURE__ */ new Map();
      }
      recordDeclarationError(message, loc) {
        this.errors.set(loc.index, {
          message,
          loc
        });
      }
      clearDeclarationError(loc) {
        this.errors.delete(loc.index);
      }
      iterateErrors(iterator) {
        this.errors.forEach(iterator);
      }
    };
    var ExpressionScopeHandler2 = class {
      constructor(raise) {
        this.stack = [new ExpressionScope2()];
        this.raise = raise;
      }
      enter(scope) {
        this.stack.push(scope);
      }
      exit() {
        this.stack.pop();
      }
      recordParameterInitializerError(loc, template) {
        const {
          stack
        } = this;
        let i = stack.length - 1;
        let scope = stack[i];
        while (!scope.isCertainlyParameterDeclaration()) {
          if (scope.canBeArrowParameterDeclaration()) {
            scope.recordDeclarationError(template, loc);
          } else {
            return;
          }
          scope = stack[--i];
        }
        this.raise(template, {
          at: loc
        });
      }
      recordParenthesizedIdentifierError(template, loc) {
        const {
          stack
        } = this;
        const scope = stack[stack.length - 1];
        if (scope.isCertainlyParameterDeclaration()) {
          this.raise(template, {
            at: loc
          });
        } else if (scope.canBeArrowParameterDeclaration()) {
          scope.recordDeclarationError(template, loc);
        } else {
          return;
        }
      }
      recordAsyncArrowParametersError(template, loc) {
        const {
          stack
        } = this;
        let i = stack.length - 1;
        let scope = stack[i];
        while (scope.canBeArrowParameterDeclaration()) {
          if (scope.type === kMaybeAsyncArrowParameterDeclaration2) {
            scope.recordDeclarationError(template, loc);
          }
          scope = stack[--i];
        }
      }
      validateAsPattern() {
        const {
          stack
        } = this;
        const currentScope = stack[stack.length - 1];
        if (!currentScope.canBeArrowParameterDeclaration())
          return;
        currentScope.iterateErrors(({
          message,
          loc
        }) => {
          this.raise(message, {
            at: loc
          });
          let i = stack.length - 2;
          let scope = stack[i];
          while (scope.canBeArrowParameterDeclaration()) {
            scope.clearDeclarationError(loc);
            scope = stack[--i];
          }
        });
      }
    };
    function newParameterDeclarationScope2() {
      return new ExpressionScope2(kParameterDeclaration2);
    }
    function newArrowHeadScope2() {
      return new ArrowHeadParsingScope2(kMaybeArrowParameterDeclaration2);
    }
    function newAsyncArrowScope2() {
      return new ArrowHeadParsingScope2(kMaybeAsyncArrowParameterDeclaration2);
    }
    function newExpressionScope2() {
      return new ExpressionScope2();
    }
    var PARAM2 = 0;
    var PARAM_YIELD2 = 1;
    var PARAM_AWAIT2 = 2;
    var PARAM_RETURN2 = 4;
    var PARAM_IN2 = 8;
    var ProductionParameterHandler2 = class {
      constructor() {
        this.stacks = [];
      }
      enter(flags) {
        this.stacks.push(flags);
      }
      exit() {
        this.stacks.pop();
      }
      currentFlags() {
        return this.stacks[this.stacks.length - 1];
      }
      get hasAwait() {
        return (this.currentFlags() & PARAM_AWAIT2) > 0;
      }
      get hasYield() {
        return (this.currentFlags() & PARAM_YIELD2) > 0;
      }
      get hasReturn() {
        return (this.currentFlags() & PARAM_RETURN2) > 0;
      }
      get hasIn() {
        return (this.currentFlags() & PARAM_IN2) > 0;
      }
    };
    function functionFlags2(isAsync, isGenerator) {
      return (isAsync ? PARAM_AWAIT2 : 0) | (isGenerator ? PARAM_YIELD2 : 0);
    }
    var UtilParser2 = class extends Tokenizer2 {
      addExtra(node2, key, value, enumerable = true) {
        if (!node2)
          return;
        const extra = node2.extra = node2.extra || {};
        if (enumerable) {
          extra[key] = value;
        } else {
          Object.defineProperty(extra, key, {
            enumerable,
            value
          });
        }
      }
      isContextual(token) {
        return this.state.type === token && !this.state.containsEsc;
      }
      isUnparsedContextual(nameStart, name) {
        const nameEnd = nameStart + name.length;
        if (this.input.slice(nameStart, nameEnd) === name) {
          const nextCh = this.input.charCodeAt(nameEnd);
          return !(isIdentifierChar2(nextCh) || (nextCh & 64512) === 55296);
        }
        return false;
      }
      isLookaheadContextual(name) {
        const next = this.nextTokenStart();
        return this.isUnparsedContextual(next, name);
      }
      eatContextual(token) {
        if (this.isContextual(token)) {
          this.next();
          return true;
        }
        return false;
      }
      expectContextual(token, template) {
        if (!this.eatContextual(token)) {
          if (template != null) {
            throw this.raise(template, {
              at: this.state.startLoc
            });
          }
          throw this.unexpected(null, token);
        }
      }
      canInsertSemicolon() {
        return this.match(135) || this.match(8) || this.hasPrecedingLineBreak();
      }
      hasPrecedingLineBreak() {
        return lineBreak2.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
      }
      hasFollowingLineBreak() {
        skipWhiteSpaceToLineBreak2.lastIndex = this.state.end;
        return skipWhiteSpaceToLineBreak2.test(this.input);
      }
      isLineTerminator() {
        return this.eat(13) || this.canInsertSemicolon();
      }
      semicolon(allowAsi = true) {
        if (allowAsi ? this.isLineTerminator() : this.eat(13))
          return;
        this.raise(ErrorMessages2.MissingSemicolon, {
          at: this.state.lastTokEndLoc
        });
      }
      expect(type, loc) {
        this.eat(type) || this.unexpected(loc, type);
      }
      assertNoSpace(message = "Unexpected space.") {
        if (this.state.start > this.state.lastTokEndLoc.index) {
          this.raise({
            code: ErrorCodes2.SyntaxError,
            reasonCode: "UnexpectedSpace",
            template: message
          }, {
            at: this.state.lastTokEndLoc
          });
        }
      }
      unexpected(loc, type) {
        throw this.raise({
          code: ErrorCodes2.SyntaxError,
          reasonCode: "UnexpectedToken",
          template: type != null ? `Unexpected token, expected "${tokenLabelName2(type)}"` : "Unexpected token"
        }, {
          at: loc != null ? loc : this.state.startLoc
        });
      }
      getPluginNamesFromConfigs(pluginConfigs) {
        return pluginConfigs.map((c) => {
          if (typeof c === "string") {
            return c;
          } else {
            return c[0];
          }
        });
      }
      expectPlugin(pluginConfig, loc) {
        if (!this.hasPlugin(pluginConfig)) {
          throw this.raiseWithData(loc != null ? loc : this.state.startLoc, {
            missingPlugin: this.getPluginNamesFromConfigs([pluginConfig])
          }, `This experimental syntax requires enabling the parser plugin: ${JSON.stringify(pluginConfig)}.`);
        }
        return true;
      }
      expectOnePlugin(pluginConfigs) {
        if (!pluginConfigs.some((c) => this.hasPlugin(c))) {
          throw this.raiseWithData(this.state.startLoc, {
            missingPlugin: this.getPluginNamesFromConfigs(pluginConfigs)
          }, `This experimental syntax requires enabling one of the following parser plugin(s): ${pluginConfigs.map((c) => JSON.stringify(c)).join(", ")}.`);
        }
      }
      tryParse(fn, oldState = this.state.clone()) {
        const abortSignal = {
          node: null
        };
        try {
          const node2 = fn((node3 = null) => {
            abortSignal.node = node3;
            throw abortSignal;
          });
          if (this.state.errors.length > oldState.errors.length) {
            const failState = this.state;
            this.state = oldState;
            this.state.tokensLength = failState.tokensLength;
            return {
              node: node2,
              error: failState.errors[oldState.errors.length],
              thrown: false,
              aborted: false,
              failState
            };
          }
          return {
            node: node2,
            error: null,
            thrown: false,
            aborted: false,
            failState: null
          };
        } catch (error2) {
          const failState = this.state;
          this.state = oldState;
          if (error2 instanceof SyntaxError) {
            return {
              node: null,
              error: error2,
              thrown: true,
              aborted: false,
              failState
            };
          }
          if (error2 === abortSignal) {
            return {
              node: abortSignal.node,
              error: null,
              thrown: false,
              aborted: true,
              failState
            };
          }
          throw error2;
        }
      }
      checkExpressionErrors(refExpressionErrors, andThrow) {
        if (!refExpressionErrors)
          return false;
        const {
          shorthandAssignLoc,
          doubleProtoLoc,
          privateKeyLoc,
          optionalParametersLoc
        } = refExpressionErrors;
        const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;
        if (!andThrow) {
          return hasErrors;
        }
        if (shorthandAssignLoc != null) {
          this.raise(ErrorMessages2.InvalidCoverInitializedName, {
            at: shorthandAssignLoc
          });
        }
        if (doubleProtoLoc != null) {
          this.raise(ErrorMessages2.DuplicateProto, {
            at: doubleProtoLoc
          });
        }
        if (privateKeyLoc != null) {
          this.raise(ErrorMessages2.UnexpectedPrivateField, {
            at: privateKeyLoc
          });
        }
        if (optionalParametersLoc != null) {
          this.unexpected(optionalParametersLoc);
        }
      }
      isLiteralPropertyName() {
        return tokenIsLiteralPropertyName2(this.state.type);
      }
      isPrivateName(node2) {
        return node2.type === "PrivateName";
      }
      getPrivateNameSV(node2) {
        return node2.id.name;
      }
      hasPropertyAsPrivateName(node2) {
        return (node2.type === "MemberExpression" || node2.type === "OptionalMemberExpression") && this.isPrivateName(node2.property);
      }
      isOptionalChain(node2) {
        return node2.type === "OptionalMemberExpression" || node2.type === "OptionalCallExpression";
      }
      isObjectProperty(node2) {
        return node2.type === "ObjectProperty";
      }
      isObjectMethod(node2) {
        return node2.type === "ObjectMethod";
      }
      initializeScopes(inModule = this.options.sourceType === "module") {
        const oldLabels = this.state.labels;
        this.state.labels = [];
        const oldExportedIdentifiers = this.exportedIdentifiers;
        this.exportedIdentifiers = /* @__PURE__ */ new Set();
        const oldInModule = this.inModule;
        this.inModule = inModule;
        const oldScope = this.scope;
        const ScopeHandler3 = this.getScopeHandler();
        this.scope = new ScopeHandler3(this.raise.bind(this), this.inModule);
        const oldProdParam = this.prodParam;
        this.prodParam = new ProductionParameterHandler2();
        const oldClassScope = this.classScope;
        this.classScope = new ClassScopeHandler2(this.raise.bind(this));
        const oldExpressionScope = this.expressionScope;
        this.expressionScope = new ExpressionScopeHandler2(this.raise.bind(this));
        return () => {
          this.state.labels = oldLabels;
          this.exportedIdentifiers = oldExportedIdentifiers;
          this.inModule = oldInModule;
          this.scope = oldScope;
          this.prodParam = oldProdParam;
          this.classScope = oldClassScope;
          this.expressionScope = oldExpressionScope;
        };
      }
      enterInitialScopes() {
        let paramFlags = PARAM2;
        if (this.inModule) {
          paramFlags |= PARAM_AWAIT2;
        }
        this.scope.enter(SCOPE_PROGRAM2);
        this.prodParam.enter(paramFlags);
      }
      checkDestructuringPrivate(refExpressionErrors) {
        const {
          privateKeyLoc
        } = refExpressionErrors;
        if (privateKeyLoc !== null) {
          this.expectPlugin("destructuringPrivate", privateKeyLoc);
        }
      }
    };
    var ExpressionErrors2 = class {
      constructor() {
        this.shorthandAssignLoc = null;
        this.doubleProtoLoc = null;
        this.privateKeyLoc = null;
        this.optionalParametersLoc = null;
      }
    };
    var Node2 = class {
      constructor(parser2, pos, loc) {
        this.type = "";
        this.start = pos;
        this.end = 0;
        this.loc = new SourceLocation2(loc);
        if (parser2 != null && parser2.options.ranges)
          this.range = [pos, 0];
        if (parser2 != null && parser2.filename)
          this.loc.filename = parser2.filename;
      }
    };
    var NodePrototype2 = Node2.prototype;
    {
      NodePrototype2.__clone = function() {
        const newNode = new Node2();
        const keys = Object.keys(this);
        for (let i = 0, length2 = keys.length; i < length2; i++) {
          const key = keys[i];
          if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") {
            newNode[key] = this[key];
          }
        }
        return newNode;
      };
    }
    function clonePlaceholder2(node2) {
      return cloneIdentifier2(node2);
    }
    function cloneIdentifier2(node2) {
      const {
        type,
        start,
        end,
        loc,
        range: range2,
        extra,
        name
      } = node2;
      const cloned = Object.create(NodePrototype2);
      cloned.type = type;
      cloned.start = start;
      cloned.end = end;
      cloned.loc = loc;
      cloned.range = range2;
      cloned.extra = extra;
      cloned.name = name;
      if (type === "Placeholder") {
        cloned.expectedNode = node2.expectedNode;
      }
      return cloned;
    }
    function cloneStringLiteral2(node2) {
      const {
        type,
        start,
        end,
        loc,
        range: range2,
        extra
      } = node2;
      if (type === "Placeholder") {
        return clonePlaceholder2(node2);
      }
      const cloned = Object.create(NodePrototype2);
      cloned.type = type;
      cloned.start = start;
      cloned.end = end;
      cloned.loc = loc;
      cloned.range = range2;
      if (node2.raw !== void 0) {
        cloned.raw = node2.raw;
      } else {
        cloned.extra = extra;
      }
      cloned.value = node2.value;
      return cloned;
    }
    var NodeUtils2 = class extends UtilParser2 {
      startNode() {
        return new Node2(this, this.state.start, this.state.startLoc);
      }
      startNodeAt(pos, loc) {
        return new Node2(this, pos, loc);
      }
      startNodeAtNode(type) {
        return this.startNodeAt(type.start, type.loc.start);
      }
      finishNode(node2, type) {
        return this.finishNodeAt(node2, type, this.state.lastTokEndLoc);
      }
      finishNodeAt(node2, type, endLoc) {
        node2.type = type;
        node2.end = endLoc.index;
        node2.loc.end = endLoc;
        if (this.options.ranges)
          node2.range[1] = endLoc.index;
        if (this.options.attachComment)
          this.processComment(node2);
        return node2;
      }
      resetStartLocation(node2, start, startLoc) {
        node2.start = start;
        node2.loc.start = startLoc;
        if (this.options.ranges)
          node2.range[0] = start;
      }
      resetEndLocation(node2, endLoc = this.state.lastTokEndLoc) {
        node2.end = endLoc.index;
        node2.loc.end = endLoc;
        if (this.options.ranges)
          node2.range[1] = endLoc.index;
      }
      resetStartLocationFromNode(node2, locationNode) {
        this.resetStartLocation(node2, locationNode.start, locationNode.loc.start);
      }
    };
    var reservedTypes2 = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);
    var FlowErrors2 = makeErrorTemplates2({
      AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
      AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
      AssignReservedType: "Cannot overwrite reserved type %0.",
      DeclareClassElement: "The `declare` modifier can only appear on class fields.",
      DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
      DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
      EnumBooleanMemberNotInitialized: "Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.",
      EnumDuplicateMemberName: "Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.",
      EnumInconsistentMemberValues: "Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.",
      EnumInvalidExplicitType: "Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.",
      EnumInvalidExplicitTypeUnknownSupplied: "Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.",
      EnumInvalidMemberInitializerPrimaryType: "Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.",
      EnumInvalidMemberInitializerSymbolType: "Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.",
      EnumInvalidMemberInitializerUnknownType: "The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.",
      EnumInvalidMemberName: "Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.",
      EnumNumberMemberNotInitialized: "Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.",
      EnumStringMemberInconsistentlyInitailized: "String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.",
      GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
      ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
      InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
      InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
      InexactVariance: "Explicit inexact syntax cannot have variance.",
      InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
      MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
      NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
      NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
      PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
      SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
      SpreadVariance: "Spread properties cannot have variance.",
      ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
      ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
      ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
      ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
      ThisParamNoDefault: "The `this` parameter may not have a default value.",
      TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
      TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
      UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
      UnexpectedReservedType: "Unexpected reserved type %0.",
      UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
      UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
      UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
      UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
      UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
      UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
      UnsupportedDeclareExportKind: "`declare export %0` is not supported. Use `%1` instead.",
      UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
      UnterminatedFlowComment: "Unterminated flow-comment."
    }, ErrorCodes2.SyntaxError, "flow");
    function isEsModuleType2(bodyElement) {
      return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
    }
    function hasTypeImportKind2(node2) {
      return node2.importKind === "type" || node2.importKind === "typeof";
    }
    function isMaybeDefaultImport2(type) {
      return tokenIsKeywordOrIdentifier2(type) && type !== 97;
    }
    var exportSuggestions2 = {
      const: "declare export var",
      let: "declare export var",
      type: "export type",
      interface: "export interface"
    };
    function partition2(list2, test) {
      const list1 = [];
      const list22 = [];
      for (let i = 0; i < list2.length; i++) {
        (test(list2[i], i, list2) ? list1 : list22).push(list2[i]);
      }
      return [list1, list22];
    }
    var FLOW_PRAGMA_REGEX2 = /\*?\s*@((?:no)?flow)\b/;
    var flow2 = (superClass) => class extends superClass {
      constructor(...args) {
        super(...args);
        this.flowPragma = void 0;
      }
      getScopeHandler() {
        return FlowScopeHandler2;
      }
      shouldParseTypes() {
        return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
      }
      shouldParseEnums() {
        return !!this.getPluginOption("flow", "enums");
      }
      finishToken(type, val) {
        if (type !== 129 && type !== 13 && type !== 28) {
          if (this.flowPragma === void 0) {
            this.flowPragma = null;
          }
        }
        return super.finishToken(type, val);
      }
      addComment(comment2) {
        if (this.flowPragma === void 0) {
          const matches = FLOW_PRAGMA_REGEX2.exec(comment2.value);
          if (!matches)
            ;
          else if (matches[1] === "flow") {
            this.flowPragma = "flow";
          } else if (matches[1] === "noflow") {
            this.flowPragma = "noflow";
          } else {
            throw new Error("Unexpected flow pragma");
          }
        }
        return super.addComment(comment2);
      }
      flowParseTypeInitialiser(tok) {
        const oldInType = this.state.inType;
        this.state.inType = true;
        this.expect(tok || 14);
        const type = this.flowParseType();
        this.state.inType = oldInType;
        return type;
      }
      flowParsePredicate() {
        const node2 = this.startNode();
        const moduloLoc = this.state.startLoc;
        this.next();
        this.expectContextual(107);
        if (this.state.lastTokStart > moduloLoc.index + 1) {
          this.raise(FlowErrors2.UnexpectedSpaceBetweenModuloChecks, {
            at: moduloLoc
          });
        }
        if (this.eat(10)) {
          node2.value = this.parseExpression();
          this.expect(11);
          return this.finishNode(node2, "DeclaredPredicate");
        } else {
          return this.finishNode(node2, "InferredPredicate");
        }
      }
      flowParseTypeAndPredicateInitialiser() {
        const oldInType = this.state.inType;
        this.state.inType = true;
        this.expect(14);
        let type = null;
        let predicate = null;
        if (this.match(54)) {
          this.state.inType = oldInType;
          predicate = this.flowParsePredicate();
        } else {
          type = this.flowParseType();
          this.state.inType = oldInType;
          if (this.match(54)) {
            predicate = this.flowParsePredicate();
          }
        }
        return [type, predicate];
      }
      flowParseDeclareClass(node2) {
        this.next();
        this.flowParseInterfaceish(node2, true);
        return this.finishNode(node2, "DeclareClass");
      }
      flowParseDeclareFunction(node2) {
        this.next();
        const id2 = node2.id = this.parseIdentifier();
        const typeNode = this.startNode();
        const typeContainer = this.startNode();
        if (this.match(47)) {
          typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          typeNode.typeParameters = null;
        }
        this.expect(10);
        const tmp = this.flowParseFunctionTypeParams();
        typeNode.params = tmp.params;
        typeNode.rest = tmp.rest;
        typeNode.this = tmp._this;
        this.expect(11);
        [typeNode.returnType, node2.predicate] = this.flowParseTypeAndPredicateInitialiser();
        typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
        id2.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
        this.resetEndLocation(id2);
        this.semicolon();
        this.scope.declareName(node2.id.name, BIND_FLOW_DECLARE_FN2, node2.id.loc.start);
        return this.finishNode(node2, "DeclareFunction");
      }
      flowParseDeclare(node2, insideModule) {
        if (this.match(80)) {
          return this.flowParseDeclareClass(node2);
        } else if (this.match(68)) {
          return this.flowParseDeclareFunction(node2);
        } else if (this.match(74)) {
          return this.flowParseDeclareVariable(node2);
        } else if (this.eatContextual(123)) {
          if (this.match(16)) {
            return this.flowParseDeclareModuleExports(node2);
          } else {
            if (insideModule) {
              this.raise(FlowErrors2.NestedDeclareModule, {
                at: this.state.lastTokStartLoc
              });
            }
            return this.flowParseDeclareModule(node2);
          }
        } else if (this.isContextual(126)) {
          return this.flowParseDeclareTypeAlias(node2);
        } else if (this.isContextual(127)) {
          return this.flowParseDeclareOpaqueType(node2);
        } else if (this.isContextual(125)) {
          return this.flowParseDeclareInterface(node2);
        } else if (this.match(82)) {
          return this.flowParseDeclareExportDeclaration(node2, insideModule);
        } else {
          throw this.unexpected();
        }
      }
      flowParseDeclareVariable(node2) {
        this.next();
        node2.id = this.flowParseTypeAnnotatableIdentifier(true);
        this.scope.declareName(node2.id.name, BIND_VAR2, node2.id.loc.start);
        this.semicolon();
        return this.finishNode(node2, "DeclareVariable");
      }
      flowParseDeclareModule(node2) {
        this.scope.enter(SCOPE_OTHER2);
        if (this.match(129)) {
          node2.id = this.parseExprAtom();
        } else {
          node2.id = this.parseIdentifier();
        }
        const bodyNode = node2.body = this.startNode();
        const body = bodyNode.body = [];
        this.expect(5);
        while (!this.match(8)) {
          let bodyNode2 = this.startNode();
          if (this.match(83)) {
            this.next();
            if (!this.isContextual(126) && !this.match(87)) {
              this.raise(FlowErrors2.InvalidNonTypeImportInDeclareModule, {
                at: this.state.lastTokStartLoc
              });
            }
            this.parseImport(bodyNode2);
          } else {
            this.expectContextual(121, FlowErrors2.UnsupportedStatementInDeclareModule);
            bodyNode2 = this.flowParseDeclare(bodyNode2, true);
          }
          body.push(bodyNode2);
        }
        this.scope.exit();
        this.expect(8);
        this.finishNode(bodyNode, "BlockStatement");
        let kind = null;
        let hasModuleExport = false;
        body.forEach((bodyElement) => {
          if (isEsModuleType2(bodyElement)) {
            if (kind === "CommonJS") {
              this.raise(FlowErrors2.AmbiguousDeclareModuleKind, {
                node: bodyElement
              });
            }
            kind = "ES";
          } else if (bodyElement.type === "DeclareModuleExports") {
            if (hasModuleExport) {
              this.raise(FlowErrors2.DuplicateDeclareModuleExports, {
                node: bodyElement
              });
            }
            if (kind === "ES") {
              this.raise(FlowErrors2.AmbiguousDeclareModuleKind, {
                node: bodyElement
              });
            }
            kind = "CommonJS";
            hasModuleExport = true;
          }
        });
        node2.kind = kind || "CommonJS";
        return this.finishNode(node2, "DeclareModule");
      }
      flowParseDeclareExportDeclaration(node2, insideModule) {
        this.expect(82);
        if (this.eat(65)) {
          if (this.match(68) || this.match(80)) {
            node2.declaration = this.flowParseDeclare(this.startNode());
          } else {
            node2.declaration = this.flowParseType();
            this.semicolon();
          }
          node2.default = true;
          return this.finishNode(node2, "DeclareExportDeclaration");
        } else {
          if (this.match(75) || this.isLet() || (this.isContextual(126) || this.isContextual(125)) && !insideModule) {
            const label = this.state.value;
            const suggestion = exportSuggestions2[label];
            throw this.raise(FlowErrors2.UnsupportedDeclareExportKind, {
              at: this.state.startLoc
            }, label, suggestion);
          }
          if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(127)) {
            node2.declaration = this.flowParseDeclare(this.startNode());
            node2.default = false;
            return this.finishNode(node2, "DeclareExportDeclaration");
          } else if (this.match(55) || this.match(5) || this.isContextual(125) || this.isContextual(126) || this.isContextual(127)) {
            node2 = this.parseExport(node2);
            if (node2.type === "ExportNamedDeclaration") {
              node2.type = "ExportDeclaration";
              node2.default = false;
              delete node2.exportKind;
            }
            node2.type = "Declare" + node2.type;
            return node2;
          }
        }
        throw this.unexpected();
      }
      flowParseDeclareModuleExports(node2) {
        this.next();
        this.expectContextual(108);
        node2.typeAnnotation = this.flowParseTypeAnnotation();
        this.semicolon();
        return this.finishNode(node2, "DeclareModuleExports");
      }
      flowParseDeclareTypeAlias(node2) {
        this.next();
        this.flowParseTypeAlias(node2);
        node2.type = "DeclareTypeAlias";
        return node2;
      }
      flowParseDeclareOpaqueType(node2) {
        this.next();
        this.flowParseOpaqueType(node2, true);
        node2.type = "DeclareOpaqueType";
        return node2;
      }
      flowParseDeclareInterface(node2) {
        this.next();
        this.flowParseInterfaceish(node2);
        return this.finishNode(node2, "DeclareInterface");
      }
      flowParseInterfaceish(node2, isClass = false) {
        node2.id = this.flowParseRestrictedIdentifier(!isClass, true);
        this.scope.declareName(node2.id.name, isClass ? BIND_FUNCTION2 : BIND_LEXICAL2, node2.id.loc.start);
        if (this.match(47)) {
          node2.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          node2.typeParameters = null;
        }
        node2.extends = [];
        node2.implements = [];
        node2.mixins = [];
        if (this.eat(81)) {
          do {
            node2.extends.push(this.flowParseInterfaceExtends());
          } while (!isClass && this.eat(12));
        }
        if (this.isContextual(114)) {
          this.next();
          do {
            node2.mixins.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
        if (this.isContextual(110)) {
          this.next();
          do {
            node2.implements.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
        node2.body = this.flowParseObjectType({
          allowStatic: isClass,
          allowExact: false,
          allowSpread: false,
          allowProto: isClass,
          allowInexact: false
        });
      }
      flowParseInterfaceExtends() {
        const node2 = this.startNode();
        node2.id = this.flowParseQualifiedTypeIdentifier();
        if (this.match(47)) {
          node2.typeParameters = this.flowParseTypeParameterInstantiation();
        } else {
          node2.typeParameters = null;
        }
        return this.finishNode(node2, "InterfaceExtends");
      }
      flowParseInterface(node2) {
        this.flowParseInterfaceish(node2);
        return this.finishNode(node2, "InterfaceDeclaration");
      }
      checkNotUnderscore(word) {
        if (word === "_") {
          this.raise(FlowErrors2.UnexpectedReservedUnderscore, {
            at: this.state.startLoc
          });
        }
      }
      checkReservedType(word, startLoc, declaration2) {
        if (!reservedTypes2.has(word))
          return;
        this.raise(declaration2 ? FlowErrors2.AssignReservedType : FlowErrors2.UnexpectedReservedType, {
          at: startLoc
        }, word);
      }
      flowParseRestrictedIdentifier(liberal, declaration2) {
        this.checkReservedType(this.state.value, this.state.startLoc, declaration2);
        return this.parseIdentifier(liberal);
      }
      flowParseTypeAlias(node2) {
        node2.id = this.flowParseRestrictedIdentifier(false, true);
        this.scope.declareName(node2.id.name, BIND_LEXICAL2, node2.id.loc.start);
        if (this.match(47)) {
          node2.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          node2.typeParameters = null;
        }
        node2.right = this.flowParseTypeInitialiser(29);
        this.semicolon();
        return this.finishNode(node2, "TypeAlias");
      }
      flowParseOpaqueType(node2, declare) {
        this.expectContextual(126);
        node2.id = this.flowParseRestrictedIdentifier(true, true);
        this.scope.declareName(node2.id.name, BIND_LEXICAL2, node2.id.loc.start);
        if (this.match(47)) {
          node2.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          node2.typeParameters = null;
        }
        node2.supertype = null;
        if (this.match(14)) {
          node2.supertype = this.flowParseTypeInitialiser(14);
        }
        node2.impltype = null;
        if (!declare) {
          node2.impltype = this.flowParseTypeInitialiser(29);
        }
        this.semicolon();
        return this.finishNode(node2, "OpaqueType");
      }
      flowParseTypeParameter(requireDefault = false) {
        const nodeStartLoc = this.state.startLoc;
        const node2 = this.startNode();
        const variance = this.flowParseVariance();
        const ident = this.flowParseTypeAnnotatableIdentifier();
        node2.name = ident.name;
        node2.variance = variance;
        node2.bound = ident.typeAnnotation;
        if (this.match(29)) {
          this.eat(29);
          node2.default = this.flowParseType();
        } else {
          if (requireDefault) {
            this.raise(FlowErrors2.MissingTypeParamDefault, {
              at: nodeStartLoc
            });
          }
        }
        return this.finishNode(node2, "TypeParameter");
      }
      flowParseTypeParameterDeclaration() {
        const oldInType = this.state.inType;
        const node2 = this.startNode();
        node2.params = [];
        this.state.inType = true;
        if (this.match(47) || this.match(138)) {
          this.next();
        } else {
          this.unexpected();
        }
        let defaultRequired = false;
        do {
          const typeParameter = this.flowParseTypeParameter(defaultRequired);
          node2.params.push(typeParameter);
          if (typeParameter.default) {
            defaultRequired = true;
          }
          if (!this.match(48)) {
            this.expect(12);
          }
        } while (!this.match(48));
        this.expect(48);
        this.state.inType = oldInType;
        return this.finishNode(node2, "TypeParameterDeclaration");
      }
      flowParseTypeParameterInstantiation() {
        const node2 = this.startNode();
        const oldInType = this.state.inType;
        node2.params = [];
        this.state.inType = true;
        this.expect(47);
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        this.state.noAnonFunctionType = false;
        while (!this.match(48)) {
          node2.params.push(this.flowParseType());
          if (!this.match(48)) {
            this.expect(12);
          }
        }
        this.state.noAnonFunctionType = oldNoAnonFunctionType;
        this.expect(48);
        this.state.inType = oldInType;
        return this.finishNode(node2, "TypeParameterInstantiation");
      }
      flowParseTypeParameterInstantiationCallOrNew() {
        const node2 = this.startNode();
        const oldInType = this.state.inType;
        node2.params = [];
        this.state.inType = true;
        this.expect(47);
        while (!this.match(48)) {
          node2.params.push(this.flowParseTypeOrImplicitInstantiation());
          if (!this.match(48)) {
            this.expect(12);
          }
        }
        this.expect(48);
        this.state.inType = oldInType;
        return this.finishNode(node2, "TypeParameterInstantiation");
      }
      flowParseInterfaceType() {
        const node2 = this.startNode();
        this.expectContextual(125);
        node2.extends = [];
        if (this.eat(81)) {
          do {
            node2.extends.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
        node2.body = this.flowParseObjectType({
          allowStatic: false,
          allowExact: false,
          allowSpread: false,
          allowProto: false,
          allowInexact: false
        });
        return this.finishNode(node2, "InterfaceTypeAnnotation");
      }
      flowParseObjectPropertyKey() {
        return this.match(130) || this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);
      }
      flowParseObjectTypeIndexer(node2, isStatic, variance) {
        node2.static = isStatic;
        if (this.lookahead().type === 14) {
          node2.id = this.flowParseObjectPropertyKey();
          node2.key = this.flowParseTypeInitialiser();
        } else {
          node2.id = null;
          node2.key = this.flowParseType();
        }
        this.expect(3);
        node2.value = this.flowParseTypeInitialiser();
        node2.variance = variance;
        return this.finishNode(node2, "ObjectTypeIndexer");
      }
      flowParseObjectTypeInternalSlot(node2, isStatic) {
        node2.static = isStatic;
        node2.id = this.flowParseObjectPropertyKey();
        this.expect(3);
        this.expect(3);
        if (this.match(47) || this.match(10)) {
          node2.method = true;
          node2.optional = false;
          node2.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node2.start, node2.loc.start));
        } else {
          node2.method = false;
          if (this.eat(17)) {
            node2.optional = true;
          }
          node2.value = this.flowParseTypeInitialiser();
        }
        return this.finishNode(node2, "ObjectTypeInternalSlot");
      }
      flowParseObjectTypeMethodish(node2) {
        node2.params = [];
        node2.rest = null;
        node2.typeParameters = null;
        node2.this = null;
        if (this.match(47)) {
          node2.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        this.expect(10);
        if (this.match(78)) {
          node2.this = this.flowParseFunctionTypeParam(true);
          node2.this.name = null;
          if (!this.match(11)) {
            this.expect(12);
          }
        }
        while (!this.match(11) && !this.match(21)) {
          node2.params.push(this.flowParseFunctionTypeParam(false));
          if (!this.match(11)) {
            this.expect(12);
          }
        }
        if (this.eat(21)) {
          node2.rest = this.flowParseFunctionTypeParam(false);
        }
        this.expect(11);
        node2.returnType = this.flowParseTypeInitialiser();
        return this.finishNode(node2, "FunctionTypeAnnotation");
      }
      flowParseObjectTypeCallProperty(node2, isStatic) {
        const valueNode = this.startNode();
        node2.static = isStatic;
        node2.value = this.flowParseObjectTypeMethodish(valueNode);
        return this.finishNode(node2, "ObjectTypeCallProperty");
      }
      flowParseObjectType({
        allowStatic,
        allowExact,
        allowSpread,
        allowProto,
        allowInexact
      }) {
        const oldInType = this.state.inType;
        this.state.inType = true;
        const nodeStart = this.startNode();
        nodeStart.callProperties = [];
        nodeStart.properties = [];
        nodeStart.indexers = [];
        nodeStart.internalSlots = [];
        let endDelim;
        let exact;
        let inexact = false;
        if (allowExact && this.match(6)) {
          this.expect(6);
          endDelim = 9;
          exact = true;
        } else {
          this.expect(5);
          endDelim = 8;
          exact = false;
        }
        nodeStart.exact = exact;
        while (!this.match(endDelim)) {
          let isStatic = false;
          let protoStartLoc = null;
          let inexactStartLoc = null;
          const node2 = this.startNode();
          if (allowProto && this.isContextual(115)) {
            const lookahead = this.lookahead();
            if (lookahead.type !== 14 && lookahead.type !== 17) {
              this.next();
              protoStartLoc = this.state.startLoc;
              allowStatic = false;
            }
          }
          if (allowStatic && this.isContextual(104)) {
            const lookahead = this.lookahead();
            if (lookahead.type !== 14 && lookahead.type !== 17) {
              this.next();
              isStatic = true;
            }
          }
          const variance = this.flowParseVariance();
          if (this.eat(0)) {
            if (protoStartLoc != null) {
              this.unexpected(protoStartLoc);
            }
            if (this.eat(0)) {
              if (variance) {
                this.unexpected(variance.loc.start);
              }
              nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node2, isStatic));
            } else {
              nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node2, isStatic, variance));
            }
          } else if (this.match(10) || this.match(47)) {
            if (protoStartLoc != null) {
              this.unexpected(protoStartLoc);
            }
            if (variance) {
              this.unexpected(variance.loc.start);
            }
            nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node2, isStatic));
          } else {
            let kind = "init";
            if (this.isContextual(98) || this.isContextual(103)) {
              const lookahead = this.lookahead();
              if (tokenIsLiteralPropertyName2(lookahead.type)) {
                kind = this.state.value;
                this.next();
              }
            }
            const propOrInexact = this.flowParseObjectTypeProperty(node2, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);
            if (propOrInexact === null) {
              inexact = true;
              inexactStartLoc = this.state.lastTokStartLoc;
            } else {
              nodeStart.properties.push(propOrInexact);
            }
          }
          this.flowObjectTypeSemicolon();
          if (inexactStartLoc && !this.match(8) && !this.match(9)) {
            this.raise(FlowErrors2.UnexpectedExplicitInexactInObject, {
              at: inexactStartLoc
            });
          }
        }
        this.expect(endDelim);
        if (allowSpread) {
          nodeStart.inexact = inexact;
        }
        const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
        this.state.inType = oldInType;
        return out;
      }
      flowParseObjectTypeProperty(node2, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
        if (this.eat(21)) {
          const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);
          if (isInexactToken) {
            if (!allowSpread) {
              this.raise(FlowErrors2.InexactInsideNonObject, {
                at: this.state.lastTokStartLoc
              });
            } else if (!allowInexact) {
              this.raise(FlowErrors2.InexactInsideExact, {
                at: this.state.lastTokStartLoc
              });
            }
            if (variance) {
              this.raise(FlowErrors2.InexactVariance, {
                node: variance
              });
            }
            return null;
          }
          if (!allowSpread) {
            this.raise(FlowErrors2.UnexpectedSpreadType, {
              at: this.state.lastTokStartLoc
            });
          }
          if (protoStartLoc != null) {
            this.unexpected(protoStartLoc);
          }
          if (variance) {
            this.raise(FlowErrors2.SpreadVariance, {
              node: variance
            });
          }
          node2.argument = this.flowParseType();
          return this.finishNode(node2, "ObjectTypeSpreadProperty");
        } else {
          node2.key = this.flowParseObjectPropertyKey();
          node2.static = isStatic;
          node2.proto = protoStartLoc != null;
          node2.kind = kind;
          let optional = false;
          if (this.match(47) || this.match(10)) {
            node2.method = true;
            if (protoStartLoc != null) {
              this.unexpected(protoStartLoc);
            }
            if (variance) {
              this.unexpected(variance.loc.start);
            }
            node2.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node2.start, node2.loc.start));
            if (kind === "get" || kind === "set") {
              this.flowCheckGetterSetterParams(node2);
            }
            if (!allowSpread && node2.key.name === "constructor" && node2.value.this) {
              this.raise(FlowErrors2.ThisParamBannedInConstructor, {
                node: node2.value.this
              });
            }
          } else {
            if (kind !== "init")
              this.unexpected();
            node2.method = false;
            if (this.eat(17)) {
              optional = true;
            }
            node2.value = this.flowParseTypeInitialiser();
            node2.variance = variance;
          }
          node2.optional = optional;
          return this.finishNode(node2, "ObjectTypeProperty");
        }
      }
      flowCheckGetterSetterParams(property) {
        const paramCount = property.kind === "get" ? 0 : 1;
        const length2 = property.value.params.length + (property.value.rest ? 1 : 0);
        if (property.value.this) {
          this.raise(property.kind === "get" ? FlowErrors2.GetterMayNotHaveThisParam : FlowErrors2.SetterMayNotHaveThisParam, {
            node: property.value.this
          });
        }
        if (length2 !== paramCount) {
          this.raise(property.kind === "get" ? ErrorMessages2.BadGetterArity : ErrorMessages2.BadSetterArity, {
            node: property
          });
        }
        if (property.kind === "set" && property.value.rest) {
          this.raise(ErrorMessages2.BadSetterRestParameter, {
            node: property
          });
        }
      }
      flowObjectTypeSemicolon() {
        if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {
          this.unexpected();
        }
      }
      flowParseQualifiedTypeIdentifier(startPos, startLoc, id2) {
        startPos = startPos || this.state.start;
        startLoc = startLoc || this.state.startLoc;
        let node2 = id2 || this.flowParseRestrictedIdentifier(true);
        while (this.eat(16)) {
          const node22 = this.startNodeAt(startPos, startLoc);
          node22.qualification = node2;
          node22.id = this.flowParseRestrictedIdentifier(true);
          node2 = this.finishNode(node22, "QualifiedTypeIdentifier");
        }
        return node2;
      }
      flowParseGenericType(startPos, startLoc, id2) {
        const node2 = this.startNodeAt(startPos, startLoc);
        node2.typeParameters = null;
        node2.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id2);
        if (this.match(47)) {
          node2.typeParameters = this.flowParseTypeParameterInstantiation();
        }
        return this.finishNode(node2, "GenericTypeAnnotation");
      }
      flowParseTypeofType() {
        const node2 = this.startNode();
        this.expect(87);
        node2.argument = this.flowParsePrimaryType();
        return this.finishNode(node2, "TypeofTypeAnnotation");
      }
      flowParseTupleType() {
        const node2 = this.startNode();
        node2.types = [];
        this.expect(0);
        while (this.state.pos < this.length && !this.match(3)) {
          node2.types.push(this.flowParseType());
          if (this.match(3))
            break;
          this.expect(12);
        }
        this.expect(3);
        return this.finishNode(node2, "TupleTypeAnnotation");
      }
      flowParseFunctionTypeParam(first) {
        let name = null;
        let optional = false;
        let typeAnnotation = null;
        const node2 = this.startNode();
        const lh = this.lookahead();
        const isThis = this.state.type === 78;
        if (lh.type === 14 || lh.type === 17) {
          if (isThis && !first) {
            this.raise(FlowErrors2.ThisParamMustBeFirst, {
              node: node2
            });
          }
          name = this.parseIdentifier(isThis);
          if (this.eat(17)) {
            optional = true;
            if (isThis) {
              this.raise(FlowErrors2.ThisParamMayNotBeOptional, {
                node: node2
              });
            }
          }
          typeAnnotation = this.flowParseTypeInitialiser();
        } else {
          typeAnnotation = this.flowParseType();
        }
        node2.name = name;
        node2.optional = optional;
        node2.typeAnnotation = typeAnnotation;
        return this.finishNode(node2, "FunctionTypeParam");
      }
      reinterpretTypeAsFunctionTypeParam(type) {
        const node2 = this.startNodeAt(type.start, type.loc.start);
        node2.name = null;
        node2.optional = false;
        node2.typeAnnotation = type;
        return this.finishNode(node2, "FunctionTypeParam");
      }
      flowParseFunctionTypeParams(params = []) {
        let rest = null;
        let _this = null;
        if (this.match(78)) {
          _this = this.flowParseFunctionTypeParam(true);
          _this.name = null;
          if (!this.match(11)) {
            this.expect(12);
          }
        }
        while (!this.match(11) && !this.match(21)) {
          params.push(this.flowParseFunctionTypeParam(false));
          if (!this.match(11)) {
            this.expect(12);
          }
        }
        if (this.eat(21)) {
          rest = this.flowParseFunctionTypeParam(false);
        }
        return {
          params,
          rest,
          _this
        };
      }
      flowIdentToTypeAnnotation(startPos, startLoc, node2, id2) {
        switch (id2.name) {
          case "any":
            return this.finishNode(node2, "AnyTypeAnnotation");
          case "bool":
          case "boolean":
            return this.finishNode(node2, "BooleanTypeAnnotation");
          case "mixed":
            return this.finishNode(node2, "MixedTypeAnnotation");
          case "empty":
            return this.finishNode(node2, "EmptyTypeAnnotation");
          case "number":
            return this.finishNode(node2, "NumberTypeAnnotation");
          case "string":
            return this.finishNode(node2, "StringTypeAnnotation");
          case "symbol":
            return this.finishNode(node2, "SymbolTypeAnnotation");
          default:
            this.checkNotUnderscore(id2.name);
            return this.flowParseGenericType(startPos, startLoc, id2);
        }
      }
      flowParsePrimaryType() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const node2 = this.startNode();
        let tmp;
        let type;
        let isGroupedType = false;
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        switch (this.state.type) {
          case 5:
            return this.flowParseObjectType({
              allowStatic: false,
              allowExact: false,
              allowSpread: true,
              allowProto: false,
              allowInexact: true
            });
          case 6:
            return this.flowParseObjectType({
              allowStatic: false,
              allowExact: true,
              allowSpread: true,
              allowProto: false,
              allowInexact: false
            });
          case 0:
            this.state.noAnonFunctionType = false;
            type = this.flowParseTupleType();
            this.state.noAnonFunctionType = oldNoAnonFunctionType;
            return type;
          case 47:
            node2.typeParameters = this.flowParseTypeParameterDeclaration();
            this.expect(10);
            tmp = this.flowParseFunctionTypeParams();
            node2.params = tmp.params;
            node2.rest = tmp.rest;
            node2.this = tmp._this;
            this.expect(11);
            this.expect(19);
            node2.returnType = this.flowParseType();
            return this.finishNode(node2, "FunctionTypeAnnotation");
          case 10:
            this.next();
            if (!this.match(11) && !this.match(21)) {
              if (tokenIsIdentifier2(this.state.type) || this.match(78)) {
                const token = this.lookahead().type;
                isGroupedType = token !== 17 && token !== 14;
              } else {
                isGroupedType = true;
              }
            }
            if (isGroupedType) {
              this.state.noAnonFunctionType = false;
              type = this.flowParseType();
              this.state.noAnonFunctionType = oldNoAnonFunctionType;
              if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {
                this.expect(11);
                return type;
              } else {
                this.eat(12);
              }
            }
            if (type) {
              tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
            } else {
              tmp = this.flowParseFunctionTypeParams();
            }
            node2.params = tmp.params;
            node2.rest = tmp.rest;
            node2.this = tmp._this;
            this.expect(11);
            this.expect(19);
            node2.returnType = this.flowParseType();
            node2.typeParameters = null;
            return this.finishNode(node2, "FunctionTypeAnnotation");
          case 129:
            return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
          case 85:
          case 86:
            node2.value = this.match(85);
            this.next();
            return this.finishNode(node2, "BooleanLiteralTypeAnnotation");
          case 53:
            if (this.state.value === "-") {
              this.next();
              if (this.match(130)) {
                return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node2);
              }
              if (this.match(131)) {
                return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node2);
              }
              throw this.raise(FlowErrors2.UnexpectedSubtractionOperand, {
                at: this.state.startLoc
              });
            }
            throw this.unexpected();
          case 130:
            return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
          case 131:
            return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
          case 88:
            this.next();
            return this.finishNode(node2, "VoidTypeAnnotation");
          case 84:
            this.next();
            return this.finishNode(node2, "NullLiteralTypeAnnotation");
          case 78:
            this.next();
            return this.finishNode(node2, "ThisTypeAnnotation");
          case 55:
            this.next();
            return this.finishNode(node2, "ExistsTypeAnnotation");
          case 87:
            return this.flowParseTypeofType();
          default:
            if (tokenIsKeyword2(this.state.type)) {
              const label = tokenLabelName2(this.state.type);
              this.next();
              return super.createIdentifier(node2, label);
            } else if (tokenIsIdentifier2(this.state.type)) {
              if (this.isContextual(125)) {
                return this.flowParseInterfaceType();
              }
              return this.flowIdentToTypeAnnotation(startPos, startLoc, node2, this.parseIdentifier());
            }
        }
        throw this.unexpected();
      }
      flowParsePostfixType() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let type = this.flowParsePrimaryType();
        let seenOptionalIndexedAccess = false;
        while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {
          const node2 = this.startNodeAt(startPos, startLoc);
          const optional = this.eat(18);
          seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
          this.expect(0);
          if (!optional && this.match(3)) {
            node2.elementType = type;
            this.next();
            type = this.finishNode(node2, "ArrayTypeAnnotation");
          } else {
            node2.objectType = type;
            node2.indexType = this.flowParseType();
            this.expect(3);
            if (seenOptionalIndexedAccess) {
              node2.optional = optional;
              type = this.finishNode(node2, "OptionalIndexedAccessType");
            } else {
              type = this.finishNode(node2, "IndexedAccessType");
            }
          }
        }
        return type;
      }
      flowParsePrefixType() {
        const node2 = this.startNode();
        if (this.eat(17)) {
          node2.typeAnnotation = this.flowParsePrefixType();
          return this.finishNode(node2, "NullableTypeAnnotation");
        } else {
          return this.flowParsePostfixType();
        }
      }
      flowParseAnonFunctionWithoutParens() {
        const param = this.flowParsePrefixType();
        if (!this.state.noAnonFunctionType && this.eat(19)) {
          const node2 = this.startNodeAt(param.start, param.loc.start);
          node2.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
          node2.rest = null;
          node2.this = null;
          node2.returnType = this.flowParseType();
          node2.typeParameters = null;
          return this.finishNode(node2, "FunctionTypeAnnotation");
        }
        return param;
      }
      flowParseIntersectionType() {
        const node2 = this.startNode();
        this.eat(45);
        const type = this.flowParseAnonFunctionWithoutParens();
        node2.types = [type];
        while (this.eat(45)) {
          node2.types.push(this.flowParseAnonFunctionWithoutParens());
        }
        return node2.types.length === 1 ? type : this.finishNode(node2, "IntersectionTypeAnnotation");
      }
      flowParseUnionType() {
        const node2 = this.startNode();
        this.eat(43);
        const type = this.flowParseIntersectionType();
        node2.types = [type];
        while (this.eat(43)) {
          node2.types.push(this.flowParseIntersectionType());
        }
        return node2.types.length === 1 ? type : this.finishNode(node2, "UnionTypeAnnotation");
      }
      flowParseType() {
        const oldInType = this.state.inType;
        this.state.inType = true;
        const type = this.flowParseUnionType();
        this.state.inType = oldInType;
        return type;
      }
      flowParseTypeOrImplicitInstantiation() {
        if (this.state.type === 128 && this.state.value === "_") {
          const startPos = this.state.start;
          const startLoc = this.state.startLoc;
          const node2 = this.parseIdentifier();
          return this.flowParseGenericType(startPos, startLoc, node2);
        } else {
          return this.flowParseType();
        }
      }
      flowParseTypeAnnotation() {
        const node2 = this.startNode();
        node2.typeAnnotation = this.flowParseTypeInitialiser();
        return this.finishNode(node2, "TypeAnnotation");
      }
      flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
        const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
        if (this.match(14)) {
          ident.typeAnnotation = this.flowParseTypeAnnotation();
          this.resetEndLocation(ident);
        }
        return ident;
      }
      typeCastToParameter(node2) {
        node2.expression.typeAnnotation = node2.typeAnnotation;
        this.resetEndLocation(node2.expression, node2.typeAnnotation.loc.end);
        return node2.expression;
      }
      flowParseVariance() {
        let variance = null;
        if (this.match(53)) {
          variance = this.startNode();
          if (this.state.value === "+") {
            variance.kind = "plus";
          } else {
            variance.kind = "minus";
          }
          this.next();
          this.finishNode(variance, "Variance");
        }
        return variance;
      }
      parseFunctionBody(node2, allowExpressionBody, isMethod = false) {
        if (allowExpressionBody) {
          return this.forwardNoArrowParamsConversionAt(node2, () => super.parseFunctionBody(node2, true, isMethod));
        }
        return super.parseFunctionBody(node2, false, isMethod);
      }
      parseFunctionBodyAndFinish(node2, type, isMethod = false) {
        if (this.match(14)) {
          const typeNode = this.startNode();
          [typeNode.typeAnnotation, node2.predicate] = this.flowParseTypeAndPredicateInitialiser();
          node2.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
        }
        super.parseFunctionBodyAndFinish(node2, type, isMethod);
      }
      parseStatement(context, topLevel) {
        if (this.state.strict && this.isContextual(125)) {
          const lookahead = this.lookahead();
          if (tokenIsKeywordOrIdentifier2(lookahead.type)) {
            const node2 = this.startNode();
            this.next();
            return this.flowParseInterface(node2);
          }
        } else if (this.shouldParseEnums() && this.isContextual(122)) {
          const node2 = this.startNode();
          this.next();
          return this.flowParseEnumDeclaration(node2);
        }
        const stmt = super.parseStatement(context, topLevel);
        if (this.flowPragma === void 0 && !this.isValidDirective(stmt)) {
          this.flowPragma = null;
        }
        return stmt;
      }
      parseExpressionStatement(node2, expr) {
        if (expr.type === "Identifier") {
          if (expr.name === "declare") {
            if (this.match(80) || tokenIsIdentifier2(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {
              return this.flowParseDeclare(node2);
            }
          } else if (tokenIsIdentifier2(this.state.type)) {
            if (expr.name === "interface") {
              return this.flowParseInterface(node2);
            } else if (expr.name === "type") {
              return this.flowParseTypeAlias(node2);
            } else if (expr.name === "opaque") {
              return this.flowParseOpaqueType(node2, false);
            }
          }
        }
        return super.parseExpressionStatement(node2, expr);
      }
      shouldParseExportDeclaration() {
        const {
          type
        } = this.state;
        if (tokenIsFlowInterfaceOrTypeOrOpaque2(type) || this.shouldParseEnums() && type === 122) {
          return !this.state.containsEsc;
        }
        return super.shouldParseExportDeclaration();
      }
      isExportDefaultSpecifier() {
        const {
          type
        } = this.state;
        if (tokenIsFlowInterfaceOrTypeOrOpaque2(type) || this.shouldParseEnums() && type === 122) {
          return this.state.containsEsc;
        }
        return super.isExportDefaultSpecifier();
      }
      parseExportDefaultExpression() {
        if (this.shouldParseEnums() && this.isContextual(122)) {
          const node2 = this.startNode();
          this.next();
          return this.flowParseEnumDeclaration(node2);
        }
        return super.parseExportDefaultExpression();
      }
      parseConditional(expr, startPos, startLoc, refExpressionErrors) {
        if (!this.match(17))
          return expr;
        if (this.state.maybeInArrowParameters) {
          const nextCh = this.lookaheadCharCode();
          if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
            this.setOptionalParametersError(refExpressionErrors);
            return expr;
          }
        }
        this.expect(17);
        const state = this.state.clone();
        const originalNoArrowAt = this.state.noArrowAt;
        const node2 = this.startNodeAt(startPos, startLoc);
        let {
          consequent,
          failed
        } = this.tryParseConditionalConsequent();
        let [valid, invalid] = this.getArrowLikeExpressions(consequent);
        if (failed || invalid.length > 0) {
          const noArrowAt = [...originalNoArrowAt];
          if (invalid.length > 0) {
            this.state = state;
            this.state.noArrowAt = noArrowAt;
            for (let i = 0; i < invalid.length; i++) {
              noArrowAt.push(invalid[i].start);
            }
            ({
              consequent,
              failed
            } = this.tryParseConditionalConsequent());
            [valid, invalid] = this.getArrowLikeExpressions(consequent);
          }
          if (failed && valid.length > 1) {
            this.raise(FlowErrors2.AmbiguousConditionalArrow, {
              at: state.startLoc
            });
          }
          if (failed && valid.length === 1) {
            this.state = state;
            noArrowAt.push(valid[0].start);
            this.state.noArrowAt = noArrowAt;
            ({
              consequent,
              failed
            } = this.tryParseConditionalConsequent());
          }
        }
        this.getArrowLikeExpressions(consequent, true);
        this.state.noArrowAt = originalNoArrowAt;
        this.expect(14);
        node2.test = expr;
        node2.consequent = consequent;
        node2.alternate = this.forwardNoArrowParamsConversionAt(node2, () => this.parseMaybeAssign(void 0, void 0));
        return this.finishNode(node2, "ConditionalExpression");
      }
      tryParseConditionalConsequent() {
        this.state.noArrowParamsConversionAt.push(this.state.start);
        const consequent = this.parseMaybeAssignAllowIn();
        const failed = !this.match(14);
        this.state.noArrowParamsConversionAt.pop();
        return {
          consequent,
          failed
        };
      }
      getArrowLikeExpressions(node2, disallowInvalid) {
        const stack = [node2];
        const arrows = [];
        while (stack.length !== 0) {
          const node3 = stack.pop();
          if (node3.type === "ArrowFunctionExpression") {
            if (node3.typeParameters || !node3.returnType) {
              this.finishArrowValidation(node3);
            } else {
              arrows.push(node3);
            }
            stack.push(node3.body);
          } else if (node3.type === "ConditionalExpression") {
            stack.push(node3.consequent);
            stack.push(node3.alternate);
          }
        }
        if (disallowInvalid) {
          arrows.forEach((node3) => this.finishArrowValidation(node3));
          return [arrows, []];
        }
        return partition2(arrows, (node3) => node3.params.every((param) => this.isAssignable(param, true)));
      }
      finishArrowValidation(node2) {
        var _node$extra;
        this.toAssignableList(node2.params, (_node$extra = node2.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);
        this.scope.enter(SCOPE_FUNCTION2 | SCOPE_ARROW2);
        super.checkParams(node2, false, true);
        this.scope.exit();
      }
      forwardNoArrowParamsConversionAt(node2, parse3) {
        let result2;
        if (this.state.noArrowParamsConversionAt.indexOf(node2.start) !== -1) {
          this.state.noArrowParamsConversionAt.push(this.state.start);
          result2 = parse3();
          this.state.noArrowParamsConversionAt.pop();
        } else {
          result2 = parse3();
        }
        return result2;
      }
      parseParenItem(node2, startPos, startLoc) {
        node2 = super.parseParenItem(node2, startPos, startLoc);
        if (this.eat(17)) {
          node2.optional = true;
          this.resetEndLocation(node2);
        }
        if (this.match(14)) {
          const typeCastNode = this.startNodeAt(startPos, startLoc);
          typeCastNode.expression = node2;
          typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
          return this.finishNode(typeCastNode, "TypeCastExpression");
        }
        return node2;
      }
      assertModuleNodeAllowed(node2) {
        if (node2.type === "ImportDeclaration" && (node2.importKind === "type" || node2.importKind === "typeof") || node2.type === "ExportNamedDeclaration" && node2.exportKind === "type" || node2.type === "ExportAllDeclaration" && node2.exportKind === "type") {
          return;
        }
        super.assertModuleNodeAllowed(node2);
      }
      parseExport(node2) {
        const decl = super.parseExport(node2);
        if (decl.type === "ExportNamedDeclaration" || decl.type === "ExportAllDeclaration") {
          decl.exportKind = decl.exportKind || "value";
        }
        return decl;
      }
      parseExportDeclaration(node2) {
        if (this.isContextual(126)) {
          node2.exportKind = "type";
          const declarationNode = this.startNode();
          this.next();
          if (this.match(5)) {
            node2.specifiers = this.parseExportSpecifiers(true);
            this.parseExportFrom(node2);
            return null;
          } else {
            return this.flowParseTypeAlias(declarationNode);
          }
        } else if (this.isContextual(127)) {
          node2.exportKind = "type";
          const declarationNode = this.startNode();
          this.next();
          return this.flowParseOpaqueType(declarationNode, false);
        } else if (this.isContextual(125)) {
          node2.exportKind = "type";
          const declarationNode = this.startNode();
          this.next();
          return this.flowParseInterface(declarationNode);
        } else if (this.shouldParseEnums() && this.isContextual(122)) {
          node2.exportKind = "value";
          const declarationNode = this.startNode();
          this.next();
          return this.flowParseEnumDeclaration(declarationNode);
        } else {
          return super.parseExportDeclaration(node2);
        }
      }
      eatExportStar(node2) {
        if (super.eatExportStar(...arguments))
          return true;
        if (this.isContextual(126) && this.lookahead().type === 55) {
          node2.exportKind = "type";
          this.next();
          this.next();
          return true;
        }
        return false;
      }
      maybeParseExportNamespaceSpecifier(node2) {
        const {
          startLoc
        } = this.state;
        const hasNamespace = super.maybeParseExportNamespaceSpecifier(node2);
        if (hasNamespace && node2.exportKind === "type") {
          this.unexpected(startLoc);
        }
        return hasNamespace;
      }
      parseClassId(node2, isStatement, optionalId) {
        super.parseClassId(node2, isStatement, optionalId);
        if (this.match(47)) {
          node2.typeParameters = this.flowParseTypeParameterDeclaration();
        }
      }
      parseClassMember(classBody, member, state) {
        const {
          startLoc
        } = this.state;
        if (this.isContextual(121)) {
          if (this.parseClassMemberFromModifier(classBody, member)) {
            return;
          }
          member.declare = true;
        }
        super.parseClassMember(classBody, member, state);
        if (member.declare) {
          if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {
            this.raise(FlowErrors2.DeclareClassElement, {
              at: startLoc
            });
          } else if (member.value) {
            this.raise(FlowErrors2.DeclareClassFieldInitializer, {
              node: member.value
            });
          }
        }
      }
      isIterator(word) {
        return word === "iterator" || word === "asyncIterator";
      }
      readIterator() {
        const word = super.readWord1();
        const fullWord = "@@" + word;
        if (!this.isIterator(word) || !this.state.inType) {
          this.raise(ErrorMessages2.InvalidIdentifier, {
            at: this.state.curPosition()
          }, fullWord);
        }
        this.finishToken(128, fullWord);
      }
      getTokenFromCode(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 123 && next === 124) {
          return this.finishOp(6, 2);
        } else if (this.state.inType && (code === 62 || code === 60)) {
          return this.finishOp(code === 62 ? 48 : 47, 1);
        } else if (this.state.inType && code === 63) {
          if (next === 46) {
            return this.finishOp(18, 2);
          }
          return this.finishOp(17, 1);
        } else if (isIteratorStart2(code, next, this.input.charCodeAt(this.state.pos + 2))) {
          this.state.pos += 2;
          return this.readIterator();
        } else {
          return super.getTokenFromCode(code);
        }
      }
      isAssignable(node2, isBinding) {
        if (node2.type === "TypeCastExpression") {
          return this.isAssignable(node2.expression, isBinding);
        } else {
          return super.isAssignable(node2, isBinding);
        }
      }
      toAssignable(node2, isLHS = false) {
        if (node2.type === "TypeCastExpression") {
          return super.toAssignable(this.typeCastToParameter(node2), isLHS);
        } else {
          return super.toAssignable(node2, isLHS);
        }
      }
      toAssignableList(exprList, trailingCommaLoc, isLHS) {
        for (let i = 0; i < exprList.length; i++) {
          const expr = exprList[i];
          if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {
            exprList[i] = this.typeCastToParameter(expr);
          }
        }
        return super.toAssignableList(exprList, trailingCommaLoc, isLHS);
      }
      toReferencedList(exprList, isParenthesizedExpr) {
        for (let i = 0; i < exprList.length; i++) {
          var _expr$extra;
          const expr = exprList[i];
          if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
            this.raise(FlowErrors2.TypeCastInPattern, {
              node: expr.typeAnnotation
            });
          }
        }
        return exprList;
      }
      parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
        const node2 = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
        if (canBePattern && !this.state.maybeInArrowParameters) {
          this.toReferencedList(node2.elements);
        }
        return node2;
      }
      checkLVal(expr, ...args) {
        if (expr.type !== "TypeCastExpression") {
          return super.checkLVal(expr, ...args);
        }
      }
      parseClassProperty(node2) {
        if (this.match(14)) {
          node2.typeAnnotation = this.flowParseTypeAnnotation();
        }
        return super.parseClassProperty(node2);
      }
      parseClassPrivateProperty(node2) {
        if (this.match(14)) {
          node2.typeAnnotation = this.flowParseTypeAnnotation();
        }
        return super.parseClassPrivateProperty(node2);
      }
      isClassMethod() {
        return this.match(47) || super.isClassMethod();
      }
      isClassProperty() {
        return this.match(14) || super.isClassProperty();
      }
      isNonstaticConstructor(method) {
        return !this.match(14) && super.isNonstaticConstructor(method);
      }
      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        if (method.variance) {
          this.unexpected(method.variance.loc.start);
        }
        delete method.variance;
        if (this.match(47)) {
          method.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
        if (method.params && isConstructor) {
          const params = method.params;
          if (params.length > 0 && this.isThisParam(params[0])) {
            this.raise(FlowErrors2.ThisParamBannedInConstructor, {
              node: method
            });
          }
        } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
          const params = method.value.params;
          if (params.length > 0 && this.isThisParam(params[0])) {
            this.raise(FlowErrors2.ThisParamBannedInConstructor, {
              node: method
            });
          }
        }
      }
      pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        if (method.variance) {
          this.unexpected(method.variance.loc.start);
        }
        delete method.variance;
        if (this.match(47)) {
          method.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
      }
      parseClassSuper(node2) {
        super.parseClassSuper(node2);
        if (node2.superClass && this.match(47)) {
          node2.superTypeParameters = this.flowParseTypeParameterInstantiation();
        }
        if (this.isContextual(110)) {
          this.next();
          const implemented = node2.implements = [];
          do {
            const node3 = this.startNode();
            node3.id = this.flowParseRestrictedIdentifier(true);
            if (this.match(47)) {
              node3.typeParameters = this.flowParseTypeParameterInstantiation();
            } else {
              node3.typeParameters = null;
            }
            implemented.push(this.finishNode(node3, "ClassImplements"));
          } while (this.eat(12));
        }
      }
      checkGetterSetterParams(method) {
        super.checkGetterSetterParams(method);
        const params = this.getObjectOrClassMethodParams(method);
        if (params.length > 0) {
          const param = params[0];
          if (this.isThisParam(param) && method.kind === "get") {
            this.raise(FlowErrors2.GetterMayNotHaveThisParam, {
              node: param
            });
          } else if (this.isThisParam(param)) {
            this.raise(FlowErrors2.SetterMayNotHaveThisParam, {
              node: param
            });
          }
        }
      }
      parsePropertyNamePrefixOperator(node2) {
        node2.variance = this.flowParseVariance();
      }
      parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
        if (prop.variance) {
          this.unexpected(prop.variance.loc.start);
        }
        delete prop.variance;
        let typeParameters;
        if (this.match(47) && !isAccessor) {
          typeParameters = this.flowParseTypeParameterDeclaration();
          if (!this.match(10))
            this.unexpected();
        }
        super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
        if (typeParameters) {
          (prop.value || prop).typeParameters = typeParameters;
        }
      }
      parseAssignableListItemTypes(param) {
        if (this.eat(17)) {
          if (param.type !== "Identifier") {
            this.raise(FlowErrors2.PatternIsOptional, {
              node: param
            });
          }
          if (this.isThisParam(param)) {
            this.raise(FlowErrors2.ThisParamMayNotBeOptional, {
              node: param
            });
          }
          param.optional = true;
        }
        if (this.match(14)) {
          param.typeAnnotation = this.flowParseTypeAnnotation();
        } else if (this.isThisParam(param)) {
          this.raise(FlowErrors2.ThisParamAnnotationRequired, {
            node: param
          });
        }
        if (this.match(29) && this.isThisParam(param)) {
          this.raise(FlowErrors2.ThisParamNoDefault, {
            node: param
          });
        }
        this.resetEndLocation(param);
        return param;
      }
      parseMaybeDefault(startPos, startLoc, left) {
        const node2 = super.parseMaybeDefault(startPos, startLoc, left);
        if (node2.type === "AssignmentPattern" && node2.typeAnnotation && node2.right.start < node2.typeAnnotation.start) {
          this.raise(FlowErrors2.TypeBeforeInitializer, {
            node: node2.typeAnnotation
          });
        }
        return node2;
      }
      shouldParseDefaultImport(node2) {
        if (!hasTypeImportKind2(node2)) {
          return super.shouldParseDefaultImport(node2);
        }
        return isMaybeDefaultImport2(this.state.type);
      }
      parseImportSpecifierLocal(node2, specifier, type, contextDescription) {
        specifier.local = hasTypeImportKind2(node2) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
        this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL2);
        node2.specifiers.push(this.finishNode(specifier, type));
      }
      maybeParseDefaultImportSpecifier(node2) {
        node2.importKind = "value";
        let kind = null;
        if (this.match(87)) {
          kind = "typeof";
        } else if (this.isContextual(126)) {
          kind = "type";
        }
        if (kind) {
          const lh = this.lookahead();
          const {
            type
          } = lh;
          if (kind === "type" && type === 55) {
            this.unexpected(null, lh.type);
          }
          if (isMaybeDefaultImport2(type) || type === 5 || type === 55) {
            this.next();
            node2.importKind = kind;
          }
        }
        return super.maybeParseDefaultImportSpecifier(node2);
      }
      parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
        const firstIdent = specifier.imported;
        let specifierTypeKind = null;
        if (firstIdent.type === "Identifier") {
          if (firstIdent.name === "type") {
            specifierTypeKind = "type";
          } else if (firstIdent.name === "typeof") {
            specifierTypeKind = "typeof";
          }
        }
        let isBinding = false;
        if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
          const as_ident = this.parseIdentifier(true);
          if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier2(this.state.type)) {
            specifier.imported = as_ident;
            specifier.importKind = specifierTypeKind;
            specifier.local = cloneIdentifier2(as_ident);
          } else {
            specifier.imported = firstIdent;
            specifier.importKind = null;
            specifier.local = this.parseIdentifier();
          }
        } else {
          if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier2(this.state.type)) {
            specifier.imported = this.parseIdentifier(true);
            specifier.importKind = specifierTypeKind;
          } else {
            if (importedIsString) {
              throw this.raise(ErrorMessages2.ImportBindingIsString, {
                node: specifier
              }, firstIdent.value);
            }
            specifier.imported = firstIdent;
            specifier.importKind = null;
          }
          if (this.eatContextual(93)) {
            specifier.local = this.parseIdentifier();
          } else {
            isBinding = true;
            specifier.local = cloneIdentifier2(specifier.imported);
          }
        }
        const specifierIsTypeImport = hasTypeImportKind2(specifier);
        if (isInTypeOnlyImport && specifierIsTypeImport) {
          this.raise(FlowErrors2.ImportTypeShorthandOnlyInPureImport, {
            node: specifier
          });
        }
        if (isInTypeOnlyImport || specifierIsTypeImport) {
          this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);
        }
        if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {
          this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);
        }
        this.checkLVal(specifier.local, "import specifier", BIND_LEXICAL2);
        return this.finishNode(specifier, "ImportSpecifier");
      }
      parseBindingAtom() {
        switch (this.state.type) {
          case 78:
            return this.parseIdentifier(true);
          default:
            return super.parseBindingAtom();
        }
      }
      parseFunctionParams(node2, allowModifiers) {
        const kind = node2.kind;
        if (kind !== "get" && kind !== "set" && this.match(47)) {
          node2.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        super.parseFunctionParams(node2, allowModifiers);
      }
      parseVarId(decl, kind) {
        super.parseVarId(decl, kind);
        if (this.match(14)) {
          decl.id.typeAnnotation = this.flowParseTypeAnnotation();
          this.resetEndLocation(decl.id);
        }
      }
      parseAsyncArrowFromCallExpression(node2, call) {
        if (this.match(14)) {
          const oldNoAnonFunctionType = this.state.noAnonFunctionType;
          this.state.noAnonFunctionType = true;
          node2.returnType = this.flowParseTypeAnnotation();
          this.state.noAnonFunctionType = oldNoAnonFunctionType;
        }
        return super.parseAsyncArrowFromCallExpression(node2, call);
      }
      shouldParseAsyncArrow() {
        return this.match(14) || super.shouldParseAsyncArrow();
      }
      parseMaybeAssign(refExpressionErrors, afterLeftParse) {
        var _jsx;
        let state = null;
        let jsx3;
        if (this.hasPlugin("jsx") && (this.match(138) || this.match(47))) {
          state = this.state.clone();
          jsx3 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
          if (!jsx3.error)
            return jsx3.node;
          const {
            context
          } = this.state;
          const currentContext = context[context.length - 1];
          if (currentContext === types2.j_oTag || currentContext === types2.j_expr) {
            context.pop();
          }
        }
        if ((_jsx = jsx3) != null && _jsx.error || this.match(47)) {
          var _jsx2, _jsx3;
          state = state || this.state.clone();
          let typeParameters;
          const arrow = this.tryParse((abort) => {
            var _arrowExpression$extr;
            typeParameters = this.flowParseTypeParameterDeclaration();
            const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
              const result2 = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
              this.resetStartLocationFromNode(result2, typeParameters);
              return result2;
            });
            if ((_arrowExpression$extr = arrowExpression2.extra) != null && _arrowExpression$extr.parenthesized)
              abort();
            const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
            if (expr.type !== "ArrowFunctionExpression")
              abort();
            expr.typeParameters = typeParameters;
            this.resetStartLocationFromNode(expr, typeParameters);
            return arrowExpression2;
          }, state);
          let arrowExpression = null;
          if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
            if (!arrow.error && !arrow.aborted) {
              if (arrow.node.async) {
                this.raise(FlowErrors2.UnexpectedTypeParameterBeforeAsyncArrowFunction, {
                  node: typeParameters
                });
              }
              return arrow.node;
            }
            arrowExpression = arrow.node;
          }
          if ((_jsx2 = jsx3) != null && _jsx2.node) {
            this.state = jsx3.failState;
            return jsx3.node;
          }
          if (arrowExpression) {
            this.state = arrow.failState;
            return arrowExpression;
          }
          if ((_jsx3 = jsx3) != null && _jsx3.thrown)
            throw jsx3.error;
          if (arrow.thrown)
            throw arrow.error;
          throw this.raise(FlowErrors2.UnexpectedTokenAfterTypeParameter, {
            node: typeParameters
          });
        }
        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
      }
      parseArrow(node2) {
        if (this.match(14)) {
          const result2 = this.tryParse(() => {
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            this.state.noAnonFunctionType = true;
            const typeNode = this.startNode();
            [typeNode.typeAnnotation, node2.predicate] = this.flowParseTypeAndPredicateInitialiser();
            this.state.noAnonFunctionType = oldNoAnonFunctionType;
            if (this.canInsertSemicolon())
              this.unexpected();
            if (!this.match(19))
              this.unexpected();
            return typeNode;
          });
          if (result2.thrown)
            return null;
          if (result2.error)
            this.state = result2.failState;
          node2.returnType = result2.node.typeAnnotation ? this.finishNode(result2.node, "TypeAnnotation") : null;
        }
        return super.parseArrow(node2);
      }
      shouldParseArrow(params) {
        return this.match(14) || super.shouldParseArrow(params);
      }
      setArrowFunctionParameters(node2, params) {
        if (this.state.noArrowParamsConversionAt.indexOf(node2.start) !== -1) {
          node2.params = params;
        } else {
          super.setArrowFunctionParameters(node2, params);
        }
      }
      checkParams(node2, allowDuplicates, isArrowFunction) {
        if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node2.start) !== -1) {
          return;
        }
        for (let i = 0; i < node2.params.length; i++) {
          if (this.isThisParam(node2.params[i]) && i > 0) {
            this.raise(FlowErrors2.ThisParamMustBeFirst, {
              node: node2.params[i]
            });
          }
        }
        return super.checkParams(...arguments);
      }
      parseParenAndDistinguishExpression(canBeArrow) {
        return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);
      }
      parseSubscripts(base2, startPos, startLoc, noCalls) {
        if (base2.type === "Identifier" && base2.name === "async" && this.state.noArrowAt.indexOf(startPos) !== -1) {
          this.next();
          const node2 = this.startNodeAt(startPos, startLoc);
          node2.callee = base2;
          node2.arguments = this.parseCallExpressionArguments(11, false);
          base2 = this.finishNode(node2, "CallExpression");
        } else if (base2.type === "Identifier" && base2.name === "async" && this.match(47)) {
          const state = this.state.clone();
          const arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);
          if (!arrow.error && !arrow.aborted)
            return arrow.node;
          const result2 = this.tryParse(() => super.parseSubscripts(base2, startPos, startLoc, noCalls), state);
          if (result2.node && !result2.error)
            return result2.node;
          if (arrow.node) {
            this.state = arrow.failState;
            return arrow.node;
          }
          if (result2.node) {
            this.state = result2.failState;
            return result2.node;
          }
          throw arrow.error || result2.error;
        }
        return super.parseSubscripts(base2, startPos, startLoc, noCalls);
      }
      parseSubscript(base2, startPos, startLoc, noCalls, subscriptState) {
        if (this.match(18) && this.isLookaheadToken_lt()) {
          subscriptState.optionalChainMember = true;
          if (noCalls) {
            subscriptState.stop = true;
            return base2;
          }
          this.next();
          const node2 = this.startNodeAt(startPos, startLoc);
          node2.callee = base2;
          node2.typeArguments = this.flowParseTypeParameterInstantiation();
          this.expect(10);
          node2.arguments = this.parseCallExpressionArguments(11, false);
          node2.optional = true;
          return this.finishCallExpression(node2, true);
        } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {
          const node2 = this.startNodeAt(startPos, startLoc);
          node2.callee = base2;
          const result2 = this.tryParse(() => {
            node2.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
            this.expect(10);
            node2.arguments = this.parseCallExpressionArguments(11, false);
            if (subscriptState.optionalChainMember)
              node2.optional = false;
            return this.finishCallExpression(node2, subscriptState.optionalChainMember);
          });
          if (result2.node) {
            if (result2.error)
              this.state = result2.failState;
            return result2.node;
          }
        }
        return super.parseSubscript(base2, startPos, startLoc, noCalls, subscriptState);
      }
      parseNewArguments(node2) {
        let targs = null;
        if (this.shouldParseTypes() && this.match(47)) {
          targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
        }
        node2.typeArguments = targs;
        super.parseNewArguments(node2);
      }
      parseAsyncArrowWithTypeParameters(startPos, startLoc) {
        const node2 = this.startNodeAt(startPos, startLoc);
        this.parseFunctionParams(node2);
        if (!this.parseArrow(node2))
          return;
        return this.parseArrowExpression(node2, void 0, true);
      }
      readToken_mult_modulo(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 42 && next === 47 && this.state.hasFlowComment) {
          this.state.hasFlowComment = false;
          this.state.pos += 2;
          this.nextToken();
          return;
        }
        super.readToken_mult_modulo(code);
      }
      readToken_pipe_amp(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 124 && next === 125) {
          this.finishOp(9, 2);
          return;
        }
        super.readToken_pipe_amp(code);
      }
      parseTopLevel(file, program) {
        const fileNode = super.parseTopLevel(file, program);
        if (this.state.hasFlowComment) {
          this.raise(FlowErrors2.UnterminatedFlowComment, {
            at: this.state.curPosition()
          });
        }
        return fileNode;
      }
      skipBlockComment() {
        if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
          if (this.state.hasFlowComment) {
            throw this.raise(FlowErrors2.NestedFlowComment, {
              at: this.state.startLoc
            });
          }
          this.hasFlowCommentCompletion();
          this.state.pos += this.skipFlowComment();
          this.state.hasFlowComment = true;
          return;
        }
        if (this.state.hasFlowComment) {
          const end = this.input.indexOf("*-/", this.state.pos + 2);
          if (end === -1) {
            throw this.raise(ErrorMessages2.UnterminatedComment, {
              at: this.state.curPosition()
            });
          }
          this.state.pos = end + 2 + 3;
          return;
        }
        return super.skipBlockComment();
      }
      skipFlowComment() {
        const {
          pos
        } = this.state;
        let shiftToFirstNonWhiteSpace = 2;
        while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {
          shiftToFirstNonWhiteSpace++;
        }
        const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
        const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
        if (ch2 === 58 && ch3 === 58) {
          return shiftToFirstNonWhiteSpace + 2;
        }
        if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") {
          return shiftToFirstNonWhiteSpace + 12;
        }
        if (ch2 === 58 && ch3 !== 58) {
          return shiftToFirstNonWhiteSpace;
        }
        return false;
      }
      hasFlowCommentCompletion() {
        const end = this.input.indexOf("*/", this.state.pos);
        if (end === -1) {
          throw this.raise(ErrorMessages2.UnterminatedComment, {
            at: this.state.curPosition()
          });
        }
      }
      flowEnumErrorBooleanMemberNotInitialized(loc, {
        enumName,
        memberName
      }) {
        this.raise(FlowErrors2.EnumBooleanMemberNotInitialized, {
          at: loc
        }, memberName, enumName);
      }
      flowEnumErrorInvalidExplicitType(loc, {
        enumName,
        suppliedType
      }) {
        return this.raise(suppliedType === null ? FlowErrors2.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors2.EnumInvalidExplicitType, {
          at: loc
        }, enumName, suppliedType);
      }
      flowEnumErrorInvalidMemberInitializer(loc, {
        enumName,
        explicitType,
        memberName
      }) {
        return this.raise(explicitType === "boolean" || explicitType === "number" || explicitType === "string" ? FlowErrors2.EnumInvalidMemberInitializerPrimaryType : explicitType === "symbol" ? FlowErrors2.EnumInvalidMemberInitializerSymbolType : FlowErrors2.EnumInvalidMemberInitializerUnknownType, {
          at: loc
        }, enumName, memberName, explicitType);
      }
      flowEnumErrorNumberMemberNotInitialized(loc, {
        enumName,
        memberName
      }) {
        this.raise(FlowErrors2.EnumNumberMemberNotInitialized, {
          at: loc
        }, enumName, memberName);
      }
      flowEnumErrorStringMemberInconsistentlyInitailized(node2, {
        enumName
      }) {
        this.raise(FlowErrors2.EnumStringMemberInconsistentlyInitailized, {
          node: node2
        }, enumName);
      }
      flowEnumMemberInit() {
        const startLoc = this.state.startLoc;
        const endOfInit = () => this.match(12) || this.match(8);
        switch (this.state.type) {
          case 130: {
            const literal = this.parseNumericLiteral(this.state.value);
            if (endOfInit()) {
              return {
                type: "number",
                loc: literal.loc.start,
                value: literal
              };
            }
            return {
              type: "invalid",
              loc: startLoc
            };
          }
          case 129: {
            const literal = this.parseStringLiteral(this.state.value);
            if (endOfInit()) {
              return {
                type: "string",
                loc: literal.loc.start,
                value: literal
              };
            }
            return {
              type: "invalid",
              loc: startLoc
            };
          }
          case 85:
          case 86: {
            const literal = this.parseBooleanLiteral(this.match(85));
            if (endOfInit()) {
              return {
                type: "boolean",
                loc: literal.loc.start,
                value: literal
              };
            }
            return {
              type: "invalid",
              loc: startLoc
            };
          }
          default:
            return {
              type: "invalid",
              loc: startLoc
            };
        }
      }
      flowEnumMemberRaw() {
        const loc = this.state.startLoc;
        const id2 = this.parseIdentifier(true);
        const init3 = this.eat(29) ? this.flowEnumMemberInit() : {
          type: "none",
          loc
        };
        return {
          id: id2,
          init: init3
        };
      }
      flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
        const {
          explicitType
        } = context;
        if (explicitType === null) {
          return;
        }
        if (explicitType !== expectedType) {
          this.flowEnumErrorInvalidMemberInitializer(loc, context);
        }
      }
      flowEnumMembers({
        enumName,
        explicitType
      }) {
        const seenNames = /* @__PURE__ */ new Set();
        const members = {
          booleanMembers: [],
          numberMembers: [],
          stringMembers: [],
          defaultedMembers: []
        };
        let hasUnknownMembers = false;
        while (!this.match(8)) {
          if (this.eat(21)) {
            hasUnknownMembers = true;
            break;
          }
          const memberNode = this.startNode();
          const {
            id: id2,
            init: init3
          } = this.flowEnumMemberRaw();
          const memberName = id2.name;
          if (memberName === "") {
            continue;
          }
          if (/^[a-z]/.test(memberName)) {
            this.raise(FlowErrors2.EnumInvalidMemberName, {
              node: id2
            }, memberName, memberName[0].toUpperCase() + memberName.slice(1), enumName);
          }
          if (seenNames.has(memberName)) {
            this.raise(FlowErrors2.EnumDuplicateMemberName, {
              node: id2
            }, memberName, enumName);
          }
          seenNames.add(memberName);
          const context = {
            enumName,
            explicitType,
            memberName
          };
          memberNode.id = id2;
          switch (init3.type) {
            case "boolean": {
              this.flowEnumCheckExplicitTypeMismatch(init3.loc, context, "boolean");
              memberNode.init = init3.value;
              members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
              break;
            }
            case "number": {
              this.flowEnumCheckExplicitTypeMismatch(init3.loc, context, "number");
              memberNode.init = init3.value;
              members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
              break;
            }
            case "string": {
              this.flowEnumCheckExplicitTypeMismatch(init3.loc, context, "string");
              memberNode.init = init3.value;
              members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
              break;
            }
            case "invalid": {
              throw this.flowEnumErrorInvalidMemberInitializer(init3.loc, context);
            }
            case "none": {
              switch (explicitType) {
                case "boolean":
                  this.flowEnumErrorBooleanMemberNotInitialized(init3.loc, context);
                  break;
                case "number":
                  this.flowEnumErrorNumberMemberNotInitialized(init3.loc, context);
                  break;
                default:
                  members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
              }
            }
          }
          if (!this.match(8)) {
            this.expect(12);
          }
        }
        return {
          members,
          hasUnknownMembers
        };
      }
      flowEnumStringMembers(initializedMembers, defaultedMembers, {
        enumName
      }) {
        if (initializedMembers.length === 0) {
          return defaultedMembers;
        } else if (defaultedMembers.length === 0) {
          return initializedMembers;
        } else if (defaultedMembers.length > initializedMembers.length) {
          for (const member of initializedMembers) {
            this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {
              enumName
            });
          }
          return defaultedMembers;
        } else {
          for (const member of defaultedMembers) {
            this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {
              enumName
            });
          }
          return initializedMembers;
        }
      }
      flowEnumParseExplicitType({
        enumName
      }) {
        if (this.eatContextual(101)) {
          if (!tokenIsIdentifier2(this.state.type)) {
            throw this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {
              enumName,
              suppliedType: null
            });
          }
          const {
            value
          } = this.state;
          this.next();
          if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") {
            this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {
              enumName,
              suppliedType: value
            });
          }
          return value;
        }
        return null;
      }
      flowEnumBody(node2, id2) {
        const enumName = id2.name;
        const nameLoc = id2.loc.start;
        const explicitType = this.flowEnumParseExplicitType({
          enumName
        });
        this.expect(5);
        const {
          members,
          hasUnknownMembers
        } = this.flowEnumMembers({
          enumName,
          explicitType
        });
        node2.hasUnknownMembers = hasUnknownMembers;
        switch (explicitType) {
          case "boolean":
            node2.explicitType = true;
            node2.members = members.booleanMembers;
            this.expect(8);
            return this.finishNode(node2, "EnumBooleanBody");
          case "number":
            node2.explicitType = true;
            node2.members = members.numberMembers;
            this.expect(8);
            return this.finishNode(node2, "EnumNumberBody");
          case "string":
            node2.explicitType = true;
            node2.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
              enumName
            });
            this.expect(8);
            return this.finishNode(node2, "EnumStringBody");
          case "symbol":
            node2.members = members.defaultedMembers;
            this.expect(8);
            return this.finishNode(node2, "EnumSymbolBody");
          default: {
            const empty = () => {
              node2.members = [];
              this.expect(8);
              return this.finishNode(node2, "EnumStringBody");
            };
            node2.explicitType = false;
            const boolsLen = members.booleanMembers.length;
            const numsLen = members.numberMembers.length;
            const strsLen = members.stringMembers.length;
            const defaultedLen = members.defaultedMembers.length;
            if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
              return empty();
            } else if (!boolsLen && !numsLen) {
              node2.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
                enumName
              });
              this.expect(8);
              return this.finishNode(node2, "EnumStringBody");
            } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
              for (const member of members.defaultedMembers) {
                this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {
                  enumName,
                  memberName: member.id.name
                });
              }
              node2.members = members.booleanMembers;
              this.expect(8);
              return this.finishNode(node2, "EnumBooleanBody");
            } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
              for (const member of members.defaultedMembers) {
                this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {
                  enumName,
                  memberName: member.id.name
                });
              }
              node2.members = members.numberMembers;
              this.expect(8);
              return this.finishNode(node2, "EnumNumberBody");
            } else {
              this.raise(FlowErrors2.EnumInconsistentMemberValues, {
                at: nameLoc
              }, enumName);
              return empty();
            }
          }
        }
      }
      flowParseEnumDeclaration(node2) {
        const id2 = this.parseIdentifier();
        node2.id = id2;
        node2.body = this.flowEnumBody(this.startNode(), id2);
        return this.finishNode(node2, "EnumDeclaration");
      }
      isLookaheadToken_lt() {
        const next = this.nextTokenStart();
        if (this.input.charCodeAt(next) === 60) {
          const afterNext = this.input.charCodeAt(next + 1);
          return afterNext !== 60 && afterNext !== 61;
        }
        return false;
      }
      maybeUnwrapTypeCastExpression(node2) {
        return node2.type === "TypeCastExpression" ? node2.expression : node2;
      }
    };
    var entities2 = {
      quot: '"',
      amp: "&",
      apos: "'",
      lt: "<",
      gt: ">",
      nbsp: "\xA0",
      iexcl: "\xA1",
      cent: "\xA2",
      pound: "\xA3",
      curren: "\xA4",
      yen: "\xA5",
      brvbar: "\xA6",
      sect: "\xA7",
      uml: "\xA8",
      copy: "\xA9",
      ordf: "\xAA",
      laquo: "\xAB",
      not: "\xAC",
      shy: "\xAD",
      reg: "\xAE",
      macr: "\xAF",
      deg: "\xB0",
      plusmn: "\xB1",
      sup2: "\xB2",
      sup3: "\xB3",
      acute: "\xB4",
      micro: "\xB5",
      para: "\xB6",
      middot: "\xB7",
      cedil: "\xB8",
      sup1: "\xB9",
      ordm: "\xBA",
      raquo: "\xBB",
      frac14: "\xBC",
      frac12: "\xBD",
      frac34: "\xBE",
      iquest: "\xBF",
      Agrave: "\xC0",
      Aacute: "\xC1",
      Acirc: "\xC2",
      Atilde: "\xC3",
      Auml: "\xC4",
      Aring: "\xC5",
      AElig: "\xC6",
      Ccedil: "\xC7",
      Egrave: "\xC8",
      Eacute: "\xC9",
      Ecirc: "\xCA",
      Euml: "\xCB",
      Igrave: "\xCC",
      Iacute: "\xCD",
      Icirc: "\xCE",
      Iuml: "\xCF",
      ETH: "\xD0",
      Ntilde: "\xD1",
      Ograve: "\xD2",
      Oacute: "\xD3",
      Ocirc: "\xD4",
      Otilde: "\xD5",
      Ouml: "\xD6",
      times: "\xD7",
      Oslash: "\xD8",
      Ugrave: "\xD9",
      Uacute: "\xDA",
      Ucirc: "\xDB",
      Uuml: "\xDC",
      Yacute: "\xDD",
      THORN: "\xDE",
      szlig: "\xDF",
      agrave: "\xE0",
      aacute: "\xE1",
      acirc: "\xE2",
      atilde: "\xE3",
      auml: "\xE4",
      aring: "\xE5",
      aelig: "\xE6",
      ccedil: "\xE7",
      egrave: "\xE8",
      eacute: "\xE9",
      ecirc: "\xEA",
      euml: "\xEB",
      igrave: "\xEC",
      iacute: "\xED",
      icirc: "\xEE",
      iuml: "\xEF",
      eth: "\xF0",
      ntilde: "\xF1",
      ograve: "\xF2",
      oacute: "\xF3",
      ocirc: "\xF4",
      otilde: "\xF5",
      ouml: "\xF6",
      divide: "\xF7",
      oslash: "\xF8",
      ugrave: "\xF9",
      uacute: "\xFA",
      ucirc: "\xFB",
      uuml: "\xFC",
      yacute: "\xFD",
      thorn: "\xFE",
      yuml: "\xFF",
      OElig: "\u0152",
      oelig: "\u0153",
      Scaron: "\u0160",
      scaron: "\u0161",
      Yuml: "\u0178",
      fnof: "\u0192",
      circ: "\u02C6",
      tilde: "\u02DC",
      Alpha: "\u0391",
      Beta: "\u0392",
      Gamma: "\u0393",
      Delta: "\u0394",
      Epsilon: "\u0395",
      Zeta: "\u0396",
      Eta: "\u0397",
      Theta: "\u0398",
      Iota: "\u0399",
      Kappa: "\u039A",
      Lambda: "\u039B",
      Mu: "\u039C",
      Nu: "\u039D",
      Xi: "\u039E",
      Omicron: "\u039F",
      Pi: "\u03A0",
      Rho: "\u03A1",
      Sigma: "\u03A3",
      Tau: "\u03A4",
      Upsilon: "\u03A5",
      Phi: "\u03A6",
      Chi: "\u03A7",
      Psi: "\u03A8",
      Omega: "\u03A9",
      alpha: "\u03B1",
      beta: "\u03B2",
      gamma: "\u03B3",
      delta: "\u03B4",
      epsilon: "\u03B5",
      zeta: "\u03B6",
      eta: "\u03B7",
      theta: "\u03B8",
      iota: "\u03B9",
      kappa: "\u03BA",
      lambda: "\u03BB",
      mu: "\u03BC",
      nu: "\u03BD",
      xi: "\u03BE",
      omicron: "\u03BF",
      pi: "\u03C0",
      rho: "\u03C1",
      sigmaf: "\u03C2",
      sigma: "\u03C3",
      tau: "\u03C4",
      upsilon: "\u03C5",
      phi: "\u03C6",
      chi: "\u03C7",
      psi: "\u03C8",
      omega: "\u03C9",
      thetasym: "\u03D1",
      upsih: "\u03D2",
      piv: "\u03D6",
      ensp: "\u2002",
      emsp: "\u2003",
      thinsp: "\u2009",
      zwnj: "\u200C",
      zwj: "\u200D",
      lrm: "\u200E",
      rlm: "\u200F",
      ndash: "\u2013",
      mdash: "\u2014",
      lsquo: "\u2018",
      rsquo: "\u2019",
      sbquo: "\u201A",
      ldquo: "\u201C",
      rdquo: "\u201D",
      bdquo: "\u201E",
      dagger: "\u2020",
      Dagger: "\u2021",
      bull: "\u2022",
      hellip: "\u2026",
      permil: "\u2030",
      prime: "\u2032",
      Prime: "\u2033",
      lsaquo: "\u2039",
      rsaquo: "\u203A",
      oline: "\u203E",
      frasl: "\u2044",
      euro: "\u20AC",
      image: "\u2111",
      weierp: "\u2118",
      real: "\u211C",
      trade: "\u2122",
      alefsym: "\u2135",
      larr: "\u2190",
      uarr: "\u2191",
      rarr: "\u2192",
      darr: "\u2193",
      harr: "\u2194",
      crarr: "\u21B5",
      lArr: "\u21D0",
      uArr: "\u21D1",
      rArr: "\u21D2",
      dArr: "\u21D3",
      hArr: "\u21D4",
      forall: "\u2200",
      part: "\u2202",
      exist: "\u2203",
      empty: "\u2205",
      nabla: "\u2207",
      isin: "\u2208",
      notin: "\u2209",
      ni: "\u220B",
      prod: "\u220F",
      sum: "\u2211",
      minus: "\u2212",
      lowast: "\u2217",
      radic: "\u221A",
      prop: "\u221D",
      infin: "\u221E",
      ang: "\u2220",
      and: "\u2227",
      or: "\u2228",
      cap: "\u2229",
      cup: "\u222A",
      int: "\u222B",
      there4: "\u2234",
      sim: "\u223C",
      cong: "\u2245",
      asymp: "\u2248",
      ne: "\u2260",
      equiv: "\u2261",
      le: "\u2264",
      ge: "\u2265",
      sub: "\u2282",
      sup: "\u2283",
      nsub: "\u2284",
      sube: "\u2286",
      supe: "\u2287",
      oplus: "\u2295",
      otimes: "\u2297",
      perp: "\u22A5",
      sdot: "\u22C5",
      lceil: "\u2308",
      rceil: "\u2309",
      lfloor: "\u230A",
      rfloor: "\u230B",
      lang: "\u2329",
      rang: "\u232A",
      loz: "\u25CA",
      spades: "\u2660",
      clubs: "\u2663",
      hearts: "\u2665",
      diams: "\u2666"
    };
    var HEX_NUMBER2 = /^[\da-fA-F]+$/;
    var DECIMAL_NUMBER2 = /^\d+$/;
    var JsxErrors2 = makeErrorTemplates2({
      AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
      MissingClosingTagElement: "Expected corresponding JSX closing tag for <%0>.",
      MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
      UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
      UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
      UnterminatedJsxContent: "Unterminated JSX contents.",
      UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
    }, ErrorCodes2.SyntaxError, "jsx");
    function isFragment2(object2) {
      return object2 ? object2.type === "JSXOpeningFragment" || object2.type === "JSXClosingFragment" : false;
    }
    function getQualifiedJSXName2(object2) {
      if (object2.type === "JSXIdentifier") {
        return object2.name;
      }
      if (object2.type === "JSXNamespacedName") {
        return object2.namespace.name + ":" + object2.name.name;
      }
      if (object2.type === "JSXMemberExpression") {
        return getQualifiedJSXName2(object2.object) + "." + getQualifiedJSXName2(object2.property);
      }
      throw new Error("Node had unexpected type: " + object2.type);
    }
    var jsx2 = (superClass) => class extends superClass {
      jsxReadToken() {
        let out = "";
        let chunkStart = this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.length) {
            throw this.raise(JsxErrors2.UnterminatedJsxContent, {
              at: this.state.startLoc
            });
          }
          const ch = this.input.charCodeAt(this.state.pos);
          switch (ch) {
            case 60:
            case 123:
              if (this.state.pos === this.state.start) {
                if (ch === 60 && this.state.canStartJSXElement) {
                  ++this.state.pos;
                  return this.finishToken(138);
                }
                return super.getTokenFromCode(ch);
              }
              out += this.input.slice(chunkStart, this.state.pos);
              return this.finishToken(137, out);
            case 38:
              out += this.input.slice(chunkStart, this.state.pos);
              out += this.jsxReadEntity();
              chunkStart = this.state.pos;
              break;
            case 62:
            case 125:
            default:
              if (isNewLine2(ch)) {
                out += this.input.slice(chunkStart, this.state.pos);
                out += this.jsxReadNewLine(true);
                chunkStart = this.state.pos;
              } else {
                ++this.state.pos;
              }
          }
        }
      }
      jsxReadNewLine(normalizeCRLF) {
        const ch = this.input.charCodeAt(this.state.pos);
        let out;
        ++this.state.pos;
        if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
          ++this.state.pos;
          out = normalizeCRLF ? "\n" : "\r\n";
        } else {
          out = String.fromCharCode(ch);
        }
        ++this.state.curLine;
        this.state.lineStart = this.state.pos;
        return out;
      }
      jsxReadString(quote) {
        let out = "";
        let chunkStart = ++this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.length) {
            throw this.raise(ErrorMessages2.UnterminatedString, {
              at: this.state.startLoc
            });
          }
          const ch = this.input.charCodeAt(this.state.pos);
          if (ch === quote)
            break;
          if (ch === 38) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadEntity();
            chunkStart = this.state.pos;
          } else if (isNewLine2(ch)) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadNewLine(false);
            chunkStart = this.state.pos;
          } else {
            ++this.state.pos;
          }
        }
        out += this.input.slice(chunkStart, this.state.pos++);
        return this.finishToken(129, out);
      }
      jsxReadEntity() {
        let str = "";
        let count = 0;
        let entity;
        let ch = this.input[this.state.pos];
        const startPos = ++this.state.pos;
        while (this.state.pos < this.length && count++ < 10) {
          ch = this.input[this.state.pos++];
          if (ch === ";") {
            if (str[0] === "#") {
              if (str[1] === "x") {
                str = str.substr(2);
                if (HEX_NUMBER2.test(str)) {
                  entity = String.fromCodePoint(parseInt(str, 16));
                }
              } else {
                str = str.substr(1);
                if (DECIMAL_NUMBER2.test(str)) {
                  entity = String.fromCodePoint(parseInt(str, 10));
                }
              }
            } else {
              entity = entities2[str];
            }
            break;
          }
          str += ch;
        }
        if (!entity) {
          this.state.pos = startPos;
          return "&";
        }
        return entity;
      }
      jsxReadWord() {
        let ch;
        const start = this.state.pos;
        do {
          ch = this.input.charCodeAt(++this.state.pos);
        } while (isIdentifierChar2(ch) || ch === 45);
        return this.finishToken(136, this.input.slice(start, this.state.pos));
      }
      jsxParseIdentifier() {
        const node2 = this.startNode();
        if (this.match(136)) {
          node2.name = this.state.value;
        } else if (tokenIsKeyword2(this.state.type)) {
          node2.name = tokenLabelName2(this.state.type);
        } else {
          this.unexpected();
        }
        this.next();
        return this.finishNode(node2, "JSXIdentifier");
      }
      jsxParseNamespacedName() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const name = this.jsxParseIdentifier();
        if (!this.eat(14))
          return name;
        const node2 = this.startNodeAt(startPos, startLoc);
        node2.namespace = name;
        node2.name = this.jsxParseIdentifier();
        return this.finishNode(node2, "JSXNamespacedName");
      }
      jsxParseElementName() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let node2 = this.jsxParseNamespacedName();
        if (node2.type === "JSXNamespacedName") {
          return node2;
        }
        while (this.eat(16)) {
          const newNode = this.startNodeAt(startPos, startLoc);
          newNode.object = node2;
          newNode.property = this.jsxParseIdentifier();
          node2 = this.finishNode(newNode, "JSXMemberExpression");
        }
        return node2;
      }
      jsxParseAttributeValue() {
        let node2;
        switch (this.state.type) {
          case 5:
            node2 = this.startNode();
            this.setContext(types2.brace);
            this.next();
            node2 = this.jsxParseExpressionContainer(node2, types2.j_oTag);
            if (node2.expression.type === "JSXEmptyExpression") {
              this.raise(JsxErrors2.AttributeIsEmpty, {
                node: node2
              });
            }
            return node2;
          case 138:
          case 129:
            return this.parseExprAtom();
          default:
            throw this.raise(JsxErrors2.UnsupportedJsxValue, {
              at: this.state.startLoc
            });
        }
      }
      jsxParseEmptyExpression() {
        const node2 = this.startNodeAt(this.state.lastTokEndLoc.index, this.state.lastTokEndLoc);
        return this.finishNodeAt(node2, "JSXEmptyExpression", this.state.startLoc);
      }
      jsxParseSpreadChild(node2) {
        this.next();
        node2.expression = this.parseExpression();
        this.setContext(types2.j_oTag);
        this.expect(8);
        return this.finishNode(node2, "JSXSpreadChild");
      }
      jsxParseExpressionContainer(node2, previousContext) {
        if (this.match(8)) {
          node2.expression = this.jsxParseEmptyExpression();
        } else {
          const expression = this.parseExpression();
          node2.expression = expression;
        }
        this.setContext(previousContext);
        this.expect(8);
        return this.finishNode(node2, "JSXExpressionContainer");
      }
      jsxParseAttribute() {
        const node2 = this.startNode();
        if (this.match(5)) {
          this.setContext(types2.brace);
          this.next();
          this.expect(21);
          node2.argument = this.parseMaybeAssignAllowIn();
          this.setContext(types2.j_oTag);
          this.expect(8);
          return this.finishNode(node2, "JSXSpreadAttribute");
        }
        node2.name = this.jsxParseNamespacedName();
        node2.value = this.eat(29) ? this.jsxParseAttributeValue() : null;
        return this.finishNode(node2, "JSXAttribute");
      }
      jsxParseOpeningElementAt(startPos, startLoc) {
        const node2 = this.startNodeAt(startPos, startLoc);
        if (this.match(139)) {
          this.expect(139);
          return this.finishNode(node2, "JSXOpeningFragment");
        }
        node2.name = this.jsxParseElementName();
        return this.jsxParseOpeningElementAfterName(node2);
      }
      jsxParseOpeningElementAfterName(node2) {
        const attributes = [];
        while (!this.match(56) && !this.match(139)) {
          attributes.push(this.jsxParseAttribute());
        }
        node2.attributes = attributes;
        node2.selfClosing = this.eat(56);
        this.expect(139);
        return this.finishNode(node2, "JSXOpeningElement");
      }
      jsxParseClosingElementAt(startPos, startLoc) {
        const node2 = this.startNodeAt(startPos, startLoc);
        if (this.match(139)) {
          this.expect(139);
          return this.finishNode(node2, "JSXClosingFragment");
        }
        node2.name = this.jsxParseElementName();
        this.expect(139);
        return this.finishNode(node2, "JSXClosingElement");
      }
      jsxParseElementAt(startPos, startLoc) {
        const node2 = this.startNodeAt(startPos, startLoc);
        const children = [];
        const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
        let closingElement = null;
        if (!openingElement.selfClosing) {
          contents:
            for (; ; ) {
              switch (this.state.type) {
                case 138:
                  startPos = this.state.start;
                  startLoc = this.state.startLoc;
                  this.next();
                  if (this.eat(56)) {
                    closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
                    break contents;
                  }
                  children.push(this.jsxParseElementAt(startPos, startLoc));
                  break;
                case 137:
                  children.push(this.parseExprAtom());
                  break;
                case 5: {
                  const node3 = this.startNode();
                  this.setContext(types2.brace);
                  this.next();
                  if (this.match(21)) {
                    children.push(this.jsxParseSpreadChild(node3));
                  } else {
                    children.push(this.jsxParseExpressionContainer(node3, types2.j_expr));
                  }
                  break;
                }
                default:
                  throw this.unexpected();
              }
            }
          if (isFragment2(openingElement) && !isFragment2(closingElement) && closingElement !== null) {
            this.raise(JsxErrors2.MissingClosingTagFragment, {
              node: closingElement
            });
          } else if (!isFragment2(openingElement) && isFragment2(closingElement)) {
            this.raise(JsxErrors2.MissingClosingTagElement, {
              node: closingElement
            }, getQualifiedJSXName2(openingElement.name));
          } else if (!isFragment2(openingElement) && !isFragment2(closingElement)) {
            if (getQualifiedJSXName2(closingElement.name) !== getQualifiedJSXName2(openingElement.name)) {
              this.raise(JsxErrors2.MissingClosingTagElement, {
                node: closingElement
              }, getQualifiedJSXName2(openingElement.name));
            }
          }
        }
        if (isFragment2(openingElement)) {
          node2.openingFragment = openingElement;
          node2.closingFragment = closingElement;
        } else {
          node2.openingElement = openingElement;
          node2.closingElement = closingElement;
        }
        node2.children = children;
        if (this.match(47)) {
          throw this.raise(JsxErrors2.UnwrappedAdjacentJSXElements, {
            at: this.state.startLoc
          });
        }
        return isFragment2(openingElement) ? this.finishNode(node2, "JSXFragment") : this.finishNode(node2, "JSXElement");
      }
      jsxParseElement() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        this.next();
        return this.jsxParseElementAt(startPos, startLoc);
      }
      setContext(newContext) {
        const {
          context
        } = this.state;
        context[context.length - 1] = newContext;
      }
      parseExprAtom(refExpressionErrors) {
        if (this.match(137)) {
          return this.parseLiteral(this.state.value, "JSXText");
        } else if (this.match(138)) {
          return this.jsxParseElement();
        } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {
          this.replaceToken(138);
          return this.jsxParseElement();
        } else {
          return super.parseExprAtom(refExpressionErrors);
        }
      }
      skipSpace() {
        const curContext = this.curContext();
        if (!curContext.preserveSpace)
          super.skipSpace();
      }
      getTokenFromCode(code) {
        const context = this.curContext();
        if (context === types2.j_expr) {
          return this.jsxReadToken();
        }
        if (context === types2.j_oTag || context === types2.j_cTag) {
          if (isIdentifierStart2(code)) {
            return this.jsxReadWord();
          }
          if (code === 62) {
            ++this.state.pos;
            return this.finishToken(139);
          }
          if ((code === 34 || code === 39) && context === types2.j_oTag) {
            return this.jsxReadString(code);
          }
        }
        if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
          ++this.state.pos;
          return this.finishToken(138);
        }
        return super.getTokenFromCode(code);
      }
      updateContext(prevType) {
        const {
          context,
          type
        } = this.state;
        if (type === 56 && prevType === 138) {
          context.splice(-2, 2, types2.j_cTag);
          this.state.canStartJSXElement = false;
        } else if (type === 138) {
          context.push(types2.j_oTag);
        } else if (type === 139) {
          const out = context[context.length - 1];
          if (out === types2.j_oTag && prevType === 56 || out === types2.j_cTag) {
            context.pop();
            this.state.canStartJSXElement = context[context.length - 1] === types2.j_expr;
          } else {
            this.setContext(types2.j_expr);
            this.state.canStartJSXElement = true;
          }
        } else {
          this.state.canStartJSXElement = tokenComesBeforeExpression2(type);
        }
      }
    };
    var TypeScriptScope2 = class extends Scope2 {
      constructor(...args) {
        super(...args);
        this.types = /* @__PURE__ */ new Set();
        this.enums = /* @__PURE__ */ new Set();
        this.constEnums = /* @__PURE__ */ new Set();
        this.classes = /* @__PURE__ */ new Set();
        this.exportOnlyBindings = /* @__PURE__ */ new Set();
      }
    };
    var TypeScriptScopeHandler2 = class extends ScopeHandler2 {
      createScope(flags) {
        return new TypeScriptScope2(flags);
      }
      declareName(name, bindingType, loc) {
        const scope = this.currentScope();
        if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY2) {
          this.maybeExportDefined(scope, name);
          scope.exportOnlyBindings.add(name);
          return;
        }
        super.declareName(...arguments);
        if (bindingType & BIND_KIND_TYPE2) {
          if (!(bindingType & BIND_KIND_VALUE2)) {
            this.checkRedeclarationInScope(scope, name, bindingType, loc);
            this.maybeExportDefined(scope, name);
          }
          scope.types.add(name);
        }
        if (bindingType & BIND_FLAGS_TS_ENUM2)
          scope.enums.add(name);
        if (bindingType & BIND_FLAGS_TS_CONST_ENUM2)
          scope.constEnums.add(name);
        if (bindingType & BIND_FLAGS_CLASS2)
          scope.classes.add(name);
      }
      isRedeclaredInScope(scope, name, bindingType) {
        if (scope.enums.has(name)) {
          if (bindingType & BIND_FLAGS_TS_ENUM2) {
            const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM2);
            const wasConst = scope.constEnums.has(name);
            return isConst !== wasConst;
          }
          return true;
        }
        if (bindingType & BIND_FLAGS_CLASS2 && scope.classes.has(name)) {
          if (scope.lexical.has(name)) {
            return !!(bindingType & BIND_KIND_VALUE2);
          } else {
            return false;
          }
        }
        if (bindingType & BIND_KIND_TYPE2 && scope.types.has(name)) {
          return true;
        }
        return super.isRedeclaredInScope(...arguments);
      }
      checkLocalExport(id2) {
        const topLevelScope = this.scopeStack[0];
        const {
          name
        } = id2;
        if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {
          super.checkLocalExport(id2);
        }
      }
    };
    function nonNull2(x) {
      if (x == null) {
        throw new Error(`Unexpected ${x} value.`);
      }
      return x;
    }
    function assert2(x) {
      if (!x) {
        throw new Error("Assert fail");
      }
    }
    var TSErrors2 = makeErrorTemplates2({
      AbstractMethodHasImplementation: "Method '%0' cannot have an implementation because it is marked abstract.",
      AbstractPropertyHasInitializer: "Property '%0' cannot have an initializer because it is marked abstract.",
      AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
      AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
      ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
      ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
      ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
      DeclareAccessor: "'declare' is not allowed in %0ters.",
      DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
      DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
      DuplicateAccessibilityModifier: "Accessibility modifier already seen.",
      DuplicateModifier: "Duplicate modifier: '%0'.",
      EmptyHeritageClauseType: "'%0' list cannot be empty.",
      EmptyTypeArguments: "Type argument list cannot be empty.",
      EmptyTypeParameters: "Type parameter list cannot be empty.",
      ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
      ImportAliasHasImportType: "An import alias can not use 'import type'.",
      IncompatibleModifiers: "'%0' modifier cannot be used with '%1' modifier.",
      IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
      IndexSignatureHasAccessibility: "Index signatures cannot have an accessibility modifier ('%0').",
      IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
      IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
      IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
      InvalidModifierOnTypeMember: "'%0' modifier cannot appear on a type member.",
      InvalidModifiersOrder: "'%0' modifier must precede '%1' modifier.",
      InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
      MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
      MixedLabeledAndUnlabeledElements: "Tuple members must all have names or all not have names.",
      NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
      NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
      OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
      OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
      PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
      PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
      PrivateElementHasAccessibility: "Private elements cannot have an accessibility modifier ('%0').",
      ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
      ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
      ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
      SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
      SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
      SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
      StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
      TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
      TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
      TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
      TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
      UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
      UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
      UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
      UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
      UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
      UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
      UnsupportedSignatureParameterKind: "Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0."
    }, ErrorCodes2.SyntaxError, "typescript");
    function keywordTypeFromName2(value) {
      switch (value) {
        case "any":
          return "TSAnyKeyword";
        case "boolean":
          return "TSBooleanKeyword";
        case "bigint":
          return "TSBigIntKeyword";
        case "never":
          return "TSNeverKeyword";
        case "number":
          return "TSNumberKeyword";
        case "object":
          return "TSObjectKeyword";
        case "string":
          return "TSStringKeyword";
        case "symbol":
          return "TSSymbolKeyword";
        case "undefined":
          return "TSUndefinedKeyword";
        case "unknown":
          return "TSUnknownKeyword";
        default:
          return void 0;
      }
    }
    function tsIsAccessModifier2(modifier) {
      return modifier === "private" || modifier === "public" || modifier === "protected";
    }
    var typescript2 = (superClass) => class extends superClass {
      getScopeHandler() {
        return TypeScriptScopeHandler2;
      }
      tsIsIdentifier() {
        return tokenIsIdentifier2(this.state.type);
      }
      tsTokenCanFollowModifier() {
        return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(134) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
      }
      tsNextTokenCanFollowModifier() {
        this.next();
        return this.tsTokenCanFollowModifier();
      }
      tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
        if (!tokenIsIdentifier2(this.state.type)) {
          return void 0;
        }
        const modifier = this.state.value;
        if (allowedModifiers.indexOf(modifier) !== -1) {
          if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {
            return void 0;
          }
          if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
            return modifier;
          }
        }
        return void 0;
      }
      tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate, stopOnStartOfClassStaticBlock) {
        const enforceOrder = (loc, modifier, before, after) => {
          if (modifier === before && modified[after]) {
            this.raise(TSErrors2.InvalidModifiersOrder, {
              at: loc
            }, before, after);
          }
        };
        const incompatible = (loc, modifier, mod1, mod2) => {
          if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
            this.raise(TSErrors2.IncompatibleModifiers, {
              at: loc
            }, mod1, mod2);
          }
        };
        for (; ; ) {
          const {
            startLoc
          } = this.state;
          const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
          if (!modifier)
            break;
          if (tsIsAccessModifier2(modifier)) {
            if (modified.accessibility) {
              this.raise(TSErrors2.DuplicateAccessibilityModifier, {
                at: startLoc
              });
            } else {
              enforceOrder(startLoc, modifier, modifier, "override");
              enforceOrder(startLoc, modifier, modifier, "static");
              enforceOrder(startLoc, modifier, modifier, "readonly");
              modified.accessibility = modifier;
            }
          } else {
            if (Object.hasOwnProperty.call(modified, modifier)) {
              this.raise(TSErrors2.DuplicateModifier, {
                at: startLoc
              }, modifier);
            } else {
              enforceOrder(startLoc, modifier, "static", "readonly");
              enforceOrder(startLoc, modifier, "static", "override");
              enforceOrder(startLoc, modifier, "override", "readonly");
              enforceOrder(startLoc, modifier, "abstract", "override");
              incompatible(startLoc, modifier, "declare", "override");
              incompatible(startLoc, modifier, "static", "abstract");
            }
            modified[modifier] = true;
          }
          if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
            this.raise(errorTemplate, {
              at: startLoc
            }, modifier);
          }
        }
      }
      tsIsListTerminator(kind) {
        switch (kind) {
          case "EnumMembers":
          case "TypeMembers":
            return this.match(8);
          case "HeritageClauseElement":
            return this.match(5);
          case "TupleElementTypes":
            return this.match(3);
          case "TypeParametersOrArguments":
            return this.match(48);
        }
        throw new Error("Unreachable");
      }
      tsParseList(kind, parseElement2) {
        const result2 = [];
        while (!this.tsIsListTerminator(kind)) {
          result2.push(parseElement2());
        }
        return result2;
      }
      tsParseDelimitedList(kind, parseElement2, refTrailingCommaPos) {
        return nonNull2(this.tsParseDelimitedListWorker(kind, parseElement2, true, refTrailingCommaPos));
      }
      tsParseDelimitedListWorker(kind, parseElement2, expectSuccess, refTrailingCommaPos) {
        const result2 = [];
        let trailingCommaPos = -1;
        for (; ; ) {
          if (this.tsIsListTerminator(kind)) {
            break;
          }
          trailingCommaPos = -1;
          const element = parseElement2();
          if (element == null) {
            return void 0;
          }
          result2.push(element);
          if (this.eat(12)) {
            trailingCommaPos = this.state.lastTokStart;
            continue;
          }
          if (this.tsIsListTerminator(kind)) {
            break;
          }
          if (expectSuccess) {
            this.expect(12);
          }
          return void 0;
        }
        if (refTrailingCommaPos) {
          refTrailingCommaPos.value = trailingCommaPos;
        }
        return result2;
      }
      tsParseBracketedList(kind, parseElement2, bracket, skipFirstToken, refTrailingCommaPos) {
        if (!skipFirstToken) {
          if (bracket) {
            this.expect(0);
          } else {
            this.expect(47);
          }
        }
        const result2 = this.tsParseDelimitedList(kind, parseElement2, refTrailingCommaPos);
        if (bracket) {
          this.expect(3);
        } else {
          this.expect(48);
        }
        return result2;
      }
      tsParseImportType() {
        const node2 = this.startNode();
        this.expect(83);
        this.expect(10);
        if (!this.match(129)) {
          this.raise(TSErrors2.UnsupportedImportTypeArgument, {
            at: this.state.startLoc
          });
        }
        node2.argument = this.parseExprAtom();
        this.expect(11);
        if (this.eat(16)) {
          node2.qualifier = this.tsParseEntityName(true);
        }
        if (this.match(47)) {
          node2.typeParameters = this.tsParseTypeArguments();
        }
        return this.finishNode(node2, "TSImportType");
      }
      tsParseEntityName(allowReservedWords) {
        let entity = this.parseIdentifier();
        while (this.eat(16)) {
          const node2 = this.startNodeAtNode(entity);
          node2.left = entity;
          node2.right = this.parseIdentifier(allowReservedWords);
          entity = this.finishNode(node2, "TSQualifiedName");
        }
        return entity;
      }
      tsParseTypeReference() {
        const node2 = this.startNode();
        node2.typeName = this.tsParseEntityName(false);
        if (!this.hasPrecedingLineBreak() && this.match(47)) {
          node2.typeParameters = this.tsParseTypeArguments();
        }
        return this.finishNode(node2, "TSTypeReference");
      }
      tsParseThisTypePredicate(lhs) {
        this.next();
        const node2 = this.startNodeAtNode(lhs);
        node2.parameterName = lhs;
        node2.typeAnnotation = this.tsParseTypeAnnotation(false);
        node2.asserts = false;
        return this.finishNode(node2, "TSTypePredicate");
      }
      tsParseThisTypeNode() {
        const node2 = this.startNode();
        this.next();
        return this.finishNode(node2, "TSThisType");
      }
      tsParseTypeQuery() {
        const node2 = this.startNode();
        this.expect(87);
        if (this.match(83)) {
          node2.exprName = this.tsParseImportType();
        } else {
          node2.exprName = this.tsParseEntityName(true);
        }
        return this.finishNode(node2, "TSTypeQuery");
      }
      tsParseTypeParameter() {
        const node2 = this.startNode();
        node2.name = this.tsParseTypeParameterName();
        node2.constraint = this.tsEatThenParseType(81);
        node2.default = this.tsEatThenParseType(29);
        return this.finishNode(node2, "TSTypeParameter");
      }
      tsTryParseTypeParameters() {
        if (this.match(47)) {
          return this.tsParseTypeParameters();
        }
      }
      tsParseTypeParameters() {
        const node2 = this.startNode();
        if (this.match(47) || this.match(138)) {
          this.next();
        } else {
          this.unexpected();
        }
        const refTrailingCommaPos = {
          value: -1
        };
        node2.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this), false, true, refTrailingCommaPos);
        if (node2.params.length === 0) {
          this.raise(TSErrors2.EmptyTypeParameters, {
            node: node2
          });
        }
        if (refTrailingCommaPos.value !== -1) {
          this.addExtra(node2, "trailingComma", refTrailingCommaPos.value);
        }
        return this.finishNode(node2, "TSTypeParameterDeclaration");
      }
      tsTryNextParseConstantContext() {
        if (this.lookahead().type === 75) {
          this.next();
          return this.tsParseTypeReference();
        }
        return null;
      }
      tsFillSignature(returnToken, signature) {
        const returnTokenRequired = returnToken === 19;
        const paramsKey = "parameters";
        const returnTypeKey = "typeAnnotation";
        signature.typeParameters = this.tsTryParseTypeParameters();
        this.expect(10);
        signature[paramsKey] = this.tsParseBindingListForSignature();
        if (returnTokenRequired) {
          signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
        } else if (this.match(returnToken)) {
          signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
        }
      }
      tsParseBindingListForSignature() {
        return this.parseBindingList(11, 41).map((pattern) => {
          if (pattern.type !== "Identifier" && pattern.type !== "RestElement" && pattern.type !== "ObjectPattern" && pattern.type !== "ArrayPattern") {
            this.raise(TSErrors2.UnsupportedSignatureParameterKind, {
              node: pattern
            }, pattern.type);
          }
          return pattern;
        });
      }
      tsParseTypeMemberSemicolon() {
        if (!this.eat(12) && !this.isLineTerminator()) {
          this.expect(13);
        }
      }
      tsParseSignatureMember(kind, node2) {
        this.tsFillSignature(14, node2);
        this.tsParseTypeMemberSemicolon();
        return this.finishNode(node2, kind);
      }
      tsIsUnambiguouslyIndexSignature() {
        this.next();
        if (tokenIsIdentifier2(this.state.type)) {
          this.next();
          return this.match(14);
        }
        return false;
      }
      tsTryParseIndexSignature(node2) {
        if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
          return void 0;
        }
        this.expect(0);
        const id2 = this.parseIdentifier();
        id2.typeAnnotation = this.tsParseTypeAnnotation();
        this.resetEndLocation(id2);
        this.expect(3);
        node2.parameters = [id2];
        const type = this.tsTryParseTypeAnnotation();
        if (type)
          node2.typeAnnotation = type;
        this.tsParseTypeMemberSemicolon();
        return this.finishNode(node2, "TSIndexSignature");
      }
      tsParsePropertyOrMethodSignature(node2, readonly) {
        if (this.eat(17))
          node2.optional = true;
        const nodeAny = node2;
        if (this.match(10) || this.match(47)) {
          if (readonly) {
            this.raise(TSErrors2.ReadonlyForMethodSignature, {
              node: node2
            });
          }
          const method = nodeAny;
          if (method.kind && this.match(47)) {
            this.raise(TSErrors2.AccesorCannotHaveTypeParameters, {
              at: this.state.curPosition()
            });
          }
          this.tsFillSignature(14, method);
          this.tsParseTypeMemberSemicolon();
          const paramsKey = "parameters";
          const returnTypeKey = "typeAnnotation";
          if (method.kind === "get") {
            if (method[paramsKey].length > 0) {
              this.raise(ErrorMessages2.BadGetterArity, {
                at: this.state.curPosition()
              });
              if (this.isThisParam(method[paramsKey][0])) {
                this.raise(TSErrors2.AccesorCannotDeclareThisParameter, {
                  at: this.state.curPosition()
                });
              }
            }
          } else if (method.kind === "set") {
            if (method[paramsKey].length !== 1) {
              this.raise(ErrorMessages2.BadSetterArity, {
                at: this.state.curPosition()
              });
            } else {
              const firstParameter = method[paramsKey][0];
              if (this.isThisParam(firstParameter)) {
                this.raise(TSErrors2.AccesorCannotDeclareThisParameter, {
                  at: this.state.curPosition()
                });
              }
              if (firstParameter.type === "Identifier" && firstParameter.optional) {
                this.raise(TSErrors2.SetAccesorCannotHaveOptionalParameter, {
                  at: this.state.curPosition()
                });
              }
              if (firstParameter.type === "RestElement") {
                this.raise(TSErrors2.SetAccesorCannotHaveRestParameter, {
                  at: this.state.curPosition()
                });
              }
            }
            if (method[returnTypeKey]) {
              this.raise(TSErrors2.SetAccesorCannotHaveReturnType, {
                node: method[returnTypeKey]
              });
            }
          } else {
            method.kind = "method";
          }
          return this.finishNode(method, "TSMethodSignature");
        } else {
          const property = nodeAny;
          if (readonly)
            property.readonly = true;
          const type = this.tsTryParseTypeAnnotation();
          if (type)
            property.typeAnnotation = type;
          this.tsParseTypeMemberSemicolon();
          return this.finishNode(property, "TSPropertySignature");
        }
      }
      tsParseTypeMember() {
        const node2 = this.startNode();
        if (this.match(10) || this.match(47)) {
          return this.tsParseSignatureMember("TSCallSignatureDeclaration", node2);
        }
        if (this.match(77)) {
          const id2 = this.startNode();
          this.next();
          if (this.match(10) || this.match(47)) {
            return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node2);
          } else {
            node2.key = this.createIdentifier(id2, "new");
            return this.tsParsePropertyOrMethodSignature(node2, false);
          }
        }
        this.tsParseModifiers(node2, ["readonly"], ["declare", "abstract", "private", "protected", "public", "static", "override"], TSErrors2.InvalidModifierOnTypeMember);
        const idx = this.tsTryParseIndexSignature(node2);
        if (idx) {
          return idx;
        }
        this.parsePropertyName(node2);
        if (!node2.computed && node2.key.type === "Identifier" && (node2.key.name === "get" || node2.key.name === "set") && this.tsTokenCanFollowModifier()) {
          node2.kind = node2.key.name;
          this.parsePropertyName(node2);
        }
        return this.tsParsePropertyOrMethodSignature(node2, !!node2.readonly);
      }
      tsParseTypeLiteral() {
        const node2 = this.startNode();
        node2.members = this.tsParseObjectTypeMembers();
        return this.finishNode(node2, "TSTypeLiteral");
      }
      tsParseObjectTypeMembers() {
        this.expect(5);
        const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
        this.expect(8);
        return members;
      }
      tsIsStartOfMappedType() {
        this.next();
        if (this.eat(53)) {
          return this.isContextual(118);
        }
        if (this.isContextual(118)) {
          this.next();
        }
        if (!this.match(0)) {
          return false;
        }
        this.next();
        if (!this.tsIsIdentifier()) {
          return false;
        }
        this.next();
        return this.match(58);
      }
      tsParseMappedTypeParameter() {
        const node2 = this.startNode();
        node2.name = this.tsParseTypeParameterName();
        node2.constraint = this.tsExpectThenParseType(58);
        return this.finishNode(node2, "TSTypeParameter");
      }
      tsParseMappedType() {
        const node2 = this.startNode();
        this.expect(5);
        if (this.match(53)) {
          node2.readonly = this.state.value;
          this.next();
          this.expectContextual(118);
        } else if (this.eatContextual(118)) {
          node2.readonly = true;
        }
        this.expect(0);
        node2.typeParameter = this.tsParseMappedTypeParameter();
        node2.nameType = this.eatContextual(93) ? this.tsParseType() : null;
        this.expect(3);
        if (this.match(53)) {
          node2.optional = this.state.value;
          this.next();
          this.expect(17);
        } else if (this.eat(17)) {
          node2.optional = true;
        }
        node2.typeAnnotation = this.tsTryParseType();
        this.semicolon();
        this.expect(8);
        return this.finishNode(node2, "TSMappedType");
      }
      tsParseTupleType() {
        const node2 = this.startNode();
        node2.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
        let seenOptionalElement = false;
        let labeledElements = null;
        node2.elementTypes.forEach((elementNode) => {
          var _labeledElements;
          let {
            type
          } = elementNode;
          if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {
            this.raise(TSErrors2.OptionalTypeBeforeRequired, {
              node: elementNode
            });
          }
          seenOptionalElement = seenOptionalElement || type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType";
          if (type === "TSRestType") {
            elementNode = elementNode.typeAnnotation;
            type = elementNode.type;
          }
          const isLabeled = type === "TSNamedTupleMember";
          labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;
          if (labeledElements !== isLabeled) {
            this.raise(TSErrors2.MixedLabeledAndUnlabeledElements, {
              node: elementNode
            });
          }
        });
        return this.finishNode(node2, "TSTupleType");
      }
      tsParseTupleElementType() {
        const {
          start: startPos,
          startLoc
        } = this.state;
        const rest = this.eat(21);
        let type = this.tsParseType();
        const optional = this.eat(17);
        const labeled = this.eat(14);
        if (labeled) {
          const labeledNode = this.startNodeAtNode(type);
          labeledNode.optional = optional;
          if (type.type === "TSTypeReference" && !type.typeParameters && type.typeName.type === "Identifier") {
            labeledNode.label = type.typeName;
          } else {
            this.raise(TSErrors2.InvalidTupleMemberLabel, {
              node: type
            });
            labeledNode.label = type;
          }
          labeledNode.elementType = this.tsParseType();
          type = this.finishNode(labeledNode, "TSNamedTupleMember");
        } else if (optional) {
          const optionalTypeNode = this.startNodeAtNode(type);
          optionalTypeNode.typeAnnotation = type;
          type = this.finishNode(optionalTypeNode, "TSOptionalType");
        }
        if (rest) {
          const restNode = this.startNodeAt(startPos, startLoc);
          restNode.typeAnnotation = type;
          type = this.finishNode(restNode, "TSRestType");
        }
        return type;
      }
      tsParseParenthesizedType() {
        const node2 = this.startNode();
        this.expect(10);
        node2.typeAnnotation = this.tsParseType();
        this.expect(11);
        return this.finishNode(node2, "TSParenthesizedType");
      }
      tsParseFunctionOrConstructorType(type, abstract) {
        const node2 = this.startNode();
        if (type === "TSConstructorType") {
          node2.abstract = !!abstract;
          if (abstract)
            this.next();
          this.next();
        }
        this.tsFillSignature(19, node2);
        return this.finishNode(node2, type);
      }
      tsParseLiteralTypeNode() {
        const node2 = this.startNode();
        node2.literal = (() => {
          switch (this.state.type) {
            case 130:
            case 131:
            case 129:
            case 85:
            case 86:
              return this.parseExprAtom();
            default:
              throw this.unexpected();
          }
        })();
        return this.finishNode(node2, "TSLiteralType");
      }
      tsParseTemplateLiteralType() {
        const node2 = this.startNode();
        node2.literal = this.parseTemplate(false);
        return this.finishNode(node2, "TSLiteralType");
      }
      parseTemplateSubstitution() {
        if (this.state.inType)
          return this.tsParseType();
        return super.parseTemplateSubstitution();
      }
      tsParseThisTypeOrThisTypePredicate() {
        const thisKeyword = this.tsParseThisTypeNode();
        if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {
          return this.tsParseThisTypePredicate(thisKeyword);
        } else {
          return thisKeyword;
        }
      }
      tsParseNonArrayType() {
        switch (this.state.type) {
          case 129:
          case 130:
          case 131:
          case 85:
          case 86:
            return this.tsParseLiteralTypeNode();
          case 53:
            if (this.state.value === "-") {
              const node2 = this.startNode();
              const nextToken = this.lookahead();
              if (nextToken.type !== 130 && nextToken.type !== 131) {
                throw this.unexpected();
              }
              node2.literal = this.parseMaybeUnary();
              return this.finishNode(node2, "TSLiteralType");
            }
            break;
          case 78:
            return this.tsParseThisTypeOrThisTypePredicate();
          case 87:
            return this.tsParseTypeQuery();
          case 83:
            return this.tsParseImportType();
          case 5:
            return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
          case 0:
            return this.tsParseTupleType();
          case 10:
            return this.tsParseParenthesizedType();
          case 25:
          case 24:
            return this.tsParseTemplateLiteralType();
          default: {
            const {
              type
            } = this.state;
            if (tokenIsIdentifier2(type) || type === 88 || type === 84) {
              const nodeType = type === 88 ? "TSVoidKeyword" : type === 84 ? "TSNullKeyword" : keywordTypeFromName2(this.state.value);
              if (nodeType !== void 0 && this.lookaheadCharCode() !== 46) {
                const node2 = this.startNode();
                this.next();
                return this.finishNode(node2, nodeType);
              }
              return this.tsParseTypeReference();
            }
          }
        }
        throw this.unexpected();
      }
      tsParseArrayTypeOrHigher() {
        let type = this.tsParseNonArrayType();
        while (!this.hasPrecedingLineBreak() && this.eat(0)) {
          if (this.match(3)) {
            const node2 = this.startNodeAtNode(type);
            node2.elementType = type;
            this.expect(3);
            type = this.finishNode(node2, "TSArrayType");
          } else {
            const node2 = this.startNodeAtNode(type);
            node2.objectType = type;
            node2.indexType = this.tsParseType();
            this.expect(3);
            type = this.finishNode(node2, "TSIndexedAccessType");
          }
        }
        return type;
      }
      tsParseTypeOperator() {
        const node2 = this.startNode();
        const operator = this.state.value;
        this.next();
        node2.operator = operator;
        node2.typeAnnotation = this.tsParseTypeOperatorOrHigher();
        if (operator === "readonly") {
          this.tsCheckTypeAnnotationForReadOnly(node2);
        }
        return this.finishNode(node2, "TSTypeOperator");
      }
      tsCheckTypeAnnotationForReadOnly(node2) {
        switch (node2.typeAnnotation.type) {
          case "TSTupleType":
          case "TSArrayType":
            return;
          default:
            this.raise(TSErrors2.UnexpectedReadonly, {
              node: node2
            });
        }
      }
      tsParseInferType() {
        const node2 = this.startNode();
        this.expectContextual(112);
        const typeParameter = this.startNode();
        typeParameter.name = this.tsParseTypeParameterName();
        node2.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
        return this.finishNode(node2, "TSInferType");
      }
      tsParseTypeOperatorOrHigher() {
        const isTypeOperator = tokenIsTSTypeOperator2(this.state.type) && !this.state.containsEsc;
        return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(112) ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();
      }
      tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
        const node2 = this.startNode();
        const hasLeadingOperator = this.eat(operator);
        const types3 = [];
        do {
          types3.push(parseConstituentType());
        } while (this.eat(operator));
        if (types3.length === 1 && !hasLeadingOperator) {
          return types3[0];
        }
        node2.types = types3;
        return this.finishNode(node2, kind);
      }
      tsParseIntersectionTypeOrHigher() {
        return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
      }
      tsParseUnionTypeOrHigher() {
        return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
      }
      tsIsStartOfFunctionType() {
        if (this.match(47)) {
          return true;
        }
        return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
      }
      tsSkipParameterStart() {
        if (tokenIsIdentifier2(this.state.type) || this.match(78)) {
          this.next();
          return true;
        }
        if (this.match(5)) {
          let braceStackCounter = 1;
          this.next();
          while (braceStackCounter > 0) {
            if (this.match(5)) {
              ++braceStackCounter;
            } else if (this.match(8)) {
              --braceStackCounter;
            }
            this.next();
          }
          return true;
        }
        if (this.match(0)) {
          let braceStackCounter = 1;
          this.next();
          while (braceStackCounter > 0) {
            if (this.match(0)) {
              ++braceStackCounter;
            } else if (this.match(3)) {
              --braceStackCounter;
            }
            this.next();
          }
          return true;
        }
        return false;
      }
      tsIsUnambiguouslyStartOfFunctionType() {
        this.next();
        if (this.match(11) || this.match(21)) {
          return true;
        }
        if (this.tsSkipParameterStart()) {
          if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {
            return true;
          }
          if (this.match(11)) {
            this.next();
            if (this.match(19)) {
              return true;
            }
          }
        }
        return false;
      }
      tsParseTypeOrTypePredicateAnnotation(returnToken) {
        return this.tsInType(() => {
          const t = this.startNode();
          this.expect(returnToken);
          const node2 = this.startNode();
          const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
          if (asserts && this.match(78)) {
            let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
            if (thisTypePredicate.type === "TSThisType") {
              node2.parameterName = thisTypePredicate;
              node2.asserts = true;
              node2.typeAnnotation = null;
              thisTypePredicate = this.finishNode(node2, "TSTypePredicate");
            } else {
              this.resetStartLocationFromNode(thisTypePredicate, node2);
              thisTypePredicate.asserts = true;
            }
            t.typeAnnotation = thisTypePredicate;
            return this.finishNode(t, "TSTypeAnnotation");
          }
          const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
          if (!typePredicateVariable) {
            if (!asserts) {
              return this.tsParseTypeAnnotation(false, t);
            }
            node2.parameterName = this.parseIdentifier();
            node2.asserts = asserts;
            node2.typeAnnotation = null;
            t.typeAnnotation = this.finishNode(node2, "TSTypePredicate");
            return this.finishNode(t, "TSTypeAnnotation");
          }
          const type = this.tsParseTypeAnnotation(false);
          node2.parameterName = typePredicateVariable;
          node2.typeAnnotation = type;
          node2.asserts = asserts;
          t.typeAnnotation = this.finishNode(node2, "TSTypePredicate");
          return this.finishNode(t, "TSTypeAnnotation");
        });
      }
      tsTryParseTypeOrTypePredicateAnnotation() {
        return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : void 0;
      }
      tsTryParseTypeAnnotation() {
        return this.match(14) ? this.tsParseTypeAnnotation() : void 0;
      }
      tsTryParseType() {
        return this.tsEatThenParseType(14);
      }
      tsParseTypePredicatePrefix() {
        const id2 = this.parseIdentifier();
        if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {
          this.next();
          return id2;
        }
      }
      tsParseTypePredicateAsserts() {
        if (this.state.type !== 106) {
          return false;
        }
        const containsEsc = this.state.containsEsc;
        this.next();
        if (!tokenIsIdentifier2(this.state.type) && !this.match(78)) {
          return false;
        }
        if (containsEsc) {
          this.raise(ErrorMessages2.InvalidEscapedReservedWord, {
            at: this.state.lastTokStartLoc
          }, "asserts");
        }
        return true;
      }
      tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
        this.tsInType(() => {
          if (eatColon)
            this.expect(14);
          t.typeAnnotation = this.tsParseType();
        });
        return this.finishNode(t, "TSTypeAnnotation");
      }
      tsParseType() {
        assert2(this.state.inType);
        const type = this.tsParseNonConditionalType();
        if (this.hasPrecedingLineBreak() || !this.eat(81)) {
          return type;
        }
        const node2 = this.startNodeAtNode(type);
        node2.checkType = type;
        node2.extendsType = this.tsParseNonConditionalType();
        this.expect(17);
        node2.trueType = this.tsParseType();
        this.expect(14);
        node2.falseType = this.tsParseType();
        return this.finishNode(node2, "TSConditionalType");
      }
      isAbstractConstructorSignature() {
        return this.isContextual(120) && this.lookahead().type === 77;
      }
      tsParseNonConditionalType() {
        if (this.tsIsStartOfFunctionType()) {
          return this.tsParseFunctionOrConstructorType("TSFunctionType");
        }
        if (this.match(77)) {
          return this.tsParseFunctionOrConstructorType("TSConstructorType");
        } else if (this.isAbstractConstructorSignature()) {
          return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
        }
        return this.tsParseUnionTypeOrHigher();
      }
      tsParseTypeAssertion() {
        if (this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
          this.raise(TSErrors2.ReservedTypeAssertion, {
            at: this.state.startLoc
          });
        }
        const node2 = this.startNode();
        const _const = this.tsTryNextParseConstantContext();
        node2.typeAnnotation = _const || this.tsNextThenParseType();
        this.expect(48);
        node2.expression = this.parseMaybeUnary();
        return this.finishNode(node2, "TSTypeAssertion");
      }
      tsParseHeritageClause(descriptor) {
        const originalStartLoc = this.state.startLoc;
        const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", this.tsParseExpressionWithTypeArguments.bind(this));
        if (!delimitedList.length) {
          this.raise(TSErrors2.EmptyHeritageClauseType, {
            at: originalStartLoc
          }, descriptor);
        }
        return delimitedList;
      }
      tsParseExpressionWithTypeArguments() {
        const node2 = this.startNode();
        node2.expression = this.tsParseEntityName(false);
        if (this.match(47)) {
          node2.typeParameters = this.tsParseTypeArguments();
        }
        return this.finishNode(node2, "TSExpressionWithTypeArguments");
      }
      tsParseInterfaceDeclaration(node2) {
        if (tokenIsIdentifier2(this.state.type)) {
          node2.id = this.parseIdentifier();
          this.checkLVal(node2.id, "typescript interface declaration", BIND_TS_INTERFACE2);
        } else {
          node2.id = null;
          this.raise(TSErrors2.MissingInterfaceName, {
            at: this.state.startLoc
          });
        }
        node2.typeParameters = this.tsTryParseTypeParameters();
        if (this.eat(81)) {
          node2.extends = this.tsParseHeritageClause("extends");
        }
        const body = this.startNode();
        body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
        node2.body = this.finishNode(body, "TSInterfaceBody");
        return this.finishNode(node2, "TSInterfaceDeclaration");
      }
      tsParseTypeAliasDeclaration(node2) {
        node2.id = this.parseIdentifier();
        this.checkLVal(node2.id, "typescript type alias", BIND_TS_TYPE2);
        node2.typeParameters = this.tsTryParseTypeParameters();
        node2.typeAnnotation = this.tsInType(() => {
          this.expect(29);
          if (this.isContextual(111) && this.lookahead().type !== 16) {
            const node3 = this.startNode();
            this.next();
            return this.finishNode(node3, "TSIntrinsicKeyword");
          }
          return this.tsParseType();
        });
        this.semicolon();
        return this.finishNode(node2, "TSTypeAliasDeclaration");
      }
      tsInNoContext(cb) {
        const oldContext = this.state.context;
        this.state.context = [oldContext[0]];
        try {
          return cb();
        } finally {
          this.state.context = oldContext;
        }
      }
      tsInType(cb) {
        const oldInType = this.state.inType;
        this.state.inType = true;
        try {
          return cb();
        } finally {
          this.state.inType = oldInType;
        }
      }
      tsEatThenParseType(token) {
        return !this.match(token) ? void 0 : this.tsNextThenParseType();
      }
      tsExpectThenParseType(token) {
        return this.tsDoThenParseType(() => this.expect(token));
      }
      tsNextThenParseType() {
        return this.tsDoThenParseType(() => this.next());
      }
      tsDoThenParseType(cb) {
        return this.tsInType(() => {
          cb();
          return this.tsParseType();
        });
      }
      tsParseEnumMember() {
        const node2 = this.startNode();
        node2.id = this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);
        if (this.eat(29)) {
          node2.initializer = this.parseMaybeAssignAllowIn();
        }
        return this.finishNode(node2, "TSEnumMember");
      }
      tsParseEnumDeclaration(node2, isConst) {
        if (isConst)
          node2.const = true;
        node2.id = this.parseIdentifier();
        this.checkLVal(node2.id, "typescript enum declaration", isConst ? BIND_TS_CONST_ENUM2 : BIND_TS_ENUM2);
        this.expect(5);
        node2.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
        this.expect(8);
        return this.finishNode(node2, "TSEnumDeclaration");
      }
      tsParseModuleBlock() {
        const node2 = this.startNode();
        this.scope.enter(SCOPE_OTHER2);
        this.expect(5);
        this.parseBlockOrModuleBlockBody(node2.body = [], void 0, true, 8);
        this.scope.exit();
        return this.finishNode(node2, "TSModuleBlock");
      }
      tsParseModuleOrNamespaceDeclaration(node2, nested = false) {
        node2.id = this.parseIdentifier();
        if (!nested) {
          this.checkLVal(node2.id, "module or namespace declaration", BIND_TS_NAMESPACE2);
        }
        if (this.eat(16)) {
          const inner = this.startNode();
          this.tsParseModuleOrNamespaceDeclaration(inner, true);
          node2.body = inner;
        } else {
          this.scope.enter(SCOPE_TS_MODULE2);
          this.prodParam.enter(PARAM2);
          node2.body = this.tsParseModuleBlock();
          this.prodParam.exit();
          this.scope.exit();
        }
        return this.finishNode(node2, "TSModuleDeclaration");
      }
      tsParseAmbientExternalModuleDeclaration(node2) {
        if (this.isContextual(109)) {
          node2.global = true;
          node2.id = this.parseIdentifier();
        } else if (this.match(129)) {
          node2.id = this.parseExprAtom();
        } else {
          this.unexpected();
        }
        if (this.match(5)) {
          this.scope.enter(SCOPE_TS_MODULE2);
          this.prodParam.enter(PARAM2);
          node2.body = this.tsParseModuleBlock();
          this.prodParam.exit();
          this.scope.exit();
        } else {
          this.semicolon();
        }
        return this.finishNode(node2, "TSModuleDeclaration");
      }
      tsParseImportEqualsDeclaration(node2, isExport) {
        node2.isExport = isExport || false;
        node2.id = this.parseIdentifier();
        this.checkLVal(node2.id, "import equals declaration", BIND_LEXICAL2);
        this.expect(29);
        const moduleReference = this.tsParseModuleReference();
        if (node2.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {
          this.raise(TSErrors2.ImportAliasHasImportType, {
            node: moduleReference
          });
        }
        node2.moduleReference = moduleReference;
        this.semicolon();
        return this.finishNode(node2, "TSImportEqualsDeclaration");
      }
      tsIsExternalModuleReference() {
        return this.isContextual(116) && this.lookaheadCharCode() === 40;
      }
      tsParseModuleReference() {
        return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
      }
      tsParseExternalModuleReference() {
        const node2 = this.startNode();
        this.expectContextual(116);
        this.expect(10);
        if (!this.match(129)) {
          throw this.unexpected();
        }
        node2.expression = this.parseExprAtom();
        this.expect(11);
        return this.finishNode(node2, "TSExternalModuleReference");
      }
      tsLookAhead(f) {
        const state = this.state.clone();
        const res = f();
        this.state = state;
        return res;
      }
      tsTryParseAndCatch(f) {
        const result2 = this.tryParse((abort) => f() || abort());
        if (result2.aborted || !result2.node)
          return void 0;
        if (result2.error)
          this.state = result2.failState;
        return result2.node;
      }
      tsTryParse(f) {
        const state = this.state.clone();
        const result2 = f();
        if (result2 !== void 0 && result2 !== false) {
          return result2;
        } else {
          this.state = state;
          return void 0;
        }
      }
      tsTryParseDeclare(nany) {
        if (this.isLineTerminator()) {
          return;
        }
        let starttype = this.state.type;
        let kind;
        if (this.isContextual(99)) {
          starttype = 74;
          kind = "let";
        }
        return this.tsInAmbientContext(() => {
          switch (starttype) {
            case 68:
              nany.declare = true;
              return this.parseFunctionStatement(nany, false, true);
            case 80:
              nany.declare = true;
              return this.parseClass(nany, true, false);
            case 75:
              if (this.match(75) && this.isLookaheadContextual("enum")) {
                this.expect(75);
                this.expectContextual(122);
                return this.tsParseEnumDeclaration(nany, true);
              }
            case 74:
              kind = kind || this.state.value;
              return this.parseVarStatement(nany, kind);
            case 109:
              return this.tsParseAmbientExternalModuleDeclaration(nany);
            default: {
              if (tokenIsIdentifier2(starttype)) {
                return this.tsParseDeclaration(nany, this.state.value, true);
              }
            }
          }
        });
      }
      tsTryParseExportDeclaration() {
        return this.tsParseDeclaration(this.startNode(), this.state.value, true);
      }
      tsParseExpressionStatement(node2, expr) {
        switch (expr.name) {
          case "declare": {
            const declaration2 = this.tsTryParseDeclare(node2);
            if (declaration2) {
              declaration2.declare = true;
              return declaration2;
            }
            break;
          }
          case "global":
            if (this.match(5)) {
              this.scope.enter(SCOPE_TS_MODULE2);
              this.prodParam.enter(PARAM2);
              const mod = node2;
              mod.global = true;
              mod.id = expr;
              mod.body = this.tsParseModuleBlock();
              this.scope.exit();
              this.prodParam.exit();
              return this.finishNode(mod, "TSModuleDeclaration");
            }
            break;
          default:
            return this.tsParseDeclaration(node2, expr.name, false);
        }
      }
      tsParseDeclaration(node2, value, next) {
        switch (value) {
          case "abstract":
            if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier2(this.state.type))) {
              return this.tsParseAbstractDeclaration(node2);
            }
            break;
          case "enum":
            if (next || tokenIsIdentifier2(this.state.type)) {
              if (next)
                this.next();
              return this.tsParseEnumDeclaration(node2, false);
            }
            break;
          case "interface":
            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier2(this.state.type)) {
              return this.tsParseInterfaceDeclaration(node2);
            }
            break;
          case "module":
            if (this.tsCheckLineTerminator(next)) {
              if (this.match(129)) {
                return this.tsParseAmbientExternalModuleDeclaration(node2);
              } else if (tokenIsIdentifier2(this.state.type)) {
                return this.tsParseModuleOrNamespaceDeclaration(node2);
              }
            }
            break;
          case "namespace":
            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier2(this.state.type)) {
              return this.tsParseModuleOrNamespaceDeclaration(node2);
            }
            break;
          case "type":
            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier2(this.state.type)) {
              return this.tsParseTypeAliasDeclaration(node2);
            }
            break;
        }
      }
      tsCheckLineTerminator(next) {
        if (next) {
          if (this.hasFollowingLineBreak())
            return false;
          this.next();
          return true;
        }
        return !this.isLineTerminator();
      }
      tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {
        if (!this.match(47)) {
          return void 0;
        }
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = true;
        const res = this.tsTryParseAndCatch(() => {
          const node2 = this.startNodeAt(startPos, startLoc);
          node2.typeParameters = this.tsParseTypeParameters();
          super.parseFunctionParams(node2);
          node2.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
          this.expect(19);
          return node2;
        });
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        if (!res) {
          return void 0;
        }
        return this.parseArrowExpression(res, null, true);
      }
      tsParseTypeArgumentsInExpression() {
        if (this.reScan_lt() !== 47) {
          return void 0;
        }
        return this.tsParseTypeArguments();
      }
      tsParseTypeArguments() {
        const node2 = this.startNode();
        node2.params = this.tsInType(() => this.tsInNoContext(() => {
          this.expect(47);
          return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
        }));
        if (node2.params.length === 0) {
          this.raise(TSErrors2.EmptyTypeArguments, {
            node: node2
          });
        }
        this.expect(48);
        return this.finishNode(node2, "TSTypeParameterInstantiation");
      }
      tsIsDeclarationStart() {
        return tokenIsTSDeclarationStart2(this.state.type);
      }
      isExportDefaultSpecifier() {
        if (this.tsIsDeclarationStart())
          return false;
        return super.isExportDefaultSpecifier();
      }
      parseAssignableListItem(allowModifiers, decorators) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let accessibility;
        let readonly = false;
        let override = false;
        if (allowModifiers !== void 0) {
          const modified = {};
          this.tsParseModifiers(modified, ["public", "private", "protected", "override", "readonly"]);
          accessibility = modified.accessibility;
          override = modified.override;
          readonly = modified.readonly;
          if (allowModifiers === false && (accessibility || readonly || override)) {
            this.raise(TSErrors2.UnexpectedParameterModifier, {
              at: startLoc
            });
          }
        }
        const left = this.parseMaybeDefault();
        this.parseAssignableListItemTypes(left);
        const elt = this.parseMaybeDefault(left.start, left.loc.start, left);
        if (accessibility || readonly || override) {
          const pp = this.startNodeAt(startPos, startLoc);
          if (decorators.length) {
            pp.decorators = decorators;
          }
          if (accessibility)
            pp.accessibility = accessibility;
          if (readonly)
            pp.readonly = readonly;
          if (override)
            pp.override = override;
          if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {
            this.raise(TSErrors2.UnsupportedParameterPropertyKind, {
              node: pp
            });
          }
          pp.parameter = elt;
          return this.finishNode(pp, "TSParameterProperty");
        }
        if (decorators.length) {
          left.decorators = decorators;
        }
        return elt;
      }
      parseFunctionBodyAndFinish(node2, type, isMethod = false) {
        if (this.match(14)) {
          node2.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
        }
        const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : void 0;
        if (bodilessType && !this.match(5) && this.isLineTerminator()) {
          this.finishNode(node2, bodilessType);
          return;
        }
        if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
          this.raise(TSErrors2.DeclareFunctionHasImplementation, {
            node: node2
          });
          if (node2.declare) {
            super.parseFunctionBodyAndFinish(node2, bodilessType, isMethod);
            return;
          }
        }
        super.parseFunctionBodyAndFinish(node2, type, isMethod);
      }
      registerFunctionStatementId(node2) {
        if (!node2.body && node2.id) {
          this.checkLVal(node2.id, "function name", BIND_TS_AMBIENT2);
        } else {
          super.registerFunctionStatementId(...arguments);
        }
      }
      tsCheckForInvalidTypeCasts(items) {
        items.forEach((node2) => {
          if ((node2 == null ? void 0 : node2.type) === "TSTypeCastExpression") {
            this.raise(TSErrors2.UnexpectedTypeAnnotation, {
              node: node2.typeAnnotation
            });
          }
        });
      }
      toReferencedList(exprList, isInParens) {
        this.tsCheckForInvalidTypeCasts(exprList);
        return exprList;
      }
      parseArrayLike(...args) {
        const node2 = super.parseArrayLike(...args);
        if (node2.type === "ArrayExpression") {
          this.tsCheckForInvalidTypeCasts(node2.elements);
        }
        return node2;
      }
      parseSubscript(base2, startPos, startLoc, noCalls, state) {
        if (!this.hasPrecedingLineBreak() && this.match(35)) {
          this.state.canStartJSXElement = false;
          this.next();
          const nonNullExpression = this.startNodeAt(startPos, startLoc);
          nonNullExpression.expression = base2;
          return this.finishNode(nonNullExpression, "TSNonNullExpression");
        }
        let isOptionalCall = false;
        if (this.match(18) && this.lookaheadCharCode() === 60) {
          if (noCalls) {
            state.stop = true;
            return base2;
          }
          state.optionalChainMember = isOptionalCall = true;
          this.next();
        }
        if (this.match(47) || this.match(51)) {
          let missingParenErrorLoc;
          const result2 = this.tsTryParseAndCatch(() => {
            if (!noCalls && this.atPossibleAsyncArrow(base2)) {
              const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);
              if (asyncArrowFn) {
                return asyncArrowFn;
              }
            }
            const node2 = this.startNodeAt(startPos, startLoc);
            node2.callee = base2;
            const typeArguments = this.tsParseTypeArgumentsInExpression();
            if (typeArguments) {
              if (isOptionalCall && !this.match(10)) {
                missingParenErrorLoc = this.state.curPosition();
                this.unexpected();
              }
              if (!noCalls && this.eat(10)) {
                node2.arguments = this.parseCallExpressionArguments(11, false);
                this.tsCheckForInvalidTypeCasts(node2.arguments);
                node2.typeParameters = typeArguments;
                if (state.optionalChainMember) {
                  node2.optional = isOptionalCall;
                }
                return this.finishCallExpression(node2, state.optionalChainMember);
              } else if (tokenIsTemplate(this.state.type)) {
                const result3 = this.parseTaggedTemplateExpression(base2, startPos, startLoc, state);
                result3.typeParameters = typeArguments;
                return result3;
              }
            }
            this.unexpected();
          });
          if (missingParenErrorLoc) {
            this.unexpected(missingParenErrorLoc, 10);
          }
          if (result2)
            return result2;
        }
        return super.parseSubscript(base2, startPos, startLoc, noCalls, state);
      }
      parseNewArguments(node2) {
        if (this.match(47) || this.match(51)) {
          const typeParameters = this.tsTryParseAndCatch(() => {
            const args = this.tsParseTypeArgumentsInExpression();
            if (!this.match(10))
              this.unexpected();
            return args;
          });
          if (typeParameters) {
            node2.typeParameters = typeParameters;
          }
        }
        super.parseNewArguments(node2);
      }
      parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
        if (tokenOperatorPrecedence2(58) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(93)) {
          const node2 = this.startNodeAt(leftStartPos, leftStartLoc);
          node2.expression = left;
          const _const = this.tsTryNextParseConstantContext();
          if (_const) {
            node2.typeAnnotation = _const;
          } else {
            node2.typeAnnotation = this.tsNextThenParseType();
          }
          this.finishNode(node2, "TSAsExpression");
          this.reScan_lt_gt();
          return this.parseExprOp(node2, leftStartPos, leftStartLoc, minPrec);
        }
        return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);
      }
      checkReservedWord(word, startLoc, checkKeywords, isBinding) {
      }
      checkDuplicateExports() {
      }
      parseImport(node2) {
        node2.importKind = "value";
        if (tokenIsIdentifier2(this.state.type) || this.match(55) || this.match(5)) {
          let ahead = this.lookahead();
          if (this.isContextual(126) && ahead.type !== 12 && ahead.type !== 97 && ahead.type !== 29) {
            node2.importKind = "type";
            this.next();
            ahead = this.lookahead();
          }
          if (tokenIsIdentifier2(this.state.type) && ahead.type === 29) {
            return this.tsParseImportEqualsDeclaration(node2);
          }
        }
        const importNode = super.parseImport(node2);
        if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {
          this.raise(TSErrors2.TypeImportCannotSpecifyDefaultAndNamed, {
            node: importNode
          });
        }
        return importNode;
      }
      parseExport(node2) {
        if (this.match(83)) {
          this.next();
          if (this.isContextual(126) && this.lookaheadCharCode() !== 61) {
            node2.importKind = "type";
            this.next();
          } else {
            node2.importKind = "value";
          }
          return this.tsParseImportEqualsDeclaration(node2, true);
        } else if (this.eat(29)) {
          const assign = node2;
          assign.expression = this.parseExpression();
          this.semicolon();
          return this.finishNode(assign, "TSExportAssignment");
        } else if (this.eatContextual(93)) {
          const decl = node2;
          this.expectContextual(124);
          decl.id = this.parseIdentifier();
          this.semicolon();
          return this.finishNode(decl, "TSNamespaceExportDeclaration");
        } else {
          if (this.isContextual(126) && this.lookahead().type === 5) {
            this.next();
            node2.exportKind = "type";
          } else {
            node2.exportKind = "value";
          }
          return super.parseExport(node2);
        }
      }
      isAbstractClass() {
        return this.isContextual(120) && this.lookahead().type === 80;
      }
      parseExportDefaultExpression() {
        if (this.isAbstractClass()) {
          const cls = this.startNode();
          this.next();
          cls.abstract = true;
          this.parseClass(cls, true, true);
          return cls;
        }
        if (this.match(125)) {
          const interfaceNode = this.startNode();
          this.next();
          const result2 = this.tsParseInterfaceDeclaration(interfaceNode);
          if (result2)
            return result2;
        }
        return super.parseExportDefaultExpression();
      }
      parseStatementContent(context, topLevel) {
        if (this.state.type === 75) {
          const ahead = this.lookahead();
          if (ahead.type === 122) {
            const node2 = this.startNode();
            this.next();
            this.expectContextual(122);
            return this.tsParseEnumDeclaration(node2, true);
          }
        }
        return super.parseStatementContent(context, topLevel);
      }
      parseAccessModifier() {
        return this.tsParseModifier(["public", "protected", "private"]);
      }
      tsHasSomeModifiers(member, modifiers) {
        return modifiers.some((modifier) => {
          if (tsIsAccessModifier2(modifier)) {
            return member.accessibility === modifier;
          }
          return !!member[modifier];
        });
      }
      tsIsStartOfStaticBlocks() {
        return this.isContextual(104) && this.lookaheadCharCode() === 123;
      }
      parseClassMember(classBody, member, state) {
        const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
        this.tsParseModifiers(member, modifiers, void 0, void 0, true);
        const callParseClassMemberWithIsStatic = () => {
          if (this.tsIsStartOfStaticBlocks()) {
            this.next();
            this.next();
            if (this.tsHasSomeModifiers(member, modifiers)) {
              this.raise(TSErrors2.StaticBlockCannotHaveModifier, {
                at: this.state.curPosition()
              });
            }
            this.parseClassStaticBlock(classBody, member);
          } else {
            this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
          }
        };
        if (member.declare) {
          this.tsInAmbientContext(callParseClassMemberWithIsStatic);
        } else {
          callParseClassMemberWithIsStatic();
        }
      }
      parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
        const idx = this.tsTryParseIndexSignature(member);
        if (idx) {
          classBody.body.push(idx);
          if (member.abstract) {
            this.raise(TSErrors2.IndexSignatureHasAbstract, {
              node: member
            });
          }
          if (member.accessibility) {
            this.raise(TSErrors2.IndexSignatureHasAccessibility, {
              node: member
            }, member.accessibility);
          }
          if (member.declare) {
            this.raise(TSErrors2.IndexSignatureHasDeclare, {
              node: member
            });
          }
          if (member.override) {
            this.raise(TSErrors2.IndexSignatureHasOverride, {
              node: member
            });
          }
          return;
        }
        if (!this.state.inAbstractClass && member.abstract) {
          this.raise(TSErrors2.NonAbstractClassHasAbstractMethod, {
            node: member
          });
        }
        if (member.override) {
          if (!state.hadSuperClass) {
            this.raise(TSErrors2.OverrideNotInSubClass, {
              node: member
            });
          }
        }
        super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
      }
      parsePostMemberNameModifiers(methodOrProp) {
        const optional = this.eat(17);
        if (optional)
          methodOrProp.optional = true;
        if (methodOrProp.readonly && this.match(10)) {
          this.raise(TSErrors2.ClassMethodHasReadonly, {
            node: methodOrProp
          });
        }
        if (methodOrProp.declare && this.match(10)) {
          this.raise(TSErrors2.ClassMethodHasDeclare, {
            node: methodOrProp
          });
        }
      }
      parseExpressionStatement(node2, expr) {
        const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node2, expr) : void 0;
        return decl || super.parseExpressionStatement(node2, expr);
      }
      shouldParseExportDeclaration() {
        if (this.tsIsDeclarationStart())
          return true;
        return super.shouldParseExportDeclaration();
      }
      parseConditional(expr, startPos, startLoc, refExpressionErrors) {
        if (!this.state.maybeInArrowParameters || !this.match(17)) {
          return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);
        }
        const result2 = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));
        if (!result2.node) {
          if (result2.error) {
            super.setOptionalParametersError(refExpressionErrors, result2.error);
          }
          return expr;
        }
        if (result2.error)
          this.state = result2.failState;
        return result2.node;
      }
      parseParenItem(node2, startPos, startLoc) {
        node2 = super.parseParenItem(node2, startPos, startLoc);
        if (this.eat(17)) {
          node2.optional = true;
          this.resetEndLocation(node2);
        }
        if (this.match(14)) {
          const typeCastNode = this.startNodeAt(startPos, startLoc);
          typeCastNode.expression = node2;
          typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
          return this.finishNode(typeCastNode, "TSTypeCastExpression");
        }
        return node2;
      }
      parseExportDeclaration(node2) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const isDeclare = this.eatContextual(121);
        if (isDeclare && (this.isContextual(121) || !this.shouldParseExportDeclaration())) {
          throw this.raise(TSErrors2.ExpectedAmbientAfterExportDeclare, {
            at: this.state.startLoc
          });
        }
        let declaration2;
        if (tokenIsIdentifier2(this.state.type)) {
          declaration2 = this.tsTryParseExportDeclaration();
        }
        if (!declaration2) {
          declaration2 = super.parseExportDeclaration(node2);
        }
        if (declaration2 && (declaration2.type === "TSInterfaceDeclaration" || declaration2.type === "TSTypeAliasDeclaration" || isDeclare)) {
          node2.exportKind = "type";
        }
        if (declaration2 && isDeclare) {
          this.resetStartLocation(declaration2, startPos, startLoc);
          declaration2.declare = true;
        }
        return declaration2;
      }
      parseClassId(node2, isStatement, optionalId) {
        if ((!isStatement || optionalId) && this.isContextual(110)) {
          return;
        }
        super.parseClassId(node2, isStatement, optionalId, node2.declare ? BIND_TS_AMBIENT2 : BIND_CLASS2);
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters)
          node2.typeParameters = typeParameters;
      }
      parseClassPropertyAnnotation(node2) {
        if (!node2.optional && this.eat(35)) {
          node2.definite = true;
        }
        const type = this.tsTryParseTypeAnnotation();
        if (type)
          node2.typeAnnotation = type;
      }
      parseClassProperty(node2) {
        this.parseClassPropertyAnnotation(node2);
        if (this.state.isAmbientContext && this.match(29)) {
          this.raise(TSErrors2.DeclareClassFieldHasInitializer, {
            at: this.state.startLoc
          });
        }
        if (node2.abstract && this.match(29)) {
          const {
            key
          } = node2;
          this.raise(TSErrors2.AbstractPropertyHasInitializer, {
            at: this.state.startLoc
          }, key.type === "Identifier" && !node2.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);
        }
        return super.parseClassProperty(node2);
      }
      parseClassPrivateProperty(node2) {
        if (node2.abstract) {
          this.raise(TSErrors2.PrivateElementHasAbstract, {
            node: node2
          });
        }
        if (node2.accessibility) {
          this.raise(TSErrors2.PrivateElementHasAccessibility, {
            node: node2
          }, node2.accessibility);
        }
        this.parseClassPropertyAnnotation(node2);
        return super.parseClassPrivateProperty(node2);
      }
      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters && isConstructor) {
          this.raise(TSErrors2.ConstructorHasTypeParameters, {
            node: typeParameters
          });
        }
        if (method.declare && (method.kind === "get" || method.kind === "set")) {
          this.raise(TSErrors2.DeclareAccessor, {
            node: method
          }, method.kind);
        }
        if (typeParameters)
          method.typeParameters = typeParameters;
        super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
      }
      pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters)
          method.typeParameters = typeParameters;
        super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
      }
      declareClassPrivateMethodInScope(node2, kind) {
        if (node2.type === "TSDeclareMethod")
          return;
        if (node2.type === "MethodDefinition" && !node2.value.body)
          return;
        super.declareClassPrivateMethodInScope(node2, kind);
      }
      parseClassSuper(node2) {
        super.parseClassSuper(node2);
        if (node2.superClass && (this.match(47) || this.match(51))) {
          node2.superTypeParameters = this.tsParseTypeArgumentsInExpression();
        }
        if (this.eatContextual(110)) {
          node2.implements = this.tsParseHeritageClause("implements");
        }
      }
      parseObjPropValue(prop, ...args) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters)
          prop.typeParameters = typeParameters;
        super.parseObjPropValue(prop, ...args);
      }
      parseFunctionParams(node2, allowModifiers) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters)
          node2.typeParameters = typeParameters;
        super.parseFunctionParams(node2, allowModifiers);
      }
      parseVarId(decl, kind) {
        super.parseVarId(decl, kind);
        if (decl.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35)) {
          decl.definite = true;
        }
        const type = this.tsTryParseTypeAnnotation();
        if (type) {
          decl.id.typeAnnotation = type;
          this.resetEndLocation(decl.id);
        }
      }
      parseAsyncArrowFromCallExpression(node2, call) {
        if (this.match(14)) {
          node2.returnType = this.tsParseTypeAnnotation();
        }
        return super.parseAsyncArrowFromCallExpression(node2, call);
      }
      parseMaybeAssign(...args) {
        var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;
        let state;
        let jsx3;
        let typeCast;
        if (this.hasPlugin("jsx") && (this.match(138) || this.match(47))) {
          state = this.state.clone();
          jsx3 = this.tryParse(() => super.parseMaybeAssign(...args), state);
          if (!jsx3.error)
            return jsx3.node;
          const {
            context
          } = this.state;
          const currentContext = context[context.length - 1];
          if (currentContext === types2.j_oTag || currentContext === types2.j_expr) {
            context.pop();
          }
        }
        if (!((_jsx = jsx3) != null && _jsx.error) && !this.match(47)) {
          return super.parseMaybeAssign(...args);
        }
        let typeParameters;
        state = state || this.state.clone();
        const arrow = this.tryParse((abort) => {
          var _expr$extra, _typeParameters;
          typeParameters = this.tsParseTypeParameters();
          const expr = super.parseMaybeAssign(...args);
          if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
            abort();
          }
          if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
            this.resetStartLocationFromNode(expr, typeParameters);
          }
          expr.typeParameters = typeParameters;
          return expr;
        }, state);
        if (!arrow.error && !arrow.aborted) {
          if (typeParameters)
            this.reportReservedArrowTypeParam(typeParameters);
          return arrow.node;
        }
        if (!jsx3) {
          assert2(!this.hasPlugin("jsx"));
          typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);
          if (!typeCast.error)
            return typeCast.node;
        }
        if ((_jsx2 = jsx3) != null && _jsx2.node) {
          this.state = jsx3.failState;
          return jsx3.node;
        }
        if (arrow.node) {
          this.state = arrow.failState;
          if (typeParameters)
            this.reportReservedArrowTypeParam(typeParameters);
          return arrow.node;
        }
        if ((_typeCast = typeCast) != null && _typeCast.node) {
          this.state = typeCast.failState;
          return typeCast.node;
        }
        if ((_jsx3 = jsx3) != null && _jsx3.thrown)
          throw jsx3.error;
        if (arrow.thrown)
          throw arrow.error;
        if ((_typeCast2 = typeCast) != null && _typeCast2.thrown)
          throw typeCast.error;
        throw ((_jsx4 = jsx3) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);
      }
      reportReservedArrowTypeParam(node2) {
        var _node$extra;
        if (node2.params.length === 1 && !((_node$extra = node2.extra) != null && _node$extra.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
          this.raise(TSErrors2.ReservedArrowTypeParam, {
            node: node2
          });
        }
      }
      parseMaybeUnary(refExpressionErrors) {
        if (!this.hasPlugin("jsx") && this.match(47)) {
          return this.tsParseTypeAssertion();
        } else {
          return super.parseMaybeUnary(refExpressionErrors);
        }
      }
      parseArrow(node2) {
        if (this.match(14)) {
          const result2 = this.tryParse((abort) => {
            const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
            if (this.canInsertSemicolon() || !this.match(19))
              abort();
            return returnType;
          });
          if (result2.aborted)
            return;
          if (!result2.thrown) {
            if (result2.error)
              this.state = result2.failState;
            node2.returnType = result2.node;
          }
        }
        return super.parseArrow(node2);
      }
      parseAssignableListItemTypes(param) {
        if (this.eat(17)) {
          if (param.type !== "Identifier" && !this.state.isAmbientContext && !this.state.inType) {
            this.raise(TSErrors2.PatternIsOptional, {
              node: param
            });
          }
          param.optional = true;
        }
        const type = this.tsTryParseTypeAnnotation();
        if (type)
          param.typeAnnotation = type;
        this.resetEndLocation(param);
        return param;
      }
      isAssignable(node2, isBinding) {
        switch (node2.type) {
          case "TSTypeCastExpression":
            return this.isAssignable(node2.expression, isBinding);
          case "TSParameterProperty":
            return true;
          default:
            return super.isAssignable(node2, isBinding);
        }
      }
      toAssignable(node2, isLHS = false) {
        switch (node2.type) {
          case "TSTypeCastExpression":
            return super.toAssignable(this.typeCastToParameter(node2), isLHS);
          case "TSParameterProperty":
            return super.toAssignable(node2, isLHS);
          case "ParenthesizedExpression":
            return this.toAssignableParenthesizedExpression(node2, isLHS);
          case "TSAsExpression":
          case "TSNonNullExpression":
          case "TSTypeAssertion":
            node2.expression = this.toAssignable(node2.expression, isLHS);
            return node2;
          default:
            return super.toAssignable(node2, isLHS);
        }
      }
      toAssignableParenthesizedExpression(node2, isLHS) {
        switch (node2.expression.type) {
          case "TSAsExpression":
          case "TSNonNullExpression":
          case "TSTypeAssertion":
          case "ParenthesizedExpression":
            node2.expression = this.toAssignable(node2.expression, isLHS);
            return node2;
          default:
            return super.toAssignable(node2, isLHS);
        }
      }
      checkLVal(expr, contextDescription, ...args) {
        var _expr$extra2;
        switch (expr.type) {
          case "TSTypeCastExpression":
            return;
          case "TSParameterProperty":
            this.checkLVal(expr.parameter, "parameter property", ...args);
            return;
          case "TSAsExpression":
          case "TSTypeAssertion":
            if (!args[0] && contextDescription !== "parenthesized expression" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {
              this.raise(ErrorMessages2.InvalidLhs, {
                node: expr
              }, contextDescription);
              break;
            }
            this.checkLVal(expr.expression, "parenthesized expression", ...args);
            return;
          case "TSNonNullExpression":
            this.checkLVal(expr.expression, contextDescription, ...args);
            return;
          default:
            super.checkLVal(expr, contextDescription, ...args);
            return;
        }
      }
      parseBindingAtom() {
        switch (this.state.type) {
          case 78:
            return this.parseIdentifier(true);
          default:
            return super.parseBindingAtom();
        }
      }
      parseMaybeDecoratorArguments(expr) {
        if (this.match(47) || this.match(51)) {
          const typeArguments = this.tsParseTypeArgumentsInExpression();
          if (this.match(10)) {
            const call = super.parseMaybeDecoratorArguments(expr);
            call.typeParameters = typeArguments;
            return call;
          }
          this.unexpected(null, 10);
        }
        return super.parseMaybeDecoratorArguments(expr);
      }
      checkCommaAfterRest(close) {
        if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {
          this.next();
          return false;
        } else {
          return super.checkCommaAfterRest(close);
        }
      }
      isClassMethod() {
        return this.match(47) || super.isClassMethod();
      }
      isClassProperty() {
        return this.match(35) || this.match(14) || super.isClassProperty();
      }
      parseMaybeDefault(...args) {
        const node2 = super.parseMaybeDefault(...args);
        if (node2.type === "AssignmentPattern" && node2.typeAnnotation && node2.right.start < node2.typeAnnotation.start) {
          this.raise(TSErrors2.TypeAnnotationAfterAssign, {
            node: node2.typeAnnotation
          });
        }
        return node2;
      }
      getTokenFromCode(code) {
        if (this.state.inType) {
          if (code === 62) {
            return this.finishOp(48, 1);
          }
          if (code === 60) {
            return this.finishOp(47, 1);
          }
        }
        return super.getTokenFromCode(code);
      }
      reScan_lt_gt() {
        const {
          type
        } = this.state;
        if (type === 47) {
          this.state.pos -= 1;
          this.readToken_lt();
        } else if (type === 48) {
          this.state.pos -= 1;
          this.readToken_gt();
        }
      }
      reScan_lt() {
        const {
          type
        } = this.state;
        if (type === 51) {
          this.state.pos -= 2;
          this.finishOp(47, 1);
          return 47;
        }
        return type;
      }
      toAssignableList(exprList) {
        for (let i = 0; i < exprList.length; i++) {
          const expr = exprList[i];
          if (!expr)
            continue;
          switch (expr.type) {
            case "TSTypeCastExpression":
              exprList[i] = this.typeCastToParameter(expr);
              break;
            case "TSAsExpression":
            case "TSTypeAssertion":
              if (!this.state.maybeInArrowParameters) {
                exprList[i] = this.typeCastToParameter(expr);
              } else {
                this.raise(TSErrors2.UnexpectedTypeCastInParameter, {
                  node: expr
                });
              }
              break;
          }
        }
        return super.toAssignableList(...arguments);
      }
      typeCastToParameter(node2) {
        node2.expression.typeAnnotation = node2.typeAnnotation;
        this.resetEndLocation(node2.expression, node2.typeAnnotation.loc.end);
        return node2.expression;
      }
      shouldParseArrow(params) {
        if (this.match(14)) {
          return params.every((expr) => this.isAssignable(expr, true));
        }
        return super.shouldParseArrow(params);
      }
      shouldParseAsyncArrow() {
        return this.match(14) || super.shouldParseAsyncArrow();
      }
      canHaveLeadingDecorator() {
        return super.canHaveLeadingDecorator() || this.isAbstractClass();
      }
      jsxParseOpeningElementAfterName(node2) {
        if (this.match(47) || this.match(51)) {
          const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
          if (typeArguments)
            node2.typeParameters = typeArguments;
        }
        return super.jsxParseOpeningElementAfterName(node2);
      }
      getGetterSetterExpectedParamCount(method) {
        const baseCount = super.getGetterSetterExpectedParamCount(method);
        const params = this.getObjectOrClassMethodParams(method);
        const firstParam = params[0];
        const hasContextParam = firstParam && this.isThisParam(firstParam);
        return hasContextParam ? baseCount + 1 : baseCount;
      }
      parseCatchClauseParam() {
        const param = super.parseCatchClauseParam();
        const type = this.tsTryParseTypeAnnotation();
        if (type) {
          param.typeAnnotation = type;
          this.resetEndLocation(param);
        }
        return param;
      }
      tsInAmbientContext(cb) {
        const oldIsAmbientContext = this.state.isAmbientContext;
        this.state.isAmbientContext = true;
        try {
          return cb();
        } finally {
          this.state.isAmbientContext = oldIsAmbientContext;
        }
      }
      parseClass(node2, ...args) {
        const oldInAbstractClass = this.state.inAbstractClass;
        this.state.inAbstractClass = !!node2.abstract;
        try {
          return super.parseClass(node2, ...args);
        } finally {
          this.state.inAbstractClass = oldInAbstractClass;
        }
      }
      tsParseAbstractDeclaration(node2) {
        if (this.match(80)) {
          node2.abstract = true;
          return this.parseClass(node2, true, false);
        } else if (this.isContextual(125)) {
          if (!this.hasFollowingLineBreak()) {
            node2.abstract = true;
            this.raise(TSErrors2.NonClassMethodPropertyHasAbstractModifer, {
              node: node2
            });
            this.next();
            return this.tsParseInterfaceDeclaration(node2);
          }
        } else {
          this.unexpected(null, 80);
        }
      }
      parseMethod(...args) {
        const method = super.parseMethod(...args);
        if (method.abstract) {
          const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;
          if (hasBody) {
            const {
              key
            } = method;
            this.raise(TSErrors2.AbstractMethodHasImplementation, {
              node: method
            }, key.type === "Identifier" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);
          }
        }
        return method;
      }
      tsParseTypeParameterName() {
        const typeName = this.parseIdentifier();
        return typeName.name;
      }
      shouldParseAsAmbientContext() {
        return !!this.getPluginOption("typescript", "dts");
      }
      parse() {
        if (this.shouldParseAsAmbientContext()) {
          this.state.isAmbientContext = true;
        }
        return super.parse();
      }
      getExpression() {
        if (this.shouldParseAsAmbientContext()) {
          this.state.isAmbientContext = true;
        }
        return super.getExpression();
      }
      parseExportSpecifier(node2, isString2, isInTypeExport, isMaybeTypeOnly) {
        if (!isString2 && isMaybeTypeOnly) {
          this.parseTypeOnlyImportExportSpecifier(node2, false, isInTypeExport);
          return this.finishNode(node2, "ExportSpecifier");
        }
        node2.exportKind = "value";
        return super.parseExportSpecifier(node2, isString2, isInTypeExport, isMaybeTypeOnly);
      }
      parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
        if (!importedIsString && isMaybeTypeOnly) {
          this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);
          return this.finishNode(specifier, "ImportSpecifier");
        }
        specifier.importKind = "value";
        return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);
      }
      parseTypeOnlyImportExportSpecifier(node2, isImport, isInTypeOnlyImportExport) {
        const leftOfAsKey = isImport ? "imported" : "local";
        const rightOfAsKey = isImport ? "local" : "exported";
        let leftOfAs = node2[leftOfAsKey];
        let rightOfAs;
        let hasTypeSpecifier = false;
        let canParseAsKeyword = true;
        const loc = leftOfAs.loc.start;
        if (this.isContextual(93)) {
          const firstAs = this.parseIdentifier();
          if (this.isContextual(93)) {
            const secondAs = this.parseIdentifier();
            if (tokenIsKeywordOrIdentifier2(this.state.type)) {
              hasTypeSpecifier = true;
              leftOfAs = firstAs;
              rightOfAs = this.parseIdentifier();
              canParseAsKeyword = false;
            } else {
              rightOfAs = secondAs;
              canParseAsKeyword = false;
            }
          } else if (tokenIsKeywordOrIdentifier2(this.state.type)) {
            canParseAsKeyword = false;
            rightOfAs = this.parseIdentifier();
          } else {
            hasTypeSpecifier = true;
            leftOfAs = firstAs;
          }
        } else if (tokenIsKeywordOrIdentifier2(this.state.type)) {
          hasTypeSpecifier = true;
          leftOfAs = this.parseIdentifier();
        }
        if (hasTypeSpecifier && isInTypeOnlyImportExport) {
          this.raise(isImport ? TSErrors2.TypeModifierIsUsedInTypeImports : TSErrors2.TypeModifierIsUsedInTypeExports, {
            at: loc
          });
        }
        node2[leftOfAsKey] = leftOfAs;
        node2[rightOfAsKey] = rightOfAs;
        const kindKey = isImport ? "importKind" : "exportKind";
        node2[kindKey] = hasTypeSpecifier ? "type" : "value";
        if (canParseAsKeyword && this.eatContextual(93)) {
          node2[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();
        }
        if (!node2[rightOfAsKey]) {
          node2[rightOfAsKey] = cloneIdentifier2(node2[leftOfAsKey]);
        }
        if (isImport) {
          this.checkLVal(node2[rightOfAsKey], "import specifier", BIND_LEXICAL2);
        }
      }
    };
    var PlaceholderErrors = makeErrorTemplates2({
      ClassNameIsRequired: "A class name is required."
    }, ErrorCodes2.SyntaxError, "placeholders");
    var placeholders2 = (superClass) => class extends superClass {
      parsePlaceholder(expectedNode) {
        if (this.match(140)) {
          const node2 = this.startNode();
          this.next();
          this.assertNoSpace("Unexpected space in placeholder.");
          node2.name = super.parseIdentifier(true);
          this.assertNoSpace("Unexpected space in placeholder.");
          this.expect(140);
          return this.finishPlaceholder(node2, expectedNode);
        }
      }
      finishPlaceholder(node2, expectedNode) {
        const isFinished = !!(node2.expectedNode && node2.type === "Placeholder");
        node2.expectedNode = expectedNode;
        return isFinished ? node2 : this.finishNode(node2, "Placeholder");
      }
      getTokenFromCode(code) {
        if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
          return this.finishOp(140, 2);
        }
        return super.getTokenFromCode(...arguments);
      }
      parseExprAtom() {
        return this.parsePlaceholder("Expression") || super.parseExprAtom(...arguments);
      }
      parseIdentifier() {
        return this.parsePlaceholder("Identifier") || super.parseIdentifier(...arguments);
      }
      checkReservedWord(word) {
        if (word !== void 0)
          super.checkReservedWord(...arguments);
      }
      parseBindingAtom() {
        return this.parsePlaceholder("Pattern") || super.parseBindingAtom(...arguments);
      }
      checkLVal(expr) {
        if (expr.type !== "Placeholder")
          super.checkLVal(...arguments);
      }
      toAssignable(node2) {
        if (node2 && node2.type === "Placeholder" && node2.expectedNode === "Expression") {
          node2.expectedNode = "Pattern";
          return node2;
        }
        return super.toAssignable(...arguments);
      }
      isLet(context) {
        if (super.isLet(context)) {
          return true;
        }
        if (!this.isContextual(99)) {
          return false;
        }
        if (context)
          return false;
        const nextToken = this.lookahead();
        if (nextToken.type === 140) {
          return true;
        }
        return false;
      }
      verifyBreakContinue(node2) {
        if (node2.label && node2.label.type === "Placeholder")
          return;
        super.verifyBreakContinue(...arguments);
      }
      parseExpressionStatement(node2, expr) {
        if (expr.type !== "Placeholder" || expr.extra && expr.extra.parenthesized) {
          return super.parseExpressionStatement(...arguments);
        }
        if (this.match(14)) {
          const stmt = node2;
          stmt.label = this.finishPlaceholder(expr, "Identifier");
          this.next();
          stmt.body = this.parseStatement("label");
          return this.finishNode(stmt, "LabeledStatement");
        }
        this.semicolon();
        node2.name = expr.name;
        return this.finishPlaceholder(node2, "Statement");
      }
      parseBlock() {
        return this.parsePlaceholder("BlockStatement") || super.parseBlock(...arguments);
      }
      parseFunctionId() {
        return this.parsePlaceholder("Identifier") || super.parseFunctionId(...arguments);
      }
      parseClass(node2, isStatement, optionalId) {
        const type = isStatement ? "ClassDeclaration" : "ClassExpression";
        this.next();
        this.takeDecorators(node2);
        const oldStrict = this.state.strict;
        const placeholder = this.parsePlaceholder("Identifier");
        if (placeholder) {
          if (this.match(81) || this.match(140) || this.match(5)) {
            node2.id = placeholder;
          } else if (optionalId || !isStatement) {
            node2.id = null;
            node2.body = this.finishPlaceholder(placeholder, "ClassBody");
            return this.finishNode(node2, type);
          } else {
            throw this.raise(PlaceholderErrors.ClassNameIsRequired, {
              at: this.state.startLoc
            });
          }
        } else {
          this.parseClassId(node2, isStatement, optionalId);
        }
        this.parseClassSuper(node2);
        node2.body = this.parsePlaceholder("ClassBody") || this.parseClassBody(!!node2.superClass, oldStrict);
        return this.finishNode(node2, type);
      }
      parseExport(node2) {
        const placeholder = this.parsePlaceholder("Identifier");
        if (!placeholder)
          return super.parseExport(...arguments);
        if (!this.isContextual(97) && !this.match(12)) {
          node2.specifiers = [];
          node2.source = null;
          node2.declaration = this.finishPlaceholder(placeholder, "Declaration");
          return this.finishNode(node2, "ExportNamedDeclaration");
        }
        this.expectPlugin("exportDefaultFrom");
        const specifier = this.startNode();
        specifier.exported = placeholder;
        node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
        return super.parseExport(node2);
      }
      isExportDefaultSpecifier() {
        if (this.match(65)) {
          const next = this.nextTokenStart();
          if (this.isUnparsedContextual(next, "from")) {
            if (this.input.startsWith(tokenLabelName2(140), this.nextTokenStartSince(next + 4))) {
              return true;
            }
          }
        }
        return super.isExportDefaultSpecifier();
      }
      maybeParseExportDefaultSpecifier(node2) {
        if (node2.specifiers && node2.specifiers.length > 0) {
          return true;
        }
        return super.maybeParseExportDefaultSpecifier(...arguments);
      }
      checkExport(node2) {
        const {
          specifiers
        } = node2;
        if (specifiers != null && specifiers.length) {
          node2.specifiers = specifiers.filter((node3) => node3.exported.type === "Placeholder");
        }
        super.checkExport(node2);
        node2.specifiers = specifiers;
      }
      parseImport(node2) {
        const placeholder = this.parsePlaceholder("Identifier");
        if (!placeholder)
          return super.parseImport(...arguments);
        node2.specifiers = [];
        if (!this.isContextual(97) && !this.match(12)) {
          node2.source = this.finishPlaceholder(placeholder, "StringLiteral");
          this.semicolon();
          return this.finishNode(node2, "ImportDeclaration");
        }
        const specifier = this.startNodeAtNode(placeholder);
        specifier.local = placeholder;
        this.finishNode(specifier, "ImportDefaultSpecifier");
        node2.specifiers.push(specifier);
        if (this.eat(12)) {
          const hasStarImport = this.maybeParseStarImportSpecifier(node2);
          if (!hasStarImport)
            this.parseNamedImportSpecifiers(node2);
        }
        this.expectContextual(97);
        node2.source = this.parseImportSource();
        this.semicolon();
        return this.finishNode(node2, "ImportDeclaration");
      }
      parseImportSource() {
        return this.parsePlaceholder("StringLiteral") || super.parseImportSource(...arguments);
      }
    };
    var v8intrinsic2 = (superClass) => class extends superClass {
      parseV8Intrinsic() {
        if (this.match(54)) {
          const v8IntrinsicStartLoc = this.state.startLoc;
          const node2 = this.startNode();
          this.next();
          if (tokenIsIdentifier2(this.state.type)) {
            const name = this.parseIdentifierName(this.state.start);
            const identifier = this.createIdentifier(node2, name);
            identifier.type = "V8IntrinsicIdentifier";
            if (this.match(10)) {
              return identifier;
            }
          }
          this.unexpected(v8IntrinsicStartLoc);
        }
      }
      parseExprAtom() {
        return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);
      }
    };
    function hasPlugin2(plugins, expectedConfig) {
      const [expectedName, expectedOptions] = typeof expectedConfig === "string" ? [expectedConfig, {}] : expectedConfig;
      const expectedKeys = Object.keys(expectedOptions);
      const expectedOptionsIsEmpty = expectedKeys.length === 0;
      return plugins.some((p) => {
        if (typeof p === "string") {
          return expectedOptionsIsEmpty && p === expectedName;
        } else {
          const [pluginName, pluginOptions] = p;
          if (pluginName !== expectedName) {
            return false;
          }
          for (const key of expectedKeys) {
            if (pluginOptions[key] !== expectedOptions[key]) {
              return false;
            }
          }
          return true;
        }
      });
    }
    function getPluginOption2(plugins, name, option) {
      const plugin2 = plugins.find((plugin3) => {
        if (Array.isArray(plugin3)) {
          return plugin3[0] === name;
        } else {
          return plugin3 === name;
        }
      });
      if (plugin2 && Array.isArray(plugin2)) {
        return plugin2[1][option];
      }
      return null;
    }
    var PIPELINE_PROPOSALS2 = ["minimal", "fsharp", "hack", "smart"];
    var TOPIC_TOKENS2 = ["^^", "@@", "^", "%", "#"];
    var RECORD_AND_TUPLE_SYNTAX_TYPES2 = ["hash", "bar"];
    function validatePlugins2(plugins) {
      if (hasPlugin2(plugins, "decorators")) {
        if (hasPlugin2(plugins, "decorators-legacy")) {
          throw new Error("Cannot use the decorators and decorators-legacy plugin together");
        }
        const decoratorsBeforeExport = getPluginOption2(plugins, "decorators", "decoratorsBeforeExport");
        if (decoratorsBeforeExport == null) {
          throw new Error("The 'decorators' plugin requires a 'decoratorsBeforeExport' option, whose value must be a boolean. If you are migrating from Babylon/Babel 6 or want to use the old decorators proposal, you should use the 'decorators-legacy' plugin instead of 'decorators'.");
        } else if (typeof decoratorsBeforeExport !== "boolean") {
          throw new Error("'decoratorsBeforeExport' must be a boolean.");
        }
      }
      if (hasPlugin2(plugins, "flow") && hasPlugin2(plugins, "typescript")) {
        throw new Error("Cannot combine flow and typescript plugins.");
      }
      if (hasPlugin2(plugins, "placeholders") && hasPlugin2(plugins, "v8intrinsic")) {
        throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
      }
      if (hasPlugin2(plugins, "pipelineOperator")) {
        const proposal = getPluginOption2(plugins, "pipelineOperator", "proposal");
        if (!PIPELINE_PROPOSALS2.includes(proposal)) {
          const proposalList = PIPELINE_PROPOSALS2.map((p) => `"${p}"`).join(", ");
          throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
        }
        const tupleSyntaxIsHash = hasPlugin2(plugins, ["recordAndTuple", {
          syntaxType: "hash"
        }]);
        if (proposal === "hack") {
          if (hasPlugin2(plugins, "placeholders")) {
            throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
          }
          if (hasPlugin2(plugins, "v8intrinsic")) {
            throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
          }
          const topicToken = getPluginOption2(plugins, "pipelineOperator", "topicToken");
          if (!TOPIC_TOKENS2.includes(topicToken)) {
            const tokenList = TOPIC_TOKENS2.map((t) => `"${t}"`).join(", ");
            throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
          }
          if (topicToken === "#" && tupleSyntaxIsHash) {
            throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
          }
        } else if (proposal === "smart" && tupleSyntaxIsHash) {
          throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
        }
      }
      if (hasPlugin2(plugins, "moduleAttributes")) {
        {
          if (hasPlugin2(plugins, "importAssertions")) {
            throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");
          }
          const moduleAttributesVerionPluginOption = getPluginOption2(plugins, "moduleAttributes", "version");
          if (moduleAttributesVerionPluginOption !== "may-2020") {
            throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
          }
        }
      }
      if (hasPlugin2(plugins, "recordAndTuple") && !RECORD_AND_TUPLE_SYNTAX_TYPES2.includes(getPluginOption2(plugins, "recordAndTuple", "syntaxType"))) {
        throw new Error("'recordAndTuple' requires 'syntaxType' option whose value should be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES2.map((p) => `'${p}'`).join(", "));
      }
      if (hasPlugin2(plugins, "asyncDoExpressions") && !hasPlugin2(plugins, "doExpressions")) {
        const error2 = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
        error2.missingPlugins = "doExpressions";
        throw error2;
      }
    }
    var mixinPlugins2 = {
      estree: estree2,
      jsx: jsx2,
      flow: flow2,
      typescript: typescript2,
      v8intrinsic: v8intrinsic2,
      placeholders: placeholders2
    };
    var mixinPluginNames2 = Object.keys(mixinPlugins2);
    var defaultOptions2 = {
      sourceType: "script",
      sourceFilename: void 0,
      startColumn: 0,
      startLine: 1,
      allowAwaitOutsideFunction: false,
      allowReturnOutsideFunction: false,
      allowImportExportEverywhere: false,
      allowSuperOutsideMethod: false,
      allowUndeclaredExports: false,
      plugins: [],
      strictMode: null,
      ranges: false,
      tokens: false,
      createParenthesizedExpressions: false,
      errorRecovery: false,
      attachComment: true
    };
    function getOptions2(opts) {
      const options = {};
      for (const key of Object.keys(defaultOptions2)) {
        options[key] = opts && opts[key] != null ? opts[key] : defaultOptions2[key];
      }
      return options;
    }
    var unwrapParenthesizedExpression2 = (node2) => {
      return node2.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression2(node2.expression) : node2;
    };
    var LValParser2 = class extends NodeUtils2 {
      toAssignable(node2, isLHS = false) {
        var _node$extra, _node$extra3;
        let parenthesized = void 0;
        if (node2.type === "ParenthesizedExpression" || (_node$extra = node2.extra) != null && _node$extra.parenthesized) {
          parenthesized = unwrapParenthesizedExpression2(node2);
          if (isLHS) {
            if (parenthesized.type === "Identifier") {
              this.expressionScope.recordParenthesizedIdentifierError(ErrorMessages2.InvalidParenthesizedAssignment, node2.loc.start);
            } else if (parenthesized.type !== "MemberExpression") {
              this.raise(ErrorMessages2.InvalidParenthesizedAssignment, {
                node: node2
              });
            }
          } else {
            this.raise(ErrorMessages2.InvalidParenthesizedAssignment, {
              node: node2
            });
          }
        }
        switch (node2.type) {
          case "Identifier":
          case "ObjectPattern":
          case "ArrayPattern":
          case "AssignmentPattern":
          case "RestElement":
            break;
          case "ObjectExpression":
            node2.type = "ObjectPattern";
            for (let i = 0, length2 = node2.properties.length, last2 = length2 - 1; i < length2; i++) {
              var _node$extra2;
              const prop = node2.properties[i];
              const isLast = i === last2;
              this.toAssignableObjectExpressionProp(prop, isLast, isLHS);
              if (isLast && prop.type === "RestElement" && (_node$extra2 = node2.extra) != null && _node$extra2.trailingCommaLoc) {
                this.raise(ErrorMessages2.RestTrailingComma, {
                  at: node2.extra.trailingCommaLoc
                });
              }
            }
            break;
          case "ObjectProperty": {
            const {
              key,
              value
            } = node2;
            if (this.isPrivateName(key)) {
              this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
            }
            this.toAssignable(value, isLHS);
            break;
          }
          case "SpreadElement": {
            this.checkToRestConversion(node2);
            node2.type = "RestElement";
            const arg = node2.argument;
            this.toAssignable(arg, isLHS);
            break;
          }
          case "ArrayExpression":
            node2.type = "ArrayPattern";
            this.toAssignableList(node2.elements, (_node$extra3 = node2.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
            break;
          case "AssignmentExpression":
            if (node2.operator !== "=") {
              this.raise(ErrorMessages2.MissingEqInAssignment, {
                at: node2.left.loc.end
              });
            }
            node2.type = "AssignmentPattern";
            delete node2.operator;
            this.toAssignable(node2.left, isLHS);
            break;
          case "ParenthesizedExpression":
            this.toAssignable(parenthesized, isLHS);
            break;
        }
        return node2;
      }
      toAssignableObjectExpressionProp(prop, isLast, isLHS) {
        if (prop.type === "ObjectMethod") {
          this.raise(prop.kind === "get" || prop.kind === "set" ? ErrorMessages2.PatternHasAccessor : ErrorMessages2.PatternHasMethod, {
            node: prop.key
          });
        } else if (prop.type === "SpreadElement" && !isLast) {
          this.raise(ErrorMessages2.RestTrailingComma, {
            node: prop
          });
        } else {
          this.toAssignable(prop, isLHS);
        }
      }
      toAssignableList(exprList, trailingCommaLoc, isLHS) {
        let end = exprList.length;
        if (end) {
          const last2 = exprList[end - 1];
          if ((last2 == null ? void 0 : last2.type) === "RestElement") {
            --end;
          } else if ((last2 == null ? void 0 : last2.type) === "SpreadElement") {
            last2.type = "RestElement";
            let arg = last2.argument;
            this.toAssignable(arg, isLHS);
            arg = unwrapParenthesizedExpression2(arg);
            if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern" && arg.type !== "ObjectPattern") {
              this.unexpected(arg.start);
            }
            if (trailingCommaLoc) {
              this.raise(ErrorMessages2.RestTrailingComma, {
                at: trailingCommaLoc
              });
            }
            --end;
          }
        }
        for (let i = 0; i < end; i++) {
          const elt = exprList[i];
          if (elt) {
            this.toAssignable(elt, isLHS);
            if (elt.type === "RestElement") {
              this.raise(ErrorMessages2.RestTrailingComma, {
                node: elt
              });
            }
          }
        }
        return exprList;
      }
      isAssignable(node2, isBinding) {
        switch (node2.type) {
          case "Identifier":
          case "ObjectPattern":
          case "ArrayPattern":
          case "AssignmentPattern":
          case "RestElement":
            return true;
          case "ObjectExpression": {
            const last2 = node2.properties.length - 1;
            return node2.properties.every((prop, i) => {
              return prop.type !== "ObjectMethod" && (i === last2 || prop.type !== "SpreadElement") && this.isAssignable(prop);
            });
          }
          case "ObjectProperty":
            return this.isAssignable(node2.value);
          case "SpreadElement":
            return this.isAssignable(node2.argument);
          case "ArrayExpression":
            return node2.elements.every((element) => element === null || this.isAssignable(element));
          case "AssignmentExpression":
            return node2.operator === "=";
          case "ParenthesizedExpression":
            return this.isAssignable(node2.expression);
          case "MemberExpression":
          case "OptionalMemberExpression":
            return !isBinding;
          default:
            return false;
        }
      }
      toReferencedList(exprList, isParenthesizedExpr) {
        return exprList;
      }
      toReferencedListDeep(exprList, isParenthesizedExpr) {
        this.toReferencedList(exprList, isParenthesizedExpr);
        for (const expr of exprList) {
          if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
            this.toReferencedListDeep(expr.elements);
          }
        }
      }
      parseSpread(refExpressionErrors, refNeedsArrowPos) {
        const node2 = this.startNode();
        this.next();
        node2.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0, refNeedsArrowPos);
        return this.finishNode(node2, "SpreadElement");
      }
      parseRestBinding() {
        const node2 = this.startNode();
        this.next();
        node2.argument = this.parseBindingAtom();
        return this.finishNode(node2, "RestElement");
      }
      parseBindingAtom() {
        switch (this.state.type) {
          case 0: {
            const node2 = this.startNode();
            this.next();
            node2.elements = this.parseBindingList(3, 93, true);
            return this.finishNode(node2, "ArrayPattern");
          }
          case 5:
            return this.parseObjectLike(8, true);
        }
        return this.parseIdentifier();
      }
      parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {
        const elts = [];
        let first = true;
        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
          }
          if (allowEmpty && this.match(12)) {
            elts.push(null);
          } else if (this.eat(close)) {
            break;
          } else if (this.match(21)) {
            elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));
            if (!this.checkCommaAfterRest(closeCharCode)) {
              this.expect(close);
              break;
            }
          } else {
            const decorators = [];
            if (this.match(26) && this.hasPlugin("decorators")) {
              this.raise(ErrorMessages2.UnsupportedParameterDecorator, {
                at: this.state.startLoc
              });
            }
            while (this.match(26)) {
              decorators.push(this.parseDecorator());
            }
            elts.push(this.parseAssignableListItem(allowModifiers, decorators));
          }
        }
        return elts;
      }
      parseBindingRestProperty(prop) {
        this.next();
        prop.argument = this.parseIdentifier();
        this.checkCommaAfterRest(125);
        return this.finishNode(prop, "RestElement");
      }
      parseBindingProperty() {
        const prop = this.startNode();
        const {
          type,
          start: startPos,
          startLoc
        } = this.state;
        if (type === 21) {
          return this.parseBindingRestProperty(prop);
        } else if (type === 134) {
          this.expectPlugin("destructuringPrivate", startLoc);
          this.classScope.usePrivateName(this.state.value, startLoc);
          prop.key = this.parsePrivateName();
        } else {
          this.parsePropertyName(prop);
        }
        prop.method = false;
        this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);
        return prop;
      }
      parseAssignableListItem(allowModifiers, decorators) {
        const left = this.parseMaybeDefault();
        this.parseAssignableListItemTypes(left);
        const elt = this.parseMaybeDefault(left.start, left.loc.start, left);
        if (decorators.length) {
          left.decorators = decorators;
        }
        return elt;
      }
      parseAssignableListItemTypes(param) {
        return param;
      }
      parseMaybeDefault(startPos, startLoc, left) {
        var _startLoc, _startPos, _left;
        startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;
        startPos = (_startPos = startPos) != null ? _startPos : this.state.start;
        left = (_left = left) != null ? _left : this.parseBindingAtom();
        if (!this.eat(29))
          return left;
        const node2 = this.startNodeAt(startPos, startLoc);
        node2.left = left;
        node2.right = this.parseMaybeAssignAllowIn();
        return this.finishNode(node2, "AssignmentPattern");
      }
      checkLVal(expr, contextDescription, bindingType = BIND_NONE2, checkClashes, disallowLetBinding, strictModeChanged = false) {
        switch (expr.type) {
          case "Identifier": {
            const {
              name
            } = expr;
            if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord2(name, this.inModule) : isStrictBindOnlyReservedWord2(name))) {
              this.raise(bindingType === BIND_NONE2 ? ErrorMessages2.StrictEvalArguments : ErrorMessages2.StrictEvalArgumentsBinding, {
                node: expr
              }, name);
            }
            if (checkClashes) {
              if (checkClashes.has(name)) {
                this.raise(ErrorMessages2.ParamDupe, {
                  node: expr
                });
              } else {
                checkClashes.add(name);
              }
            }
            if (disallowLetBinding && name === "let") {
              this.raise(ErrorMessages2.LetInLexicalBinding, {
                node: expr
              });
            }
            if (!(bindingType & BIND_NONE2)) {
              this.scope.declareName(name, bindingType, expr.loc.start);
            }
            break;
          }
          case "MemberExpression":
            if (bindingType !== BIND_NONE2) {
              this.raise(ErrorMessages2.InvalidPropertyBindingPattern, {
                node: expr
              });
            }
            break;
          case "ObjectPattern":
            for (let prop of expr.properties) {
              if (this.isObjectProperty(prop))
                prop = prop.value;
              else if (this.isObjectMethod(prop))
                continue;
              this.checkLVal(prop, "object destructuring pattern", bindingType, checkClashes, disallowLetBinding);
            }
            break;
          case "ArrayPattern":
            for (const elem of expr.elements) {
              if (elem) {
                this.checkLVal(elem, "array destructuring pattern", bindingType, checkClashes, disallowLetBinding);
              }
            }
            break;
          case "AssignmentPattern":
            this.checkLVal(expr.left, "assignment pattern", bindingType, checkClashes);
            break;
          case "RestElement":
            this.checkLVal(expr.argument, "rest element", bindingType, checkClashes);
            break;
          case "ParenthesizedExpression":
            this.checkLVal(expr.expression, "parenthesized expression", bindingType, checkClashes);
            break;
          default: {
            this.raise(bindingType === BIND_NONE2 ? ErrorMessages2.InvalidLhs : ErrorMessages2.InvalidLhsBinding, {
              node: expr
            }, contextDescription);
          }
        }
      }
      checkToRestConversion(node2) {
        if (node2.argument.type !== "Identifier" && node2.argument.type !== "MemberExpression") {
          this.raise(ErrorMessages2.InvalidRestAssignmentPattern, {
            node: node2.argument
          });
        }
      }
      checkCommaAfterRest(close) {
        if (!this.match(12)) {
          return false;
        }
        this.raise(this.lookaheadCharCode() === close ? ErrorMessages2.RestTrailingComma : ErrorMessages2.ElementAfterRest, {
          at: this.state.startLoc
        });
        return true;
      }
    };
    var invalidHackPipeBodies2 = /* @__PURE__ */ new Map([["ArrowFunctionExpression", "arrow function"], ["AssignmentExpression", "assignment"], ["ConditionalExpression", "conditional"], ["YieldExpression", "yield"]]);
    var ExpressionParser2 = class extends LValParser2 {
      checkProto(prop, isRecord, protoRef, refExpressionErrors) {
        if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
          return;
        }
        const key = prop.key;
        const name = key.type === "Identifier" ? key.name : key.value;
        if (name === "__proto__") {
          if (isRecord) {
            this.raise(ErrorMessages2.RecordNoProto, {
              node: key
            });
            return;
          }
          if (protoRef.used) {
            if (refExpressionErrors) {
              if (refExpressionErrors.doubleProtoLoc === null) {
                refExpressionErrors.doubleProtoLoc = key.loc.start;
              }
            } else {
              this.raise(ErrorMessages2.DuplicateProto, {
                node: key
              });
            }
          }
          protoRef.used = true;
        }
      }
      shouldExitDescending(expr, potentialArrowAt) {
        return expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt;
      }
      getExpression() {
        this.enterInitialScopes();
        this.nextToken();
        const expr = this.parseExpression();
        if (!this.match(135)) {
          this.unexpected();
        }
        this.finalizeRemainingComments();
        expr.comments = this.state.comments;
        expr.errors = this.state.errors;
        if (this.options.tokens) {
          expr.tokens = this.tokens;
        }
        return expr;
      }
      parseExpression(disallowIn, refExpressionErrors) {
        if (disallowIn) {
          return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
        }
        return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
      }
      parseExpressionBase(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const expr = this.parseMaybeAssign(refExpressionErrors);
        if (this.match(12)) {
          const node2 = this.startNodeAt(startPos, startLoc);
          node2.expressions = [expr];
          while (this.eat(12)) {
            node2.expressions.push(this.parseMaybeAssign(refExpressionErrors));
          }
          this.toReferencedList(node2.expressions);
          return this.finishNode(node2, "SequenceExpression");
        }
        return expr;
      }
      parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
        return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
      }
      parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
        return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
      }
      setOptionalParametersError(refExpressionErrors, resultError) {
        var _resultError$loc;
        refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;
      }
      parseMaybeAssign(refExpressionErrors, afterLeftParse) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        if (this.isContextual(105)) {
          if (this.prodParam.hasYield) {
            let left2 = this.parseYield();
            if (afterLeftParse) {
              left2 = afterLeftParse.call(this, left2, startPos, startLoc);
            }
            return left2;
          }
        }
        let ownExpressionErrors;
        if (refExpressionErrors) {
          ownExpressionErrors = false;
        } else {
          refExpressionErrors = new ExpressionErrors2();
          ownExpressionErrors = true;
        }
        const {
          type
        } = this.state;
        if (type === 10 || tokenIsIdentifier2(type)) {
          this.state.potentialArrowAt = this.state.start;
        }
        let left = this.parseMaybeConditional(refExpressionErrors);
        if (afterLeftParse) {
          left = afterLeftParse.call(this, left, startPos, startLoc);
        }
        if (tokenIsAssignment2(this.state.type)) {
          const node2 = this.startNodeAt(startPos, startLoc);
          const operator = this.state.value;
          node2.operator = operator;
          if (this.match(29)) {
            node2.left = this.toAssignable(left, true);
            if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startPos) {
              refExpressionErrors.doubleProtoLoc = null;
            }
            if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startPos) {
              refExpressionErrors.shorthandAssignLoc = null;
            }
            if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startPos) {
              this.checkDestructuringPrivate(refExpressionErrors);
              refExpressionErrors.privateKeyLoc = null;
            }
          } else {
            node2.left = left;
          }
          this.checkLVal(left, "assignment expression");
          this.next();
          node2.right = this.parseMaybeAssign();
          return this.finishNode(node2, "AssignmentExpression");
        } else if (ownExpressionErrors) {
          this.checkExpressionErrors(refExpressionErrors, true);
        }
        return left;
      }
      parseMaybeConditional(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseExprOps(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) {
          return expr;
        }
        return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);
      }
      parseConditional(expr, startPos, startLoc, refExpressionErrors) {
        if (this.eat(17)) {
          const node2 = this.startNodeAt(startPos, startLoc);
          node2.test = expr;
          node2.consequent = this.parseMaybeAssignAllowIn();
          this.expect(14);
          node2.alternate = this.parseMaybeAssign();
          return this.finishNode(node2, "ConditionalExpression");
        }
        return expr;
      }
      parseMaybeUnaryOrPrivate(refExpressionErrors) {
        return this.match(134) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
      }
      parseExprOps(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) {
          return expr;
        }
        return this.parseExprOp(expr, startPos, startLoc, -1);
      }
      parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
        if (this.isPrivateName(left)) {
          const value = this.getPrivateNameSV(left);
          if (minPrec >= tokenOperatorPrecedence2(58) || !this.prodParam.hasIn || !this.match(58)) {
            this.raise(ErrorMessages2.PrivateInExpectedIn, {
              node: left
            }, value);
          }
          this.classScope.usePrivateName(value, left.loc.start);
        }
        const op = this.state.type;
        if (tokenIsOperator2(op) && (this.prodParam.hasIn || !this.match(58))) {
          let prec = tokenOperatorPrecedence2(op);
          if (prec > minPrec) {
            if (op === 39) {
              this.expectPlugin("pipelineOperator");
              if (this.state.inFSharpPipelineDirectBody) {
                return left;
              }
              this.checkPipelineAtInfixOperator(left, leftStartLoc);
            }
            const node2 = this.startNodeAt(leftStartPos, leftStartLoc);
            node2.left = left;
            node2.operator = this.state.value;
            const logical = op === 41 || op === 42;
            const coalesce = op === 40;
            if (coalesce) {
              prec = tokenOperatorPrecedence2(42);
            }
            this.next();
            if (op === 39 && this.hasPlugin(["pipelineOperator", {
              proposal: "minimal"
            }])) {
              if (this.state.type === 96 && this.prodParam.hasAwait) {
                throw this.raise(ErrorMessages2.UnexpectedAwaitAfterPipelineBody, {
                  at: this.state.startLoc
                });
              }
            }
            node2.right = this.parseExprOpRightExpr(op, prec);
            this.finishNode(node2, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
            const nextOp = this.state.type;
            if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {
              throw this.raise(ErrorMessages2.MixingCoalesceWithLogical, {
                at: this.state.startLoc
              });
            }
            return this.parseExprOp(node2, leftStartPos, leftStartLoc, minPrec);
          }
        }
        return left;
      }
      parseExprOpRightExpr(op, prec) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        switch (op) {
          case 39:
            switch (this.getPluginOption("pipelineOperator", "proposal")) {
              case "hack":
                return this.withTopicBindingContext(() => {
                  return this.parseHackPipeBody();
                });
              case "smart":
                return this.withTopicBindingContext(() => {
                  if (this.prodParam.hasYield && this.isContextual(105)) {
                    throw this.raise(ErrorMessages2.PipeBodyIsTighter, {
                      at: this.state.startLoc
                    }, this.state.value);
                  }
                  return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);
                });
              case "fsharp":
                return this.withSoloAwaitPermittingContext(() => {
                  return this.parseFSharpPipelineBody(prec);
                });
            }
          default:
            return this.parseExprOpBaseRightExpr(op, prec);
        }
      }
      parseExprOpBaseRightExpr(op, prec) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative2(op) ? prec - 1 : prec);
      }
      parseHackPipeBody() {
        var _body$extra;
        const {
          startLoc
        } = this.state;
        const body = this.parseMaybeAssign();
        if (invalidHackPipeBodies2.has(body.type) && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {
          this.raise(ErrorMessages2.PipeUnparenthesizedBody, {
            at: startLoc
          }, invalidHackPipeBodies2.get(body.type));
        }
        if (!this.topicReferenceWasUsedInCurrentContext()) {
          this.raise(ErrorMessages2.PipeTopicUnused, {
            at: startLoc
          });
        }
        return body;
      }
      checkExponentialAfterUnary(node2) {
        if (this.match(57)) {
          this.raise(ErrorMessages2.UnexpectedTokenUnaryExponentiation, {
            node: node2.argument
          });
        }
      }
      parseMaybeUnary(refExpressionErrors, sawUnary) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const isAwait = this.isContextual(96);
        if (isAwait && this.isAwaitAllowed()) {
          this.next();
          const expr2 = this.parseAwait(startPos, startLoc);
          if (!sawUnary)
            this.checkExponentialAfterUnary(expr2);
          return expr2;
        }
        const update = this.match(34);
        const node2 = this.startNode();
        if (tokenIsPrefix2(this.state.type)) {
          node2.operator = this.state.value;
          node2.prefix = true;
          if (this.match(72)) {
            this.expectPlugin("throwExpressions");
          }
          const isDelete = this.match(89);
          this.next();
          node2.argument = this.parseMaybeUnary(null, true);
          this.checkExpressionErrors(refExpressionErrors, true);
          if (this.state.strict && isDelete) {
            const arg = node2.argument;
            if (arg.type === "Identifier") {
              this.raise(ErrorMessages2.StrictDelete, {
                node: node2
              });
            } else if (this.hasPropertyAsPrivateName(arg)) {
              this.raise(ErrorMessages2.DeletePrivateField, {
                node: node2
              });
            }
          }
          if (!update) {
            if (!sawUnary)
              this.checkExponentialAfterUnary(node2);
            return this.finishNode(node2, "UnaryExpression");
          }
        }
        const expr = this.parseUpdate(node2, update, refExpressionErrors);
        if (isAwait) {
          const {
            type
          } = this.state;
          const startsExpr3 = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression2(type) : tokenCanStartExpression2(type) && !this.match(54);
          if (startsExpr3 && !this.isAmbiguousAwait()) {
            this.raiseOverwrite(startLoc, ErrorMessages2.AwaitNotInAsyncContext);
            return this.parseAwait(startPos, startLoc);
          }
        }
        return expr;
      }
      parseUpdate(node2, update, refExpressionErrors) {
        if (update) {
          this.checkLVal(node2.argument, "prefix operation");
          return this.finishNode(node2, "UpdateExpression");
        }
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let expr = this.parseExprSubscripts(refExpressionErrors);
        if (this.checkExpressionErrors(refExpressionErrors, false))
          return expr;
        while (tokenIsPostfix2(this.state.type) && !this.canInsertSemicolon()) {
          const node3 = this.startNodeAt(startPos, startLoc);
          node3.operator = this.state.value;
          node3.prefix = false;
          node3.argument = expr;
          this.checkLVal(expr, "postfix operation");
          this.next();
          expr = this.finishNode(node3, "UpdateExpression");
        }
        return expr;
      }
      parseExprSubscripts(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseExprAtom(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) {
          return expr;
        }
        return this.parseSubscripts(expr, startPos, startLoc);
      }
      parseSubscripts(base2, startPos, startLoc, noCalls) {
        const state = {
          optionalChainMember: false,
          maybeAsyncArrow: this.atPossibleAsyncArrow(base2),
          stop: false
        };
        do {
          base2 = this.parseSubscript(base2, startPos, startLoc, noCalls, state);
          state.maybeAsyncArrow = false;
        } while (!state.stop);
        return base2;
      }
      parseSubscript(base2, startPos, startLoc, noCalls, state) {
        const {
          type
        } = this.state;
        if (!noCalls && type === 15) {
          return this.parseBind(base2, startPos, startLoc, noCalls, state);
        } else if (tokenIsTemplate(type)) {
          return this.parseTaggedTemplateExpression(base2, startPos, startLoc, state);
        }
        let optional = false;
        if (type === 18) {
          if (noCalls && this.lookaheadCharCode() === 40) {
            state.stop = true;
            return base2;
          }
          state.optionalChainMember = optional = true;
          this.next();
        }
        if (!noCalls && this.match(10)) {
          return this.parseCoverCallAndAsyncArrowHead(base2, startPos, startLoc, state, optional);
        } else {
          const computed = this.eat(0);
          if (computed || optional || this.eat(16)) {
            return this.parseMember(base2, startPos, startLoc, state, computed, optional);
          } else {
            state.stop = true;
            return base2;
          }
        }
      }
      parseMember(base2, startPos, startLoc, state, computed, optional) {
        const node2 = this.startNodeAt(startPos, startLoc);
        node2.object = base2;
        node2.computed = computed;
        if (computed) {
          node2.property = this.parseExpression();
          this.expect(3);
        } else if (this.match(134)) {
          if (base2.type === "Super") {
            this.raise(ErrorMessages2.SuperPrivateField, {
              at: startLoc
            });
          }
          this.classScope.usePrivateName(this.state.value, this.state.startLoc);
          node2.property = this.parsePrivateName();
        } else {
          node2.property = this.parseIdentifier(true);
        }
        if (state.optionalChainMember) {
          node2.optional = optional;
          return this.finishNode(node2, "OptionalMemberExpression");
        } else {
          return this.finishNode(node2, "MemberExpression");
        }
      }
      parseBind(base2, startPos, startLoc, noCalls, state) {
        const node2 = this.startNodeAt(startPos, startLoc);
        node2.object = base2;
        this.next();
        node2.callee = this.parseNoCallExpr();
        state.stop = true;
        return this.parseSubscripts(this.finishNode(node2, "BindExpression"), startPos, startLoc, noCalls);
      }
      parseCoverCallAndAsyncArrowHead(base2, startPos, startLoc, state, optional) {
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        let refExpressionErrors = null;
        this.state.maybeInArrowParameters = true;
        this.next();
        let node2 = this.startNodeAt(startPos, startLoc);
        node2.callee = base2;
        const {
          maybeAsyncArrow,
          optionalChainMember
        } = state;
        if (maybeAsyncArrow) {
          this.expressionScope.enter(newAsyncArrowScope2());
          refExpressionErrors = new ExpressionErrors2();
        }
        if (optionalChainMember) {
          node2.optional = optional;
        }
        if (optional) {
          node2.arguments = this.parseCallExpressionArguments(11);
        } else {
          node2.arguments = this.parseCallExpressionArguments(11, base2.type === "Import", base2.type !== "Super", node2, refExpressionErrors);
        }
        this.finishCallExpression(node2, optionalChainMember);
        if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
          state.stop = true;
          this.checkDestructuringPrivate(refExpressionErrors);
          this.expressionScope.validateAsPattern();
          this.expressionScope.exit();
          node2 = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node2);
        } else {
          if (maybeAsyncArrow) {
            this.checkExpressionErrors(refExpressionErrors, true);
            this.expressionScope.exit();
          }
          this.toReferencedArguments(node2);
        }
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return node2;
      }
      toReferencedArguments(node2, isParenthesizedExpr) {
        this.toReferencedListDeep(node2.arguments, isParenthesizedExpr);
      }
      parseTaggedTemplateExpression(base2, startPos, startLoc, state) {
        const node2 = this.startNodeAt(startPos, startLoc);
        node2.tag = base2;
        node2.quasi = this.parseTemplate(true);
        if (state.optionalChainMember) {
          this.raise(ErrorMessages2.OptionalChainingNoTemplate, {
            at: startLoc
          });
        }
        return this.finishNode(node2, "TaggedTemplateExpression");
      }
      atPossibleAsyncArrow(base2) {
        return base2.type === "Identifier" && base2.name === "async" && this.state.lastTokEndLoc.index === base2.end && !this.canInsertSemicolon() && base2.end - base2.start === 5 && base2.start === this.state.potentialArrowAt;
      }
      finishCallExpression(node2, optional) {
        if (node2.callee.type === "Import") {
          if (node2.arguments.length === 2) {
            {
              if (!this.hasPlugin("moduleAttributes")) {
                this.expectPlugin("importAssertions");
              }
            }
          }
          if (node2.arguments.length === 0 || node2.arguments.length > 2) {
            this.raise(ErrorMessages2.ImportCallArity, {
              node: node2
            }, this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? "one or two arguments" : "one argument");
          } else {
            for (const arg of node2.arguments) {
              if (arg.type === "SpreadElement") {
                this.raise(ErrorMessages2.ImportCallSpreadArgument, {
                  node: arg
                });
              }
            }
          }
        }
        return this.finishNode(node2, optional ? "OptionalCallExpression" : "CallExpression");
      }
      parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
        const elts = [];
        let first = true;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
            if (this.match(close)) {
              if (dynamicImport && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes")) {
                this.raise(ErrorMessages2.ImportCallArgumentTrailingComma, {
                  at: this.state.lastTokStartLoc
                });
              }
              if (nodeForExtra) {
                this.addTrailingCommaExtraToNode(nodeForExtra);
              }
              this.next();
              break;
            }
          }
          elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
        }
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return elts;
      }
      shouldParseAsyncArrow() {
        return this.match(19) && !this.canInsertSemicolon();
      }
      parseAsyncArrowFromCallExpression(node2, call) {
        var _call$extra;
        this.resetPreviousNodeTrailingComments(call);
        this.expect(19);
        this.parseArrowExpression(node2, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);
        if (call.innerComments) {
          setInnerComments2(node2, call.innerComments);
        }
        if (call.callee.trailingComments) {
          setInnerComments2(node2, call.callee.trailingComments);
        }
        return node2;
      }
      parseNoCallExpr() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
      }
      parseExprAtom(refExpressionErrors) {
        let node2;
        const {
          type
        } = this.state;
        switch (type) {
          case 79:
            return this.parseSuper();
          case 83:
            node2 = this.startNode();
            this.next();
            if (this.match(16)) {
              return this.parseImportMetaProperty(node2);
            }
            if (!this.match(10)) {
              this.raise(ErrorMessages2.UnsupportedImport, {
                at: this.state.lastTokStartLoc
              });
            }
            return this.finishNode(node2, "Import");
          case 78:
            node2 = this.startNode();
            this.next();
            return this.finishNode(node2, "ThisExpression");
          case 90: {
            return this.parseDo(this.startNode(), false);
          }
          case 56:
          case 31: {
            this.readRegexp();
            return this.parseRegExpLiteral(this.state.value);
          }
          case 130:
            return this.parseNumericLiteral(this.state.value);
          case 131:
            return this.parseBigIntLiteral(this.state.value);
          case 132:
            return this.parseDecimalLiteral(this.state.value);
          case 129:
            return this.parseStringLiteral(this.state.value);
          case 84:
            return this.parseNullLiteral();
          case 85:
            return this.parseBooleanLiteral(true);
          case 86:
            return this.parseBooleanLiteral(false);
          case 10: {
            const canBeArrow = this.state.potentialArrowAt === this.state.start;
            return this.parseParenAndDistinguishExpression(canBeArrow);
          }
          case 2:
          case 1: {
            return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
          }
          case 0: {
            return this.parseArrayLike(3, true, false, refExpressionErrors);
          }
          case 6:
          case 7: {
            return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
          }
          case 5: {
            return this.parseObjectLike(8, false, false, refExpressionErrors);
          }
          case 68:
            return this.parseFunctionOrFunctionSent();
          case 26:
            this.parseDecorators();
          case 80:
            node2 = this.startNode();
            this.takeDecorators(node2);
            return this.parseClass(node2, false);
          case 77:
            return this.parseNewOrNewTarget();
          case 25:
          case 24:
            return this.parseTemplate(false);
          case 15: {
            node2 = this.startNode();
            this.next();
            node2.object = null;
            const callee = node2.callee = this.parseNoCallExpr();
            if (callee.type === "MemberExpression") {
              return this.finishNode(node2, "BindExpression");
            } else {
              throw this.raise(ErrorMessages2.UnsupportedBind, {
                node: callee
              });
            }
          }
          case 134: {
            this.raise(ErrorMessages2.PrivateInExpectedIn, {
              at: this.state.startLoc
            }, this.state.value);
            return this.parsePrivateName();
          }
          case 33: {
            return this.parseTopicReferenceThenEqualsSign(54, "%");
          }
          case 32: {
            return this.parseTopicReferenceThenEqualsSign(44, "^");
          }
          case 37:
          case 38: {
            return this.parseTopicReference("hack");
          }
          case 44:
          case 54:
          case 27: {
            const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
            if (pipeProposal) {
              return this.parseTopicReference(pipeProposal);
            } else {
              throw this.unexpected();
            }
          }
          case 47: {
            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
            if (isIdentifierStart2(lookaheadCh) || lookaheadCh === 62) {
              this.expectOnePlugin(["jsx", "flow", "typescript"]);
              break;
            } else {
              throw this.unexpected();
            }
          }
          default:
            if (tokenIsIdentifier2(type)) {
              if (this.isContextual(123) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {
                return this.parseModuleExpression();
              }
              const canBeArrow = this.state.potentialArrowAt === this.state.start;
              const containsEsc = this.state.containsEsc;
              const id2 = this.parseIdentifier();
              if (!containsEsc && id2.name === "async" && !this.canInsertSemicolon()) {
                const {
                  type: type2
                } = this.state;
                if (type2 === 68) {
                  this.resetPreviousNodeTrailingComments(id2);
                  this.next();
                  return this.parseFunction(this.startNodeAtNode(id2), void 0, true);
                } else if (tokenIsIdentifier2(type2)) {
                  if (this.lookaheadCharCode() === 61) {
                    return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id2));
                  } else {
                    return id2;
                  }
                } else if (type2 === 90) {
                  this.resetPreviousNodeTrailingComments(id2);
                  return this.parseDo(this.startNodeAtNode(id2), true);
                }
              }
              if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {
                this.next();
                return this.parseArrowExpression(this.startNodeAtNode(id2), [id2], false);
              }
              return id2;
            } else {
              throw this.unexpected();
            }
        }
      }
      parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
        const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
        if (pipeProposal) {
          this.state.type = topicTokenType;
          this.state.value = topicTokenValue;
          this.state.pos--;
          this.state.end--;
          this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);
          return this.parseTopicReference(pipeProposal);
        } else {
          throw this.unexpected();
        }
      }
      parseTopicReference(pipeProposal) {
        const node2 = this.startNode();
        const startLoc = this.state.startLoc;
        const tokenType = this.state.type;
        this.next();
        return this.finishTopicReference(node2, startLoc, pipeProposal, tokenType);
      }
      finishTopicReference(node2, startLoc, pipeProposal, tokenType) {
        if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
          const nodeType = pipeProposal === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";
          if (!this.topicReferenceIsAllowedInCurrentContext()) {
            this.raise(pipeProposal === "smart" ? ErrorMessages2.PrimaryTopicNotAllowed : ErrorMessages2.PipeTopicUnbound, {
              at: startLoc
            });
          }
          this.registerTopicReference();
          return this.finishNode(node2, nodeType);
        } else {
          throw this.raise(ErrorMessages2.PipeTopicUnconfiguredToken, {
            at: startLoc
          }, tokenLabelName2(tokenType));
        }
      }
      testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
        switch (pipeProposal) {
          case "hack": {
            return this.hasPlugin(["pipelineOperator", {
              topicToken: tokenLabelName2(tokenType)
            }]);
          }
          case "smart":
            return tokenType === 27;
          default:
            throw this.raise(ErrorMessages2.PipeTopicRequiresHackPipes, {
              at: startLoc
            });
        }
      }
      parseAsyncArrowUnaryFunction(node2) {
        this.prodParam.enter(functionFlags2(true, this.prodParam.hasYield));
        const params = [this.parseIdentifier()];
        this.prodParam.exit();
        if (this.hasPrecedingLineBreak()) {
          this.raise(ErrorMessages2.LineTerminatorBeforeArrow, {
            at: this.state.curPosition()
          });
        }
        this.expect(19);
        this.parseArrowExpression(node2, params, true);
        return node2;
      }
      parseDo(node2, isAsync) {
        this.expectPlugin("doExpressions");
        if (isAsync) {
          this.expectPlugin("asyncDoExpressions");
        }
        node2.async = isAsync;
        this.next();
        const oldLabels = this.state.labels;
        this.state.labels = [];
        if (isAsync) {
          this.prodParam.enter(PARAM_AWAIT2);
          node2.body = this.parseBlock();
          this.prodParam.exit();
        } else {
          node2.body = this.parseBlock();
        }
        this.state.labels = oldLabels;
        return this.finishNode(node2, "DoExpression");
      }
      parseSuper() {
        const node2 = this.startNode();
        this.next();
        if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {
          this.raise(ErrorMessages2.SuperNotAllowed, {
            node: node2
          });
        } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {
          this.raise(ErrorMessages2.UnexpectedSuper, {
            node: node2
          });
        }
        if (!this.match(10) && !this.match(0) && !this.match(16)) {
          this.raise(ErrorMessages2.UnsupportedSuper, {
            node: node2
          });
        }
        return this.finishNode(node2, "Super");
      }
      parsePrivateName() {
        const node2 = this.startNode();
        const id2 = this.startNodeAt(this.state.start + 1, new Position3(this.state.curLine, this.state.start + 1 - this.state.lineStart, this.state.start + 1));
        const name = this.state.value;
        this.next();
        node2.id = this.createIdentifier(id2, name);
        return this.finishNode(node2, "PrivateName");
      }
      parseFunctionOrFunctionSent() {
        const node2 = this.startNode();
        this.next();
        if (this.prodParam.hasYield && this.match(16)) {
          const meta = this.createIdentifier(this.startNodeAtNode(node2), "function");
          this.next();
          if (this.match(102)) {
            this.expectPlugin("functionSent");
          } else if (!this.hasPlugin("functionSent")) {
            this.unexpected();
          }
          return this.parseMetaProperty(node2, meta, "sent");
        }
        return this.parseFunction(node2);
      }
      parseMetaProperty(node2, meta, propertyName) {
        node2.meta = meta;
        const containsEsc = this.state.containsEsc;
        node2.property = this.parseIdentifier(true);
        if (node2.property.name !== propertyName || containsEsc) {
          this.raise(ErrorMessages2.UnsupportedMetaProperty, {
            node: node2.property
          }, meta.name, propertyName);
        }
        return this.finishNode(node2, "MetaProperty");
      }
      parseImportMetaProperty(node2) {
        const id2 = this.createIdentifier(this.startNodeAtNode(node2), "import");
        this.next();
        if (this.isContextual(100)) {
          if (!this.inModule) {
            this.raise(SourceTypeModuleErrorMessages2.ImportMetaOutsideModule, {
              node: id2
            });
          }
          this.sawUnambiguousESM = true;
        }
        return this.parseMetaProperty(node2, id2, "meta");
      }
      parseLiteralAtNode(value, type, node2) {
        this.addExtra(node2, "rawValue", value);
        this.addExtra(node2, "raw", this.input.slice(node2.start, this.state.end));
        node2.value = value;
        this.next();
        return this.finishNode(node2, type);
      }
      parseLiteral(value, type) {
        const node2 = this.startNode();
        return this.parseLiteralAtNode(value, type, node2);
      }
      parseStringLiteral(value) {
        return this.parseLiteral(value, "StringLiteral");
      }
      parseNumericLiteral(value) {
        return this.parseLiteral(value, "NumericLiteral");
      }
      parseBigIntLiteral(value) {
        return this.parseLiteral(value, "BigIntLiteral");
      }
      parseDecimalLiteral(value) {
        return this.parseLiteral(value, "DecimalLiteral");
      }
      parseRegExpLiteral(value) {
        const node2 = this.parseLiteral(value.value, "RegExpLiteral");
        node2.pattern = value.pattern;
        node2.flags = value.flags;
        return node2;
      }
      parseBooleanLiteral(value) {
        const node2 = this.startNode();
        node2.value = value;
        this.next();
        return this.finishNode(node2, "BooleanLiteral");
      }
      parseNullLiteral() {
        const node2 = this.startNode();
        this.next();
        return this.finishNode(node2, "NullLiteral");
      }
      parseParenAndDistinguishExpression(canBeArrow) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let val;
        this.next();
        this.expressionScope.enter(newArrowHeadScope2());
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.maybeInArrowParameters = true;
        this.state.inFSharpPipelineDirectBody = false;
        const innerStartPos = this.state.start;
        const innerStartLoc = this.state.startLoc;
        const exprList = [];
        const refExpressionErrors = new ExpressionErrors2();
        let first = true;
        let spreadStartLoc;
        let optionalCommaStartLoc;
        while (!this.match(11)) {
          if (first) {
            first = false;
          } else {
            this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);
            if (this.match(11)) {
              optionalCommaStartLoc = this.state.startLoc;
              break;
            }
          }
          if (this.match(21)) {
            const spreadNodeStartPos = this.state.start;
            const spreadNodeStartLoc = this.state.startLoc;
            spreadStartLoc = this.state.startLoc;
            exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));
            if (!this.checkCommaAfterRest(41)) {
              break;
            }
          } else {
            exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
          }
        }
        const innerEndLoc = this.state.lastTokEndLoc;
        this.expect(11);
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        let arrowNode = this.startNodeAt(startPos, startLoc);
        if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
          this.checkDestructuringPrivate(refExpressionErrors);
          this.expressionScope.validateAsPattern();
          this.expressionScope.exit();
          this.parseArrowExpression(arrowNode, exprList, false);
          return arrowNode;
        }
        this.expressionScope.exit();
        if (!exprList.length) {
          this.unexpected(this.state.lastTokStartLoc);
        }
        if (optionalCommaStartLoc)
          this.unexpected(optionalCommaStartLoc);
        if (spreadStartLoc)
          this.unexpected(spreadStartLoc);
        this.checkExpressionErrors(refExpressionErrors, true);
        this.toReferencedListDeep(exprList, true);
        if (exprList.length > 1) {
          val = this.startNodeAt(innerStartPos, innerStartLoc);
          val.expressions = exprList;
          this.finishNode(val, "SequenceExpression");
          this.resetEndLocation(val, innerEndLoc);
        } else {
          val = exprList[0];
        }
        if (!this.options.createParenthesizedExpressions) {
          this.addExtra(val, "parenthesized", true);
          this.addExtra(val, "parenStart", startPos);
          this.takeSurroundingComments(val, startPos, this.state.lastTokEndLoc.index);
          return val;
        }
        const parenExpression = this.startNodeAt(startPos, startLoc);
        parenExpression.expression = val;
        this.finishNode(parenExpression, "ParenthesizedExpression");
        return parenExpression;
      }
      shouldParseArrow(params) {
        return !this.canInsertSemicolon();
      }
      parseArrow(node2) {
        if (this.eat(19)) {
          return node2;
        }
      }
      parseParenItem(node2, startPos, startLoc) {
        return node2;
      }
      parseNewOrNewTarget() {
        const node2 = this.startNode();
        this.next();
        if (this.match(16)) {
          const meta = this.createIdentifier(this.startNodeAtNode(node2), "new");
          this.next();
          const metaProp = this.parseMetaProperty(node2, meta, "target");
          if (!this.scope.inNonArrowFunction && !this.scope.inClass) {
            this.raise(ErrorMessages2.UnexpectedNewTarget, {
              node: metaProp
            });
          }
          return metaProp;
        }
        return this.parseNew(node2);
      }
      parseNew(node2) {
        node2.callee = this.parseNoCallExpr();
        if (node2.callee.type === "Import") {
          this.raise(ErrorMessages2.ImportCallNotNewExpression, {
            node: node2.callee
          });
        } else if (this.isOptionalChain(node2.callee)) {
          this.raise(ErrorMessages2.OptionalChainingNoNew, {
            at: this.state.lastTokEndLoc
          });
        } else if (this.eat(18)) {
          this.raise(ErrorMessages2.OptionalChainingNoNew, {
            at: this.state.startLoc
          });
        }
        this.parseNewArguments(node2);
        return this.finishNode(node2, "NewExpression");
      }
      parseNewArguments(node2) {
        if (this.eat(10)) {
          const args = this.parseExprList(11);
          this.toReferencedList(args);
          node2.arguments = args;
        } else {
          node2.arguments = [];
        }
      }
      parseTemplateElement(isTagged) {
        const {
          start,
          startLoc,
          end,
          value
        } = this.state;
        const elemStart = start + 1;
        const elem = this.startNodeAt(elemStart, createPositionWithColumnOffset(startLoc, 1));
        if (value === null) {
          if (!isTagged) {
            this.raise(ErrorMessages2.InvalidEscapeSequenceTemplate, {
              at: createPositionWithColumnOffset(startLoc, 2)
            });
          }
        }
        const isTail = this.match(24);
        const endOffset = isTail ? -1 : -2;
        const elemEnd = end + endOffset;
        elem.value = {
          raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"),
          cooked: value === null ? null : value.slice(1, endOffset)
        };
        elem.tail = isTail;
        this.next();
        this.finishNode(elem, "TemplateElement");
        this.resetEndLocation(elem, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));
        return elem;
      }
      parseTemplate(isTagged) {
        const node2 = this.startNode();
        node2.expressions = [];
        let curElt = this.parseTemplateElement(isTagged);
        node2.quasis = [curElt];
        while (!curElt.tail) {
          node2.expressions.push(this.parseTemplateSubstitution());
          this.readTemplateContinuation();
          node2.quasis.push(curElt = this.parseTemplateElement(isTagged));
        }
        return this.finishNode(node2, "TemplateLiteral");
      }
      parseTemplateSubstitution() {
        return this.parseExpression();
      }
      parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
        if (isRecord) {
          this.expectPlugin("recordAndTuple");
        }
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const propHash = /* @__PURE__ */ Object.create(null);
        let first = true;
        const node2 = this.startNode();
        node2.properties = [];
        this.next();
        while (!this.match(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
            if (this.match(close)) {
              this.addTrailingCommaExtraToNode(node2);
              break;
            }
          }
          let prop;
          if (isPattern) {
            prop = this.parseBindingProperty();
          } else {
            prop = this.parsePropertyDefinition(refExpressionErrors);
            this.checkProto(prop, isRecord, propHash, refExpressionErrors);
          }
          if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {
            this.raise(ErrorMessages2.InvalidRecordProperty, {
              node: prop
            });
          }
          if (prop.shorthand) {
            this.addExtra(prop, "shorthand", true);
          }
          node2.properties.push(prop);
        }
        this.next();
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        let type = "ObjectExpression";
        if (isPattern) {
          type = "ObjectPattern";
        } else if (isRecord) {
          type = "RecordExpression";
        }
        return this.finishNode(node2, type);
      }
      addTrailingCommaExtraToNode(node2) {
        this.addExtra(node2, "trailingComma", this.state.lastTokStart);
        this.addExtra(node2, "trailingCommaLoc", this.state.lastTokStartLoc, false);
      }
      maybeAsyncOrAccessorProp(prop) {
        return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
      }
      parsePropertyDefinition(refExpressionErrors) {
        let decorators = [];
        if (this.match(26)) {
          if (this.hasPlugin("decorators")) {
            this.raise(ErrorMessages2.UnsupportedPropertyDecorator, {
              at: this.state.startLoc
            });
          }
          while (this.match(26)) {
            decorators.push(this.parseDecorator());
          }
        }
        const prop = this.startNode();
        let isAsync = false;
        let isAccessor = false;
        let startPos;
        let startLoc;
        if (this.match(21)) {
          if (decorators.length)
            this.unexpected();
          return this.parseSpread();
        }
        if (decorators.length) {
          prop.decorators = decorators;
          decorators = [];
        }
        prop.method = false;
        if (refExpressionErrors) {
          startPos = this.state.start;
          startLoc = this.state.startLoc;
        }
        let isGenerator = this.eat(55);
        this.parsePropertyNamePrefixOperator(prop);
        const containsEsc = this.state.containsEsc;
        const key = this.parsePropertyName(prop, refExpressionErrors);
        if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
          const keyName = key.name;
          if (keyName === "async" && !this.hasPrecedingLineBreak()) {
            isAsync = true;
            this.resetPreviousNodeTrailingComments(key);
            isGenerator = this.eat(55);
            this.parsePropertyName(prop);
          }
          if (keyName === "get" || keyName === "set") {
            isAccessor = true;
            this.resetPreviousNodeTrailingComments(key);
            prop.kind = keyName;
            if (this.match(55)) {
              isGenerator = true;
              this.raise(ErrorMessages2.AccessorIsGenerator, {
                at: this.state.curPosition()
              }, keyName);
              this.next();
            }
            this.parsePropertyName(prop);
          }
        }
        this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
        return prop;
      }
      getGetterSetterExpectedParamCount(method) {
        return method.kind === "get" ? 0 : 1;
      }
      getObjectOrClassMethodParams(method) {
        return method.params;
      }
      checkGetterSetterParams(method) {
        var _params;
        const paramCount = this.getGetterSetterExpectedParamCount(method);
        const params = this.getObjectOrClassMethodParams(method);
        if (params.length !== paramCount) {
          this.raise(method.kind === "get" ? ErrorMessages2.BadGetterArity : ErrorMessages2.BadSetterArity, {
            node: method
          });
        }
        if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {
          this.raise(ErrorMessages2.BadSetterRestParameter, {
            node: method
          });
        }
      }
      parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
        if (isAccessor) {
          this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
          this.checkGetterSetterParams(prop);
          return prop;
        }
        if (isAsync || isGenerator || this.match(10)) {
          if (isPattern)
            this.unexpected();
          prop.kind = "method";
          prop.method = true;
          return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
        }
      }
      parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
        prop.shorthand = false;
        if (this.eat(14)) {
          prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
          return this.finishNode(prop, "ObjectProperty");
        }
        if (!prop.computed && prop.key.type === "Identifier") {
          this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);
          if (isPattern) {
            prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier2(prop.key));
          } else if (this.match(29)) {
            const shorthandAssignLoc = this.state.startLoc;
            if (refExpressionErrors != null) {
              if (refExpressionErrors.shorthandAssignLoc === null) {
                refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;
              }
            } else {
              this.raise(ErrorMessages2.InvalidCoverInitializedName, {
                at: shorthandAssignLoc
              });
            }
            prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier2(prop.key));
          } else {
            prop.value = cloneIdentifier2(prop.key);
          }
          prop.shorthand = true;
          return this.finishNode(prop, "ObjectProperty");
        }
      }
      parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
        const node2 = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
        if (!node2)
          this.unexpected();
        return node2;
      }
      parsePropertyName(prop, refExpressionErrors) {
        if (this.eat(0)) {
          prop.computed = true;
          prop.key = this.parseMaybeAssignAllowIn();
          this.expect(3);
        } else {
          const {
            type,
            value
          } = this.state;
          let key;
          if (tokenIsKeywordOrIdentifier2(type)) {
            key = this.parseIdentifier(true);
          } else {
            switch (type) {
              case 130:
                key = this.parseNumericLiteral(value);
                break;
              case 129:
                key = this.parseStringLiteral(value);
                break;
              case 131:
                key = this.parseBigIntLiteral(value);
                break;
              case 132:
                key = this.parseDecimalLiteral(value);
                break;
              case 134: {
                const privateKeyLoc = this.state.startLoc;
                if (refExpressionErrors != null) {
                  if (refExpressionErrors.privateKeyLoc === null) {
                    refExpressionErrors.privateKeyLoc = privateKeyLoc;
                  }
                } else {
                  this.raise(ErrorMessages2.UnexpectedPrivateField, {
                    at: privateKeyLoc
                  });
                }
                key = this.parsePrivateName();
                break;
              }
              default:
                throw this.unexpected();
            }
          }
          prop.key = key;
          if (type !== 134) {
            prop.computed = false;
          }
        }
        return prop.key;
      }
      initFunction(node2, isAsync) {
        node2.id = null;
        node2.generator = false;
        node2.async = !!isAsync;
      }
      parseMethod(node2, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
        this.initFunction(node2, isAsync);
        node2.generator = !!isGenerator;
        const allowModifiers = isConstructor;
        this.scope.enter(SCOPE_FUNCTION2 | SCOPE_SUPER2 | (inClassScope ? SCOPE_CLASS2 : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER2 : 0));
        this.prodParam.enter(functionFlags2(isAsync, node2.generator));
        this.parseFunctionParams(node2, allowModifiers);
        this.parseFunctionBodyAndFinish(node2, type, true);
        this.prodParam.exit();
        this.scope.exit();
        return node2;
      }
      parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
        if (isTuple) {
          this.expectPlugin("recordAndTuple");
        }
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const node2 = this.startNode();
        this.next();
        node2.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node2);
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return this.finishNode(node2, isTuple ? "TupleExpression" : "ArrayExpression");
      }
      parseArrowExpression(node2, params, isAsync, trailingCommaLoc) {
        this.scope.enter(SCOPE_FUNCTION2 | SCOPE_ARROW2);
        let flags = functionFlags2(isAsync, false);
        if (!this.match(5) && this.prodParam.hasIn) {
          flags |= PARAM_IN2;
        }
        this.prodParam.enter(flags);
        this.initFunction(node2, isAsync);
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        if (params) {
          this.state.maybeInArrowParameters = true;
          this.setArrowFunctionParameters(node2, params, trailingCommaLoc);
        }
        this.state.maybeInArrowParameters = false;
        this.parseFunctionBody(node2, true);
        this.prodParam.exit();
        this.scope.exit();
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return this.finishNode(node2, "ArrowFunctionExpression");
      }
      setArrowFunctionParameters(node2, params, trailingCommaLoc) {
        node2.params = this.toAssignableList(params, trailingCommaLoc, false);
      }
      parseFunctionBodyAndFinish(node2, type, isMethod = false) {
        this.parseFunctionBody(node2, false, isMethod);
        this.finishNode(node2, type);
      }
      parseFunctionBody(node2, allowExpression, isMethod = false) {
        const isExpression = allowExpression && !this.match(5);
        this.expressionScope.enter(newExpressionScope2());
        if (isExpression) {
          node2.body = this.parseMaybeAssign();
          this.checkParams(node2, false, allowExpression, false);
        } else {
          const oldStrict = this.state.strict;
          const oldLabels = this.state.labels;
          this.state.labels = [];
          this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN2);
          node2.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
            const nonSimple = !this.isSimpleParamList(node2.params);
            if (hasStrictModeDirective && nonSimple) {
              const errorOrigin = (node2.kind === "method" || node2.kind === "constructor") && !!node2.key ? {
                at: node2.key.loc.end
              } : {
                node: node2
              };
              this.raise(ErrorMessages2.IllegalLanguageModeDirective, errorOrigin);
            }
            const strictModeChanged = !oldStrict && this.state.strict;
            this.checkParams(node2, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);
            if (this.state.strict && node2.id) {
              this.checkLVal(node2.id, "function name", BIND_OUTSIDE2, void 0, void 0, strictModeChanged);
            }
          });
          this.prodParam.exit();
          this.state.labels = oldLabels;
        }
        this.expressionScope.exit();
      }
      isSimpleParamList(params) {
        for (let i = 0, len = params.length; i < len; i++) {
          if (params[i].type !== "Identifier")
            return false;
        }
        return true;
      }
      checkParams(node2, allowDuplicates, isArrowFunction, strictModeChanged = true) {
        const checkClashes = /* @__PURE__ */ new Set();
        for (const param of node2.params) {
          this.checkLVal(param, "function parameter list", BIND_VAR2, allowDuplicates ? null : checkClashes, void 0, strictModeChanged);
        }
      }
      parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
        const elts = [];
        let first = true;
        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
            if (this.match(close)) {
              if (nodeForExtra) {
                this.addTrailingCommaExtraToNode(nodeForExtra);
              }
              this.next();
              break;
            }
          }
          elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
        }
        return elts;
      }
      parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
        let elt;
        if (this.match(12)) {
          if (!allowEmpty) {
            this.raise(ErrorMessages2.UnexpectedToken, {
              at: this.state.curPosition()
            }, ",");
          }
          elt = null;
        } else if (this.match(21)) {
          const spreadNodeStartPos = this.state.start;
          const spreadNodeStartLoc = this.state.startLoc;
          elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);
        } else if (this.match(17)) {
          this.expectPlugin("partialApplication");
          if (!allowPlaceholder) {
            this.raise(ErrorMessages2.UnexpectedArgumentPlaceholder, {
              at: this.state.startLoc
            });
          }
          const node2 = this.startNode();
          this.next();
          elt = this.finishNode(node2, "ArgumentPlaceholder");
        } else {
          elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
        }
        return elt;
      }
      parseIdentifier(liberal) {
        const node2 = this.startNode();
        const name = this.parseIdentifierName(node2.start, liberal);
        return this.createIdentifier(node2, name);
      }
      createIdentifier(node2, name) {
        node2.name = name;
        node2.loc.identifierName = name;
        return this.finishNode(node2, "Identifier");
      }
      parseIdentifierName(pos, liberal) {
        let name;
        const {
          startLoc,
          type
        } = this.state;
        if (tokenIsKeywordOrIdentifier2(type)) {
          name = this.state.value;
        } else {
          throw this.unexpected();
        }
        const tokenIsKeyword3 = tokenKeywordOrIdentifierIsKeyword2(type);
        if (liberal) {
          if (tokenIsKeyword3) {
            this.replaceToken(128);
          }
        } else {
          this.checkReservedWord(name, startLoc, tokenIsKeyword3, false);
        }
        this.next();
        return name;
      }
      checkReservedWord(word, startLoc, checkKeywords, isBinding) {
        if (word.length > 10) {
          return;
        }
        if (!canBeReservedWord2(word)) {
          return;
        }
        if (word === "yield") {
          if (this.prodParam.hasYield) {
            this.raise(ErrorMessages2.YieldBindingIdentifier, {
              at: startLoc
            });
            return;
          }
        } else if (word === "await") {
          if (this.prodParam.hasAwait) {
            this.raise(ErrorMessages2.AwaitBindingIdentifier, {
              at: startLoc
            });
            return;
          }
          if (this.scope.inStaticBlock) {
            this.raise(ErrorMessages2.AwaitBindingIdentifierInStaticBlock, {
              at: startLoc
            });
            return;
          }
          this.expressionScope.recordAsyncArrowParametersError(ErrorMessages2.AwaitBindingIdentifier, startLoc);
        } else if (word === "arguments") {
          if (this.scope.inClassAndNotInNonArrowFunction) {
            this.raise(ErrorMessages2.ArgumentsInClass, {
              at: startLoc
            });
            return;
          }
        }
        if (checkKeywords && isKeyword2(word)) {
          this.raise(ErrorMessages2.UnexpectedKeyword, {
            at: startLoc
          }, word);
          return;
        }
        const reservedTest = !this.state.strict ? isReservedWord2 : isBinding ? isStrictBindReservedWord2 : isStrictReservedWord2;
        if (reservedTest(word, this.inModule)) {
          this.raise(ErrorMessages2.UnexpectedReservedWord, {
            at: startLoc
          }, word);
        }
      }
      isAwaitAllowed() {
        if (this.prodParam.hasAwait)
          return true;
        if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {
          return true;
        }
        return false;
      }
      parseAwait(startPos, startLoc) {
        const node2 = this.startNodeAt(startPos, startLoc);
        this.expressionScope.recordParameterInitializerError(node2.loc.start, ErrorMessages2.AwaitExpressionFormalParameter);
        if (this.eat(55)) {
          this.raise(ErrorMessages2.ObsoleteAwaitStar, {
            node: node2
          });
        }
        if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
          if (this.isAmbiguousAwait()) {
            this.ambiguousScriptDifferentAst = true;
          } else {
            this.sawUnambiguousESM = true;
          }
        }
        if (!this.state.soloAwait) {
          node2.argument = this.parseMaybeUnary(null, true);
        }
        return this.finishNode(node2, "AwaitExpression");
      }
      isAmbiguousAwait() {
        if (this.hasPrecedingLineBreak())
          return true;
        const {
          type
        } = this.state;
        return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 133 || type === 56 || this.hasPlugin("v8intrinsic") && type === 54;
      }
      parseYield() {
        const node2 = this.startNode();
        this.expressionScope.recordParameterInitializerError(node2.loc.start, ErrorMessages2.YieldInParameter);
        this.next();
        let delegating = false;
        let argument = null;
        if (!this.hasPrecedingLineBreak()) {
          delegating = this.eat(55);
          switch (this.state.type) {
            case 13:
            case 135:
            case 8:
            case 11:
            case 3:
            case 9:
            case 14:
            case 12:
              if (!delegating)
                break;
            default:
              argument = this.parseMaybeAssign();
          }
        }
        node2.delegate = delegating;
        node2.argument = argument;
        return this.finishNode(node2, "YieldExpression");
      }
      checkPipelineAtInfixOperator(left, leftStartLoc) {
        if (this.hasPlugin(["pipelineOperator", {
          proposal: "smart"
        }])) {
          if (left.type === "SequenceExpression") {
            this.raise(ErrorMessages2.PipelineHeadSequenceExpression, {
              at: leftStartLoc
            });
          }
        }
      }
      parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {
        const bodyNode = this.startNodeAt(startPos, startLoc);
        if (this.isSimpleReference(childExpr)) {
          bodyNode.callee = childExpr;
          return this.finishNode(bodyNode, "PipelineBareFunction");
        } else {
          this.checkSmartPipeTopicBodyEarlyErrors(startLoc);
          bodyNode.expression = childExpr;
          return this.finishNode(bodyNode, "PipelineTopicExpression");
        }
      }
      isSimpleReference(expression) {
        switch (expression.type) {
          case "MemberExpression":
            return !expression.computed && this.isSimpleReference(expression.object);
          case "Identifier":
            return true;
          default:
            return false;
        }
      }
      checkSmartPipeTopicBodyEarlyErrors(startLoc) {
        if (this.match(19)) {
          throw this.raise(ErrorMessages2.PipelineBodyNoArrow, {
            at: this.state.startLoc
          });
        }
        if (!this.topicReferenceWasUsedInCurrentContext()) {
          this.raise(ErrorMessages2.PipelineTopicUnused, {
            at: startLoc
          });
        }
      }
      withTopicBindingContext(callback) {
        const outerContextTopicState = this.state.topicContext;
        this.state.topicContext = {
          maxNumOfResolvableTopics: 1,
          maxTopicIndex: null
        };
        try {
          return callback();
        } finally {
          this.state.topicContext = outerContextTopicState;
        }
      }
      withSmartMixTopicForbiddingContext(callback) {
        if (this.hasPlugin(["pipelineOperator", {
          proposal: "smart"
        }])) {
          const outerContextTopicState = this.state.topicContext;
          this.state.topicContext = {
            maxNumOfResolvableTopics: 0,
            maxTopicIndex: null
          };
          try {
            return callback();
          } finally {
            this.state.topicContext = outerContextTopicState;
          }
        } else {
          return callback();
        }
      }
      withSoloAwaitPermittingContext(callback) {
        const outerContextSoloAwaitState = this.state.soloAwait;
        this.state.soloAwait = true;
        try {
          return callback();
        } finally {
          this.state.soloAwait = outerContextSoloAwaitState;
        }
      }
      allowInAnd(callback) {
        const flags = this.prodParam.currentFlags();
        const prodParamToSet = PARAM_IN2 & ~flags;
        if (prodParamToSet) {
          this.prodParam.enter(flags | PARAM_IN2);
          try {
            return callback();
          } finally {
            this.prodParam.exit();
          }
        }
        return callback();
      }
      disallowInAnd(callback) {
        const flags = this.prodParam.currentFlags();
        const prodParamToClear = PARAM_IN2 & flags;
        if (prodParamToClear) {
          this.prodParam.enter(flags & ~PARAM_IN2);
          try {
            return callback();
          } finally {
            this.prodParam.exit();
          }
        }
        return callback();
      }
      registerTopicReference() {
        this.state.topicContext.maxTopicIndex = 0;
      }
      topicReferenceIsAllowedInCurrentContext() {
        return this.state.topicContext.maxNumOfResolvableTopics >= 1;
      }
      topicReferenceWasUsedInCurrentContext() {
        return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
      }
      parseFSharpPipelineBody(prec) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        this.state.potentialArrowAt = this.state.start;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = true;
        const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return ret;
      }
      parseModuleExpression() {
        this.expectPlugin("moduleBlocks");
        const node2 = this.startNode();
        this.next();
        this.eat(5);
        const revertScopes = this.initializeScopes(true);
        this.enterInitialScopes();
        const program = this.startNode();
        try {
          node2.body = this.parseProgram(program, 8, "module");
        } finally {
          revertScopes();
        }
        this.eat(8);
        return this.finishNode(node2, "ModuleExpression");
      }
      parsePropertyNamePrefixOperator(prop) {
      }
    };
    var loopLabel2 = {
      kind: "loop"
    };
    var switchLabel2 = {
      kind: "switch"
    };
    var FUNC_NO_FLAGS2 = 0;
    var FUNC_STATEMENT2 = 1;
    var FUNC_HANGING_STATEMENT2 = 2;
    var FUNC_NULLABLE_ID2 = 4;
    var loneSurrogate2 = /[\uD800-\uDFFF]/u;
    var keywordRelationalOperator2 = /in(?:stanceof)?/y;
    function babel7CompatTokens2(tokens, input2) {
      for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];
        const {
          type
        } = token;
        if (typeof type === "number") {
          {
            if (type === 134) {
              const {
                loc,
                start,
                value,
                end
              } = token;
              const hashEndPos = start + 1;
              const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
              tokens.splice(i, 1, new Token2({
                type: getExportedToken2(27),
                value: "#",
                start,
                end: hashEndPos,
                startLoc: loc.start,
                endLoc: hashEndLoc
              }), new Token2({
                type: getExportedToken2(128),
                value,
                start: hashEndPos,
                end,
                startLoc: hashEndLoc,
                endLoc: loc.end
              }));
              i++;
              continue;
            }
            if (tokenIsTemplate(type)) {
              const {
                loc,
                start,
                value,
                end
              } = token;
              const backquoteEnd = start + 1;
              const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
              let startToken;
              if (input2.charCodeAt(start) === 96) {
                startToken = new Token2({
                  type: getExportedToken2(22),
                  value: "`",
                  start,
                  end: backquoteEnd,
                  startLoc: loc.start,
                  endLoc: backquoteEndLoc
                });
              } else {
                startToken = new Token2({
                  type: getExportedToken2(8),
                  value: "}",
                  start,
                  end: backquoteEnd,
                  startLoc: loc.start,
                  endLoc: backquoteEndLoc
                });
              }
              let templateValue, templateElementEnd, templateElementEndLoc, endToken;
              if (type === 24) {
                templateElementEnd = end - 1;
                templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);
                templateValue = value === null ? null : value.slice(1, -1);
                endToken = new Token2({
                  type: getExportedToken2(22),
                  value: "`",
                  start: templateElementEnd,
                  end,
                  startLoc: templateElementEndLoc,
                  endLoc: loc.end
                });
              } else {
                templateElementEnd = end - 2;
                templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);
                templateValue = value === null ? null : value.slice(1, -2);
                endToken = new Token2({
                  type: getExportedToken2(23),
                  value: "${",
                  start: templateElementEnd,
                  end,
                  startLoc: templateElementEndLoc,
                  endLoc: loc.end
                });
              }
              tokens.splice(i, 1, startToken, new Token2({
                type: getExportedToken2(20),
                value: templateValue,
                start: backquoteEnd,
                end: templateElementEnd,
                startLoc: backquoteEndLoc,
                endLoc: templateElementEndLoc
              }), endToken);
              i += 2;
              continue;
            }
          }
          token.type = getExportedToken2(type);
        }
      }
      return tokens;
    }
    var StatementParser2 = class extends ExpressionParser2 {
      parseTopLevel(file, program) {
        file.program = this.parseProgram(program);
        file.comments = this.state.comments;
        if (this.options.tokens) {
          file.tokens = babel7CompatTokens2(this.tokens, this.input);
        }
        return this.finishNode(file, "File");
      }
      parseProgram(program, end = 135, sourceType = this.options.sourceType) {
        program.sourceType = sourceType;
        program.interpreter = this.parseInterpreterDirective();
        this.parseBlockBody(program, true, true, end);
        if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
          for (const [name, loc] of Array.from(this.scope.undefinedExports)) {
            this.raise(ErrorMessages2.ModuleExportUndefined, {
              at: loc
            }, name);
          }
        }
        return this.finishNode(program, "Program");
      }
      stmtToDirective(stmt) {
        const directive = stmt;
        directive.type = "Directive";
        directive.value = directive.expression;
        delete directive.expression;
        const directiveLiteral = directive.value;
        const expressionValue = directiveLiteral.value;
        const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);
        const val = directiveLiteral.value = raw.slice(1, -1);
        this.addExtra(directiveLiteral, "raw", raw);
        this.addExtra(directiveLiteral, "rawValue", val);
        this.addExtra(directiveLiteral, "expressionValue", expressionValue);
        directiveLiteral.type = "DirectiveLiteral";
        return directive;
      }
      parseInterpreterDirective() {
        if (!this.match(28)) {
          return null;
        }
        const node2 = this.startNode();
        node2.value = this.state.value;
        this.next();
        return this.finishNode(node2, "InterpreterDirective");
      }
      isLet(context) {
        if (!this.isContextual(99)) {
          return false;
        }
        return this.isLetKeyword(context);
      }
      isLetKeyword(context) {
        const next = this.nextTokenStart();
        const nextCh = this.codePointAtPos(next);
        if (nextCh === 92 || nextCh === 91) {
          return true;
        }
        if (context)
          return false;
        if (nextCh === 123)
          return true;
        if (isIdentifierStart2(nextCh)) {
          keywordRelationalOperator2.lastIndex = next;
          if (keywordRelationalOperator2.test(this.input)) {
            const endCh = this.codePointAtPos(keywordRelationalOperator2.lastIndex);
            if (!isIdentifierChar2(endCh) && endCh !== 92) {
              return false;
            }
          }
          return true;
        }
        return false;
      }
      parseStatement(context, topLevel) {
        if (this.match(26)) {
          this.parseDecorators(true);
        }
        return this.parseStatementContent(context, topLevel);
      }
      parseStatementContent(context, topLevel) {
        let starttype = this.state.type;
        const node2 = this.startNode();
        let kind;
        if (this.isLet(context)) {
          starttype = 74;
          kind = "let";
        }
        switch (starttype) {
          case 60:
            return this.parseBreakContinueStatement(node2, true);
          case 63:
            return this.parseBreakContinueStatement(node2, false);
          case 64:
            return this.parseDebuggerStatement(node2);
          case 90:
            return this.parseDoStatement(node2);
          case 91:
            return this.parseForStatement(node2);
          case 68:
            if (this.lookaheadCharCode() === 46)
              break;
            if (context) {
              if (this.state.strict) {
                this.raise(ErrorMessages2.StrictFunction, {
                  at: this.state.startLoc
                });
              } else if (context !== "if" && context !== "label") {
                this.raise(ErrorMessages2.SloppyFunction, {
                  at: this.state.startLoc
                });
              }
            }
            return this.parseFunctionStatement(node2, false, !context);
          case 80:
            if (context)
              this.unexpected();
            return this.parseClass(node2, true);
          case 69:
            return this.parseIfStatement(node2);
          case 70:
            return this.parseReturnStatement(node2);
          case 71:
            return this.parseSwitchStatement(node2);
          case 72:
            return this.parseThrowStatement(node2);
          case 73:
            return this.parseTryStatement(node2);
          case 75:
          case 74:
            kind = kind || this.state.value;
            if (context && kind !== "var") {
              this.raise(ErrorMessages2.UnexpectedLexicalDeclaration, {
                at: this.state.startLoc
              });
            }
            return this.parseVarStatement(node2, kind);
          case 92:
            return this.parseWhileStatement(node2);
          case 76:
            return this.parseWithStatement(node2);
          case 5:
            return this.parseBlock();
          case 13:
            return this.parseEmptyStatement(node2);
          case 83: {
            const nextTokenCharCode = this.lookaheadCharCode();
            if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
              break;
            }
          }
          case 82: {
            if (!this.options.allowImportExportEverywhere && !topLevel) {
              this.raise(ErrorMessages2.UnexpectedImportExport, {
                at: this.state.startLoc
              });
            }
            this.next();
            let result2;
            if (starttype === 83) {
              result2 = this.parseImport(node2);
              if (result2.type === "ImportDeclaration" && (!result2.importKind || result2.importKind === "value")) {
                this.sawUnambiguousESM = true;
              }
            } else {
              result2 = this.parseExport(node2);
              if (result2.type === "ExportNamedDeclaration" && (!result2.exportKind || result2.exportKind === "value") || result2.type === "ExportAllDeclaration" && (!result2.exportKind || result2.exportKind === "value") || result2.type === "ExportDefaultDeclaration") {
                this.sawUnambiguousESM = true;
              }
            }
            this.assertModuleNodeAllowed(node2);
            return result2;
          }
          default: {
            if (this.isAsyncFunction()) {
              if (context) {
                this.raise(ErrorMessages2.AsyncFunctionInSingleStatementContext, {
                  at: this.state.startLoc
                });
              }
              this.next();
              return this.parseFunctionStatement(node2, true, !context);
            }
          }
        }
        const maybeName = this.state.value;
        const expr = this.parseExpression();
        if (tokenIsIdentifier2(starttype) && expr.type === "Identifier" && this.eat(14)) {
          return this.parseLabeledStatement(node2, maybeName, expr, context);
        } else {
          return this.parseExpressionStatement(node2, expr);
        }
      }
      assertModuleNodeAllowed(node2) {
        if (!this.options.allowImportExportEverywhere && !this.inModule) {
          this.raise(SourceTypeModuleErrorMessages2.ImportOutsideModule, {
            node: node2
          });
        }
      }
      takeDecorators(node2) {
        const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        if (decorators.length) {
          node2.decorators = decorators;
          this.resetStartLocationFromNode(node2, decorators[0]);
          this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];
        }
      }
      canHaveLeadingDecorator() {
        return this.match(80);
      }
      parseDecorators(allowExport) {
        const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        while (this.match(26)) {
          const decorator = this.parseDecorator();
          currentContextDecorators.push(decorator);
        }
        if (this.match(82)) {
          if (!allowExport) {
            this.unexpected();
          }
          if (this.hasPlugin("decorators") && !this.getPluginOption("decorators", "decoratorsBeforeExport")) {
            this.raise(ErrorMessages2.DecoratorExportClass, {
              at: this.state.startLoc
            });
          }
        } else if (!this.canHaveLeadingDecorator()) {
          throw this.raise(ErrorMessages2.UnexpectedLeadingDecorator, {
            at: this.state.startLoc
          });
        }
      }
      parseDecorator() {
        this.expectOnePlugin(["decorators-legacy", "decorators"]);
        const node2 = this.startNode();
        this.next();
        if (this.hasPlugin("decorators")) {
          this.state.decoratorStack.push([]);
          const startPos = this.state.start;
          const startLoc = this.state.startLoc;
          let expr;
          if (this.eat(10)) {
            expr = this.parseExpression();
            this.expect(11);
          } else {
            expr = this.parseIdentifier(false);
            while (this.eat(16)) {
              const node3 = this.startNodeAt(startPos, startLoc);
              node3.object = expr;
              node3.property = this.parseIdentifier(true);
              node3.computed = false;
              expr = this.finishNode(node3, "MemberExpression");
            }
          }
          node2.expression = this.parseMaybeDecoratorArguments(expr);
          this.state.decoratorStack.pop();
        } else {
          node2.expression = this.parseExprSubscripts();
        }
        return this.finishNode(node2, "Decorator");
      }
      parseMaybeDecoratorArguments(expr) {
        if (this.eat(10)) {
          const node2 = this.startNodeAtNode(expr);
          node2.callee = expr;
          node2.arguments = this.parseCallExpressionArguments(11, false);
          this.toReferencedList(node2.arguments);
          return this.finishNode(node2, "CallExpression");
        }
        return expr;
      }
      parseBreakContinueStatement(node2, isBreak) {
        this.next();
        if (this.isLineTerminator()) {
          node2.label = null;
        } else {
          node2.label = this.parseIdentifier();
          this.semicolon();
        }
        this.verifyBreakContinue(node2, isBreak);
        return this.finishNode(node2, isBreak ? "BreakStatement" : "ContinueStatement");
      }
      verifyBreakContinue(node2, isBreak) {
        let i;
        for (i = 0; i < this.state.labels.length; ++i) {
          const lab = this.state.labels[i];
          if (node2.label == null || lab.name === node2.label.name) {
            if (lab.kind != null && (isBreak || lab.kind === "loop"))
              break;
            if (node2.label && isBreak)
              break;
          }
        }
        if (i === this.state.labels.length) {
          this.raise(ErrorMessages2.IllegalBreakContinue, {
            node: node2
          }, isBreak ? "break" : "continue");
        }
      }
      parseDebuggerStatement(node2) {
        this.next();
        this.semicolon();
        return this.finishNode(node2, "DebuggerStatement");
      }
      parseHeaderExpression() {
        this.expect(10);
        const val = this.parseExpression();
        this.expect(11);
        return val;
      }
      parseDoStatement(node2) {
        this.next();
        this.state.labels.push(loopLabel2);
        node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("do"));
        this.state.labels.pop();
        this.expect(92);
        node2.test = this.parseHeaderExpression();
        this.eat(13);
        return this.finishNode(node2, "DoWhileStatement");
      }
      parseForStatement(node2) {
        this.next();
        this.state.labels.push(loopLabel2);
        let awaitAt = null;
        if (this.isAwaitAllowed() && this.eatContextual(96)) {
          awaitAt = this.state.lastTokStartLoc;
        }
        this.scope.enter(SCOPE_OTHER2);
        this.expect(10);
        if (this.match(13)) {
          if (awaitAt !== null) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node2, null);
        }
        const startsWithLet = this.isContextual(99);
        const isLet = startsWithLet && this.isLetKeyword();
        if (this.match(74) || this.match(75) || isLet) {
          const init4 = this.startNode();
          const kind = isLet ? "let" : this.state.value;
          this.next();
          this.parseVar(init4, true, kind);
          this.finishNode(init4, "VariableDeclaration");
          if ((this.match(58) || this.isContextual(101)) && init4.declarations.length === 1) {
            return this.parseForIn(node2, init4, awaitAt);
          }
          if (awaitAt !== null) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node2, init4);
        }
        const startsWithAsync = this.isContextual(95);
        const refExpressionErrors = new ExpressionErrors2();
        const init3 = this.parseExpression(true, refExpressionErrors);
        const isForOf = this.isContextual(101);
        if (isForOf) {
          if (startsWithLet) {
            this.raise(ErrorMessages2.ForOfLet, {
              node: init3
            });
          }
          if (awaitAt === null && startsWithAsync && init3.type === "Identifier") {
            this.raise(ErrorMessages2.ForOfAsync, {
              node: init3
            });
          }
        }
        if (isForOf || this.match(58)) {
          this.checkDestructuringPrivate(refExpressionErrors);
          this.toAssignable(init3, true);
          const description = isForOf ? "for-of statement" : "for-in statement";
          this.checkLVal(init3, description);
          return this.parseForIn(node2, init3, awaitAt);
        } else {
          this.checkExpressionErrors(refExpressionErrors, true);
        }
        if (awaitAt !== null) {
          this.unexpected(awaitAt);
        }
        return this.parseFor(node2, init3);
      }
      parseFunctionStatement(node2, isAsync, declarationPosition) {
        this.next();
        return this.parseFunction(node2, FUNC_STATEMENT2 | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT2), isAsync);
      }
      parseIfStatement(node2) {
        this.next();
        node2.test = this.parseHeaderExpression();
        node2.consequent = this.parseStatement("if");
        node2.alternate = this.eat(66) ? this.parseStatement("if") : null;
        return this.finishNode(node2, "IfStatement");
      }
      parseReturnStatement(node2) {
        if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {
          this.raise(ErrorMessages2.IllegalReturn, {
            at: this.state.startLoc
          });
        }
        this.next();
        if (this.isLineTerminator()) {
          node2.argument = null;
        } else {
          node2.argument = this.parseExpression();
          this.semicolon();
        }
        return this.finishNode(node2, "ReturnStatement");
      }
      parseSwitchStatement(node2) {
        this.next();
        node2.discriminant = this.parseHeaderExpression();
        const cases = node2.cases = [];
        this.expect(5);
        this.state.labels.push(switchLabel2);
        this.scope.enter(SCOPE_OTHER2);
        let cur;
        for (let sawDefault; !this.match(8); ) {
          if (this.match(61) || this.match(65)) {
            const isCase = this.match(61);
            if (cur)
              this.finishNode(cur, "SwitchCase");
            cases.push(cur = this.startNode());
            cur.consequent = [];
            this.next();
            if (isCase) {
              cur.test = this.parseExpression();
            } else {
              if (sawDefault) {
                this.raise(ErrorMessages2.MultipleDefaultsInSwitch, {
                  at: this.state.lastTokStartLoc
                });
              }
              sawDefault = true;
              cur.test = null;
            }
            this.expect(14);
          } else {
            if (cur) {
              cur.consequent.push(this.parseStatement(null));
            } else {
              this.unexpected();
            }
          }
        }
        this.scope.exit();
        if (cur)
          this.finishNode(cur, "SwitchCase");
        this.next();
        this.state.labels.pop();
        return this.finishNode(node2, "SwitchStatement");
      }
      parseThrowStatement(node2) {
        this.next();
        if (this.hasPrecedingLineBreak()) {
          this.raise(ErrorMessages2.NewlineAfterThrow, {
            at: this.state.lastTokEndLoc
          });
        }
        node2.argument = this.parseExpression();
        this.semicolon();
        return this.finishNode(node2, "ThrowStatement");
      }
      parseCatchClauseParam() {
        const param = this.parseBindingAtom();
        const simple = param.type === "Identifier";
        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH2 : 0);
        this.checkLVal(param, "catch clause", BIND_LEXICAL2);
        return param;
      }
      parseTryStatement(node2) {
        this.next();
        node2.block = this.parseBlock();
        node2.handler = null;
        if (this.match(62)) {
          const clause = this.startNode();
          this.next();
          if (this.match(10)) {
            this.expect(10);
            clause.param = this.parseCatchClauseParam();
            this.expect(11);
          } else {
            clause.param = null;
            this.scope.enter(SCOPE_OTHER2);
          }
          clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
          this.scope.exit();
          node2.handler = this.finishNode(clause, "CatchClause");
        }
        node2.finalizer = this.eat(67) ? this.parseBlock() : null;
        if (!node2.handler && !node2.finalizer) {
          this.raise(ErrorMessages2.NoCatchOrFinally, {
            node: node2
          });
        }
        return this.finishNode(node2, "TryStatement");
      }
      parseVarStatement(node2, kind) {
        this.next();
        this.parseVar(node2, false, kind);
        this.semicolon();
        return this.finishNode(node2, "VariableDeclaration");
      }
      parseWhileStatement(node2) {
        this.next();
        node2.test = this.parseHeaderExpression();
        this.state.labels.push(loopLabel2);
        node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("while"));
        this.state.labels.pop();
        return this.finishNode(node2, "WhileStatement");
      }
      parseWithStatement(node2) {
        if (this.state.strict) {
          this.raise(ErrorMessages2.StrictWith, {
            at: this.state.startLoc
          });
        }
        this.next();
        node2.object = this.parseHeaderExpression();
        node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("with"));
        return this.finishNode(node2, "WithStatement");
      }
      parseEmptyStatement(node2) {
        this.next();
        return this.finishNode(node2, "EmptyStatement");
      }
      parseLabeledStatement(node2, maybeName, expr, context) {
        for (const label of this.state.labels) {
          if (label.name === maybeName) {
            this.raise(ErrorMessages2.LabelRedeclaration, {
              node: expr
            }, maybeName);
          }
        }
        const kind = tokenIsLoop2(this.state.type) ? "loop" : this.match(71) ? "switch" : null;
        for (let i = this.state.labels.length - 1; i >= 0; i--) {
          const label = this.state.labels[i];
          if (label.statementStart === node2.start) {
            label.statementStart = this.state.start;
            label.kind = kind;
          } else {
            break;
          }
        }
        this.state.labels.push({
          name: maybeName,
          kind,
          statementStart: this.state.start
        });
        node2.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
        this.state.labels.pop();
        node2.label = expr;
        return this.finishNode(node2, "LabeledStatement");
      }
      parseExpressionStatement(node2, expr) {
        node2.expression = expr;
        this.semicolon();
        return this.finishNode(node2, "ExpressionStatement");
      }
      parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
        const node2 = this.startNode();
        if (allowDirectives) {
          this.state.strictErrors.clear();
        }
        this.expect(5);
        if (createNewLexicalScope) {
          this.scope.enter(SCOPE_OTHER2);
        }
        this.parseBlockBody(node2, allowDirectives, false, 8, afterBlockParse);
        if (createNewLexicalScope) {
          this.scope.exit();
        }
        return this.finishNode(node2, "BlockStatement");
      }
      isValidDirective(stmt) {
        return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
      }
      parseBlockBody(node2, allowDirectives, topLevel, end, afterBlockParse) {
        const body = node2.body = [];
        const directives = node2.directives = [];
        this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
      }
      parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
        const oldStrict = this.state.strict;
        let hasStrictModeDirective = false;
        let parsedNonDirective = false;
        while (!this.match(end)) {
          const stmt = this.parseStatement(null, topLevel);
          if (directives && !parsedNonDirective) {
            if (this.isValidDirective(stmt)) {
              const directive = this.stmtToDirective(stmt);
              directives.push(directive);
              if (!hasStrictModeDirective && directive.value.value === "use strict") {
                hasStrictModeDirective = true;
                this.setStrict(true);
              }
              continue;
            }
            parsedNonDirective = true;
            this.state.strictErrors.clear();
          }
          body.push(stmt);
        }
        if (afterBlockParse) {
          afterBlockParse.call(this, hasStrictModeDirective);
        }
        if (!oldStrict) {
          this.setStrict(false);
        }
        this.next();
      }
      parseFor(node2, init3) {
        node2.init = init3;
        this.semicolon(false);
        node2.test = this.match(13) ? null : this.parseExpression();
        this.semicolon(false);
        node2.update = this.match(11) ? null : this.parseExpression();
        this.expect(11);
        node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for"));
        this.scope.exit();
        this.state.labels.pop();
        return this.finishNode(node2, "ForStatement");
      }
      parseForIn(node2, init3, awaitAt) {
        const isForIn = this.match(58);
        this.next();
        if (isForIn) {
          if (awaitAt !== null)
            this.unexpected(awaitAt);
        } else {
          node2.await = awaitAt !== null;
        }
        if (init3.type === "VariableDeclaration" && init3.declarations[0].init != null && (!isForIn || this.state.strict || init3.kind !== "var" || init3.declarations[0].id.type !== "Identifier")) {
          this.raise(ErrorMessages2.ForInOfLoopInitializer, {
            node: init3
          }, isForIn ? "for-in" : "for-of");
        }
        if (init3.type === "AssignmentPattern") {
          this.raise(ErrorMessages2.InvalidLhs, {
            node: init3
          }, "for-loop");
        }
        node2.left = init3;
        node2.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
        this.expect(11);
        node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for"));
        this.scope.exit();
        this.state.labels.pop();
        return this.finishNode(node2, isForIn ? "ForInStatement" : "ForOfStatement");
      }
      parseVar(node2, isFor, kind) {
        const declarations = node2.declarations = [];
        const isTypescript = this.hasPlugin("typescript");
        node2.kind = kind;
        for (; ; ) {
          const decl = this.startNode();
          this.parseVarId(decl, kind);
          if (this.eat(29)) {
            decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
          } else {
            if (kind === "const" && !(this.match(58) || this.isContextual(101))) {
              if (!isTypescript) {
                this.raise(ErrorMessages2.DeclarationMissingInitializer, {
                  at: this.state.lastTokEndLoc
                }, "Const declarations");
              }
            } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(58) || this.isContextual(101)))) {
              this.raise(ErrorMessages2.DeclarationMissingInitializer, {
                at: this.state.lastTokEndLoc
              }, "Complex binding patterns");
            }
            decl.init = null;
          }
          declarations.push(this.finishNode(decl, "VariableDeclarator"));
          if (!this.eat(12))
            break;
        }
        return node2;
      }
      parseVarId(decl, kind) {
        decl.id = this.parseBindingAtom();
        this.checkLVal(decl.id, "variable declaration", kind === "var" ? BIND_VAR2 : BIND_LEXICAL2, void 0, kind !== "var");
      }
      parseFunction(node2, statement = FUNC_NO_FLAGS2, isAsync = false) {
        const isStatement = statement & FUNC_STATEMENT2;
        const isHangingStatement = statement & FUNC_HANGING_STATEMENT2;
        const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID2);
        this.initFunction(node2, isAsync);
        if (this.match(55) && isHangingStatement) {
          this.raise(ErrorMessages2.GeneratorInSingleStatementContext, {
            at: this.state.startLoc
          });
        }
        node2.generator = this.eat(55);
        if (isStatement) {
          node2.id = this.parseFunctionId(requireId);
        }
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = false;
        this.scope.enter(SCOPE_FUNCTION2);
        this.prodParam.enter(functionFlags2(isAsync, node2.generator));
        if (!isStatement) {
          node2.id = this.parseFunctionId();
        }
        this.parseFunctionParams(node2, false);
        this.withSmartMixTopicForbiddingContext(() => {
          this.parseFunctionBodyAndFinish(node2, isStatement ? "FunctionDeclaration" : "FunctionExpression");
        });
        this.prodParam.exit();
        this.scope.exit();
        if (isStatement && !isHangingStatement) {
          this.registerFunctionStatementId(node2);
        }
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return node2;
      }
      parseFunctionId(requireId) {
        return requireId || tokenIsIdentifier2(this.state.type) ? this.parseIdentifier() : null;
      }
      parseFunctionParams(node2, allowModifiers) {
        this.expect(10);
        this.expressionScope.enter(newParameterDeclarationScope2());
        node2.params = this.parseBindingList(11, 41, false, allowModifiers);
        this.expressionScope.exit();
      }
      registerFunctionStatementId(node2) {
        if (!node2.id)
          return;
        this.scope.declareName(node2.id.name, this.state.strict || node2.generator || node2.async ? this.scope.treatFunctionsAsVar ? BIND_VAR2 : BIND_LEXICAL2 : BIND_FUNCTION2, node2.id.loc.start);
      }
      parseClass(node2, isStatement, optionalId) {
        this.next();
        this.takeDecorators(node2);
        const oldStrict = this.state.strict;
        this.state.strict = true;
        this.parseClassId(node2, isStatement, optionalId);
        this.parseClassSuper(node2);
        node2.body = this.parseClassBody(!!node2.superClass, oldStrict);
        return this.finishNode(node2, isStatement ? "ClassDeclaration" : "ClassExpression");
      }
      isClassProperty() {
        return this.match(29) || this.match(13) || this.match(8);
      }
      isClassMethod() {
        return this.match(10);
      }
      isNonstaticConstructor(method) {
        return !method.computed && !method.static && (method.key.name === "constructor" || method.key.value === "constructor");
      }
      parseClassBody(hadSuperClass, oldStrict) {
        this.classScope.enter();
        const state = {
          hadConstructor: false,
          hadSuperClass
        };
        let decorators = [];
        const classBody = this.startNode();
        classBody.body = [];
        this.expect(5);
        this.withSmartMixTopicForbiddingContext(() => {
          while (!this.match(8)) {
            if (this.eat(13)) {
              if (decorators.length > 0) {
                throw this.raise(ErrorMessages2.DecoratorSemicolon, {
                  at: this.state.lastTokEndLoc
                });
              }
              continue;
            }
            if (this.match(26)) {
              decorators.push(this.parseDecorator());
              continue;
            }
            const member = this.startNode();
            if (decorators.length) {
              member.decorators = decorators;
              this.resetStartLocationFromNode(member, decorators[0]);
              decorators = [];
            }
            this.parseClassMember(classBody, member, state);
            if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {
              this.raise(ErrorMessages2.DecoratorConstructor, {
                node: member
              });
            }
          }
        });
        this.state.strict = oldStrict;
        this.next();
        if (decorators.length) {
          throw this.raise(ErrorMessages2.TrailingDecorator, {
            at: this.state.startLoc
          });
        }
        this.classScope.exit();
        return this.finishNode(classBody, "ClassBody");
      }
      parseClassMemberFromModifier(classBody, member) {
        const key = this.parseIdentifier(true);
        if (this.isClassMethod()) {
          const method = member;
          method.kind = "method";
          method.computed = false;
          method.key = key;
          method.static = false;
          this.pushClassMethod(classBody, method, false, false, false, false);
          return true;
        } else if (this.isClassProperty()) {
          const prop = member;
          prop.computed = false;
          prop.key = key;
          prop.static = false;
          classBody.body.push(this.parseClassProperty(prop));
          return true;
        }
        this.resetPreviousNodeTrailingComments(key);
        return false;
      }
      parseClassMember(classBody, member, state) {
        const isStatic = this.isContextual(104);
        if (isStatic) {
          if (this.parseClassMemberFromModifier(classBody, member)) {
            return;
          }
          if (this.eat(5)) {
            this.parseClassStaticBlock(classBody, member);
            return;
          }
        }
        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
      }
      parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
        const publicMethod = member;
        const privateMethod = member;
        const publicProp = member;
        const privateProp = member;
        const accessorProp = member;
        const method = publicMethod;
        const publicMember = publicMethod;
        member.static = isStatic;
        this.parsePropertyNamePrefixOperator(member);
        if (this.eat(55)) {
          method.kind = "method";
          const isPrivateName = this.match(134);
          this.parseClassElementName(method);
          if (isPrivateName) {
            this.pushClassPrivateMethod(classBody, privateMethod, true, false);
            return;
          }
          if (this.isNonstaticConstructor(publicMethod)) {
            this.raise(ErrorMessages2.ConstructorIsGenerator, {
              node: publicMethod.key
            });
          }
          this.pushClassMethod(classBody, publicMethod, true, false, false, false);
          return;
        }
        const isContextual = tokenIsIdentifier2(this.state.type) && !this.state.containsEsc;
        const isPrivate = this.match(134);
        const key = this.parseClassElementName(member);
        const maybeQuestionTokenStartLoc = this.state.startLoc;
        this.parsePostMemberNameModifiers(publicMember);
        if (this.isClassMethod()) {
          method.kind = "method";
          if (isPrivate) {
            this.pushClassPrivateMethod(classBody, privateMethod, false, false);
            return;
          }
          const isConstructor = this.isNonstaticConstructor(publicMethod);
          let allowsDirectSuper = false;
          if (isConstructor) {
            publicMethod.kind = "constructor";
            if (state.hadConstructor && !this.hasPlugin("typescript")) {
              this.raise(ErrorMessages2.DuplicateConstructor, {
                node: key
              });
            }
            if (isConstructor && this.hasPlugin("typescript") && member.override) {
              this.raise(ErrorMessages2.OverrideOnConstructor, {
                node: key
              });
            }
            state.hadConstructor = true;
            allowsDirectSuper = state.hadSuperClass;
          }
          this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
        } else if (this.isClassProperty()) {
          if (isPrivate) {
            this.pushClassPrivateProperty(classBody, privateProp);
          } else {
            this.pushClassProperty(classBody, publicProp);
          }
        } else if (isContextual && key.name === "async" && !this.isLineTerminator()) {
          this.resetPreviousNodeTrailingComments(key);
          const isGenerator = this.eat(55);
          if (publicMember.optional) {
            this.unexpected(maybeQuestionTokenStartLoc);
          }
          method.kind = "method";
          const isPrivate2 = this.match(134);
          this.parseClassElementName(method);
          this.parsePostMemberNameModifiers(publicMember);
          if (isPrivate2) {
            this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
          } else {
            if (this.isNonstaticConstructor(publicMethod)) {
              this.raise(ErrorMessages2.ConstructorIsAsync, {
                node: publicMethod.key
              });
            }
            this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
          }
        } else if (isContextual && (key.name === "get" || key.name === "set") && !(this.match(55) && this.isLineTerminator())) {
          this.resetPreviousNodeTrailingComments(key);
          method.kind = key.name;
          const isPrivate2 = this.match(134);
          this.parseClassElementName(publicMethod);
          if (isPrivate2) {
            this.pushClassPrivateMethod(classBody, privateMethod, false, false);
          } else {
            if (this.isNonstaticConstructor(publicMethod)) {
              this.raise(ErrorMessages2.ConstructorIsAccessor, {
                node: publicMethod.key
              });
            }
            this.pushClassMethod(classBody, publicMethod, false, false, false, false);
          }
          this.checkGetterSetterParams(publicMethod);
        } else if (isContextual && key.name === "accessor" && !this.isLineTerminator()) {
          this.expectPlugin("decoratorAutoAccessors");
          this.resetPreviousNodeTrailingComments(key);
          const isPrivate2 = this.match(134);
          this.parseClassElementName(publicProp);
          this.pushClassAccessorProperty(classBody, accessorProp, isPrivate2);
        } else if (this.isLineTerminator()) {
          if (isPrivate) {
            this.pushClassPrivateProperty(classBody, privateProp);
          } else {
            this.pushClassProperty(classBody, publicProp);
          }
        } else {
          this.unexpected();
        }
      }
      parseClassElementName(member) {
        const {
          type,
          value
        } = this.state;
        if ((type === 128 || type === 129) && member.static && value === "prototype") {
          this.raise(ErrorMessages2.StaticPrototype, {
            at: this.state.startLoc
          });
        }
        if (type === 134) {
          if (value === "constructor") {
            this.raise(ErrorMessages2.ConstructorClassPrivateField, {
              at: this.state.startLoc
            });
          }
          const key = this.parsePrivateName();
          member.key = key;
          return key;
        }
        return this.parsePropertyName(member);
      }
      parseClassStaticBlock(classBody, member) {
        var _member$decorators;
        this.scope.enter(SCOPE_CLASS2 | SCOPE_STATIC_BLOCK2 | SCOPE_SUPER2);
        const oldLabels = this.state.labels;
        this.state.labels = [];
        this.prodParam.enter(PARAM2);
        const body = member.body = [];
        this.parseBlockOrModuleBlockBody(body, void 0, false, 8);
        this.prodParam.exit();
        this.scope.exit();
        this.state.labels = oldLabels;
        classBody.body.push(this.finishNode(member, "StaticBlock"));
        if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
          this.raise(ErrorMessages2.DecoratorStaticBlock, {
            node: member
          });
        }
      }
      pushClassProperty(classBody, prop) {
        if (!prop.computed && (prop.key.name === "constructor" || prop.key.value === "constructor")) {
          this.raise(ErrorMessages2.ConstructorClassField, {
            node: prop.key
          });
        }
        classBody.body.push(this.parseClassProperty(prop));
      }
      pushClassPrivateProperty(classBody, prop) {
        const node2 = this.parseClassPrivateProperty(prop);
        classBody.body.push(node2);
        this.classScope.declarePrivateName(this.getPrivateNameSV(node2.key), CLASS_ELEMENT_OTHER2, node2.key.loc.start);
      }
      pushClassAccessorProperty(classBody, prop, isPrivate) {
        if (!isPrivate && !prop.computed) {
          const key = prop.key;
          if (key.name === "constructor" || key.value === "constructor") {
            this.raise(ErrorMessages2.ConstructorClassField, {
              node: key
            });
          }
        }
        const node2 = this.parseClassAccessorProperty(prop);
        classBody.body.push(node2);
        if (isPrivate) {
          this.classScope.declarePrivateName(this.getPrivateNameSV(node2.key), CLASS_ELEMENT_OTHER2, node2.key.loc.start);
        }
      }
      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
      }
      pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        const node2 = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
        classBody.body.push(node2);
        const kind = node2.kind === "get" ? node2.static ? CLASS_ELEMENT_STATIC_GETTER2 : CLASS_ELEMENT_INSTANCE_GETTER2 : node2.kind === "set" ? node2.static ? CLASS_ELEMENT_STATIC_SETTER2 : CLASS_ELEMENT_INSTANCE_SETTER2 : CLASS_ELEMENT_OTHER2;
        this.declareClassPrivateMethodInScope(node2, kind);
      }
      declareClassPrivateMethodInScope(node2, kind) {
        this.classScope.declarePrivateName(this.getPrivateNameSV(node2.key), kind, node2.key.loc.start);
      }
      parsePostMemberNameModifiers(methodOrProp) {
      }
      parseClassPrivateProperty(node2) {
        this.parseInitializer(node2);
        this.semicolon();
        return this.finishNode(node2, "ClassPrivateProperty");
      }
      parseClassProperty(node2) {
        this.parseInitializer(node2);
        this.semicolon();
        return this.finishNode(node2, "ClassProperty");
      }
      parseClassAccessorProperty(node2) {
        this.parseInitializer(node2);
        this.semicolon();
        return this.finishNode(node2, "ClassAccessorProperty");
      }
      parseInitializer(node2) {
        this.scope.enter(SCOPE_CLASS2 | SCOPE_SUPER2);
        this.expressionScope.enter(newExpressionScope2());
        this.prodParam.enter(PARAM2);
        node2.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;
        this.expressionScope.exit();
        this.prodParam.exit();
        this.scope.exit();
      }
      parseClassId(node2, isStatement, optionalId, bindingType = BIND_CLASS2) {
        if (tokenIsIdentifier2(this.state.type)) {
          node2.id = this.parseIdentifier();
          if (isStatement) {
            this.checkLVal(node2.id, "class name", bindingType);
          }
        } else {
          if (optionalId || !isStatement) {
            node2.id = null;
          } else {
            throw this.raise(ErrorMessages2.MissingClassName, {
              at: this.state.startLoc
            });
          }
        }
      }
      parseClassSuper(node2) {
        node2.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
      }
      parseExport(node2) {
        const hasDefault = this.maybeParseExportDefaultSpecifier(node2);
        const parseAfterDefault = !hasDefault || this.eat(12);
        const hasStar = parseAfterDefault && this.eatExportStar(node2);
        const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node2);
        const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));
        const isFromRequired = hasDefault || hasStar;
        if (hasStar && !hasNamespace) {
          if (hasDefault)
            this.unexpected();
          this.parseExportFrom(node2, true);
          return this.finishNode(node2, "ExportAllDeclaration");
        }
        const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node2);
        if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {
          throw this.unexpected(null, 5);
        }
        let hasDeclaration;
        if (isFromRequired || hasSpecifiers) {
          hasDeclaration = false;
          this.parseExportFrom(node2, isFromRequired);
        } else {
          hasDeclaration = this.maybeParseExportDeclaration(node2);
        }
        if (isFromRequired || hasSpecifiers || hasDeclaration) {
          this.checkExport(node2, true, false, !!node2.source);
          return this.finishNode(node2, "ExportNamedDeclaration");
        }
        if (this.eat(65)) {
          node2.declaration = this.parseExportDefaultExpression();
          this.checkExport(node2, true, true);
          return this.finishNode(node2, "ExportDefaultDeclaration");
        }
        throw this.unexpected(null, 5);
      }
      eatExportStar(node2) {
        return this.eat(55);
      }
      maybeParseExportDefaultSpecifier(node2) {
        if (this.isExportDefaultSpecifier()) {
          this.expectPlugin("exportDefaultFrom");
          const specifier = this.startNode();
          specifier.exported = this.parseIdentifier(true);
          node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
          return true;
        }
        return false;
      }
      maybeParseExportNamespaceSpecifier(node2) {
        if (this.isContextual(93)) {
          if (!node2.specifiers)
            node2.specifiers = [];
          const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);
          this.next();
          specifier.exported = this.parseModuleExportName();
          node2.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
          return true;
        }
        return false;
      }
      maybeParseExportNamedSpecifiers(node2) {
        if (this.match(5)) {
          if (!node2.specifiers)
            node2.specifiers = [];
          const isTypeExport = node2.exportKind === "type";
          node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));
          node2.source = null;
          node2.declaration = null;
          if (this.hasPlugin("importAssertions")) {
            node2.assertions = [];
          }
          return true;
        }
        return false;
      }
      maybeParseExportDeclaration(node2) {
        if (this.shouldParseExportDeclaration()) {
          node2.specifiers = [];
          node2.source = null;
          if (this.hasPlugin("importAssertions")) {
            node2.assertions = [];
          }
          node2.declaration = this.parseExportDeclaration(node2);
          return true;
        }
        return false;
      }
      isAsyncFunction() {
        if (!this.isContextual(95))
          return false;
        const next = this.nextTokenStart();
        return !lineBreak2.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, "function");
      }
      parseExportDefaultExpression() {
        const expr = this.startNode();
        const isAsync = this.isAsyncFunction();
        if (this.match(68) || isAsync) {
          this.next();
          if (isAsync) {
            this.next();
          }
          return this.parseFunction(expr, FUNC_STATEMENT2 | FUNC_NULLABLE_ID2, isAsync);
        }
        if (this.match(80)) {
          return this.parseClass(expr, true, true);
        }
        if (this.match(26)) {
          if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport")) {
            this.raise(ErrorMessages2.DecoratorBeforeExport, {
              at: this.state.startLoc
            });
          }
          this.parseDecorators(false);
          return this.parseClass(expr, true, true);
        }
        if (this.match(75) || this.match(74) || this.isLet()) {
          throw this.raise(ErrorMessages2.UnsupportedDefaultExport, {
            at: this.state.startLoc
          });
        }
        const res = this.parseMaybeAssignAllowIn();
        this.semicolon();
        return res;
      }
      parseExportDeclaration(node2) {
        return this.parseStatement(null);
      }
      isExportDefaultSpecifier() {
        const {
          type
        } = this.state;
        if (tokenIsIdentifier2(type)) {
          if (type === 95 && !this.state.containsEsc || type === 99) {
            return false;
          }
          if ((type === 126 || type === 125) && !this.state.containsEsc) {
            const {
              type: nextType
            } = this.lookahead();
            if (tokenIsIdentifier2(nextType) && nextType !== 97 || nextType === 5) {
              this.expectOnePlugin(["flow", "typescript"]);
              return false;
            }
          }
        } else if (!this.match(65)) {
          return false;
        }
        const next = this.nextTokenStart();
        const hasFrom = this.isUnparsedContextual(next, "from");
        if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier2(this.state.type) && hasFrom) {
          return true;
        }
        if (this.match(65) && hasFrom) {
          const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
          return nextAfterFrom === 34 || nextAfterFrom === 39;
        }
        return false;
      }
      parseExportFrom(node2, expect) {
        if (this.eatContextual(97)) {
          node2.source = this.parseImportSource();
          this.checkExport(node2);
          const assertions = this.maybeParseImportAssertions();
          if (assertions) {
            node2.assertions = assertions;
          }
        } else if (expect) {
          this.unexpected();
        }
        this.semicolon();
      }
      shouldParseExportDeclaration() {
        const {
          type
        } = this.state;
        if (type === 26) {
          this.expectOnePlugin(["decorators", "decorators-legacy"]);
          if (this.hasPlugin("decorators")) {
            if (this.getPluginOption("decorators", "decoratorsBeforeExport")) {
              throw this.raise(ErrorMessages2.DecoratorBeforeExport, {
                at: this.state.startLoc
              });
            }
            return true;
          }
        }
        return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();
      }
      checkExport(node2, checkNames, isDefault, isFrom) {
        if (checkNames) {
          if (isDefault) {
            this.checkDuplicateExports(node2, "default");
            if (this.hasPlugin("exportDefaultFrom")) {
              var _declaration$extra;
              const declaration2 = node2.declaration;
              if (declaration2.type === "Identifier" && declaration2.name === "from" && declaration2.end - declaration2.start === 4 && !((_declaration$extra = declaration2.extra) != null && _declaration$extra.parenthesized)) {
                this.raise(ErrorMessages2.ExportDefaultFromAsIdentifier, {
                  node: declaration2
                });
              }
            }
          } else if (node2.specifiers && node2.specifiers.length) {
            for (const specifier of node2.specifiers) {
              const {
                exported
              } = specifier;
              const exportedName = exported.type === "Identifier" ? exported.name : exported.value;
              this.checkDuplicateExports(specifier, exportedName);
              if (!isFrom && specifier.local) {
                const {
                  local
                } = specifier;
                if (local.type !== "Identifier") {
                  this.raise(ErrorMessages2.ExportBindingIsString, {
                    node: specifier
                  }, local.value, exportedName);
                } else {
                  this.checkReservedWord(local.name, local.loc.start, true, false);
                  this.scope.checkLocalExport(local);
                }
              }
            }
          } else if (node2.declaration) {
            if (node2.declaration.type === "FunctionDeclaration" || node2.declaration.type === "ClassDeclaration") {
              const id2 = node2.declaration.id;
              if (!id2)
                throw new Error("Assertion failure");
              this.checkDuplicateExports(node2, id2.name);
            } else if (node2.declaration.type === "VariableDeclaration") {
              for (const declaration2 of node2.declaration.declarations) {
                this.checkDeclaration(declaration2.id);
              }
            }
          }
        }
        const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        if (currentContextDecorators.length) {
          throw this.raise(ErrorMessages2.UnsupportedDecoratorExport, {
            node: node2
          });
        }
      }
      checkDeclaration(node2) {
        if (node2.type === "Identifier") {
          this.checkDuplicateExports(node2, node2.name);
        } else if (node2.type === "ObjectPattern") {
          for (const prop of node2.properties) {
            this.checkDeclaration(prop);
          }
        } else if (node2.type === "ArrayPattern") {
          for (const elem of node2.elements) {
            if (elem) {
              this.checkDeclaration(elem);
            }
          }
        } else if (node2.type === "ObjectProperty") {
          this.checkDeclaration(node2.value);
        } else if (node2.type === "RestElement") {
          this.checkDeclaration(node2.argument);
        } else if (node2.type === "AssignmentPattern") {
          this.checkDeclaration(node2.left);
        }
      }
      checkDuplicateExports(node2, name) {
        if (this.exportedIdentifiers.has(name)) {
          this.raise(name === "default" ? ErrorMessages2.DuplicateDefaultExport : ErrorMessages2.DuplicateExport, {
            node: node2
          }, name);
        }
        this.exportedIdentifiers.add(name);
      }
      parseExportSpecifiers(isInTypeExport) {
        const nodes = [];
        let first = true;
        this.expect(5);
        while (!this.eat(8)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
            if (this.eat(8))
              break;
          }
          const isMaybeTypeOnly = this.isContextual(126);
          const isString2 = this.match(129);
          const node2 = this.startNode();
          node2.local = this.parseModuleExportName();
          nodes.push(this.parseExportSpecifier(node2, isString2, isInTypeExport, isMaybeTypeOnly));
        }
        return nodes;
      }
      parseExportSpecifier(node2, isString2, isInTypeExport, isMaybeTypeOnly) {
        if (this.eatContextual(93)) {
          node2.exported = this.parseModuleExportName();
        } else if (isString2) {
          node2.exported = cloneStringLiteral2(node2.local);
        } else if (!node2.exported) {
          node2.exported = cloneIdentifier2(node2.local);
        }
        return this.finishNode(node2, "ExportSpecifier");
      }
      parseModuleExportName() {
        if (this.match(129)) {
          const result2 = this.parseStringLiteral(this.state.value);
          const surrogate = result2.value.match(loneSurrogate2);
          if (surrogate) {
            this.raise(ErrorMessages2.ModuleExportNameHasLoneSurrogate, {
              node: result2
            }, surrogate[0].charCodeAt(0).toString(16));
          }
          return result2;
        }
        return this.parseIdentifier(true);
      }
      parseImport(node2) {
        node2.specifiers = [];
        if (!this.match(129)) {
          const hasDefault = this.maybeParseDefaultImportSpecifier(node2);
          const parseNext = !hasDefault || this.eat(12);
          const hasStar = parseNext && this.maybeParseStarImportSpecifier(node2);
          if (parseNext && !hasStar)
            this.parseNamedImportSpecifiers(node2);
          this.expectContextual(97);
        }
        node2.source = this.parseImportSource();
        const assertions = this.maybeParseImportAssertions();
        if (assertions) {
          node2.assertions = assertions;
        } else {
          const attributes = this.maybeParseModuleAttributes();
          if (attributes) {
            node2.attributes = attributes;
          }
        }
        this.semicolon();
        return this.finishNode(node2, "ImportDeclaration");
      }
      parseImportSource() {
        if (!this.match(129))
          this.unexpected();
        return this.parseExprAtom();
      }
      shouldParseDefaultImport(node2) {
        return tokenIsIdentifier2(this.state.type);
      }
      parseImportSpecifierLocal(node2, specifier, type, contextDescription) {
        specifier.local = this.parseIdentifier();
        this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL2);
        node2.specifiers.push(this.finishNode(specifier, type));
      }
      parseAssertEntries() {
        const attrs = [];
        const attrNames = /* @__PURE__ */ new Set();
        do {
          if (this.match(8)) {
            break;
          }
          const node2 = this.startNode();
          const keyName = this.state.value;
          if (attrNames.has(keyName)) {
            this.raise(ErrorMessages2.ModuleAttributesWithDuplicateKeys, {
              at: this.state.startLoc
            }, keyName);
          }
          attrNames.add(keyName);
          if (this.match(129)) {
            node2.key = this.parseStringLiteral(keyName);
          } else {
            node2.key = this.parseIdentifier(true);
          }
          this.expect(14);
          if (!this.match(129)) {
            throw this.raise(ErrorMessages2.ModuleAttributeInvalidValue, {
              at: this.state.startLoc
            });
          }
          node2.value = this.parseStringLiteral(this.state.value);
          this.finishNode(node2, "ImportAttribute");
          attrs.push(node2);
        } while (this.eat(12));
        return attrs;
      }
      maybeParseModuleAttributes() {
        if (this.match(76) && !this.hasPrecedingLineBreak()) {
          this.expectPlugin("moduleAttributes");
          this.next();
        } else {
          if (this.hasPlugin("moduleAttributes"))
            return [];
          return null;
        }
        const attrs = [];
        const attributes = /* @__PURE__ */ new Set();
        do {
          const node2 = this.startNode();
          node2.key = this.parseIdentifier(true);
          if (node2.key.name !== "type") {
            this.raise(ErrorMessages2.ModuleAttributeDifferentFromType, {
              node: node2.key
            }, node2.key.name);
          }
          if (attributes.has(node2.key.name)) {
            this.raise(ErrorMessages2.ModuleAttributesWithDuplicateKeys, {
              node: node2.key
            }, node2.key.name);
          }
          attributes.add(node2.key.name);
          this.expect(14);
          if (!this.match(129)) {
            throw this.raise(ErrorMessages2.ModuleAttributeInvalidValue, {
              at: this.state.startLoc
            });
          }
          node2.value = this.parseStringLiteral(this.state.value);
          this.finishNode(node2, "ImportAttribute");
          attrs.push(node2);
        } while (this.eat(12));
        return attrs;
      }
      maybeParseImportAssertions() {
        if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {
          this.expectPlugin("importAssertions");
          this.next();
        } else {
          if (this.hasPlugin("importAssertions"))
            return [];
          return null;
        }
        this.eat(5);
        const attrs = this.parseAssertEntries();
        this.eat(8);
        return attrs;
      }
      maybeParseDefaultImportSpecifier(node2) {
        if (this.shouldParseDefaultImport(node2)) {
          this.parseImportSpecifierLocal(node2, this.startNode(), "ImportDefaultSpecifier", "default import specifier");
          return true;
        }
        return false;
      }
      maybeParseStarImportSpecifier(node2) {
        if (this.match(55)) {
          const specifier = this.startNode();
          this.next();
          this.expectContextual(93);
          this.parseImportSpecifierLocal(node2, specifier, "ImportNamespaceSpecifier", "import namespace specifier");
          return true;
        }
        return false;
      }
      parseNamedImportSpecifiers(node2) {
        let first = true;
        this.expect(5);
        while (!this.eat(8)) {
          if (first) {
            first = false;
          } else {
            if (this.eat(14)) {
              throw this.raise(ErrorMessages2.DestructureNamedImport, {
                at: this.state.startLoc
              });
            }
            this.expect(12);
            if (this.eat(8))
              break;
          }
          const specifier = this.startNode();
          const importedIsString = this.match(129);
          const isMaybeTypeOnly = this.isContextual(126);
          specifier.imported = this.parseModuleExportName();
          const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node2.importKind === "type" || node2.importKind === "typeof", isMaybeTypeOnly);
          node2.specifiers.push(importSpecifier);
        }
      }
      parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
        if (this.eatContextual(93)) {
          specifier.local = this.parseIdentifier();
        } else {
          const {
            imported
          } = specifier;
          if (importedIsString) {
            throw this.raise(ErrorMessages2.ImportBindingIsString, {
              node: specifier
            }, imported.value);
          }
          this.checkReservedWord(imported.name, specifier.loc.start, true, true);
          if (!specifier.local) {
            specifier.local = cloneIdentifier2(imported);
          }
        }
        this.checkLVal(specifier.local, "import specifier", BIND_LEXICAL2);
        return this.finishNode(specifier, "ImportSpecifier");
      }
      isThisParam(param) {
        return param.type === "Identifier" && param.name === "this";
      }
    };
    var Parser2 = class extends StatementParser2 {
      constructor(options, input2) {
        options = getOptions2(options);
        super(options, input2);
        this.options = options;
        this.initializeScopes();
        this.plugins = pluginsMap2(this.options.plugins);
        this.filename = options.sourceFilename;
      }
      getScopeHandler() {
        return ScopeHandler2;
      }
      parse() {
        this.enterInitialScopes();
        const file = this.startNode();
        const program = this.startNode();
        this.nextToken();
        file.errors = null;
        this.parseTopLevel(file, program);
        file.errors = this.state.errors;
        return file;
      }
    };
    function pluginsMap2(plugins) {
      const pluginMap = /* @__PURE__ */ new Map();
      for (const plugin2 of plugins) {
        const [name, options] = Array.isArray(plugin2) ? plugin2 : [plugin2, {}];
        if (!pluginMap.has(name))
          pluginMap.set(name, options || {});
      }
      return pluginMap;
    }
    function parse2(input2, options) {
      var _options;
      if (((_options = options) == null ? void 0 : _options.sourceType) === "unambiguous") {
        options = Object.assign({}, options);
        try {
          options.sourceType = "module";
          const parser2 = getParser2(options, input2);
          const ast = parser2.parse();
          if (parser2.sawUnambiguousESM) {
            return ast;
          }
          if (parser2.ambiguousScriptDifferentAst) {
            try {
              options.sourceType = "script";
              return getParser2(options, input2).parse();
            } catch (_unused) {
            }
          } else {
            ast.program.sourceType = "script";
          }
          return ast;
        } catch (moduleError) {
          try {
            options.sourceType = "script";
            return getParser2(options, input2).parse();
          } catch (_unused2) {
          }
          throw moduleError;
        }
      } else {
        return getParser2(options, input2).parse();
      }
    }
    function parseExpression2(input2, options) {
      const parser2 = getParser2(options, input2);
      if (parser2.options.strictMode) {
        parser2.state.strict = true;
      }
      return parser2.getExpression();
    }
    function generateExportedTokenTypes2(internalTokenTypes) {
      const tokenTypes3 = {};
      for (const typeName of Object.keys(internalTokenTypes)) {
        tokenTypes3[typeName] = getExportedToken2(internalTokenTypes[typeName]);
      }
      return tokenTypes3;
    }
    var tokTypes2 = generateExportedTokenTypes2(tt2);
    function getParser2(options, input2) {
      let cls = Parser2;
      if (options != null && options.plugins) {
        validatePlugins2(options.plugins);
        cls = getParserClass2(options.plugins);
      }
      return new cls(options, input2);
    }
    var parserClassCache2 = {};
    function getParserClass2(pluginsFromOptions) {
      const pluginList = mixinPluginNames2.filter((name) => hasPlugin2(pluginsFromOptions, name));
      const key = pluginList.join("/");
      let cls = parserClassCache2[key];
      if (!cls) {
        cls = Parser2;
        for (const plugin2 of pluginList) {
          cls = mixinPlugins2[plugin2](cls);
        }
        parserClassCache2[key] = cls;
      }
      return cls;
    }
    exports2.parse = parse2;
    exports2.parseExpression = parseExpression2;
    exports2.tokTypes = tokTypes2;
  }
});

// ../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/base64.js
var require_base64 = __commonJS({
  "../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/base64.js"(exports2) {
    var intToCharMap2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
    exports2.encode = function(number) {
      if (0 <= number && number < intToCharMap2.length) {
        return intToCharMap2[number];
      }
      throw new TypeError("Must be between 0 and 63: " + number);
    };
    exports2.decode = function(charCode) {
      var bigA = 65;
      var bigZ = 90;
      var littleA = 97;
      var littleZ = 122;
      var zero = 48;
      var nine = 57;
      var plus = 43;
      var slash = 47;
      var littleOffset = 26;
      var numberOffset = 52;
      if (bigA <= charCode && charCode <= bigZ) {
        return charCode - bigA;
      }
      if (littleA <= charCode && charCode <= littleZ) {
        return charCode - littleA + littleOffset;
      }
      if (zero <= charCode && charCode <= nine) {
        return charCode - zero + numberOffset;
      }
      if (charCode == plus) {
        return 62;
      }
      if (charCode == slash) {
        return 63;
      }
      return -1;
    };
  }
});

// ../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/base64-vlq.js
var require_base64_vlq = __commonJS({
  "../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/base64-vlq.js"(exports2) {
    var base642 = require_base64();
    var VLQ_BASE_SHIFT2 = 5;
    var VLQ_BASE2 = 1 << VLQ_BASE_SHIFT2;
    var VLQ_BASE_MASK2 = VLQ_BASE2 - 1;
    var VLQ_CONTINUATION_BIT2 = VLQ_BASE2;
    function toVLQSigned2(aValue) {
      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
    }
    function fromVLQSigned2(aValue) {
      var isNegative = (aValue & 1) === 1;
      var shifted = aValue >> 1;
      return isNegative ? -shifted : shifted;
    }
    exports2.encode = function base64VLQ_encode3(aValue) {
      var encoded = "";
      var digit;
      var vlq = toVLQSigned2(aValue);
      do {
        digit = vlq & VLQ_BASE_MASK2;
        vlq >>>= VLQ_BASE_SHIFT2;
        if (vlq > 0) {
          digit |= VLQ_CONTINUATION_BIT2;
        }
        encoded += base642.encode(digit);
      } while (vlq > 0);
      return encoded;
    };
    exports2.decode = function base64VLQ_decode3(aStr, aIndex, aOutParam) {
      var strLen = aStr.length;
      var result2 = 0;
      var shift = 0;
      var continuation, digit;
      do {
        if (aIndex >= strLen) {
          throw new Error("Expected more digits in base 64 VLQ value.");
        }
        digit = base642.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
          throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        }
        continuation = !!(digit & VLQ_CONTINUATION_BIT2);
        digit &= VLQ_BASE_MASK2;
        result2 = result2 + (digit << shift);
        shift += VLQ_BASE_SHIFT2;
      } while (continuation);
      aOutParam.value = fromVLQSigned2(result2);
      aOutParam.rest = aIndex;
    };
  }
});

// ../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/util.js
var require_util = __commonJS({
  "../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/util.js"(exports2) {
    function getArg(aArgs, aName, aDefaultValue) {
      if (aName in aArgs) {
        return aArgs[aName];
      } else if (arguments.length === 3) {
        return aDefaultValue;
      } else {
        throw new Error('"' + aName + '" is a required argument.');
      }
    }
    exports2.getArg = getArg;
    var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
    var dataUrlRegexp = /^data:.+\,.+$/;
    function urlParse2(aUrl) {
      var match = aUrl.match(urlRegexp);
      if (!match) {
        return null;
      }
      return {
        scheme: match[1],
        auth: match[2],
        host: match[3],
        port: match[4],
        path: match[5]
      };
    }
    exports2.urlParse = urlParse2;
    function urlGenerate(aParsedUrl) {
      var url = "";
      if (aParsedUrl.scheme) {
        url += aParsedUrl.scheme + ":";
      }
      url += "//";
      if (aParsedUrl.auth) {
        url += aParsedUrl.auth + "@";
      }
      if (aParsedUrl.host) {
        url += aParsedUrl.host;
      }
      if (aParsedUrl.port) {
        url += ":" + aParsedUrl.port;
      }
      if (aParsedUrl.path) {
        url += aParsedUrl.path;
      }
      return url;
    }
    exports2.urlGenerate = urlGenerate;
    function normalize2(aPath) {
      var path3 = aPath;
      var url = urlParse2(aPath);
      if (url) {
        if (!url.path) {
          return aPath;
        }
        path3 = url.path;
      }
      var isAbsolute2 = exports2.isAbsolute(path3);
      var parts = path3.split(/\/+/);
      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
        part = parts[i];
        if (part === ".") {
          parts.splice(i, 1);
        } else if (part === "..") {
          up++;
        } else if (up > 0) {
          if (part === "") {
            parts.splice(i + 1, up);
            up = 0;
          } else {
            parts.splice(i, 2);
            up--;
          }
        }
      }
      path3 = parts.join("/");
      if (path3 === "") {
        path3 = isAbsolute2 ? "/" : ".";
      }
      if (url) {
        url.path = path3;
        return urlGenerate(url);
      }
      return path3;
    }
    exports2.normalize = normalize2;
    function join2(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      if (aPath === "") {
        aPath = ".";
      }
      var aPathUrl = urlParse2(aPath);
      var aRootUrl = urlParse2(aRoot);
      if (aRootUrl) {
        aRoot = aRootUrl.path || "/";
      }
      if (aPathUrl && !aPathUrl.scheme) {
        if (aRootUrl) {
          aPathUrl.scheme = aRootUrl.scheme;
        }
        return urlGenerate(aPathUrl);
      }
      if (aPathUrl || aPath.match(dataUrlRegexp)) {
        return aPath;
      }
      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
        aRootUrl.host = aPath;
        return urlGenerate(aRootUrl);
      }
      var joined = aPath.charAt(0) === "/" ? aPath : normalize2(aRoot.replace(/\/+$/, "") + "/" + aPath);
      if (aRootUrl) {
        aRootUrl.path = joined;
        return urlGenerate(aRootUrl);
      }
      return joined;
    }
    exports2.join = join2;
    exports2.isAbsolute = function(aPath) {
      return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
    };
    function relative2(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      aRoot = aRoot.replace(/\/$/, "");
      var level = 0;
      while (aPath.indexOf(aRoot + "/") !== 0) {
        var index = aRoot.lastIndexOf("/");
        if (index < 0) {
          return aPath;
        }
        aRoot = aRoot.slice(0, index);
        if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
          return aPath;
        }
        ++level;
      }
      return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
    }
    exports2.relative = relative2;
    var supportsNullProto = function() {
      var obj = /* @__PURE__ */ Object.create(null);
      return !("__proto__" in obj);
    }();
    function identity(s) {
      return s;
    }
    function toSetString(aStr) {
      if (isProtoString(aStr)) {
        return "$" + aStr;
      }
      return aStr;
    }
    exports2.toSetString = supportsNullProto ? identity : toSetString;
    function fromSetString(aStr) {
      if (isProtoString(aStr)) {
        return aStr.slice(1);
      }
      return aStr;
    }
    exports2.fromSetString = supportsNullProto ? identity : fromSetString;
    function isProtoString(s) {
      if (!s) {
        return false;
      }
      var length2 = s.length;
      if (length2 < 9) {
        return false;
      }
      if (s.charCodeAt(length2 - 1) !== 95 || s.charCodeAt(length2 - 2) !== 95 || s.charCodeAt(length2 - 3) !== 111 || s.charCodeAt(length2 - 4) !== 116 || s.charCodeAt(length2 - 5) !== 111 || s.charCodeAt(length2 - 6) !== 114 || s.charCodeAt(length2 - 7) !== 112 || s.charCodeAt(length2 - 8) !== 95 || s.charCodeAt(length2 - 9) !== 95) {
        return false;
      }
      for (var i = length2 - 10; i >= 0; i--) {
        if (s.charCodeAt(i) !== 36) {
          return false;
        }
      }
      return true;
    }
    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
      var cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0 || onlyCompareOriginal) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports2.compareByOriginalPositions = compareByOriginalPositions;
    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0 || onlyCompareGenerated) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports2.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
    function strcmp(aStr1, aStr2) {
      if (aStr1 === aStr2) {
        return 0;
      }
      if (aStr1 === null) {
        return 1;
      }
      if (aStr2 === null) {
        return -1;
      }
      if (aStr1 > aStr2) {
        return 1;
      }
      return -1;
    }
    function compareByGeneratedPositionsInflated(mappingA, mappingB) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports2.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
    function parseSourceMapInput(str) {
      return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
    }
    exports2.parseSourceMapInput = parseSourceMapInput;
    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
      sourceURL = sourceURL || "";
      if (sourceRoot) {
        if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
          sourceRoot += "/";
        }
        sourceURL = sourceRoot + sourceURL;
      }
      if (sourceMapURL) {
        var parsed = urlParse2(sourceMapURL);
        if (!parsed) {
          throw new Error("sourceMapURL could not be parsed");
        }
        if (parsed.path) {
          var index = parsed.path.lastIndexOf("/");
          if (index >= 0) {
            parsed.path = parsed.path.substring(0, index + 1);
          }
        }
        sourceURL = join2(urlGenerate(parsed), sourceURL);
      }
      return normalize2(sourceURL);
    }
    exports2.computeSourceURL = computeSourceURL;
  }
});

// ../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/array-set.js
var require_array_set = __commonJS({
  "../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/array-set.js"(exports2) {
    var util2 = require_util();
    var has3 = Object.prototype.hasOwnProperty;
    var hasNativeMap2 = typeof Map !== "undefined";
    function ArraySet2() {
      this._array = [];
      this._set = hasNativeMap2 ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
    }
    ArraySet2.fromArray = function ArraySet_fromArray3(aArray, aAllowDuplicates) {
      var set = new ArraySet2();
      for (var i = 0, len = aArray.length; i < len; i++) {
        set.add(aArray[i], aAllowDuplicates);
      }
      return set;
    };
    ArraySet2.prototype.size = function ArraySet_size3() {
      return hasNativeMap2 ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    };
    ArraySet2.prototype.add = function ArraySet_add3(aStr, aAllowDuplicates) {
      var sStr = hasNativeMap2 ? aStr : util2.toSetString(aStr);
      var isDuplicate = hasNativeMap2 ? this.has(aStr) : has3.call(this._set, sStr);
      var idx = this._array.length;
      if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
      }
      if (!isDuplicate) {
        if (hasNativeMap2) {
          this._set.set(aStr, idx);
        } else {
          this._set[sStr] = idx;
        }
      }
    };
    ArraySet2.prototype.has = function ArraySet_has3(aStr) {
      if (hasNativeMap2) {
        return this._set.has(aStr);
      } else {
        var sStr = util2.toSetString(aStr);
        return has3.call(this._set, sStr);
      }
    };
    ArraySet2.prototype.indexOf = function ArraySet_indexOf3(aStr) {
      if (hasNativeMap2) {
        var idx = this._set.get(aStr);
        if (idx >= 0) {
          return idx;
        }
      } else {
        var sStr = util2.toSetString(aStr);
        if (has3.call(this._set, sStr)) {
          return this._set[sStr];
        }
      }
      throw new Error('"' + aStr + '" is not in the set.');
    };
    ArraySet2.prototype.at = function ArraySet_at3(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
      }
      throw new Error("No element indexed by " + aIdx);
    };
    ArraySet2.prototype.toArray = function ArraySet_toArray3() {
      return this._array.slice();
    };
    exports2.ArraySet = ArraySet2;
  }
});

// ../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/mapping-list.js
var require_mapping_list = __commonJS({
  "../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/mapping-list.js"(exports2) {
    var util2 = require_util();
    function generatedPositionAfter2(mappingA, mappingB) {
      var lineA = mappingA.generatedLine;
      var lineB = mappingB.generatedLine;
      var columnA = mappingA.generatedColumn;
      var columnB = mappingB.generatedColumn;
      return lineB > lineA || lineB == lineA && columnB >= columnA || util2.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
    }
    function MappingList2() {
      this._array = [];
      this._sorted = true;
      this._last = { generatedLine: -1, generatedColumn: 0 };
    }
    MappingList2.prototype.unsortedForEach = function MappingList_forEach3(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };
    MappingList2.prototype.add = function MappingList_add3(aMapping) {
      if (generatedPositionAfter2(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
      } else {
        this._sorted = false;
        this._array.push(aMapping);
      }
    };
    MappingList2.prototype.toArray = function MappingList_toArray3() {
      if (!this._sorted) {
        this._array.sort(util2.compareByGeneratedPositionsInflated);
        this._sorted = true;
      }
      return this._array;
    };
    exports2.MappingList = MappingList2;
  }
});

// ../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-map-generator.js
var require_source_map_generator = __commonJS({
  "../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-map-generator.js"(exports2) {
    var base64VLQ = require_base64_vlq();
    var util2 = require_util();
    var ArraySet2 = require_array_set().ArraySet;
    var MappingList2 = require_mapping_list().MappingList;
    function SourceMapGenerator2(aArgs) {
      if (!aArgs) {
        aArgs = {};
      }
      this._file = util2.getArg(aArgs, "file", null);
      this._sourceRoot = util2.getArg(aArgs, "sourceRoot", null);
      this._skipValidation = util2.getArg(aArgs, "skipValidation", false);
      this._sources = new ArraySet2();
      this._names = new ArraySet2();
      this._mappings = new MappingList2();
      this._sourcesContents = null;
    }
    SourceMapGenerator2.prototype._version = 3;
    SourceMapGenerator2.fromSourceMap = function SourceMapGenerator_fromSourceMap3(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator2({
        file: aSourceMapConsumer.file,
        sourceRoot
      });
      aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };
        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util2.relative(sourceRoot, newMapping.source);
          }
          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };
          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }
        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var sourceRelative = sourceFile;
        if (sourceRoot !== null) {
          sourceRelative = util2.relative(sourceRoot, sourceFile);
        }
        if (!generator._sources.has(sourceRelative)) {
          generator._sources.add(sourceRelative);
        }
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };
    SourceMapGenerator2.prototype.addMapping = function SourceMapGenerator_addMapping3(aArgs) {
      var generated = util2.getArg(aArgs, "generated");
      var original = util2.getArg(aArgs, "original", null);
      var source = util2.getArg(aArgs, "source", null);
      var name = util2.getArg(aArgs, "name", null);
      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }
      if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
          this._sources.add(source);
        }
      }
      if (name != null) {
        name = String(name);
        if (!this._names.has(name)) {
          this._names.add(name);
        }
      }
      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source,
        name
      });
    };
    SourceMapGenerator2.prototype.setSourceContent = function SourceMapGenerator_setSourceContent3(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util2.relative(this._sourceRoot, source);
      }
      if (aSourceContent != null) {
        if (!this._sourcesContents) {
          this._sourcesContents = /* @__PURE__ */ Object.create(null);
        }
        this._sourcesContents[util2.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        delete this._sourcesContents[util2.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };
    SourceMapGenerator2.prototype.applySourceMap = function SourceMapGenerator_applySourceMap3(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(`SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`);
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      if (sourceRoot != null) {
        sourceFile = util2.relative(sourceRoot, sourceFile);
      }
      var newSources = new ArraySet2();
      var newNames = new ArraySet2();
      this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util2.join(aSourceMapPath, mapping.source);
            }
            if (sourceRoot != null) {
              mapping.source = util2.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }
        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }
        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }
      }, this);
      this._sources = newSources;
      this._names = newNames;
      aSourceMapConsumer.sources.forEach(function(sourceFile2) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile2 = util2.join(aSourceMapPath, sourceFile2);
          }
          if (sourceRoot != null) {
            sourceFile2 = util2.relative(sourceRoot, sourceFile2);
          }
          this.setSourceContent(sourceFile2, content);
        }
      }, this);
    };
    SourceMapGenerator2.prototype._validateMapping = function SourceMapGenerator_validateMapping3(aGenerated, aOriginal, aSource, aName) {
      if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
        throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
      }
      if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
        return;
      } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
        return;
      } else {
        throw new Error("Invalid mapping: " + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };
    SourceMapGenerator2.prototype._serializeMappings = function SourceMapGenerator_serializeMappings3() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result2 = "";
      var next;
      var mapping;
      var nameIdx;
      var sourceIdx;
      var mappings = this._mappings.toArray();
      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];
        next = "";
        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            next += ";";
            previousGeneratedLine++;
          }
        } else {
          if (i > 0) {
            if (!util2.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            next += ",";
          }
        }
        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;
        if (mapping.source != null) {
          sourceIdx = this._sources.indexOf(mapping.source);
          next += base64VLQ.encode(sourceIdx - previousSource);
          previousSource = sourceIdx;
          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;
          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;
          if (mapping.name != null) {
            nameIdx = this._names.indexOf(mapping.name);
            next += base64VLQ.encode(nameIdx - previousName);
            previousName = nameIdx;
          }
        }
        result2 += next;
      }
      return result2;
    };
    SourceMapGenerator2.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent3(aSources, aSourceRoot) {
      return aSources.map(function(source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util2.relative(aSourceRoot, source);
        }
        var key = util2.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
      }, this);
    };
    SourceMapGenerator2.prototype.toJSON = function SourceMapGenerator_toJSON3() {
      var map2 = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map2.file = this._file;
      }
      if (this._sourceRoot != null) {
        map2.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map2.sourcesContent = this._generateSourcesContent(map2.sources, map2.sourceRoot);
      }
      return map2;
    };
    SourceMapGenerator2.prototype.toString = function SourceMapGenerator_toString3() {
      return JSON.stringify(this.toJSON());
    };
    exports2.SourceMapGenerator = SourceMapGenerator2;
  }
});

// ../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/binary-search.js
var require_binary_search = __commonJS({
  "../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/binary-search.js"(exports2) {
    exports2.GREATEST_LOWER_BOUND = 1;
    exports2.LEAST_UPPER_BOUND = 2;
    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
      var mid = Math.floor((aHigh - aLow) / 2) + aLow;
      var cmp = aCompare(aNeedle, aHaystack[mid], true);
      if (cmp === 0) {
        return mid;
      } else if (cmp > 0) {
        if (aHigh - mid > 1) {
          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports2.LEAST_UPPER_BOUND) {
          return aHigh < aHaystack.length ? aHigh : -1;
        } else {
          return mid;
        }
      } else {
        if (mid - aLow > 1) {
          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports2.LEAST_UPPER_BOUND) {
          return mid;
        } else {
          return aLow < 0 ? -1 : aLow;
        }
      }
    }
    exports2.search = function search(aNeedle, aHaystack, aCompare, aBias) {
      if (aHaystack.length === 0) {
        return -1;
      }
      var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports2.GREATEST_LOWER_BOUND);
      if (index < 0) {
        return -1;
      }
      while (index - 1 >= 0) {
        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
          break;
        }
        --index;
      }
      return index;
    };
  }
});

// ../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/quick-sort.js
var require_quick_sort = __commonJS({
  "../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/quick-sort.js"(exports2) {
    function swap2(ary, x, y) {
      var temp = ary[x];
      ary[x] = ary[y];
      ary[y] = temp;
    }
    function randomIntInRange2(low, high) {
      return Math.round(low + Math.random() * (high - low));
    }
    function doQuickSort2(ary, comparator, p, r) {
      if (p < r) {
        var pivotIndex = randomIntInRange2(p, r);
        var i = p - 1;
        swap2(ary, pivotIndex, r);
        var pivot = ary[r];
        for (var j = p; j < r; j++) {
          if (comparator(ary[j], pivot) <= 0) {
            i += 1;
            swap2(ary, i, j);
          }
        }
        swap2(ary, i + 1, j);
        var q = i + 1;
        doQuickSort2(ary, comparator, p, q - 1);
        doQuickSort2(ary, comparator, q + 1, r);
      }
    }
    exports2.quickSort = function(ary, comparator) {
      doQuickSort2(ary, comparator, 0, ary.length - 1);
    };
  }
});

// ../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-map-consumer.js
var require_source_map_consumer = __commonJS({
  "../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-map-consumer.js"(exports2) {
    var util2 = require_util();
    var binarySearch2 = require_binary_search();
    var ArraySet2 = require_array_set().ArraySet;
    var base64VLQ = require_base64_vlq();
    var quickSort2 = require_quick_sort().quickSort;
    function SourceMapConsumer2(aSourceMap, aSourceMapURL) {
      var sourceMap2 = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap2 = util2.parseSourceMapInput(aSourceMap);
      }
      return sourceMap2.sections != null ? new IndexedSourceMapConsumer2(sourceMap2, aSourceMapURL) : new BasicSourceMapConsumer2(sourceMap2, aSourceMapURL);
    }
    SourceMapConsumer2.fromSourceMap = function(aSourceMap, aSourceMapURL) {
      return BasicSourceMapConsumer2.fromSourceMap(aSourceMap, aSourceMapURL);
    };
    SourceMapConsumer2.prototype._version = 3;
    SourceMapConsumer2.prototype.__generatedMappings = null;
    Object.defineProperty(SourceMapConsumer2.prototype, "_generatedMappings", {
      configurable: true,
      enumerable: true,
      get: function() {
        if (!this.__generatedMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__generatedMappings;
      }
    });
    SourceMapConsumer2.prototype.__originalMappings = null;
    Object.defineProperty(SourceMapConsumer2.prototype, "_originalMappings", {
      configurable: true,
      enumerable: true,
      get: function() {
        if (!this.__originalMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__originalMappings;
      }
    });
    SourceMapConsumer2.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator3(aStr, index) {
      var c = aStr.charAt(index);
      return c === ";" || c === ",";
    };
    SourceMapConsumer2.prototype._parseMappings = function SourceMapConsumer_parseMappings5(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    };
    SourceMapConsumer2.GENERATED_ORDER = 1;
    SourceMapConsumer2.ORIGINAL_ORDER = 2;
    SourceMapConsumer2.GREATEST_LOWER_BOUND = 1;
    SourceMapConsumer2.LEAST_UPPER_BOUND = 2;
    SourceMapConsumer2.prototype.eachMapping = function SourceMapConsumer_eachMapping3(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer2.GENERATED_ORDER;
      var mappings;
      switch (order) {
        case SourceMapConsumer2.GENERATED_ORDER:
          mappings = this._generatedMappings;
          break;
        case SourceMapConsumer2.ORIGINAL_ORDER:
          mappings = this._originalMappings;
          break;
        default:
          throw new Error("Unknown order of iteration.");
      }
      var sourceRoot = this.sourceRoot;
      mappings.map(function(mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        source = util2.computeSourceURL(sourceRoot, source, this._sourceMapURL);
        return {
          source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    };
    SourceMapConsumer2.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor3(aArgs) {
      var line = util2.getArg(aArgs, "line");
      var needle = {
        source: util2.getArg(aArgs, "source"),
        originalLine: line,
        originalColumn: util2.getArg(aArgs, "column", 0)
      };
      needle.source = this._findSourceIndex(needle.source);
      if (needle.source < 0) {
        return [];
      }
      var mappings = [];
      var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util2.compareByOriginalPositions, binarySearch2.LEAST_UPPER_BOUND);
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (aArgs.column === void 0) {
          var originalLine = mapping.originalLine;
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util2.getArg(mapping, "generatedLine", null),
              column: util2.getArg(mapping, "generatedColumn", null),
              lastColumn: util2.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index];
          }
        } else {
          var originalColumn = mapping.originalColumn;
          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util2.getArg(mapping, "generatedLine", null),
              column: util2.getArg(mapping, "generatedColumn", null),
              lastColumn: util2.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index];
          }
        }
      }
      return mappings;
    };
    exports2.SourceMapConsumer = SourceMapConsumer2;
    function BasicSourceMapConsumer2(aSourceMap, aSourceMapURL) {
      var sourceMap2 = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap2 = util2.parseSourceMapInput(aSourceMap);
      }
      var version2 = util2.getArg(sourceMap2, "version");
      var sources = util2.getArg(sourceMap2, "sources");
      var names = util2.getArg(sourceMap2, "names", []);
      var sourceRoot = util2.getArg(sourceMap2, "sourceRoot", null);
      var sourcesContent = util2.getArg(sourceMap2, "sourcesContent", null);
      var mappings = util2.getArg(sourceMap2, "mappings");
      var file = util2.getArg(sourceMap2, "file", null);
      if (version2 != this._version) {
        throw new Error("Unsupported version: " + version2);
      }
      if (sourceRoot) {
        sourceRoot = util2.normalize(sourceRoot);
      }
      sources = sources.map(String).map(util2.normalize).map(function(source) {
        return sourceRoot && util2.isAbsolute(sourceRoot) && util2.isAbsolute(source) ? util2.relative(sourceRoot, source) : source;
      });
      this._names = ArraySet2.fromArray(names.map(String), true);
      this._sources = ArraySet2.fromArray(sources, true);
      this._absoluteSources = this._sources.toArray().map(function(s) {
        return util2.computeSourceURL(sourceRoot, s, aSourceMapURL);
      });
      this.sourceRoot = sourceRoot;
      this.sourcesContent = sourcesContent;
      this._mappings = mappings;
      this._sourceMapURL = aSourceMapURL;
      this.file = file;
    }
    BasicSourceMapConsumer2.prototype = Object.create(SourceMapConsumer2.prototype);
    BasicSourceMapConsumer2.prototype.consumer = SourceMapConsumer2;
    BasicSourceMapConsumer2.prototype._findSourceIndex = function(aSource) {
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util2.relative(this.sourceRoot, relativeSource);
      }
      if (this._sources.has(relativeSource)) {
        return this._sources.indexOf(relativeSource);
      }
      var i;
      for (i = 0; i < this._absoluteSources.length; ++i) {
        if (this._absoluteSources[i] == aSource) {
          return i;
        }
      }
      return -1;
    };
    BasicSourceMapConsumer2.fromSourceMap = function SourceMapConsumer_fromSourceMap3(aSourceMap, aSourceMapURL) {
      var smc = Object.create(BasicSourceMapConsumer2.prototype);
      var names = smc._names = ArraySet2.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet2.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
      smc.file = aSourceMap._file;
      smc._sourceMapURL = aSourceMapURL;
      smc._absoluteSources = smc._sources.toArray().map(function(s) {
        return util2.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
      });
      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];
      for (var i = 0, length2 = generatedMappings.length; i < length2; i++) {
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping2();
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;
        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;
          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }
          destOriginalMappings.push(destMapping);
        }
        destGeneratedMappings.push(destMapping);
      }
      quickSort2(smc.__originalMappings, util2.compareByOriginalPositions);
      return smc;
    };
    BasicSourceMapConsumer2.prototype._version = 3;
    Object.defineProperty(BasicSourceMapConsumer2.prototype, "sources", {
      get: function() {
        return this._absoluteSources.slice();
      }
    });
    function Mapping2() {
      this.generatedLine = 0;
      this.generatedColumn = 0;
      this.source = null;
      this.originalLine = null;
      this.originalColumn = null;
      this.name = null;
    }
    BasicSourceMapConsumer2.prototype._parseMappings = function SourceMapConsumer_parseMappings5(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length2 = aStr.length;
      var index = 0;
      var cachedSegments = {};
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping, str, segment, end, value;
      while (index < length2) {
        if (aStr.charAt(index) === ";") {
          generatedLine++;
          index++;
          previousGeneratedColumn = 0;
        } else if (aStr.charAt(index) === ",") {
          index++;
        } else {
          mapping = new Mapping2();
          mapping.generatedLine = generatedLine;
          for (end = index; end < length2; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          str = aStr.slice(index, end);
          segment = cachedSegments[str];
          if (segment) {
            index += str.length;
          } else {
            segment = [];
            while (index < end) {
              base64VLQ.decode(aStr, index, temp);
              value = temp.value;
              index = temp.rest;
              segment.push(value);
            }
            if (segment.length === 2) {
              throw new Error("Found a source, but no line and column");
            }
            if (segment.length === 3) {
              throw new Error("Found a source and line, but no column");
            }
            cachedSegments[str] = segment;
          }
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;
          if (segment.length > 1) {
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            mapping.originalLine += 1;
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;
            if (segment.length > 4) {
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }
          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === "number") {
            originalMappings.push(mapping);
          }
        }
      }
      quickSort2(generatedMappings, util2.compareByGeneratedPositionsDeflated);
      this.__generatedMappings = generatedMappings;
      quickSort2(originalMappings, util2.compareByOriginalPositions);
      this.__originalMappings = originalMappings;
    };
    BasicSourceMapConsumer2.prototype._findMapping = function SourceMapConsumer_findMapping3(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
      if (aNeedle[aLineName] <= 0) {
        throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
      }
      return binarySearch2.search(aNeedle, aMappings, aComparator, aBias);
    };
    BasicSourceMapConsumer2.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans3() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];
          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }
        mapping.lastGeneratedColumn = Infinity;
      }
    };
    BasicSourceMapConsumer2.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor3(aArgs) {
      var needle = {
        generatedLine: util2.getArg(aArgs, "line"),
        generatedColumn: util2.getArg(aArgs, "column")
      };
      var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util2.compareByGeneratedPositionsDeflated, util2.getArg(aArgs, "bias", SourceMapConsumer2.GREATEST_LOWER_BOUND));
      if (index >= 0) {
        var mapping = this._generatedMappings[index];
        if (mapping.generatedLine === needle.generatedLine) {
          var source = util2.getArg(mapping, "source", null);
          if (source !== null) {
            source = this._sources.at(source);
            source = util2.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
          }
          var name = util2.getArg(mapping, "name", null);
          if (name !== null) {
            name = this._names.at(name);
          }
          return {
            source,
            line: util2.getArg(mapping, "originalLine", null),
            column: util2.getArg(mapping, "originalColumn", null),
            name
          };
        }
      }
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };
    BasicSourceMapConsumer2.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources3() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
        return sc == null;
      });
    };
    BasicSourceMapConsumer2.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor3(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }
      var index = this._findSourceIndex(aSource);
      if (index >= 0) {
        return this.sourcesContent[index];
      }
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util2.relative(this.sourceRoot, relativeSource);
      }
      var url;
      if (this.sourceRoot != null && (url = util2.urlParse(this.sourceRoot))) {
        var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
        if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
        }
        if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + relativeSource + '" is not in the SourceMap.');
      }
    };
    BasicSourceMapConsumer2.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor3(aArgs) {
      var source = util2.getArg(aArgs, "source");
      source = this._findSourceIndex(source);
      if (source < 0) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }
      var needle = {
        source,
        originalLine: util2.getArg(aArgs, "line"),
        originalColumn: util2.getArg(aArgs, "column")
      };
      var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util2.compareByOriginalPositions, util2.getArg(aArgs, "bias", SourceMapConsumer2.GREATEST_LOWER_BOUND));
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (mapping.source === needle.source) {
          return {
            line: util2.getArg(mapping, "generatedLine", null),
            column: util2.getArg(mapping, "generatedColumn", null),
            lastColumn: util2.getArg(mapping, "lastGeneratedColumn", null)
          };
        }
      }
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };
    exports2.BasicSourceMapConsumer = BasicSourceMapConsumer2;
    function IndexedSourceMapConsumer2(aSourceMap, aSourceMapURL) {
      var sourceMap2 = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap2 = util2.parseSourceMapInput(aSourceMap);
      }
      var version2 = util2.getArg(sourceMap2, "version");
      var sections = util2.getArg(sourceMap2, "sections");
      if (version2 != this._version) {
        throw new Error("Unsupported version: " + version2);
      }
      this._sources = new ArraySet2();
      this._names = new ArraySet2();
      var lastOffset = {
        line: -1,
        column: 0
      };
      this._sections = sections.map(function(s) {
        if (s.url) {
          throw new Error("Support for url field in sections not implemented.");
        }
        var offset = util2.getArg(s, "offset");
        var offsetLine = util2.getArg(offset, "line");
        var offsetColumn = util2.getArg(offset, "column");
        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
          throw new Error("Section offsets must be ordered and non-overlapping.");
        }
        lastOffset = offset;
        return {
          generatedOffset: {
            generatedLine: offsetLine + 1,
            generatedColumn: offsetColumn + 1
          },
          consumer: new SourceMapConsumer2(util2.getArg(s, "map"), aSourceMapURL)
        };
      });
    }
    IndexedSourceMapConsumer2.prototype = Object.create(SourceMapConsumer2.prototype);
    IndexedSourceMapConsumer2.prototype.constructor = SourceMapConsumer2;
    IndexedSourceMapConsumer2.prototype._version = 3;
    Object.defineProperty(IndexedSourceMapConsumer2.prototype, "sources", {
      get: function() {
        var sources = [];
        for (var i = 0; i < this._sections.length; i++) {
          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
            sources.push(this._sections[i].consumer.sources[j]);
          }
        }
        return sources;
      }
    });
    IndexedSourceMapConsumer2.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor3(aArgs) {
      var needle = {
        generatedLine: util2.getArg(aArgs, "line"),
        generatedColumn: util2.getArg(aArgs, "column")
      };
      var sectionIndex = binarySearch2.search(needle, this._sections, function(needle2, section2) {
        var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }
        return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
      });
      var section = this._sections[sectionIndex];
      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }
      return section.consumer.originalPositionFor({
        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        bias: aArgs.bias
      });
    };
    IndexedSourceMapConsumer2.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources3() {
      return this._sections.every(function(s) {
        return s.consumer.hasContentsOfAllSources();
      });
    };
    IndexedSourceMapConsumer2.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor3(aSource, nullOnMissing) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };
    IndexedSourceMapConsumer2.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor3(aArgs) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        if (section.consumer._findSourceIndex(util2.getArg(aArgs, "source")) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
          };
          return ret;
        }
      }
      return {
        line: null,
        column: null
      };
    };
    IndexedSourceMapConsumer2.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings3(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[j];
          var source = section.consumer._sources.at(mapping.source);
          source = util2.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
          this._sources.add(source);
          source = this._sources.indexOf(source);
          var name = null;
          if (mapping.name) {
            name = section.consumer._names.at(mapping.name);
            this._names.add(name);
            name = this._names.indexOf(name);
          }
          var adjustedMapping = {
            source,
            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name
          };
          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === "number") {
            this.__originalMappings.push(adjustedMapping);
          }
        }
      }
      quickSort2(this.__generatedMappings, util2.compareByGeneratedPositionsDeflated);
      quickSort2(this.__originalMappings, util2.compareByOriginalPositions);
    };
    exports2.IndexedSourceMapConsumer = IndexedSourceMapConsumer2;
  }
});

// ../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-node.js
var require_source_node = __commonJS({
  "../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/lib/source-node.js"(exports2) {
    var SourceMapGenerator2 = require_source_map_generator().SourceMapGenerator;
    var util2 = require_util();
    var REGEX_NEWLINE2 = /(\r?\n)/;
    var NEWLINE_CODE2 = 10;
    var isSourceNode2 = "$$$isSourceNode$$$";
    function SourceNode2(aLine, aColumn, aSource, aChunks, aName) {
      this.children = [];
      this.sourceContents = {};
      this.line = aLine == null ? null : aLine;
      this.column = aColumn == null ? null : aColumn;
      this.source = aSource == null ? null : aSource;
      this.name = aName == null ? null : aName;
      this[isSourceNode2] = true;
      if (aChunks != null)
        this.add(aChunks);
    }
    SourceNode2.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap3(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      var node2 = new SourceNode2();
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE2);
      var remainingLinesIndex = 0;
      var shiftNextLine = function() {
        var lineContents = getNextLine();
        var newLine = getNextLine() || "";
        return lineContents + newLine;
        function getNextLine() {
          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
        }
      };
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;
      var lastMapping = null;
      aSourceMapConsumer.eachMapping(function(mapping) {
        if (lastMapping !== null) {
          if (lastGeneratedLine < mapping.generatedLine) {
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
          } else {
            var nextLine = remainingLines[remainingLinesIndex] || "";
            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            lastMapping = mapping;
            return;
          }
        }
        while (lastGeneratedLine < mapping.generatedLine) {
          node2.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[remainingLinesIndex] || "";
          node2.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      if (remainingLinesIndex < remainingLines.length) {
        if (lastMapping) {
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        node2.add(remainingLines.splice(remainingLinesIndex).join(""));
      }
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util2.join(aRelativePath, sourceFile);
          }
          node2.setSourceContent(sourceFile, content);
        }
      });
      return node2;
      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === void 0) {
          node2.add(code);
        } else {
          var source = aRelativePath ? util2.join(aRelativePath, mapping.source) : mapping.source;
          node2.add(new SourceNode2(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
        }
      }
    };
    SourceNode2.prototype.add = function SourceNode_add3(aChunk) {
      if (Array.isArray(aChunk)) {
        aChunk.forEach(function(chunk) {
          this.add(chunk);
        }, this);
      } else if (aChunk[isSourceNode2] || typeof aChunk === "string") {
        if (aChunk) {
          this.children.push(aChunk);
        }
      } else {
        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
      }
      return this;
    };
    SourceNode2.prototype.prepend = function SourceNode_prepend3(aChunk) {
      if (Array.isArray(aChunk)) {
        for (var i = aChunk.length - 1; i >= 0; i--) {
          this.prepend(aChunk[i]);
        }
      } else if (aChunk[isSourceNode2] || typeof aChunk === "string") {
        this.children.unshift(aChunk);
      } else {
        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
      }
      return this;
    };
    SourceNode2.prototype.walk = function SourceNode_walk3(aFn) {
      var chunk;
      for (var i = 0, len = this.children.length; i < len; i++) {
        chunk = this.children[i];
        if (chunk[isSourceNode2]) {
          chunk.walk(aFn);
        } else {
          if (chunk !== "") {
            aFn(chunk, {
              source: this.source,
              line: this.line,
              column: this.column,
              name: this.name
            });
          }
        }
      }
    };
    SourceNode2.prototype.join = function SourceNode_join3(aSep) {
      var newChildren;
      var i;
      var len = this.children.length;
      if (len > 0) {
        newChildren = [];
        for (i = 0; i < len - 1; i++) {
          newChildren.push(this.children[i]);
          newChildren.push(aSep);
        }
        newChildren.push(this.children[i]);
        this.children = newChildren;
      }
      return this;
    };
    SourceNode2.prototype.replaceRight = function SourceNode_replaceRight3(aPattern, aReplacement) {
      var lastChild = this.children[this.children.length - 1];
      if (lastChild[isSourceNode2]) {
        lastChild.replaceRight(aPattern, aReplacement);
      } else if (typeof lastChild === "string") {
        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
      } else {
        this.children.push("".replace(aPattern, aReplacement));
      }
      return this;
    };
    SourceNode2.prototype.setSourceContent = function SourceNode_setSourceContent3(aSourceFile, aSourceContent) {
      this.sourceContents[util2.toSetString(aSourceFile)] = aSourceContent;
    };
    SourceNode2.prototype.walkSourceContents = function SourceNode_walkSourceContents3(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode2]) {
          this.children[i].walkSourceContents(aFn);
        }
      }
      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util2.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };
    SourceNode2.prototype.toString = function SourceNode_toString3() {
      var str = "";
      this.walk(function(chunk) {
        str += chunk;
      });
      return str;
    };
    SourceNode2.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap3(aArgs) {
      var generated = {
        code: "",
        line: 1,
        column: 0
      };
      var map2 = new SourceMapGenerator2(aArgs);
      var sourceMappingActive = false;
      var lastOriginalSource = null;
      var lastOriginalLine = null;
      var lastOriginalColumn = null;
      var lastOriginalName = null;
      this.walk(function(chunk, original) {
        generated.code += chunk;
        if (original.source !== null && original.line !== null && original.column !== null) {
          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
            map2.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
          lastOriginalSource = original.source;
          lastOriginalLine = original.line;
          lastOriginalColumn = original.column;
          lastOriginalName = original.name;
          sourceMappingActive = true;
        } else if (sourceMappingActive) {
          map2.addMapping({
            generated: {
              line: generated.line,
              column: generated.column
            }
          });
          lastOriginalSource = null;
          sourceMappingActive = false;
        }
        for (var idx = 0, length2 = chunk.length; idx < length2; idx++) {
          if (chunk.charCodeAt(idx) === NEWLINE_CODE2) {
            generated.line++;
            generated.column = 0;
            if (idx + 1 === length2) {
              lastOriginalSource = null;
              sourceMappingActive = false;
            } else if (sourceMappingActive) {
              map2.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
          } else {
            generated.column++;
          }
        }
      });
      this.walkSourceContents(function(sourceFile, sourceContent) {
        map2.setSourceContent(sourceFile, sourceContent);
      });
      return { code: generated.code, map: map2 };
    };
    exports2.SourceNode = SourceNode2;
  }
});

// ../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/source-map.js
var require_source_map = __commonJS({
  "../../node_modules/.pnpm/source-map@0.6.1/node_modules/source-map/source-map.js"(exports2) {
    exports2.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    exports2.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;
    exports2.SourceNode = require_source_node().SourceNode;
  }
});

// ../../node_modules/.pnpm/estree-walker@2.0.2/node_modules/estree-walker/dist/esm/estree-walker.js
var estree_walker_exports = {};
__export(estree_walker_exports, {
  asyncWalk: () => asyncWalk,
  walk: () => walk
});
function walk(ast, { enter, leave }) {
  const instance = new SyncWalker(enter, leave);
  return instance.visit(ast, null);
}
async function asyncWalk(ast, { enter, leave }) {
  const instance = new AsyncWalker(enter, leave);
  return await instance.visit(ast, null);
}
var WalkerBase, SyncWalker, AsyncWalker;
var init_estree_walker = __esm({
  "../../node_modules/.pnpm/estree-walker@2.0.2/node_modules/estree-walker/dist/esm/estree-walker.js"() {
    WalkerBase = class {
      constructor() {
        this.should_skip = false;
        this.should_remove = false;
        this.replacement = null;
        this.context = {
          skip: () => this.should_skip = true,
          remove: () => this.should_remove = true,
          replace: (node2) => this.replacement = node2
        };
      }
      replace(parent, prop, index, node2) {
        if (parent) {
          if (index !== null) {
            parent[prop][index] = node2;
          } else {
            parent[prop] = node2;
          }
        }
      }
      remove(parent, prop, index) {
        if (parent) {
          if (index !== null) {
            parent[prop].splice(index, 1);
          } else {
            delete parent[prop];
          }
        }
      }
    };
    SyncWalker = class extends WalkerBase {
      constructor(enter, leave) {
        super();
        this.enter = enter;
        this.leave = leave;
      }
      visit(node2, parent, prop, index) {
        if (node2) {
          if (this.enter) {
            const _should_skip = this.should_skip;
            const _should_remove = this.should_remove;
            const _replacement = this.replacement;
            this.should_skip = false;
            this.should_remove = false;
            this.replacement = null;
            this.enter.call(this.context, node2, parent, prop, index);
            if (this.replacement) {
              node2 = this.replacement;
              this.replace(parent, prop, index, node2);
            }
            if (this.should_remove) {
              this.remove(parent, prop, index);
            }
            const skipped = this.should_skip;
            const removed = this.should_remove;
            this.should_skip = _should_skip;
            this.should_remove = _should_remove;
            this.replacement = _replacement;
            if (skipped)
              return node2;
            if (removed)
              return null;
          }
          for (const key in node2) {
            const value = node2[key];
            if (typeof value !== "object") {
              continue;
            } else if (Array.isArray(value)) {
              for (let i = 0; i < value.length; i += 1) {
                if (value[i] !== null && typeof value[i].type === "string") {
                  if (!this.visit(value[i], node2, key, i)) {
                    i--;
                  }
                }
              }
            } else if (value !== null && typeof value.type === "string") {
              this.visit(value, node2, key, null);
            }
          }
          if (this.leave) {
            const _replacement = this.replacement;
            const _should_remove = this.should_remove;
            this.replacement = null;
            this.should_remove = false;
            this.leave.call(this.context, node2, parent, prop, index);
            if (this.replacement) {
              node2 = this.replacement;
              this.replace(parent, prop, index, node2);
            }
            if (this.should_remove) {
              this.remove(parent, prop, index);
            }
            const removed = this.should_remove;
            this.replacement = _replacement;
            this.should_remove = _should_remove;
            if (removed)
              return null;
          }
        }
        return node2;
      }
    };
    AsyncWalker = class extends WalkerBase {
      constructor(enter, leave) {
        super();
        this.enter = enter;
        this.leave = leave;
      }
      async visit(node2, parent, prop, index) {
        if (node2) {
          if (this.enter) {
            const _should_skip = this.should_skip;
            const _should_remove = this.should_remove;
            const _replacement = this.replacement;
            this.should_skip = false;
            this.should_remove = false;
            this.replacement = null;
            await this.enter.call(this.context, node2, parent, prop, index);
            if (this.replacement) {
              node2 = this.replacement;
              this.replace(parent, prop, index, node2);
            }
            if (this.should_remove) {
              this.remove(parent, prop, index);
            }
            const skipped = this.should_skip;
            const removed = this.should_remove;
            this.should_skip = _should_skip;
            this.should_remove = _should_remove;
            this.replacement = _replacement;
            if (skipped)
              return node2;
            if (removed)
              return null;
          }
          for (const key in node2) {
            const value = node2[key];
            if (typeof value !== "object") {
              continue;
            } else if (Array.isArray(value)) {
              for (let i = 0; i < value.length; i += 1) {
                if (value[i] !== null && typeof value[i].type === "string") {
                  if (!await this.visit(value[i], node2, key, i)) {
                    i--;
                  }
                }
              }
            } else if (value !== null && typeof value.type === "string") {
              await this.visit(value, node2, key, null);
            }
          }
          if (this.leave) {
            const _replacement = this.replacement;
            const _should_remove = this.should_remove;
            this.replacement = null;
            this.should_remove = false;
            await this.leave.call(this.context, node2, parent, prop, index);
            if (this.replacement) {
              node2 = this.replacement;
              this.replace(parent, prop, index, node2);
            }
            if (this.should_remove) {
              this.remove(parent, prop, index);
            }
            const removed = this.should_remove;
            this.replacement = _replacement;
            this.should_remove = _should_remove;
            if (removed)
              return null;
          }
        }
        return node2;
      }
    };
  }
});

// ../../node_modules/.pnpm/@vue+compiler-core@3.2.31/node_modules/@vue/compiler-core/dist/compiler-core.cjs.prod.js
var require_compiler_core_cjs_prod = __commonJS({
  "../../node_modules/.pnpm/@vue+compiler-core@3.2.31/node_modules/@vue/compiler-core/dist/compiler-core.cjs.prod.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var shared = require_shared();
    var parser2 = require_lib();
    var sourceMap2 = require_source_map();
    var estreeWalker = (init_estree_walker(), __toCommonJS(estree_walker_exports));
    function defaultOnError2(error2) {
      throw error2;
    }
    function defaultOnWarn2(msg) {
    }
    function createCompilerError2(code, loc, messages, additionalMessage) {
      const msg = (messages || errorMessages2)[code] + (additionalMessage || ``);
      const error2 = new SyntaxError(String(msg));
      error2.code = code;
      error2.loc = loc;
      return error2;
    }
    var errorMessages2 = {
      [0]: "Illegal comment.",
      [1]: "CDATA section is allowed only in XML context.",
      [2]: "Duplicate attribute.",
      [3]: "End tag cannot have attributes.",
      [4]: "Illegal '/' in tags.",
      [5]: "Unexpected EOF in tag.",
      [6]: "Unexpected EOF in CDATA section.",
      [7]: "Unexpected EOF in comment.",
      [8]: "Unexpected EOF in script.",
      [9]: "Unexpected EOF in tag.",
      [10]: "Incorrectly closed comment.",
      [11]: "Incorrectly opened comment.",
      [12]: "Illegal tag name. Use '&lt;' to print '<'.",
      [13]: "Attribute value was expected.",
      [14]: "End tag name was expected.",
      [15]: "Whitespace was expected.",
      [16]: "Unexpected '<!--' in comment.",
      [17]: `Attribute name cannot contain U+0022 ("), U+0027 ('), and U+003C (<).`,
      [18]: "Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",
      [19]: "Attribute name cannot start with '='.",
      [21]: "'<?' is allowed only in XML context.",
      [20]: `Unexpected null character.`,
      [22]: "Illegal '/' in tags.",
      [23]: "Invalid end tag.",
      [24]: "Element is missing end tag.",
      [25]: "Interpolation end sign was not found.",
      [27]: "End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",
      [26]: "Legal directive name was expected.",
      [28]: `v-if/v-else-if is missing expression.`,
      [29]: `v-if/else branches must use unique keys.`,
      [30]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,
      [31]: `v-for is missing expression.`,
      [32]: `v-for has invalid expression.`,
      [33]: `<template v-for> key should be placed on the <template> tag.`,
      [34]: `v-bind is missing expression.`,
      [35]: `v-on is missing expression.`,
      [36]: `Unexpected custom directive on <slot> outlet.`,
      [37]: `Mixed v-slot usage on both the component and nested <template>.When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.`,
      [38]: `Duplicate slot names found. `,
      [39]: `Extraneous children found when component already has explicitly named default slot. These children will be ignored.`,
      [40]: `v-slot can only be used on components or <template> tags.`,
      [41]: `v-model is missing expression.`,
      [42]: `v-model value must be a valid JavaScript member expression.`,
      [43]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,
      [44]: `Error parsing JavaScript expression: `,
      [45]: `<KeepAlive> expects exactly one child component.`,
      [46]: `"prefixIdentifiers" option is not supported in this build of compiler.`,
      [47]: `ES module mode is not supported in this build of compiler.`,
      [48]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,
      [49]: `"scopeId" option is only supported in module mode.`,
      [50]: ``
    };
    var FRAGMENT2 = Symbol(``);
    var TELEPORT2 = Symbol(``);
    var SUSPENSE2 = Symbol(``);
    var KEEP_ALIVE2 = Symbol(``);
    var BASE_TRANSITION2 = Symbol(``);
    var OPEN_BLOCK2 = Symbol(``);
    var CREATE_BLOCK2 = Symbol(``);
    var CREATE_ELEMENT_BLOCK2 = Symbol(``);
    var CREATE_VNODE2 = Symbol(``);
    var CREATE_ELEMENT_VNODE2 = Symbol(``);
    var CREATE_COMMENT2 = Symbol(``);
    var CREATE_TEXT2 = Symbol(``);
    var CREATE_STATIC2 = Symbol(``);
    var RESOLVE_COMPONENT2 = Symbol(``);
    var RESOLVE_DYNAMIC_COMPONENT2 = Symbol(``);
    var RESOLVE_DIRECTIVE2 = Symbol(``);
    var RESOLVE_FILTER2 = Symbol(``);
    var WITH_DIRECTIVES2 = Symbol(``);
    var RENDER_LIST2 = Symbol(``);
    var RENDER_SLOT2 = Symbol(``);
    var CREATE_SLOTS2 = Symbol(``);
    var TO_DISPLAY_STRING2 = Symbol(``);
    var MERGE_PROPS2 = Symbol(``);
    var NORMALIZE_CLASS2 = Symbol(``);
    var NORMALIZE_STYLE2 = Symbol(``);
    var NORMALIZE_PROPS2 = Symbol(``);
    var GUARD_REACTIVE_PROPS2 = Symbol(``);
    var TO_HANDLERS2 = Symbol(``);
    var CAMELIZE2 = Symbol(``);
    var CAPITALIZE2 = Symbol(``);
    var TO_HANDLER_KEY2 = Symbol(``);
    var SET_BLOCK_TRACKING2 = Symbol(``);
    var PUSH_SCOPE_ID2 = Symbol(``);
    var POP_SCOPE_ID2 = Symbol(``);
    var WITH_CTX2 = Symbol(``);
    var UNREF2 = Symbol(``);
    var IS_REF2 = Symbol(``);
    var WITH_MEMO2 = Symbol(``);
    var IS_MEMO_SAME2 = Symbol(``);
    var helperNameMap2 = {
      [FRAGMENT2]: `Fragment`,
      [TELEPORT2]: `Teleport`,
      [SUSPENSE2]: `Suspense`,
      [KEEP_ALIVE2]: `KeepAlive`,
      [BASE_TRANSITION2]: `BaseTransition`,
      [OPEN_BLOCK2]: `openBlock`,
      [CREATE_BLOCK2]: `createBlock`,
      [CREATE_ELEMENT_BLOCK2]: `createElementBlock`,
      [CREATE_VNODE2]: `createVNode`,
      [CREATE_ELEMENT_VNODE2]: `createElementVNode`,
      [CREATE_COMMENT2]: `createCommentVNode`,
      [CREATE_TEXT2]: `createTextVNode`,
      [CREATE_STATIC2]: `createStaticVNode`,
      [RESOLVE_COMPONENT2]: `resolveComponent`,
      [RESOLVE_DYNAMIC_COMPONENT2]: `resolveDynamicComponent`,
      [RESOLVE_DIRECTIVE2]: `resolveDirective`,
      [RESOLVE_FILTER2]: `resolveFilter`,
      [WITH_DIRECTIVES2]: `withDirectives`,
      [RENDER_LIST2]: `renderList`,
      [RENDER_SLOT2]: `renderSlot`,
      [CREATE_SLOTS2]: `createSlots`,
      [TO_DISPLAY_STRING2]: `toDisplayString`,
      [MERGE_PROPS2]: `mergeProps`,
      [NORMALIZE_CLASS2]: `normalizeClass`,
      [NORMALIZE_STYLE2]: `normalizeStyle`,
      [NORMALIZE_PROPS2]: `normalizeProps`,
      [GUARD_REACTIVE_PROPS2]: `guardReactiveProps`,
      [TO_HANDLERS2]: `toHandlers`,
      [CAMELIZE2]: `camelize`,
      [CAPITALIZE2]: `capitalize`,
      [TO_HANDLER_KEY2]: `toHandlerKey`,
      [SET_BLOCK_TRACKING2]: `setBlockTracking`,
      [PUSH_SCOPE_ID2]: `pushScopeId`,
      [POP_SCOPE_ID2]: `popScopeId`,
      [WITH_CTX2]: `withCtx`,
      [UNREF2]: `unref`,
      [IS_REF2]: `isRef`,
      [WITH_MEMO2]: `withMemo`,
      [IS_MEMO_SAME2]: `isMemoSame`
    };
    function registerRuntimeHelpers2(helpers) {
      Object.getOwnPropertySymbols(helpers).forEach((s) => {
        helperNameMap2[s] = helpers[s];
      });
    }
    var locStub2 = {
      source: "",
      start: { line: 1, column: 1, offset: 0 },
      end: { line: 1, column: 1, offset: 0 }
    };
    function createRoot2(children, loc = locStub2) {
      return {
        type: 0,
        children,
        helpers: [],
        components: [],
        directives: [],
        hoists: [],
        imports: [],
        cached: 0,
        temps: 0,
        codegenNode: void 0,
        loc
      };
    }
    function createVNodeCall2(context, tag2, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent3 = false, loc = locStub2) {
      if (context) {
        if (isBlock) {
          context.helper(OPEN_BLOCK2);
          context.helper(getVNodeBlockHelper2(context.inSSR, isComponent3));
        } else {
          context.helper(getVNodeHelper2(context.inSSR, isComponent3));
        }
        if (directives) {
          context.helper(WITH_DIRECTIVES2);
        }
      }
      return {
        type: 13,
        tag: tag2,
        props,
        children,
        patchFlag,
        dynamicProps,
        directives,
        isBlock,
        disableTracking,
        isComponent: isComponent3,
        loc
      };
    }
    function createArrayExpression2(elements, loc = locStub2) {
      return {
        type: 17,
        loc,
        elements
      };
    }
    function createObjectExpression2(properties, loc = locStub2) {
      return {
        type: 15,
        loc,
        properties
      };
    }
    function createObjectProperty2(key, value) {
      return {
        type: 16,
        loc: locStub2,
        key: shared.isString(key) ? createSimpleExpression2(key, true) : key,
        value
      };
    }
    function createSimpleExpression2(content, isStatic = false, loc = locStub2, constType = 0) {
      return {
        type: 4,
        loc,
        content,
        isStatic,
        constType: isStatic ? 3 : constType
      };
    }
    function createInterpolation2(content, loc) {
      return {
        type: 5,
        loc,
        content: shared.isString(content) ? createSimpleExpression2(content, false, loc) : content
      };
    }
    function createCompoundExpression2(children, loc = locStub2) {
      return {
        type: 8,
        loc,
        children
      };
    }
    function createCallExpression2(callee, args = [], loc = locStub2) {
      return {
        type: 14,
        loc,
        callee,
        arguments: args
      };
    }
    function createFunctionExpression2(params, returns = void 0, newline = false, isSlot = false, loc = locStub2) {
      return {
        type: 18,
        params,
        returns,
        newline,
        isSlot,
        loc
      };
    }
    function createConditionalExpression2(test, consequent, alternate, newline = true) {
      return {
        type: 19,
        test,
        consequent,
        alternate,
        newline,
        loc: locStub2
      };
    }
    function createCacheExpression2(index, value, isVNode = false) {
      return {
        type: 20,
        index,
        value,
        isVNode,
        loc: locStub2
      };
    }
    function createBlockStatement2(body) {
      return {
        type: 21,
        body,
        loc: locStub2
      };
    }
    function createTemplateLiteral2(elements) {
      return {
        type: 22,
        elements,
        loc: locStub2
      };
    }
    function createIfStatement2(test, consequent, alternate) {
      return {
        type: 23,
        test,
        consequent,
        alternate,
        loc: locStub2
      };
    }
    function createAssignmentExpression2(left, right) {
      return {
        type: 24,
        left,
        right,
        loc: locStub2
      };
    }
    function createSequenceExpression2(expressions) {
      return {
        type: 25,
        expressions,
        loc: locStub2
      };
    }
    function createReturnStatement2(returns) {
      return {
        type: 26,
        returns,
        loc: locStub2
      };
    }
    var isStaticExp2 = (p) => p.type === 4 && p.isStatic;
    var isBuiltInType2 = (tag2, expected) => tag2 === expected || tag2 === shared.hyphenate(expected);
    function isCoreComponent2(tag2) {
      if (isBuiltInType2(tag2, "Teleport")) {
        return TELEPORT2;
      } else if (isBuiltInType2(tag2, "Suspense")) {
        return SUSPENSE2;
      } else if (isBuiltInType2(tag2, "KeepAlive")) {
        return KEEP_ALIVE2;
      } else if (isBuiltInType2(tag2, "BaseTransition")) {
        return BASE_TRANSITION2;
      }
    }
    var nonIdentifierRE2 = /^\d|[^\$\w]/;
    var isSimpleIdentifier2 = (name) => !nonIdentifierRE2.test(name);
    var validFirstIdentCharRE2 = /[A-Za-z_$\xA0-\uFFFF]/;
    var validIdentCharRE2 = /[\.\?\w$\xA0-\uFFFF]/;
    var whitespaceRE2 = /\s+[.[]\s*|\s*[.[]\s+/g;
    var isMemberExpressionBrowser2 = (path3) => {
      path3 = path3.trim().replace(whitespaceRE2, (s) => s.trim());
      let state = 0;
      let stateStack = [];
      let currentOpenBracketCount = 0;
      let currentOpenParensCount = 0;
      let currentStringType = null;
      for (let i = 0; i < path3.length; i++) {
        const char = path3.charAt(i);
        switch (state) {
          case 0:
            if (char === "[") {
              stateStack.push(state);
              state = 1;
              currentOpenBracketCount++;
            } else if (char === "(") {
              stateStack.push(state);
              state = 2;
              currentOpenParensCount++;
            } else if (!(i === 0 ? validFirstIdentCharRE2 : validIdentCharRE2).test(char)) {
              return false;
            }
            break;
          case 1:
            if (char === `'` || char === `"` || char === "`") {
              stateStack.push(state);
              state = 3;
              currentStringType = char;
            } else if (char === `[`) {
              currentOpenBracketCount++;
            } else if (char === `]`) {
              if (!--currentOpenBracketCount) {
                state = stateStack.pop();
              }
            }
            break;
          case 2:
            if (char === `'` || char === `"` || char === "`") {
              stateStack.push(state);
              state = 3;
              currentStringType = char;
            } else if (char === `(`) {
              currentOpenParensCount++;
            } else if (char === `)`) {
              if (i === path3.length - 1) {
                return false;
              }
              if (!--currentOpenParensCount) {
                state = stateStack.pop();
              }
            }
            break;
          case 3:
            if (char === currentStringType) {
              state = stateStack.pop();
              currentStringType = null;
            }
            break;
        }
      }
      return !currentOpenBracketCount && !currentOpenParensCount;
    };
    var isMemberExpressionNode2 = (path3, context) => {
      try {
        let ret = parser2.parseExpression(path3, {
          plugins: context.expressionPlugins
        });
        if (ret.type === "TSAsExpression" || ret.type === "TSTypeAssertion") {
          ret = ret.expression;
        }
        return ret.type === "MemberExpression" || ret.type === "OptionalMemberExpression" || ret.type === "Identifier";
      } catch (e) {
        return false;
      }
    };
    var isMemberExpression2 = isMemberExpressionNode2;
    function getInnerRange2(loc, offset, length2) {
      const source = loc.source.slice(offset, offset + length2);
      const newLoc = {
        source,
        start: advancePositionWithClone2(loc.start, loc.source, offset),
        end: loc.end
      };
      if (length2 != null) {
        newLoc.end = advancePositionWithClone2(loc.start, loc.source, offset + length2);
      }
      return newLoc;
    }
    function advancePositionWithClone2(pos, source, numberOfCharacters = source.length) {
      return advancePositionWithMutation2(shared.extend({}, pos), source, numberOfCharacters);
    }
    function advancePositionWithMutation2(pos, source, numberOfCharacters = source.length) {
      let linesCount = 0;
      let lastNewLinePos = -1;
      for (let i = 0; i < numberOfCharacters; i++) {
        if (source.charCodeAt(i) === 10) {
          linesCount++;
          lastNewLinePos = i;
        }
      }
      pos.offset += numberOfCharacters;
      pos.line += linesCount;
      pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;
      return pos;
    }
    function assert2(condition, msg) {
      if (!condition) {
        throw new Error(msg || `unexpected compiler condition`);
      }
    }
    function findDir2(node2, name, allowEmpty = false) {
      for (let i = 0; i < node2.props.length; i++) {
        const p = node2.props[i];
        if (p.type === 7 && (allowEmpty || p.exp) && (shared.isString(name) ? p.name === name : name.test(p.name))) {
          return p;
        }
      }
    }
    function findProp2(node2, name, dynamicOnly = false, allowEmpty = false) {
      for (let i = 0; i < node2.props.length; i++) {
        const p = node2.props[i];
        if (p.type === 6) {
          if (dynamicOnly)
            continue;
          if (p.name === name && (p.value || allowEmpty)) {
            return p;
          }
        } else if (p.name === "bind" && (p.exp || allowEmpty) && isStaticArgOf2(p.arg, name)) {
          return p;
        }
      }
    }
    function isStaticArgOf2(arg, name) {
      return !!(arg && isStaticExp2(arg) && arg.content === name);
    }
    function hasDynamicKeyVBind2(node2) {
      return node2.props.some((p) => p.type === 7 && p.name === "bind" && (!p.arg || p.arg.type !== 4 || !p.arg.isStatic));
    }
    function isText2(node2) {
      return node2.type === 5 || node2.type === 2;
    }
    function isVSlot2(p) {
      return p.type === 7 && p.name === "slot";
    }
    function isTemplateNode2(node2) {
      return node2.type === 1 && node2.tagType === 3;
    }
    function isSlotOutlet2(node2) {
      return node2.type === 1 && node2.tagType === 2;
    }
    function getVNodeHelper2(ssr, isComponent3) {
      return ssr || isComponent3 ? CREATE_VNODE2 : CREATE_ELEMENT_VNODE2;
    }
    function getVNodeBlockHelper2(ssr, isComponent3) {
      return ssr || isComponent3 ? CREATE_BLOCK2 : CREATE_ELEMENT_BLOCK2;
    }
    var propsHelperSet2 = /* @__PURE__ */ new Set([NORMALIZE_PROPS2, GUARD_REACTIVE_PROPS2]);
    function getUnnormalizedProps2(props, callPath = []) {
      if (props && !shared.isString(props) && props.type === 14) {
        const callee = props.callee;
        if (!shared.isString(callee) && propsHelperSet2.has(callee)) {
          return getUnnormalizedProps2(props.arguments[0], callPath.concat(props));
        }
      }
      return [props, callPath];
    }
    function injectProp2(node2, prop, context) {
      let propsWithInjection;
      let props = node2.type === 13 ? node2.props : node2.arguments[2];
      let callPath = [];
      let parentCall;
      if (props && !shared.isString(props) && props.type === 14) {
        const ret = getUnnormalizedProps2(props);
        props = ret[0];
        callPath = ret[1];
        parentCall = callPath[callPath.length - 1];
      }
      if (props == null || shared.isString(props)) {
        propsWithInjection = createObjectExpression2([prop]);
      } else if (props.type === 14) {
        const first = props.arguments[0];
        if (!shared.isString(first) && first.type === 15) {
          first.properties.unshift(prop);
        } else {
          if (props.callee === TO_HANDLERS2) {
            propsWithInjection = createCallExpression2(context.helper(MERGE_PROPS2), [
              createObjectExpression2([prop]),
              props
            ]);
          } else {
            props.arguments.unshift(createObjectExpression2([prop]));
          }
        }
        !propsWithInjection && (propsWithInjection = props);
      } else if (props.type === 15) {
        let alreadyExists = false;
        if (prop.key.type === 4) {
          const propKeyName = prop.key.content;
          alreadyExists = props.properties.some((p) => p.key.type === 4 && p.key.content === propKeyName);
        }
        if (!alreadyExists) {
          props.properties.unshift(prop);
        }
        propsWithInjection = props;
      } else {
        propsWithInjection = createCallExpression2(context.helper(MERGE_PROPS2), [
          createObjectExpression2([prop]),
          props
        ]);
        if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS2) {
          parentCall = callPath[callPath.length - 2];
        }
      }
      if (node2.type === 13) {
        if (parentCall) {
          parentCall.arguments[0] = propsWithInjection;
        } else {
          node2.props = propsWithInjection;
        }
      } else {
        if (parentCall) {
          parentCall.arguments[0] = propsWithInjection;
        } else {
          node2.arguments[2] = propsWithInjection;
        }
      }
    }
    function toValidAssetId2(name, type) {
      return `_${type}_${name.replace(/[^\w]/g, (searchValue, replaceValue) => {
        return searchValue === "-" ? "_" : name.charCodeAt(replaceValue).toString();
      })}`;
    }
    function hasScopeRef2(node2, ids) {
      if (!node2 || Object.keys(ids).length === 0) {
        return false;
      }
      switch (node2.type) {
        case 1:
          for (let i = 0; i < node2.props.length; i++) {
            const p = node2.props[i];
            if (p.type === 7 && (hasScopeRef2(p.arg, ids) || hasScopeRef2(p.exp, ids))) {
              return true;
            }
          }
          return node2.children.some((c) => hasScopeRef2(c, ids));
        case 11:
          if (hasScopeRef2(node2.source, ids)) {
            return true;
          }
          return node2.children.some((c) => hasScopeRef2(c, ids));
        case 9:
          return node2.branches.some((b) => hasScopeRef2(b, ids));
        case 10:
          if (hasScopeRef2(node2.condition, ids)) {
            return true;
          }
          return node2.children.some((c) => hasScopeRef2(c, ids));
        case 4:
          return !node2.isStatic && isSimpleIdentifier2(node2.content) && !!ids[node2.content];
        case 8:
          return node2.children.some((c) => shared.isObject(c) && hasScopeRef2(c, ids));
        case 5:
        case 12:
          return hasScopeRef2(node2.content, ids);
        case 2:
        case 3:
          return false;
        default:
          return false;
      }
    }
    function getMemoedVNodeCall2(node2) {
      if (node2.type === 14 && node2.callee === WITH_MEMO2) {
        return node2.arguments[1].returns;
      } else {
        return node2;
      }
    }
    function makeBlock2(node2, { helper, removeHelper, inSSR }) {
      if (!node2.isBlock) {
        node2.isBlock = true;
        removeHelper(getVNodeHelper2(inSSR, node2.isComponent));
        helper(OPEN_BLOCK2);
        helper(getVNodeBlockHelper2(inSSR, node2.isComponent));
      }
    }
    var deprecationData2 = {
      ["COMPILER_IS_ON_ELEMENT"]: {
        message: `Platform-native elements with "is" prop will no longer be treated as components in Vue 3 unless the "is" value is explicitly prefixed with "vue:".`,
        link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`
      },
      ["COMPILER_V_BIND_SYNC"]: {
        message: (key) => `.sync modifier for v-bind has been removed. Use v-model with argument instead. \`v-bind:${key}.sync\` should be changed to \`v-model:${key}\`.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`
      },
      ["COMPILER_V_BIND_PROP"]: {
        message: `.prop modifier for v-bind has been removed and no longer necessary. Vue 3 will automatically set a binding as DOM property when appropriate.`
      },
      ["COMPILER_V_BIND_OBJECT_ORDER"]: {
        message: `v-bind="obj" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`
      },
      ["COMPILER_V_ON_NATIVE"]: {
        message: `.native modifier for v-on has been removed as is no longer necessary.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`
      },
      ["COMPILER_V_IF_V_FOR_PRECEDENCE"]: {
        message: `v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`
      },
      ["COMPILER_NATIVE_TEMPLATE"]: {
        message: `<template> with no special directives will render as a native template element instead of its inner content in Vue 3.`
      },
      ["COMPILER_INLINE_TEMPLATE"]: {
        message: `"inline-template" has been removed in Vue 3.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`
      },
      ["COMPILER_FILTER"]: {
        message: `filters have been removed in Vue 3. The "|" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`
      }
    };
    function getCompatValue2(key, context) {
      const config2 = context.options ? context.options.compatConfig : context.compatConfig;
      const value = config2 && config2[key];
      if (key === "MODE") {
        return value || 3;
      } else {
        return value;
      }
    }
    function isCompatEnabled2(key, context) {
      const mode = getCompatValue2("MODE", context);
      const value = getCompatValue2(key, context);
      return mode === 3 ? value === true : value !== false;
    }
    function checkCompatEnabled2(key, context, loc, ...args) {
      const enabled = isCompatEnabled2(key, context);
      return enabled;
    }
    function warnDeprecation2(key, context, loc, ...args) {
      const val = getCompatValue2(key, context);
      if (val === "suppress-warning") {
        return;
      }
      const { message, link } = deprecationData2[key];
      const msg = `(deprecation ${key}) ${typeof message === "function" ? message(...args) : message}${link ? `
  Details: ${link}` : ``}`;
      const err = new SyntaxError(msg);
      err.code = key;
      if (loc)
        err.loc = loc;
      context.onWarn(err);
    }
    var decodeRE2 = /&(gt|lt|amp|apos|quot);/g;
    var decodeMap2 = {
      gt: ">",
      lt: "<",
      amp: "&",
      apos: "'",
      quot: '"'
    };
    var defaultParserOptions2 = {
      delimiters: [`{{`, `}}`],
      getNamespace: () => 0,
      getTextMode: () => 0,
      isVoidTag: shared.NO,
      isPreTag: shared.NO,
      isCustomElement: shared.NO,
      decodeEntities: (rawText) => rawText.replace(decodeRE2, (_, p1) => decodeMap2[p1]),
      onError: defaultOnError2,
      onWarn: defaultOnWarn2,
      comments: false
    };
    function baseParse2(content, options = {}) {
      const context = createParserContext2(content, options);
      const start = getCursor2(context);
      return createRoot2(parseChildren2(context, 0, []), getSelection2(context, start));
    }
    function createParserContext2(content, rawOptions) {
      const options = shared.extend({}, defaultParserOptions2);
      let key;
      for (key in rawOptions) {
        options[key] = rawOptions[key] === void 0 ? defaultParserOptions2[key] : rawOptions[key];
      }
      return {
        options,
        column: 1,
        line: 1,
        offset: 0,
        originalSource: content,
        source: content,
        inPre: false,
        inVPre: false,
        onWarn: options.onWarn
      };
    }
    function parseChildren2(context, mode, ancestors) {
      const parent = last2(ancestors);
      const ns = parent ? parent.ns : 0;
      const nodes = [];
      while (!isEnd2(context, mode, ancestors)) {
        const s = context.source;
        let node2 = void 0;
        if (mode === 0 || mode === 1) {
          if (!context.inVPre && startsWith2(s, context.options.delimiters[0])) {
            node2 = parseInterpolation2(context, mode);
          } else if (mode === 0 && s[0] === "<") {
            if (s.length === 1) {
              emitError2(context, 5, 1);
            } else if (s[1] === "!") {
              if (startsWith2(s, "<!--")) {
                node2 = parseComment2(context);
              } else if (startsWith2(s, "<!DOCTYPE")) {
                node2 = parseBogusComment2(context);
              } else if (startsWith2(s, "<![CDATA[")) {
                if (ns !== 0) {
                  node2 = parseCDATA2(context, ancestors);
                } else {
                  emitError2(context, 1);
                  node2 = parseBogusComment2(context);
                }
              } else {
                emitError2(context, 11);
                node2 = parseBogusComment2(context);
              }
            } else if (s[1] === "/") {
              if (s.length === 2) {
                emitError2(context, 5, 2);
              } else if (s[2] === ">") {
                emitError2(context, 14, 2);
                advanceBy2(context, 3);
                continue;
              } else if (/[a-z]/i.test(s[2])) {
                emitError2(context, 23);
                parseTag2(context, 1, parent);
                continue;
              } else {
                emitError2(context, 12, 2);
                node2 = parseBogusComment2(context);
              }
            } else if (/[a-z]/i.test(s[1])) {
              node2 = parseElement2(context, ancestors);
              if (isCompatEnabled2("COMPILER_NATIVE_TEMPLATE", context) && node2 && node2.tag === "template" && !node2.props.some((p) => p.type === 7 && isSpecialTemplateDirective2(p.name))) {
                node2 = node2.children;
              }
            } else if (s[1] === "?") {
              emitError2(context, 21, 1);
              node2 = parseBogusComment2(context);
            } else {
              emitError2(context, 12, 1);
            }
          }
        }
        if (!node2) {
          node2 = parseText2(context, mode);
        }
        if (shared.isArray(node2)) {
          for (let i = 0; i < node2.length; i++) {
            pushNode2(nodes, node2[i]);
          }
        } else {
          pushNode2(nodes, node2);
        }
      }
      let removedWhitespace = false;
      if (mode !== 2 && mode !== 1) {
        const shouldCondense = context.options.whitespace !== "preserve";
        for (let i = 0; i < nodes.length; i++) {
          const node2 = nodes[i];
          if (!context.inPre && node2.type === 2) {
            if (!/[^\t\r\n\f ]/.test(node2.content)) {
              const prev = nodes[i - 1];
              const next = nodes[i + 1];
              if (!prev || !next || shouldCondense && (prev.type === 3 || next.type === 3 || prev.type === 1 && next.type === 1 && /[\r\n]/.test(node2.content))) {
                removedWhitespace = true;
                nodes[i] = null;
              } else {
                node2.content = " ";
              }
            } else if (shouldCondense) {
              node2.content = node2.content.replace(/[\t\r\n\f ]+/g, " ");
            }
          } else if (node2.type === 3 && !context.options.comments) {
            removedWhitespace = true;
            nodes[i] = null;
          }
        }
        if (context.inPre && parent && context.options.isPreTag(parent.tag)) {
          const first = nodes[0];
          if (first && first.type === 2) {
            first.content = first.content.replace(/^\r?\n/, "");
          }
        }
      }
      return removedWhitespace ? nodes.filter(Boolean) : nodes;
    }
    function pushNode2(nodes, node2) {
      if (node2.type === 2) {
        const prev = last2(nodes);
        if (prev && prev.type === 2 && prev.loc.end.offset === node2.loc.start.offset) {
          prev.content += node2.content;
          prev.loc.end = node2.loc.end;
          prev.loc.source += node2.loc.source;
          return;
        }
      }
      nodes.push(node2);
    }
    function parseCDATA2(context, ancestors) {
      advanceBy2(context, 9);
      const nodes = parseChildren2(context, 3, ancestors);
      if (context.source.length === 0) {
        emitError2(context, 6);
      } else {
        advanceBy2(context, 3);
      }
      return nodes;
    }
    function parseComment2(context) {
      const start = getCursor2(context);
      let content;
      const match = /--(\!)?>/.exec(context.source);
      if (!match) {
        content = context.source.slice(4);
        advanceBy2(context, context.source.length);
        emitError2(context, 7);
      } else {
        if (match.index <= 3) {
          emitError2(context, 0);
        }
        if (match[1]) {
          emitError2(context, 10);
        }
        content = context.source.slice(4, match.index);
        const s = context.source.slice(0, match.index);
        let prevIndex = 1, nestedIndex = 0;
        while ((nestedIndex = s.indexOf("<!--", prevIndex)) !== -1) {
          advanceBy2(context, nestedIndex - prevIndex + 1);
          if (nestedIndex + 4 < s.length) {
            emitError2(context, 16);
          }
          prevIndex = nestedIndex + 1;
        }
        advanceBy2(context, match.index + match[0].length - prevIndex + 1);
      }
      return {
        type: 3,
        content,
        loc: getSelection2(context, start)
      };
    }
    function parseBogusComment2(context) {
      const start = getCursor2(context);
      const contentStart = context.source[1] === "?" ? 1 : 2;
      let content;
      const closeIndex = context.source.indexOf(">");
      if (closeIndex === -1) {
        content = context.source.slice(contentStart);
        advanceBy2(context, context.source.length);
      } else {
        content = context.source.slice(contentStart, closeIndex);
        advanceBy2(context, closeIndex + 1);
      }
      return {
        type: 3,
        content,
        loc: getSelection2(context, start)
      };
    }
    function parseElement2(context, ancestors) {
      const wasInPre = context.inPre;
      const wasInVPre = context.inVPre;
      const parent = last2(ancestors);
      const element = parseTag2(context, 0, parent);
      const isPreBoundary = context.inPre && !wasInPre;
      const isVPreBoundary = context.inVPre && !wasInVPre;
      if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {
        if (isPreBoundary) {
          context.inPre = false;
        }
        if (isVPreBoundary) {
          context.inVPre = false;
        }
        return element;
      }
      ancestors.push(element);
      const mode = context.options.getTextMode(element, parent);
      const children = parseChildren2(context, mode, ancestors);
      ancestors.pop();
      {
        const inlineTemplateProp = element.props.find((p) => p.type === 6 && p.name === "inline-template");
        if (inlineTemplateProp && checkCompatEnabled2("COMPILER_INLINE_TEMPLATE", context, inlineTemplateProp.loc)) {
          const loc = getSelection2(context, element.loc.end);
          inlineTemplateProp.value = {
            type: 2,
            content: loc.source,
            loc
          };
        }
      }
      element.children = children;
      if (startsWithEndTagOpen2(context.source, element.tag)) {
        parseTag2(context, 1, parent);
      } else {
        emitError2(context, 24, 0, element.loc.start);
        if (context.source.length === 0 && element.tag.toLowerCase() === "script") {
          const first = children[0];
          if (first && startsWith2(first.loc.source, "<!--")) {
            emitError2(context, 8);
          }
        }
      }
      element.loc = getSelection2(context, element.loc.start);
      if (isPreBoundary) {
        context.inPre = false;
      }
      if (isVPreBoundary) {
        context.inVPre = false;
      }
      return element;
    }
    var isSpecialTemplateDirective2 = /* @__PURE__ */ shared.makeMap(`if,else,else-if,for,slot`);
    function parseTag2(context, type, parent) {
      const start = getCursor2(context);
      const match = /^<\/?([a-z][^\t\r\n\f />]*)/i.exec(context.source);
      const tag2 = match[1];
      const ns = context.options.getNamespace(tag2, parent);
      advanceBy2(context, match[0].length);
      advanceSpaces2(context);
      const cursor = getCursor2(context);
      const currentSource = context.source;
      if (context.options.isPreTag(tag2)) {
        context.inPre = true;
      }
      let props = parseAttributes2(context, type);
      if (type === 0 && !context.inVPre && props.some((p) => p.type === 7 && p.name === "pre")) {
        context.inVPre = true;
        shared.extend(context, cursor);
        context.source = currentSource;
        props = parseAttributes2(context, type).filter((p) => p.name !== "v-pre");
      }
      let isSelfClosing = false;
      if (context.source.length === 0) {
        emitError2(context, 9);
      } else {
        isSelfClosing = startsWith2(context.source, "/>");
        if (type === 1 && isSelfClosing) {
          emitError2(context, 4);
        }
        advanceBy2(context, isSelfClosing ? 2 : 1);
      }
      if (type === 1) {
        return;
      }
      let tagType = 0;
      if (!context.inVPre) {
        if (tag2 === "slot") {
          tagType = 2;
        } else if (tag2 === "template") {
          if (props.some((p) => p.type === 7 && isSpecialTemplateDirective2(p.name))) {
            tagType = 3;
          }
        } else if (isComponent2(tag2, props, context)) {
          tagType = 1;
        }
      }
      return {
        type: 1,
        ns,
        tag: tag2,
        tagType,
        props,
        isSelfClosing,
        children: [],
        loc: getSelection2(context, start),
        codegenNode: void 0
      };
    }
    function isComponent2(tag2, props, context) {
      const options = context.options;
      if (options.isCustomElement(tag2)) {
        return false;
      }
      if (tag2 === "component" || /^[A-Z]/.test(tag2) || isCoreComponent2(tag2) || options.isBuiltInComponent && options.isBuiltInComponent(tag2) || options.isNativeTag && !options.isNativeTag(tag2)) {
        return true;
      }
      for (let i = 0; i < props.length; i++) {
        const p = props[i];
        if (p.type === 6) {
          if (p.name === "is" && p.value) {
            if (p.value.content.startsWith("vue:")) {
              return true;
            } else if (checkCompatEnabled2("COMPILER_IS_ON_ELEMENT", context, p.loc)) {
              return true;
            }
          }
        } else {
          if (p.name === "is") {
            return true;
          } else if (p.name === "bind" && isStaticArgOf2(p.arg, "is") && true && checkCompatEnabled2("COMPILER_IS_ON_ELEMENT", context, p.loc)) {
            return true;
          }
        }
      }
    }
    function parseAttributes2(context, type) {
      const props = [];
      const attributeNames = /* @__PURE__ */ new Set();
      while (context.source.length > 0 && !startsWith2(context.source, ">") && !startsWith2(context.source, "/>")) {
        if (startsWith2(context.source, "/")) {
          emitError2(context, 22);
          advanceBy2(context, 1);
          advanceSpaces2(context);
          continue;
        }
        if (type === 1) {
          emitError2(context, 3);
        }
        const attr = parseAttribute2(context, attributeNames);
        if (attr.type === 6 && attr.value && attr.name === "class") {
          attr.value.content = attr.value.content.replace(/\s+/g, " ").trim();
        }
        if (type === 0) {
          props.push(attr);
        }
        if (/^[^\t\r\n\f />]/.test(context.source)) {
          emitError2(context, 15);
        }
        advanceSpaces2(context);
      }
      return props;
    }
    function parseAttribute2(context, nameSet) {
      const start = getCursor2(context);
      const match = /^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(context.source);
      const name = match[0];
      if (nameSet.has(name)) {
        emitError2(context, 2);
      }
      nameSet.add(name);
      if (name[0] === "=") {
        emitError2(context, 19);
      }
      {
        const pattern = /["'<]/g;
        let m;
        while (m = pattern.exec(name)) {
          emitError2(context, 17, m.index);
        }
      }
      advanceBy2(context, name.length);
      let value = void 0;
      if (/^[\t\r\n\f ]*=/.test(context.source)) {
        advanceSpaces2(context);
        advanceBy2(context, 1);
        advanceSpaces2(context);
        value = parseAttributeValue2(context);
        if (!value) {
          emitError2(context, 13);
        }
      }
      const loc = getSelection2(context, start);
      if (!context.inVPre && /^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(name)) {
        const match2 = /(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(name);
        let isPropShorthand = startsWith2(name, ".");
        let dirName = match2[1] || (isPropShorthand || startsWith2(name, ":") ? "bind" : startsWith2(name, "@") ? "on" : "slot");
        let arg;
        if (match2[2]) {
          const isSlot = dirName === "slot";
          const startOffset = name.lastIndexOf(match2[2]);
          const loc2 = getSelection2(context, getNewPosition2(context, start, startOffset), getNewPosition2(context, start, startOffset + match2[2].length + (isSlot && match2[3] || "").length));
          let content = match2[2];
          let isStatic = true;
          if (content.startsWith("[")) {
            isStatic = false;
            if (!content.endsWith("]")) {
              emitError2(context, 27);
              content = content.slice(1);
            } else {
              content = content.slice(1, content.length - 1);
            }
          } else if (isSlot) {
            content += match2[3] || "";
          }
          arg = {
            type: 4,
            content,
            isStatic,
            constType: isStatic ? 3 : 0,
            loc: loc2
          };
        }
        if (value && value.isQuoted) {
          const valueLoc = value.loc;
          valueLoc.start.offset++;
          valueLoc.start.column++;
          valueLoc.end = advancePositionWithClone2(valueLoc.start, value.content);
          valueLoc.source = valueLoc.source.slice(1, -1);
        }
        const modifiers = match2[3] ? match2[3].slice(1).split(".") : [];
        if (isPropShorthand)
          modifiers.push("prop");
        if (dirName === "bind" && arg) {
          if (modifiers.includes("sync") && checkCompatEnabled2("COMPILER_V_BIND_SYNC", context, loc, arg.loc.source)) {
            dirName = "model";
            modifiers.splice(modifiers.indexOf("sync"), 1);
          }
        }
        return {
          type: 7,
          name: dirName,
          exp: value && {
            type: 4,
            content: value.content,
            isStatic: false,
            constType: 0,
            loc: value.loc
          },
          arg,
          modifiers,
          loc
        };
      }
      if (!context.inVPre && startsWith2(name, "v-")) {
        emitError2(context, 26);
      }
      return {
        type: 6,
        name,
        value: value && {
          type: 2,
          content: value.content,
          loc: value.loc
        },
        loc
      };
    }
    function parseAttributeValue2(context) {
      const start = getCursor2(context);
      let content;
      const quote = context.source[0];
      const isQuoted = quote === `"` || quote === `'`;
      if (isQuoted) {
        advanceBy2(context, 1);
        const endIndex = context.source.indexOf(quote);
        if (endIndex === -1) {
          content = parseTextData2(context, context.source.length, 4);
        } else {
          content = parseTextData2(context, endIndex, 4);
          advanceBy2(context, 1);
        }
      } else {
        const match = /^[^\t\r\n\f >]+/.exec(context.source);
        if (!match) {
          return void 0;
        }
        const unexpectedChars = /["'<=`]/g;
        let m;
        while (m = unexpectedChars.exec(match[0])) {
          emitError2(context, 18, m.index);
        }
        content = parseTextData2(context, match[0].length, 4);
      }
      return { content, isQuoted, loc: getSelection2(context, start) };
    }
    function parseInterpolation2(context, mode) {
      const [open, close] = context.options.delimiters;
      const closeIndex = context.source.indexOf(close, open.length);
      if (closeIndex === -1) {
        emitError2(context, 25);
        return void 0;
      }
      const start = getCursor2(context);
      advanceBy2(context, open.length);
      const innerStart = getCursor2(context);
      const innerEnd = getCursor2(context);
      const rawContentLength = closeIndex - open.length;
      const rawContent = context.source.slice(0, rawContentLength);
      const preTrimContent = parseTextData2(context, rawContentLength, mode);
      const content = preTrimContent.trim();
      const startOffset = preTrimContent.indexOf(content);
      if (startOffset > 0) {
        advancePositionWithMutation2(innerStart, rawContent, startOffset);
      }
      const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);
      advancePositionWithMutation2(innerEnd, rawContent, endOffset);
      advanceBy2(context, close.length);
      return {
        type: 5,
        content: {
          type: 4,
          isStatic: false,
          constType: 0,
          content,
          loc: getSelection2(context, innerStart, innerEnd)
        },
        loc: getSelection2(context, start)
      };
    }
    function parseText2(context, mode) {
      const endTokens = mode === 3 ? ["]]>"] : ["<", context.options.delimiters[0]];
      let endIndex = context.source.length;
      for (let i = 0; i < endTokens.length; i++) {
        const index = context.source.indexOf(endTokens[i], 1);
        if (index !== -1 && endIndex > index) {
          endIndex = index;
        }
      }
      const start = getCursor2(context);
      const content = parseTextData2(context, endIndex, mode);
      return {
        type: 2,
        content,
        loc: getSelection2(context, start)
      };
    }
    function parseTextData2(context, length2, mode) {
      const rawText = context.source.slice(0, length2);
      advanceBy2(context, length2);
      if (mode === 2 || mode === 3 || !rawText.includes("&")) {
        return rawText;
      } else {
        return context.options.decodeEntities(rawText, mode === 4);
      }
    }
    function getCursor2(context) {
      const { column, line, offset } = context;
      return { column, line, offset };
    }
    function getSelection2(context, start, end) {
      end = end || getCursor2(context);
      return {
        start,
        end,
        source: context.originalSource.slice(start.offset, end.offset)
      };
    }
    function last2(xs) {
      return xs[xs.length - 1];
    }
    function startsWith2(source, searchString) {
      return source.startsWith(searchString);
    }
    function advanceBy2(context, numberOfCharacters) {
      const { source } = context;
      advancePositionWithMutation2(context, source, numberOfCharacters);
      context.source = source.slice(numberOfCharacters);
    }
    function advanceSpaces2(context) {
      const match = /^[\t\r\n\f ]+/.exec(context.source);
      if (match) {
        advanceBy2(context, match[0].length);
      }
    }
    function getNewPosition2(context, start, numberOfCharacters) {
      return advancePositionWithClone2(start, context.originalSource.slice(start.offset, numberOfCharacters), numberOfCharacters);
    }
    function emitError2(context, code, offset, loc = getCursor2(context)) {
      if (offset) {
        loc.offset += offset;
        loc.column += offset;
      }
      context.options.onError(createCompilerError2(code, {
        start: loc,
        end: loc,
        source: ""
      }));
    }
    function isEnd2(context, mode, ancestors) {
      const s = context.source;
      switch (mode) {
        case 0:
          if (startsWith2(s, "</")) {
            for (let i = ancestors.length - 1; i >= 0; --i) {
              if (startsWithEndTagOpen2(s, ancestors[i].tag)) {
                return true;
              }
            }
          }
          break;
        case 1:
        case 2: {
          const parent = last2(ancestors);
          if (parent && startsWithEndTagOpen2(s, parent.tag)) {
            return true;
          }
          break;
        }
        case 3:
          if (startsWith2(s, "]]>")) {
            return true;
          }
          break;
      }
      return !s;
    }
    function startsWithEndTagOpen2(source, tag2) {
      return startsWith2(source, "</") && source.slice(2, 2 + tag2.length).toLowerCase() === tag2.toLowerCase() && /[\t\r\n\f />]/.test(source[2 + tag2.length] || ">");
    }
    function hoistStatic2(root2, context) {
      walk3(root2, context, isSingleElementRoot2(root2, root2.children[0]));
    }
    function isSingleElementRoot2(root2, child) {
      const { children } = root2;
      return children.length === 1 && child.type === 1 && !isSlotOutlet2(child);
    }
    function walk3(node2, context, doNotHoistNode = false) {
      const { children } = node2;
      const originalCount = children.length;
      let hoistedCount = 0;
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (child.type === 1 && child.tagType === 0) {
          const constantType = doNotHoistNode ? 0 : getConstantType2(child, context);
          if (constantType > 0) {
            if (constantType >= 2) {
              child.codegenNode.patchFlag = -1 + ``;
              child.codegenNode = context.hoist(child.codegenNode);
              hoistedCount++;
              continue;
            }
          } else {
            const codegenNode = child.codegenNode;
            if (codegenNode.type === 13) {
              const flag = getPatchFlag2(codegenNode);
              if ((!flag || flag === 512 || flag === 1) && getGeneratedPropsConstantType2(child, context) >= 2) {
                const props = getNodeProps2(child);
                if (props) {
                  codegenNode.props = context.hoist(props);
                }
              }
              if (codegenNode.dynamicProps) {
                codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);
              }
            }
          }
        } else if (child.type === 12 && getConstantType2(child.content, context) >= 2) {
          child.codegenNode = context.hoist(child.codegenNode);
          hoistedCount++;
        }
        if (child.type === 1) {
          const isComponent3 = child.tagType === 1;
          if (isComponent3) {
            context.scopes.vSlot++;
          }
          walk3(child, context);
          if (isComponent3) {
            context.scopes.vSlot--;
          }
        } else if (child.type === 11) {
          walk3(child, context, child.children.length === 1);
        } else if (child.type === 9) {
          for (let i2 = 0; i2 < child.branches.length; i2++) {
            walk3(child.branches[i2], context, child.branches[i2].children.length === 1);
          }
        }
      }
      if (hoistedCount && context.transformHoist) {
        context.transformHoist(children, context, node2);
      }
      if (hoistedCount && hoistedCount === originalCount && node2.type === 1 && node2.tagType === 0 && node2.codegenNode && node2.codegenNode.type === 13 && shared.isArray(node2.codegenNode.children)) {
        node2.codegenNode.children = context.hoist(createArrayExpression2(node2.codegenNode.children));
      }
    }
    function getConstantType2(node2, context) {
      const { constantCache } = context;
      switch (node2.type) {
        case 1:
          if (node2.tagType !== 0) {
            return 0;
          }
          const cached = constantCache.get(node2);
          if (cached !== void 0) {
            return cached;
          }
          const codegenNode = node2.codegenNode;
          if (codegenNode.type !== 13) {
            return 0;
          }
          if (codegenNode.isBlock && node2.tag !== "svg" && node2.tag !== "foreignObject") {
            return 0;
          }
          const flag = getPatchFlag2(codegenNode);
          if (!flag) {
            let returnType2 = 3;
            const generatedPropsType = getGeneratedPropsConstantType2(node2, context);
            if (generatedPropsType === 0) {
              constantCache.set(node2, 0);
              return 0;
            }
            if (generatedPropsType < returnType2) {
              returnType2 = generatedPropsType;
            }
            for (let i = 0; i < node2.children.length; i++) {
              const childType = getConstantType2(node2.children[i], context);
              if (childType === 0) {
                constantCache.set(node2, 0);
                return 0;
              }
              if (childType < returnType2) {
                returnType2 = childType;
              }
            }
            if (returnType2 > 1) {
              for (let i = 0; i < node2.props.length; i++) {
                const p = node2.props[i];
                if (p.type === 7 && p.name === "bind" && p.exp) {
                  const expType = getConstantType2(p.exp, context);
                  if (expType === 0) {
                    constantCache.set(node2, 0);
                    return 0;
                  }
                  if (expType < returnType2) {
                    returnType2 = expType;
                  }
                }
              }
            }
            if (codegenNode.isBlock) {
              context.removeHelper(OPEN_BLOCK2);
              context.removeHelper(getVNodeBlockHelper2(context.inSSR, codegenNode.isComponent));
              codegenNode.isBlock = false;
              context.helper(getVNodeHelper2(context.inSSR, codegenNode.isComponent));
            }
            constantCache.set(node2, returnType2);
            return returnType2;
          } else {
            constantCache.set(node2, 0);
            return 0;
          }
        case 2:
        case 3:
          return 3;
        case 9:
        case 11:
        case 10:
          return 0;
        case 5:
        case 12:
          return getConstantType2(node2.content, context);
        case 4:
          return node2.constType;
        case 8:
          let returnType = 3;
          for (let i = 0; i < node2.children.length; i++) {
            const child = node2.children[i];
            if (shared.isString(child) || shared.isSymbol(child)) {
              continue;
            }
            const childType = getConstantType2(child, context);
            if (childType === 0) {
              return 0;
            } else if (childType < returnType) {
              returnType = childType;
            }
          }
          return returnType;
        default:
          return 0;
      }
    }
    var allowHoistedHelperSet2 = /* @__PURE__ */ new Set([
      NORMALIZE_CLASS2,
      NORMALIZE_STYLE2,
      NORMALIZE_PROPS2,
      GUARD_REACTIVE_PROPS2
    ]);
    function getConstantTypeOfHelperCall2(value, context) {
      if (value.type === 14 && !shared.isString(value.callee) && allowHoistedHelperSet2.has(value.callee)) {
        const arg = value.arguments[0];
        if (arg.type === 4) {
          return getConstantType2(arg, context);
        } else if (arg.type === 14) {
          return getConstantTypeOfHelperCall2(arg, context);
        }
      }
      return 0;
    }
    function getGeneratedPropsConstantType2(node2, context) {
      let returnType = 3;
      const props = getNodeProps2(node2);
      if (props && props.type === 15) {
        const { properties } = props;
        for (let i = 0; i < properties.length; i++) {
          const { key, value } = properties[i];
          const keyType = getConstantType2(key, context);
          if (keyType === 0) {
            return keyType;
          }
          if (keyType < returnType) {
            returnType = keyType;
          }
          let valueType;
          if (value.type === 4) {
            valueType = getConstantType2(value, context);
          } else if (value.type === 14) {
            valueType = getConstantTypeOfHelperCall2(value, context);
          } else {
            valueType = 0;
          }
          if (valueType === 0) {
            return valueType;
          }
          if (valueType < returnType) {
            returnType = valueType;
          }
        }
      }
      return returnType;
    }
    function getNodeProps2(node2) {
      const codegenNode = node2.codegenNode;
      if (codegenNode.type === 13) {
        return codegenNode.props;
      }
    }
    function getPatchFlag2(node2) {
      const flag = node2.patchFlag;
      return flag ? parseInt(flag, 10) : void 0;
    }
    function createTransformContext2(root2, { filename = "", prefixIdentifiers = false, hoistStatic: hoistStatic3 = false, cacheHandlers = false, nodeTransforms = [], directiveTransforms = {}, transformHoist = null, isBuiltInComponent = shared.NOOP, isCustomElement = shared.NOOP, expressionPlugins = [], scopeId = null, slotted = true, ssr = false, inSSR = false, ssrCssVars = ``, bindingMetadata = shared.EMPTY_OBJ, inline = false, isTS = false, onError = defaultOnError2, onWarn = defaultOnWarn2, compatConfig }) {
      const nameMatch = filename.replace(/\?.*$/, "").match(/([^/\\]+)\.\w+$/);
      const context = {
        selfName: nameMatch && shared.capitalize(shared.camelize(nameMatch[1])),
        prefixIdentifiers,
        hoistStatic: hoistStatic3,
        cacheHandlers,
        nodeTransforms,
        directiveTransforms,
        transformHoist,
        isBuiltInComponent,
        isCustomElement,
        expressionPlugins,
        scopeId,
        slotted,
        ssr,
        inSSR,
        ssrCssVars,
        bindingMetadata,
        inline,
        isTS,
        onError,
        onWarn,
        compatConfig,
        root: root2,
        helpers: /* @__PURE__ */ new Map(),
        components: /* @__PURE__ */ new Set(),
        directives: /* @__PURE__ */ new Set(),
        hoists: [],
        imports: [],
        constantCache: /* @__PURE__ */ new Map(),
        temps: 0,
        cached: 0,
        identifiers: /* @__PURE__ */ Object.create(null),
        scopes: {
          vFor: 0,
          vSlot: 0,
          vPre: 0,
          vOnce: 0
        },
        parent: null,
        currentNode: root2,
        childIndex: 0,
        inVOnce: false,
        helper(name) {
          const count = context.helpers.get(name) || 0;
          context.helpers.set(name, count + 1);
          return name;
        },
        removeHelper(name) {
          const count = context.helpers.get(name);
          if (count) {
            const currentCount = count - 1;
            if (!currentCount) {
              context.helpers.delete(name);
            } else {
              context.helpers.set(name, currentCount);
            }
          }
        },
        helperString(name) {
          return `_${helperNameMap2[context.helper(name)]}`;
        },
        replaceNode(node2) {
          context.parent.children[context.childIndex] = context.currentNode = node2;
        },
        removeNode(node2) {
          const list2 = context.parent.children;
          const removalIndex = node2 ? list2.indexOf(node2) : context.currentNode ? context.childIndex : -1;
          if (!node2 || node2 === context.currentNode) {
            context.currentNode = null;
            context.onNodeRemoved();
          } else {
            if (context.childIndex > removalIndex) {
              context.childIndex--;
              context.onNodeRemoved();
            }
          }
          context.parent.children.splice(removalIndex, 1);
        },
        onNodeRemoved: () => {
        },
        addIdentifiers(exp) {
          {
            if (shared.isString(exp)) {
              addId(exp);
            } else if (exp.identifiers) {
              exp.identifiers.forEach(addId);
            } else if (exp.type === 4) {
              addId(exp.content);
            }
          }
        },
        removeIdentifiers(exp) {
          {
            if (shared.isString(exp)) {
              removeId(exp);
            } else if (exp.identifiers) {
              exp.identifiers.forEach(removeId);
            } else if (exp.type === 4) {
              removeId(exp.content);
            }
          }
        },
        hoist(exp) {
          if (shared.isString(exp))
            exp = createSimpleExpression2(exp);
          context.hoists.push(exp);
          const identifier = createSimpleExpression2(`_hoisted_${context.hoists.length}`, false, exp.loc, 2);
          identifier.hoisted = exp;
          return identifier;
        },
        cache(exp, isVNode = false) {
          return createCacheExpression2(context.cached++, exp, isVNode);
        }
      };
      {
        context.filters = /* @__PURE__ */ new Set();
      }
      function addId(id2) {
        const { identifiers } = context;
        if (identifiers[id2] === void 0) {
          identifiers[id2] = 0;
        }
        identifiers[id2]++;
      }
      function removeId(id2) {
        context.identifiers[id2]--;
      }
      return context;
    }
    function transform2(root2, options) {
      const context = createTransformContext2(root2, options);
      traverseNode2(root2, context);
      if (options.hoistStatic) {
        hoistStatic2(root2, context);
      }
      if (!options.ssr) {
        createRootCodegen2(root2, context);
      }
      root2.helpers = [...context.helpers.keys()];
      root2.components = [...context.components];
      root2.directives = [...context.directives];
      root2.imports = context.imports;
      root2.hoists = context.hoists;
      root2.temps = context.temps;
      root2.cached = context.cached;
      {
        root2.filters = [...context.filters];
      }
    }
    function createRootCodegen2(root2, context) {
      const { helper } = context;
      const { children } = root2;
      if (children.length === 1) {
        const child = children[0];
        if (isSingleElementRoot2(root2, child) && child.codegenNode) {
          const codegenNode = child.codegenNode;
          if (codegenNode.type === 13) {
            makeBlock2(codegenNode, context);
          }
          root2.codegenNode = codegenNode;
        } else {
          root2.codegenNode = child;
        }
      } else if (children.length > 1) {
        let patchFlag = 64;
        shared.PatchFlagNames[64];
        root2.codegenNode = createVNodeCall2(context, helper(FRAGMENT2), void 0, root2.children, patchFlag + ``, void 0, void 0, true, void 0, false);
      } else
        ;
    }
    function traverseChildren2(parent, context) {
      let i = 0;
      const nodeRemoved = () => {
        i--;
      };
      for (; i < parent.children.length; i++) {
        const child = parent.children[i];
        if (shared.isString(child))
          continue;
        context.parent = parent;
        context.childIndex = i;
        context.onNodeRemoved = nodeRemoved;
        traverseNode2(child, context);
      }
    }
    function traverseNode2(node2, context) {
      context.currentNode = node2;
      const { nodeTransforms } = context;
      const exitFns = [];
      for (let i2 = 0; i2 < nodeTransforms.length; i2++) {
        const onExit = nodeTransforms[i2](node2, context);
        if (onExit) {
          if (shared.isArray(onExit)) {
            exitFns.push(...onExit);
          } else {
            exitFns.push(onExit);
          }
        }
        if (!context.currentNode) {
          return;
        } else {
          node2 = context.currentNode;
        }
      }
      switch (node2.type) {
        case 3:
          if (!context.ssr) {
            context.helper(CREATE_COMMENT2);
          }
          break;
        case 5:
          if (!context.ssr) {
            context.helper(TO_DISPLAY_STRING2);
          }
          break;
        case 9:
          for (let i2 = 0; i2 < node2.branches.length; i2++) {
            traverseNode2(node2.branches[i2], context);
          }
          break;
        case 10:
        case 11:
        case 1:
        case 0:
          traverseChildren2(node2, context);
          break;
      }
      context.currentNode = node2;
      let i = exitFns.length;
      while (i--) {
        exitFns[i]();
      }
    }
    function createStructuralDirectiveTransform2(name, fn) {
      const matches = shared.isString(name) ? (n2) => n2 === name : (n2) => name.test(n2);
      return (node2, context) => {
        if (node2.type === 1) {
          const { props } = node2;
          if (node2.tagType === 3 && props.some(isVSlot2)) {
            return;
          }
          const exitFns = [];
          for (let i = 0; i < props.length; i++) {
            const prop = props[i];
            if (prop.type === 7 && matches(prop.name)) {
              props.splice(i, 1);
              i--;
              const onExit = fn(node2, prop, context);
              if (onExit)
                exitFns.push(onExit);
            }
          }
          return exitFns;
        }
      };
    }
    var PURE_ANNOTATION2 = `/*#__PURE__*/`;
    function createCodegenContext2(ast, { mode = "function", prefixIdentifiers = mode === "module", sourceMap: sourceMap$12 = false, filename = `template.vue.html`, scopeId = null, optimizeImports = false, runtimeGlobalName = `Vue`, runtimeModuleName = `vue`, ssrRuntimeModuleName = "vue/server-renderer", ssr = false, isTS = false, inSSR = false }) {
      const context = {
        mode,
        prefixIdentifiers,
        sourceMap: sourceMap$12,
        filename,
        scopeId,
        optimizeImports,
        runtimeGlobalName,
        runtimeModuleName,
        ssrRuntimeModuleName,
        ssr,
        isTS,
        inSSR,
        source: ast.loc.source,
        code: ``,
        column: 1,
        line: 1,
        offset: 0,
        indentLevel: 0,
        pure: false,
        map: void 0,
        helper(key) {
          return `_${helperNameMap2[key]}`;
        },
        push(code, node2) {
          context.code += code;
          if (context.map) {
            if (node2) {
              let name;
              if (node2.type === 4 && !node2.isStatic) {
                const content = node2.content.replace(/^_ctx\./, "");
                if (content !== node2.content && isSimpleIdentifier2(content)) {
                  name = content;
                }
              }
              addMapping(node2.loc.start, name);
            }
            advancePositionWithMutation2(context, code);
            if (node2 && node2.loc !== locStub2) {
              addMapping(node2.loc.end);
            }
          }
        },
        indent() {
          newline(++context.indentLevel);
        },
        deindent(withoutNewLine = false) {
          if (withoutNewLine) {
            --context.indentLevel;
          } else {
            newline(--context.indentLevel);
          }
        },
        newline() {
          newline(context.indentLevel);
        }
      };
      function newline(n2) {
        context.push("\n" + `  `.repeat(n2));
      }
      function addMapping(loc, name) {
        context.map.addMapping({
          name,
          source: context.filename,
          original: {
            line: loc.line,
            column: loc.column - 1
          },
          generated: {
            line: context.line,
            column: context.column - 1
          }
        });
      }
      if (sourceMap$12) {
        context.map = new sourceMap2.SourceMapGenerator();
        context.map.setSourceContent(filename, context.source);
      }
      return context;
    }
    function generate2(ast, options = {}) {
      const context = createCodegenContext2(ast, options);
      if (options.onContextCreated)
        options.onContextCreated(context);
      const { mode, push, prefixIdentifiers, indent: indent2, deindent, newline, scopeId, ssr } = context;
      const hasHelpers = ast.helpers.length > 0;
      const useWithBlock = !prefixIdentifiers && mode !== "module";
      const genScopeId = scopeId != null && mode === "module";
      const isSetupInlined = !!options.inline;
      const preambleContext = isSetupInlined ? createCodegenContext2(ast, options) : context;
      if (mode === "module") {
        genModulePreamble2(ast, preambleContext, genScopeId, isSetupInlined);
      } else {
        genFunctionPreamble2(ast, preambleContext);
      }
      const functionName = ssr ? `ssrRender` : `render`;
      const args = ssr ? ["_ctx", "_push", "_parent", "_attrs"] : ["_ctx", "_cache"];
      if (options.bindingMetadata && !options.inline) {
        args.push("$props", "$setup", "$data", "$options");
      }
      const signature = options.isTS ? args.map((arg) => `${arg}: any`).join(",") : args.join(", ");
      if (isSetupInlined) {
        push(`(${signature}) => {`);
      } else {
        push(`function ${functionName}(${signature}) {`);
      }
      indent2();
      if (useWithBlock) {
        push(`with (_ctx) {`);
        indent2();
        if (hasHelpers) {
          push(`const { ${ast.helpers.map((s) => `${helperNameMap2[s]}: _${helperNameMap2[s]}`).join(", ")} } = _Vue`);
          push(`
`);
          newline();
        }
      }
      if (ast.components.length) {
        genAssets2(ast.components, "component", context);
        if (ast.directives.length || ast.temps > 0) {
          newline();
        }
      }
      if (ast.directives.length) {
        genAssets2(ast.directives, "directive", context);
        if (ast.temps > 0) {
          newline();
        }
      }
      if (ast.filters && ast.filters.length) {
        newline();
        genAssets2(ast.filters, "filter", context);
        newline();
      }
      if (ast.temps > 0) {
        push(`let `);
        for (let i = 0; i < ast.temps; i++) {
          push(`${i > 0 ? `, ` : ``}_temp${i}`);
        }
      }
      if (ast.components.length || ast.directives.length || ast.temps) {
        push(`
`);
        newline();
      }
      if (!ssr) {
        push(`return `);
      }
      if (ast.codegenNode) {
        genNode2(ast.codegenNode, context);
      } else {
        push(`null`);
      }
      if (useWithBlock) {
        deindent();
        push(`}`);
      }
      deindent();
      push(`}`);
      return {
        ast,
        code: context.code,
        preamble: isSetupInlined ? preambleContext.code : ``,
        map: context.map ? context.map.toJSON() : void 0
      };
    }
    function genFunctionPreamble2(ast, context) {
      const { ssr, prefixIdentifiers, push, newline, runtimeModuleName, runtimeGlobalName, ssrRuntimeModuleName } = context;
      const VueBinding = ssr ? `require(${JSON.stringify(runtimeModuleName)})` : runtimeGlobalName;
      const aliasHelper = (s) => `${helperNameMap2[s]}: _${helperNameMap2[s]}`;
      if (ast.helpers.length > 0) {
        if (prefixIdentifiers) {
          push(`const { ${ast.helpers.map(aliasHelper).join(", ")} } = ${VueBinding}
`);
        } else {
          push(`const _Vue = ${VueBinding}
`);
          if (ast.hoists.length) {
            const staticHelpers = [
              CREATE_VNODE2,
              CREATE_ELEMENT_VNODE2,
              CREATE_COMMENT2,
              CREATE_TEXT2,
              CREATE_STATIC2
            ].filter((helper) => ast.helpers.includes(helper)).map(aliasHelper).join(", ");
            push(`const { ${staticHelpers} } = _Vue
`);
          }
        }
      }
      if (ast.ssrHelpers && ast.ssrHelpers.length) {
        push(`const { ${ast.ssrHelpers.map(aliasHelper).join(", ")} } = require("${ssrRuntimeModuleName}")
`);
      }
      genHoists2(ast.hoists, context);
      newline();
      push(`return `);
    }
    function genModulePreamble2(ast, context, genScopeId, inline) {
      const { push, newline, optimizeImports, runtimeModuleName, ssrRuntimeModuleName } = context;
      if (genScopeId && ast.hoists.length) {
        ast.helpers.push(PUSH_SCOPE_ID2, POP_SCOPE_ID2);
      }
      if (ast.helpers.length) {
        if (optimizeImports) {
          push(`import { ${ast.helpers.map((s) => helperNameMap2[s]).join(", ")} } from ${JSON.stringify(runtimeModuleName)}
`);
          push(`
// Binding optimization for webpack code-split
const ${ast.helpers.map((s) => `_${helperNameMap2[s]} = ${helperNameMap2[s]}`).join(", ")}
`);
        } else {
          push(`import { ${ast.helpers.map((s) => `${helperNameMap2[s]} as _${helperNameMap2[s]}`).join(", ")} } from ${JSON.stringify(runtimeModuleName)}
`);
        }
      }
      if (ast.ssrHelpers && ast.ssrHelpers.length) {
        push(`import { ${ast.ssrHelpers.map((s) => `${helperNameMap2[s]} as _${helperNameMap2[s]}`).join(", ")} } from "${ssrRuntimeModuleName}"
`);
      }
      if (ast.imports.length) {
        genImports2(ast.imports, context);
        newline();
      }
      genHoists2(ast.hoists, context);
      newline();
      if (!inline) {
        push(`export `);
      }
    }
    function genAssets2(assets, type, { helper, push, newline, isTS }) {
      const resolver = helper(type === "filter" ? RESOLVE_FILTER2 : type === "component" ? RESOLVE_COMPONENT2 : RESOLVE_DIRECTIVE2);
      for (let i = 0; i < assets.length; i++) {
        let id2 = assets[i];
        const maybeSelfReference = id2.endsWith("__self");
        if (maybeSelfReference) {
          id2 = id2.slice(0, -6);
        }
        push(`const ${toValidAssetId2(id2, type)} = ${resolver}(${JSON.stringify(id2)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`);
        if (i < assets.length - 1) {
          newline();
        }
      }
    }
    function genHoists2(hoists, context) {
      if (!hoists.length) {
        return;
      }
      context.pure = true;
      const { push, newline, helper, scopeId, mode } = context;
      const genScopeId = scopeId != null && mode !== "function";
      newline();
      if (genScopeId) {
        push(`const _withScopeId = n => (${helper(PUSH_SCOPE_ID2)}("${scopeId}"),n=n(),${helper(POP_SCOPE_ID2)}(),n)`);
        newline();
      }
      for (let i = 0; i < hoists.length; i++) {
        const exp = hoists[i];
        if (exp) {
          const needScopeIdWrapper = genScopeId && exp.type === 13;
          push(`const _hoisted_${i + 1} = ${needScopeIdWrapper ? `${PURE_ANNOTATION2} _withScopeId(() => ` : ``}`);
          genNode2(exp, context);
          if (needScopeIdWrapper) {
            push(`)`);
          }
          newline();
        }
      }
      context.pure = false;
    }
    function genImports2(importsOptions, context) {
      if (!importsOptions.length) {
        return;
      }
      importsOptions.forEach((imports) => {
        context.push(`import `);
        genNode2(imports.exp, context);
        context.push(` from '${imports.path}'`);
        context.newline();
      });
    }
    function isText$12(n2) {
      return shared.isString(n2) || n2.type === 4 || n2.type === 2 || n2.type === 5 || n2.type === 8;
    }
    function genNodeListAsArray2(nodes, context) {
      const multilines = nodes.length > 3 || nodes.some((n2) => shared.isArray(n2) || !isText$12(n2));
      context.push(`[`);
      multilines && context.indent();
      genNodeList2(nodes, context, multilines);
      multilines && context.deindent();
      context.push(`]`);
    }
    function genNodeList2(nodes, context, multilines = false, comma = true) {
      const { push, newline } = context;
      for (let i = 0; i < nodes.length; i++) {
        const node2 = nodes[i];
        if (shared.isString(node2)) {
          push(node2);
        } else if (shared.isArray(node2)) {
          genNodeListAsArray2(node2, context);
        } else {
          genNode2(node2, context);
        }
        if (i < nodes.length - 1) {
          if (multilines) {
            comma && push(",");
            newline();
          } else {
            comma && push(", ");
          }
        }
      }
    }
    function genNode2(node2, context) {
      if (shared.isString(node2)) {
        context.push(node2);
        return;
      }
      if (shared.isSymbol(node2)) {
        context.push(context.helper(node2));
        return;
      }
      switch (node2.type) {
        case 1:
        case 9:
        case 11:
          genNode2(node2.codegenNode, context);
          break;
        case 2:
          genText2(node2, context);
          break;
        case 4:
          genExpression2(node2, context);
          break;
        case 5:
          genInterpolation2(node2, context);
          break;
        case 12:
          genNode2(node2.codegenNode, context);
          break;
        case 8:
          genCompoundExpression2(node2, context);
          break;
        case 3:
          genComment2(node2, context);
          break;
        case 13:
          genVNodeCall2(node2, context);
          break;
        case 14:
          genCallExpression2(node2, context);
          break;
        case 15:
          genObjectExpression2(node2, context);
          break;
        case 17:
          genArrayExpression2(node2, context);
          break;
        case 18:
          genFunctionExpression2(node2, context);
          break;
        case 19:
          genConditionalExpression2(node2, context);
          break;
        case 20:
          genCacheExpression2(node2, context);
          break;
        case 21:
          genNodeList2(node2.body, context, true, false);
          break;
        case 22:
          genTemplateLiteral2(node2, context);
          break;
        case 23:
          genIfStatement2(node2, context);
          break;
        case 24:
          genAssignmentExpression2(node2, context);
          break;
        case 25:
          genSequenceExpression2(node2, context);
          break;
        case 26:
          genReturnStatement2(node2, context);
          break;
      }
    }
    function genText2(node2, context) {
      context.push(JSON.stringify(node2.content), node2);
    }
    function genExpression2(node2, context) {
      const { content, isStatic } = node2;
      context.push(isStatic ? JSON.stringify(content) : content, node2);
    }
    function genInterpolation2(node2, context) {
      const { push, helper, pure } = context;
      if (pure)
        push(PURE_ANNOTATION2);
      push(`${helper(TO_DISPLAY_STRING2)}(`);
      genNode2(node2.content, context);
      push(`)`);
    }
    function genCompoundExpression2(node2, context) {
      for (let i = 0; i < node2.children.length; i++) {
        const child = node2.children[i];
        if (shared.isString(child)) {
          context.push(child);
        } else {
          genNode2(child, context);
        }
      }
    }
    function genExpressionAsPropertyKey2(node2, context) {
      const { push } = context;
      if (node2.type === 8) {
        push(`[`);
        genCompoundExpression2(node2, context);
        push(`]`);
      } else if (node2.isStatic) {
        const text = isSimpleIdentifier2(node2.content) ? node2.content : JSON.stringify(node2.content);
        push(text, node2);
      } else {
        push(`[${node2.content}]`, node2);
      }
    }
    function genComment2(node2, context) {
      const { push, helper, pure } = context;
      if (pure) {
        push(PURE_ANNOTATION2);
      }
      push(`${helper(CREATE_COMMENT2)}(${JSON.stringify(node2.content)})`, node2);
    }
    function genVNodeCall2(node2, context) {
      const { push, helper, pure } = context;
      const { tag: tag2, props, children, patchFlag, dynamicProps, directives, isBlock, disableTracking, isComponent: isComponent3 } = node2;
      if (directives) {
        push(helper(WITH_DIRECTIVES2) + `(`);
      }
      if (isBlock) {
        push(`(${helper(OPEN_BLOCK2)}(${disableTracking ? `true` : ``}), `);
      }
      if (pure) {
        push(PURE_ANNOTATION2);
      }
      const callHelper = isBlock ? getVNodeBlockHelper2(context.inSSR, isComponent3) : getVNodeHelper2(context.inSSR, isComponent3);
      push(helper(callHelper) + `(`, node2);
      genNodeList2(genNullableArgs2([tag2, props, children, patchFlag, dynamicProps]), context);
      push(`)`);
      if (isBlock) {
        push(`)`);
      }
      if (directives) {
        push(`, `);
        genNode2(directives, context);
        push(`)`);
      }
    }
    function genNullableArgs2(args) {
      let i = args.length;
      while (i--) {
        if (args[i] != null)
          break;
      }
      return args.slice(0, i + 1).map((arg) => arg || `null`);
    }
    function genCallExpression2(node2, context) {
      const { push, helper, pure } = context;
      const callee = shared.isString(node2.callee) ? node2.callee : helper(node2.callee);
      if (pure) {
        push(PURE_ANNOTATION2);
      }
      push(callee + `(`, node2);
      genNodeList2(node2.arguments, context);
      push(`)`);
    }
    function genObjectExpression2(node2, context) {
      const { push, indent: indent2, deindent, newline } = context;
      const { properties } = node2;
      if (!properties.length) {
        push(`{}`, node2);
        return;
      }
      const multilines = properties.length > 1 || properties.some((p) => p.value.type !== 4);
      push(multilines ? `{` : `{ `);
      multilines && indent2();
      for (let i = 0; i < properties.length; i++) {
        const { key, value } = properties[i];
        genExpressionAsPropertyKey2(key, context);
        push(`: `);
        genNode2(value, context);
        if (i < properties.length - 1) {
          push(`,`);
          newline();
        }
      }
      multilines && deindent();
      push(multilines ? `}` : ` }`);
    }
    function genArrayExpression2(node2, context) {
      genNodeListAsArray2(node2.elements, context);
    }
    function genFunctionExpression2(node2, context) {
      const { push, indent: indent2, deindent } = context;
      const { params, returns, body, newline, isSlot } = node2;
      if (isSlot) {
        push(`_${helperNameMap2[WITH_CTX2]}(`);
      }
      push(`(`, node2);
      if (shared.isArray(params)) {
        genNodeList2(params, context);
      } else if (params) {
        genNode2(params, context);
      }
      push(`) => `);
      if (newline || body) {
        push(`{`);
        indent2();
      }
      if (returns) {
        if (newline) {
          push(`return `);
        }
        if (shared.isArray(returns)) {
          genNodeListAsArray2(returns, context);
        } else {
          genNode2(returns, context);
        }
      } else if (body) {
        genNode2(body, context);
      }
      if (newline || body) {
        deindent();
        push(`}`);
      }
      if (isSlot) {
        if (node2.isNonScopedSlot) {
          push(`, undefined, true`);
        }
        push(`)`);
      }
    }
    function genConditionalExpression2(node2, context) {
      const { test, consequent, alternate, newline: needNewline } = node2;
      const { push, indent: indent2, deindent, newline } = context;
      if (test.type === 4) {
        const needsParens = !isSimpleIdentifier2(test.content);
        needsParens && push(`(`);
        genExpression2(test, context);
        needsParens && push(`)`);
      } else {
        push(`(`);
        genNode2(test, context);
        push(`)`);
      }
      needNewline && indent2();
      context.indentLevel++;
      needNewline || push(` `);
      push(`? `);
      genNode2(consequent, context);
      context.indentLevel--;
      needNewline && newline();
      needNewline || push(` `);
      push(`: `);
      const isNested = alternate.type === 19;
      if (!isNested) {
        context.indentLevel++;
      }
      genNode2(alternate, context);
      if (!isNested) {
        context.indentLevel--;
      }
      needNewline && deindent(true);
    }
    function genCacheExpression2(node2, context) {
      const { push, helper, indent: indent2, deindent, newline } = context;
      push(`_cache[${node2.index}] || (`);
      if (node2.isVNode) {
        indent2();
        push(`${helper(SET_BLOCK_TRACKING2)}(-1),`);
        newline();
      }
      push(`_cache[${node2.index}] = `);
      genNode2(node2.value, context);
      if (node2.isVNode) {
        push(`,`);
        newline();
        push(`${helper(SET_BLOCK_TRACKING2)}(1),`);
        newline();
        push(`_cache[${node2.index}]`);
        deindent();
      }
      push(`)`);
    }
    function genTemplateLiteral2(node2, context) {
      const { push, indent: indent2, deindent } = context;
      push("`");
      const l = node2.elements.length;
      const multilines = l > 3;
      for (let i = 0; i < l; i++) {
        const e = node2.elements[i];
        if (shared.isString(e)) {
          push(e.replace(/(`|\$|\\)/g, "\\$1"));
        } else {
          push("${");
          if (multilines)
            indent2();
          genNode2(e, context);
          if (multilines)
            deindent();
          push("}");
        }
      }
      push("`");
    }
    function genIfStatement2(node2, context) {
      const { push, indent: indent2, deindent } = context;
      const { test, consequent, alternate } = node2;
      push(`if (`);
      genNode2(test, context);
      push(`) {`);
      indent2();
      genNode2(consequent, context);
      deindent();
      push(`}`);
      if (alternate) {
        push(` else `);
        if (alternate.type === 23) {
          genIfStatement2(alternate, context);
        } else {
          push(`{`);
          indent2();
          genNode2(alternate, context);
          deindent();
          push(`}`);
        }
      }
    }
    function genAssignmentExpression2(node2, context) {
      genNode2(node2.left, context);
      context.push(` = `);
      genNode2(node2.right, context);
    }
    function genSequenceExpression2(node2, context) {
      context.push(`(`);
      genNodeList2(node2.expressions, context);
      context.push(`)`);
    }
    function genReturnStatement2({ returns }, context) {
      context.push(`return `);
      if (shared.isArray(returns)) {
        genNodeListAsArray2(returns, context);
      } else {
        genNode2(returns, context);
      }
    }
    function walkIdentifiers2(root2, onIdentifier, includeAll = false, parentStack = [], knownIds = /* @__PURE__ */ Object.create(null)) {
      const rootExp = root2.type === "Program" && root2.body[0].type === "ExpressionStatement" && root2.body[0].expression;
      estreeWalker.walk(root2, {
        enter(node2, parent) {
          parent && parentStack.push(parent);
          if (parent && parent.type.startsWith("TS") && parent.type !== "TSAsExpression" && parent.type !== "TSNonNullExpression" && parent.type !== "TSTypeAssertion") {
            return this.skip();
          }
          if (node2.type === "Identifier") {
            const isLocal = !!knownIds[node2.name];
            const isRefed = isReferencedIdentifier2(node2, parent, parentStack);
            if (includeAll || isRefed && !isLocal) {
              onIdentifier(node2, parent, parentStack, isRefed, isLocal);
            }
          } else if (node2.type === "ObjectProperty" && parent.type === "ObjectPattern") {
            node2.inPattern = true;
          } else if (isFunctionType2(node2)) {
            walkFunctionParams2(node2, (id2) => markScopeIdentifier2(node2, id2, knownIds));
          } else if (node2.type === "BlockStatement") {
            walkBlockDeclarations2(node2, (id2) => markScopeIdentifier2(node2, id2, knownIds));
          }
        },
        leave(node2, parent) {
          parent && parentStack.pop();
          if (node2 !== rootExp && node2.scopeIds) {
            for (const id2 of node2.scopeIds) {
              knownIds[id2]--;
              if (knownIds[id2] === 0) {
                delete knownIds[id2];
              }
            }
          }
        }
      });
    }
    function isReferencedIdentifier2(id2, parent, parentStack) {
      if (!parent) {
        return true;
      }
      if (id2.name === "arguments") {
        return false;
      }
      if (isReferenced2(id2, parent)) {
        return true;
      }
      switch (parent.type) {
        case "AssignmentExpression":
        case "AssignmentPattern":
          return true;
        case "ObjectPattern":
        case "ArrayPattern":
          return isInDestructureAssignment2(parent, parentStack);
      }
      return false;
    }
    function isInDestructureAssignment2(parent, parentStack) {
      if (parent && (parent.type === "ObjectProperty" || parent.type === "ArrayPattern")) {
        let i = parentStack.length;
        while (i--) {
          const p = parentStack[i];
          if (p.type === "AssignmentExpression") {
            return true;
          } else if (p.type !== "ObjectProperty" && !p.type.endsWith("Pattern")) {
            break;
          }
        }
      }
      return false;
    }
    function walkFunctionParams2(node2, onIdent) {
      for (const p of node2.params) {
        for (const id2 of extractIdentifiers2(p)) {
          onIdent(id2);
        }
      }
    }
    function walkBlockDeclarations2(block, onIdent) {
      for (const stmt of block.body) {
        if (stmt.type === "VariableDeclaration") {
          if (stmt.declare)
            continue;
          for (const decl of stmt.declarations) {
            for (const id2 of extractIdentifiers2(decl.id)) {
              onIdent(id2);
            }
          }
        } else if (stmt.type === "FunctionDeclaration" || stmt.type === "ClassDeclaration") {
          if (stmt.declare || !stmt.id)
            continue;
          onIdent(stmt.id);
        }
      }
    }
    function extractIdentifiers2(param, nodes = []) {
      switch (param.type) {
        case "Identifier":
          nodes.push(param);
          break;
        case "MemberExpression":
          let object2 = param;
          while (object2.type === "MemberExpression") {
            object2 = object2.object;
          }
          nodes.push(object2);
          break;
        case "ObjectPattern":
          for (const prop of param.properties) {
            if (prop.type === "RestElement") {
              extractIdentifiers2(prop.argument, nodes);
            } else {
              extractIdentifiers2(prop.value, nodes);
            }
          }
          break;
        case "ArrayPattern":
          param.elements.forEach((element) => {
            if (element)
              extractIdentifiers2(element, nodes);
          });
          break;
        case "RestElement":
          extractIdentifiers2(param.argument, nodes);
          break;
        case "AssignmentPattern":
          extractIdentifiers2(param.left, nodes);
          break;
      }
      return nodes;
    }
    function markScopeIdentifier2(node2, child, knownIds) {
      const { name } = child;
      if (node2.scopeIds && node2.scopeIds.has(name)) {
        return;
      }
      if (name in knownIds) {
        knownIds[name]++;
      } else {
        knownIds[name] = 1;
      }
      (node2.scopeIds || (node2.scopeIds = /* @__PURE__ */ new Set())).add(name);
    }
    var isFunctionType2 = (node2) => {
      return /Function(?:Expression|Declaration)$|Method$/.test(node2.type);
    };
    var isStaticProperty2 = (node2) => node2 && (node2.type === "ObjectProperty" || node2.type === "ObjectMethod") && !node2.computed;
    var isStaticPropertyKey2 = (node2, parent) => isStaticProperty2(parent) && parent.key === node2;
    function isReferenced2(node2, parent, grandparent) {
      switch (parent.type) {
        case "MemberExpression":
        case "OptionalMemberExpression":
          if (parent.property === node2) {
            return !!parent.computed;
          }
          return parent.object === node2;
        case "JSXMemberExpression":
          return parent.object === node2;
        case "VariableDeclarator":
          return parent.init === node2;
        case "ArrowFunctionExpression":
          return parent.body === node2;
        case "PrivateName":
          return false;
        case "ClassMethod":
        case "ClassPrivateMethod":
        case "ObjectMethod":
          if (parent.key === node2) {
            return !!parent.computed;
          }
          return false;
        case "ObjectProperty":
          if (parent.key === node2) {
            return !!parent.computed;
          }
          return !grandparent || grandparent.type !== "ObjectPattern";
        case "ClassProperty":
          if (parent.key === node2) {
            return !!parent.computed;
          }
          return true;
        case "ClassPrivateProperty":
          return parent.key !== node2;
        case "ClassDeclaration":
        case "ClassExpression":
          return parent.superClass === node2;
        case "AssignmentExpression":
          return parent.right === node2;
        case "AssignmentPattern":
          return parent.right === node2;
        case "LabeledStatement":
          return false;
        case "CatchClause":
          return false;
        case "RestElement":
          return false;
        case "BreakStatement":
        case "ContinueStatement":
          return false;
        case "FunctionDeclaration":
        case "FunctionExpression":
          return false;
        case "ExportNamespaceSpecifier":
        case "ExportDefaultSpecifier":
          return false;
        case "ExportSpecifier":
          if (grandparent === null || grandparent === void 0 ? void 0 : grandparent.source) {
            return false;
          }
          return parent.local === node2;
        case "ImportDefaultSpecifier":
        case "ImportNamespaceSpecifier":
        case "ImportSpecifier":
          return false;
        case "ImportAttribute":
          return false;
        case "JSXAttribute":
          return false;
        case "ObjectPattern":
        case "ArrayPattern":
          return false;
        case "MetaProperty":
          return false;
        case "ObjectTypeProperty":
          return parent.key !== node2;
        case "TSEnumMember":
          return parent.id !== node2;
        case "TSPropertySignature":
          if (parent.key === node2) {
            return !!parent.computed;
          }
          return true;
      }
      return true;
    }
    var isLiteralWhitelisted2 = /* @__PURE__ */ shared.makeMap("true,false,null,this");
    var transformExpression2 = (node2, context) => {
      if (node2.type === 5) {
        node2.content = processExpression2(node2.content, context);
      } else if (node2.type === 1) {
        for (let i = 0; i < node2.props.length; i++) {
          const dir = node2.props[i];
          if (dir.type === 7 && dir.name !== "for") {
            const exp = dir.exp;
            const arg = dir.arg;
            if (exp && exp.type === 4 && !(dir.name === "on" && arg)) {
              dir.exp = processExpression2(exp, context, dir.name === "slot");
            }
            if (arg && arg.type === 4 && !arg.isStatic) {
              dir.arg = processExpression2(arg, context);
            }
          }
        }
      }
    };
    function processExpression2(node2, context, asParams = false, asRawStatements = false, localVars = Object.create(context.identifiers)) {
      if (!context.prefixIdentifiers || !node2.content.trim()) {
        return node2;
      }
      const { inline, bindingMetadata } = context;
      const rewriteIdentifier = (raw, parent, id2) => {
        const type = shared.hasOwn(bindingMetadata, raw) && bindingMetadata[raw];
        if (inline) {
          const isAssignmentLVal = parent && parent.type === "AssignmentExpression" && parent.left === id2;
          const isUpdateArg = parent && parent.type === "UpdateExpression" && parent.argument === id2;
          const isDestructureAssignment = parent && isInDestructureAssignment2(parent, parentStack);
          if (type === "setup-const" || localVars[raw]) {
            return raw;
          } else if (type === "setup-ref") {
            return `${raw}.value`;
          } else if (type === "setup-maybe-ref") {
            return isAssignmentLVal || isUpdateArg || isDestructureAssignment ? `${raw}.value` : `${context.helperString(UNREF2)}(${raw})`;
          } else if (type === "setup-let") {
            if (isAssignmentLVal) {
              const { right: rVal, operator } = parent;
              const rExp = rawExp.slice(rVal.start - 1, rVal.end - 1);
              const rExpString = stringifyExpression2(processExpression2(createSimpleExpression2(rExp, false), context, false, false, knownIds));
              return `${context.helperString(IS_REF2)}(${raw})${context.isTS ? ` //@ts-ignore
` : ``} ? ${raw}.value ${operator} ${rExpString} : ${raw}`;
            } else if (isUpdateArg) {
              id2.start = parent.start;
              id2.end = parent.end;
              const { prefix: isPrefix, operator } = parent;
              const prefix2 = isPrefix ? operator : ``;
              const postfix2 = isPrefix ? `` : operator;
              return `${context.helperString(IS_REF2)}(${raw})${context.isTS ? ` //@ts-ignore
` : ``} ? ${prefix2}${raw}.value${postfix2} : ${prefix2}${raw}${postfix2}`;
            } else if (isDestructureAssignment) {
              return raw;
            } else {
              return `${context.helperString(UNREF2)}(${raw})`;
            }
          } else if (type === "props") {
            return `__props.${raw}`;
          } else if (type === "props-aliased") {
            return `__props.${bindingMetadata.__propsAliases[raw]}`;
          }
        } else {
          if (type && type.startsWith("setup")) {
            return `$setup.${raw}`;
          } else if (type === "props-aliased") {
            return `$props.${bindingMetadata.__propsAliases[raw]}`;
          } else if (type) {
            return `$${type}.${raw}`;
          }
        }
        return `_ctx.${raw}`;
      };
      const rawExp = node2.content;
      const bailConstant = rawExp.indexOf(`(`) > -1 || rawExp.indexOf(".") > 0;
      if (isSimpleIdentifier2(rawExp)) {
        const isScopeVarReference = context.identifiers[rawExp];
        const isAllowedGlobal = shared.isGloballyWhitelisted(rawExp);
        const isLiteral = isLiteralWhitelisted2(rawExp);
        if (!asParams && !isScopeVarReference && !isAllowedGlobal && !isLiteral) {
          if (bindingMetadata[node2.content] === "setup-const") {
            node2.constType = 1;
          }
          node2.content = rewriteIdentifier(rawExp);
        } else if (!isScopeVarReference) {
          if (isLiteral) {
            node2.constType = 3;
          } else {
            node2.constType = 2;
          }
        }
        return node2;
      }
      let ast;
      const source = asRawStatements ? ` ${rawExp} ` : `(${rawExp})${asParams ? `=>{}` : ``}`;
      try {
        ast = parser2.parse(source, {
          plugins: context.expressionPlugins
        }).program;
      } catch (e) {
        context.onError(createCompilerError2(44, node2.loc, void 0, e.message));
        return node2;
      }
      const ids = [];
      const parentStack = [];
      const knownIds = Object.create(context.identifiers);
      walkIdentifiers2(ast, (node3, parent, _, isReferenced3, isLocal) => {
        if (isStaticPropertyKey2(node3, parent)) {
          return;
        }
        if (node3.name.startsWith("_filter_")) {
          return;
        }
        const needPrefix = isReferenced3 && canPrefix2(node3);
        if (needPrefix && !isLocal) {
          if (isStaticProperty2(parent) && parent.shorthand) {
            node3.prefix = `${node3.name}: `;
          }
          node3.name = rewriteIdentifier(node3.name, parent, node3);
          ids.push(node3);
        } else {
          if (!(needPrefix && isLocal) && !bailConstant) {
            node3.isConstant = true;
          }
          ids.push(node3);
        }
      }, true, parentStack, knownIds);
      const children = [];
      ids.sort((a, b) => a.start - b.start);
      ids.forEach((id2, i) => {
        const start = id2.start - 1;
        const end = id2.end - 1;
        const last3 = ids[i - 1];
        const leadingText = rawExp.slice(last3 ? last3.end - 1 : 0, start);
        if (leadingText.length || id2.prefix) {
          children.push(leadingText + (id2.prefix || ``));
        }
        const source2 = rawExp.slice(start, end);
        children.push(createSimpleExpression2(id2.name, false, {
          source: source2,
          start: advancePositionWithClone2(node2.loc.start, source2, start),
          end: advancePositionWithClone2(node2.loc.start, source2, end)
        }, id2.isConstant ? 3 : 0));
        if (i === ids.length - 1 && end < rawExp.length) {
          children.push(rawExp.slice(end));
        }
      });
      let ret;
      if (children.length) {
        ret = createCompoundExpression2(children, node2.loc);
      } else {
        ret = node2;
        ret.constType = bailConstant ? 0 : 3;
      }
      ret.identifiers = Object.keys(knownIds);
      return ret;
    }
    function canPrefix2(id2) {
      if (shared.isGloballyWhitelisted(id2.name)) {
        return false;
      }
      if (id2.name === "require") {
        return false;
      }
      return true;
    }
    function stringifyExpression2(exp) {
      if (shared.isString(exp)) {
        return exp;
      } else if (exp.type === 4) {
        return exp.content;
      } else {
        return exp.children.map(stringifyExpression2).join("");
      }
    }
    var transformIf2 = createStructuralDirectiveTransform2(/^(if|else|else-if)$/, (node2, dir, context) => {
      return processIf2(node2, dir, context, (ifNode, branch, isRoot) => {
        const siblings = context.parent.children;
        let i = siblings.indexOf(ifNode);
        let key = 0;
        while (i-- >= 0) {
          const sibling = siblings[i];
          if (sibling && sibling.type === 9) {
            key += sibling.branches.length;
          }
        }
        return () => {
          if (isRoot) {
            ifNode.codegenNode = createCodegenNodeForBranch2(branch, key, context);
          } else {
            const parentCondition = getParentCondition2(ifNode.codegenNode);
            parentCondition.alternate = createCodegenNodeForBranch2(branch, key + ifNode.branches.length - 1, context);
          }
        };
      });
    });
    function processIf2(node2, dir, context, processCodegen) {
      if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
        const loc = dir.exp ? dir.exp.loc : node2.loc;
        context.onError(createCompilerError2(28, dir.loc));
        dir.exp = createSimpleExpression2(`true`, false, loc);
      }
      if (context.prefixIdentifiers && dir.exp) {
        dir.exp = processExpression2(dir.exp, context);
      }
      if (dir.name === "if") {
        const branch = createIfBranch2(node2, dir);
        const ifNode = {
          type: 9,
          loc: node2.loc,
          branches: [branch]
        };
        context.replaceNode(ifNode);
        if (processCodegen) {
          return processCodegen(ifNode, branch, true);
        }
      } else {
        const siblings = context.parent.children;
        let i = siblings.indexOf(node2);
        while (i-- >= -1) {
          const sibling = siblings[i];
          if (sibling && sibling.type === 2 && !sibling.content.trim().length) {
            context.removeNode(sibling);
            continue;
          }
          if (sibling && sibling.type === 9) {
            if (dir.name === "else-if" && sibling.branches[sibling.branches.length - 1].condition === void 0) {
              context.onError(createCompilerError2(30, node2.loc));
            }
            context.removeNode();
            const branch = createIfBranch2(node2, dir);
            {
              const key = branch.userKey;
              if (key) {
                sibling.branches.forEach(({ userKey }) => {
                  if (isSameKey2(userKey, key)) {
                    context.onError(createCompilerError2(29, branch.userKey.loc));
                  }
                });
              }
            }
            sibling.branches.push(branch);
            const onExit = processCodegen && processCodegen(sibling, branch, false);
            traverseNode2(branch, context);
            if (onExit)
              onExit();
            context.currentNode = null;
          } else {
            context.onError(createCompilerError2(30, node2.loc));
          }
          break;
        }
      }
    }
    function createIfBranch2(node2, dir) {
      return {
        type: 10,
        loc: node2.loc,
        condition: dir.name === "else" ? void 0 : dir.exp,
        children: node2.tagType === 3 && !findDir2(node2, "for") ? node2.children : [node2],
        userKey: findProp2(node2, `key`)
      };
    }
    function createCodegenNodeForBranch2(branch, keyIndex, context) {
      if (branch.condition) {
        return createConditionalExpression2(branch.condition, createChildrenCodegenNode2(branch, keyIndex, context), createCallExpression2(context.helper(CREATE_COMMENT2), [
          '""',
          "true"
        ]));
      } else {
        return createChildrenCodegenNode2(branch, keyIndex, context);
      }
    }
    function createChildrenCodegenNode2(branch, keyIndex, context) {
      const { helper } = context;
      const keyProperty = createObjectProperty2(`key`, createSimpleExpression2(`${keyIndex}`, false, locStub2, 2));
      const { children } = branch;
      const firstChild = children[0];
      const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1;
      if (needFragmentWrapper) {
        if (children.length === 1 && firstChild.type === 11) {
          const vnodeCall = firstChild.codegenNode;
          injectProp2(vnodeCall, keyProperty, context);
          return vnodeCall;
        } else {
          let patchFlag = 64;
          shared.PatchFlagNames[64];
          return createVNodeCall2(context, helper(FRAGMENT2), createObjectExpression2([keyProperty]), children, patchFlag + ``, void 0, void 0, true, false, false, branch.loc);
        }
      } else {
        const ret = firstChild.codegenNode;
        const vnodeCall = getMemoedVNodeCall2(ret);
        if (vnodeCall.type === 13) {
          makeBlock2(vnodeCall, context);
        }
        injectProp2(vnodeCall, keyProperty, context);
        return ret;
      }
    }
    function isSameKey2(a, b) {
      if (!a || a.type !== b.type) {
        return false;
      }
      if (a.type === 6) {
        if (a.value.content !== b.value.content) {
          return false;
        }
      } else {
        const exp = a.exp;
        const branchExp = b.exp;
        if (exp.type !== branchExp.type) {
          return false;
        }
        if (exp.type !== 4 || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) {
          return false;
        }
      }
      return true;
    }
    function getParentCondition2(node2) {
      while (true) {
        if (node2.type === 19) {
          if (node2.alternate.type === 19) {
            node2 = node2.alternate;
          } else {
            return node2;
          }
        } else if (node2.type === 20) {
          node2 = node2.value;
        }
      }
    }
    var transformFor2 = createStructuralDirectiveTransform2("for", (node2, dir, context) => {
      const { helper, removeHelper } = context;
      return processFor2(node2, dir, context, (forNode) => {
        const renderExp = createCallExpression2(helper(RENDER_LIST2), [
          forNode.source
        ]);
        const isTemplate = isTemplateNode2(node2);
        const memo = findDir2(node2, "memo");
        const keyProp = findProp2(node2, `key`);
        const keyExp = keyProp && (keyProp.type === 6 ? createSimpleExpression2(keyProp.value.content, true) : keyProp.exp);
        const keyProperty = keyProp ? createObjectProperty2(`key`, keyExp) : null;
        if (isTemplate) {
          if (memo) {
            memo.exp = processExpression2(memo.exp, context);
          }
          if (keyProperty && keyProp.type !== 6) {
            keyProperty.value = processExpression2(keyProperty.value, context);
          }
        }
        const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;
        const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;
        forNode.codegenNode = createVNodeCall2(context, helper(FRAGMENT2), void 0, renderExp, fragmentFlag + ``, void 0, void 0, true, !isStableFragment, false, node2.loc);
        return () => {
          let childBlock;
          const { children } = forNode;
          if (isTemplate) {
            node2.children.some((c) => {
              if (c.type === 1) {
                const key = findProp2(c, "key");
                if (key) {
                  context.onError(createCompilerError2(33, key.loc));
                  return true;
                }
              }
            });
          }
          const needFragmentWrapper = children.length !== 1 || children[0].type !== 1;
          const slotOutlet = isSlotOutlet2(node2) ? node2 : isTemplate && node2.children.length === 1 && isSlotOutlet2(node2.children[0]) ? node2.children[0] : null;
          if (slotOutlet) {
            childBlock = slotOutlet.codegenNode;
            if (isTemplate && keyProperty) {
              injectProp2(childBlock, keyProperty, context);
            }
          } else if (needFragmentWrapper) {
            childBlock = createVNodeCall2(context, helper(FRAGMENT2), keyProperty ? createObjectExpression2([keyProperty]) : void 0, node2.children, 64 + ``, void 0, void 0, true, void 0, false);
          } else {
            childBlock = children[0].codegenNode;
            if (isTemplate && keyProperty) {
              injectProp2(childBlock, keyProperty, context);
            }
            if (childBlock.isBlock !== !isStableFragment) {
              if (childBlock.isBlock) {
                removeHelper(OPEN_BLOCK2);
                removeHelper(getVNodeBlockHelper2(context.inSSR, childBlock.isComponent));
              } else {
                removeHelper(getVNodeHelper2(context.inSSR, childBlock.isComponent));
              }
            }
            childBlock.isBlock = !isStableFragment;
            if (childBlock.isBlock) {
              helper(OPEN_BLOCK2);
              helper(getVNodeBlockHelper2(context.inSSR, childBlock.isComponent));
            } else {
              helper(getVNodeHelper2(context.inSSR, childBlock.isComponent));
            }
          }
          if (memo) {
            const loop = createFunctionExpression2(createForLoopParams2(forNode.parseResult, [
              createSimpleExpression2(`_cached`)
            ]));
            loop.body = createBlockStatement2([
              createCompoundExpression2([`const _memo = (`, memo.exp, `)`]),
              createCompoundExpression2([
                `if (_cached`,
                ...keyExp ? [` && _cached.key === `, keyExp] : [],
                ` && ${context.helperString(IS_MEMO_SAME2)}(_cached, _memo)) return _cached`
              ]),
              createCompoundExpression2([`const _item = `, childBlock]),
              createSimpleExpression2(`_item.memo = _memo`),
              createSimpleExpression2(`return _item`)
            ]);
            renderExp.arguments.push(loop, createSimpleExpression2(`_cache`), createSimpleExpression2(String(context.cached++)));
          } else {
            renderExp.arguments.push(createFunctionExpression2(createForLoopParams2(forNode.parseResult), childBlock, true));
          }
        };
      });
    });
    function processFor2(node2, dir, context, processCodegen) {
      if (!dir.exp) {
        context.onError(createCompilerError2(31, dir.loc));
        return;
      }
      const parseResult = parseForExpression2(dir.exp, context);
      if (!parseResult) {
        context.onError(createCompilerError2(32, dir.loc));
        return;
      }
      const { addIdentifiers, removeIdentifiers, scopes } = context;
      const { source, value, key, index } = parseResult;
      const forNode = {
        type: 11,
        loc: dir.loc,
        source,
        valueAlias: value,
        keyAlias: key,
        objectIndexAlias: index,
        parseResult,
        children: isTemplateNode2(node2) ? node2.children : [node2]
      };
      context.replaceNode(forNode);
      scopes.vFor++;
      if (context.prefixIdentifiers) {
        value && addIdentifiers(value);
        key && addIdentifiers(key);
        index && addIdentifiers(index);
      }
      const onExit = processCodegen && processCodegen(forNode);
      return () => {
        scopes.vFor--;
        if (context.prefixIdentifiers) {
          value && removeIdentifiers(value);
          key && removeIdentifiers(key);
          index && removeIdentifiers(index);
        }
        if (onExit)
          onExit();
      };
    }
    var forAliasRE2 = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
    var forIteratorRE2 = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
    var stripParensRE2 = /^\(|\)$/g;
    function parseForExpression2(input2, context) {
      const loc = input2.loc;
      const exp = input2.content;
      const inMatch = exp.match(forAliasRE2);
      if (!inMatch)
        return;
      const [, LHS, RHS] = inMatch;
      const result2 = {
        source: createAliasExpression2(loc, RHS.trim(), exp.indexOf(RHS, LHS.length)),
        value: void 0,
        key: void 0,
        index: void 0
      };
      if (context.prefixIdentifiers) {
        result2.source = processExpression2(result2.source, context);
      }
      let valueContent = LHS.trim().replace(stripParensRE2, "").trim();
      const trimmedOffset = LHS.indexOf(valueContent);
      const iteratorMatch = valueContent.match(forIteratorRE2);
      if (iteratorMatch) {
        valueContent = valueContent.replace(forIteratorRE2, "").trim();
        const keyContent = iteratorMatch[1].trim();
        let keyOffset;
        if (keyContent) {
          keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
          result2.key = createAliasExpression2(loc, keyContent, keyOffset);
          if (context.prefixIdentifiers) {
            result2.key = processExpression2(result2.key, context, true);
          }
        }
        if (iteratorMatch[2]) {
          const indexContent = iteratorMatch[2].trim();
          if (indexContent) {
            result2.index = createAliasExpression2(loc, indexContent, exp.indexOf(indexContent, result2.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length));
            if (context.prefixIdentifiers) {
              result2.index = processExpression2(result2.index, context, true);
            }
          }
        }
      }
      if (valueContent) {
        result2.value = createAliasExpression2(loc, valueContent, trimmedOffset);
        if (context.prefixIdentifiers) {
          result2.value = processExpression2(result2.value, context, true);
        }
      }
      return result2;
    }
    function createAliasExpression2(range2, content, offset) {
      return createSimpleExpression2(content, false, getInnerRange2(range2, offset, content.length));
    }
    function createForLoopParams2({ value, key, index }, memoArgs = []) {
      return createParamsList2([value, key, index, ...memoArgs]);
    }
    function createParamsList2(args) {
      let i = args.length;
      while (i--) {
        if (args[i])
          break;
      }
      return args.slice(0, i + 1).map((arg, i2) => arg || createSimpleExpression2(`_`.repeat(i2 + 1), false));
    }
    var defaultFallback2 = createSimpleExpression2(`undefined`, false);
    var trackSlotScopes2 = (node2, context) => {
      if (node2.type === 1 && (node2.tagType === 1 || node2.tagType === 3)) {
        const vSlot = findDir2(node2, "slot");
        if (vSlot) {
          const slotProps = vSlot.exp;
          if (context.prefixIdentifiers) {
            slotProps && context.addIdentifiers(slotProps);
          }
          context.scopes.vSlot++;
          return () => {
            if (context.prefixIdentifiers) {
              slotProps && context.removeIdentifiers(slotProps);
            }
            context.scopes.vSlot--;
          };
        }
      }
    };
    var trackVForSlotScopes2 = (node2, context) => {
      let vFor;
      if (isTemplateNode2(node2) && node2.props.some(isVSlot2) && (vFor = findDir2(node2, "for"))) {
        const result2 = vFor.parseResult = parseForExpression2(vFor.exp, context);
        if (result2) {
          const { value, key, index } = result2;
          const { addIdentifiers, removeIdentifiers } = context;
          value && addIdentifiers(value);
          key && addIdentifiers(key);
          index && addIdentifiers(index);
          return () => {
            value && removeIdentifiers(value);
            key && removeIdentifiers(key);
            index && removeIdentifiers(index);
          };
        }
      }
    };
    var buildClientSlotFn2 = (props, children, loc) => createFunctionExpression2(props, children, false, true, children.length ? children[0].loc : loc);
    function buildSlots2(node2, context, buildSlotFn = buildClientSlotFn2) {
      context.helper(WITH_CTX2);
      const { children, loc } = node2;
      const slotsProperties = [];
      const dynamicSlots = [];
      let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
      if (!context.ssr && context.prefixIdentifiers) {
        hasDynamicSlots = hasScopeRef2(node2, context.identifiers);
      }
      const onComponentSlot = findDir2(node2, "slot", true);
      if (onComponentSlot) {
        const { arg, exp } = onComponentSlot;
        if (arg && !isStaticExp2(arg)) {
          hasDynamicSlots = true;
        }
        slotsProperties.push(createObjectProperty2(arg || createSimpleExpression2("default", true), buildSlotFn(exp, children, loc)));
      }
      let hasTemplateSlots = false;
      let hasNamedDefaultSlot = false;
      const implicitDefaultChildren = [];
      const seenSlotNames = /* @__PURE__ */ new Set();
      for (let i = 0; i < children.length; i++) {
        const slotElement = children[i];
        let slotDir;
        if (!isTemplateNode2(slotElement) || !(slotDir = findDir2(slotElement, "slot", true))) {
          if (slotElement.type !== 3) {
            implicitDefaultChildren.push(slotElement);
          }
          continue;
        }
        if (onComponentSlot) {
          context.onError(createCompilerError2(37, slotDir.loc));
          break;
        }
        hasTemplateSlots = true;
        const { children: slotChildren, loc: slotLoc } = slotElement;
        const { arg: slotName = createSimpleExpression2(`default`, true), exp: slotProps, loc: dirLoc } = slotDir;
        let staticSlotName;
        if (isStaticExp2(slotName)) {
          staticSlotName = slotName ? slotName.content : `default`;
        } else {
          hasDynamicSlots = true;
        }
        const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);
        let vIf;
        let vElse;
        let vFor;
        if (vIf = findDir2(slotElement, "if")) {
          hasDynamicSlots = true;
          dynamicSlots.push(createConditionalExpression2(vIf.exp, buildDynamicSlot2(slotName, slotFunction), defaultFallback2));
        } else if (vElse = findDir2(slotElement, /^else(-if)?$/, true)) {
          let j = i;
          let prev;
          while (j--) {
            prev = children[j];
            if (prev.type !== 3) {
              break;
            }
          }
          if (prev && isTemplateNode2(prev) && findDir2(prev, "if")) {
            children.splice(i, 1);
            i--;
            let conditional = dynamicSlots[dynamicSlots.length - 1];
            while (conditional.alternate.type === 19) {
              conditional = conditional.alternate;
            }
            conditional.alternate = vElse.exp ? createConditionalExpression2(vElse.exp, buildDynamicSlot2(slotName, slotFunction), defaultFallback2) : buildDynamicSlot2(slotName, slotFunction);
          } else {
            context.onError(createCompilerError2(30, vElse.loc));
          }
        } else if (vFor = findDir2(slotElement, "for")) {
          hasDynamicSlots = true;
          const parseResult = vFor.parseResult || parseForExpression2(vFor.exp, context);
          if (parseResult) {
            dynamicSlots.push(createCallExpression2(context.helper(RENDER_LIST2), [
              parseResult.source,
              createFunctionExpression2(createForLoopParams2(parseResult), buildDynamicSlot2(slotName, slotFunction), true)
            ]));
          } else {
            context.onError(createCompilerError2(32, vFor.loc));
          }
        } else {
          if (staticSlotName) {
            if (seenSlotNames.has(staticSlotName)) {
              context.onError(createCompilerError2(38, dirLoc));
              continue;
            }
            seenSlotNames.add(staticSlotName);
            if (staticSlotName === "default") {
              hasNamedDefaultSlot = true;
            }
          }
          slotsProperties.push(createObjectProperty2(slotName, slotFunction));
        }
      }
      if (!onComponentSlot) {
        const buildDefaultSlotProperty = (props, children2) => {
          const fn = buildSlotFn(props, children2, loc);
          if (context.compatConfig) {
            fn.isNonScopedSlot = true;
          }
          return createObjectProperty2(`default`, fn);
        };
        if (!hasTemplateSlots) {
          slotsProperties.push(buildDefaultSlotProperty(void 0, children));
        } else if (implicitDefaultChildren.length && implicitDefaultChildren.some((node3) => isNonWhitespaceContent2(node3))) {
          if (hasNamedDefaultSlot) {
            context.onError(createCompilerError2(39, implicitDefaultChildren[0].loc));
          } else {
            slotsProperties.push(buildDefaultSlotProperty(void 0, implicitDefaultChildren));
          }
        }
      }
      const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots2(node2.children) ? 3 : 1;
      let slots = createObjectExpression2(slotsProperties.concat(createObjectProperty2(`_`, createSimpleExpression2(slotFlag + ``, false))), loc);
      if (dynamicSlots.length) {
        slots = createCallExpression2(context.helper(CREATE_SLOTS2), [
          slots,
          createArrayExpression2(dynamicSlots)
        ]);
      }
      return {
        slots,
        hasDynamicSlots
      };
    }
    function buildDynamicSlot2(name, fn) {
      return createObjectExpression2([
        createObjectProperty2(`name`, name),
        createObjectProperty2(`fn`, fn)
      ]);
    }
    function hasForwardedSlots2(children) {
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        switch (child.type) {
          case 1:
            if (child.tagType === 2 || hasForwardedSlots2(child.children)) {
              return true;
            }
            break;
          case 9:
            if (hasForwardedSlots2(child.branches))
              return true;
            break;
          case 10:
          case 11:
            if (hasForwardedSlots2(child.children))
              return true;
            break;
        }
      }
      return false;
    }
    function isNonWhitespaceContent2(node2) {
      if (node2.type !== 2 && node2.type !== 12)
        return true;
      return node2.type === 2 ? !!node2.content.trim() : isNonWhitespaceContent2(node2.content);
    }
    var directiveImportMap2 = /* @__PURE__ */ new WeakMap();
    var transformElement2 = (node2, context) => {
      return function postTransformElement() {
        node2 = context.currentNode;
        if (!(node2.type === 1 && (node2.tagType === 0 || node2.tagType === 1))) {
          return;
        }
        const { tag: tag2, props } = node2;
        const isComponent3 = node2.tagType === 1;
        let vnodeTag = isComponent3 ? resolveComponentType2(node2, context) : `"${tag2}"`;
        const isDynamicComponent = shared.isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT2;
        let vnodeProps;
        let vnodeChildren;
        let vnodePatchFlag;
        let patchFlag = 0;
        let vnodeDynamicProps;
        let dynamicPropNames;
        let vnodeDirectives;
        let shouldUseBlock = isDynamicComponent || vnodeTag === TELEPORT2 || vnodeTag === SUSPENSE2 || !isComponent3 && (tag2 === "svg" || tag2 === "foreignObject");
        if (props.length > 0) {
          const propsBuildResult = buildProps2(node2, context);
          vnodeProps = propsBuildResult.props;
          patchFlag = propsBuildResult.patchFlag;
          dynamicPropNames = propsBuildResult.dynamicPropNames;
          const directives = propsBuildResult.directives;
          vnodeDirectives = directives && directives.length ? createArrayExpression2(directives.map((dir) => buildDirectiveArgs2(dir, context))) : void 0;
          if (propsBuildResult.shouldUseBlock) {
            shouldUseBlock = true;
          }
        }
        if (node2.children.length > 0) {
          if (vnodeTag === KEEP_ALIVE2) {
            shouldUseBlock = true;
            patchFlag |= 1024;
          }
          const shouldBuildAsSlots = isComponent3 && vnodeTag !== TELEPORT2 && vnodeTag !== KEEP_ALIVE2;
          if (shouldBuildAsSlots) {
            const { slots, hasDynamicSlots } = buildSlots2(node2, context);
            vnodeChildren = slots;
            if (hasDynamicSlots) {
              patchFlag |= 1024;
            }
          } else if (node2.children.length === 1 && vnodeTag !== TELEPORT2) {
            const child = node2.children[0];
            const type = child.type;
            const hasDynamicTextChild = type === 5 || type === 8;
            if (hasDynamicTextChild && getConstantType2(child, context) === 0) {
              patchFlag |= 1;
            }
            if (hasDynamicTextChild || type === 2) {
              vnodeChildren = child;
            } else {
              vnodeChildren = node2.children;
            }
          } else {
            vnodeChildren = node2.children;
          }
        }
        if (patchFlag !== 0) {
          {
            vnodePatchFlag = String(patchFlag);
          }
          if (dynamicPropNames && dynamicPropNames.length) {
            vnodeDynamicProps = stringifyDynamicPropNames2(dynamicPropNames);
          }
        }
        node2.codegenNode = createVNodeCall2(context, vnodeTag, vnodeProps, vnodeChildren, vnodePatchFlag, vnodeDynamicProps, vnodeDirectives, !!shouldUseBlock, false, isComponent3, node2.loc);
      };
    };
    function resolveComponentType2(node2, context, ssr = false) {
      let { tag: tag2 } = node2;
      const isExplicitDynamic = isComponentTag2(tag2);
      const isProp = findProp2(node2, "is");
      if (isProp) {
        if (isExplicitDynamic || isCompatEnabled2("COMPILER_IS_ON_ELEMENT", context)) {
          const exp = isProp.type === 6 ? isProp.value && createSimpleExpression2(isProp.value.content, true) : isProp.exp;
          if (exp) {
            return createCallExpression2(context.helper(RESOLVE_DYNAMIC_COMPONENT2), [
              exp
            ]);
          }
        } else if (isProp.type === 6 && isProp.value.content.startsWith("vue:")) {
          tag2 = isProp.value.content.slice(4);
        }
      }
      const isDir = !isExplicitDynamic && findDir2(node2, "is");
      if (isDir && isDir.exp) {
        return createCallExpression2(context.helper(RESOLVE_DYNAMIC_COMPONENT2), [
          isDir.exp
        ]);
      }
      const builtIn = isCoreComponent2(tag2) || context.isBuiltInComponent(tag2);
      if (builtIn) {
        if (!ssr)
          context.helper(builtIn);
        return builtIn;
      }
      {
        const fromSetup = resolveSetupReference2(tag2, context);
        if (fromSetup) {
          return fromSetup;
        }
        const dotIndex = tag2.indexOf(".");
        if (dotIndex > 0) {
          const ns = resolveSetupReference2(tag2.slice(0, dotIndex), context);
          if (ns) {
            return ns + tag2.slice(dotIndex);
          }
        }
      }
      if (context.selfName && shared.capitalize(shared.camelize(tag2)) === context.selfName) {
        context.helper(RESOLVE_COMPONENT2);
        context.components.add(tag2 + `__self`);
        return toValidAssetId2(tag2, `component`);
      }
      context.helper(RESOLVE_COMPONENT2);
      context.components.add(tag2);
      return toValidAssetId2(tag2, `component`);
    }
    function resolveSetupReference2(name, context) {
      const bindings = context.bindingMetadata;
      if (!bindings || bindings.__isScriptSetup === false) {
        return;
      }
      const camelName = shared.camelize(name);
      const PascalName = shared.capitalize(camelName);
      const checkType = (type) => {
        if (bindings[name] === type) {
          return name;
        }
        if (bindings[camelName] === type) {
          return camelName;
        }
        if (bindings[PascalName] === type) {
          return PascalName;
        }
      };
      const fromConst = checkType("setup-const");
      if (fromConst) {
        return context.inline ? fromConst : `$setup[${JSON.stringify(fromConst)}]`;
      }
      const fromMaybeRef = checkType("setup-let") || checkType("setup-ref") || checkType("setup-maybe-ref");
      if (fromMaybeRef) {
        return context.inline ? `${context.helperString(UNREF2)}(${fromMaybeRef})` : `$setup[${JSON.stringify(fromMaybeRef)}]`;
      }
    }
    function buildProps2(node2, context, props = node2.props, ssr = false) {
      const { tag: tag2, loc: elementLoc, children } = node2;
      const isComponent3 = node2.tagType === 1;
      let properties = [];
      const mergeArgs = [];
      const runtimeDirectives = [];
      const hasChildren = children.length > 0;
      let shouldUseBlock = false;
      let patchFlag = 0;
      let hasRef = false;
      let hasClassBinding = false;
      let hasStyleBinding = false;
      let hasHydrationEventBinding = false;
      let hasDynamicKeys = false;
      let hasVnodeHook = false;
      const dynamicPropNames = [];
      const analyzePatchFlag = ({ key, value }) => {
        if (isStaticExp2(key)) {
          const name = key.content;
          const isEventHandler = shared.isOn(name);
          if (!isComponent3 && isEventHandler && name.toLowerCase() !== "onclick" && name !== "onUpdate:modelValue" && !shared.isReservedProp(name)) {
            hasHydrationEventBinding = true;
          }
          if (isEventHandler && shared.isReservedProp(name)) {
            hasVnodeHook = true;
          }
          if (value.type === 20 || (value.type === 4 || value.type === 8) && getConstantType2(value, context) > 0) {
            return;
          }
          if (name === "ref") {
            hasRef = true;
          } else if (name === "class") {
            hasClassBinding = true;
          } else if (name === "style") {
            hasStyleBinding = true;
          } else if (name !== "key" && !dynamicPropNames.includes(name)) {
            dynamicPropNames.push(name);
          }
          if (isComponent3 && (name === "class" || name === "style") && !dynamicPropNames.includes(name)) {
            dynamicPropNames.push(name);
          }
        } else {
          hasDynamicKeys = true;
        }
      };
      for (let i = 0; i < props.length; i++) {
        const prop = props[i];
        if (prop.type === 6) {
          const { loc, name, value } = prop;
          let isStatic = true;
          if (name === "ref") {
            hasRef = true;
            if (context.scopes.vFor > 0) {
              properties.push(createObjectProperty2(createSimpleExpression2("ref_for", true), createSimpleExpression2("true")));
            }
            if (value && context.inline && context.bindingMetadata[value.content]) {
              isStatic = false;
              properties.push(createObjectProperty2(createSimpleExpression2("ref_key", true), createSimpleExpression2(value.content, true, value.loc)));
            }
          }
          if (name === "is" && (isComponentTag2(tag2) || value && value.content.startsWith("vue:") || isCompatEnabled2("COMPILER_IS_ON_ELEMENT", context))) {
            continue;
          }
          properties.push(createObjectProperty2(createSimpleExpression2(name, true, getInnerRange2(loc, 0, name.length)), createSimpleExpression2(value ? value.content : "", isStatic, value ? value.loc : loc)));
        } else {
          const { name, arg, exp, loc } = prop;
          const isVBind = name === "bind";
          const isVOn = name === "on";
          if (name === "slot") {
            if (!isComponent3) {
              context.onError(createCompilerError2(40, loc));
            }
            continue;
          }
          if (name === "once" || name === "memo") {
            continue;
          }
          if (name === "is" || isVBind && isStaticArgOf2(arg, "is") && (isComponentTag2(tag2) || isCompatEnabled2("COMPILER_IS_ON_ELEMENT", context))) {
            continue;
          }
          if (isVOn && ssr) {
            continue;
          }
          if (isVBind && isStaticArgOf2(arg, "key") || isVOn && hasChildren && isStaticArgOf2(arg, "vue:before-update")) {
            shouldUseBlock = true;
          }
          if (isVBind && isStaticArgOf2(arg, "ref") && context.scopes.vFor > 0) {
            properties.push(createObjectProperty2(createSimpleExpression2("ref_for", true), createSimpleExpression2("true")));
          }
          if (!arg && (isVBind || isVOn)) {
            hasDynamicKeys = true;
            if (exp) {
              if (properties.length) {
                mergeArgs.push(createObjectExpression2(dedupeProperties2(properties), elementLoc));
                properties = [];
              }
              if (isVBind) {
                {
                  if (isCompatEnabled2("COMPILER_V_BIND_OBJECT_ORDER", context)) {
                    mergeArgs.unshift(exp);
                    continue;
                  }
                }
                mergeArgs.push(exp);
              } else {
                mergeArgs.push({
                  type: 14,
                  loc,
                  callee: context.helper(TO_HANDLERS2),
                  arguments: [exp]
                });
              }
            } else {
              context.onError(createCompilerError2(isVBind ? 34 : 35, loc));
            }
            continue;
          }
          const directiveTransform = context.directiveTransforms[name];
          if (directiveTransform) {
            const { props: props2, needRuntime } = directiveTransform(prop, node2, context);
            !ssr && props2.forEach(analyzePatchFlag);
            properties.push(...props2);
            if (needRuntime) {
              runtimeDirectives.push(prop);
              if (shared.isSymbol(needRuntime)) {
                directiveImportMap2.set(prop, needRuntime);
              }
            }
          } else if (!shared.isBuiltInDirective(name)) {
            runtimeDirectives.push(prop);
            if (hasChildren) {
              shouldUseBlock = true;
            }
          }
        }
      }
      let propsExpression = void 0;
      if (mergeArgs.length) {
        if (properties.length) {
          mergeArgs.push(createObjectExpression2(dedupeProperties2(properties), elementLoc));
        }
        if (mergeArgs.length > 1) {
          propsExpression = createCallExpression2(context.helper(MERGE_PROPS2), mergeArgs, elementLoc);
        } else {
          propsExpression = mergeArgs[0];
        }
      } else if (properties.length) {
        propsExpression = createObjectExpression2(dedupeProperties2(properties), elementLoc);
      }
      if (hasDynamicKeys) {
        patchFlag |= 16;
      } else {
        if (hasClassBinding && !isComponent3) {
          patchFlag |= 2;
        }
        if (hasStyleBinding && !isComponent3) {
          patchFlag |= 4;
        }
        if (dynamicPropNames.length) {
          patchFlag |= 8;
        }
        if (hasHydrationEventBinding) {
          patchFlag |= 32;
        }
      }
      if (!shouldUseBlock && (patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {
        patchFlag |= 512;
      }
      if (!context.inSSR && propsExpression) {
        switch (propsExpression.type) {
          case 15:
            let classKeyIndex = -1;
            let styleKeyIndex = -1;
            let hasDynamicKey = false;
            for (let i = 0; i < propsExpression.properties.length; i++) {
              const key = propsExpression.properties[i].key;
              if (isStaticExp2(key)) {
                if (key.content === "class") {
                  classKeyIndex = i;
                } else if (key.content === "style") {
                  styleKeyIndex = i;
                }
              } else if (!key.isHandlerKey) {
                hasDynamicKey = true;
              }
            }
            const classProp = propsExpression.properties[classKeyIndex];
            const styleProp = propsExpression.properties[styleKeyIndex];
            if (!hasDynamicKey) {
              if (classProp && !isStaticExp2(classProp.value)) {
                classProp.value = createCallExpression2(context.helper(NORMALIZE_CLASS2), [classProp.value]);
              }
              if (styleProp && !isStaticExp2(styleProp.value) && (hasStyleBinding || styleProp.value.type === 17)) {
                styleProp.value = createCallExpression2(context.helper(NORMALIZE_STYLE2), [styleProp.value]);
              }
            } else {
              propsExpression = createCallExpression2(context.helper(NORMALIZE_PROPS2), [propsExpression]);
            }
            break;
          case 14:
            break;
          default:
            propsExpression = createCallExpression2(context.helper(NORMALIZE_PROPS2), [
              createCallExpression2(context.helper(GUARD_REACTIVE_PROPS2), [
                propsExpression
              ])
            ]);
            break;
        }
      }
      return {
        props: propsExpression,
        directives: runtimeDirectives,
        patchFlag,
        dynamicPropNames,
        shouldUseBlock
      };
    }
    function dedupeProperties2(properties) {
      const knownProps = /* @__PURE__ */ new Map();
      const deduped = [];
      for (let i = 0; i < properties.length; i++) {
        const prop = properties[i];
        if (prop.key.type === 8 || !prop.key.isStatic) {
          deduped.push(prop);
          continue;
        }
        const name = prop.key.content;
        const existing = knownProps.get(name);
        if (existing) {
          if (name === "style" || name === "class" || shared.isOn(name)) {
            mergeAsArray2(existing, prop);
          }
        } else {
          knownProps.set(name, prop);
          deduped.push(prop);
        }
      }
      return deduped;
    }
    function mergeAsArray2(existing, incoming) {
      if (existing.value.type === 17) {
        existing.value.elements.push(incoming.value);
      } else {
        existing.value = createArrayExpression2([existing.value, incoming.value], existing.loc);
      }
    }
    function buildDirectiveArgs2(dir, context) {
      const dirArgs = [];
      const runtime = directiveImportMap2.get(dir);
      if (runtime) {
        dirArgs.push(context.helperString(runtime));
      } else {
        const fromSetup = resolveSetupReference2("v-" + dir.name, context);
        if (fromSetup) {
          dirArgs.push(fromSetup);
        } else {
          context.helper(RESOLVE_DIRECTIVE2);
          context.directives.add(dir.name);
          dirArgs.push(toValidAssetId2(dir.name, `directive`));
        }
      }
      const { loc } = dir;
      if (dir.exp)
        dirArgs.push(dir.exp);
      if (dir.arg) {
        if (!dir.exp) {
          dirArgs.push(`void 0`);
        }
        dirArgs.push(dir.arg);
      }
      if (Object.keys(dir.modifiers).length) {
        if (!dir.arg) {
          if (!dir.exp) {
            dirArgs.push(`void 0`);
          }
          dirArgs.push(`void 0`);
        }
        const trueExpression = createSimpleExpression2(`true`, false, loc);
        dirArgs.push(createObjectExpression2(dir.modifiers.map((modifier) => createObjectProperty2(modifier, trueExpression)), loc));
      }
      return createArrayExpression2(dirArgs, dir.loc);
    }
    function stringifyDynamicPropNames2(props) {
      let propsNamesString = `[`;
      for (let i = 0, l = props.length; i < l; i++) {
        propsNamesString += JSON.stringify(props[i]);
        if (i < l - 1)
          propsNamesString += ", ";
      }
      return propsNamesString + `]`;
    }
    function isComponentTag2(tag2) {
      return tag2 === "component" || tag2 === "Component";
    }
    var cacheStringFunction2 = (fn) => {
      const cache = /* @__PURE__ */ Object.create(null);
      return (str) => {
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
      };
    };
    var camelizeRE2 = /-(\w)/g;
    var camelize2 = cacheStringFunction2((str) => {
      return str.replace(camelizeRE2, (_, c) => c ? c.toUpperCase() : "");
    });
    var transformSlotOutlet2 = (node2, context) => {
      if (isSlotOutlet2(node2)) {
        const { children, loc } = node2;
        const { slotName, slotProps } = processSlotOutlet2(node2, context);
        const slotArgs = [
          context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
          slotName,
          "{}",
          "undefined",
          "true"
        ];
        let expectedLen = 2;
        if (slotProps) {
          slotArgs[2] = slotProps;
          expectedLen = 3;
        }
        if (children.length) {
          slotArgs[3] = createFunctionExpression2([], children, false, false, loc);
          expectedLen = 4;
        }
        if (context.scopeId && !context.slotted) {
          expectedLen = 5;
        }
        slotArgs.splice(expectedLen);
        node2.codegenNode = createCallExpression2(context.helper(RENDER_SLOT2), slotArgs, loc);
      }
    };
    function processSlotOutlet2(node2, context) {
      let slotName = `"default"`;
      let slotProps = void 0;
      const nonNameProps = [];
      for (let i = 0; i < node2.props.length; i++) {
        const p = node2.props[i];
        if (p.type === 6) {
          if (p.value) {
            if (p.name === "name") {
              slotName = JSON.stringify(p.value.content);
            } else {
              p.name = camelize2(p.name);
              nonNameProps.push(p);
            }
          }
        } else {
          if (p.name === "bind" && isStaticArgOf2(p.arg, "name")) {
            if (p.exp)
              slotName = p.exp;
          } else {
            if (p.name === "bind" && p.arg && isStaticExp2(p.arg)) {
              p.arg.content = camelize2(p.arg.content);
            }
            nonNameProps.push(p);
          }
        }
      }
      if (nonNameProps.length > 0) {
        const { props, directives } = buildProps2(node2, context, nonNameProps);
        slotProps = props;
        if (directives.length) {
          context.onError(createCompilerError2(36, directives[0].loc));
        }
      }
      return {
        slotName,
        slotProps
      };
    }
    var fnExpRE2 = /^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/;
    var transformOn2 = (dir, node2, context, augmentor) => {
      const { loc, modifiers, arg } = dir;
      if (!dir.exp && !modifiers.length) {
        context.onError(createCompilerError2(35, loc));
      }
      let eventName;
      if (arg.type === 4) {
        if (arg.isStatic) {
          let rawName = arg.content;
          if (rawName.startsWith("vue:")) {
            rawName = `vnode-${rawName.slice(4)}`;
          }
          eventName = createSimpleExpression2(shared.toHandlerKey(shared.camelize(rawName)), true, arg.loc);
        } else {
          eventName = createCompoundExpression2([
            `${context.helperString(TO_HANDLER_KEY2)}(`,
            arg,
            `)`
          ]);
        }
      } else {
        eventName = arg;
        eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY2)}(`);
        eventName.children.push(`)`);
      }
      let exp = dir.exp;
      if (exp && !exp.content.trim()) {
        exp = void 0;
      }
      let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;
      if (exp) {
        const isMemberExp = isMemberExpression2(exp.content, context);
        const isInlineStatement = !(isMemberExp || fnExpRE2.test(exp.content));
        const hasMultipleStatements = exp.content.includes(`;`);
        if (context.prefixIdentifiers) {
          isInlineStatement && context.addIdentifiers(`$event`);
          exp = dir.exp = processExpression2(exp, context, false, hasMultipleStatements);
          isInlineStatement && context.removeIdentifiers(`$event`);
          shouldCache = context.cacheHandlers && !context.inVOnce && !(exp.type === 4 && exp.constType > 0) && !(isMemberExp && node2.tagType === 1) && !hasScopeRef2(exp, context.identifiers);
          if (shouldCache && isMemberExp) {
            if (exp.type === 4) {
              exp.content = `${exp.content} && ${exp.content}(...args)`;
            } else {
              exp.children = [...exp.children, ` && `, ...exp.children, `(...args)`];
            }
          }
        }
        if (isInlineStatement || shouldCache && isMemberExp) {
          exp = createCompoundExpression2([
            `${isInlineStatement ? context.isTS ? `($event: any)` : `$event` : `${context.isTS ? `
//@ts-ignore
` : ``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
            exp,
            hasMultipleStatements ? `}` : `)`
          ]);
        }
      }
      let ret = {
        props: [
          createObjectProperty2(eventName, exp || createSimpleExpression2(`() => {}`, false, loc))
        ]
      };
      if (augmentor) {
        ret = augmentor(ret);
      }
      if (shouldCache) {
        ret.props[0].value = context.cache(ret.props[0].value);
      }
      ret.props.forEach((p) => p.key.isHandlerKey = true);
      return ret;
    };
    var transformBind2 = (dir, _node, context) => {
      const { exp, modifiers, loc } = dir;
      const arg = dir.arg;
      if (arg.type !== 4) {
        arg.children.unshift(`(`);
        arg.children.push(`) || ""`);
      } else if (!arg.isStatic) {
        arg.content = `${arg.content} || ""`;
      }
      if (modifiers.includes("camel")) {
        if (arg.type === 4) {
          if (arg.isStatic) {
            arg.content = shared.camelize(arg.content);
          } else {
            arg.content = `${context.helperString(CAMELIZE2)}(${arg.content})`;
          }
        } else {
          arg.children.unshift(`${context.helperString(CAMELIZE2)}(`);
          arg.children.push(`)`);
        }
      }
      if (!context.inSSR) {
        if (modifiers.includes("prop")) {
          injectPrefix2(arg, ".");
        }
        if (modifiers.includes("attr")) {
          injectPrefix2(arg, "^");
        }
      }
      if (!exp || exp.type === 4 && !exp.content.trim()) {
        context.onError(createCompilerError2(34, loc));
        return {
          props: [createObjectProperty2(arg, createSimpleExpression2("", true, loc))]
        };
      }
      return {
        props: [createObjectProperty2(arg, exp)]
      };
    };
    var injectPrefix2 = (arg, prefix2) => {
      if (arg.type === 4) {
        if (arg.isStatic) {
          arg.content = prefix2 + arg.content;
        } else {
          arg.content = `\`${prefix2}\${${arg.content}}\``;
        }
      } else {
        arg.children.unshift(`'${prefix2}' + (`);
        arg.children.push(`)`);
      }
    };
    var transformText2 = (node2, context) => {
      if (node2.type === 0 || node2.type === 1 || node2.type === 11 || node2.type === 10) {
        return () => {
          const children = node2.children;
          let currentContainer = void 0;
          let hasText = false;
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isText2(child)) {
              hasText = true;
              for (let j = i + 1; j < children.length; j++) {
                const next = children[j];
                if (isText2(next)) {
                  if (!currentContainer) {
                    currentContainer = children[i] = {
                      type: 8,
                      loc: child.loc,
                      children: [child]
                    };
                  }
                  currentContainer.children.push(` + `, next);
                  children.splice(j, 1);
                  j--;
                } else {
                  currentContainer = void 0;
                  break;
                }
              }
            }
          }
          if (!hasText || children.length === 1 && (node2.type === 0 || node2.type === 1 && node2.tagType === 0 && !node2.props.find((p) => p.type === 7 && !context.directiveTransforms[p.name]) && !(node2.tag === "template"))) {
            return;
          }
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isText2(child) || child.type === 8) {
              const callArgs = [];
              if (child.type !== 2 || child.content !== " ") {
                callArgs.push(child);
              }
              if (!context.ssr && getConstantType2(child, context) === 0) {
                callArgs.push(1 + ``);
              }
              children[i] = {
                type: 12,
                content: child,
                loc: child.loc,
                codegenNode: createCallExpression2(context.helper(CREATE_TEXT2), callArgs)
              };
            }
          }
        };
      }
    };
    var seen2 = /* @__PURE__ */ new WeakSet();
    var transformOnce2 = (node2, context) => {
      if (node2.type === 1 && findDir2(node2, "once", true)) {
        if (seen2.has(node2) || context.inVOnce) {
          return;
        }
        seen2.add(node2);
        context.inVOnce = true;
        context.helper(SET_BLOCK_TRACKING2);
        return () => {
          context.inVOnce = false;
          const cur = context.currentNode;
          if (cur.codegenNode) {
            cur.codegenNode = context.cache(cur.codegenNode, true);
          }
        };
      }
    };
    var transformModel2 = (dir, node2, context) => {
      const { exp, arg } = dir;
      if (!exp) {
        context.onError(createCompilerError2(41, dir.loc));
        return createTransformProps2();
      }
      const rawExp = exp.loc.source;
      const expString = exp.type === 4 ? exp.content : rawExp;
      const bindingType = context.bindingMetadata[rawExp];
      const maybeRef = context.inline && bindingType && bindingType !== "setup-const";
      if (!expString.trim() || !isMemberExpression2(expString, context) && !maybeRef) {
        context.onError(createCompilerError2(42, exp.loc));
        return createTransformProps2();
      }
      if (context.prefixIdentifiers && isSimpleIdentifier2(expString) && context.identifiers[expString]) {
        context.onError(createCompilerError2(43, exp.loc));
        return createTransformProps2();
      }
      const propName = arg ? arg : createSimpleExpression2("modelValue", true);
      const eventName = arg ? isStaticExp2(arg) ? `onUpdate:${arg.content}` : createCompoundExpression2(['"onUpdate:" + ', arg]) : `onUpdate:modelValue`;
      let assignmentExp;
      const eventArg = context.isTS ? `($event: any)` : `$event`;
      if (maybeRef) {
        if (bindingType === "setup-ref") {
          assignmentExp = createCompoundExpression2([
            `${eventArg} => ((`,
            createSimpleExpression2(rawExp, false, exp.loc),
            `).value = $event)`
          ]);
        } else {
          const altAssignment = bindingType === "setup-let" ? `${rawExp} = $event` : `null`;
          assignmentExp = createCompoundExpression2([
            `${eventArg} => (${context.helperString(IS_REF2)}(${rawExp}) ? (`,
            createSimpleExpression2(rawExp, false, exp.loc),
            `).value = $event : ${altAssignment})`
          ]);
        }
      } else {
        assignmentExp = createCompoundExpression2([
          `${eventArg} => ((`,
          exp,
          `) = $event)`
        ]);
      }
      const props = [
        createObjectProperty2(propName, dir.exp),
        createObjectProperty2(eventName, assignmentExp)
      ];
      if (context.prefixIdentifiers && !context.inVOnce && context.cacheHandlers && !hasScopeRef2(exp, context.identifiers)) {
        props[1].value = context.cache(props[1].value);
      }
      if (dir.modifiers.length && node2.tagType === 1) {
        const modifiers = dir.modifiers.map((m) => (isSimpleIdentifier2(m) ? m : JSON.stringify(m)) + `: true`).join(`, `);
        const modifiersKey = arg ? isStaticExp2(arg) ? `${arg.content}Modifiers` : createCompoundExpression2([arg, ' + "Modifiers"']) : `modelModifiers`;
        props.push(createObjectProperty2(modifiersKey, createSimpleExpression2(`{ ${modifiers} }`, false, dir.loc, 2)));
      }
      return createTransformProps2(props);
    };
    function createTransformProps2(props = []) {
      return { props };
    }
    var validDivisionCharRE = /[\w).+\-_$\]]/;
    var transformFilter = (node2, context) => {
      if (!isCompatEnabled2("COMPILER_FILTER", context)) {
        return;
      }
      if (node2.type === 5) {
        rewriteFilter(node2.content, context);
      }
      if (node2.type === 1) {
        node2.props.forEach((prop) => {
          if (prop.type === 7 && prop.name !== "for" && prop.exp) {
            rewriteFilter(prop.exp, context);
          }
        });
      }
    };
    function rewriteFilter(node2, context) {
      if (node2.type === 4) {
        parseFilter(node2, context);
      } else {
        for (let i = 0; i < node2.children.length; i++) {
          const child = node2.children[i];
          if (typeof child !== "object")
            continue;
          if (child.type === 4) {
            parseFilter(child, context);
          } else if (child.type === 8) {
            rewriteFilter(node2, context);
          } else if (child.type === 5) {
            rewriteFilter(child.content, context);
          }
        }
      }
    }
    function parseFilter(node2, context) {
      const exp = node2.content;
      let inSingle = false;
      let inDouble = false;
      let inTemplateString = false;
      let inRegex = false;
      let curly = 0;
      let square = 0;
      let paren = 0;
      let lastFilterIndex = 0;
      let c, prev, i, expression, filters = [];
      for (i = 0; i < exp.length; i++) {
        prev = c;
        c = exp.charCodeAt(i);
        if (inSingle) {
          if (c === 39 && prev !== 92)
            inSingle = false;
        } else if (inDouble) {
          if (c === 34 && prev !== 92)
            inDouble = false;
        } else if (inTemplateString) {
          if (c === 96 && prev !== 92)
            inTemplateString = false;
        } else if (inRegex) {
          if (c === 47 && prev !== 92)
            inRegex = false;
        } else if (c === 124 && exp.charCodeAt(i + 1) !== 124 && exp.charCodeAt(i - 1) !== 124 && !curly && !square && !paren) {
          if (expression === void 0) {
            lastFilterIndex = i + 1;
            expression = exp.slice(0, i).trim();
          } else {
            pushFilter();
          }
        } else {
          switch (c) {
            case 34:
              inDouble = true;
              break;
            case 39:
              inSingle = true;
              break;
            case 96:
              inTemplateString = true;
              break;
            case 40:
              paren++;
              break;
            case 41:
              paren--;
              break;
            case 91:
              square++;
              break;
            case 93:
              square--;
              break;
            case 123:
              curly++;
              break;
            case 125:
              curly--;
              break;
          }
          if (c === 47) {
            let j = i - 1;
            let p;
            for (; j >= 0; j--) {
              p = exp.charAt(j);
              if (p !== " ")
                break;
            }
            if (!p || !validDivisionCharRE.test(p)) {
              inRegex = true;
            }
          }
        }
      }
      if (expression === void 0) {
        expression = exp.slice(0, i).trim();
      } else if (lastFilterIndex !== 0) {
        pushFilter();
      }
      function pushFilter() {
        filters.push(exp.slice(lastFilterIndex, i).trim());
        lastFilterIndex = i + 1;
      }
      if (filters.length) {
        for (i = 0; i < filters.length; i++) {
          expression = wrapFilter(expression, filters[i], context);
        }
        node2.content = expression;
      }
    }
    function wrapFilter(exp, filter2, context) {
      context.helper(RESOLVE_FILTER2);
      const i = filter2.indexOf("(");
      if (i < 0) {
        context.filters.add(filter2);
        return `${toValidAssetId2(filter2, "filter")}(${exp})`;
      } else {
        const name = filter2.slice(0, i);
        const args = filter2.slice(i + 1);
        context.filters.add(name);
        return `${toValidAssetId2(name, "filter")}(${exp}${args !== ")" ? "," + args : args}`;
      }
    }
    var seen$12 = /* @__PURE__ */ new WeakSet();
    var transformMemo2 = (node2, context) => {
      if (node2.type === 1) {
        const dir = findDir2(node2, "memo");
        if (!dir || seen$12.has(node2)) {
          return;
        }
        seen$12.add(node2);
        return () => {
          const codegenNode = node2.codegenNode || context.currentNode.codegenNode;
          if (codegenNode && codegenNode.type === 13) {
            if (node2.tagType !== 1) {
              makeBlock2(codegenNode, context);
            }
            node2.codegenNode = createCallExpression2(context.helper(WITH_MEMO2), [
              dir.exp,
              createFunctionExpression2(void 0, codegenNode),
              `_cache`,
              String(context.cached++)
            ]);
          }
        };
      }
    };
    function getBaseTransformPreset2(prefixIdentifiers) {
      return [
        [
          transformOnce2,
          transformIf2,
          transformMemo2,
          transformFor2,
          ...[transformFilter],
          ...prefixIdentifiers ? [
            trackVForSlotScopes2,
            transformExpression2
          ] : [],
          transformSlotOutlet2,
          transformElement2,
          trackSlotScopes2,
          transformText2
        ],
        {
          on: transformOn2,
          bind: transformBind2,
          model: transformModel2
        }
      ];
    }
    function baseCompile2(template, options = {}) {
      const onError = options.onError || defaultOnError2;
      const isModuleMode = options.mode === "module";
      const prefixIdentifiers = options.prefixIdentifiers === true || isModuleMode;
      if (!prefixIdentifiers && options.cacheHandlers) {
        onError(createCompilerError2(48));
      }
      if (options.scopeId && !isModuleMode) {
        onError(createCompilerError2(49));
      }
      const ast = shared.isString(template) ? baseParse2(template, options) : template;
      const [nodeTransforms, directiveTransforms] = getBaseTransformPreset2(prefixIdentifiers);
      if (options.isTS) {
        const { expressionPlugins } = options;
        if (!expressionPlugins || !expressionPlugins.includes("typescript")) {
          options.expressionPlugins = [...expressionPlugins || [], "typescript"];
        }
      }
      transform2(ast, shared.extend({}, options, {
        prefixIdentifiers,
        nodeTransforms: [
          ...nodeTransforms,
          ...options.nodeTransforms || []
        ],
        directiveTransforms: shared.extend({}, directiveTransforms, options.directiveTransforms || {})
      }));
      return generate2(ast, shared.extend({}, options, {
        prefixIdentifiers
      }));
    }
    var noopDirectiveTransform2 = () => ({ props: [] });
    exports2.generateCodeFrame = shared.generateCodeFrame;
    exports2.BASE_TRANSITION = BASE_TRANSITION2;
    exports2.CAMELIZE = CAMELIZE2;
    exports2.CAPITALIZE = CAPITALIZE2;
    exports2.CREATE_BLOCK = CREATE_BLOCK2;
    exports2.CREATE_COMMENT = CREATE_COMMENT2;
    exports2.CREATE_ELEMENT_BLOCK = CREATE_ELEMENT_BLOCK2;
    exports2.CREATE_ELEMENT_VNODE = CREATE_ELEMENT_VNODE2;
    exports2.CREATE_SLOTS = CREATE_SLOTS2;
    exports2.CREATE_STATIC = CREATE_STATIC2;
    exports2.CREATE_TEXT = CREATE_TEXT2;
    exports2.CREATE_VNODE = CREATE_VNODE2;
    exports2.FRAGMENT = FRAGMENT2;
    exports2.GUARD_REACTIVE_PROPS = GUARD_REACTIVE_PROPS2;
    exports2.IS_MEMO_SAME = IS_MEMO_SAME2;
    exports2.IS_REF = IS_REF2;
    exports2.KEEP_ALIVE = KEEP_ALIVE2;
    exports2.MERGE_PROPS = MERGE_PROPS2;
    exports2.NORMALIZE_CLASS = NORMALIZE_CLASS2;
    exports2.NORMALIZE_PROPS = NORMALIZE_PROPS2;
    exports2.NORMALIZE_STYLE = NORMALIZE_STYLE2;
    exports2.OPEN_BLOCK = OPEN_BLOCK2;
    exports2.POP_SCOPE_ID = POP_SCOPE_ID2;
    exports2.PUSH_SCOPE_ID = PUSH_SCOPE_ID2;
    exports2.RENDER_LIST = RENDER_LIST2;
    exports2.RENDER_SLOT = RENDER_SLOT2;
    exports2.RESOLVE_COMPONENT = RESOLVE_COMPONENT2;
    exports2.RESOLVE_DIRECTIVE = RESOLVE_DIRECTIVE2;
    exports2.RESOLVE_DYNAMIC_COMPONENT = RESOLVE_DYNAMIC_COMPONENT2;
    exports2.RESOLVE_FILTER = RESOLVE_FILTER2;
    exports2.SET_BLOCK_TRACKING = SET_BLOCK_TRACKING2;
    exports2.SUSPENSE = SUSPENSE2;
    exports2.TELEPORT = TELEPORT2;
    exports2.TO_DISPLAY_STRING = TO_DISPLAY_STRING2;
    exports2.TO_HANDLERS = TO_HANDLERS2;
    exports2.TO_HANDLER_KEY = TO_HANDLER_KEY2;
    exports2.UNREF = UNREF2;
    exports2.WITH_CTX = WITH_CTX2;
    exports2.WITH_DIRECTIVES = WITH_DIRECTIVES2;
    exports2.WITH_MEMO = WITH_MEMO2;
    exports2.advancePositionWithClone = advancePositionWithClone2;
    exports2.advancePositionWithMutation = advancePositionWithMutation2;
    exports2.assert = assert2;
    exports2.baseCompile = baseCompile2;
    exports2.baseParse = baseParse2;
    exports2.buildDirectiveArgs = buildDirectiveArgs2;
    exports2.buildProps = buildProps2;
    exports2.buildSlots = buildSlots2;
    exports2.checkCompatEnabled = checkCompatEnabled2;
    exports2.createArrayExpression = createArrayExpression2;
    exports2.createAssignmentExpression = createAssignmentExpression2;
    exports2.createBlockStatement = createBlockStatement2;
    exports2.createCacheExpression = createCacheExpression2;
    exports2.createCallExpression = createCallExpression2;
    exports2.createCompilerError = createCompilerError2;
    exports2.createCompoundExpression = createCompoundExpression2;
    exports2.createConditionalExpression = createConditionalExpression2;
    exports2.createForLoopParams = createForLoopParams2;
    exports2.createFunctionExpression = createFunctionExpression2;
    exports2.createIfStatement = createIfStatement2;
    exports2.createInterpolation = createInterpolation2;
    exports2.createObjectExpression = createObjectExpression2;
    exports2.createObjectProperty = createObjectProperty2;
    exports2.createReturnStatement = createReturnStatement2;
    exports2.createRoot = createRoot2;
    exports2.createSequenceExpression = createSequenceExpression2;
    exports2.createSimpleExpression = createSimpleExpression2;
    exports2.createStructuralDirectiveTransform = createStructuralDirectiveTransform2;
    exports2.createTemplateLiteral = createTemplateLiteral2;
    exports2.createTransformContext = createTransformContext2;
    exports2.createVNodeCall = createVNodeCall2;
    exports2.extractIdentifiers = extractIdentifiers2;
    exports2.findDir = findDir2;
    exports2.findProp = findProp2;
    exports2.generate = generate2;
    exports2.getBaseTransformPreset = getBaseTransformPreset2;
    exports2.getInnerRange = getInnerRange2;
    exports2.getMemoedVNodeCall = getMemoedVNodeCall2;
    exports2.getVNodeBlockHelper = getVNodeBlockHelper2;
    exports2.getVNodeHelper = getVNodeHelper2;
    exports2.hasDynamicKeyVBind = hasDynamicKeyVBind2;
    exports2.hasScopeRef = hasScopeRef2;
    exports2.helperNameMap = helperNameMap2;
    exports2.injectProp = injectProp2;
    exports2.isBuiltInType = isBuiltInType2;
    exports2.isCoreComponent = isCoreComponent2;
    exports2.isFunctionType = isFunctionType2;
    exports2.isInDestructureAssignment = isInDestructureAssignment2;
    exports2.isMemberExpression = isMemberExpression2;
    exports2.isMemberExpressionBrowser = isMemberExpressionBrowser2;
    exports2.isMemberExpressionNode = isMemberExpressionNode2;
    exports2.isReferencedIdentifier = isReferencedIdentifier2;
    exports2.isSimpleIdentifier = isSimpleIdentifier2;
    exports2.isSlotOutlet = isSlotOutlet2;
    exports2.isStaticArgOf = isStaticArgOf2;
    exports2.isStaticExp = isStaticExp2;
    exports2.isStaticProperty = isStaticProperty2;
    exports2.isStaticPropertyKey = isStaticPropertyKey2;
    exports2.isTemplateNode = isTemplateNode2;
    exports2.isText = isText2;
    exports2.isVSlot = isVSlot2;
    exports2.locStub = locStub2;
    exports2.makeBlock = makeBlock2;
    exports2.noopDirectiveTransform = noopDirectiveTransform2;
    exports2.processExpression = processExpression2;
    exports2.processFor = processFor2;
    exports2.processIf = processIf2;
    exports2.processSlotOutlet = processSlotOutlet2;
    exports2.registerRuntimeHelpers = registerRuntimeHelpers2;
    exports2.resolveComponentType = resolveComponentType2;
    exports2.toValidAssetId = toValidAssetId2;
    exports2.trackSlotScopes = trackSlotScopes2;
    exports2.trackVForSlotScopes = trackVForSlotScopes2;
    exports2.transform = transform2;
    exports2.transformBind = transformBind2;
    exports2.transformElement = transformElement2;
    exports2.transformExpression = transformExpression2;
    exports2.transformModel = transformModel2;
    exports2.transformOn = transformOn2;
    exports2.traverseNode = traverseNode2;
    exports2.walkBlockDeclarations = walkBlockDeclarations2;
    exports2.walkFunctionParams = walkFunctionParams2;
    exports2.walkIdentifiers = walkIdentifiers2;
    exports2.warnDeprecation = warnDeprecation2;
  }
});

// ../../node_modules/.pnpm/@vue+compiler-core@3.2.31/node_modules/@vue/compiler-core/dist/compiler-core.cjs.js
var require_compiler_core_cjs = __commonJS({
  "../../node_modules/.pnpm/@vue+compiler-core@3.2.31/node_modules/@vue/compiler-core/dist/compiler-core.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var shared = require_shared();
    var parser2 = require_lib();
    var sourceMap2 = require_source_map();
    var estreeWalker = (init_estree_walker(), __toCommonJS(estree_walker_exports));
    function defaultOnError2(error2) {
      throw error2;
    }
    function defaultOnWarn2(msg) {
      console.warn(`[Vue warn] ${msg.message}`);
    }
    function createCompilerError2(code, loc, messages, additionalMessage) {
      const msg = (messages || errorMessages2)[code] + (additionalMessage || ``);
      const error2 = new SyntaxError(String(msg));
      error2.code = code;
      error2.loc = loc;
      return error2;
    }
    var errorMessages2 = {
      [0]: "Illegal comment.",
      [1]: "CDATA section is allowed only in XML context.",
      [2]: "Duplicate attribute.",
      [3]: "End tag cannot have attributes.",
      [4]: "Illegal '/' in tags.",
      [5]: "Unexpected EOF in tag.",
      [6]: "Unexpected EOF in CDATA section.",
      [7]: "Unexpected EOF in comment.",
      [8]: "Unexpected EOF in script.",
      [9]: "Unexpected EOF in tag.",
      [10]: "Incorrectly closed comment.",
      [11]: "Incorrectly opened comment.",
      [12]: "Illegal tag name. Use '&lt;' to print '<'.",
      [13]: "Attribute value was expected.",
      [14]: "End tag name was expected.",
      [15]: "Whitespace was expected.",
      [16]: "Unexpected '<!--' in comment.",
      [17]: `Attribute name cannot contain U+0022 ("), U+0027 ('), and U+003C (<).`,
      [18]: "Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",
      [19]: "Attribute name cannot start with '='.",
      [21]: "'<?' is allowed only in XML context.",
      [20]: `Unexpected null character.`,
      [22]: "Illegal '/' in tags.",
      [23]: "Invalid end tag.",
      [24]: "Element is missing end tag.",
      [25]: "Interpolation end sign was not found.",
      [27]: "End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",
      [26]: "Legal directive name was expected.",
      [28]: `v-if/v-else-if is missing expression.`,
      [29]: `v-if/else branches must use unique keys.`,
      [30]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,
      [31]: `v-for is missing expression.`,
      [32]: `v-for has invalid expression.`,
      [33]: `<template v-for> key should be placed on the <template> tag.`,
      [34]: `v-bind is missing expression.`,
      [35]: `v-on is missing expression.`,
      [36]: `Unexpected custom directive on <slot> outlet.`,
      [37]: `Mixed v-slot usage on both the component and nested <template>.When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.`,
      [38]: `Duplicate slot names found. `,
      [39]: `Extraneous children found when component already has explicitly named default slot. These children will be ignored.`,
      [40]: `v-slot can only be used on components or <template> tags.`,
      [41]: `v-model is missing expression.`,
      [42]: `v-model value must be a valid JavaScript member expression.`,
      [43]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,
      [44]: `Error parsing JavaScript expression: `,
      [45]: `<KeepAlive> expects exactly one child component.`,
      [46]: `"prefixIdentifiers" option is not supported in this build of compiler.`,
      [47]: `ES module mode is not supported in this build of compiler.`,
      [48]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,
      [49]: `"scopeId" option is only supported in module mode.`,
      [50]: ``
    };
    var FRAGMENT2 = Symbol(`Fragment`);
    var TELEPORT2 = Symbol(`Teleport`);
    var SUSPENSE2 = Symbol(`Suspense`);
    var KEEP_ALIVE2 = Symbol(`KeepAlive`);
    var BASE_TRANSITION2 = Symbol(`BaseTransition`);
    var OPEN_BLOCK2 = Symbol(`openBlock`);
    var CREATE_BLOCK2 = Symbol(`createBlock`);
    var CREATE_ELEMENT_BLOCK2 = Symbol(`createElementBlock`);
    var CREATE_VNODE2 = Symbol(`createVNode`);
    var CREATE_ELEMENT_VNODE2 = Symbol(`createElementVNode`);
    var CREATE_COMMENT2 = Symbol(`createCommentVNode`);
    var CREATE_TEXT2 = Symbol(`createTextVNode`);
    var CREATE_STATIC2 = Symbol(`createStaticVNode`);
    var RESOLVE_COMPONENT2 = Symbol(`resolveComponent`);
    var RESOLVE_DYNAMIC_COMPONENT2 = Symbol(`resolveDynamicComponent`);
    var RESOLVE_DIRECTIVE2 = Symbol(`resolveDirective`);
    var RESOLVE_FILTER2 = Symbol(`resolveFilter`);
    var WITH_DIRECTIVES2 = Symbol(`withDirectives`);
    var RENDER_LIST2 = Symbol(`renderList`);
    var RENDER_SLOT2 = Symbol(`renderSlot`);
    var CREATE_SLOTS2 = Symbol(`createSlots`);
    var TO_DISPLAY_STRING2 = Symbol(`toDisplayString`);
    var MERGE_PROPS2 = Symbol(`mergeProps`);
    var NORMALIZE_CLASS2 = Symbol(`normalizeClass`);
    var NORMALIZE_STYLE2 = Symbol(`normalizeStyle`);
    var NORMALIZE_PROPS2 = Symbol(`normalizeProps`);
    var GUARD_REACTIVE_PROPS2 = Symbol(`guardReactiveProps`);
    var TO_HANDLERS2 = Symbol(`toHandlers`);
    var CAMELIZE2 = Symbol(`camelize`);
    var CAPITALIZE2 = Symbol(`capitalize`);
    var TO_HANDLER_KEY2 = Symbol(`toHandlerKey`);
    var SET_BLOCK_TRACKING2 = Symbol(`setBlockTracking`);
    var PUSH_SCOPE_ID2 = Symbol(`pushScopeId`);
    var POP_SCOPE_ID2 = Symbol(`popScopeId`);
    var WITH_CTX2 = Symbol(`withCtx`);
    var UNREF2 = Symbol(`unref`);
    var IS_REF2 = Symbol(`isRef`);
    var WITH_MEMO2 = Symbol(`withMemo`);
    var IS_MEMO_SAME2 = Symbol(`isMemoSame`);
    var helperNameMap2 = {
      [FRAGMENT2]: `Fragment`,
      [TELEPORT2]: `Teleport`,
      [SUSPENSE2]: `Suspense`,
      [KEEP_ALIVE2]: `KeepAlive`,
      [BASE_TRANSITION2]: `BaseTransition`,
      [OPEN_BLOCK2]: `openBlock`,
      [CREATE_BLOCK2]: `createBlock`,
      [CREATE_ELEMENT_BLOCK2]: `createElementBlock`,
      [CREATE_VNODE2]: `createVNode`,
      [CREATE_ELEMENT_VNODE2]: `createElementVNode`,
      [CREATE_COMMENT2]: `createCommentVNode`,
      [CREATE_TEXT2]: `createTextVNode`,
      [CREATE_STATIC2]: `createStaticVNode`,
      [RESOLVE_COMPONENT2]: `resolveComponent`,
      [RESOLVE_DYNAMIC_COMPONENT2]: `resolveDynamicComponent`,
      [RESOLVE_DIRECTIVE2]: `resolveDirective`,
      [RESOLVE_FILTER2]: `resolveFilter`,
      [WITH_DIRECTIVES2]: `withDirectives`,
      [RENDER_LIST2]: `renderList`,
      [RENDER_SLOT2]: `renderSlot`,
      [CREATE_SLOTS2]: `createSlots`,
      [TO_DISPLAY_STRING2]: `toDisplayString`,
      [MERGE_PROPS2]: `mergeProps`,
      [NORMALIZE_CLASS2]: `normalizeClass`,
      [NORMALIZE_STYLE2]: `normalizeStyle`,
      [NORMALIZE_PROPS2]: `normalizeProps`,
      [GUARD_REACTIVE_PROPS2]: `guardReactiveProps`,
      [TO_HANDLERS2]: `toHandlers`,
      [CAMELIZE2]: `camelize`,
      [CAPITALIZE2]: `capitalize`,
      [TO_HANDLER_KEY2]: `toHandlerKey`,
      [SET_BLOCK_TRACKING2]: `setBlockTracking`,
      [PUSH_SCOPE_ID2]: `pushScopeId`,
      [POP_SCOPE_ID2]: `popScopeId`,
      [WITH_CTX2]: `withCtx`,
      [UNREF2]: `unref`,
      [IS_REF2]: `isRef`,
      [WITH_MEMO2]: `withMemo`,
      [IS_MEMO_SAME2]: `isMemoSame`
    };
    function registerRuntimeHelpers2(helpers) {
      Object.getOwnPropertySymbols(helpers).forEach((s) => {
        helperNameMap2[s] = helpers[s];
      });
    }
    var locStub2 = {
      source: "",
      start: { line: 1, column: 1, offset: 0 },
      end: { line: 1, column: 1, offset: 0 }
    };
    function createRoot2(children, loc = locStub2) {
      return {
        type: 0,
        children,
        helpers: [],
        components: [],
        directives: [],
        hoists: [],
        imports: [],
        cached: 0,
        temps: 0,
        codegenNode: void 0,
        loc
      };
    }
    function createVNodeCall2(context, tag2, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent3 = false, loc = locStub2) {
      if (context) {
        if (isBlock) {
          context.helper(OPEN_BLOCK2);
          context.helper(getVNodeBlockHelper2(context.inSSR, isComponent3));
        } else {
          context.helper(getVNodeHelper2(context.inSSR, isComponent3));
        }
        if (directives) {
          context.helper(WITH_DIRECTIVES2);
        }
      }
      return {
        type: 13,
        tag: tag2,
        props,
        children,
        patchFlag,
        dynamicProps,
        directives,
        isBlock,
        disableTracking,
        isComponent: isComponent3,
        loc
      };
    }
    function createArrayExpression2(elements, loc = locStub2) {
      return {
        type: 17,
        loc,
        elements
      };
    }
    function createObjectExpression2(properties, loc = locStub2) {
      return {
        type: 15,
        loc,
        properties
      };
    }
    function createObjectProperty2(key, value) {
      return {
        type: 16,
        loc: locStub2,
        key: shared.isString(key) ? createSimpleExpression2(key, true) : key,
        value
      };
    }
    function createSimpleExpression2(content, isStatic = false, loc = locStub2, constType = 0) {
      return {
        type: 4,
        loc,
        content,
        isStatic,
        constType: isStatic ? 3 : constType
      };
    }
    function createInterpolation2(content, loc) {
      return {
        type: 5,
        loc,
        content: shared.isString(content) ? createSimpleExpression2(content, false, loc) : content
      };
    }
    function createCompoundExpression2(children, loc = locStub2) {
      return {
        type: 8,
        loc,
        children
      };
    }
    function createCallExpression2(callee, args = [], loc = locStub2) {
      return {
        type: 14,
        loc,
        callee,
        arguments: args
      };
    }
    function createFunctionExpression2(params, returns = void 0, newline = false, isSlot = false, loc = locStub2) {
      return {
        type: 18,
        params,
        returns,
        newline,
        isSlot,
        loc
      };
    }
    function createConditionalExpression2(test, consequent, alternate, newline = true) {
      return {
        type: 19,
        test,
        consequent,
        alternate,
        newline,
        loc: locStub2
      };
    }
    function createCacheExpression2(index, value, isVNode = false) {
      return {
        type: 20,
        index,
        value,
        isVNode,
        loc: locStub2
      };
    }
    function createBlockStatement2(body) {
      return {
        type: 21,
        body,
        loc: locStub2
      };
    }
    function createTemplateLiteral2(elements) {
      return {
        type: 22,
        elements,
        loc: locStub2
      };
    }
    function createIfStatement2(test, consequent, alternate) {
      return {
        type: 23,
        test,
        consequent,
        alternate,
        loc: locStub2
      };
    }
    function createAssignmentExpression2(left, right) {
      return {
        type: 24,
        left,
        right,
        loc: locStub2
      };
    }
    function createSequenceExpression2(expressions) {
      return {
        type: 25,
        expressions,
        loc: locStub2
      };
    }
    function createReturnStatement2(returns) {
      return {
        type: 26,
        returns,
        loc: locStub2
      };
    }
    var isStaticExp2 = (p) => p.type === 4 && p.isStatic;
    var isBuiltInType2 = (tag2, expected) => tag2 === expected || tag2 === shared.hyphenate(expected);
    function isCoreComponent2(tag2) {
      if (isBuiltInType2(tag2, "Teleport")) {
        return TELEPORT2;
      } else if (isBuiltInType2(tag2, "Suspense")) {
        return SUSPENSE2;
      } else if (isBuiltInType2(tag2, "KeepAlive")) {
        return KEEP_ALIVE2;
      } else if (isBuiltInType2(tag2, "BaseTransition")) {
        return BASE_TRANSITION2;
      }
    }
    var nonIdentifierRE2 = /^\d|[^\$\w]/;
    var isSimpleIdentifier2 = (name) => !nonIdentifierRE2.test(name);
    var validFirstIdentCharRE2 = /[A-Za-z_$\xA0-\uFFFF]/;
    var validIdentCharRE2 = /[\.\?\w$\xA0-\uFFFF]/;
    var whitespaceRE2 = /\s+[.[]\s*|\s*[.[]\s+/g;
    var isMemberExpressionBrowser2 = (path3) => {
      path3 = path3.trim().replace(whitespaceRE2, (s) => s.trim());
      let state = 0;
      let stateStack = [];
      let currentOpenBracketCount = 0;
      let currentOpenParensCount = 0;
      let currentStringType = null;
      for (let i = 0; i < path3.length; i++) {
        const char = path3.charAt(i);
        switch (state) {
          case 0:
            if (char === "[") {
              stateStack.push(state);
              state = 1;
              currentOpenBracketCount++;
            } else if (char === "(") {
              stateStack.push(state);
              state = 2;
              currentOpenParensCount++;
            } else if (!(i === 0 ? validFirstIdentCharRE2 : validIdentCharRE2).test(char)) {
              return false;
            }
            break;
          case 1:
            if (char === `'` || char === `"` || char === "`") {
              stateStack.push(state);
              state = 3;
              currentStringType = char;
            } else if (char === `[`) {
              currentOpenBracketCount++;
            } else if (char === `]`) {
              if (!--currentOpenBracketCount) {
                state = stateStack.pop();
              }
            }
            break;
          case 2:
            if (char === `'` || char === `"` || char === "`") {
              stateStack.push(state);
              state = 3;
              currentStringType = char;
            } else if (char === `(`) {
              currentOpenParensCount++;
            } else if (char === `)`) {
              if (i === path3.length - 1) {
                return false;
              }
              if (!--currentOpenParensCount) {
                state = stateStack.pop();
              }
            }
            break;
          case 3:
            if (char === currentStringType) {
              state = stateStack.pop();
              currentStringType = null;
            }
            break;
        }
      }
      return !currentOpenBracketCount && !currentOpenParensCount;
    };
    var isMemberExpressionNode2 = (path3, context) => {
      try {
        let ret = parser2.parseExpression(path3, {
          plugins: context.expressionPlugins
        });
        if (ret.type === "TSAsExpression" || ret.type === "TSTypeAssertion") {
          ret = ret.expression;
        }
        return ret.type === "MemberExpression" || ret.type === "OptionalMemberExpression" || ret.type === "Identifier";
      } catch (e) {
        return false;
      }
    };
    var isMemberExpression2 = isMemberExpressionNode2;
    function getInnerRange2(loc, offset, length2) {
      const source = loc.source.slice(offset, offset + length2);
      const newLoc = {
        source,
        start: advancePositionWithClone2(loc.start, loc.source, offset),
        end: loc.end
      };
      if (length2 != null) {
        newLoc.end = advancePositionWithClone2(loc.start, loc.source, offset + length2);
      }
      return newLoc;
    }
    function advancePositionWithClone2(pos, source, numberOfCharacters = source.length) {
      return advancePositionWithMutation2(shared.extend({}, pos), source, numberOfCharacters);
    }
    function advancePositionWithMutation2(pos, source, numberOfCharacters = source.length) {
      let linesCount = 0;
      let lastNewLinePos = -1;
      for (let i = 0; i < numberOfCharacters; i++) {
        if (source.charCodeAt(i) === 10) {
          linesCount++;
          lastNewLinePos = i;
        }
      }
      pos.offset += numberOfCharacters;
      pos.line += linesCount;
      pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;
      return pos;
    }
    function assert2(condition, msg) {
      if (!condition) {
        throw new Error(msg || `unexpected compiler condition`);
      }
    }
    function findDir2(node2, name, allowEmpty = false) {
      for (let i = 0; i < node2.props.length; i++) {
        const p = node2.props[i];
        if (p.type === 7 && (allowEmpty || p.exp) && (shared.isString(name) ? p.name === name : name.test(p.name))) {
          return p;
        }
      }
    }
    function findProp2(node2, name, dynamicOnly = false, allowEmpty = false) {
      for (let i = 0; i < node2.props.length; i++) {
        const p = node2.props[i];
        if (p.type === 6) {
          if (dynamicOnly)
            continue;
          if (p.name === name && (p.value || allowEmpty)) {
            return p;
          }
        } else if (p.name === "bind" && (p.exp || allowEmpty) && isStaticArgOf2(p.arg, name)) {
          return p;
        }
      }
    }
    function isStaticArgOf2(arg, name) {
      return !!(arg && isStaticExp2(arg) && arg.content === name);
    }
    function hasDynamicKeyVBind2(node2) {
      return node2.props.some((p) => p.type === 7 && p.name === "bind" && (!p.arg || p.arg.type !== 4 || !p.arg.isStatic));
    }
    function isText2(node2) {
      return node2.type === 5 || node2.type === 2;
    }
    function isVSlot2(p) {
      return p.type === 7 && p.name === "slot";
    }
    function isTemplateNode2(node2) {
      return node2.type === 1 && node2.tagType === 3;
    }
    function isSlotOutlet2(node2) {
      return node2.type === 1 && node2.tagType === 2;
    }
    function getVNodeHelper2(ssr, isComponent3) {
      return ssr || isComponent3 ? CREATE_VNODE2 : CREATE_ELEMENT_VNODE2;
    }
    function getVNodeBlockHelper2(ssr, isComponent3) {
      return ssr || isComponent3 ? CREATE_BLOCK2 : CREATE_ELEMENT_BLOCK2;
    }
    var propsHelperSet2 = /* @__PURE__ */ new Set([NORMALIZE_PROPS2, GUARD_REACTIVE_PROPS2]);
    function getUnnormalizedProps2(props, callPath = []) {
      if (props && !shared.isString(props) && props.type === 14) {
        const callee = props.callee;
        if (!shared.isString(callee) && propsHelperSet2.has(callee)) {
          return getUnnormalizedProps2(props.arguments[0], callPath.concat(props));
        }
      }
      return [props, callPath];
    }
    function injectProp2(node2, prop, context) {
      let propsWithInjection;
      let props = node2.type === 13 ? node2.props : node2.arguments[2];
      let callPath = [];
      let parentCall;
      if (props && !shared.isString(props) && props.type === 14) {
        const ret = getUnnormalizedProps2(props);
        props = ret[0];
        callPath = ret[1];
        parentCall = callPath[callPath.length - 1];
      }
      if (props == null || shared.isString(props)) {
        propsWithInjection = createObjectExpression2([prop]);
      } else if (props.type === 14) {
        const first = props.arguments[0];
        if (!shared.isString(first) && first.type === 15) {
          first.properties.unshift(prop);
        } else {
          if (props.callee === TO_HANDLERS2) {
            propsWithInjection = createCallExpression2(context.helper(MERGE_PROPS2), [
              createObjectExpression2([prop]),
              props
            ]);
          } else {
            props.arguments.unshift(createObjectExpression2([prop]));
          }
        }
        !propsWithInjection && (propsWithInjection = props);
      } else if (props.type === 15) {
        let alreadyExists = false;
        if (prop.key.type === 4) {
          const propKeyName = prop.key.content;
          alreadyExists = props.properties.some((p) => p.key.type === 4 && p.key.content === propKeyName);
        }
        if (!alreadyExists) {
          props.properties.unshift(prop);
        }
        propsWithInjection = props;
      } else {
        propsWithInjection = createCallExpression2(context.helper(MERGE_PROPS2), [
          createObjectExpression2([prop]),
          props
        ]);
        if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS2) {
          parentCall = callPath[callPath.length - 2];
        }
      }
      if (node2.type === 13) {
        if (parentCall) {
          parentCall.arguments[0] = propsWithInjection;
        } else {
          node2.props = propsWithInjection;
        }
      } else {
        if (parentCall) {
          parentCall.arguments[0] = propsWithInjection;
        } else {
          node2.arguments[2] = propsWithInjection;
        }
      }
    }
    function toValidAssetId2(name, type) {
      return `_${type}_${name.replace(/[^\w]/g, (searchValue, replaceValue) => {
        return searchValue === "-" ? "_" : name.charCodeAt(replaceValue).toString();
      })}`;
    }
    function hasScopeRef2(node2, ids) {
      if (!node2 || Object.keys(ids).length === 0) {
        return false;
      }
      switch (node2.type) {
        case 1:
          for (let i = 0; i < node2.props.length; i++) {
            const p = node2.props[i];
            if (p.type === 7 && (hasScopeRef2(p.arg, ids) || hasScopeRef2(p.exp, ids))) {
              return true;
            }
          }
          return node2.children.some((c) => hasScopeRef2(c, ids));
        case 11:
          if (hasScopeRef2(node2.source, ids)) {
            return true;
          }
          return node2.children.some((c) => hasScopeRef2(c, ids));
        case 9:
          return node2.branches.some((b) => hasScopeRef2(b, ids));
        case 10:
          if (hasScopeRef2(node2.condition, ids)) {
            return true;
          }
          return node2.children.some((c) => hasScopeRef2(c, ids));
        case 4:
          return !node2.isStatic && isSimpleIdentifier2(node2.content) && !!ids[node2.content];
        case 8:
          return node2.children.some((c) => shared.isObject(c) && hasScopeRef2(c, ids));
        case 5:
        case 12:
          return hasScopeRef2(node2.content, ids);
        case 2:
        case 3:
          return false;
        default:
          return false;
      }
    }
    function getMemoedVNodeCall2(node2) {
      if (node2.type === 14 && node2.callee === WITH_MEMO2) {
        return node2.arguments[1].returns;
      } else {
        return node2;
      }
    }
    function makeBlock2(node2, { helper, removeHelper, inSSR }) {
      if (!node2.isBlock) {
        node2.isBlock = true;
        removeHelper(getVNodeHelper2(inSSR, node2.isComponent));
        helper(OPEN_BLOCK2);
        helper(getVNodeBlockHelper2(inSSR, node2.isComponent));
      }
    }
    var deprecationData2 = {
      ["COMPILER_IS_ON_ELEMENT"]: {
        message: `Platform-native elements with "is" prop will no longer be treated as components in Vue 3 unless the "is" value is explicitly prefixed with "vue:".`,
        link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`
      },
      ["COMPILER_V_BIND_SYNC"]: {
        message: (key) => `.sync modifier for v-bind has been removed. Use v-model with argument instead. \`v-bind:${key}.sync\` should be changed to \`v-model:${key}\`.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`
      },
      ["COMPILER_V_BIND_PROP"]: {
        message: `.prop modifier for v-bind has been removed and no longer necessary. Vue 3 will automatically set a binding as DOM property when appropriate.`
      },
      ["COMPILER_V_BIND_OBJECT_ORDER"]: {
        message: `v-bind="obj" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`
      },
      ["COMPILER_V_ON_NATIVE"]: {
        message: `.native modifier for v-on has been removed as is no longer necessary.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`
      },
      ["COMPILER_V_IF_V_FOR_PRECEDENCE"]: {
        message: `v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`
      },
      ["COMPILER_NATIVE_TEMPLATE"]: {
        message: `<template> with no special directives will render as a native template element instead of its inner content in Vue 3.`
      },
      ["COMPILER_INLINE_TEMPLATE"]: {
        message: `"inline-template" has been removed in Vue 3.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`
      },
      ["COMPILER_FILTER"]: {
        message: `filters have been removed in Vue 3. The "|" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`
      }
    };
    function getCompatValue2(key, context) {
      const config2 = context.options ? context.options.compatConfig : context.compatConfig;
      const value = config2 && config2[key];
      if (key === "MODE") {
        return value || 3;
      } else {
        return value;
      }
    }
    function isCompatEnabled2(key, context) {
      const mode = getCompatValue2("MODE", context);
      const value = getCompatValue2(key, context);
      return mode === 3 ? value === true : value !== false;
    }
    function checkCompatEnabled2(key, context, loc, ...args) {
      const enabled = isCompatEnabled2(key, context);
      if (enabled) {
        warnDeprecation2(key, context, loc, ...args);
      }
      return enabled;
    }
    function warnDeprecation2(key, context, loc, ...args) {
      const val = getCompatValue2(key, context);
      if (val === "suppress-warning") {
        return;
      }
      const { message, link } = deprecationData2[key];
      const msg = `(deprecation ${key}) ${typeof message === "function" ? message(...args) : message}${link ? `
  Details: ${link}` : ``}`;
      const err = new SyntaxError(msg);
      err.code = key;
      if (loc)
        err.loc = loc;
      context.onWarn(err);
    }
    var decodeRE2 = /&(gt|lt|amp|apos|quot);/g;
    var decodeMap2 = {
      gt: ">",
      lt: "<",
      amp: "&",
      apos: "'",
      quot: '"'
    };
    var defaultParserOptions2 = {
      delimiters: [`{{`, `}}`],
      getNamespace: () => 0,
      getTextMode: () => 0,
      isVoidTag: shared.NO,
      isPreTag: shared.NO,
      isCustomElement: shared.NO,
      decodeEntities: (rawText) => rawText.replace(decodeRE2, (_, p1) => decodeMap2[p1]),
      onError: defaultOnError2,
      onWarn: defaultOnWarn2,
      comments: true
    };
    function baseParse2(content, options = {}) {
      const context = createParserContext2(content, options);
      const start = getCursor2(context);
      return createRoot2(parseChildren2(context, 0, []), getSelection2(context, start));
    }
    function createParserContext2(content, rawOptions) {
      const options = shared.extend({}, defaultParserOptions2);
      let key;
      for (key in rawOptions) {
        options[key] = rawOptions[key] === void 0 ? defaultParserOptions2[key] : rawOptions[key];
      }
      return {
        options,
        column: 1,
        line: 1,
        offset: 0,
        originalSource: content,
        source: content,
        inPre: false,
        inVPre: false,
        onWarn: options.onWarn
      };
    }
    function parseChildren2(context, mode, ancestors) {
      const parent = last2(ancestors);
      const ns = parent ? parent.ns : 0;
      const nodes = [];
      while (!isEnd2(context, mode, ancestors)) {
        const s = context.source;
        let node2 = void 0;
        if (mode === 0 || mode === 1) {
          if (!context.inVPre && startsWith2(s, context.options.delimiters[0])) {
            node2 = parseInterpolation2(context, mode);
          } else if (mode === 0 && s[0] === "<") {
            if (s.length === 1) {
              emitError2(context, 5, 1);
            } else if (s[1] === "!") {
              if (startsWith2(s, "<!--")) {
                node2 = parseComment2(context);
              } else if (startsWith2(s, "<!DOCTYPE")) {
                node2 = parseBogusComment2(context);
              } else if (startsWith2(s, "<![CDATA[")) {
                if (ns !== 0) {
                  node2 = parseCDATA2(context, ancestors);
                } else {
                  emitError2(context, 1);
                  node2 = parseBogusComment2(context);
                }
              } else {
                emitError2(context, 11);
                node2 = parseBogusComment2(context);
              }
            } else if (s[1] === "/") {
              if (s.length === 2) {
                emitError2(context, 5, 2);
              } else if (s[2] === ">") {
                emitError2(context, 14, 2);
                advanceBy2(context, 3);
                continue;
              } else if (/[a-z]/i.test(s[2])) {
                emitError2(context, 23);
                parseTag2(context, 1, parent);
                continue;
              } else {
                emitError2(context, 12, 2);
                node2 = parseBogusComment2(context);
              }
            } else if (/[a-z]/i.test(s[1])) {
              node2 = parseElement2(context, ancestors);
              if (isCompatEnabled2("COMPILER_NATIVE_TEMPLATE", context) && node2 && node2.tag === "template" && !node2.props.some((p) => p.type === 7 && isSpecialTemplateDirective2(p.name))) {
                warnDeprecation2("COMPILER_NATIVE_TEMPLATE", context, node2.loc);
                node2 = node2.children;
              }
            } else if (s[1] === "?") {
              emitError2(context, 21, 1);
              node2 = parseBogusComment2(context);
            } else {
              emitError2(context, 12, 1);
            }
          }
        }
        if (!node2) {
          node2 = parseText2(context, mode);
        }
        if (shared.isArray(node2)) {
          for (let i = 0; i < node2.length; i++) {
            pushNode2(nodes, node2[i]);
          }
        } else {
          pushNode2(nodes, node2);
        }
      }
      let removedWhitespace = false;
      if (mode !== 2 && mode !== 1) {
        const shouldCondense = context.options.whitespace !== "preserve";
        for (let i = 0; i < nodes.length; i++) {
          const node2 = nodes[i];
          if (!context.inPre && node2.type === 2) {
            if (!/[^\t\r\n\f ]/.test(node2.content)) {
              const prev = nodes[i - 1];
              const next = nodes[i + 1];
              if (!prev || !next || shouldCondense && (prev.type === 3 || next.type === 3 || prev.type === 1 && next.type === 1 && /[\r\n]/.test(node2.content))) {
                removedWhitespace = true;
                nodes[i] = null;
              } else {
                node2.content = " ";
              }
            } else if (shouldCondense) {
              node2.content = node2.content.replace(/[\t\r\n\f ]+/g, " ");
            }
          } else if (node2.type === 3 && !context.options.comments) {
            removedWhitespace = true;
            nodes[i] = null;
          }
        }
        if (context.inPre && parent && context.options.isPreTag(parent.tag)) {
          const first = nodes[0];
          if (first && first.type === 2) {
            first.content = first.content.replace(/^\r?\n/, "");
          }
        }
      }
      return removedWhitespace ? nodes.filter(Boolean) : nodes;
    }
    function pushNode2(nodes, node2) {
      if (node2.type === 2) {
        const prev = last2(nodes);
        if (prev && prev.type === 2 && prev.loc.end.offset === node2.loc.start.offset) {
          prev.content += node2.content;
          prev.loc.end = node2.loc.end;
          prev.loc.source += node2.loc.source;
          return;
        }
      }
      nodes.push(node2);
    }
    function parseCDATA2(context, ancestors) {
      advanceBy2(context, 9);
      const nodes = parseChildren2(context, 3, ancestors);
      if (context.source.length === 0) {
        emitError2(context, 6);
      } else {
        advanceBy2(context, 3);
      }
      return nodes;
    }
    function parseComment2(context) {
      const start = getCursor2(context);
      let content;
      const match = /--(\!)?>/.exec(context.source);
      if (!match) {
        content = context.source.slice(4);
        advanceBy2(context, context.source.length);
        emitError2(context, 7);
      } else {
        if (match.index <= 3) {
          emitError2(context, 0);
        }
        if (match[1]) {
          emitError2(context, 10);
        }
        content = context.source.slice(4, match.index);
        const s = context.source.slice(0, match.index);
        let prevIndex = 1, nestedIndex = 0;
        while ((nestedIndex = s.indexOf("<!--", prevIndex)) !== -1) {
          advanceBy2(context, nestedIndex - prevIndex + 1);
          if (nestedIndex + 4 < s.length) {
            emitError2(context, 16);
          }
          prevIndex = nestedIndex + 1;
        }
        advanceBy2(context, match.index + match[0].length - prevIndex + 1);
      }
      return {
        type: 3,
        content,
        loc: getSelection2(context, start)
      };
    }
    function parseBogusComment2(context) {
      const start = getCursor2(context);
      const contentStart = context.source[1] === "?" ? 1 : 2;
      let content;
      const closeIndex = context.source.indexOf(">");
      if (closeIndex === -1) {
        content = context.source.slice(contentStart);
        advanceBy2(context, context.source.length);
      } else {
        content = context.source.slice(contentStart, closeIndex);
        advanceBy2(context, closeIndex + 1);
      }
      return {
        type: 3,
        content,
        loc: getSelection2(context, start)
      };
    }
    function parseElement2(context, ancestors) {
      const wasInPre = context.inPre;
      const wasInVPre = context.inVPre;
      const parent = last2(ancestors);
      const element = parseTag2(context, 0, parent);
      const isPreBoundary = context.inPre && !wasInPre;
      const isVPreBoundary = context.inVPre && !wasInVPre;
      if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {
        if (isPreBoundary) {
          context.inPre = false;
        }
        if (isVPreBoundary) {
          context.inVPre = false;
        }
        return element;
      }
      ancestors.push(element);
      const mode = context.options.getTextMode(element, parent);
      const children = parseChildren2(context, mode, ancestors);
      ancestors.pop();
      {
        const inlineTemplateProp = element.props.find((p) => p.type === 6 && p.name === "inline-template");
        if (inlineTemplateProp && checkCompatEnabled2("COMPILER_INLINE_TEMPLATE", context, inlineTemplateProp.loc)) {
          const loc = getSelection2(context, element.loc.end);
          inlineTemplateProp.value = {
            type: 2,
            content: loc.source,
            loc
          };
        }
      }
      element.children = children;
      if (startsWithEndTagOpen2(context.source, element.tag)) {
        parseTag2(context, 1, parent);
      } else {
        emitError2(context, 24, 0, element.loc.start);
        if (context.source.length === 0 && element.tag.toLowerCase() === "script") {
          const first = children[0];
          if (first && startsWith2(first.loc.source, "<!--")) {
            emitError2(context, 8);
          }
        }
      }
      element.loc = getSelection2(context, element.loc.start);
      if (isPreBoundary) {
        context.inPre = false;
      }
      if (isVPreBoundary) {
        context.inVPre = false;
      }
      return element;
    }
    var isSpecialTemplateDirective2 = /* @__PURE__ */ shared.makeMap(`if,else,else-if,for,slot`);
    function parseTag2(context, type, parent) {
      const start = getCursor2(context);
      const match = /^<\/?([a-z][^\t\r\n\f />]*)/i.exec(context.source);
      const tag2 = match[1];
      const ns = context.options.getNamespace(tag2, parent);
      advanceBy2(context, match[0].length);
      advanceSpaces2(context);
      const cursor = getCursor2(context);
      const currentSource = context.source;
      if (context.options.isPreTag(tag2)) {
        context.inPre = true;
      }
      let props = parseAttributes2(context, type);
      if (type === 0 && !context.inVPre && props.some((p) => p.type === 7 && p.name === "pre")) {
        context.inVPre = true;
        shared.extend(context, cursor);
        context.source = currentSource;
        props = parseAttributes2(context, type).filter((p) => p.name !== "v-pre");
      }
      let isSelfClosing = false;
      if (context.source.length === 0) {
        emitError2(context, 9);
      } else {
        isSelfClosing = startsWith2(context.source, "/>");
        if (type === 1 && isSelfClosing) {
          emitError2(context, 4);
        }
        advanceBy2(context, isSelfClosing ? 2 : 1);
      }
      if (type === 1) {
        return;
      }
      if (isCompatEnabled2("COMPILER_V_IF_V_FOR_PRECEDENCE", context)) {
        let hasIf = false;
        let hasFor = false;
        for (let i = 0; i < props.length; i++) {
          const p = props[i];
          if (p.type === 7) {
            if (p.name === "if") {
              hasIf = true;
            } else if (p.name === "for") {
              hasFor = true;
            }
          }
          if (hasIf && hasFor) {
            warnDeprecation2("COMPILER_V_IF_V_FOR_PRECEDENCE", context, getSelection2(context, start));
            break;
          }
        }
      }
      let tagType = 0;
      if (!context.inVPre) {
        if (tag2 === "slot") {
          tagType = 2;
        } else if (tag2 === "template") {
          if (props.some((p) => p.type === 7 && isSpecialTemplateDirective2(p.name))) {
            tagType = 3;
          }
        } else if (isComponent2(tag2, props, context)) {
          tagType = 1;
        }
      }
      return {
        type: 1,
        ns,
        tag: tag2,
        tagType,
        props,
        isSelfClosing,
        children: [],
        loc: getSelection2(context, start),
        codegenNode: void 0
      };
    }
    function isComponent2(tag2, props, context) {
      const options = context.options;
      if (options.isCustomElement(tag2)) {
        return false;
      }
      if (tag2 === "component" || /^[A-Z]/.test(tag2) || isCoreComponent2(tag2) || options.isBuiltInComponent && options.isBuiltInComponent(tag2) || options.isNativeTag && !options.isNativeTag(tag2)) {
        return true;
      }
      for (let i = 0; i < props.length; i++) {
        const p = props[i];
        if (p.type === 6) {
          if (p.name === "is" && p.value) {
            if (p.value.content.startsWith("vue:")) {
              return true;
            } else if (checkCompatEnabled2("COMPILER_IS_ON_ELEMENT", context, p.loc)) {
              return true;
            }
          }
        } else {
          if (p.name === "is") {
            return true;
          } else if (p.name === "bind" && isStaticArgOf2(p.arg, "is") && true && checkCompatEnabled2("COMPILER_IS_ON_ELEMENT", context, p.loc)) {
            return true;
          }
        }
      }
    }
    function parseAttributes2(context, type) {
      const props = [];
      const attributeNames = /* @__PURE__ */ new Set();
      while (context.source.length > 0 && !startsWith2(context.source, ">") && !startsWith2(context.source, "/>")) {
        if (startsWith2(context.source, "/")) {
          emitError2(context, 22);
          advanceBy2(context, 1);
          advanceSpaces2(context);
          continue;
        }
        if (type === 1) {
          emitError2(context, 3);
        }
        const attr = parseAttribute2(context, attributeNames);
        if (attr.type === 6 && attr.value && attr.name === "class") {
          attr.value.content = attr.value.content.replace(/\s+/g, " ").trim();
        }
        if (type === 0) {
          props.push(attr);
        }
        if (/^[^\t\r\n\f />]/.test(context.source)) {
          emitError2(context, 15);
        }
        advanceSpaces2(context);
      }
      return props;
    }
    function parseAttribute2(context, nameSet) {
      const start = getCursor2(context);
      const match = /^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(context.source);
      const name = match[0];
      if (nameSet.has(name)) {
        emitError2(context, 2);
      }
      nameSet.add(name);
      if (name[0] === "=") {
        emitError2(context, 19);
      }
      {
        const pattern = /["'<]/g;
        let m;
        while (m = pattern.exec(name)) {
          emitError2(context, 17, m.index);
        }
      }
      advanceBy2(context, name.length);
      let value = void 0;
      if (/^[\t\r\n\f ]*=/.test(context.source)) {
        advanceSpaces2(context);
        advanceBy2(context, 1);
        advanceSpaces2(context);
        value = parseAttributeValue2(context);
        if (!value) {
          emitError2(context, 13);
        }
      }
      const loc = getSelection2(context, start);
      if (!context.inVPre && /^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(name)) {
        const match2 = /(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(name);
        let isPropShorthand = startsWith2(name, ".");
        let dirName = match2[1] || (isPropShorthand || startsWith2(name, ":") ? "bind" : startsWith2(name, "@") ? "on" : "slot");
        let arg;
        if (match2[2]) {
          const isSlot = dirName === "slot";
          const startOffset = name.lastIndexOf(match2[2]);
          const loc2 = getSelection2(context, getNewPosition2(context, start, startOffset), getNewPosition2(context, start, startOffset + match2[2].length + (isSlot && match2[3] || "").length));
          let content = match2[2];
          let isStatic = true;
          if (content.startsWith("[")) {
            isStatic = false;
            if (!content.endsWith("]")) {
              emitError2(context, 27);
              content = content.slice(1);
            } else {
              content = content.slice(1, content.length - 1);
            }
          } else if (isSlot) {
            content += match2[3] || "";
          }
          arg = {
            type: 4,
            content,
            isStatic,
            constType: isStatic ? 3 : 0,
            loc: loc2
          };
        }
        if (value && value.isQuoted) {
          const valueLoc = value.loc;
          valueLoc.start.offset++;
          valueLoc.start.column++;
          valueLoc.end = advancePositionWithClone2(valueLoc.start, value.content);
          valueLoc.source = valueLoc.source.slice(1, -1);
        }
        const modifiers = match2[3] ? match2[3].slice(1).split(".") : [];
        if (isPropShorthand)
          modifiers.push("prop");
        if (dirName === "bind" && arg) {
          if (modifiers.includes("sync") && checkCompatEnabled2("COMPILER_V_BIND_SYNC", context, loc, arg.loc.source)) {
            dirName = "model";
            modifiers.splice(modifiers.indexOf("sync"), 1);
          }
          if (modifiers.includes("prop")) {
            checkCompatEnabled2("COMPILER_V_BIND_PROP", context, loc);
          }
        }
        return {
          type: 7,
          name: dirName,
          exp: value && {
            type: 4,
            content: value.content,
            isStatic: false,
            constType: 0,
            loc: value.loc
          },
          arg,
          modifiers,
          loc
        };
      }
      if (!context.inVPre && startsWith2(name, "v-")) {
        emitError2(context, 26);
      }
      return {
        type: 6,
        name,
        value: value && {
          type: 2,
          content: value.content,
          loc: value.loc
        },
        loc
      };
    }
    function parseAttributeValue2(context) {
      const start = getCursor2(context);
      let content;
      const quote = context.source[0];
      const isQuoted = quote === `"` || quote === `'`;
      if (isQuoted) {
        advanceBy2(context, 1);
        const endIndex = context.source.indexOf(quote);
        if (endIndex === -1) {
          content = parseTextData2(context, context.source.length, 4);
        } else {
          content = parseTextData2(context, endIndex, 4);
          advanceBy2(context, 1);
        }
      } else {
        const match = /^[^\t\r\n\f >]+/.exec(context.source);
        if (!match) {
          return void 0;
        }
        const unexpectedChars = /["'<=`]/g;
        let m;
        while (m = unexpectedChars.exec(match[0])) {
          emitError2(context, 18, m.index);
        }
        content = parseTextData2(context, match[0].length, 4);
      }
      return { content, isQuoted, loc: getSelection2(context, start) };
    }
    function parseInterpolation2(context, mode) {
      const [open, close] = context.options.delimiters;
      const closeIndex = context.source.indexOf(close, open.length);
      if (closeIndex === -1) {
        emitError2(context, 25);
        return void 0;
      }
      const start = getCursor2(context);
      advanceBy2(context, open.length);
      const innerStart = getCursor2(context);
      const innerEnd = getCursor2(context);
      const rawContentLength = closeIndex - open.length;
      const rawContent = context.source.slice(0, rawContentLength);
      const preTrimContent = parseTextData2(context, rawContentLength, mode);
      const content = preTrimContent.trim();
      const startOffset = preTrimContent.indexOf(content);
      if (startOffset > 0) {
        advancePositionWithMutation2(innerStart, rawContent, startOffset);
      }
      const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);
      advancePositionWithMutation2(innerEnd, rawContent, endOffset);
      advanceBy2(context, close.length);
      return {
        type: 5,
        content: {
          type: 4,
          isStatic: false,
          constType: 0,
          content,
          loc: getSelection2(context, innerStart, innerEnd)
        },
        loc: getSelection2(context, start)
      };
    }
    function parseText2(context, mode) {
      const endTokens = mode === 3 ? ["]]>"] : ["<", context.options.delimiters[0]];
      let endIndex = context.source.length;
      for (let i = 0; i < endTokens.length; i++) {
        const index = context.source.indexOf(endTokens[i], 1);
        if (index !== -1 && endIndex > index) {
          endIndex = index;
        }
      }
      const start = getCursor2(context);
      const content = parseTextData2(context, endIndex, mode);
      return {
        type: 2,
        content,
        loc: getSelection2(context, start)
      };
    }
    function parseTextData2(context, length2, mode) {
      const rawText = context.source.slice(0, length2);
      advanceBy2(context, length2);
      if (mode === 2 || mode === 3 || !rawText.includes("&")) {
        return rawText;
      } else {
        return context.options.decodeEntities(rawText, mode === 4);
      }
    }
    function getCursor2(context) {
      const { column, line, offset } = context;
      return { column, line, offset };
    }
    function getSelection2(context, start, end) {
      end = end || getCursor2(context);
      return {
        start,
        end,
        source: context.originalSource.slice(start.offset, end.offset)
      };
    }
    function last2(xs) {
      return xs[xs.length - 1];
    }
    function startsWith2(source, searchString) {
      return source.startsWith(searchString);
    }
    function advanceBy2(context, numberOfCharacters) {
      const { source } = context;
      advancePositionWithMutation2(context, source, numberOfCharacters);
      context.source = source.slice(numberOfCharacters);
    }
    function advanceSpaces2(context) {
      const match = /^[\t\r\n\f ]+/.exec(context.source);
      if (match) {
        advanceBy2(context, match[0].length);
      }
    }
    function getNewPosition2(context, start, numberOfCharacters) {
      return advancePositionWithClone2(start, context.originalSource.slice(start.offset, numberOfCharacters), numberOfCharacters);
    }
    function emitError2(context, code, offset, loc = getCursor2(context)) {
      if (offset) {
        loc.offset += offset;
        loc.column += offset;
      }
      context.options.onError(createCompilerError2(code, {
        start: loc,
        end: loc,
        source: ""
      }));
    }
    function isEnd2(context, mode, ancestors) {
      const s = context.source;
      switch (mode) {
        case 0:
          if (startsWith2(s, "</")) {
            for (let i = ancestors.length - 1; i >= 0; --i) {
              if (startsWithEndTagOpen2(s, ancestors[i].tag)) {
                return true;
              }
            }
          }
          break;
        case 1:
        case 2: {
          const parent = last2(ancestors);
          if (parent && startsWithEndTagOpen2(s, parent.tag)) {
            return true;
          }
          break;
        }
        case 3:
          if (startsWith2(s, "]]>")) {
            return true;
          }
          break;
      }
      return !s;
    }
    function startsWithEndTagOpen2(source, tag2) {
      return startsWith2(source, "</") && source.slice(2, 2 + tag2.length).toLowerCase() === tag2.toLowerCase() && /[\t\r\n\f />]/.test(source[2 + tag2.length] || ">");
    }
    function hoistStatic2(root2, context) {
      walk3(root2, context, isSingleElementRoot2(root2, root2.children[0]));
    }
    function isSingleElementRoot2(root2, child) {
      const { children } = root2;
      return children.length === 1 && child.type === 1 && !isSlotOutlet2(child);
    }
    function walk3(node2, context, doNotHoistNode = false) {
      const { children } = node2;
      const originalCount = children.length;
      let hoistedCount = 0;
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (child.type === 1 && child.tagType === 0) {
          const constantType = doNotHoistNode ? 0 : getConstantType2(child, context);
          if (constantType > 0) {
            if (constantType >= 2) {
              child.codegenNode.patchFlag = -1 + ` /* HOISTED */`;
              child.codegenNode = context.hoist(child.codegenNode);
              hoistedCount++;
              continue;
            }
          } else {
            const codegenNode = child.codegenNode;
            if (codegenNode.type === 13) {
              const flag = getPatchFlag2(codegenNode);
              if ((!flag || flag === 512 || flag === 1) && getGeneratedPropsConstantType2(child, context) >= 2) {
                const props = getNodeProps2(child);
                if (props) {
                  codegenNode.props = context.hoist(props);
                }
              }
              if (codegenNode.dynamicProps) {
                codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);
              }
            }
          }
        } else if (child.type === 12 && getConstantType2(child.content, context) >= 2) {
          child.codegenNode = context.hoist(child.codegenNode);
          hoistedCount++;
        }
        if (child.type === 1) {
          const isComponent3 = child.tagType === 1;
          if (isComponent3) {
            context.scopes.vSlot++;
          }
          walk3(child, context);
          if (isComponent3) {
            context.scopes.vSlot--;
          }
        } else if (child.type === 11) {
          walk3(child, context, child.children.length === 1);
        } else if (child.type === 9) {
          for (let i2 = 0; i2 < child.branches.length; i2++) {
            walk3(child.branches[i2], context, child.branches[i2].children.length === 1);
          }
        }
      }
      if (hoistedCount && context.transformHoist) {
        context.transformHoist(children, context, node2);
      }
      if (hoistedCount && hoistedCount === originalCount && node2.type === 1 && node2.tagType === 0 && node2.codegenNode && node2.codegenNode.type === 13 && shared.isArray(node2.codegenNode.children)) {
        node2.codegenNode.children = context.hoist(createArrayExpression2(node2.codegenNode.children));
      }
    }
    function getConstantType2(node2, context) {
      const { constantCache } = context;
      switch (node2.type) {
        case 1:
          if (node2.tagType !== 0) {
            return 0;
          }
          const cached = constantCache.get(node2);
          if (cached !== void 0) {
            return cached;
          }
          const codegenNode = node2.codegenNode;
          if (codegenNode.type !== 13) {
            return 0;
          }
          if (codegenNode.isBlock && node2.tag !== "svg" && node2.tag !== "foreignObject") {
            return 0;
          }
          const flag = getPatchFlag2(codegenNode);
          if (!flag) {
            let returnType2 = 3;
            const generatedPropsType = getGeneratedPropsConstantType2(node2, context);
            if (generatedPropsType === 0) {
              constantCache.set(node2, 0);
              return 0;
            }
            if (generatedPropsType < returnType2) {
              returnType2 = generatedPropsType;
            }
            for (let i = 0; i < node2.children.length; i++) {
              const childType = getConstantType2(node2.children[i], context);
              if (childType === 0) {
                constantCache.set(node2, 0);
                return 0;
              }
              if (childType < returnType2) {
                returnType2 = childType;
              }
            }
            if (returnType2 > 1) {
              for (let i = 0; i < node2.props.length; i++) {
                const p = node2.props[i];
                if (p.type === 7 && p.name === "bind" && p.exp) {
                  const expType = getConstantType2(p.exp, context);
                  if (expType === 0) {
                    constantCache.set(node2, 0);
                    return 0;
                  }
                  if (expType < returnType2) {
                    returnType2 = expType;
                  }
                }
              }
            }
            if (codegenNode.isBlock) {
              context.removeHelper(OPEN_BLOCK2);
              context.removeHelper(getVNodeBlockHelper2(context.inSSR, codegenNode.isComponent));
              codegenNode.isBlock = false;
              context.helper(getVNodeHelper2(context.inSSR, codegenNode.isComponent));
            }
            constantCache.set(node2, returnType2);
            return returnType2;
          } else {
            constantCache.set(node2, 0);
            return 0;
          }
        case 2:
        case 3:
          return 3;
        case 9:
        case 11:
        case 10:
          return 0;
        case 5:
        case 12:
          return getConstantType2(node2.content, context);
        case 4:
          return node2.constType;
        case 8:
          let returnType = 3;
          for (let i = 0; i < node2.children.length; i++) {
            const child = node2.children[i];
            if (shared.isString(child) || shared.isSymbol(child)) {
              continue;
            }
            const childType = getConstantType2(child, context);
            if (childType === 0) {
              return 0;
            } else if (childType < returnType) {
              returnType = childType;
            }
          }
          return returnType;
        default:
          return 0;
      }
    }
    var allowHoistedHelperSet2 = /* @__PURE__ */ new Set([
      NORMALIZE_CLASS2,
      NORMALIZE_STYLE2,
      NORMALIZE_PROPS2,
      GUARD_REACTIVE_PROPS2
    ]);
    function getConstantTypeOfHelperCall2(value, context) {
      if (value.type === 14 && !shared.isString(value.callee) && allowHoistedHelperSet2.has(value.callee)) {
        const arg = value.arguments[0];
        if (arg.type === 4) {
          return getConstantType2(arg, context);
        } else if (arg.type === 14) {
          return getConstantTypeOfHelperCall2(arg, context);
        }
      }
      return 0;
    }
    function getGeneratedPropsConstantType2(node2, context) {
      let returnType = 3;
      const props = getNodeProps2(node2);
      if (props && props.type === 15) {
        const { properties } = props;
        for (let i = 0; i < properties.length; i++) {
          const { key, value } = properties[i];
          const keyType = getConstantType2(key, context);
          if (keyType === 0) {
            return keyType;
          }
          if (keyType < returnType) {
            returnType = keyType;
          }
          let valueType;
          if (value.type === 4) {
            valueType = getConstantType2(value, context);
          } else if (value.type === 14) {
            valueType = getConstantTypeOfHelperCall2(value, context);
          } else {
            valueType = 0;
          }
          if (valueType === 0) {
            return valueType;
          }
          if (valueType < returnType) {
            returnType = valueType;
          }
        }
      }
      return returnType;
    }
    function getNodeProps2(node2) {
      const codegenNode = node2.codegenNode;
      if (codegenNode.type === 13) {
        return codegenNode.props;
      }
    }
    function getPatchFlag2(node2) {
      const flag = node2.patchFlag;
      return flag ? parseInt(flag, 10) : void 0;
    }
    function createTransformContext2(root2, { filename = "", prefixIdentifiers = false, hoistStatic: hoistStatic3 = false, cacheHandlers = false, nodeTransforms = [], directiveTransforms = {}, transformHoist = null, isBuiltInComponent = shared.NOOP, isCustomElement = shared.NOOP, expressionPlugins = [], scopeId = null, slotted = true, ssr = false, inSSR = false, ssrCssVars = ``, bindingMetadata = shared.EMPTY_OBJ, inline = false, isTS = false, onError = defaultOnError2, onWarn = defaultOnWarn2, compatConfig }) {
      const nameMatch = filename.replace(/\?.*$/, "").match(/([^/\\]+)\.\w+$/);
      const context = {
        selfName: nameMatch && shared.capitalize(shared.camelize(nameMatch[1])),
        prefixIdentifiers,
        hoistStatic: hoistStatic3,
        cacheHandlers,
        nodeTransforms,
        directiveTransforms,
        transformHoist,
        isBuiltInComponent,
        isCustomElement,
        expressionPlugins,
        scopeId,
        slotted,
        ssr,
        inSSR,
        ssrCssVars,
        bindingMetadata,
        inline,
        isTS,
        onError,
        onWarn,
        compatConfig,
        root: root2,
        helpers: /* @__PURE__ */ new Map(),
        components: /* @__PURE__ */ new Set(),
        directives: /* @__PURE__ */ new Set(),
        hoists: [],
        imports: [],
        constantCache: /* @__PURE__ */ new Map(),
        temps: 0,
        cached: 0,
        identifiers: /* @__PURE__ */ Object.create(null),
        scopes: {
          vFor: 0,
          vSlot: 0,
          vPre: 0,
          vOnce: 0
        },
        parent: null,
        currentNode: root2,
        childIndex: 0,
        inVOnce: false,
        helper(name) {
          const count = context.helpers.get(name) || 0;
          context.helpers.set(name, count + 1);
          return name;
        },
        removeHelper(name) {
          const count = context.helpers.get(name);
          if (count) {
            const currentCount = count - 1;
            if (!currentCount) {
              context.helpers.delete(name);
            } else {
              context.helpers.set(name, currentCount);
            }
          }
        },
        helperString(name) {
          return `_${helperNameMap2[context.helper(name)]}`;
        },
        replaceNode(node2) {
          {
            if (!context.currentNode) {
              throw new Error(`Node being replaced is already removed.`);
            }
            if (!context.parent) {
              throw new Error(`Cannot replace root node.`);
            }
          }
          context.parent.children[context.childIndex] = context.currentNode = node2;
        },
        removeNode(node2) {
          if (!context.parent) {
            throw new Error(`Cannot remove root node.`);
          }
          const list2 = context.parent.children;
          const removalIndex = node2 ? list2.indexOf(node2) : context.currentNode ? context.childIndex : -1;
          if (removalIndex < 0) {
            throw new Error(`node being removed is not a child of current parent`);
          }
          if (!node2 || node2 === context.currentNode) {
            context.currentNode = null;
            context.onNodeRemoved();
          } else {
            if (context.childIndex > removalIndex) {
              context.childIndex--;
              context.onNodeRemoved();
            }
          }
          context.parent.children.splice(removalIndex, 1);
        },
        onNodeRemoved: () => {
        },
        addIdentifiers(exp) {
          {
            if (shared.isString(exp)) {
              addId(exp);
            } else if (exp.identifiers) {
              exp.identifiers.forEach(addId);
            } else if (exp.type === 4) {
              addId(exp.content);
            }
          }
        },
        removeIdentifiers(exp) {
          {
            if (shared.isString(exp)) {
              removeId(exp);
            } else if (exp.identifiers) {
              exp.identifiers.forEach(removeId);
            } else if (exp.type === 4) {
              removeId(exp.content);
            }
          }
        },
        hoist(exp) {
          if (shared.isString(exp))
            exp = createSimpleExpression2(exp);
          context.hoists.push(exp);
          const identifier = createSimpleExpression2(`_hoisted_${context.hoists.length}`, false, exp.loc, 2);
          identifier.hoisted = exp;
          return identifier;
        },
        cache(exp, isVNode = false) {
          return createCacheExpression2(context.cached++, exp, isVNode);
        }
      };
      {
        context.filters = /* @__PURE__ */ new Set();
      }
      function addId(id2) {
        const { identifiers } = context;
        if (identifiers[id2] === void 0) {
          identifiers[id2] = 0;
        }
        identifiers[id2]++;
      }
      function removeId(id2) {
        context.identifiers[id2]--;
      }
      return context;
    }
    function transform2(root2, options) {
      const context = createTransformContext2(root2, options);
      traverseNode2(root2, context);
      if (options.hoistStatic) {
        hoistStatic2(root2, context);
      }
      if (!options.ssr) {
        createRootCodegen2(root2, context);
      }
      root2.helpers = [...context.helpers.keys()];
      root2.components = [...context.components];
      root2.directives = [...context.directives];
      root2.imports = context.imports;
      root2.hoists = context.hoists;
      root2.temps = context.temps;
      root2.cached = context.cached;
      {
        root2.filters = [...context.filters];
      }
    }
    function createRootCodegen2(root2, context) {
      const { helper } = context;
      const { children } = root2;
      if (children.length === 1) {
        const child = children[0];
        if (isSingleElementRoot2(root2, child) && child.codegenNode) {
          const codegenNode = child.codegenNode;
          if (codegenNode.type === 13) {
            makeBlock2(codegenNode, context);
          }
          root2.codegenNode = codegenNode;
        } else {
          root2.codegenNode = child;
        }
      } else if (children.length > 1) {
        let patchFlag = 64;
        let patchFlagText = shared.PatchFlagNames[64];
        if (children.filter((c) => c.type !== 3).length === 1) {
          patchFlag |= 2048;
          patchFlagText += `, ${shared.PatchFlagNames[2048]}`;
        }
        root2.codegenNode = createVNodeCall2(context, helper(FRAGMENT2), void 0, root2.children, patchFlag + ` /* ${patchFlagText} */`, void 0, void 0, true, void 0, false);
      } else
        ;
    }
    function traverseChildren2(parent, context) {
      let i = 0;
      const nodeRemoved = () => {
        i--;
      };
      for (; i < parent.children.length; i++) {
        const child = parent.children[i];
        if (shared.isString(child))
          continue;
        context.parent = parent;
        context.childIndex = i;
        context.onNodeRemoved = nodeRemoved;
        traverseNode2(child, context);
      }
    }
    function traverseNode2(node2, context) {
      context.currentNode = node2;
      const { nodeTransforms } = context;
      const exitFns = [];
      for (let i2 = 0; i2 < nodeTransforms.length; i2++) {
        const onExit = nodeTransforms[i2](node2, context);
        if (onExit) {
          if (shared.isArray(onExit)) {
            exitFns.push(...onExit);
          } else {
            exitFns.push(onExit);
          }
        }
        if (!context.currentNode) {
          return;
        } else {
          node2 = context.currentNode;
        }
      }
      switch (node2.type) {
        case 3:
          if (!context.ssr) {
            context.helper(CREATE_COMMENT2);
          }
          break;
        case 5:
          if (!context.ssr) {
            context.helper(TO_DISPLAY_STRING2);
          }
          break;
        case 9:
          for (let i2 = 0; i2 < node2.branches.length; i2++) {
            traverseNode2(node2.branches[i2], context);
          }
          break;
        case 10:
        case 11:
        case 1:
        case 0:
          traverseChildren2(node2, context);
          break;
      }
      context.currentNode = node2;
      let i = exitFns.length;
      while (i--) {
        exitFns[i]();
      }
    }
    function createStructuralDirectiveTransform2(name, fn) {
      const matches = shared.isString(name) ? (n2) => n2 === name : (n2) => name.test(n2);
      return (node2, context) => {
        if (node2.type === 1) {
          const { props } = node2;
          if (node2.tagType === 3 && props.some(isVSlot2)) {
            return;
          }
          const exitFns = [];
          for (let i = 0; i < props.length; i++) {
            const prop = props[i];
            if (prop.type === 7 && matches(prop.name)) {
              props.splice(i, 1);
              i--;
              const onExit = fn(node2, prop, context);
              if (onExit)
                exitFns.push(onExit);
            }
          }
          return exitFns;
        }
      };
    }
    var PURE_ANNOTATION2 = `/*#__PURE__*/`;
    function createCodegenContext2(ast, { mode = "function", prefixIdentifiers = mode === "module", sourceMap: sourceMap$12 = false, filename = `template.vue.html`, scopeId = null, optimizeImports = false, runtimeGlobalName = `Vue`, runtimeModuleName = `vue`, ssrRuntimeModuleName = "vue/server-renderer", ssr = false, isTS = false, inSSR = false }) {
      const context = {
        mode,
        prefixIdentifiers,
        sourceMap: sourceMap$12,
        filename,
        scopeId,
        optimizeImports,
        runtimeGlobalName,
        runtimeModuleName,
        ssrRuntimeModuleName,
        ssr,
        isTS,
        inSSR,
        source: ast.loc.source,
        code: ``,
        column: 1,
        line: 1,
        offset: 0,
        indentLevel: 0,
        pure: false,
        map: void 0,
        helper(key) {
          return `_${helperNameMap2[key]}`;
        },
        push(code, node2) {
          context.code += code;
          if (context.map) {
            if (node2) {
              let name;
              if (node2.type === 4 && !node2.isStatic) {
                const content = node2.content.replace(/^_ctx\./, "");
                if (content !== node2.content && isSimpleIdentifier2(content)) {
                  name = content;
                }
              }
              addMapping(node2.loc.start, name);
            }
            advancePositionWithMutation2(context, code);
            if (node2 && node2.loc !== locStub2) {
              addMapping(node2.loc.end);
            }
          }
        },
        indent() {
          newline(++context.indentLevel);
        },
        deindent(withoutNewLine = false) {
          if (withoutNewLine) {
            --context.indentLevel;
          } else {
            newline(--context.indentLevel);
          }
        },
        newline() {
          newline(context.indentLevel);
        }
      };
      function newline(n2) {
        context.push("\n" + `  `.repeat(n2));
      }
      function addMapping(loc, name) {
        context.map.addMapping({
          name,
          source: context.filename,
          original: {
            line: loc.line,
            column: loc.column - 1
          },
          generated: {
            line: context.line,
            column: context.column - 1
          }
        });
      }
      if (sourceMap$12) {
        context.map = new sourceMap2.SourceMapGenerator();
        context.map.setSourceContent(filename, context.source);
      }
      return context;
    }
    function generate2(ast, options = {}) {
      const context = createCodegenContext2(ast, options);
      if (options.onContextCreated)
        options.onContextCreated(context);
      const { mode, push, prefixIdentifiers, indent: indent2, deindent, newline, scopeId, ssr } = context;
      const hasHelpers = ast.helpers.length > 0;
      const useWithBlock = !prefixIdentifiers && mode !== "module";
      const genScopeId = scopeId != null && mode === "module";
      const isSetupInlined = !!options.inline;
      const preambleContext = isSetupInlined ? createCodegenContext2(ast, options) : context;
      if (mode === "module") {
        genModulePreamble2(ast, preambleContext, genScopeId, isSetupInlined);
      } else {
        genFunctionPreamble2(ast, preambleContext);
      }
      const functionName = ssr ? `ssrRender` : `render`;
      const args = ssr ? ["_ctx", "_push", "_parent", "_attrs"] : ["_ctx", "_cache"];
      if (options.bindingMetadata && !options.inline) {
        args.push("$props", "$setup", "$data", "$options");
      }
      const signature = options.isTS ? args.map((arg) => `${arg}: any`).join(",") : args.join(", ");
      if (isSetupInlined) {
        push(`(${signature}) => {`);
      } else {
        push(`function ${functionName}(${signature}) {`);
      }
      indent2();
      if (useWithBlock) {
        push(`with (_ctx) {`);
        indent2();
        if (hasHelpers) {
          push(`const { ${ast.helpers.map((s) => `${helperNameMap2[s]}: _${helperNameMap2[s]}`).join(", ")} } = _Vue`);
          push(`
`);
          newline();
        }
      }
      if (ast.components.length) {
        genAssets2(ast.components, "component", context);
        if (ast.directives.length || ast.temps > 0) {
          newline();
        }
      }
      if (ast.directives.length) {
        genAssets2(ast.directives, "directive", context);
        if (ast.temps > 0) {
          newline();
        }
      }
      if (ast.filters && ast.filters.length) {
        newline();
        genAssets2(ast.filters, "filter", context);
        newline();
      }
      if (ast.temps > 0) {
        push(`let `);
        for (let i = 0; i < ast.temps; i++) {
          push(`${i > 0 ? `, ` : ``}_temp${i}`);
        }
      }
      if (ast.components.length || ast.directives.length || ast.temps) {
        push(`
`);
        newline();
      }
      if (!ssr) {
        push(`return `);
      }
      if (ast.codegenNode) {
        genNode2(ast.codegenNode, context);
      } else {
        push(`null`);
      }
      if (useWithBlock) {
        deindent();
        push(`}`);
      }
      deindent();
      push(`}`);
      return {
        ast,
        code: context.code,
        preamble: isSetupInlined ? preambleContext.code : ``,
        map: context.map ? context.map.toJSON() : void 0
      };
    }
    function genFunctionPreamble2(ast, context) {
      const { ssr, prefixIdentifiers, push, newline, runtimeModuleName, runtimeGlobalName, ssrRuntimeModuleName } = context;
      const VueBinding = ssr ? `require(${JSON.stringify(runtimeModuleName)})` : runtimeGlobalName;
      const aliasHelper = (s) => `${helperNameMap2[s]}: _${helperNameMap2[s]}`;
      if (ast.helpers.length > 0) {
        if (prefixIdentifiers) {
          push(`const { ${ast.helpers.map(aliasHelper).join(", ")} } = ${VueBinding}
`);
        } else {
          push(`const _Vue = ${VueBinding}
`);
          if (ast.hoists.length) {
            const staticHelpers = [
              CREATE_VNODE2,
              CREATE_ELEMENT_VNODE2,
              CREATE_COMMENT2,
              CREATE_TEXT2,
              CREATE_STATIC2
            ].filter((helper) => ast.helpers.includes(helper)).map(aliasHelper).join(", ");
            push(`const { ${staticHelpers} } = _Vue
`);
          }
        }
      }
      if (ast.ssrHelpers && ast.ssrHelpers.length) {
        push(`const { ${ast.ssrHelpers.map(aliasHelper).join(", ")} } = require("${ssrRuntimeModuleName}")
`);
      }
      genHoists2(ast.hoists, context);
      newline();
      push(`return `);
    }
    function genModulePreamble2(ast, context, genScopeId, inline) {
      const { push, newline, optimizeImports, runtimeModuleName, ssrRuntimeModuleName } = context;
      if (genScopeId && ast.hoists.length) {
        ast.helpers.push(PUSH_SCOPE_ID2, POP_SCOPE_ID2);
      }
      if (ast.helpers.length) {
        if (optimizeImports) {
          push(`import { ${ast.helpers.map((s) => helperNameMap2[s]).join(", ")} } from ${JSON.stringify(runtimeModuleName)}
`);
          push(`
// Binding optimization for webpack code-split
const ${ast.helpers.map((s) => `_${helperNameMap2[s]} = ${helperNameMap2[s]}`).join(", ")}
`);
        } else {
          push(`import { ${ast.helpers.map((s) => `${helperNameMap2[s]} as _${helperNameMap2[s]}`).join(", ")} } from ${JSON.stringify(runtimeModuleName)}
`);
        }
      }
      if (ast.ssrHelpers && ast.ssrHelpers.length) {
        push(`import { ${ast.ssrHelpers.map((s) => `${helperNameMap2[s]} as _${helperNameMap2[s]}`).join(", ")} } from "${ssrRuntimeModuleName}"
`);
      }
      if (ast.imports.length) {
        genImports2(ast.imports, context);
        newline();
      }
      genHoists2(ast.hoists, context);
      newline();
      if (!inline) {
        push(`export `);
      }
    }
    function genAssets2(assets, type, { helper, push, newline, isTS }) {
      const resolver = helper(type === "filter" ? RESOLVE_FILTER2 : type === "component" ? RESOLVE_COMPONENT2 : RESOLVE_DIRECTIVE2);
      for (let i = 0; i < assets.length; i++) {
        let id2 = assets[i];
        const maybeSelfReference = id2.endsWith("__self");
        if (maybeSelfReference) {
          id2 = id2.slice(0, -6);
        }
        push(`const ${toValidAssetId2(id2, type)} = ${resolver}(${JSON.stringify(id2)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`);
        if (i < assets.length - 1) {
          newline();
        }
      }
    }
    function genHoists2(hoists, context) {
      if (!hoists.length) {
        return;
      }
      context.pure = true;
      const { push, newline, helper, scopeId, mode } = context;
      const genScopeId = scopeId != null && mode !== "function";
      newline();
      if (genScopeId) {
        push(`const _withScopeId = n => (${helper(PUSH_SCOPE_ID2)}("${scopeId}"),n=n(),${helper(POP_SCOPE_ID2)}(),n)`);
        newline();
      }
      for (let i = 0; i < hoists.length; i++) {
        const exp = hoists[i];
        if (exp) {
          const needScopeIdWrapper = genScopeId && exp.type === 13;
          push(`const _hoisted_${i + 1} = ${needScopeIdWrapper ? `${PURE_ANNOTATION2} _withScopeId(() => ` : ``}`);
          genNode2(exp, context);
          if (needScopeIdWrapper) {
            push(`)`);
          }
          newline();
        }
      }
      context.pure = false;
    }
    function genImports2(importsOptions, context) {
      if (!importsOptions.length) {
        return;
      }
      importsOptions.forEach((imports) => {
        context.push(`import `);
        genNode2(imports.exp, context);
        context.push(` from '${imports.path}'`);
        context.newline();
      });
    }
    function isText$12(n2) {
      return shared.isString(n2) || n2.type === 4 || n2.type === 2 || n2.type === 5 || n2.type === 8;
    }
    function genNodeListAsArray2(nodes, context) {
      const multilines = nodes.length > 3 || nodes.some((n2) => shared.isArray(n2) || !isText$12(n2));
      context.push(`[`);
      multilines && context.indent();
      genNodeList2(nodes, context, multilines);
      multilines && context.deindent();
      context.push(`]`);
    }
    function genNodeList2(nodes, context, multilines = false, comma = true) {
      const { push, newline } = context;
      for (let i = 0; i < nodes.length; i++) {
        const node2 = nodes[i];
        if (shared.isString(node2)) {
          push(node2);
        } else if (shared.isArray(node2)) {
          genNodeListAsArray2(node2, context);
        } else {
          genNode2(node2, context);
        }
        if (i < nodes.length - 1) {
          if (multilines) {
            comma && push(",");
            newline();
          } else {
            comma && push(", ");
          }
        }
      }
    }
    function genNode2(node2, context) {
      if (shared.isString(node2)) {
        context.push(node2);
        return;
      }
      if (shared.isSymbol(node2)) {
        context.push(context.helper(node2));
        return;
      }
      switch (node2.type) {
        case 1:
        case 9:
        case 11:
          assert2(node2.codegenNode != null, `Codegen node is missing for element/if/for node. Apply appropriate transforms first.`);
          genNode2(node2.codegenNode, context);
          break;
        case 2:
          genText2(node2, context);
          break;
        case 4:
          genExpression2(node2, context);
          break;
        case 5:
          genInterpolation2(node2, context);
          break;
        case 12:
          genNode2(node2.codegenNode, context);
          break;
        case 8:
          genCompoundExpression2(node2, context);
          break;
        case 3:
          genComment2(node2, context);
          break;
        case 13:
          genVNodeCall2(node2, context);
          break;
        case 14:
          genCallExpression2(node2, context);
          break;
        case 15:
          genObjectExpression2(node2, context);
          break;
        case 17:
          genArrayExpression2(node2, context);
          break;
        case 18:
          genFunctionExpression2(node2, context);
          break;
        case 19:
          genConditionalExpression2(node2, context);
          break;
        case 20:
          genCacheExpression2(node2, context);
          break;
        case 21:
          genNodeList2(node2.body, context, true, false);
          break;
        case 22:
          genTemplateLiteral2(node2, context);
          break;
        case 23:
          genIfStatement2(node2, context);
          break;
        case 24:
          genAssignmentExpression2(node2, context);
          break;
        case 25:
          genSequenceExpression2(node2, context);
          break;
        case 26:
          genReturnStatement2(node2, context);
          break;
        case 10:
          break;
        default: {
          assert2(false, `unhandled codegen node type: ${node2.type}`);
          const exhaustiveCheck = node2;
          return exhaustiveCheck;
        }
      }
    }
    function genText2(node2, context) {
      context.push(JSON.stringify(node2.content), node2);
    }
    function genExpression2(node2, context) {
      const { content, isStatic } = node2;
      context.push(isStatic ? JSON.stringify(content) : content, node2);
    }
    function genInterpolation2(node2, context) {
      const { push, helper, pure } = context;
      if (pure)
        push(PURE_ANNOTATION2);
      push(`${helper(TO_DISPLAY_STRING2)}(`);
      genNode2(node2.content, context);
      push(`)`);
    }
    function genCompoundExpression2(node2, context) {
      for (let i = 0; i < node2.children.length; i++) {
        const child = node2.children[i];
        if (shared.isString(child)) {
          context.push(child);
        } else {
          genNode2(child, context);
        }
      }
    }
    function genExpressionAsPropertyKey2(node2, context) {
      const { push } = context;
      if (node2.type === 8) {
        push(`[`);
        genCompoundExpression2(node2, context);
        push(`]`);
      } else if (node2.isStatic) {
        const text = isSimpleIdentifier2(node2.content) ? node2.content : JSON.stringify(node2.content);
        push(text, node2);
      } else {
        push(`[${node2.content}]`, node2);
      }
    }
    function genComment2(node2, context) {
      const { push, helper, pure } = context;
      if (pure) {
        push(PURE_ANNOTATION2);
      }
      push(`${helper(CREATE_COMMENT2)}(${JSON.stringify(node2.content)})`, node2);
    }
    function genVNodeCall2(node2, context) {
      const { push, helper, pure } = context;
      const { tag: tag2, props, children, patchFlag, dynamicProps, directives, isBlock, disableTracking, isComponent: isComponent3 } = node2;
      if (directives) {
        push(helper(WITH_DIRECTIVES2) + `(`);
      }
      if (isBlock) {
        push(`(${helper(OPEN_BLOCK2)}(${disableTracking ? `true` : ``}), `);
      }
      if (pure) {
        push(PURE_ANNOTATION2);
      }
      const callHelper = isBlock ? getVNodeBlockHelper2(context.inSSR, isComponent3) : getVNodeHelper2(context.inSSR, isComponent3);
      push(helper(callHelper) + `(`, node2);
      genNodeList2(genNullableArgs2([tag2, props, children, patchFlag, dynamicProps]), context);
      push(`)`);
      if (isBlock) {
        push(`)`);
      }
      if (directives) {
        push(`, `);
        genNode2(directives, context);
        push(`)`);
      }
    }
    function genNullableArgs2(args) {
      let i = args.length;
      while (i--) {
        if (args[i] != null)
          break;
      }
      return args.slice(0, i + 1).map((arg) => arg || `null`);
    }
    function genCallExpression2(node2, context) {
      const { push, helper, pure } = context;
      const callee = shared.isString(node2.callee) ? node2.callee : helper(node2.callee);
      if (pure) {
        push(PURE_ANNOTATION2);
      }
      push(callee + `(`, node2);
      genNodeList2(node2.arguments, context);
      push(`)`);
    }
    function genObjectExpression2(node2, context) {
      const { push, indent: indent2, deindent, newline } = context;
      const { properties } = node2;
      if (!properties.length) {
        push(`{}`, node2);
        return;
      }
      const multilines = properties.length > 1 || properties.some((p) => p.value.type !== 4);
      push(multilines ? `{` : `{ `);
      multilines && indent2();
      for (let i = 0; i < properties.length; i++) {
        const { key, value } = properties[i];
        genExpressionAsPropertyKey2(key, context);
        push(`: `);
        genNode2(value, context);
        if (i < properties.length - 1) {
          push(`,`);
          newline();
        }
      }
      multilines && deindent();
      push(multilines ? `}` : ` }`);
    }
    function genArrayExpression2(node2, context) {
      genNodeListAsArray2(node2.elements, context);
    }
    function genFunctionExpression2(node2, context) {
      const { push, indent: indent2, deindent } = context;
      const { params, returns, body, newline, isSlot } = node2;
      if (isSlot) {
        push(`_${helperNameMap2[WITH_CTX2]}(`);
      }
      push(`(`, node2);
      if (shared.isArray(params)) {
        genNodeList2(params, context);
      } else if (params) {
        genNode2(params, context);
      }
      push(`) => `);
      if (newline || body) {
        push(`{`);
        indent2();
      }
      if (returns) {
        if (newline) {
          push(`return `);
        }
        if (shared.isArray(returns)) {
          genNodeListAsArray2(returns, context);
        } else {
          genNode2(returns, context);
        }
      } else if (body) {
        genNode2(body, context);
      }
      if (newline || body) {
        deindent();
        push(`}`);
      }
      if (isSlot) {
        if (node2.isNonScopedSlot) {
          push(`, undefined, true`);
        }
        push(`)`);
      }
    }
    function genConditionalExpression2(node2, context) {
      const { test, consequent, alternate, newline: needNewline } = node2;
      const { push, indent: indent2, deindent, newline } = context;
      if (test.type === 4) {
        const needsParens = !isSimpleIdentifier2(test.content);
        needsParens && push(`(`);
        genExpression2(test, context);
        needsParens && push(`)`);
      } else {
        push(`(`);
        genNode2(test, context);
        push(`)`);
      }
      needNewline && indent2();
      context.indentLevel++;
      needNewline || push(` `);
      push(`? `);
      genNode2(consequent, context);
      context.indentLevel--;
      needNewline && newline();
      needNewline || push(` `);
      push(`: `);
      const isNested = alternate.type === 19;
      if (!isNested) {
        context.indentLevel++;
      }
      genNode2(alternate, context);
      if (!isNested) {
        context.indentLevel--;
      }
      needNewline && deindent(true);
    }
    function genCacheExpression2(node2, context) {
      const { push, helper, indent: indent2, deindent, newline } = context;
      push(`_cache[${node2.index}] || (`);
      if (node2.isVNode) {
        indent2();
        push(`${helper(SET_BLOCK_TRACKING2)}(-1),`);
        newline();
      }
      push(`_cache[${node2.index}] = `);
      genNode2(node2.value, context);
      if (node2.isVNode) {
        push(`,`);
        newline();
        push(`${helper(SET_BLOCK_TRACKING2)}(1),`);
        newline();
        push(`_cache[${node2.index}]`);
        deindent();
      }
      push(`)`);
    }
    function genTemplateLiteral2(node2, context) {
      const { push, indent: indent2, deindent } = context;
      push("`");
      const l = node2.elements.length;
      const multilines = l > 3;
      for (let i = 0; i < l; i++) {
        const e = node2.elements[i];
        if (shared.isString(e)) {
          push(e.replace(/(`|\$|\\)/g, "\\$1"));
        } else {
          push("${");
          if (multilines)
            indent2();
          genNode2(e, context);
          if (multilines)
            deindent();
          push("}");
        }
      }
      push("`");
    }
    function genIfStatement2(node2, context) {
      const { push, indent: indent2, deindent } = context;
      const { test, consequent, alternate } = node2;
      push(`if (`);
      genNode2(test, context);
      push(`) {`);
      indent2();
      genNode2(consequent, context);
      deindent();
      push(`}`);
      if (alternate) {
        push(` else `);
        if (alternate.type === 23) {
          genIfStatement2(alternate, context);
        } else {
          push(`{`);
          indent2();
          genNode2(alternate, context);
          deindent();
          push(`}`);
        }
      }
    }
    function genAssignmentExpression2(node2, context) {
      genNode2(node2.left, context);
      context.push(` = `);
      genNode2(node2.right, context);
    }
    function genSequenceExpression2(node2, context) {
      context.push(`(`);
      genNodeList2(node2.expressions, context);
      context.push(`)`);
    }
    function genReturnStatement2({ returns }, context) {
      context.push(`return `);
      if (shared.isArray(returns)) {
        genNodeListAsArray2(returns, context);
      } else {
        genNode2(returns, context);
      }
    }
    function walkIdentifiers2(root2, onIdentifier, includeAll = false, parentStack = [], knownIds = /* @__PURE__ */ Object.create(null)) {
      const rootExp = root2.type === "Program" && root2.body[0].type === "ExpressionStatement" && root2.body[0].expression;
      estreeWalker.walk(root2, {
        enter(node2, parent) {
          parent && parentStack.push(parent);
          if (parent && parent.type.startsWith("TS") && parent.type !== "TSAsExpression" && parent.type !== "TSNonNullExpression" && parent.type !== "TSTypeAssertion") {
            return this.skip();
          }
          if (node2.type === "Identifier") {
            const isLocal = !!knownIds[node2.name];
            const isRefed = isReferencedIdentifier2(node2, parent, parentStack);
            if (includeAll || isRefed && !isLocal) {
              onIdentifier(node2, parent, parentStack, isRefed, isLocal);
            }
          } else if (node2.type === "ObjectProperty" && parent.type === "ObjectPattern") {
            node2.inPattern = true;
          } else if (isFunctionType2(node2)) {
            walkFunctionParams2(node2, (id2) => markScopeIdentifier2(node2, id2, knownIds));
          } else if (node2.type === "BlockStatement") {
            walkBlockDeclarations2(node2, (id2) => markScopeIdentifier2(node2, id2, knownIds));
          }
        },
        leave(node2, parent) {
          parent && parentStack.pop();
          if (node2 !== rootExp && node2.scopeIds) {
            for (const id2 of node2.scopeIds) {
              knownIds[id2]--;
              if (knownIds[id2] === 0) {
                delete knownIds[id2];
              }
            }
          }
        }
      });
    }
    function isReferencedIdentifier2(id2, parent, parentStack) {
      if (!parent) {
        return true;
      }
      if (id2.name === "arguments") {
        return false;
      }
      if (isReferenced2(id2, parent)) {
        return true;
      }
      switch (parent.type) {
        case "AssignmentExpression":
        case "AssignmentPattern":
          return true;
        case "ObjectPattern":
        case "ArrayPattern":
          return isInDestructureAssignment2(parent, parentStack);
      }
      return false;
    }
    function isInDestructureAssignment2(parent, parentStack) {
      if (parent && (parent.type === "ObjectProperty" || parent.type === "ArrayPattern")) {
        let i = parentStack.length;
        while (i--) {
          const p = parentStack[i];
          if (p.type === "AssignmentExpression") {
            return true;
          } else if (p.type !== "ObjectProperty" && !p.type.endsWith("Pattern")) {
            break;
          }
        }
      }
      return false;
    }
    function walkFunctionParams2(node2, onIdent) {
      for (const p of node2.params) {
        for (const id2 of extractIdentifiers2(p)) {
          onIdent(id2);
        }
      }
    }
    function walkBlockDeclarations2(block, onIdent) {
      for (const stmt of block.body) {
        if (stmt.type === "VariableDeclaration") {
          if (stmt.declare)
            continue;
          for (const decl of stmt.declarations) {
            for (const id2 of extractIdentifiers2(decl.id)) {
              onIdent(id2);
            }
          }
        } else if (stmt.type === "FunctionDeclaration" || stmt.type === "ClassDeclaration") {
          if (stmt.declare || !stmt.id)
            continue;
          onIdent(stmt.id);
        }
      }
    }
    function extractIdentifiers2(param, nodes = []) {
      switch (param.type) {
        case "Identifier":
          nodes.push(param);
          break;
        case "MemberExpression":
          let object2 = param;
          while (object2.type === "MemberExpression") {
            object2 = object2.object;
          }
          nodes.push(object2);
          break;
        case "ObjectPattern":
          for (const prop of param.properties) {
            if (prop.type === "RestElement") {
              extractIdentifiers2(prop.argument, nodes);
            } else {
              extractIdentifiers2(prop.value, nodes);
            }
          }
          break;
        case "ArrayPattern":
          param.elements.forEach((element) => {
            if (element)
              extractIdentifiers2(element, nodes);
          });
          break;
        case "RestElement":
          extractIdentifiers2(param.argument, nodes);
          break;
        case "AssignmentPattern":
          extractIdentifiers2(param.left, nodes);
          break;
      }
      return nodes;
    }
    function markScopeIdentifier2(node2, child, knownIds) {
      const { name } = child;
      if (node2.scopeIds && node2.scopeIds.has(name)) {
        return;
      }
      if (name in knownIds) {
        knownIds[name]++;
      } else {
        knownIds[name] = 1;
      }
      (node2.scopeIds || (node2.scopeIds = /* @__PURE__ */ new Set())).add(name);
    }
    var isFunctionType2 = (node2) => {
      return /Function(?:Expression|Declaration)$|Method$/.test(node2.type);
    };
    var isStaticProperty2 = (node2) => node2 && (node2.type === "ObjectProperty" || node2.type === "ObjectMethod") && !node2.computed;
    var isStaticPropertyKey2 = (node2, parent) => isStaticProperty2(parent) && parent.key === node2;
    function isReferenced2(node2, parent, grandparent) {
      switch (parent.type) {
        case "MemberExpression":
        case "OptionalMemberExpression":
          if (parent.property === node2) {
            return !!parent.computed;
          }
          return parent.object === node2;
        case "JSXMemberExpression":
          return parent.object === node2;
        case "VariableDeclarator":
          return parent.init === node2;
        case "ArrowFunctionExpression":
          return parent.body === node2;
        case "PrivateName":
          return false;
        case "ClassMethod":
        case "ClassPrivateMethod":
        case "ObjectMethod":
          if (parent.key === node2) {
            return !!parent.computed;
          }
          return false;
        case "ObjectProperty":
          if (parent.key === node2) {
            return !!parent.computed;
          }
          return !grandparent || grandparent.type !== "ObjectPattern";
        case "ClassProperty":
          if (parent.key === node2) {
            return !!parent.computed;
          }
          return true;
        case "ClassPrivateProperty":
          return parent.key !== node2;
        case "ClassDeclaration":
        case "ClassExpression":
          return parent.superClass === node2;
        case "AssignmentExpression":
          return parent.right === node2;
        case "AssignmentPattern":
          return parent.right === node2;
        case "LabeledStatement":
          return false;
        case "CatchClause":
          return false;
        case "RestElement":
          return false;
        case "BreakStatement":
        case "ContinueStatement":
          return false;
        case "FunctionDeclaration":
        case "FunctionExpression":
          return false;
        case "ExportNamespaceSpecifier":
        case "ExportDefaultSpecifier":
          return false;
        case "ExportSpecifier":
          if (grandparent === null || grandparent === void 0 ? void 0 : grandparent.source) {
            return false;
          }
          return parent.local === node2;
        case "ImportDefaultSpecifier":
        case "ImportNamespaceSpecifier":
        case "ImportSpecifier":
          return false;
        case "ImportAttribute":
          return false;
        case "JSXAttribute":
          return false;
        case "ObjectPattern":
        case "ArrayPattern":
          return false;
        case "MetaProperty":
          return false;
        case "ObjectTypeProperty":
          return parent.key !== node2;
        case "TSEnumMember":
          return parent.id !== node2;
        case "TSPropertySignature":
          if (parent.key === node2) {
            return !!parent.computed;
          }
          return true;
      }
      return true;
    }
    var isLiteralWhitelisted2 = /* @__PURE__ */ shared.makeMap("true,false,null,this");
    var transformExpression2 = (node2, context) => {
      if (node2.type === 5) {
        node2.content = processExpression2(node2.content, context);
      } else if (node2.type === 1) {
        for (let i = 0; i < node2.props.length; i++) {
          const dir = node2.props[i];
          if (dir.type === 7 && dir.name !== "for") {
            const exp = dir.exp;
            const arg = dir.arg;
            if (exp && exp.type === 4 && !(dir.name === "on" && arg)) {
              dir.exp = processExpression2(exp, context, dir.name === "slot");
            }
            if (arg && arg.type === 4 && !arg.isStatic) {
              dir.arg = processExpression2(arg, context);
            }
          }
        }
      }
    };
    function processExpression2(node2, context, asParams = false, asRawStatements = false, localVars = Object.create(context.identifiers)) {
      if (!context.prefixIdentifiers || !node2.content.trim()) {
        return node2;
      }
      const { inline, bindingMetadata } = context;
      const rewriteIdentifier = (raw, parent, id2) => {
        const type = shared.hasOwn(bindingMetadata, raw) && bindingMetadata[raw];
        if (inline) {
          const isAssignmentLVal = parent && parent.type === "AssignmentExpression" && parent.left === id2;
          const isUpdateArg = parent && parent.type === "UpdateExpression" && parent.argument === id2;
          const isDestructureAssignment = parent && isInDestructureAssignment2(parent, parentStack);
          if (type === "setup-const" || localVars[raw]) {
            return raw;
          } else if (type === "setup-ref") {
            return `${raw}.value`;
          } else if (type === "setup-maybe-ref") {
            return isAssignmentLVal || isUpdateArg || isDestructureAssignment ? `${raw}.value` : `${context.helperString(UNREF2)}(${raw})`;
          } else if (type === "setup-let") {
            if (isAssignmentLVal) {
              const { right: rVal, operator } = parent;
              const rExp = rawExp.slice(rVal.start - 1, rVal.end - 1);
              const rExpString = stringifyExpression2(processExpression2(createSimpleExpression2(rExp, false), context, false, false, knownIds));
              return `${context.helperString(IS_REF2)}(${raw})${context.isTS ? ` //@ts-ignore
` : ``} ? ${raw}.value ${operator} ${rExpString} : ${raw}`;
            } else if (isUpdateArg) {
              id2.start = parent.start;
              id2.end = parent.end;
              const { prefix: isPrefix, operator } = parent;
              const prefix2 = isPrefix ? operator : ``;
              const postfix2 = isPrefix ? `` : operator;
              return `${context.helperString(IS_REF2)}(${raw})${context.isTS ? ` //@ts-ignore
` : ``} ? ${prefix2}${raw}.value${postfix2} : ${prefix2}${raw}${postfix2}`;
            } else if (isDestructureAssignment) {
              return raw;
            } else {
              return `${context.helperString(UNREF2)}(${raw})`;
            }
          } else if (type === "props") {
            return `__props.${raw}`;
          } else if (type === "props-aliased") {
            return `__props.${bindingMetadata.__propsAliases[raw]}`;
          }
        } else {
          if (type && type.startsWith("setup")) {
            return `$setup.${raw}`;
          } else if (type === "props-aliased") {
            return `$props.${bindingMetadata.__propsAliases[raw]}`;
          } else if (type) {
            return `$${type}.${raw}`;
          }
        }
        return `_ctx.${raw}`;
      };
      const rawExp = node2.content;
      const bailConstant = rawExp.indexOf(`(`) > -1 || rawExp.indexOf(".") > 0;
      if (isSimpleIdentifier2(rawExp)) {
        const isScopeVarReference = context.identifiers[rawExp];
        const isAllowedGlobal = shared.isGloballyWhitelisted(rawExp);
        const isLiteral = isLiteralWhitelisted2(rawExp);
        if (!asParams && !isScopeVarReference && !isAllowedGlobal && !isLiteral) {
          if (bindingMetadata[node2.content] === "setup-const") {
            node2.constType = 1;
          }
          node2.content = rewriteIdentifier(rawExp);
        } else if (!isScopeVarReference) {
          if (isLiteral) {
            node2.constType = 3;
          } else {
            node2.constType = 2;
          }
        }
        return node2;
      }
      let ast;
      const source = asRawStatements ? ` ${rawExp} ` : `(${rawExp})${asParams ? `=>{}` : ``}`;
      try {
        ast = parser2.parse(source, {
          plugins: context.expressionPlugins
        }).program;
      } catch (e) {
        context.onError(createCompilerError2(44, node2.loc, void 0, e.message));
        return node2;
      }
      const ids = [];
      const parentStack = [];
      const knownIds = Object.create(context.identifiers);
      walkIdentifiers2(ast, (node3, parent, _, isReferenced3, isLocal) => {
        if (isStaticPropertyKey2(node3, parent)) {
          return;
        }
        if (node3.name.startsWith("_filter_")) {
          return;
        }
        const needPrefix = isReferenced3 && canPrefix2(node3);
        if (needPrefix && !isLocal) {
          if (isStaticProperty2(parent) && parent.shorthand) {
            node3.prefix = `${node3.name}: `;
          }
          node3.name = rewriteIdentifier(node3.name, parent, node3);
          ids.push(node3);
        } else {
          if (!(needPrefix && isLocal) && !bailConstant) {
            node3.isConstant = true;
          }
          ids.push(node3);
        }
      }, true, parentStack, knownIds);
      const children = [];
      ids.sort((a, b) => a.start - b.start);
      ids.forEach((id2, i) => {
        const start = id2.start - 1;
        const end = id2.end - 1;
        const last3 = ids[i - 1];
        const leadingText = rawExp.slice(last3 ? last3.end - 1 : 0, start);
        if (leadingText.length || id2.prefix) {
          children.push(leadingText + (id2.prefix || ``));
        }
        const source2 = rawExp.slice(start, end);
        children.push(createSimpleExpression2(id2.name, false, {
          source: source2,
          start: advancePositionWithClone2(node2.loc.start, source2, start),
          end: advancePositionWithClone2(node2.loc.start, source2, end)
        }, id2.isConstant ? 3 : 0));
        if (i === ids.length - 1 && end < rawExp.length) {
          children.push(rawExp.slice(end));
        }
      });
      let ret;
      if (children.length) {
        ret = createCompoundExpression2(children, node2.loc);
      } else {
        ret = node2;
        ret.constType = bailConstant ? 0 : 3;
      }
      ret.identifiers = Object.keys(knownIds);
      return ret;
    }
    function canPrefix2(id2) {
      if (shared.isGloballyWhitelisted(id2.name)) {
        return false;
      }
      if (id2.name === "require") {
        return false;
      }
      return true;
    }
    function stringifyExpression2(exp) {
      if (shared.isString(exp)) {
        return exp;
      } else if (exp.type === 4) {
        return exp.content;
      } else {
        return exp.children.map(stringifyExpression2).join("");
      }
    }
    var transformIf2 = createStructuralDirectiveTransform2(/^(if|else|else-if)$/, (node2, dir, context) => {
      return processIf2(node2, dir, context, (ifNode, branch, isRoot) => {
        const siblings = context.parent.children;
        let i = siblings.indexOf(ifNode);
        let key = 0;
        while (i-- >= 0) {
          const sibling = siblings[i];
          if (sibling && sibling.type === 9) {
            key += sibling.branches.length;
          }
        }
        return () => {
          if (isRoot) {
            ifNode.codegenNode = createCodegenNodeForBranch2(branch, key, context);
          } else {
            const parentCondition = getParentCondition2(ifNode.codegenNode);
            parentCondition.alternate = createCodegenNodeForBranch2(branch, key + ifNode.branches.length - 1, context);
          }
        };
      });
    });
    function processIf2(node2, dir, context, processCodegen) {
      if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
        const loc = dir.exp ? dir.exp.loc : node2.loc;
        context.onError(createCompilerError2(28, dir.loc));
        dir.exp = createSimpleExpression2(`true`, false, loc);
      }
      if (context.prefixIdentifiers && dir.exp) {
        dir.exp = processExpression2(dir.exp, context);
      }
      if (dir.name === "if") {
        const branch = createIfBranch2(node2, dir);
        const ifNode = {
          type: 9,
          loc: node2.loc,
          branches: [branch]
        };
        context.replaceNode(ifNode);
        if (processCodegen) {
          return processCodegen(ifNode, branch, true);
        }
      } else {
        const siblings = context.parent.children;
        const comments = [];
        let i = siblings.indexOf(node2);
        while (i-- >= -1) {
          const sibling = siblings[i];
          if (sibling && sibling.type === 3) {
            context.removeNode(sibling);
            comments.unshift(sibling);
            continue;
          }
          if (sibling && sibling.type === 2 && !sibling.content.trim().length) {
            context.removeNode(sibling);
            continue;
          }
          if (sibling && sibling.type === 9) {
            if (dir.name === "else-if" && sibling.branches[sibling.branches.length - 1].condition === void 0) {
              context.onError(createCompilerError2(30, node2.loc));
            }
            context.removeNode();
            const branch = createIfBranch2(node2, dir);
            if (comments.length && !(context.parent && context.parent.type === 1 && isBuiltInType2(context.parent.tag, "transition"))) {
              branch.children = [...comments, ...branch.children];
            }
            {
              const key = branch.userKey;
              if (key) {
                sibling.branches.forEach(({ userKey }) => {
                  if (isSameKey2(userKey, key)) {
                    context.onError(createCompilerError2(29, branch.userKey.loc));
                  }
                });
              }
            }
            sibling.branches.push(branch);
            const onExit = processCodegen && processCodegen(sibling, branch, false);
            traverseNode2(branch, context);
            if (onExit)
              onExit();
            context.currentNode = null;
          } else {
            context.onError(createCompilerError2(30, node2.loc));
          }
          break;
        }
      }
    }
    function createIfBranch2(node2, dir) {
      return {
        type: 10,
        loc: node2.loc,
        condition: dir.name === "else" ? void 0 : dir.exp,
        children: node2.tagType === 3 && !findDir2(node2, "for") ? node2.children : [node2],
        userKey: findProp2(node2, `key`)
      };
    }
    function createCodegenNodeForBranch2(branch, keyIndex, context) {
      if (branch.condition) {
        return createConditionalExpression2(branch.condition, createChildrenCodegenNode2(branch, keyIndex, context), createCallExpression2(context.helper(CREATE_COMMENT2), [
          '"v-if"',
          "true"
        ]));
      } else {
        return createChildrenCodegenNode2(branch, keyIndex, context);
      }
    }
    function createChildrenCodegenNode2(branch, keyIndex, context) {
      const { helper } = context;
      const keyProperty = createObjectProperty2(`key`, createSimpleExpression2(`${keyIndex}`, false, locStub2, 2));
      const { children } = branch;
      const firstChild = children[0];
      const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1;
      if (needFragmentWrapper) {
        if (children.length === 1 && firstChild.type === 11) {
          const vnodeCall = firstChild.codegenNode;
          injectProp2(vnodeCall, keyProperty, context);
          return vnodeCall;
        } else {
          let patchFlag = 64;
          let patchFlagText = shared.PatchFlagNames[64];
          if (children.filter((c) => c.type !== 3).length === 1) {
            patchFlag |= 2048;
            patchFlagText += `, ${shared.PatchFlagNames[2048]}`;
          }
          return createVNodeCall2(context, helper(FRAGMENT2), createObjectExpression2([keyProperty]), children, patchFlag + ` /* ${patchFlagText} */`, void 0, void 0, true, false, false, branch.loc);
        }
      } else {
        const ret = firstChild.codegenNode;
        const vnodeCall = getMemoedVNodeCall2(ret);
        if (vnodeCall.type === 13) {
          makeBlock2(vnodeCall, context);
        }
        injectProp2(vnodeCall, keyProperty, context);
        return ret;
      }
    }
    function isSameKey2(a, b) {
      if (!a || a.type !== b.type) {
        return false;
      }
      if (a.type === 6) {
        if (a.value.content !== b.value.content) {
          return false;
        }
      } else {
        const exp = a.exp;
        const branchExp = b.exp;
        if (exp.type !== branchExp.type) {
          return false;
        }
        if (exp.type !== 4 || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) {
          return false;
        }
      }
      return true;
    }
    function getParentCondition2(node2) {
      while (true) {
        if (node2.type === 19) {
          if (node2.alternate.type === 19) {
            node2 = node2.alternate;
          } else {
            return node2;
          }
        } else if (node2.type === 20) {
          node2 = node2.value;
        }
      }
    }
    var transformFor2 = createStructuralDirectiveTransform2("for", (node2, dir, context) => {
      const { helper, removeHelper } = context;
      return processFor2(node2, dir, context, (forNode) => {
        const renderExp = createCallExpression2(helper(RENDER_LIST2), [
          forNode.source
        ]);
        const isTemplate = isTemplateNode2(node2);
        const memo = findDir2(node2, "memo");
        const keyProp = findProp2(node2, `key`);
        const keyExp = keyProp && (keyProp.type === 6 ? createSimpleExpression2(keyProp.value.content, true) : keyProp.exp);
        const keyProperty = keyProp ? createObjectProperty2(`key`, keyExp) : null;
        if (isTemplate) {
          if (memo) {
            memo.exp = processExpression2(memo.exp, context);
          }
          if (keyProperty && keyProp.type !== 6) {
            keyProperty.value = processExpression2(keyProperty.value, context);
          }
        }
        const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;
        const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;
        forNode.codegenNode = createVNodeCall2(context, helper(FRAGMENT2), void 0, renderExp, fragmentFlag + ` /* ${shared.PatchFlagNames[fragmentFlag]} */`, void 0, void 0, true, !isStableFragment, false, node2.loc);
        return () => {
          let childBlock;
          const { children } = forNode;
          if (isTemplate) {
            node2.children.some((c) => {
              if (c.type === 1) {
                const key = findProp2(c, "key");
                if (key) {
                  context.onError(createCompilerError2(33, key.loc));
                  return true;
                }
              }
            });
          }
          const needFragmentWrapper = children.length !== 1 || children[0].type !== 1;
          const slotOutlet = isSlotOutlet2(node2) ? node2 : isTemplate && node2.children.length === 1 && isSlotOutlet2(node2.children[0]) ? node2.children[0] : null;
          if (slotOutlet) {
            childBlock = slotOutlet.codegenNode;
            if (isTemplate && keyProperty) {
              injectProp2(childBlock, keyProperty, context);
            }
          } else if (needFragmentWrapper) {
            childBlock = createVNodeCall2(context, helper(FRAGMENT2), keyProperty ? createObjectExpression2([keyProperty]) : void 0, node2.children, 64 + ` /* ${shared.PatchFlagNames[64]} */`, void 0, void 0, true, void 0, false);
          } else {
            childBlock = children[0].codegenNode;
            if (isTemplate && keyProperty) {
              injectProp2(childBlock, keyProperty, context);
            }
            if (childBlock.isBlock !== !isStableFragment) {
              if (childBlock.isBlock) {
                removeHelper(OPEN_BLOCK2);
                removeHelper(getVNodeBlockHelper2(context.inSSR, childBlock.isComponent));
              } else {
                removeHelper(getVNodeHelper2(context.inSSR, childBlock.isComponent));
              }
            }
            childBlock.isBlock = !isStableFragment;
            if (childBlock.isBlock) {
              helper(OPEN_BLOCK2);
              helper(getVNodeBlockHelper2(context.inSSR, childBlock.isComponent));
            } else {
              helper(getVNodeHelper2(context.inSSR, childBlock.isComponent));
            }
          }
          if (memo) {
            const loop = createFunctionExpression2(createForLoopParams2(forNode.parseResult, [
              createSimpleExpression2(`_cached`)
            ]));
            loop.body = createBlockStatement2([
              createCompoundExpression2([`const _memo = (`, memo.exp, `)`]),
              createCompoundExpression2([
                `if (_cached`,
                ...keyExp ? [` && _cached.key === `, keyExp] : [],
                ` && ${context.helperString(IS_MEMO_SAME2)}(_cached, _memo)) return _cached`
              ]),
              createCompoundExpression2([`const _item = `, childBlock]),
              createSimpleExpression2(`_item.memo = _memo`),
              createSimpleExpression2(`return _item`)
            ]);
            renderExp.arguments.push(loop, createSimpleExpression2(`_cache`), createSimpleExpression2(String(context.cached++)));
          } else {
            renderExp.arguments.push(createFunctionExpression2(createForLoopParams2(forNode.parseResult), childBlock, true));
          }
        };
      });
    });
    function processFor2(node2, dir, context, processCodegen) {
      if (!dir.exp) {
        context.onError(createCompilerError2(31, dir.loc));
        return;
      }
      const parseResult = parseForExpression2(dir.exp, context);
      if (!parseResult) {
        context.onError(createCompilerError2(32, dir.loc));
        return;
      }
      const { addIdentifiers, removeIdentifiers, scopes } = context;
      const { source, value, key, index } = parseResult;
      const forNode = {
        type: 11,
        loc: dir.loc,
        source,
        valueAlias: value,
        keyAlias: key,
        objectIndexAlias: index,
        parseResult,
        children: isTemplateNode2(node2) ? node2.children : [node2]
      };
      context.replaceNode(forNode);
      scopes.vFor++;
      if (context.prefixIdentifiers) {
        value && addIdentifiers(value);
        key && addIdentifiers(key);
        index && addIdentifiers(index);
      }
      const onExit = processCodegen && processCodegen(forNode);
      return () => {
        scopes.vFor--;
        if (context.prefixIdentifiers) {
          value && removeIdentifiers(value);
          key && removeIdentifiers(key);
          index && removeIdentifiers(index);
        }
        if (onExit)
          onExit();
      };
    }
    var forAliasRE2 = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
    var forIteratorRE2 = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
    var stripParensRE2 = /^\(|\)$/g;
    function parseForExpression2(input2, context) {
      const loc = input2.loc;
      const exp = input2.content;
      const inMatch = exp.match(forAliasRE2);
      if (!inMatch)
        return;
      const [, LHS, RHS] = inMatch;
      const result2 = {
        source: createAliasExpression2(loc, RHS.trim(), exp.indexOf(RHS, LHS.length)),
        value: void 0,
        key: void 0,
        index: void 0
      };
      if (context.prefixIdentifiers) {
        result2.source = processExpression2(result2.source, context);
      }
      let valueContent = LHS.trim().replace(stripParensRE2, "").trim();
      const trimmedOffset = LHS.indexOf(valueContent);
      const iteratorMatch = valueContent.match(forIteratorRE2);
      if (iteratorMatch) {
        valueContent = valueContent.replace(forIteratorRE2, "").trim();
        const keyContent = iteratorMatch[1].trim();
        let keyOffset;
        if (keyContent) {
          keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
          result2.key = createAliasExpression2(loc, keyContent, keyOffset);
          if (context.prefixIdentifiers) {
            result2.key = processExpression2(result2.key, context, true);
          }
        }
        if (iteratorMatch[2]) {
          const indexContent = iteratorMatch[2].trim();
          if (indexContent) {
            result2.index = createAliasExpression2(loc, indexContent, exp.indexOf(indexContent, result2.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length));
            if (context.prefixIdentifiers) {
              result2.index = processExpression2(result2.index, context, true);
            }
          }
        }
      }
      if (valueContent) {
        result2.value = createAliasExpression2(loc, valueContent, trimmedOffset);
        if (context.prefixIdentifiers) {
          result2.value = processExpression2(result2.value, context, true);
        }
      }
      return result2;
    }
    function createAliasExpression2(range2, content, offset) {
      return createSimpleExpression2(content, false, getInnerRange2(range2, offset, content.length));
    }
    function createForLoopParams2({ value, key, index }, memoArgs = []) {
      return createParamsList2([value, key, index, ...memoArgs]);
    }
    function createParamsList2(args) {
      let i = args.length;
      while (i--) {
        if (args[i])
          break;
      }
      return args.slice(0, i + 1).map((arg, i2) => arg || createSimpleExpression2(`_`.repeat(i2 + 1), false));
    }
    var defaultFallback2 = createSimpleExpression2(`undefined`, false);
    var trackSlotScopes2 = (node2, context) => {
      if (node2.type === 1 && (node2.tagType === 1 || node2.tagType === 3)) {
        const vSlot = findDir2(node2, "slot");
        if (vSlot) {
          const slotProps = vSlot.exp;
          if (context.prefixIdentifiers) {
            slotProps && context.addIdentifiers(slotProps);
          }
          context.scopes.vSlot++;
          return () => {
            if (context.prefixIdentifiers) {
              slotProps && context.removeIdentifiers(slotProps);
            }
            context.scopes.vSlot--;
          };
        }
      }
    };
    var trackVForSlotScopes2 = (node2, context) => {
      let vFor;
      if (isTemplateNode2(node2) && node2.props.some(isVSlot2) && (vFor = findDir2(node2, "for"))) {
        const result2 = vFor.parseResult = parseForExpression2(vFor.exp, context);
        if (result2) {
          const { value, key, index } = result2;
          const { addIdentifiers, removeIdentifiers } = context;
          value && addIdentifiers(value);
          key && addIdentifiers(key);
          index && addIdentifiers(index);
          return () => {
            value && removeIdentifiers(value);
            key && removeIdentifiers(key);
            index && removeIdentifiers(index);
          };
        }
      }
    };
    var buildClientSlotFn2 = (props, children, loc) => createFunctionExpression2(props, children, false, true, children.length ? children[0].loc : loc);
    function buildSlots2(node2, context, buildSlotFn = buildClientSlotFn2) {
      context.helper(WITH_CTX2);
      const { children, loc } = node2;
      const slotsProperties = [];
      const dynamicSlots = [];
      let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
      if (!context.ssr && context.prefixIdentifiers) {
        hasDynamicSlots = hasScopeRef2(node2, context.identifiers);
      }
      const onComponentSlot = findDir2(node2, "slot", true);
      if (onComponentSlot) {
        const { arg, exp } = onComponentSlot;
        if (arg && !isStaticExp2(arg)) {
          hasDynamicSlots = true;
        }
        slotsProperties.push(createObjectProperty2(arg || createSimpleExpression2("default", true), buildSlotFn(exp, children, loc)));
      }
      let hasTemplateSlots = false;
      let hasNamedDefaultSlot = false;
      const implicitDefaultChildren = [];
      const seenSlotNames = /* @__PURE__ */ new Set();
      for (let i = 0; i < children.length; i++) {
        const slotElement = children[i];
        let slotDir;
        if (!isTemplateNode2(slotElement) || !(slotDir = findDir2(slotElement, "slot", true))) {
          if (slotElement.type !== 3) {
            implicitDefaultChildren.push(slotElement);
          }
          continue;
        }
        if (onComponentSlot) {
          context.onError(createCompilerError2(37, slotDir.loc));
          break;
        }
        hasTemplateSlots = true;
        const { children: slotChildren, loc: slotLoc } = slotElement;
        const { arg: slotName = createSimpleExpression2(`default`, true), exp: slotProps, loc: dirLoc } = slotDir;
        let staticSlotName;
        if (isStaticExp2(slotName)) {
          staticSlotName = slotName ? slotName.content : `default`;
        } else {
          hasDynamicSlots = true;
        }
        const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);
        let vIf;
        let vElse;
        let vFor;
        if (vIf = findDir2(slotElement, "if")) {
          hasDynamicSlots = true;
          dynamicSlots.push(createConditionalExpression2(vIf.exp, buildDynamicSlot2(slotName, slotFunction), defaultFallback2));
        } else if (vElse = findDir2(slotElement, /^else(-if)?$/, true)) {
          let j = i;
          let prev;
          while (j--) {
            prev = children[j];
            if (prev.type !== 3) {
              break;
            }
          }
          if (prev && isTemplateNode2(prev) && findDir2(prev, "if")) {
            children.splice(i, 1);
            i--;
            let conditional = dynamicSlots[dynamicSlots.length - 1];
            while (conditional.alternate.type === 19) {
              conditional = conditional.alternate;
            }
            conditional.alternate = vElse.exp ? createConditionalExpression2(vElse.exp, buildDynamicSlot2(slotName, slotFunction), defaultFallback2) : buildDynamicSlot2(slotName, slotFunction);
          } else {
            context.onError(createCompilerError2(30, vElse.loc));
          }
        } else if (vFor = findDir2(slotElement, "for")) {
          hasDynamicSlots = true;
          const parseResult = vFor.parseResult || parseForExpression2(vFor.exp, context);
          if (parseResult) {
            dynamicSlots.push(createCallExpression2(context.helper(RENDER_LIST2), [
              parseResult.source,
              createFunctionExpression2(createForLoopParams2(parseResult), buildDynamicSlot2(slotName, slotFunction), true)
            ]));
          } else {
            context.onError(createCompilerError2(32, vFor.loc));
          }
        } else {
          if (staticSlotName) {
            if (seenSlotNames.has(staticSlotName)) {
              context.onError(createCompilerError2(38, dirLoc));
              continue;
            }
            seenSlotNames.add(staticSlotName);
            if (staticSlotName === "default") {
              hasNamedDefaultSlot = true;
            }
          }
          slotsProperties.push(createObjectProperty2(slotName, slotFunction));
        }
      }
      if (!onComponentSlot) {
        const buildDefaultSlotProperty = (props, children2) => {
          const fn = buildSlotFn(props, children2, loc);
          if (context.compatConfig) {
            fn.isNonScopedSlot = true;
          }
          return createObjectProperty2(`default`, fn);
        };
        if (!hasTemplateSlots) {
          slotsProperties.push(buildDefaultSlotProperty(void 0, children));
        } else if (implicitDefaultChildren.length && implicitDefaultChildren.some((node3) => isNonWhitespaceContent2(node3))) {
          if (hasNamedDefaultSlot) {
            context.onError(createCompilerError2(39, implicitDefaultChildren[0].loc));
          } else {
            slotsProperties.push(buildDefaultSlotProperty(void 0, implicitDefaultChildren));
          }
        }
      }
      const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots2(node2.children) ? 3 : 1;
      let slots = createObjectExpression2(slotsProperties.concat(createObjectProperty2(`_`, createSimpleExpression2(slotFlag + ` /* ${shared.slotFlagsText[slotFlag]} */`, false))), loc);
      if (dynamicSlots.length) {
        slots = createCallExpression2(context.helper(CREATE_SLOTS2), [
          slots,
          createArrayExpression2(dynamicSlots)
        ]);
      }
      return {
        slots,
        hasDynamicSlots
      };
    }
    function buildDynamicSlot2(name, fn) {
      return createObjectExpression2([
        createObjectProperty2(`name`, name),
        createObjectProperty2(`fn`, fn)
      ]);
    }
    function hasForwardedSlots2(children) {
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        switch (child.type) {
          case 1:
            if (child.tagType === 2 || hasForwardedSlots2(child.children)) {
              return true;
            }
            break;
          case 9:
            if (hasForwardedSlots2(child.branches))
              return true;
            break;
          case 10:
          case 11:
            if (hasForwardedSlots2(child.children))
              return true;
            break;
        }
      }
      return false;
    }
    function isNonWhitespaceContent2(node2) {
      if (node2.type !== 2 && node2.type !== 12)
        return true;
      return node2.type === 2 ? !!node2.content.trim() : isNonWhitespaceContent2(node2.content);
    }
    var directiveImportMap2 = /* @__PURE__ */ new WeakMap();
    var transformElement2 = (node2, context) => {
      return function postTransformElement() {
        node2 = context.currentNode;
        if (!(node2.type === 1 && (node2.tagType === 0 || node2.tagType === 1))) {
          return;
        }
        const { tag: tag2, props } = node2;
        const isComponent3 = node2.tagType === 1;
        let vnodeTag = isComponent3 ? resolveComponentType2(node2, context) : `"${tag2}"`;
        const isDynamicComponent = shared.isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT2;
        let vnodeProps;
        let vnodeChildren;
        let vnodePatchFlag;
        let patchFlag = 0;
        let vnodeDynamicProps;
        let dynamicPropNames;
        let vnodeDirectives;
        let shouldUseBlock = isDynamicComponent || vnodeTag === TELEPORT2 || vnodeTag === SUSPENSE2 || !isComponent3 && (tag2 === "svg" || tag2 === "foreignObject");
        if (props.length > 0) {
          const propsBuildResult = buildProps2(node2, context);
          vnodeProps = propsBuildResult.props;
          patchFlag = propsBuildResult.patchFlag;
          dynamicPropNames = propsBuildResult.dynamicPropNames;
          const directives = propsBuildResult.directives;
          vnodeDirectives = directives && directives.length ? createArrayExpression2(directives.map((dir) => buildDirectiveArgs2(dir, context))) : void 0;
          if (propsBuildResult.shouldUseBlock) {
            shouldUseBlock = true;
          }
        }
        if (node2.children.length > 0) {
          if (vnodeTag === KEEP_ALIVE2) {
            shouldUseBlock = true;
            patchFlag |= 1024;
            if (node2.children.length > 1) {
              context.onError(createCompilerError2(45, {
                start: node2.children[0].loc.start,
                end: node2.children[node2.children.length - 1].loc.end,
                source: ""
              }));
            }
          }
          const shouldBuildAsSlots = isComponent3 && vnodeTag !== TELEPORT2 && vnodeTag !== KEEP_ALIVE2;
          if (shouldBuildAsSlots) {
            const { slots, hasDynamicSlots } = buildSlots2(node2, context);
            vnodeChildren = slots;
            if (hasDynamicSlots) {
              patchFlag |= 1024;
            }
          } else if (node2.children.length === 1 && vnodeTag !== TELEPORT2) {
            const child = node2.children[0];
            const type = child.type;
            const hasDynamicTextChild = type === 5 || type === 8;
            if (hasDynamicTextChild && getConstantType2(child, context) === 0) {
              patchFlag |= 1;
            }
            if (hasDynamicTextChild || type === 2) {
              vnodeChildren = child;
            } else {
              vnodeChildren = node2.children;
            }
          } else {
            vnodeChildren = node2.children;
          }
        }
        if (patchFlag !== 0) {
          {
            if (patchFlag < 0) {
              vnodePatchFlag = patchFlag + ` /* ${shared.PatchFlagNames[patchFlag]} */`;
            } else {
              const flagNames = Object.keys(shared.PatchFlagNames).map(Number).filter((n2) => n2 > 0 && patchFlag & n2).map((n2) => shared.PatchFlagNames[n2]).join(`, `);
              vnodePatchFlag = patchFlag + ` /* ${flagNames} */`;
            }
          }
          if (dynamicPropNames && dynamicPropNames.length) {
            vnodeDynamicProps = stringifyDynamicPropNames2(dynamicPropNames);
          }
        }
        node2.codegenNode = createVNodeCall2(context, vnodeTag, vnodeProps, vnodeChildren, vnodePatchFlag, vnodeDynamicProps, vnodeDirectives, !!shouldUseBlock, false, isComponent3, node2.loc);
      };
    };
    function resolveComponentType2(node2, context, ssr = false) {
      let { tag: tag2 } = node2;
      const isExplicitDynamic = isComponentTag2(tag2);
      const isProp = findProp2(node2, "is");
      if (isProp) {
        if (isExplicitDynamic || isCompatEnabled2("COMPILER_IS_ON_ELEMENT", context)) {
          const exp = isProp.type === 6 ? isProp.value && createSimpleExpression2(isProp.value.content, true) : isProp.exp;
          if (exp) {
            return createCallExpression2(context.helper(RESOLVE_DYNAMIC_COMPONENT2), [
              exp
            ]);
          }
        } else if (isProp.type === 6 && isProp.value.content.startsWith("vue:")) {
          tag2 = isProp.value.content.slice(4);
        }
      }
      const isDir = !isExplicitDynamic && findDir2(node2, "is");
      if (isDir && isDir.exp) {
        return createCallExpression2(context.helper(RESOLVE_DYNAMIC_COMPONENT2), [
          isDir.exp
        ]);
      }
      const builtIn = isCoreComponent2(tag2) || context.isBuiltInComponent(tag2);
      if (builtIn) {
        if (!ssr)
          context.helper(builtIn);
        return builtIn;
      }
      {
        const fromSetup = resolveSetupReference2(tag2, context);
        if (fromSetup) {
          return fromSetup;
        }
        const dotIndex = tag2.indexOf(".");
        if (dotIndex > 0) {
          const ns = resolveSetupReference2(tag2.slice(0, dotIndex), context);
          if (ns) {
            return ns + tag2.slice(dotIndex);
          }
        }
      }
      if (context.selfName && shared.capitalize(shared.camelize(tag2)) === context.selfName) {
        context.helper(RESOLVE_COMPONENT2);
        context.components.add(tag2 + `__self`);
        return toValidAssetId2(tag2, `component`);
      }
      context.helper(RESOLVE_COMPONENT2);
      context.components.add(tag2);
      return toValidAssetId2(tag2, `component`);
    }
    function resolveSetupReference2(name, context) {
      const bindings = context.bindingMetadata;
      if (!bindings || bindings.__isScriptSetup === false) {
        return;
      }
      const camelName = shared.camelize(name);
      const PascalName = shared.capitalize(camelName);
      const checkType = (type) => {
        if (bindings[name] === type) {
          return name;
        }
        if (bindings[camelName] === type) {
          return camelName;
        }
        if (bindings[PascalName] === type) {
          return PascalName;
        }
      };
      const fromConst = checkType("setup-const");
      if (fromConst) {
        return context.inline ? fromConst : `$setup[${JSON.stringify(fromConst)}]`;
      }
      const fromMaybeRef = checkType("setup-let") || checkType("setup-ref") || checkType("setup-maybe-ref");
      if (fromMaybeRef) {
        return context.inline ? `${context.helperString(UNREF2)}(${fromMaybeRef})` : `$setup[${JSON.stringify(fromMaybeRef)}]`;
      }
    }
    function buildProps2(node2, context, props = node2.props, ssr = false) {
      const { tag: tag2, loc: elementLoc, children } = node2;
      const isComponent3 = node2.tagType === 1;
      let properties = [];
      const mergeArgs = [];
      const runtimeDirectives = [];
      const hasChildren = children.length > 0;
      let shouldUseBlock = false;
      let patchFlag = 0;
      let hasRef = false;
      let hasClassBinding = false;
      let hasStyleBinding = false;
      let hasHydrationEventBinding = false;
      let hasDynamicKeys = false;
      let hasVnodeHook = false;
      const dynamicPropNames = [];
      const analyzePatchFlag = ({ key, value }) => {
        if (isStaticExp2(key)) {
          const name = key.content;
          const isEventHandler = shared.isOn(name);
          if (!isComponent3 && isEventHandler && name.toLowerCase() !== "onclick" && name !== "onUpdate:modelValue" && !shared.isReservedProp(name)) {
            hasHydrationEventBinding = true;
          }
          if (isEventHandler && shared.isReservedProp(name)) {
            hasVnodeHook = true;
          }
          if (value.type === 20 || (value.type === 4 || value.type === 8) && getConstantType2(value, context) > 0) {
            return;
          }
          if (name === "ref") {
            hasRef = true;
          } else if (name === "class") {
            hasClassBinding = true;
          } else if (name === "style") {
            hasStyleBinding = true;
          } else if (name !== "key" && !dynamicPropNames.includes(name)) {
            dynamicPropNames.push(name);
          }
          if (isComponent3 && (name === "class" || name === "style") && !dynamicPropNames.includes(name)) {
            dynamicPropNames.push(name);
          }
        } else {
          hasDynamicKeys = true;
        }
      };
      for (let i = 0; i < props.length; i++) {
        const prop = props[i];
        if (prop.type === 6) {
          const { loc, name, value } = prop;
          let isStatic = true;
          if (name === "ref") {
            hasRef = true;
            if (context.scopes.vFor > 0) {
              properties.push(createObjectProperty2(createSimpleExpression2("ref_for", true), createSimpleExpression2("true")));
            }
            if (value && context.inline && context.bindingMetadata[value.content]) {
              isStatic = false;
              properties.push(createObjectProperty2(createSimpleExpression2("ref_key", true), createSimpleExpression2(value.content, true, value.loc)));
            }
          }
          if (name === "is" && (isComponentTag2(tag2) || value && value.content.startsWith("vue:") || isCompatEnabled2("COMPILER_IS_ON_ELEMENT", context))) {
            continue;
          }
          properties.push(createObjectProperty2(createSimpleExpression2(name, true, getInnerRange2(loc, 0, name.length)), createSimpleExpression2(value ? value.content : "", isStatic, value ? value.loc : loc)));
        } else {
          const { name, arg, exp, loc } = prop;
          const isVBind = name === "bind";
          const isVOn = name === "on";
          if (name === "slot") {
            if (!isComponent3) {
              context.onError(createCompilerError2(40, loc));
            }
            continue;
          }
          if (name === "once" || name === "memo") {
            continue;
          }
          if (name === "is" || isVBind && isStaticArgOf2(arg, "is") && (isComponentTag2(tag2) || isCompatEnabled2("COMPILER_IS_ON_ELEMENT", context))) {
            continue;
          }
          if (isVOn && ssr) {
            continue;
          }
          if (isVBind && isStaticArgOf2(arg, "key") || isVOn && hasChildren && isStaticArgOf2(arg, "vue:before-update")) {
            shouldUseBlock = true;
          }
          if (isVBind && isStaticArgOf2(arg, "ref") && context.scopes.vFor > 0) {
            properties.push(createObjectProperty2(createSimpleExpression2("ref_for", true), createSimpleExpression2("true")));
          }
          if (!arg && (isVBind || isVOn)) {
            hasDynamicKeys = true;
            if (exp) {
              if (properties.length) {
                mergeArgs.push(createObjectExpression2(dedupeProperties2(properties), elementLoc));
                properties = [];
              }
              if (isVBind) {
                {
                  {
                    const hasOverridableKeys = mergeArgs.some((arg2) => {
                      if (arg2.type === 15) {
                        return arg2.properties.some(({ key }) => {
                          if (key.type !== 4 || !key.isStatic) {
                            return true;
                          }
                          return key.content !== "class" && key.content !== "style" && !shared.isOn(key.content);
                        });
                      } else {
                        return true;
                      }
                    });
                    if (hasOverridableKeys) {
                      checkCompatEnabled2("COMPILER_V_BIND_OBJECT_ORDER", context, loc);
                    }
                  }
                  if (isCompatEnabled2("COMPILER_V_BIND_OBJECT_ORDER", context)) {
                    mergeArgs.unshift(exp);
                    continue;
                  }
                }
                mergeArgs.push(exp);
              } else {
                mergeArgs.push({
                  type: 14,
                  loc,
                  callee: context.helper(TO_HANDLERS2),
                  arguments: [exp]
                });
              }
            } else {
              context.onError(createCompilerError2(isVBind ? 34 : 35, loc));
            }
            continue;
          }
          const directiveTransform = context.directiveTransforms[name];
          if (directiveTransform) {
            const { props: props2, needRuntime } = directiveTransform(prop, node2, context);
            !ssr && props2.forEach(analyzePatchFlag);
            properties.push(...props2);
            if (needRuntime) {
              runtimeDirectives.push(prop);
              if (shared.isSymbol(needRuntime)) {
                directiveImportMap2.set(prop, needRuntime);
              }
            }
          } else if (!shared.isBuiltInDirective(name)) {
            runtimeDirectives.push(prop);
            if (hasChildren) {
              shouldUseBlock = true;
            }
          }
        }
      }
      let propsExpression = void 0;
      if (mergeArgs.length) {
        if (properties.length) {
          mergeArgs.push(createObjectExpression2(dedupeProperties2(properties), elementLoc));
        }
        if (mergeArgs.length > 1) {
          propsExpression = createCallExpression2(context.helper(MERGE_PROPS2), mergeArgs, elementLoc);
        } else {
          propsExpression = mergeArgs[0];
        }
      } else if (properties.length) {
        propsExpression = createObjectExpression2(dedupeProperties2(properties), elementLoc);
      }
      if (hasDynamicKeys) {
        patchFlag |= 16;
      } else {
        if (hasClassBinding && !isComponent3) {
          patchFlag |= 2;
        }
        if (hasStyleBinding && !isComponent3) {
          patchFlag |= 4;
        }
        if (dynamicPropNames.length) {
          patchFlag |= 8;
        }
        if (hasHydrationEventBinding) {
          patchFlag |= 32;
        }
      }
      if (!shouldUseBlock && (patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {
        patchFlag |= 512;
      }
      if (!context.inSSR && propsExpression) {
        switch (propsExpression.type) {
          case 15:
            let classKeyIndex = -1;
            let styleKeyIndex = -1;
            let hasDynamicKey = false;
            for (let i = 0; i < propsExpression.properties.length; i++) {
              const key = propsExpression.properties[i].key;
              if (isStaticExp2(key)) {
                if (key.content === "class") {
                  classKeyIndex = i;
                } else if (key.content === "style") {
                  styleKeyIndex = i;
                }
              } else if (!key.isHandlerKey) {
                hasDynamicKey = true;
              }
            }
            const classProp = propsExpression.properties[classKeyIndex];
            const styleProp = propsExpression.properties[styleKeyIndex];
            if (!hasDynamicKey) {
              if (classProp && !isStaticExp2(classProp.value)) {
                classProp.value = createCallExpression2(context.helper(NORMALIZE_CLASS2), [classProp.value]);
              }
              if (styleProp && !isStaticExp2(styleProp.value) && (hasStyleBinding || styleProp.value.type === 17)) {
                styleProp.value = createCallExpression2(context.helper(NORMALIZE_STYLE2), [styleProp.value]);
              }
            } else {
              propsExpression = createCallExpression2(context.helper(NORMALIZE_PROPS2), [propsExpression]);
            }
            break;
          case 14:
            break;
          default:
            propsExpression = createCallExpression2(context.helper(NORMALIZE_PROPS2), [
              createCallExpression2(context.helper(GUARD_REACTIVE_PROPS2), [
                propsExpression
              ])
            ]);
            break;
        }
      }
      return {
        props: propsExpression,
        directives: runtimeDirectives,
        patchFlag,
        dynamicPropNames,
        shouldUseBlock
      };
    }
    function dedupeProperties2(properties) {
      const knownProps = /* @__PURE__ */ new Map();
      const deduped = [];
      for (let i = 0; i < properties.length; i++) {
        const prop = properties[i];
        if (prop.key.type === 8 || !prop.key.isStatic) {
          deduped.push(prop);
          continue;
        }
        const name = prop.key.content;
        const existing = knownProps.get(name);
        if (existing) {
          if (name === "style" || name === "class" || shared.isOn(name)) {
            mergeAsArray2(existing, prop);
          }
        } else {
          knownProps.set(name, prop);
          deduped.push(prop);
        }
      }
      return deduped;
    }
    function mergeAsArray2(existing, incoming) {
      if (existing.value.type === 17) {
        existing.value.elements.push(incoming.value);
      } else {
        existing.value = createArrayExpression2([existing.value, incoming.value], existing.loc);
      }
    }
    function buildDirectiveArgs2(dir, context) {
      const dirArgs = [];
      const runtime = directiveImportMap2.get(dir);
      if (runtime) {
        dirArgs.push(context.helperString(runtime));
      } else {
        const fromSetup = resolveSetupReference2("v-" + dir.name, context);
        if (fromSetup) {
          dirArgs.push(fromSetup);
        } else {
          context.helper(RESOLVE_DIRECTIVE2);
          context.directives.add(dir.name);
          dirArgs.push(toValidAssetId2(dir.name, `directive`));
        }
      }
      const { loc } = dir;
      if (dir.exp)
        dirArgs.push(dir.exp);
      if (dir.arg) {
        if (!dir.exp) {
          dirArgs.push(`void 0`);
        }
        dirArgs.push(dir.arg);
      }
      if (Object.keys(dir.modifiers).length) {
        if (!dir.arg) {
          if (!dir.exp) {
            dirArgs.push(`void 0`);
          }
          dirArgs.push(`void 0`);
        }
        const trueExpression = createSimpleExpression2(`true`, false, loc);
        dirArgs.push(createObjectExpression2(dir.modifiers.map((modifier) => createObjectProperty2(modifier, trueExpression)), loc));
      }
      return createArrayExpression2(dirArgs, dir.loc);
    }
    function stringifyDynamicPropNames2(props) {
      let propsNamesString = `[`;
      for (let i = 0, l = props.length; i < l; i++) {
        propsNamesString += JSON.stringify(props[i]);
        if (i < l - 1)
          propsNamesString += ", ";
      }
      return propsNamesString + `]`;
    }
    function isComponentTag2(tag2) {
      return tag2 === "component" || tag2 === "Component";
    }
    Object.freeze({});
    Object.freeze([]);
    var cacheStringFunction2 = (fn) => {
      const cache = /* @__PURE__ */ Object.create(null);
      return (str) => {
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
      };
    };
    var camelizeRE2 = /-(\w)/g;
    var camelize2 = cacheStringFunction2((str) => {
      return str.replace(camelizeRE2, (_, c) => c ? c.toUpperCase() : "");
    });
    var transformSlotOutlet2 = (node2, context) => {
      if (isSlotOutlet2(node2)) {
        const { children, loc } = node2;
        const { slotName, slotProps } = processSlotOutlet2(node2, context);
        const slotArgs = [
          context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
          slotName,
          "{}",
          "undefined",
          "true"
        ];
        let expectedLen = 2;
        if (slotProps) {
          slotArgs[2] = slotProps;
          expectedLen = 3;
        }
        if (children.length) {
          slotArgs[3] = createFunctionExpression2([], children, false, false, loc);
          expectedLen = 4;
        }
        if (context.scopeId && !context.slotted) {
          expectedLen = 5;
        }
        slotArgs.splice(expectedLen);
        node2.codegenNode = createCallExpression2(context.helper(RENDER_SLOT2), slotArgs, loc);
      }
    };
    function processSlotOutlet2(node2, context) {
      let slotName = `"default"`;
      let slotProps = void 0;
      const nonNameProps = [];
      for (let i = 0; i < node2.props.length; i++) {
        const p = node2.props[i];
        if (p.type === 6) {
          if (p.value) {
            if (p.name === "name") {
              slotName = JSON.stringify(p.value.content);
            } else {
              p.name = camelize2(p.name);
              nonNameProps.push(p);
            }
          }
        } else {
          if (p.name === "bind" && isStaticArgOf2(p.arg, "name")) {
            if (p.exp)
              slotName = p.exp;
          } else {
            if (p.name === "bind" && p.arg && isStaticExp2(p.arg)) {
              p.arg.content = camelize2(p.arg.content);
            }
            nonNameProps.push(p);
          }
        }
      }
      if (nonNameProps.length > 0) {
        const { props, directives } = buildProps2(node2, context, nonNameProps);
        slotProps = props;
        if (directives.length) {
          context.onError(createCompilerError2(36, directives[0].loc));
        }
      }
      return {
        slotName,
        slotProps
      };
    }
    var fnExpRE2 = /^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/;
    var transformOn2 = (dir, node2, context, augmentor) => {
      const { loc, modifiers, arg } = dir;
      if (!dir.exp && !modifiers.length) {
        context.onError(createCompilerError2(35, loc));
      }
      let eventName;
      if (arg.type === 4) {
        if (arg.isStatic) {
          let rawName = arg.content;
          if (rawName.startsWith("vue:")) {
            rawName = `vnode-${rawName.slice(4)}`;
          }
          eventName = createSimpleExpression2(shared.toHandlerKey(shared.camelize(rawName)), true, arg.loc);
        } else {
          eventName = createCompoundExpression2([
            `${context.helperString(TO_HANDLER_KEY2)}(`,
            arg,
            `)`
          ]);
        }
      } else {
        eventName = arg;
        eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY2)}(`);
        eventName.children.push(`)`);
      }
      let exp = dir.exp;
      if (exp && !exp.content.trim()) {
        exp = void 0;
      }
      let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;
      if (exp) {
        const isMemberExp = isMemberExpression2(exp.content, context);
        const isInlineStatement = !(isMemberExp || fnExpRE2.test(exp.content));
        const hasMultipleStatements = exp.content.includes(`;`);
        if (context.prefixIdentifiers) {
          isInlineStatement && context.addIdentifiers(`$event`);
          exp = dir.exp = processExpression2(exp, context, false, hasMultipleStatements);
          isInlineStatement && context.removeIdentifiers(`$event`);
          shouldCache = context.cacheHandlers && !context.inVOnce && !(exp.type === 4 && exp.constType > 0) && !(isMemberExp && node2.tagType === 1) && !hasScopeRef2(exp, context.identifiers);
          if (shouldCache && isMemberExp) {
            if (exp.type === 4) {
              exp.content = `${exp.content} && ${exp.content}(...args)`;
            } else {
              exp.children = [...exp.children, ` && `, ...exp.children, `(...args)`];
            }
          }
        }
        if (isInlineStatement || shouldCache && isMemberExp) {
          exp = createCompoundExpression2([
            `${isInlineStatement ? context.isTS ? `($event: any)` : `$event` : `${context.isTS ? `
//@ts-ignore
` : ``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
            exp,
            hasMultipleStatements ? `}` : `)`
          ]);
        }
      }
      let ret = {
        props: [
          createObjectProperty2(eventName, exp || createSimpleExpression2(`() => {}`, false, loc))
        ]
      };
      if (augmentor) {
        ret = augmentor(ret);
      }
      if (shouldCache) {
        ret.props[0].value = context.cache(ret.props[0].value);
      }
      ret.props.forEach((p) => p.key.isHandlerKey = true);
      return ret;
    };
    var transformBind2 = (dir, _node, context) => {
      const { exp, modifiers, loc } = dir;
      const arg = dir.arg;
      if (arg.type !== 4) {
        arg.children.unshift(`(`);
        arg.children.push(`) || ""`);
      } else if (!arg.isStatic) {
        arg.content = `${arg.content} || ""`;
      }
      if (modifiers.includes("camel")) {
        if (arg.type === 4) {
          if (arg.isStatic) {
            arg.content = shared.camelize(arg.content);
          } else {
            arg.content = `${context.helperString(CAMELIZE2)}(${arg.content})`;
          }
        } else {
          arg.children.unshift(`${context.helperString(CAMELIZE2)}(`);
          arg.children.push(`)`);
        }
      }
      if (!context.inSSR) {
        if (modifiers.includes("prop")) {
          injectPrefix2(arg, ".");
        }
        if (modifiers.includes("attr")) {
          injectPrefix2(arg, "^");
        }
      }
      if (!exp || exp.type === 4 && !exp.content.trim()) {
        context.onError(createCompilerError2(34, loc));
        return {
          props: [createObjectProperty2(arg, createSimpleExpression2("", true, loc))]
        };
      }
      return {
        props: [createObjectProperty2(arg, exp)]
      };
    };
    var injectPrefix2 = (arg, prefix2) => {
      if (arg.type === 4) {
        if (arg.isStatic) {
          arg.content = prefix2 + arg.content;
        } else {
          arg.content = `\`${prefix2}\${${arg.content}}\``;
        }
      } else {
        arg.children.unshift(`'${prefix2}' + (`);
        arg.children.push(`)`);
      }
    };
    var transformText2 = (node2, context) => {
      if (node2.type === 0 || node2.type === 1 || node2.type === 11 || node2.type === 10) {
        return () => {
          const children = node2.children;
          let currentContainer = void 0;
          let hasText = false;
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isText2(child)) {
              hasText = true;
              for (let j = i + 1; j < children.length; j++) {
                const next = children[j];
                if (isText2(next)) {
                  if (!currentContainer) {
                    currentContainer = children[i] = {
                      type: 8,
                      loc: child.loc,
                      children: [child]
                    };
                  }
                  currentContainer.children.push(` + `, next);
                  children.splice(j, 1);
                  j--;
                } else {
                  currentContainer = void 0;
                  break;
                }
              }
            }
          }
          if (!hasText || children.length === 1 && (node2.type === 0 || node2.type === 1 && node2.tagType === 0 && !node2.props.find((p) => p.type === 7 && !context.directiveTransforms[p.name]) && !(node2.tag === "template"))) {
            return;
          }
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isText2(child) || child.type === 8) {
              const callArgs = [];
              if (child.type !== 2 || child.content !== " ") {
                callArgs.push(child);
              }
              if (!context.ssr && getConstantType2(child, context) === 0) {
                callArgs.push(1 + ` /* ${shared.PatchFlagNames[1]} */`);
              }
              children[i] = {
                type: 12,
                content: child,
                loc: child.loc,
                codegenNode: createCallExpression2(context.helper(CREATE_TEXT2), callArgs)
              };
            }
          }
        };
      }
    };
    var seen2 = /* @__PURE__ */ new WeakSet();
    var transformOnce2 = (node2, context) => {
      if (node2.type === 1 && findDir2(node2, "once", true)) {
        if (seen2.has(node2) || context.inVOnce) {
          return;
        }
        seen2.add(node2);
        context.inVOnce = true;
        context.helper(SET_BLOCK_TRACKING2);
        return () => {
          context.inVOnce = false;
          const cur = context.currentNode;
          if (cur.codegenNode) {
            cur.codegenNode = context.cache(cur.codegenNode, true);
          }
        };
      }
    };
    var transformModel2 = (dir, node2, context) => {
      const { exp, arg } = dir;
      if (!exp) {
        context.onError(createCompilerError2(41, dir.loc));
        return createTransformProps2();
      }
      const rawExp = exp.loc.source;
      const expString = exp.type === 4 ? exp.content : rawExp;
      const bindingType = context.bindingMetadata[rawExp];
      const maybeRef = context.inline && bindingType && bindingType !== "setup-const";
      if (!expString.trim() || !isMemberExpression2(expString, context) && !maybeRef) {
        context.onError(createCompilerError2(42, exp.loc));
        return createTransformProps2();
      }
      if (context.prefixIdentifiers && isSimpleIdentifier2(expString) && context.identifiers[expString]) {
        context.onError(createCompilerError2(43, exp.loc));
        return createTransformProps2();
      }
      const propName = arg ? arg : createSimpleExpression2("modelValue", true);
      const eventName = arg ? isStaticExp2(arg) ? `onUpdate:${arg.content}` : createCompoundExpression2(['"onUpdate:" + ', arg]) : `onUpdate:modelValue`;
      let assignmentExp;
      const eventArg = context.isTS ? `($event: any)` : `$event`;
      if (maybeRef) {
        if (bindingType === "setup-ref") {
          assignmentExp = createCompoundExpression2([
            `${eventArg} => ((`,
            createSimpleExpression2(rawExp, false, exp.loc),
            `).value = $event)`
          ]);
        } else {
          const altAssignment = bindingType === "setup-let" ? `${rawExp} = $event` : `null`;
          assignmentExp = createCompoundExpression2([
            `${eventArg} => (${context.helperString(IS_REF2)}(${rawExp}) ? (`,
            createSimpleExpression2(rawExp, false, exp.loc),
            `).value = $event : ${altAssignment})`
          ]);
        }
      } else {
        assignmentExp = createCompoundExpression2([
          `${eventArg} => ((`,
          exp,
          `) = $event)`
        ]);
      }
      const props = [
        createObjectProperty2(propName, dir.exp),
        createObjectProperty2(eventName, assignmentExp)
      ];
      if (context.prefixIdentifiers && !context.inVOnce && context.cacheHandlers && !hasScopeRef2(exp, context.identifiers)) {
        props[1].value = context.cache(props[1].value);
      }
      if (dir.modifiers.length && node2.tagType === 1) {
        const modifiers = dir.modifiers.map((m) => (isSimpleIdentifier2(m) ? m : JSON.stringify(m)) + `: true`).join(`, `);
        const modifiersKey = arg ? isStaticExp2(arg) ? `${arg.content}Modifiers` : createCompoundExpression2([arg, ' + "Modifiers"']) : `modelModifiers`;
        props.push(createObjectProperty2(modifiersKey, createSimpleExpression2(`{ ${modifiers} }`, false, dir.loc, 2)));
      }
      return createTransformProps2(props);
    };
    function createTransformProps2(props = []) {
      return { props };
    }
    var validDivisionCharRE = /[\w).+\-_$\]]/;
    var transformFilter = (node2, context) => {
      if (!isCompatEnabled2("COMPILER_FILTER", context)) {
        return;
      }
      if (node2.type === 5) {
        rewriteFilter(node2.content, context);
      }
      if (node2.type === 1) {
        node2.props.forEach((prop) => {
          if (prop.type === 7 && prop.name !== "for" && prop.exp) {
            rewriteFilter(prop.exp, context);
          }
        });
      }
    };
    function rewriteFilter(node2, context) {
      if (node2.type === 4) {
        parseFilter(node2, context);
      } else {
        for (let i = 0; i < node2.children.length; i++) {
          const child = node2.children[i];
          if (typeof child !== "object")
            continue;
          if (child.type === 4) {
            parseFilter(child, context);
          } else if (child.type === 8) {
            rewriteFilter(node2, context);
          } else if (child.type === 5) {
            rewriteFilter(child.content, context);
          }
        }
      }
    }
    function parseFilter(node2, context) {
      const exp = node2.content;
      let inSingle = false;
      let inDouble = false;
      let inTemplateString = false;
      let inRegex = false;
      let curly = 0;
      let square = 0;
      let paren = 0;
      let lastFilterIndex = 0;
      let c, prev, i, expression, filters = [];
      for (i = 0; i < exp.length; i++) {
        prev = c;
        c = exp.charCodeAt(i);
        if (inSingle) {
          if (c === 39 && prev !== 92)
            inSingle = false;
        } else if (inDouble) {
          if (c === 34 && prev !== 92)
            inDouble = false;
        } else if (inTemplateString) {
          if (c === 96 && prev !== 92)
            inTemplateString = false;
        } else if (inRegex) {
          if (c === 47 && prev !== 92)
            inRegex = false;
        } else if (c === 124 && exp.charCodeAt(i + 1) !== 124 && exp.charCodeAt(i - 1) !== 124 && !curly && !square && !paren) {
          if (expression === void 0) {
            lastFilterIndex = i + 1;
            expression = exp.slice(0, i).trim();
          } else {
            pushFilter();
          }
        } else {
          switch (c) {
            case 34:
              inDouble = true;
              break;
            case 39:
              inSingle = true;
              break;
            case 96:
              inTemplateString = true;
              break;
            case 40:
              paren++;
              break;
            case 41:
              paren--;
              break;
            case 91:
              square++;
              break;
            case 93:
              square--;
              break;
            case 123:
              curly++;
              break;
            case 125:
              curly--;
              break;
          }
          if (c === 47) {
            let j = i - 1;
            let p;
            for (; j >= 0; j--) {
              p = exp.charAt(j);
              if (p !== " ")
                break;
            }
            if (!p || !validDivisionCharRE.test(p)) {
              inRegex = true;
            }
          }
        }
      }
      if (expression === void 0) {
        expression = exp.slice(0, i).trim();
      } else if (lastFilterIndex !== 0) {
        pushFilter();
      }
      function pushFilter() {
        filters.push(exp.slice(lastFilterIndex, i).trim());
        lastFilterIndex = i + 1;
      }
      if (filters.length) {
        warnDeprecation2("COMPILER_FILTER", context, node2.loc);
        for (i = 0; i < filters.length; i++) {
          expression = wrapFilter(expression, filters[i], context);
        }
        node2.content = expression;
      }
    }
    function wrapFilter(exp, filter2, context) {
      context.helper(RESOLVE_FILTER2);
      const i = filter2.indexOf("(");
      if (i < 0) {
        context.filters.add(filter2);
        return `${toValidAssetId2(filter2, "filter")}(${exp})`;
      } else {
        const name = filter2.slice(0, i);
        const args = filter2.slice(i + 1);
        context.filters.add(name);
        return `${toValidAssetId2(name, "filter")}(${exp}${args !== ")" ? "," + args : args}`;
      }
    }
    var seen$12 = /* @__PURE__ */ new WeakSet();
    var transformMemo2 = (node2, context) => {
      if (node2.type === 1) {
        const dir = findDir2(node2, "memo");
        if (!dir || seen$12.has(node2)) {
          return;
        }
        seen$12.add(node2);
        return () => {
          const codegenNode = node2.codegenNode || context.currentNode.codegenNode;
          if (codegenNode && codegenNode.type === 13) {
            if (node2.tagType !== 1) {
              makeBlock2(codegenNode, context);
            }
            node2.codegenNode = createCallExpression2(context.helper(WITH_MEMO2), [
              dir.exp,
              createFunctionExpression2(void 0, codegenNode),
              `_cache`,
              String(context.cached++)
            ]);
          }
        };
      }
    };
    function getBaseTransformPreset2(prefixIdentifiers) {
      return [
        [
          transformOnce2,
          transformIf2,
          transformMemo2,
          transformFor2,
          ...[transformFilter],
          ...prefixIdentifiers ? [
            trackVForSlotScopes2,
            transformExpression2
          ] : [],
          transformSlotOutlet2,
          transformElement2,
          trackSlotScopes2,
          transformText2
        ],
        {
          on: transformOn2,
          bind: transformBind2,
          model: transformModel2
        }
      ];
    }
    function baseCompile2(template, options = {}) {
      const onError = options.onError || defaultOnError2;
      const isModuleMode = options.mode === "module";
      const prefixIdentifiers = options.prefixIdentifiers === true || isModuleMode;
      if (!prefixIdentifiers && options.cacheHandlers) {
        onError(createCompilerError2(48));
      }
      if (options.scopeId && !isModuleMode) {
        onError(createCompilerError2(49));
      }
      const ast = shared.isString(template) ? baseParse2(template, options) : template;
      const [nodeTransforms, directiveTransforms] = getBaseTransformPreset2(prefixIdentifiers);
      if (options.isTS) {
        const { expressionPlugins } = options;
        if (!expressionPlugins || !expressionPlugins.includes("typescript")) {
          options.expressionPlugins = [...expressionPlugins || [], "typescript"];
        }
      }
      transform2(ast, shared.extend({}, options, {
        prefixIdentifiers,
        nodeTransforms: [
          ...nodeTransforms,
          ...options.nodeTransforms || []
        ],
        directiveTransforms: shared.extend({}, directiveTransforms, options.directiveTransforms || {})
      }));
      return generate2(ast, shared.extend({}, options, {
        prefixIdentifiers
      }));
    }
    var noopDirectiveTransform2 = () => ({ props: [] });
    exports2.generateCodeFrame = shared.generateCodeFrame;
    exports2.BASE_TRANSITION = BASE_TRANSITION2;
    exports2.CAMELIZE = CAMELIZE2;
    exports2.CAPITALIZE = CAPITALIZE2;
    exports2.CREATE_BLOCK = CREATE_BLOCK2;
    exports2.CREATE_COMMENT = CREATE_COMMENT2;
    exports2.CREATE_ELEMENT_BLOCK = CREATE_ELEMENT_BLOCK2;
    exports2.CREATE_ELEMENT_VNODE = CREATE_ELEMENT_VNODE2;
    exports2.CREATE_SLOTS = CREATE_SLOTS2;
    exports2.CREATE_STATIC = CREATE_STATIC2;
    exports2.CREATE_TEXT = CREATE_TEXT2;
    exports2.CREATE_VNODE = CREATE_VNODE2;
    exports2.FRAGMENT = FRAGMENT2;
    exports2.GUARD_REACTIVE_PROPS = GUARD_REACTIVE_PROPS2;
    exports2.IS_MEMO_SAME = IS_MEMO_SAME2;
    exports2.IS_REF = IS_REF2;
    exports2.KEEP_ALIVE = KEEP_ALIVE2;
    exports2.MERGE_PROPS = MERGE_PROPS2;
    exports2.NORMALIZE_CLASS = NORMALIZE_CLASS2;
    exports2.NORMALIZE_PROPS = NORMALIZE_PROPS2;
    exports2.NORMALIZE_STYLE = NORMALIZE_STYLE2;
    exports2.OPEN_BLOCK = OPEN_BLOCK2;
    exports2.POP_SCOPE_ID = POP_SCOPE_ID2;
    exports2.PUSH_SCOPE_ID = PUSH_SCOPE_ID2;
    exports2.RENDER_LIST = RENDER_LIST2;
    exports2.RENDER_SLOT = RENDER_SLOT2;
    exports2.RESOLVE_COMPONENT = RESOLVE_COMPONENT2;
    exports2.RESOLVE_DIRECTIVE = RESOLVE_DIRECTIVE2;
    exports2.RESOLVE_DYNAMIC_COMPONENT = RESOLVE_DYNAMIC_COMPONENT2;
    exports2.RESOLVE_FILTER = RESOLVE_FILTER2;
    exports2.SET_BLOCK_TRACKING = SET_BLOCK_TRACKING2;
    exports2.SUSPENSE = SUSPENSE2;
    exports2.TELEPORT = TELEPORT2;
    exports2.TO_DISPLAY_STRING = TO_DISPLAY_STRING2;
    exports2.TO_HANDLERS = TO_HANDLERS2;
    exports2.TO_HANDLER_KEY = TO_HANDLER_KEY2;
    exports2.UNREF = UNREF2;
    exports2.WITH_CTX = WITH_CTX2;
    exports2.WITH_DIRECTIVES = WITH_DIRECTIVES2;
    exports2.WITH_MEMO = WITH_MEMO2;
    exports2.advancePositionWithClone = advancePositionWithClone2;
    exports2.advancePositionWithMutation = advancePositionWithMutation2;
    exports2.assert = assert2;
    exports2.baseCompile = baseCompile2;
    exports2.baseParse = baseParse2;
    exports2.buildDirectiveArgs = buildDirectiveArgs2;
    exports2.buildProps = buildProps2;
    exports2.buildSlots = buildSlots2;
    exports2.checkCompatEnabled = checkCompatEnabled2;
    exports2.createArrayExpression = createArrayExpression2;
    exports2.createAssignmentExpression = createAssignmentExpression2;
    exports2.createBlockStatement = createBlockStatement2;
    exports2.createCacheExpression = createCacheExpression2;
    exports2.createCallExpression = createCallExpression2;
    exports2.createCompilerError = createCompilerError2;
    exports2.createCompoundExpression = createCompoundExpression2;
    exports2.createConditionalExpression = createConditionalExpression2;
    exports2.createForLoopParams = createForLoopParams2;
    exports2.createFunctionExpression = createFunctionExpression2;
    exports2.createIfStatement = createIfStatement2;
    exports2.createInterpolation = createInterpolation2;
    exports2.createObjectExpression = createObjectExpression2;
    exports2.createObjectProperty = createObjectProperty2;
    exports2.createReturnStatement = createReturnStatement2;
    exports2.createRoot = createRoot2;
    exports2.createSequenceExpression = createSequenceExpression2;
    exports2.createSimpleExpression = createSimpleExpression2;
    exports2.createStructuralDirectiveTransform = createStructuralDirectiveTransform2;
    exports2.createTemplateLiteral = createTemplateLiteral2;
    exports2.createTransformContext = createTransformContext2;
    exports2.createVNodeCall = createVNodeCall2;
    exports2.extractIdentifiers = extractIdentifiers2;
    exports2.findDir = findDir2;
    exports2.findProp = findProp2;
    exports2.generate = generate2;
    exports2.getBaseTransformPreset = getBaseTransformPreset2;
    exports2.getInnerRange = getInnerRange2;
    exports2.getMemoedVNodeCall = getMemoedVNodeCall2;
    exports2.getVNodeBlockHelper = getVNodeBlockHelper2;
    exports2.getVNodeHelper = getVNodeHelper2;
    exports2.hasDynamicKeyVBind = hasDynamicKeyVBind2;
    exports2.hasScopeRef = hasScopeRef2;
    exports2.helperNameMap = helperNameMap2;
    exports2.injectProp = injectProp2;
    exports2.isBuiltInType = isBuiltInType2;
    exports2.isCoreComponent = isCoreComponent2;
    exports2.isFunctionType = isFunctionType2;
    exports2.isInDestructureAssignment = isInDestructureAssignment2;
    exports2.isMemberExpression = isMemberExpression2;
    exports2.isMemberExpressionBrowser = isMemberExpressionBrowser2;
    exports2.isMemberExpressionNode = isMemberExpressionNode2;
    exports2.isReferencedIdentifier = isReferencedIdentifier2;
    exports2.isSimpleIdentifier = isSimpleIdentifier2;
    exports2.isSlotOutlet = isSlotOutlet2;
    exports2.isStaticArgOf = isStaticArgOf2;
    exports2.isStaticExp = isStaticExp2;
    exports2.isStaticProperty = isStaticProperty2;
    exports2.isStaticPropertyKey = isStaticPropertyKey2;
    exports2.isTemplateNode = isTemplateNode2;
    exports2.isText = isText2;
    exports2.isVSlot = isVSlot2;
    exports2.locStub = locStub2;
    exports2.makeBlock = makeBlock2;
    exports2.noopDirectiveTransform = noopDirectiveTransform2;
    exports2.processExpression = processExpression2;
    exports2.processFor = processFor2;
    exports2.processIf = processIf2;
    exports2.processSlotOutlet = processSlotOutlet2;
    exports2.registerRuntimeHelpers = registerRuntimeHelpers2;
    exports2.resolveComponentType = resolveComponentType2;
    exports2.toValidAssetId = toValidAssetId2;
    exports2.trackSlotScopes = trackSlotScopes2;
    exports2.trackVForSlotScopes = trackVForSlotScopes2;
    exports2.transform = transform2;
    exports2.transformBind = transformBind2;
    exports2.transformElement = transformElement2;
    exports2.transformExpression = transformExpression2;
    exports2.transformModel = transformModel2;
    exports2.transformOn = transformOn2;
    exports2.traverseNode = traverseNode2;
    exports2.walkBlockDeclarations = walkBlockDeclarations2;
    exports2.walkFunctionParams = walkFunctionParams2;
    exports2.walkIdentifiers = walkIdentifiers2;
    exports2.warnDeprecation = warnDeprecation2;
  }
});

// ../../node_modules/.pnpm/@vue+compiler-core@3.2.31/node_modules/@vue/compiler-core/index.js
var require_compiler_core = __commonJS({
  "../../node_modules/.pnpm/@vue+compiler-core@3.2.31/node_modules/@vue/compiler-core/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_compiler_core_cjs_prod();
    } else {
      module2.exports = require_compiler_core_cjs();
    }
  }
});

// ../../node_modules/.pnpm/@vue+compiler-dom@3.2.31/node_modules/@vue/compiler-dom/dist/compiler-dom.cjs.prod.js
var require_compiler_dom_cjs_prod = __commonJS({
  "../../node_modules/.pnpm/@vue+compiler-dom@3.2.31/node_modules/@vue/compiler-dom/dist/compiler-dom.cjs.prod.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var compilerCore = require_compiler_core();
    var shared = require_shared();
    var V_MODEL_RADIO2 = Symbol(``);
    var V_MODEL_CHECKBOX2 = Symbol(``);
    var V_MODEL_TEXT2 = Symbol(``);
    var V_MODEL_SELECT2 = Symbol(``);
    var V_MODEL_DYNAMIC2 = Symbol(``);
    var V_ON_WITH_MODIFIERS2 = Symbol(``);
    var V_ON_WITH_KEYS2 = Symbol(``);
    var V_SHOW2 = Symbol(``);
    var TRANSITION2 = Symbol(``);
    var TRANSITION_GROUP2 = Symbol(``);
    compilerCore.registerRuntimeHelpers({
      [V_MODEL_RADIO2]: `vModelRadio`,
      [V_MODEL_CHECKBOX2]: `vModelCheckbox`,
      [V_MODEL_TEXT2]: `vModelText`,
      [V_MODEL_SELECT2]: `vModelSelect`,
      [V_MODEL_DYNAMIC2]: `vModelDynamic`,
      [V_ON_WITH_MODIFIERS2]: `withModifiers`,
      [V_ON_WITH_KEYS2]: `withKeys`,
      [V_SHOW2]: `vShow`,
      [TRANSITION2]: `Transition`,
      [TRANSITION_GROUP2]: `TransitionGroup`
    });
    var namedCharacterReferences2 = {
      GT: ">",
      gt: ">",
      LT: "<",
      lt: "<",
      "ac;": "\u223E",
      "af;": "\u2061",
      AMP: "&",
      amp: "&",
      "ap;": "\u2248",
      "DD;": "\u2145",
      "dd;": "\u2146",
      deg: "\xB0",
      "ee;": "\u2147",
      "eg;": "\u2A9A",
      "el;": "\u2A99",
      ETH: "\xD0",
      eth: "\xF0",
      "gE;": "\u2267",
      "ge;": "\u2265",
      "Gg;": "\u22D9",
      "gg;": "\u226B",
      "gl;": "\u2277",
      "GT;": ">",
      "Gt;": "\u226B",
      "gt;": ">",
      "ic;": "\u2063",
      "ii;": "\u2148",
      "Im;": "\u2111",
      "in;": "\u2208",
      "it;": "\u2062",
      "lE;": "\u2266",
      "le;": "\u2264",
      "lg;": "\u2276",
      "Ll;": "\u22D8",
      "ll;": "\u226A",
      "LT;": "<",
      "Lt;": "\u226A",
      "lt;": "<",
      "mp;": "\u2213",
      "Mu;": "\u039C",
      "mu;": "\u03BC",
      "ne;": "\u2260",
      "ni;": "\u220B",
      not: "\xAC",
      "Nu;": "\u039D",
      "nu;": "\u03BD",
      "Or;": "\u2A54",
      "or;": "\u2228",
      "oS;": "\u24C8",
      "Pi;": "\u03A0",
      "pi;": "\u03C0",
      "pm;": "\xB1",
      "Pr;": "\u2ABB",
      "pr;": "\u227A",
      "Re;": "\u211C",
      REG: "\xAE",
      reg: "\xAE",
      "rx;": "\u211E",
      "Sc;": "\u2ABC",
      "sc;": "\u227B",
      shy: "\xAD",
      uml: "\xA8",
      "wp;": "\u2118",
      "wr;": "\u2240",
      "Xi;": "\u039E",
      "xi;": "\u03BE",
      yen: "\xA5",
      "acd;": "\u223F",
      "acE;": "\u223E\u0333",
      "Acy;": "\u0410",
      "acy;": "\u0430",
      "Afr;": "\u{1D504}",
      "afr;": "\u{1D51E}",
      "AMP;": "&",
      "amp;": "&",
      "And;": "\u2A53",
      "and;": "\u2227",
      "ang;": "\u2220",
      "apE;": "\u2A70",
      "ape;": "\u224A",
      "ast;": "*",
      Auml: "\xC4",
      auml: "\xE4",
      "Bcy;": "\u0411",
      "bcy;": "\u0431",
      "Bfr;": "\u{1D505}",
      "bfr;": "\u{1D51F}",
      "bne;": "=\u20E5",
      "bot;": "\u22A5",
      "Cap;": "\u22D2",
      "cap;": "\u2229",
      cent: "\xA2",
      "Cfr;": "\u212D",
      "cfr;": "\u{1D520}",
      "Chi;": "\u03A7",
      "chi;": "\u03C7",
      "cir;": "\u25CB",
      COPY: "\xA9",
      copy: "\xA9",
      "Cup;": "\u22D3",
      "cup;": "\u222A",
      "Dcy;": "\u0414",
      "dcy;": "\u0434",
      "deg;": "\xB0",
      "Del;": "\u2207",
      "Dfr;": "\u{1D507}",
      "dfr;": "\u{1D521}",
      "die;": "\xA8",
      "div;": "\xF7",
      "Dot;": "\xA8",
      "dot;": "\u02D9",
      "Ecy;": "\u042D",
      "ecy;": "\u044D",
      "Efr;": "\u{1D508}",
      "efr;": "\u{1D522}",
      "egs;": "\u2A96",
      "ell;": "\u2113",
      "els;": "\u2A95",
      "ENG;": "\u014A",
      "eng;": "\u014B",
      "Eta;": "\u0397",
      "eta;": "\u03B7",
      "ETH;": "\xD0",
      "eth;": "\xF0",
      Euml: "\xCB",
      euml: "\xEB",
      "Fcy;": "\u0424",
      "fcy;": "\u0444",
      "Ffr;": "\u{1D509}",
      "ffr;": "\u{1D523}",
      "gap;": "\u2A86",
      "Gcy;": "\u0413",
      "gcy;": "\u0433",
      "gEl;": "\u2A8C",
      "gel;": "\u22DB",
      "geq;": "\u2265",
      "ges;": "\u2A7E",
      "Gfr;": "\u{1D50A}",
      "gfr;": "\u{1D524}",
      "ggg;": "\u22D9",
      "gla;": "\u2AA5",
      "glE;": "\u2A92",
      "glj;": "\u2AA4",
      "gnE;": "\u2269",
      "gne;": "\u2A88",
      "Hat;": "^",
      "Hfr;": "\u210C",
      "hfr;": "\u{1D525}",
      "Icy;": "\u0418",
      "icy;": "\u0438",
      "iff;": "\u21D4",
      "Ifr;": "\u2111",
      "ifr;": "\u{1D526}",
      "Int;": "\u222C",
      "int;": "\u222B",
      Iuml: "\xCF",
      iuml: "\xEF",
      "Jcy;": "\u0419",
      "jcy;": "\u0439",
      "Jfr;": "\u{1D50D}",
      "jfr;": "\u{1D527}",
      "Kcy;": "\u041A",
      "kcy;": "\u043A",
      "Kfr;": "\u{1D50E}",
      "kfr;": "\u{1D528}",
      "lap;": "\u2A85",
      "lat;": "\u2AAB",
      "Lcy;": "\u041B",
      "lcy;": "\u043B",
      "lEg;": "\u2A8B",
      "leg;": "\u22DA",
      "leq;": "\u2264",
      "les;": "\u2A7D",
      "Lfr;": "\u{1D50F}",
      "lfr;": "\u{1D529}",
      "lgE;": "\u2A91",
      "lnE;": "\u2268",
      "lne;": "\u2A87",
      "loz;": "\u25CA",
      "lrm;": "\u200E",
      "Lsh;": "\u21B0",
      "lsh;": "\u21B0",
      macr: "\xAF",
      "Map;": "\u2905",
      "map;": "\u21A6",
      "Mcy;": "\u041C",
      "mcy;": "\u043C",
      "Mfr;": "\u{1D510}",
      "mfr;": "\u{1D52A}",
      "mho;": "\u2127",
      "mid;": "\u2223",
      "nap;": "\u2249",
      nbsp: "\xA0",
      "Ncy;": "\u041D",
      "ncy;": "\u043D",
      "Nfr;": "\u{1D511}",
      "nfr;": "\u{1D52B}",
      "ngE;": "\u2267\u0338",
      "nge;": "\u2271",
      "nGg;": "\u22D9\u0338",
      "nGt;": "\u226B\u20D2",
      "ngt;": "\u226F",
      "nis;": "\u22FC",
      "niv;": "\u220B",
      "nlE;": "\u2266\u0338",
      "nle;": "\u2270",
      "nLl;": "\u22D8\u0338",
      "nLt;": "\u226A\u20D2",
      "nlt;": "\u226E",
      "Not;": "\u2AEC",
      "not;": "\xAC",
      "npr;": "\u2280",
      "nsc;": "\u2281",
      "num;": "#",
      "Ocy;": "\u041E",
      "ocy;": "\u043E",
      "Ofr;": "\u{1D512}",
      "ofr;": "\u{1D52C}",
      "ogt;": "\u29C1",
      "ohm;": "\u03A9",
      "olt;": "\u29C0",
      "ord;": "\u2A5D",
      ordf: "\xAA",
      ordm: "\xBA",
      "orv;": "\u2A5B",
      Ouml: "\xD6",
      ouml: "\xF6",
      "par;": "\u2225",
      para: "\xB6",
      "Pcy;": "\u041F",
      "pcy;": "\u043F",
      "Pfr;": "\u{1D513}",
      "pfr;": "\u{1D52D}",
      "Phi;": "\u03A6",
      "phi;": "\u03C6",
      "piv;": "\u03D6",
      "prE;": "\u2AB3",
      "pre;": "\u2AAF",
      "Psi;": "\u03A8",
      "psi;": "\u03C8",
      "Qfr;": "\u{1D514}",
      "qfr;": "\u{1D52E}",
      QUOT: '"',
      quot: '"',
      "Rcy;": "\u0420",
      "rcy;": "\u0440",
      "REG;": "\xAE",
      "reg;": "\xAE",
      "Rfr;": "\u211C",
      "rfr;": "\u{1D52F}",
      "Rho;": "\u03A1",
      "rho;": "\u03C1",
      "rlm;": "\u200F",
      "Rsh;": "\u21B1",
      "rsh;": "\u21B1",
      "scE;": "\u2AB4",
      "sce;": "\u2AB0",
      "Scy;": "\u0421",
      "scy;": "\u0441",
      sect: "\xA7",
      "Sfr;": "\u{1D516}",
      "sfr;": "\u{1D530}",
      "shy;": "\xAD",
      "sim;": "\u223C",
      "smt;": "\u2AAA",
      "sol;": "/",
      "squ;": "\u25A1",
      "Sub;": "\u22D0",
      "sub;": "\u2282",
      "Sum;": "\u2211",
      "sum;": "\u2211",
      "Sup;": "\u22D1",
      "sup;": "\u2283",
      sup1: "\xB9",
      sup2: "\xB2",
      sup3: "\xB3",
      "Tab;": "	",
      "Tau;": "\u03A4",
      "tau;": "\u03C4",
      "Tcy;": "\u0422",
      "tcy;": "\u0442",
      "Tfr;": "\u{1D517}",
      "tfr;": "\u{1D531}",
      "top;": "\u22A4",
      "Ucy;": "\u0423",
      "ucy;": "\u0443",
      "Ufr;": "\u{1D518}",
      "ufr;": "\u{1D532}",
      "uml;": "\xA8",
      Uuml: "\xDC",
      uuml: "\xFC",
      "Vcy;": "\u0412",
      "vcy;": "\u0432",
      "Vee;": "\u22C1",
      "vee;": "\u2228",
      "Vfr;": "\u{1D519}",
      "vfr;": "\u{1D533}",
      "Wfr;": "\u{1D51A}",
      "wfr;": "\u{1D534}",
      "Xfr;": "\u{1D51B}",
      "xfr;": "\u{1D535}",
      "Ycy;": "\u042B",
      "ycy;": "\u044B",
      "yen;": "\xA5",
      "Yfr;": "\u{1D51C}",
      "yfr;": "\u{1D536}",
      yuml: "\xFF",
      "Zcy;": "\u0417",
      "zcy;": "\u0437",
      "Zfr;": "\u2128",
      "zfr;": "\u{1D537}",
      "zwj;": "\u200D",
      Acirc: "\xC2",
      acirc: "\xE2",
      acute: "\xB4",
      AElig: "\xC6",
      aelig: "\xE6",
      "andd;": "\u2A5C",
      "andv;": "\u2A5A",
      "ange;": "\u29A4",
      "Aopf;": "\u{1D538}",
      "aopf;": "\u{1D552}",
      "apid;": "\u224B",
      "apos;": "'",
      Aring: "\xC5",
      aring: "\xE5",
      "Ascr;": "\u{1D49C}",
      "ascr;": "\u{1D4B6}",
      "Auml;": "\xC4",
      "auml;": "\xE4",
      "Barv;": "\u2AE7",
      "bbrk;": "\u23B5",
      "Beta;": "\u0392",
      "beta;": "\u03B2",
      "beth;": "\u2136",
      "bNot;": "\u2AED",
      "bnot;": "\u2310",
      "Bopf;": "\u{1D539}",
      "bopf;": "\u{1D553}",
      "boxH;": "\u2550",
      "boxh;": "\u2500",
      "boxV;": "\u2551",
      "boxv;": "\u2502",
      "Bscr;": "\u212C",
      "bscr;": "\u{1D4B7}",
      "bsim;": "\u223D",
      "bsol;": "\\",
      "bull;": "\u2022",
      "bump;": "\u224E",
      "caps;": "\u2229\uFE00",
      "Cdot;": "\u010A",
      "cdot;": "\u010B",
      cedil: "\xB8",
      "cent;": "\xA2",
      "CHcy;": "\u0427",
      "chcy;": "\u0447",
      "circ;": "\u02C6",
      "cirE;": "\u29C3",
      "cire;": "\u2257",
      "comp;": "\u2201",
      "cong;": "\u2245",
      "Copf;": "\u2102",
      "copf;": "\u{1D554}",
      "COPY;": "\xA9",
      "copy;": "\xA9",
      "Cscr;": "\u{1D49E}",
      "cscr;": "\u{1D4B8}",
      "csub;": "\u2ACF",
      "csup;": "\u2AD0",
      "cups;": "\u222A\uFE00",
      "Darr;": "\u21A1",
      "dArr;": "\u21D3",
      "darr;": "\u2193",
      "dash;": "\u2010",
      "dHar;": "\u2965",
      "diam;": "\u22C4",
      "DJcy;": "\u0402",
      "djcy;": "\u0452",
      "Dopf;": "\u{1D53B}",
      "dopf;": "\u{1D555}",
      "Dscr;": "\u{1D49F}",
      "dscr;": "\u{1D4B9}",
      "DScy;": "\u0405",
      "dscy;": "\u0455",
      "dsol;": "\u29F6",
      "dtri;": "\u25BF",
      "DZcy;": "\u040F",
      "dzcy;": "\u045F",
      "ecir;": "\u2256",
      Ecirc: "\xCA",
      ecirc: "\xEA",
      "Edot;": "\u0116",
      "eDot;": "\u2251",
      "edot;": "\u0117",
      "emsp;": "\u2003",
      "ensp;": "\u2002",
      "Eopf;": "\u{1D53C}",
      "eopf;": "\u{1D556}",
      "epar;": "\u22D5",
      "epsi;": "\u03B5",
      "Escr;": "\u2130",
      "escr;": "\u212F",
      "Esim;": "\u2A73",
      "esim;": "\u2242",
      "Euml;": "\xCB",
      "euml;": "\xEB",
      "euro;": "\u20AC",
      "excl;": "!",
      "flat;": "\u266D",
      "fnof;": "\u0192",
      "Fopf;": "\u{1D53D}",
      "fopf;": "\u{1D557}",
      "fork;": "\u22D4",
      "Fscr;": "\u2131",
      "fscr;": "\u{1D4BB}",
      "Gdot;": "\u0120",
      "gdot;": "\u0121",
      "geqq;": "\u2267",
      "gesl;": "\u22DB\uFE00",
      "GJcy;": "\u0403",
      "gjcy;": "\u0453",
      "gnap;": "\u2A8A",
      "gneq;": "\u2A88",
      "Gopf;": "\u{1D53E}",
      "gopf;": "\u{1D558}",
      "Gscr;": "\u{1D4A2}",
      "gscr;": "\u210A",
      "gsim;": "\u2273",
      "gtcc;": "\u2AA7",
      "gvnE;": "\u2269\uFE00",
      "half;": "\xBD",
      "hArr;": "\u21D4",
      "harr;": "\u2194",
      "hbar;": "\u210F",
      "Hopf;": "\u210D",
      "hopf;": "\u{1D559}",
      "Hscr;": "\u210B",
      "hscr;": "\u{1D4BD}",
      Icirc: "\xCE",
      icirc: "\xEE",
      "Idot;": "\u0130",
      "IEcy;": "\u0415",
      "iecy;": "\u0435",
      iexcl: "\xA1",
      "imof;": "\u22B7",
      "IOcy;": "\u0401",
      "iocy;": "\u0451",
      "Iopf;": "\u{1D540}",
      "iopf;": "\u{1D55A}",
      "Iota;": "\u0399",
      "iota;": "\u03B9",
      "Iscr;": "\u2110",
      "iscr;": "\u{1D4BE}",
      "isin;": "\u2208",
      "Iuml;": "\xCF",
      "iuml;": "\xEF",
      "Jopf;": "\u{1D541}",
      "jopf;": "\u{1D55B}",
      "Jscr;": "\u{1D4A5}",
      "jscr;": "\u{1D4BF}",
      "KHcy;": "\u0425",
      "khcy;": "\u0445",
      "KJcy;": "\u040C",
      "kjcy;": "\u045C",
      "Kopf;": "\u{1D542}",
      "kopf;": "\u{1D55C}",
      "Kscr;": "\u{1D4A6}",
      "kscr;": "\u{1D4C0}",
      "Lang;": "\u27EA",
      "lang;": "\u27E8",
      laquo: "\xAB",
      "Larr;": "\u219E",
      "lArr;": "\u21D0",
      "larr;": "\u2190",
      "late;": "\u2AAD",
      "lcub;": "{",
      "ldca;": "\u2936",
      "ldsh;": "\u21B2",
      "leqq;": "\u2266",
      "lesg;": "\u22DA\uFE00",
      "lHar;": "\u2962",
      "LJcy;": "\u0409",
      "ljcy;": "\u0459",
      "lnap;": "\u2A89",
      "lneq;": "\u2A87",
      "Lopf;": "\u{1D543}",
      "lopf;": "\u{1D55D}",
      "lozf;": "\u29EB",
      "lpar;": "(",
      "Lscr;": "\u2112",
      "lscr;": "\u{1D4C1}",
      "lsim;": "\u2272",
      "lsqb;": "[",
      "ltcc;": "\u2AA6",
      "ltri;": "\u25C3",
      "lvnE;": "\u2268\uFE00",
      "macr;": "\xAF",
      "male;": "\u2642",
      "malt;": "\u2720",
      micro: "\xB5",
      "mlcp;": "\u2ADB",
      "mldr;": "\u2026",
      "Mopf;": "\u{1D544}",
      "mopf;": "\u{1D55E}",
      "Mscr;": "\u2133",
      "mscr;": "\u{1D4C2}",
      "nang;": "\u2220\u20D2",
      "napE;": "\u2A70\u0338",
      "nbsp;": "\xA0",
      "ncap;": "\u2A43",
      "ncup;": "\u2A42",
      "ngeq;": "\u2271",
      "nges;": "\u2A7E\u0338",
      "ngtr;": "\u226F",
      "nGtv;": "\u226B\u0338",
      "nisd;": "\u22FA",
      "NJcy;": "\u040A",
      "njcy;": "\u045A",
      "nldr;": "\u2025",
      "nleq;": "\u2270",
      "nles;": "\u2A7D\u0338",
      "nLtv;": "\u226A\u0338",
      "nmid;": "\u2224",
      "Nopf;": "\u2115",
      "nopf;": "\u{1D55F}",
      "npar;": "\u2226",
      "npre;": "\u2AAF\u0338",
      "nsce;": "\u2AB0\u0338",
      "Nscr;": "\u{1D4A9}",
      "nscr;": "\u{1D4C3}",
      "nsim;": "\u2241",
      "nsub;": "\u2284",
      "nsup;": "\u2285",
      "ntgl;": "\u2279",
      "ntlg;": "\u2278",
      "nvap;": "\u224D\u20D2",
      "nvge;": "\u2265\u20D2",
      "nvgt;": ">\u20D2",
      "nvle;": "\u2264\u20D2",
      "nvlt;": "<\u20D2",
      "oast;": "\u229B",
      "ocir;": "\u229A",
      Ocirc: "\xD4",
      ocirc: "\xF4",
      "odiv;": "\u2A38",
      "odot;": "\u2299",
      "ogon;": "\u02DB",
      "oint;": "\u222E",
      "omid;": "\u29B6",
      "Oopf;": "\u{1D546}",
      "oopf;": "\u{1D560}",
      "opar;": "\u29B7",
      "ordf;": "\xAA",
      "ordm;": "\xBA",
      "oror;": "\u2A56",
      "Oscr;": "\u{1D4AA}",
      "oscr;": "\u2134",
      "osol;": "\u2298",
      "Ouml;": "\xD6",
      "ouml;": "\xF6",
      "para;": "\xB6",
      "part;": "\u2202",
      "perp;": "\u22A5",
      "phiv;": "\u03D5",
      "plus;": "+",
      "Popf;": "\u2119",
      "popf;": "\u{1D561}",
      pound: "\xA3",
      "prap;": "\u2AB7",
      "prec;": "\u227A",
      "prnE;": "\u2AB5",
      "prod;": "\u220F",
      "prop;": "\u221D",
      "Pscr;": "\u{1D4AB}",
      "pscr;": "\u{1D4C5}",
      "qint;": "\u2A0C",
      "Qopf;": "\u211A",
      "qopf;": "\u{1D562}",
      "Qscr;": "\u{1D4AC}",
      "qscr;": "\u{1D4C6}",
      "QUOT;": '"',
      "quot;": '"',
      "race;": "\u223D\u0331",
      "Rang;": "\u27EB",
      "rang;": "\u27E9",
      raquo: "\xBB",
      "Rarr;": "\u21A0",
      "rArr;": "\u21D2",
      "rarr;": "\u2192",
      "rcub;": "}",
      "rdca;": "\u2937",
      "rdsh;": "\u21B3",
      "real;": "\u211C",
      "rect;": "\u25AD",
      "rHar;": "\u2964",
      "rhov;": "\u03F1",
      "ring;": "\u02DA",
      "Ropf;": "\u211D",
      "ropf;": "\u{1D563}",
      "rpar;": ")",
      "Rscr;": "\u211B",
      "rscr;": "\u{1D4C7}",
      "rsqb;": "]",
      "rtri;": "\u25B9",
      "scap;": "\u2AB8",
      "scnE;": "\u2AB6",
      "sdot;": "\u22C5",
      "sect;": "\xA7",
      "semi;": ";",
      "sext;": "\u2736",
      "SHcy;": "\u0428",
      "shcy;": "\u0448",
      "sime;": "\u2243",
      "simg;": "\u2A9E",
      "siml;": "\u2A9D",
      "smid;": "\u2223",
      "smte;": "\u2AAC",
      "solb;": "\u29C4",
      "Sopf;": "\u{1D54A}",
      "sopf;": "\u{1D564}",
      "spar;": "\u2225",
      "Sqrt;": "\u221A",
      "squf;": "\u25AA",
      "Sscr;": "\u{1D4AE}",
      "sscr;": "\u{1D4C8}",
      "Star;": "\u22C6",
      "star;": "\u2606",
      "subE;": "\u2AC5",
      "sube;": "\u2286",
      "succ;": "\u227B",
      "sung;": "\u266A",
      "sup1;": "\xB9",
      "sup2;": "\xB2",
      "sup3;": "\xB3",
      "supE;": "\u2AC6",
      "supe;": "\u2287",
      szlig: "\xDF",
      "tbrk;": "\u23B4",
      "tdot;": "\u20DB",
      THORN: "\xDE",
      thorn: "\xFE",
      times: "\xD7",
      "tint;": "\u222D",
      "toea;": "\u2928",
      "Topf;": "\u{1D54B}",
      "topf;": "\u{1D565}",
      "tosa;": "\u2929",
      "trie;": "\u225C",
      "Tscr;": "\u{1D4AF}",
      "tscr;": "\u{1D4C9}",
      "TScy;": "\u0426",
      "tscy;": "\u0446",
      "Uarr;": "\u219F",
      "uArr;": "\u21D1",
      "uarr;": "\u2191",
      Ucirc: "\xDB",
      ucirc: "\xFB",
      "uHar;": "\u2963",
      "Uopf;": "\u{1D54C}",
      "uopf;": "\u{1D566}",
      "Upsi;": "\u03D2",
      "upsi;": "\u03C5",
      "Uscr;": "\u{1D4B0}",
      "uscr;": "\u{1D4CA}",
      "utri;": "\u25B5",
      "Uuml;": "\xDC",
      "uuml;": "\xFC",
      "vArr;": "\u21D5",
      "varr;": "\u2195",
      "Vbar;": "\u2AEB",
      "vBar;": "\u2AE8",
      "Vert;": "\u2016",
      "vert;": "|",
      "Vopf;": "\u{1D54D}",
      "vopf;": "\u{1D567}",
      "Vscr;": "\u{1D4B1}",
      "vscr;": "\u{1D4CB}",
      "Wopf;": "\u{1D54E}",
      "wopf;": "\u{1D568}",
      "Wscr;": "\u{1D4B2}",
      "wscr;": "\u{1D4CC}",
      "xcap;": "\u22C2",
      "xcup;": "\u22C3",
      "xmap;": "\u27FC",
      "xnis;": "\u22FB",
      "Xopf;": "\u{1D54F}",
      "xopf;": "\u{1D569}",
      "Xscr;": "\u{1D4B3}",
      "xscr;": "\u{1D4CD}",
      "xvee;": "\u22C1",
      "YAcy;": "\u042F",
      "yacy;": "\u044F",
      "YIcy;": "\u0407",
      "yicy;": "\u0457",
      "Yopf;": "\u{1D550}",
      "yopf;": "\u{1D56A}",
      "Yscr;": "\u{1D4B4}",
      "yscr;": "\u{1D4CE}",
      "YUcy;": "\u042E",
      "yucy;": "\u044E",
      "Yuml;": "\u0178",
      "yuml;": "\xFF",
      "Zdot;": "\u017B",
      "zdot;": "\u017C",
      "Zeta;": "\u0396",
      "zeta;": "\u03B6",
      "ZHcy;": "\u0416",
      "zhcy;": "\u0436",
      "Zopf;": "\u2124",
      "zopf;": "\u{1D56B}",
      "Zscr;": "\u{1D4B5}",
      "zscr;": "\u{1D4CF}",
      "zwnj;": "\u200C",
      Aacute: "\xC1",
      aacute: "\xE1",
      "Acirc;": "\xC2",
      "acirc;": "\xE2",
      "acute;": "\xB4",
      "AElig;": "\xC6",
      "aelig;": "\xE6",
      Agrave: "\xC0",
      agrave: "\xE0",
      "aleph;": "\u2135",
      "Alpha;": "\u0391",
      "alpha;": "\u03B1",
      "Amacr;": "\u0100",
      "amacr;": "\u0101",
      "amalg;": "\u2A3F",
      "angle;": "\u2220",
      "angrt;": "\u221F",
      "angst;": "\xC5",
      "Aogon;": "\u0104",
      "aogon;": "\u0105",
      "Aring;": "\xC5",
      "aring;": "\xE5",
      "asymp;": "\u2248",
      Atilde: "\xC3",
      atilde: "\xE3",
      "awint;": "\u2A11",
      "bcong;": "\u224C",
      "bdquo;": "\u201E",
      "bepsi;": "\u03F6",
      "blank;": "\u2423",
      "blk12;": "\u2592",
      "blk14;": "\u2591",
      "blk34;": "\u2593",
      "block;": "\u2588",
      "boxDL;": "\u2557",
      "boxDl;": "\u2556",
      "boxdL;": "\u2555",
      "boxdl;": "\u2510",
      "boxDR;": "\u2554",
      "boxDr;": "\u2553",
      "boxdR;": "\u2552",
      "boxdr;": "\u250C",
      "boxHD;": "\u2566",
      "boxHd;": "\u2564",
      "boxhD;": "\u2565",
      "boxhd;": "\u252C",
      "boxHU;": "\u2569",
      "boxHu;": "\u2567",
      "boxhU;": "\u2568",
      "boxhu;": "\u2534",
      "boxUL;": "\u255D",
      "boxUl;": "\u255C",
      "boxuL;": "\u255B",
      "boxul;": "\u2518",
      "boxUR;": "\u255A",
      "boxUr;": "\u2559",
      "boxuR;": "\u2558",
      "boxur;": "\u2514",
      "boxVH;": "\u256C",
      "boxVh;": "\u256B",
      "boxvH;": "\u256A",
      "boxvh;": "\u253C",
      "boxVL;": "\u2563",
      "boxVl;": "\u2562",
      "boxvL;": "\u2561",
      "boxvl;": "\u2524",
      "boxVR;": "\u2560",
      "boxVr;": "\u255F",
      "boxvR;": "\u255E",
      "boxvr;": "\u251C",
      "Breve;": "\u02D8",
      "breve;": "\u02D8",
      brvbar: "\xA6",
      "bsemi;": "\u204F",
      "bsime;": "\u22CD",
      "bsolb;": "\u29C5",
      "bumpE;": "\u2AAE",
      "bumpe;": "\u224F",
      "caret;": "\u2041",
      "caron;": "\u02C7",
      "ccaps;": "\u2A4D",
      Ccedil: "\xC7",
      ccedil: "\xE7",
      "Ccirc;": "\u0108",
      "ccirc;": "\u0109",
      "ccups;": "\u2A4C",
      "cedil;": "\xB8",
      "check;": "\u2713",
      "clubs;": "\u2663",
      "Colon;": "\u2237",
      "colon;": ":",
      "comma;": ",",
      "crarr;": "\u21B5",
      "Cross;": "\u2A2F",
      "cross;": "\u2717",
      "csube;": "\u2AD1",
      "csupe;": "\u2AD2",
      "ctdot;": "\u22EF",
      "cuepr;": "\u22DE",
      "cuesc;": "\u22DF",
      "cupor;": "\u2A45",
      curren: "\xA4",
      "cuvee;": "\u22CE",
      "cuwed;": "\u22CF",
      "cwint;": "\u2231",
      "Dashv;": "\u2AE4",
      "dashv;": "\u22A3",
      "dblac;": "\u02DD",
      "ddarr;": "\u21CA",
      "Delta;": "\u0394",
      "delta;": "\u03B4",
      "dharl;": "\u21C3",
      "dharr;": "\u21C2",
      "diams;": "\u2666",
      "disin;": "\u22F2",
      divide: "\xF7",
      "doteq;": "\u2250",
      "dtdot;": "\u22F1",
      "dtrif;": "\u25BE",
      "duarr;": "\u21F5",
      "duhar;": "\u296F",
      Eacute: "\xC9",
      eacute: "\xE9",
      "Ecirc;": "\xCA",
      "ecirc;": "\xEA",
      "eDDot;": "\u2A77",
      "efDot;": "\u2252",
      Egrave: "\xC8",
      egrave: "\xE8",
      "Emacr;": "\u0112",
      "emacr;": "\u0113",
      "empty;": "\u2205",
      "Eogon;": "\u0118",
      "eogon;": "\u0119",
      "eplus;": "\u2A71",
      "epsiv;": "\u03F5",
      "eqsim;": "\u2242",
      "Equal;": "\u2A75",
      "equiv;": "\u2261",
      "erarr;": "\u2971",
      "erDot;": "\u2253",
      "esdot;": "\u2250",
      "exist;": "\u2203",
      "fflig;": "\uFB00",
      "filig;": "\uFB01",
      "fjlig;": "fj",
      "fllig;": "\uFB02",
      "fltns;": "\u25B1",
      "forkv;": "\u2AD9",
      frac12: "\xBD",
      frac14: "\xBC",
      frac34: "\xBE",
      "frasl;": "\u2044",
      "frown;": "\u2322",
      "Gamma;": "\u0393",
      "gamma;": "\u03B3",
      "Gcirc;": "\u011C",
      "gcirc;": "\u011D",
      "gescc;": "\u2AA9",
      "gimel;": "\u2137",
      "gneqq;": "\u2269",
      "gnsim;": "\u22E7",
      "grave;": "`",
      "gsime;": "\u2A8E",
      "gsiml;": "\u2A90",
      "gtcir;": "\u2A7A",
      "gtdot;": "\u22D7",
      "Hacek;": "\u02C7",
      "harrw;": "\u21AD",
      "Hcirc;": "\u0124",
      "hcirc;": "\u0125",
      "hoarr;": "\u21FF",
      Iacute: "\xCD",
      iacute: "\xED",
      "Icirc;": "\xCE",
      "icirc;": "\xEE",
      "iexcl;": "\xA1",
      Igrave: "\xCC",
      igrave: "\xEC",
      "iiint;": "\u222D",
      "iiota;": "\u2129",
      "IJlig;": "\u0132",
      "ijlig;": "\u0133",
      "Imacr;": "\u012A",
      "imacr;": "\u012B",
      "image;": "\u2111",
      "imath;": "\u0131",
      "imped;": "\u01B5",
      "infin;": "\u221E",
      "Iogon;": "\u012E",
      "iogon;": "\u012F",
      "iprod;": "\u2A3C",
      iquest: "\xBF",
      "isinE;": "\u22F9",
      "isins;": "\u22F4",
      "isinv;": "\u2208",
      "Iukcy;": "\u0406",
      "iukcy;": "\u0456",
      "Jcirc;": "\u0134",
      "jcirc;": "\u0135",
      "jmath;": "\u0237",
      "Jukcy;": "\u0404",
      "jukcy;": "\u0454",
      "Kappa;": "\u039A",
      "kappa;": "\u03BA",
      "lAarr;": "\u21DA",
      "langd;": "\u2991",
      "laquo;": "\xAB",
      "larrb;": "\u21E4",
      "lates;": "\u2AAD\uFE00",
      "lBarr;": "\u290E",
      "lbarr;": "\u290C",
      "lbbrk;": "\u2772",
      "lbrke;": "\u298B",
      "lceil;": "\u2308",
      "ldquo;": "\u201C",
      "lescc;": "\u2AA8",
      "lhard;": "\u21BD",
      "lharu;": "\u21BC",
      "lhblk;": "\u2584",
      "llarr;": "\u21C7",
      "lltri;": "\u25FA",
      "lneqq;": "\u2268",
      "lnsim;": "\u22E6",
      "loang;": "\u27EC",
      "loarr;": "\u21FD",
      "lobrk;": "\u27E6",
      "lopar;": "\u2985",
      "lrarr;": "\u21C6",
      "lrhar;": "\u21CB",
      "lrtri;": "\u22BF",
      "lsime;": "\u2A8D",
      "lsimg;": "\u2A8F",
      "lsquo;": "\u2018",
      "ltcir;": "\u2A79",
      "ltdot;": "\u22D6",
      "ltrie;": "\u22B4",
      "ltrif;": "\u25C2",
      "mdash;": "\u2014",
      "mDDot;": "\u223A",
      "micro;": "\xB5",
      middot: "\xB7",
      "minus;": "\u2212",
      "mumap;": "\u22B8",
      "nabla;": "\u2207",
      "napid;": "\u224B\u0338",
      "napos;": "\u0149",
      "natur;": "\u266E",
      "nbump;": "\u224E\u0338",
      "ncong;": "\u2247",
      "ndash;": "\u2013",
      "neArr;": "\u21D7",
      "nearr;": "\u2197",
      "nedot;": "\u2250\u0338",
      "nesim;": "\u2242\u0338",
      "ngeqq;": "\u2267\u0338",
      "ngsim;": "\u2275",
      "nhArr;": "\u21CE",
      "nharr;": "\u21AE",
      "nhpar;": "\u2AF2",
      "nlArr;": "\u21CD",
      "nlarr;": "\u219A",
      "nleqq;": "\u2266\u0338",
      "nless;": "\u226E",
      "nlsim;": "\u2274",
      "nltri;": "\u22EA",
      "notin;": "\u2209",
      "notni;": "\u220C",
      "npart;": "\u2202\u0338",
      "nprec;": "\u2280",
      "nrArr;": "\u21CF",
      "nrarr;": "\u219B",
      "nrtri;": "\u22EB",
      "nsime;": "\u2244",
      "nsmid;": "\u2224",
      "nspar;": "\u2226",
      "nsubE;": "\u2AC5\u0338",
      "nsube;": "\u2288",
      "nsucc;": "\u2281",
      "nsupE;": "\u2AC6\u0338",
      "nsupe;": "\u2289",
      Ntilde: "\xD1",
      ntilde: "\xF1",
      "numsp;": "\u2007",
      "nvsim;": "\u223C\u20D2",
      "nwArr;": "\u21D6",
      "nwarr;": "\u2196",
      Oacute: "\xD3",
      oacute: "\xF3",
      "Ocirc;": "\xD4",
      "ocirc;": "\xF4",
      "odash;": "\u229D",
      "OElig;": "\u0152",
      "oelig;": "\u0153",
      "ofcir;": "\u29BF",
      Ograve: "\xD2",
      ograve: "\xF2",
      "ohbar;": "\u29B5",
      "olarr;": "\u21BA",
      "olcir;": "\u29BE",
      "oline;": "\u203E",
      "Omacr;": "\u014C",
      "omacr;": "\u014D",
      "Omega;": "\u03A9",
      "omega;": "\u03C9",
      "operp;": "\u29B9",
      "oplus;": "\u2295",
      "orarr;": "\u21BB",
      "order;": "\u2134",
      Oslash: "\xD8",
      oslash: "\xF8",
      Otilde: "\xD5",
      otilde: "\xF5",
      "ovbar;": "\u233D",
      "parsl;": "\u2AFD",
      "phone;": "\u260E",
      "plusb;": "\u229E",
      "pluse;": "\u2A72",
      plusmn: "\xB1",
      "pound;": "\xA3",
      "prcue;": "\u227C",
      "Prime;": "\u2033",
      "prime;": "\u2032",
      "prnap;": "\u2AB9",
      "prsim;": "\u227E",
      "quest;": "?",
      "rAarr;": "\u21DB",
      "radic;": "\u221A",
      "rangd;": "\u2992",
      "range;": "\u29A5",
      "raquo;": "\xBB",
      "rarrb;": "\u21E5",
      "rarrc;": "\u2933",
      "rarrw;": "\u219D",
      "ratio;": "\u2236",
      "RBarr;": "\u2910",
      "rBarr;": "\u290F",
      "rbarr;": "\u290D",
      "rbbrk;": "\u2773",
      "rbrke;": "\u298C",
      "rceil;": "\u2309",
      "rdquo;": "\u201D",
      "reals;": "\u211D",
      "rhard;": "\u21C1",
      "rharu;": "\u21C0",
      "rlarr;": "\u21C4",
      "rlhar;": "\u21CC",
      "rnmid;": "\u2AEE",
      "roang;": "\u27ED",
      "roarr;": "\u21FE",
      "robrk;": "\u27E7",
      "ropar;": "\u2986",
      "rrarr;": "\u21C9",
      "rsquo;": "\u2019",
      "rtrie;": "\u22B5",
      "rtrif;": "\u25B8",
      "sbquo;": "\u201A",
      "sccue;": "\u227D",
      "Scirc;": "\u015C",
      "scirc;": "\u015D",
      "scnap;": "\u2ABA",
      "scsim;": "\u227F",
      "sdotb;": "\u22A1",
      "sdote;": "\u2A66",
      "seArr;": "\u21D8",
      "searr;": "\u2198",
      "setmn;": "\u2216",
      "sharp;": "\u266F",
      "Sigma;": "\u03A3",
      "sigma;": "\u03C3",
      "simeq;": "\u2243",
      "simgE;": "\u2AA0",
      "simlE;": "\u2A9F",
      "simne;": "\u2246",
      "slarr;": "\u2190",
      "smile;": "\u2323",
      "smtes;": "\u2AAC\uFE00",
      "sqcap;": "\u2293",
      "sqcup;": "\u2294",
      "sqsub;": "\u228F",
      "sqsup;": "\u2290",
      "srarr;": "\u2192",
      "starf;": "\u2605",
      "strns;": "\xAF",
      "subnE;": "\u2ACB",
      "subne;": "\u228A",
      "supnE;": "\u2ACC",
      "supne;": "\u228B",
      "swArr;": "\u21D9",
      "swarr;": "\u2199",
      "szlig;": "\xDF",
      "Theta;": "\u0398",
      "theta;": "\u03B8",
      "thkap;": "\u2248",
      "THORN;": "\xDE",
      "thorn;": "\xFE",
      "Tilde;": "\u223C",
      "tilde;": "\u02DC",
      "times;": "\xD7",
      "TRADE;": "\u2122",
      "trade;": "\u2122",
      "trisb;": "\u29CD",
      "TSHcy;": "\u040B",
      "tshcy;": "\u045B",
      "twixt;": "\u226C",
      Uacute: "\xDA",
      uacute: "\xFA",
      "Ubrcy;": "\u040E",
      "ubrcy;": "\u045E",
      "Ucirc;": "\xDB",
      "ucirc;": "\xFB",
      "udarr;": "\u21C5",
      "udhar;": "\u296E",
      Ugrave: "\xD9",
      ugrave: "\xF9",
      "uharl;": "\u21BF",
      "uharr;": "\u21BE",
      "uhblk;": "\u2580",
      "ultri;": "\u25F8",
      "Umacr;": "\u016A",
      "umacr;": "\u016B",
      "Union;": "\u22C3",
      "Uogon;": "\u0172",
      "uogon;": "\u0173",
      "uplus;": "\u228E",
      "upsih;": "\u03D2",
      "UpTee;": "\u22A5",
      "Uring;": "\u016E",
      "uring;": "\u016F",
      "urtri;": "\u25F9",
      "utdot;": "\u22F0",
      "utrif;": "\u25B4",
      "uuarr;": "\u21C8",
      "varpi;": "\u03D6",
      "vBarv;": "\u2AE9",
      "VDash;": "\u22AB",
      "Vdash;": "\u22A9",
      "vDash;": "\u22A8",
      "vdash;": "\u22A2",
      "veeeq;": "\u225A",
      "vltri;": "\u22B2",
      "vnsub;": "\u2282\u20D2",
      "vnsup;": "\u2283\u20D2",
      "vprop;": "\u221D",
      "vrtri;": "\u22B3",
      "Wcirc;": "\u0174",
      "wcirc;": "\u0175",
      "Wedge;": "\u22C0",
      "wedge;": "\u2227",
      "xcirc;": "\u25EF",
      "xdtri;": "\u25BD",
      "xhArr;": "\u27FA",
      "xharr;": "\u27F7",
      "xlArr;": "\u27F8",
      "xlarr;": "\u27F5",
      "xodot;": "\u2A00",
      "xrArr;": "\u27F9",
      "xrarr;": "\u27F6",
      "xutri;": "\u25B3",
      Yacute: "\xDD",
      yacute: "\xFD",
      "Ycirc;": "\u0176",
      "ycirc;": "\u0177",
      "Aacute;": "\xC1",
      "aacute;": "\xE1",
      "Abreve;": "\u0102",
      "abreve;": "\u0103",
      "Agrave;": "\xC0",
      "agrave;": "\xE0",
      "andand;": "\u2A55",
      "angmsd;": "\u2221",
      "angsph;": "\u2222",
      "apacir;": "\u2A6F",
      "approx;": "\u2248",
      "Assign;": "\u2254",
      "Atilde;": "\xC3",
      "atilde;": "\xE3",
      "barvee;": "\u22BD",
      "Barwed;": "\u2306",
      "barwed;": "\u2305",
      "becaus;": "\u2235",
      "bernou;": "\u212C",
      "bigcap;": "\u22C2",
      "bigcup;": "\u22C3",
      "bigvee;": "\u22C1",
      "bkarow;": "\u290D",
      "bottom;": "\u22A5",
      "bowtie;": "\u22C8",
      "boxbox;": "\u29C9",
      "bprime;": "\u2035",
      "brvbar;": "\xA6",
      "bullet;": "\u2022",
      "Bumpeq;": "\u224E",
      "bumpeq;": "\u224F",
      "Cacute;": "\u0106",
      "cacute;": "\u0107",
      "capand;": "\u2A44",
      "capcap;": "\u2A4B",
      "capcup;": "\u2A47",
      "capdot;": "\u2A40",
      "Ccaron;": "\u010C",
      "ccaron;": "\u010D",
      "Ccedil;": "\xC7",
      "ccedil;": "\xE7",
      "circeq;": "\u2257",
      "cirmid;": "\u2AEF",
      "Colone;": "\u2A74",
      "colone;": "\u2254",
      "commat;": "@",
      "compfn;": "\u2218",
      "Conint;": "\u222F",
      "conint;": "\u222E",
      "coprod;": "\u2210",
      "copysr;": "\u2117",
      "cularr;": "\u21B6",
      "CupCap;": "\u224D",
      "cupcap;": "\u2A46",
      "cupcup;": "\u2A4A",
      "cupdot;": "\u228D",
      "curarr;": "\u21B7",
      "curren;": "\xA4",
      "cylcty;": "\u232D",
      "Dagger;": "\u2021",
      "dagger;": "\u2020",
      "daleth;": "\u2138",
      "Dcaron;": "\u010E",
      "dcaron;": "\u010F",
      "dfisht;": "\u297F",
      "divide;": "\xF7",
      "divonx;": "\u22C7",
      "dlcorn;": "\u231E",
      "dlcrop;": "\u230D",
      "dollar;": "$",
      "DotDot;": "\u20DC",
      "drcorn;": "\u231F",
      "drcrop;": "\u230C",
      "Dstrok;": "\u0110",
      "dstrok;": "\u0111",
      "Eacute;": "\xC9",
      "eacute;": "\xE9",
      "easter;": "\u2A6E",
      "Ecaron;": "\u011A",
      "ecaron;": "\u011B",
      "ecolon;": "\u2255",
      "Egrave;": "\xC8",
      "egrave;": "\xE8",
      "egsdot;": "\u2A98",
      "elsdot;": "\u2A97",
      "emptyv;": "\u2205",
      "emsp13;": "\u2004",
      "emsp14;": "\u2005",
      "eparsl;": "\u29E3",
      "eqcirc;": "\u2256",
      "equals;": "=",
      "equest;": "\u225F",
      "Exists;": "\u2203",
      "female;": "\u2640",
      "ffilig;": "\uFB03",
      "ffllig;": "\uFB04",
      "ForAll;": "\u2200",
      "forall;": "\u2200",
      "frac12;": "\xBD",
      "frac13;": "\u2153",
      "frac14;": "\xBC",
      "frac15;": "\u2155",
      "frac16;": "\u2159",
      "frac18;": "\u215B",
      "frac23;": "\u2154",
      "frac25;": "\u2156",
      "frac34;": "\xBE",
      "frac35;": "\u2157",
      "frac38;": "\u215C",
      "frac45;": "\u2158",
      "frac56;": "\u215A",
      "frac58;": "\u215D",
      "frac78;": "\u215E",
      "gacute;": "\u01F5",
      "Gammad;": "\u03DC",
      "gammad;": "\u03DD",
      "Gbreve;": "\u011E",
      "gbreve;": "\u011F",
      "Gcedil;": "\u0122",
      "gesdot;": "\u2A80",
      "gesles;": "\u2A94",
      "gtlPar;": "\u2995",
      "gtrarr;": "\u2978",
      "gtrdot;": "\u22D7",
      "gtrsim;": "\u2273",
      "hairsp;": "\u200A",
      "hamilt;": "\u210B",
      "HARDcy;": "\u042A",
      "hardcy;": "\u044A",
      "hearts;": "\u2665",
      "hellip;": "\u2026",
      "hercon;": "\u22B9",
      "homtht;": "\u223B",
      "horbar;": "\u2015",
      "hslash;": "\u210F",
      "Hstrok;": "\u0126",
      "hstrok;": "\u0127",
      "hybull;": "\u2043",
      "hyphen;": "\u2010",
      "Iacute;": "\xCD",
      "iacute;": "\xED",
      "Igrave;": "\xCC",
      "igrave;": "\xEC",
      "iiiint;": "\u2A0C",
      "iinfin;": "\u29DC",
      "incare;": "\u2105",
      "inodot;": "\u0131",
      "intcal;": "\u22BA",
      "iquest;": "\xBF",
      "isinsv;": "\u22F3",
      "Itilde;": "\u0128",
      "itilde;": "\u0129",
      "Jsercy;": "\u0408",
      "jsercy;": "\u0458",
      "kappav;": "\u03F0",
      "Kcedil;": "\u0136",
      "kcedil;": "\u0137",
      "kgreen;": "\u0138",
      "Lacute;": "\u0139",
      "lacute;": "\u013A",
      "lagran;": "\u2112",
      "Lambda;": "\u039B",
      "lambda;": "\u03BB",
      "langle;": "\u27E8",
      "larrfs;": "\u291D",
      "larrhk;": "\u21A9",
      "larrlp;": "\u21AB",
      "larrpl;": "\u2939",
      "larrtl;": "\u21A2",
      "lAtail;": "\u291B",
      "latail;": "\u2919",
      "lbrace;": "{",
      "lbrack;": "[",
      "Lcaron;": "\u013D",
      "lcaron;": "\u013E",
      "Lcedil;": "\u013B",
      "lcedil;": "\u013C",
      "ldquor;": "\u201E",
      "lesdot;": "\u2A7F",
      "lesges;": "\u2A93",
      "lfisht;": "\u297C",
      "lfloor;": "\u230A",
      "lharul;": "\u296A",
      "llhard;": "\u296B",
      "Lmidot;": "\u013F",
      "lmidot;": "\u0140",
      "lmoust;": "\u23B0",
      "loplus;": "\u2A2D",
      "lowast;": "\u2217",
      "lowbar;": "_",
      "lparlt;": "\u2993",
      "lrhard;": "\u296D",
      "lsaquo;": "\u2039",
      "lsquor;": "\u201A",
      "Lstrok;": "\u0141",
      "lstrok;": "\u0142",
      "lthree;": "\u22CB",
      "ltimes;": "\u22C9",
      "ltlarr;": "\u2976",
      "ltrPar;": "\u2996",
      "mapsto;": "\u21A6",
      "marker;": "\u25AE",
      "mcomma;": "\u2A29",
      "midast;": "*",
      "midcir;": "\u2AF0",
      "middot;": "\xB7",
      "minusb;": "\u229F",
      "minusd;": "\u2238",
      "mnplus;": "\u2213",
      "models;": "\u22A7",
      "mstpos;": "\u223E",
      "Nacute;": "\u0143",
      "nacute;": "\u0144",
      "nbumpe;": "\u224F\u0338",
      "Ncaron;": "\u0147",
      "ncaron;": "\u0148",
      "Ncedil;": "\u0145",
      "ncedil;": "\u0146",
      "nearhk;": "\u2924",
      "nequiv;": "\u2262",
      "nesear;": "\u2928",
      "nexist;": "\u2204",
      "nltrie;": "\u22EC",
      "notinE;": "\u22F9\u0338",
      "nparsl;": "\u2AFD\u20E5",
      "nprcue;": "\u22E0",
      "nrarrc;": "\u2933\u0338",
      "nrarrw;": "\u219D\u0338",
      "nrtrie;": "\u22ED",
      "nsccue;": "\u22E1",
      "nsimeq;": "\u2244",
      "Ntilde;": "\xD1",
      "ntilde;": "\xF1",
      "numero;": "\u2116",
      "nVDash;": "\u22AF",
      "nVdash;": "\u22AE",
      "nvDash;": "\u22AD",
      "nvdash;": "\u22AC",
      "nvHarr;": "\u2904",
      "nvlArr;": "\u2902",
      "nvrArr;": "\u2903",
      "nwarhk;": "\u2923",
      "nwnear;": "\u2927",
      "Oacute;": "\xD3",
      "oacute;": "\xF3",
      "Odblac;": "\u0150",
      "odblac;": "\u0151",
      "odsold;": "\u29BC",
      "Ograve;": "\xD2",
      "ograve;": "\xF2",
      "ominus;": "\u2296",
      "origof;": "\u22B6",
      "Oslash;": "\xD8",
      "oslash;": "\xF8",
      "Otilde;": "\xD5",
      "otilde;": "\xF5",
      "Otimes;": "\u2A37",
      "otimes;": "\u2297",
      "parsim;": "\u2AF3",
      "percnt;": "%",
      "period;": ".",
      "permil;": "\u2030",
      "phmmat;": "\u2133",
      "planck;": "\u210F",
      "plankv;": "\u210F",
      "plusdo;": "\u2214",
      "plusdu;": "\u2A25",
      "plusmn;": "\xB1",
      "preceq;": "\u2AAF",
      "primes;": "\u2119",
      "prnsim;": "\u22E8",
      "propto;": "\u221D",
      "prurel;": "\u22B0",
      "puncsp;": "\u2008",
      "qprime;": "\u2057",
      "Racute;": "\u0154",
      "racute;": "\u0155",
      "rangle;": "\u27E9",
      "rarrap;": "\u2975",
      "rarrfs;": "\u291E",
      "rarrhk;": "\u21AA",
      "rarrlp;": "\u21AC",
      "rarrpl;": "\u2945",
      "Rarrtl;": "\u2916",
      "rarrtl;": "\u21A3",
      "rAtail;": "\u291C",
      "ratail;": "\u291A",
      "rbrace;": "}",
      "rbrack;": "]",
      "Rcaron;": "\u0158",
      "rcaron;": "\u0159",
      "Rcedil;": "\u0156",
      "rcedil;": "\u0157",
      "rdquor;": "\u201D",
      "rfisht;": "\u297D",
      "rfloor;": "\u230B",
      "rharul;": "\u296C",
      "rmoust;": "\u23B1",
      "roplus;": "\u2A2E",
      "rpargt;": "\u2994",
      "rsaquo;": "\u203A",
      "rsquor;": "\u2019",
      "rthree;": "\u22CC",
      "rtimes;": "\u22CA",
      "Sacute;": "\u015A",
      "sacute;": "\u015B",
      "Scaron;": "\u0160",
      "scaron;": "\u0161",
      "Scedil;": "\u015E",
      "scedil;": "\u015F",
      "scnsim;": "\u22E9",
      "searhk;": "\u2925",
      "seswar;": "\u2929",
      "sfrown;": "\u2322",
      "SHCHcy;": "\u0429",
      "shchcy;": "\u0449",
      "sigmaf;": "\u03C2",
      "sigmav;": "\u03C2",
      "simdot;": "\u2A6A",
      "smashp;": "\u2A33",
      "SOFTcy;": "\u042C",
      "softcy;": "\u044C",
      "solbar;": "\u233F",
      "spades;": "\u2660",
      "sqcaps;": "\u2293\uFE00",
      "sqcups;": "\u2294\uFE00",
      "sqsube;": "\u2291",
      "sqsupe;": "\u2292",
      "Square;": "\u25A1",
      "square;": "\u25A1",
      "squarf;": "\u25AA",
      "ssetmn;": "\u2216",
      "ssmile;": "\u2323",
      "sstarf;": "\u22C6",
      "subdot;": "\u2ABD",
      "Subset;": "\u22D0",
      "subset;": "\u2282",
      "subsim;": "\u2AC7",
      "subsub;": "\u2AD5",
      "subsup;": "\u2AD3",
      "succeq;": "\u2AB0",
      "supdot;": "\u2ABE",
      "Supset;": "\u22D1",
      "supset;": "\u2283",
      "supsim;": "\u2AC8",
      "supsub;": "\u2AD4",
      "supsup;": "\u2AD6",
      "swarhk;": "\u2926",
      "swnwar;": "\u292A",
      "target;": "\u2316",
      "Tcaron;": "\u0164",
      "tcaron;": "\u0165",
      "Tcedil;": "\u0162",
      "tcedil;": "\u0163",
      "telrec;": "\u2315",
      "there4;": "\u2234",
      "thetav;": "\u03D1",
      "thinsp;": "\u2009",
      "thksim;": "\u223C",
      "timesb;": "\u22A0",
      "timesd;": "\u2A30",
      "topbot;": "\u2336",
      "topcir;": "\u2AF1",
      "tprime;": "\u2034",
      "tridot;": "\u25EC",
      "Tstrok;": "\u0166",
      "tstrok;": "\u0167",
      "Uacute;": "\xDA",
      "uacute;": "\xFA",
      "Ubreve;": "\u016C",
      "ubreve;": "\u016D",
      "Udblac;": "\u0170",
      "udblac;": "\u0171",
      "ufisht;": "\u297E",
      "Ugrave;": "\xD9",
      "ugrave;": "\xF9",
      "ulcorn;": "\u231C",
      "ulcrop;": "\u230F",
      "urcorn;": "\u231D",
      "urcrop;": "\u230E",
      "Utilde;": "\u0168",
      "utilde;": "\u0169",
      "vangrt;": "\u299C",
      "varphi;": "\u03D5",
      "varrho;": "\u03F1",
      "Vdashl;": "\u2AE6",
      "veebar;": "\u22BB",
      "vellip;": "\u22EE",
      "Verbar;": "\u2016",
      "verbar;": "|",
      "vsubnE;": "\u2ACB\uFE00",
      "vsubne;": "\u228A\uFE00",
      "vsupnE;": "\u2ACC\uFE00",
      "vsupne;": "\u228B\uFE00",
      "Vvdash;": "\u22AA",
      "wedbar;": "\u2A5F",
      "wedgeq;": "\u2259",
      "weierp;": "\u2118",
      "wreath;": "\u2240",
      "xoplus;": "\u2A01",
      "xotime;": "\u2A02",
      "xsqcup;": "\u2A06",
      "xuplus;": "\u2A04",
      "xwedge;": "\u22C0",
      "Yacute;": "\xDD",
      "yacute;": "\xFD",
      "Zacute;": "\u0179",
      "zacute;": "\u017A",
      "Zcaron;": "\u017D",
      "zcaron;": "\u017E",
      "zeetrf;": "\u2128",
      "alefsym;": "\u2135",
      "angrtvb;": "\u22BE",
      "angzarr;": "\u237C",
      "asympeq;": "\u224D",
      "backsim;": "\u223D",
      "Because;": "\u2235",
      "because;": "\u2235",
      "bemptyv;": "\u29B0",
      "between;": "\u226C",
      "bigcirc;": "\u25EF",
      "bigodot;": "\u2A00",
      "bigstar;": "\u2605",
      "bnequiv;": "\u2261\u20E5",
      "boxplus;": "\u229E",
      "Cayleys;": "\u212D",
      "Cconint;": "\u2230",
      "ccupssm;": "\u2A50",
      "Cedilla;": "\xB8",
      "cemptyv;": "\u29B2",
      "cirscir;": "\u29C2",
      "coloneq;": "\u2254",
      "congdot;": "\u2A6D",
      "cudarrl;": "\u2938",
      "cudarrr;": "\u2935",
      "cularrp;": "\u293D",
      "curarrm;": "\u293C",
      "dbkarow;": "\u290F",
      "ddagger;": "\u2021",
      "ddotseq;": "\u2A77",
      "demptyv;": "\u29B1",
      "Diamond;": "\u22C4",
      "diamond;": "\u22C4",
      "digamma;": "\u03DD",
      "dotplus;": "\u2214",
      "DownTee;": "\u22A4",
      "dwangle;": "\u29A6",
      "Element;": "\u2208",
      "Epsilon;": "\u0395",
      "epsilon;": "\u03B5",
      "eqcolon;": "\u2255",
      "equivDD;": "\u2A78",
      "gesdoto;": "\u2A82",
      "gtquest;": "\u2A7C",
      "gtrless;": "\u2277",
      "harrcir;": "\u2948",
      "Implies;": "\u21D2",
      "intprod;": "\u2A3C",
      "isindot;": "\u22F5",
      "larrbfs;": "\u291F",
      "larrsim;": "\u2973",
      "lbrksld;": "\u298F",
      "lbrkslu;": "\u298D",
      "ldrdhar;": "\u2967",
      "LeftTee;": "\u22A3",
      "lesdoto;": "\u2A81",
      "lessdot;": "\u22D6",
      "lessgtr;": "\u2276",
      "lesssim;": "\u2272",
      "lotimes;": "\u2A34",
      "lozenge;": "\u25CA",
      "ltquest;": "\u2A7B",
      "luruhar;": "\u2966",
      "maltese;": "\u2720",
      "minusdu;": "\u2A2A",
      "napprox;": "\u2249",
      "natural;": "\u266E",
      "nearrow;": "\u2197",
      "NewLine;": "\n",
      "nexists;": "\u2204",
      "NoBreak;": "\u2060",
      "notinva;": "\u2209",
      "notinvb;": "\u22F7",
      "notinvc;": "\u22F6",
      "NotLess;": "\u226E",
      "notniva;": "\u220C",
      "notnivb;": "\u22FE",
      "notnivc;": "\u22FD",
      "npolint;": "\u2A14",
      "npreceq;": "\u2AAF\u0338",
      "nsqsube;": "\u22E2",
      "nsqsupe;": "\u22E3",
      "nsubset;": "\u2282\u20D2",
      "nsucceq;": "\u2AB0\u0338",
      "nsupset;": "\u2283\u20D2",
      "nvinfin;": "\u29DE",
      "nvltrie;": "\u22B4\u20D2",
      "nvrtrie;": "\u22B5\u20D2",
      "nwarrow;": "\u2196",
      "olcross;": "\u29BB",
      "Omicron;": "\u039F",
      "omicron;": "\u03BF",
      "orderof;": "\u2134",
      "orslope;": "\u2A57",
      "OverBar;": "\u203E",
      "pertenk;": "\u2031",
      "planckh;": "\u210E",
      "pluscir;": "\u2A22",
      "plussim;": "\u2A26",
      "plustwo;": "\u2A27",
      "precsim;": "\u227E",
      "Product;": "\u220F",
      "quatint;": "\u2A16",
      "questeq;": "\u225F",
      "rarrbfs;": "\u2920",
      "rarrsim;": "\u2974",
      "rbrksld;": "\u298E",
      "rbrkslu;": "\u2990",
      "rdldhar;": "\u2969",
      "realine;": "\u211B",
      "rotimes;": "\u2A35",
      "ruluhar;": "\u2968",
      "searrow;": "\u2198",
      "simplus;": "\u2A24",
      "simrarr;": "\u2972",
      "subedot;": "\u2AC3",
      "submult;": "\u2AC1",
      "subplus;": "\u2ABF",
      "subrarr;": "\u2979",
      "succsim;": "\u227F",
      "supdsub;": "\u2AD8",
      "supedot;": "\u2AC4",
      "suphsol;": "\u27C9",
      "suphsub;": "\u2AD7",
      "suplarr;": "\u297B",
      "supmult;": "\u2AC2",
      "supplus;": "\u2AC0",
      "swarrow;": "\u2199",
      "topfork;": "\u2ADA",
      "triplus;": "\u2A39",
      "tritime;": "\u2A3B",
      "UpArrow;": "\u2191",
      "Uparrow;": "\u21D1",
      "uparrow;": "\u2191",
      "Upsilon;": "\u03A5",
      "upsilon;": "\u03C5",
      "uwangle;": "\u29A7",
      "vzigzag;": "\u299A",
      "zigrarr;": "\u21DD",
      "andslope;": "\u2A58",
      "angmsdaa;": "\u29A8",
      "angmsdab;": "\u29A9",
      "angmsdac;": "\u29AA",
      "angmsdad;": "\u29AB",
      "angmsdae;": "\u29AC",
      "angmsdaf;": "\u29AD",
      "angmsdag;": "\u29AE",
      "angmsdah;": "\u29AF",
      "angrtvbd;": "\u299D",
      "approxeq;": "\u224A",
      "awconint;": "\u2233",
      "backcong;": "\u224C",
      "barwedge;": "\u2305",
      "bbrktbrk;": "\u23B6",
      "bigoplus;": "\u2A01",
      "bigsqcup;": "\u2A06",
      "biguplus;": "\u2A04",
      "bigwedge;": "\u22C0",
      "boxminus;": "\u229F",
      "boxtimes;": "\u22A0",
      "bsolhsub;": "\u27C8",
      "capbrcup;": "\u2A49",
      "circledR;": "\xAE",
      "circledS;": "\u24C8",
      "cirfnint;": "\u2A10",
      "clubsuit;": "\u2663",
      "cupbrcap;": "\u2A48",
      "curlyvee;": "\u22CE",
      "cwconint;": "\u2232",
      "DDotrahd;": "\u2911",
      "doteqdot;": "\u2251",
      "DotEqual;": "\u2250",
      "dotminus;": "\u2238",
      "drbkarow;": "\u2910",
      "dzigrarr;": "\u27FF",
      "elinters;": "\u23E7",
      "emptyset;": "\u2205",
      "eqvparsl;": "\u29E5",
      "fpartint;": "\u2A0D",
      "geqslant;": "\u2A7E",
      "gesdotol;": "\u2A84",
      "gnapprox;": "\u2A8A",
      "hksearow;": "\u2925",
      "hkswarow;": "\u2926",
      "imagline;": "\u2110",
      "imagpart;": "\u2111",
      "infintie;": "\u29DD",
      "integers;": "\u2124",
      "Integral;": "\u222B",
      "intercal;": "\u22BA",
      "intlarhk;": "\u2A17",
      "laemptyv;": "\u29B4",
      "ldrushar;": "\u294B",
      "leqslant;": "\u2A7D",
      "lesdotor;": "\u2A83",
      "LessLess;": "\u2AA1",
      "llcorner;": "\u231E",
      "lnapprox;": "\u2A89",
      "lrcorner;": "\u231F",
      "lurdshar;": "\u294A",
      "mapstoup;": "\u21A5",
      "multimap;": "\u22B8",
      "naturals;": "\u2115",
      "ncongdot;": "\u2A6D\u0338",
      "NotEqual;": "\u2260",
      "notindot;": "\u22F5\u0338",
      "NotTilde;": "\u2241",
      "otimesas;": "\u2A36",
      "parallel;": "\u2225",
      "PartialD;": "\u2202",
      "plusacir;": "\u2A23",
      "pointint;": "\u2A15",
      "Precedes;": "\u227A",
      "precneqq;": "\u2AB5",
      "precnsim;": "\u22E8",
      "profalar;": "\u232E",
      "profline;": "\u2312",
      "profsurf;": "\u2313",
      "raemptyv;": "\u29B3",
      "realpart;": "\u211C",
      "RightTee;": "\u22A2",
      "rppolint;": "\u2A12",
      "rtriltri;": "\u29CE",
      "scpolint;": "\u2A13",
      "setminus;": "\u2216",
      "shortmid;": "\u2223",
      "smeparsl;": "\u29E4",
      "sqsubset;": "\u228F",
      "sqsupset;": "\u2290",
      "subseteq;": "\u2286",
      "Succeeds;": "\u227B",
      "succneqq;": "\u2AB6",
      "succnsim;": "\u22E9",
      "SuchThat;": "\u220B",
      "Superset;": "\u2283",
      "supseteq;": "\u2287",
      "thetasym;": "\u03D1",
      "thicksim;": "\u223C",
      "timesbar;": "\u2A31",
      "triangle;": "\u25B5",
      "triminus;": "\u2A3A",
      "trpezium;": "\u23E2",
      "Uarrocir;": "\u2949",
      "ulcorner;": "\u231C",
      "UnderBar;": "_",
      "urcorner;": "\u231D",
      "varkappa;": "\u03F0",
      "varsigma;": "\u03C2",
      "vartheta;": "\u03D1",
      "backprime;": "\u2035",
      "backsimeq;": "\u22CD",
      "Backslash;": "\u2216",
      "bigotimes;": "\u2A02",
      "CenterDot;": "\xB7",
      "centerdot;": "\xB7",
      "checkmark;": "\u2713",
      "CircleDot;": "\u2299",
      "complexes;": "\u2102",
      "Congruent;": "\u2261",
      "Coproduct;": "\u2210",
      "dotsquare;": "\u22A1",
      "DoubleDot;": "\xA8",
      "DownArrow;": "\u2193",
      "Downarrow;": "\u21D3",
      "downarrow;": "\u2193",
      "DownBreve;": "\u0311",
      "gtrapprox;": "\u2A86",
      "gtreqless;": "\u22DB",
      "gvertneqq;": "\u2269\uFE00",
      "heartsuit;": "\u2665",
      "HumpEqual;": "\u224F",
      "LeftArrow;": "\u2190",
      "Leftarrow;": "\u21D0",
      "leftarrow;": "\u2190",
      "LeftFloor;": "\u230A",
      "lesseqgtr;": "\u22DA",
      "LessTilde;": "\u2272",
      "lvertneqq;": "\u2268\uFE00",
      "Mellintrf;": "\u2133",
      "MinusPlus;": "\u2213",
      "ngeqslant;": "\u2A7E\u0338",
      "nleqslant;": "\u2A7D\u0338",
      "NotCupCap;": "\u226D",
      "NotExists;": "\u2204",
      "NotSubset;": "\u2282\u20D2",
      "nparallel;": "\u2226",
      "nshortmid;": "\u2224",
      "nsubseteq;": "\u2288",
      "nsupseteq;": "\u2289",
      "OverBrace;": "\u23DE",
      "pitchfork;": "\u22D4",
      "PlusMinus;": "\xB1",
      "rationals;": "\u211A",
      "spadesuit;": "\u2660",
      "subseteqq;": "\u2AC5",
      "subsetneq;": "\u228A",
      "supseteqq;": "\u2AC6",
      "supsetneq;": "\u228B",
      "Therefore;": "\u2234",
      "therefore;": "\u2234",
      "ThinSpace;": "\u2009",
      "triangleq;": "\u225C",
      "TripleDot;": "\u20DB",
      "UnionPlus;": "\u228E",
      "varpropto;": "\u221D",
      "Bernoullis;": "\u212C",
      "circledast;": "\u229B",
      "CirclePlus;": "\u2295",
      "complement;": "\u2201",
      "curlywedge;": "\u22CF",
      "eqslantgtr;": "\u2A96",
      "EqualTilde;": "\u2242",
      "Fouriertrf;": "\u2131",
      "gtreqqless;": "\u2A8C",
      "ImaginaryI;": "\u2148",
      "Laplacetrf;": "\u2112",
      "LeftVector;": "\u21BC",
      "lessapprox;": "\u2A85",
      "lesseqqgtr;": "\u2A8B",
      "Lleftarrow;": "\u21DA",
      "lmoustache;": "\u23B0",
      "longmapsto;": "\u27FC",
      "mapstodown;": "\u21A7",
      "mapstoleft;": "\u21A4",
      "nLeftarrow;": "\u21CD",
      "nleftarrow;": "\u219A",
      "NotElement;": "\u2209",
      "NotGreater;": "\u226F",
      "nsubseteqq;": "\u2AC5\u0338",
      "nsupseteqq;": "\u2AC6\u0338",
      "precapprox;": "\u2AB7",
      "Proportion;": "\u2237",
      "RightArrow;": "\u2192",
      "Rightarrow;": "\u21D2",
      "rightarrow;": "\u2192",
      "RightFloor;": "\u230B",
      "rmoustache;": "\u23B1",
      "sqsubseteq;": "\u2291",
      "sqsupseteq;": "\u2292",
      "subsetneqq;": "\u2ACB",
      "succapprox;": "\u2AB8",
      "supsetneqq;": "\u2ACC",
      "ThickSpace;": "\u205F\u200A",
      "TildeEqual;": "\u2243",
      "TildeTilde;": "\u2248",
      "UnderBrace;": "\u23DF",
      "UpArrowBar;": "\u2912",
      "UpTeeArrow;": "\u21A5",
      "upuparrows;": "\u21C8",
      "varepsilon;": "\u03F5",
      "varnothing;": "\u2205",
      "backepsilon;": "\u03F6",
      "blacksquare;": "\u25AA",
      "circledcirc;": "\u229A",
      "circleddash;": "\u229D",
      "CircleMinus;": "\u2296",
      "CircleTimes;": "\u2297",
      "curlyeqprec;": "\u22DE",
      "curlyeqsucc;": "\u22DF",
      "diamondsuit;": "\u2666",
      "eqslantless;": "\u2A95",
      "Equilibrium;": "\u21CC",
      "expectation;": "\u2130",
      "GreaterLess;": "\u2277",
      "LeftCeiling;": "\u2308",
      "LessGreater;": "\u2276",
      "MediumSpace;": "\u205F",
      "NotLessLess;": "\u226A\u0338",
      "NotPrecedes;": "\u2280",
      "NotSucceeds;": "\u2281",
      "NotSuperset;": "\u2283\u20D2",
      "nRightarrow;": "\u21CF",
      "nrightarrow;": "\u219B",
      "OverBracket;": "\u23B4",
      "preccurlyeq;": "\u227C",
      "precnapprox;": "\u2AB9",
      "quaternions;": "\u210D",
      "RightVector;": "\u21C0",
      "Rrightarrow;": "\u21DB",
      "RuleDelayed;": "\u29F4",
      "SmallCircle;": "\u2218",
      "SquareUnion;": "\u2294",
      "straightphi;": "\u03D5",
      "SubsetEqual;": "\u2286",
      "succcurlyeq;": "\u227D",
      "succnapprox;": "\u2ABA",
      "thickapprox;": "\u2248",
      "UpDownArrow;": "\u2195",
      "Updownarrow;": "\u21D5",
      "updownarrow;": "\u2195",
      "VerticalBar;": "\u2223",
      "blacklozenge;": "\u29EB",
      "DownArrowBar;": "\u2913",
      "DownTeeArrow;": "\u21A7",
      "ExponentialE;": "\u2147",
      "exponentiale;": "\u2147",
      "GreaterEqual;": "\u2265",
      "GreaterTilde;": "\u2273",
      "HilbertSpace;": "\u210B",
      "HumpDownHump;": "\u224E",
      "Intersection;": "\u22C2",
      "LeftArrowBar;": "\u21E4",
      "LeftTeeArrow;": "\u21A4",
      "LeftTriangle;": "\u22B2",
      "LeftUpVector;": "\u21BF",
      "NotCongruent;": "\u2262",
      "NotHumpEqual;": "\u224F\u0338",
      "NotLessEqual;": "\u2270",
      "NotLessTilde;": "\u2274",
      "Proportional;": "\u221D",
      "RightCeiling;": "\u2309",
      "risingdotseq;": "\u2253",
      "RoundImplies;": "\u2970",
      "ShortUpArrow;": "\u2191",
      "SquareSubset;": "\u228F",
      "triangledown;": "\u25BF",
      "triangleleft;": "\u25C3",
      "UnderBracket;": "\u23B5",
      "varsubsetneq;": "\u228A\uFE00",
      "varsupsetneq;": "\u228B\uFE00",
      "VerticalLine;": "|",
      "ApplyFunction;": "\u2061",
      "bigtriangleup;": "\u25B3",
      "blacktriangle;": "\u25B4",
      "DifferentialD;": "\u2146",
      "divideontimes;": "\u22C7",
      "DoubleLeftTee;": "\u2AE4",
      "DoubleUpArrow;": "\u21D1",
      "fallingdotseq;": "\u2252",
      "hookleftarrow;": "\u21A9",
      "leftarrowtail;": "\u21A2",
      "leftharpoonup;": "\u21BC",
      "LeftTeeVector;": "\u295A",
      "LeftVectorBar;": "\u2952",
      "LessFullEqual;": "\u2266",
      "LongLeftArrow;": "\u27F5",
      "Longleftarrow;": "\u27F8",
      "longleftarrow;": "\u27F5",
      "looparrowleft;": "\u21AB",
      "measuredangle;": "\u2221",
      "NotEqualTilde;": "\u2242\u0338",
      "NotTildeEqual;": "\u2244",
      "NotTildeTilde;": "\u2249",
      "ntriangleleft;": "\u22EA",
      "Poincareplane;": "\u210C",
      "PrecedesEqual;": "\u2AAF",
      "PrecedesTilde;": "\u227E",
      "RightArrowBar;": "\u21E5",
      "RightTeeArrow;": "\u21A6",
      "RightTriangle;": "\u22B3",
      "RightUpVector;": "\u21BE",
      "shortparallel;": "\u2225",
      "smallsetminus;": "\u2216",
      "SucceedsEqual;": "\u2AB0",
      "SucceedsTilde;": "\u227F",
      "SupersetEqual;": "\u2287",
      "triangleright;": "\u25B9",
      "UpEquilibrium;": "\u296E",
      "upharpoonleft;": "\u21BF",
      "varsubsetneqq;": "\u2ACB\uFE00",
      "varsupsetneqq;": "\u2ACC\uFE00",
      "VerticalTilde;": "\u2240",
      "VeryThinSpace;": "\u200A",
      "curvearrowleft;": "\u21B6",
      "DiacriticalDot;": "\u02D9",
      "doublebarwedge;": "\u2306",
      "DoubleRightTee;": "\u22A8",
      "downdownarrows;": "\u21CA",
      "DownLeftVector;": "\u21BD",
      "GreaterGreater;": "\u2AA2",
      "hookrightarrow;": "\u21AA",
      "HorizontalLine;": "\u2500",
      "InvisibleComma;": "\u2063",
      "InvisibleTimes;": "\u2062",
      "LeftDownVector;": "\u21C3",
      "leftleftarrows;": "\u21C7",
      "LeftRightArrow;": "\u2194",
      "Leftrightarrow;": "\u21D4",
      "leftrightarrow;": "\u2194",
      "leftthreetimes;": "\u22CB",
      "LessSlantEqual;": "\u2A7D",
      "LongRightArrow;": "\u27F6",
      "Longrightarrow;": "\u27F9",
      "longrightarrow;": "\u27F6",
      "looparrowright;": "\u21AC",
      "LowerLeftArrow;": "\u2199",
      "NestedLessLess;": "\u226A",
      "NotGreaterLess;": "\u2279",
      "NotLessGreater;": "\u2278",
      "NotSubsetEqual;": "\u2288",
      "NotVerticalBar;": "\u2224",
      "nshortparallel;": "\u2226",
      "ntriangleright;": "\u22EB",
      "OpenCurlyQuote;": "\u2018",
      "ReverseElement;": "\u220B",
      "rightarrowtail;": "\u21A3",
      "rightharpoonup;": "\u21C0",
      "RightTeeVector;": "\u295B",
      "RightVectorBar;": "\u2953",
      "ShortDownArrow;": "\u2193",
      "ShortLeftArrow;": "\u2190",
      "SquareSuperset;": "\u2290",
      "TildeFullEqual;": "\u2245",
      "trianglelefteq;": "\u22B4",
      "upharpoonright;": "\u21BE",
      "UpperLeftArrow;": "\u2196",
      "ZeroWidthSpace;": "\u200B",
      "bigtriangledown;": "\u25BD",
      "circlearrowleft;": "\u21BA",
      "CloseCurlyQuote;": "\u2019",
      "ContourIntegral;": "\u222E",
      "curvearrowright;": "\u21B7",
      "DoubleDownArrow;": "\u21D3",
      "DoubleLeftArrow;": "\u21D0",
      "downharpoonleft;": "\u21C3",
      "DownRightVector;": "\u21C1",
      "leftharpoondown;": "\u21BD",
      "leftrightarrows;": "\u21C6",
      "LeftRightVector;": "\u294E",
      "LeftTriangleBar;": "\u29CF",
      "LeftUpTeeVector;": "\u2960",
      "LeftUpVectorBar;": "\u2958",
      "LowerRightArrow;": "\u2198",
      "nLeftrightarrow;": "\u21CE",
      "nleftrightarrow;": "\u21AE",
      "NotGreaterEqual;": "\u2271",
      "NotGreaterTilde;": "\u2275",
      "NotHumpDownHump;": "\u224E\u0338",
      "NotLeftTriangle;": "\u22EA",
      "NotSquareSubset;": "\u228F\u0338",
      "ntrianglelefteq;": "\u22EC",
      "OverParenthesis;": "\u23DC",
      "RightDownVector;": "\u21C2",
      "rightleftarrows;": "\u21C4",
      "rightsquigarrow;": "\u219D",
      "rightthreetimes;": "\u22CC",
      "ShortRightArrow;": "\u2192",
      "straightepsilon;": "\u03F5",
      "trianglerighteq;": "\u22B5",
      "UpperRightArrow;": "\u2197",
      "vartriangleleft;": "\u22B2",
      "circlearrowright;": "\u21BB",
      "DiacriticalAcute;": "\xB4",
      "DiacriticalGrave;": "`",
      "DiacriticalTilde;": "\u02DC",
      "DoubleRightArrow;": "\u21D2",
      "DownArrowUpArrow;": "\u21F5",
      "downharpoonright;": "\u21C2",
      "EmptySmallSquare;": "\u25FB",
      "GreaterEqualLess;": "\u22DB",
      "GreaterFullEqual;": "\u2267",
      "LeftAngleBracket;": "\u27E8",
      "LeftUpDownVector;": "\u2951",
      "LessEqualGreater;": "\u22DA",
      "NonBreakingSpace;": "\xA0",
      "NotPrecedesEqual;": "\u2AAF\u0338",
      "NotRightTriangle;": "\u22EB",
      "NotSucceedsEqual;": "\u2AB0\u0338",
      "NotSucceedsTilde;": "\u227F\u0338",
      "NotSupersetEqual;": "\u2289",
      "ntrianglerighteq;": "\u22ED",
      "rightharpoondown;": "\u21C1",
      "rightrightarrows;": "\u21C9",
      "RightTriangleBar;": "\u29D0",
      "RightUpTeeVector;": "\u295C",
      "RightUpVectorBar;": "\u2954",
      "twoheadleftarrow;": "\u219E",
      "UnderParenthesis;": "\u23DD",
      "UpArrowDownArrow;": "\u21C5",
      "vartriangleright;": "\u22B3",
      "blacktriangledown;": "\u25BE",
      "blacktriangleleft;": "\u25C2",
      "DoubleUpDownArrow;": "\u21D5",
      "DoubleVerticalBar;": "\u2225",
      "DownLeftTeeVector;": "\u295E",
      "DownLeftVectorBar;": "\u2956",
      "FilledSmallSquare;": "\u25FC",
      "GreaterSlantEqual;": "\u2A7E",
      "LeftDoubleBracket;": "\u27E6",
      "LeftDownTeeVector;": "\u2961",
      "LeftDownVectorBar;": "\u2959",
      "leftrightharpoons;": "\u21CB",
      "LeftTriangleEqual;": "\u22B4",
      "NegativeThinSpace;": "\u200B",
      "NotGreaterGreater;": "\u226B\u0338",
      "NotLessSlantEqual;": "\u2A7D\u0338",
      "NotNestedLessLess;": "\u2AA1\u0338",
      "NotReverseElement;": "\u220C",
      "NotSquareSuperset;": "\u2290\u0338",
      "NotTildeFullEqual;": "\u2247",
      "RightAngleBracket;": "\u27E9",
      "rightleftharpoons;": "\u21CC",
      "RightUpDownVector;": "\u294F",
      "SquareSubsetEqual;": "\u2291",
      "twoheadrightarrow;": "\u21A0",
      "VerticalSeparator;": "\u2758",
      "blacktriangleright;": "\u25B8",
      "DownRightTeeVector;": "\u295F",
      "DownRightVectorBar;": "\u2957",
      "LongLeftRightArrow;": "\u27F7",
      "Longleftrightarrow;": "\u27FA",
      "longleftrightarrow;": "\u27F7",
      "NegativeThickSpace;": "\u200B",
      "NotLeftTriangleBar;": "\u29CF\u0338",
      "PrecedesSlantEqual;": "\u227C",
      "ReverseEquilibrium;": "\u21CB",
      "RightDoubleBracket;": "\u27E7",
      "RightDownTeeVector;": "\u295D",
      "RightDownVectorBar;": "\u2955",
      "RightTriangleEqual;": "\u22B5",
      "SquareIntersection;": "\u2293",
      "SucceedsSlantEqual;": "\u227D",
      "DoubleLongLeftArrow;": "\u27F8",
      "DownLeftRightVector;": "\u2950",
      "LeftArrowRightArrow;": "\u21C6",
      "leftrightsquigarrow;": "\u21AD",
      "NegativeMediumSpace;": "\u200B",
      "NotGreaterFullEqual;": "\u2267\u0338",
      "NotRightTriangleBar;": "\u29D0\u0338",
      "RightArrowLeftArrow;": "\u21C4",
      "SquareSupersetEqual;": "\u2292",
      "CapitalDifferentialD;": "\u2145",
      "DoubleLeftRightArrow;": "\u21D4",
      "DoubleLongRightArrow;": "\u27F9",
      "EmptyVerySmallSquare;": "\u25AB",
      "NestedGreaterGreater;": "\u226B",
      "NotDoubleVerticalBar;": "\u2226",
      "NotGreaterSlantEqual;": "\u2A7E\u0338",
      "NotLeftTriangleEqual;": "\u22EC",
      "NotSquareSubsetEqual;": "\u22E2",
      "OpenCurlyDoubleQuote;": "\u201C",
      "ReverseUpEquilibrium;": "\u296F",
      "CloseCurlyDoubleQuote;": "\u201D",
      "DoubleContourIntegral;": "\u222F",
      "FilledVerySmallSquare;": "\u25AA",
      "NegativeVeryThinSpace;": "\u200B",
      "NotPrecedesSlantEqual;": "\u22E0",
      "NotRightTriangleEqual;": "\u22ED",
      "NotSucceedsSlantEqual;": "\u22E1",
      "DiacriticalDoubleAcute;": "\u02DD",
      "NotSquareSupersetEqual;": "\u22E3",
      "NotNestedGreaterGreater;": "\u2AA2\u0338",
      "ClockwiseContourIntegral;": "\u2232",
      "DoubleLongLeftRightArrow;": "\u27FA",
      "CounterClockwiseContourIntegral;": "\u2233"
    };
    var maxCRNameLength2;
    var decodeHtml2 = (rawText, asAttr) => {
      let offset = 0;
      const end = rawText.length;
      let decodedText = "";
      function advance2(length2) {
        offset += length2;
        rawText = rawText.slice(length2);
      }
      while (offset < end) {
        const head = /&(?:#x?)?/i.exec(rawText);
        if (!head || offset + head.index >= end) {
          const remaining = end - offset;
          decodedText += rawText.slice(0, remaining);
          advance2(remaining);
          break;
        }
        decodedText += rawText.slice(0, head.index);
        advance2(head.index);
        if (head[0] === "&") {
          let name = "";
          let value = void 0;
          if (/[0-9a-z]/i.test(rawText[1])) {
            if (!maxCRNameLength2) {
              maxCRNameLength2 = Object.keys(namedCharacterReferences2).reduce((max, name2) => Math.max(max, name2.length), 0);
            }
            for (let length2 = maxCRNameLength2; !value && length2 > 0; --length2) {
              name = rawText.slice(1, 1 + length2);
              value = namedCharacterReferences2[name];
            }
            if (value) {
              const semi = name.endsWith(";");
              if (asAttr && !semi && /[=a-z0-9]/i.test(rawText[name.length + 1] || "")) {
                decodedText += "&" + name;
                advance2(1 + name.length);
              } else {
                decodedText += value;
                advance2(1 + name.length);
              }
            } else {
              decodedText += "&" + name;
              advance2(1 + name.length);
            }
          } else {
            decodedText += "&";
            advance2(1);
          }
        } else {
          const hex = head[0] === "&#x";
          const pattern = hex ? /^&#x([0-9a-f]+);?/i : /^&#([0-9]+);?/;
          const body = pattern.exec(rawText);
          if (!body) {
            decodedText += head[0];
            advance2(head[0].length);
          } else {
            let cp = Number.parseInt(body[1], hex ? 16 : 10);
            if (cp === 0) {
              cp = 65533;
            } else if (cp > 1114111) {
              cp = 65533;
            } else if (cp >= 55296 && cp <= 57343) {
              cp = 65533;
            } else if (cp >= 64976 && cp <= 65007 || (cp & 65534) === 65534)
              ;
            else if (cp >= 1 && cp <= 8 || cp === 11 || cp >= 13 && cp <= 31 || cp >= 127 && cp <= 159) {
              cp = CCR_REPLACEMENTS2[cp] || cp;
            }
            decodedText += String.fromCodePoint(cp);
            advance2(body[0].length);
          }
        }
      }
      return decodedText;
    };
    var CCR_REPLACEMENTS2 = {
      128: 8364,
      130: 8218,
      131: 402,
      132: 8222,
      133: 8230,
      134: 8224,
      135: 8225,
      136: 710,
      137: 8240,
      138: 352,
      139: 8249,
      140: 338,
      142: 381,
      145: 8216,
      146: 8217,
      147: 8220,
      148: 8221,
      149: 8226,
      150: 8211,
      151: 8212,
      152: 732,
      153: 8482,
      154: 353,
      155: 8250,
      156: 339,
      158: 382,
      159: 376
    };
    var isRawTextContainer2 = /* @__PURE__ */ shared.makeMap("style,iframe,script,noscript", true);
    var parserOptions2 = {
      isVoidTag: shared.isVoidTag,
      isNativeTag: (tag2) => shared.isHTMLTag(tag2) || shared.isSVGTag(tag2),
      isPreTag: (tag2) => tag2 === "pre",
      decodeEntities: decodeHtml2,
      isBuiltInComponent: (tag2) => {
        if (compilerCore.isBuiltInType(tag2, `Transition`)) {
          return TRANSITION2;
        } else if (compilerCore.isBuiltInType(tag2, `TransitionGroup`)) {
          return TRANSITION_GROUP2;
        }
      },
      getNamespace(tag2, parent) {
        let ns = parent ? parent.ns : 0;
        if (parent && ns === 2) {
          if (parent.tag === "annotation-xml") {
            if (tag2 === "svg") {
              return 1;
            }
            if (parent.props.some((a) => a.type === 6 && a.name === "encoding" && a.value != null && (a.value.content === "text/html" || a.value.content === "application/xhtml+xml"))) {
              ns = 0;
            }
          } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag2 !== "mglyph" && tag2 !== "malignmark") {
            ns = 0;
          }
        } else if (parent && ns === 1) {
          if (parent.tag === "foreignObject" || parent.tag === "desc" || parent.tag === "title") {
            ns = 0;
          }
        }
        if (ns === 0) {
          if (tag2 === "svg") {
            return 1;
          }
          if (tag2 === "math") {
            return 2;
          }
        }
        return ns;
      },
      getTextMode({ tag: tag2, ns }) {
        if (ns === 0) {
          if (tag2 === "textarea" || tag2 === "title") {
            return 1;
          }
          if (isRawTextContainer2(tag2)) {
            return 2;
          }
        }
        return 0;
      }
    };
    var transformStyle2 = (node2) => {
      if (node2.type === 1) {
        node2.props.forEach((p, i) => {
          if (p.type === 6 && p.name === "style" && p.value) {
            node2.props[i] = {
              type: 7,
              name: `bind`,
              arg: compilerCore.createSimpleExpression(`style`, true, p.loc),
              exp: parseInlineCSS2(p.value.content, p.loc),
              modifiers: [],
              loc: p.loc
            };
          }
        });
      }
    };
    var parseInlineCSS2 = (cssText, loc) => {
      const normalized = shared.parseStringStyle(cssText);
      return compilerCore.createSimpleExpression(JSON.stringify(normalized), false, loc, 3);
    };
    function createDOMCompilerError2(code, loc) {
      return compilerCore.createCompilerError(code, loc, DOMErrorMessages2);
    }
    var DOMErrorMessages2 = {
      [50]: `v-html is missing expression.`,
      [51]: `v-html will override element children.`,
      [52]: `v-text is missing expression.`,
      [53]: `v-text will override element children.`,
      [54]: `v-model can only be used on <input>, <textarea> and <select> elements.`,
      [55]: `v-model argument is not supported on plain elements.`,
      [56]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,
      [57]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,
      [58]: `v-show is missing expression.`,
      [59]: `<Transition> expects exactly one child element or component.`,
      [60]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`
    };
    var transformVHtml2 = (dir, node2, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError2(50, loc));
      }
      if (node2.children.length) {
        context.onError(createDOMCompilerError2(51, loc));
        node2.children.length = 0;
      }
      return {
        props: [
          compilerCore.createObjectProperty(compilerCore.createSimpleExpression(`innerHTML`, true, loc), exp || compilerCore.createSimpleExpression("", true))
        ]
      };
    };
    var transformVText2 = (dir, node2, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError2(52, loc));
      }
      if (node2.children.length) {
        context.onError(createDOMCompilerError2(53, loc));
        node2.children.length = 0;
      }
      return {
        props: [
          compilerCore.createObjectProperty(compilerCore.createSimpleExpression(`textContent`, true), exp ? compilerCore.createCallExpression(context.helperString(compilerCore.TO_DISPLAY_STRING), [exp], loc) : compilerCore.createSimpleExpression("", true))
        ]
      };
    };
    var transformModel2 = (dir, node2, context) => {
      const baseResult = compilerCore.transformModel(dir, node2, context);
      if (!baseResult.props.length || node2.tagType === 1) {
        return baseResult;
      }
      if (dir.arg) {
        context.onError(createDOMCompilerError2(55, dir.arg.loc));
      }
      const { tag: tag2 } = node2;
      const isCustomElement = context.isCustomElement(tag2);
      if (tag2 === "input" || tag2 === "textarea" || tag2 === "select" || isCustomElement) {
        let directiveToUse = V_MODEL_TEXT2;
        let isInvalidType = false;
        if (tag2 === "input" || isCustomElement) {
          const type = compilerCore.findProp(node2, `type`);
          if (type) {
            if (type.type === 7) {
              directiveToUse = V_MODEL_DYNAMIC2;
            } else if (type.value) {
              switch (type.value.content) {
                case "radio":
                  directiveToUse = V_MODEL_RADIO2;
                  break;
                case "checkbox":
                  directiveToUse = V_MODEL_CHECKBOX2;
                  break;
                case "file":
                  isInvalidType = true;
                  context.onError(createDOMCompilerError2(56, dir.loc));
                  break;
              }
            }
          } else if (compilerCore.hasDynamicKeyVBind(node2)) {
            directiveToUse = V_MODEL_DYNAMIC2;
          } else
            ;
        } else if (tag2 === "select") {
          directiveToUse = V_MODEL_SELECT2;
        } else
          ;
        if (!isInvalidType) {
          baseResult.needRuntime = context.helper(directiveToUse);
        }
      } else {
        context.onError(createDOMCompilerError2(54, dir.loc));
      }
      baseResult.props = baseResult.props.filter((p) => !(p.key.type === 4 && p.key.content === "modelValue"));
      return baseResult;
    };
    var isEventOptionModifier2 = /* @__PURE__ */ shared.makeMap(`passive,once,capture`);
    var isNonKeyModifier2 = /* @__PURE__ */ shared.makeMap(`stop,prevent,self,ctrl,shift,alt,meta,exact,middle`);
    var maybeKeyModifier2 = /* @__PURE__ */ shared.makeMap("left,right");
    var isKeyboardEvent2 = /* @__PURE__ */ shared.makeMap(`onkeyup,onkeydown,onkeypress`, true);
    var resolveModifiers2 = (key, modifiers, context, loc) => {
      const keyModifiers = [];
      const nonKeyModifiers = [];
      const eventOptionModifiers = [];
      for (let i = 0; i < modifiers.length; i++) {
        const modifier = modifiers[i];
        if (modifier === "native" && compilerCore.checkCompatEnabled("COMPILER_V_ON_NATIVE", context, loc)) {
          eventOptionModifiers.push(modifier);
        } else if (isEventOptionModifier2(modifier)) {
          eventOptionModifiers.push(modifier);
        } else {
          if (maybeKeyModifier2(modifier)) {
            if (compilerCore.isStaticExp(key)) {
              if (isKeyboardEvent2(key.content)) {
                keyModifiers.push(modifier);
              } else {
                nonKeyModifiers.push(modifier);
              }
            } else {
              keyModifiers.push(modifier);
              nonKeyModifiers.push(modifier);
            }
          } else {
            if (isNonKeyModifier2(modifier)) {
              nonKeyModifiers.push(modifier);
            } else {
              keyModifiers.push(modifier);
            }
          }
        }
      }
      return {
        keyModifiers,
        nonKeyModifiers,
        eventOptionModifiers
      };
    };
    var transformClick2 = (key, event) => {
      const isStaticClick = compilerCore.isStaticExp(key) && key.content.toLowerCase() === "onclick";
      return isStaticClick ? compilerCore.createSimpleExpression(event, true) : key.type !== 4 ? compilerCore.createCompoundExpression([
        `(`,
        key,
        `) === "onClick" ? "${event}" : (`,
        key,
        `)`
      ]) : key;
    };
    var transformOn2 = (dir, node2, context) => {
      return compilerCore.transformOn(dir, node2, context, (baseResult) => {
        const { modifiers } = dir;
        if (!modifiers.length)
          return baseResult;
        let { key, value: handlerExp } = baseResult.props[0];
        const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers2(key, modifiers, context, dir.loc);
        if (nonKeyModifiers.includes("right")) {
          key = transformClick2(key, `onContextmenu`);
        }
        if (nonKeyModifiers.includes("middle")) {
          key = transformClick2(key, `onMouseup`);
        }
        if (nonKeyModifiers.length) {
          handlerExp = compilerCore.createCallExpression(context.helper(V_ON_WITH_MODIFIERS2), [
            handlerExp,
            JSON.stringify(nonKeyModifiers)
          ]);
        }
        if (keyModifiers.length && (!compilerCore.isStaticExp(key) || isKeyboardEvent2(key.content))) {
          handlerExp = compilerCore.createCallExpression(context.helper(V_ON_WITH_KEYS2), [
            handlerExp,
            JSON.stringify(keyModifiers)
          ]);
        }
        if (eventOptionModifiers.length) {
          const modifierPostfix = eventOptionModifiers.map(shared.capitalize).join("");
          key = compilerCore.isStaticExp(key) ? compilerCore.createSimpleExpression(`${key.content}${modifierPostfix}`, true) : compilerCore.createCompoundExpression([`(`, key, `) + "${modifierPostfix}"`]);
        }
        return {
          props: [compilerCore.createObjectProperty(key, handlerExp)]
        };
      });
    };
    var transformShow2 = (dir, node2, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError2(58, loc));
      }
      return {
        props: [],
        needRuntime: context.helper(V_SHOW2)
      };
    };
    var expReplaceRE2 = /__VUE_EXP_START__(.*?)__VUE_EXP_END__/g;
    var stringifyStatic2 = (children, context, parent) => {
      if (context.scopes.vSlot > 0) {
        return;
      }
      let nc = 0;
      let ec = 0;
      const currentChunk = [];
      const stringifyCurrentChunk = (currentIndex) => {
        if (nc >= 20 || ec >= 5) {
          const staticCall = compilerCore.createCallExpression(context.helper(compilerCore.CREATE_STATIC), [
            JSON.stringify(currentChunk.map((node2) => stringifyNode2(node2, context)).join("")).replace(expReplaceRE2, `" + $1 + "`),
            String(currentChunk.length)
          ]);
          replaceHoist2(currentChunk[0], staticCall, context);
          if (currentChunk.length > 1) {
            for (let i2 = 1; i2 < currentChunk.length; i2++) {
              replaceHoist2(currentChunk[i2], null, context);
            }
            const deleteCount = currentChunk.length - 1;
            children.splice(currentIndex - currentChunk.length + 1, deleteCount);
            return deleteCount;
          }
        }
        return 0;
      };
      let i = 0;
      for (; i < children.length; i++) {
        const child = children[i];
        const hoisted = getHoistedNode2(child);
        if (hoisted) {
          const node2 = child;
          const result2 = analyzeNode2(node2);
          if (result2) {
            nc += result2[0];
            ec += result2[1];
            currentChunk.push(node2);
            continue;
          }
        }
        i -= stringifyCurrentChunk(i);
        nc = 0;
        ec = 0;
        currentChunk.length = 0;
      }
      stringifyCurrentChunk(i);
    };
    var getHoistedNode2 = (node2) => (node2.type === 1 && node2.tagType === 0 || node2.type == 12) && node2.codegenNode && node2.codegenNode.type === 4 && node2.codegenNode.hoisted;
    var dataAriaRE2 = /^(data|aria)-/;
    var isStringifiableAttr2 = (name, ns) => {
      return (ns === 0 ? shared.isKnownHtmlAttr(name) : ns === 1 ? shared.isKnownSvgAttr(name) : false) || dataAriaRE2.test(name);
    };
    var replaceHoist2 = (node2, replacement, context) => {
      const hoistToReplace = node2.codegenNode.hoisted;
      context.hoists[context.hoists.indexOf(hoistToReplace)] = replacement;
    };
    var isNonStringifiable2 = /* @__PURE__ */ shared.makeMap(`caption,thead,tr,th,tbody,td,tfoot,colgroup,col`);
    function analyzeNode2(node2) {
      if (node2.type === 1 && isNonStringifiable2(node2.tag)) {
        return false;
      }
      if (node2.type === 12) {
        return [1, 0];
      }
      let nc = 1;
      let ec = node2.props.length > 0 ? 1 : 0;
      let bailed = false;
      const bail = () => {
        bailed = true;
        return false;
      };
      function walk3(node3) {
        for (let i = 0; i < node3.props.length; i++) {
          const p = node3.props[i];
          if (p.type === 6 && !isStringifiableAttr2(p.name, node3.ns)) {
            return bail();
          }
          if (p.type === 7 && p.name === "bind") {
            if (p.arg && (p.arg.type === 8 || p.arg.isStatic && !isStringifiableAttr2(p.arg.content, node3.ns))) {
              return bail();
            }
            if (p.exp && (p.exp.type === 8 || p.exp.constType < 3)) {
              return bail();
            }
          }
        }
        for (let i = 0; i < node3.children.length; i++) {
          nc++;
          const child = node3.children[i];
          if (child.type === 1) {
            if (child.props.length > 0) {
              ec++;
            }
            walk3(child);
            if (bailed) {
              return false;
            }
          }
        }
        return true;
      }
      return walk3(node2) ? [nc, ec] : false;
    }
    function stringifyNode2(node2, context) {
      if (shared.isString(node2)) {
        return node2;
      }
      if (shared.isSymbol(node2)) {
        return ``;
      }
      switch (node2.type) {
        case 1:
          return stringifyElement2(node2, context);
        case 2:
          return shared.escapeHtml(node2.content);
        case 3:
          return `<!--${shared.escapeHtml(node2.content)}-->`;
        case 5:
          return shared.escapeHtml(shared.toDisplayString(evaluateConstant2(node2.content)));
        case 8:
          return shared.escapeHtml(evaluateConstant2(node2));
        case 12:
          return stringifyNode2(node2.content, context);
        default:
          return "";
      }
    }
    function stringifyElement2(node2, context) {
      let res = `<${node2.tag}`;
      for (let i = 0; i < node2.props.length; i++) {
        const p = node2.props[i];
        if (p.type === 6) {
          res += ` ${p.name}`;
          if (p.value) {
            res += `="${shared.escapeHtml(p.value.content)}"`;
          }
        } else if (p.type === 7 && p.name === "bind") {
          const exp = p.exp;
          if (exp.content[0] === "_") {
            res += ` ${p.arg.content}="__VUE_EXP_START__${exp.content}__VUE_EXP_END__"`;
            continue;
          }
          let evaluated = evaluateConstant2(exp);
          if (evaluated != null) {
            const arg = p.arg && p.arg.content;
            if (arg === "class") {
              evaluated = shared.normalizeClass(evaluated);
            } else if (arg === "style") {
              evaluated = shared.stringifyStyle(shared.normalizeStyle(evaluated));
            }
            res += ` ${p.arg.content}="${shared.escapeHtml(evaluated)}"`;
          }
        }
      }
      if (context.scopeId) {
        res += ` ${context.scopeId}`;
      }
      res += `>`;
      for (let i = 0; i < node2.children.length; i++) {
        res += stringifyNode2(node2.children[i], context);
      }
      if (!shared.isVoidTag(node2.tag)) {
        res += `</${node2.tag}>`;
      }
      return res;
    }
    function evaluateConstant2(exp) {
      if (exp.type === 4) {
        return new Function(`return ${exp.content}`)();
      } else {
        let res = ``;
        exp.children.forEach((c) => {
          if (shared.isString(c) || shared.isSymbol(c)) {
            return;
          }
          if (c.type === 2) {
            res += c.content;
          } else if (c.type === 5) {
            res += shared.toDisplayString(evaluateConstant2(c.content));
          } else {
            res += evaluateConstant2(c);
          }
        });
        return res;
      }
    }
    var ignoreSideEffectTags2 = (node2, context) => {
      if (node2.type === 1 && node2.tagType === 0 && (node2.tag === "script" || node2.tag === "style")) {
        context.onError(createDOMCompilerError2(60, node2.loc));
        context.removeNode();
      }
    };
    var DOMNodeTransforms2 = [
      transformStyle2,
      ...[]
    ];
    var DOMDirectiveTransforms2 = {
      cloak: compilerCore.noopDirectiveTransform,
      html: transformVHtml2,
      text: transformVText2,
      model: transformModel2,
      on: transformOn2,
      show: transformShow2
    };
    function compile2(template, options = {}) {
      return compilerCore.baseCompile(template, shared.extend({}, parserOptions2, options, {
        nodeTransforms: [
          ignoreSideEffectTags2,
          ...DOMNodeTransforms2,
          ...options.nodeTransforms || []
        ],
        directiveTransforms: shared.extend({}, DOMDirectiveTransforms2, options.directiveTransforms || {}),
        transformHoist: stringifyStatic2
      }));
    }
    function parse2(template, options = {}) {
      return compilerCore.baseParse(template, shared.extend({}, parserOptions2, options));
    }
    Object.keys(compilerCore).forEach(function(k) {
      if (k !== "default")
        exports2[k] = compilerCore[k];
    });
    exports2.DOMDirectiveTransforms = DOMDirectiveTransforms2;
    exports2.DOMNodeTransforms = DOMNodeTransforms2;
    exports2.TRANSITION = TRANSITION2;
    exports2.TRANSITION_GROUP = TRANSITION_GROUP2;
    exports2.V_MODEL_CHECKBOX = V_MODEL_CHECKBOX2;
    exports2.V_MODEL_DYNAMIC = V_MODEL_DYNAMIC2;
    exports2.V_MODEL_RADIO = V_MODEL_RADIO2;
    exports2.V_MODEL_SELECT = V_MODEL_SELECT2;
    exports2.V_MODEL_TEXT = V_MODEL_TEXT2;
    exports2.V_ON_WITH_KEYS = V_ON_WITH_KEYS2;
    exports2.V_ON_WITH_MODIFIERS = V_ON_WITH_MODIFIERS2;
    exports2.V_SHOW = V_SHOW2;
    exports2.compile = compile2;
    exports2.createDOMCompilerError = createDOMCompilerError2;
    exports2.parse = parse2;
    exports2.parserOptions = parserOptions2;
    exports2.transformStyle = transformStyle2;
  }
});

// ../../node_modules/.pnpm/@vue+compiler-dom@3.2.31/node_modules/@vue/compiler-dom/dist/compiler-dom.cjs.js
var require_compiler_dom_cjs = __commonJS({
  "../../node_modules/.pnpm/@vue+compiler-dom@3.2.31/node_modules/@vue/compiler-dom/dist/compiler-dom.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var compilerCore = require_compiler_core();
    var shared = require_shared();
    var V_MODEL_RADIO2 = Symbol(`vModelRadio`);
    var V_MODEL_CHECKBOX2 = Symbol(`vModelCheckbox`);
    var V_MODEL_TEXT2 = Symbol(`vModelText`);
    var V_MODEL_SELECT2 = Symbol(`vModelSelect`);
    var V_MODEL_DYNAMIC2 = Symbol(`vModelDynamic`);
    var V_ON_WITH_MODIFIERS2 = Symbol(`vOnModifiersGuard`);
    var V_ON_WITH_KEYS2 = Symbol(`vOnKeysGuard`);
    var V_SHOW2 = Symbol(`vShow`);
    var TRANSITION2 = Symbol(`Transition`);
    var TRANSITION_GROUP2 = Symbol(`TransitionGroup`);
    compilerCore.registerRuntimeHelpers({
      [V_MODEL_RADIO2]: `vModelRadio`,
      [V_MODEL_CHECKBOX2]: `vModelCheckbox`,
      [V_MODEL_TEXT2]: `vModelText`,
      [V_MODEL_SELECT2]: `vModelSelect`,
      [V_MODEL_DYNAMIC2]: `vModelDynamic`,
      [V_ON_WITH_MODIFIERS2]: `withModifiers`,
      [V_ON_WITH_KEYS2]: `withKeys`,
      [V_SHOW2]: `vShow`,
      [TRANSITION2]: `Transition`,
      [TRANSITION_GROUP2]: `TransitionGroup`
    });
    var namedCharacterReferences2 = {
      GT: ">",
      gt: ">",
      LT: "<",
      lt: "<",
      "ac;": "\u223E",
      "af;": "\u2061",
      AMP: "&",
      amp: "&",
      "ap;": "\u2248",
      "DD;": "\u2145",
      "dd;": "\u2146",
      deg: "\xB0",
      "ee;": "\u2147",
      "eg;": "\u2A9A",
      "el;": "\u2A99",
      ETH: "\xD0",
      eth: "\xF0",
      "gE;": "\u2267",
      "ge;": "\u2265",
      "Gg;": "\u22D9",
      "gg;": "\u226B",
      "gl;": "\u2277",
      "GT;": ">",
      "Gt;": "\u226B",
      "gt;": ">",
      "ic;": "\u2063",
      "ii;": "\u2148",
      "Im;": "\u2111",
      "in;": "\u2208",
      "it;": "\u2062",
      "lE;": "\u2266",
      "le;": "\u2264",
      "lg;": "\u2276",
      "Ll;": "\u22D8",
      "ll;": "\u226A",
      "LT;": "<",
      "Lt;": "\u226A",
      "lt;": "<",
      "mp;": "\u2213",
      "Mu;": "\u039C",
      "mu;": "\u03BC",
      "ne;": "\u2260",
      "ni;": "\u220B",
      not: "\xAC",
      "Nu;": "\u039D",
      "nu;": "\u03BD",
      "Or;": "\u2A54",
      "or;": "\u2228",
      "oS;": "\u24C8",
      "Pi;": "\u03A0",
      "pi;": "\u03C0",
      "pm;": "\xB1",
      "Pr;": "\u2ABB",
      "pr;": "\u227A",
      "Re;": "\u211C",
      REG: "\xAE",
      reg: "\xAE",
      "rx;": "\u211E",
      "Sc;": "\u2ABC",
      "sc;": "\u227B",
      shy: "\xAD",
      uml: "\xA8",
      "wp;": "\u2118",
      "wr;": "\u2240",
      "Xi;": "\u039E",
      "xi;": "\u03BE",
      yen: "\xA5",
      "acd;": "\u223F",
      "acE;": "\u223E\u0333",
      "Acy;": "\u0410",
      "acy;": "\u0430",
      "Afr;": "\u{1D504}",
      "afr;": "\u{1D51E}",
      "AMP;": "&",
      "amp;": "&",
      "And;": "\u2A53",
      "and;": "\u2227",
      "ang;": "\u2220",
      "apE;": "\u2A70",
      "ape;": "\u224A",
      "ast;": "*",
      Auml: "\xC4",
      auml: "\xE4",
      "Bcy;": "\u0411",
      "bcy;": "\u0431",
      "Bfr;": "\u{1D505}",
      "bfr;": "\u{1D51F}",
      "bne;": "=\u20E5",
      "bot;": "\u22A5",
      "Cap;": "\u22D2",
      "cap;": "\u2229",
      cent: "\xA2",
      "Cfr;": "\u212D",
      "cfr;": "\u{1D520}",
      "Chi;": "\u03A7",
      "chi;": "\u03C7",
      "cir;": "\u25CB",
      COPY: "\xA9",
      copy: "\xA9",
      "Cup;": "\u22D3",
      "cup;": "\u222A",
      "Dcy;": "\u0414",
      "dcy;": "\u0434",
      "deg;": "\xB0",
      "Del;": "\u2207",
      "Dfr;": "\u{1D507}",
      "dfr;": "\u{1D521}",
      "die;": "\xA8",
      "div;": "\xF7",
      "Dot;": "\xA8",
      "dot;": "\u02D9",
      "Ecy;": "\u042D",
      "ecy;": "\u044D",
      "Efr;": "\u{1D508}",
      "efr;": "\u{1D522}",
      "egs;": "\u2A96",
      "ell;": "\u2113",
      "els;": "\u2A95",
      "ENG;": "\u014A",
      "eng;": "\u014B",
      "Eta;": "\u0397",
      "eta;": "\u03B7",
      "ETH;": "\xD0",
      "eth;": "\xF0",
      Euml: "\xCB",
      euml: "\xEB",
      "Fcy;": "\u0424",
      "fcy;": "\u0444",
      "Ffr;": "\u{1D509}",
      "ffr;": "\u{1D523}",
      "gap;": "\u2A86",
      "Gcy;": "\u0413",
      "gcy;": "\u0433",
      "gEl;": "\u2A8C",
      "gel;": "\u22DB",
      "geq;": "\u2265",
      "ges;": "\u2A7E",
      "Gfr;": "\u{1D50A}",
      "gfr;": "\u{1D524}",
      "ggg;": "\u22D9",
      "gla;": "\u2AA5",
      "glE;": "\u2A92",
      "glj;": "\u2AA4",
      "gnE;": "\u2269",
      "gne;": "\u2A88",
      "Hat;": "^",
      "Hfr;": "\u210C",
      "hfr;": "\u{1D525}",
      "Icy;": "\u0418",
      "icy;": "\u0438",
      "iff;": "\u21D4",
      "Ifr;": "\u2111",
      "ifr;": "\u{1D526}",
      "Int;": "\u222C",
      "int;": "\u222B",
      Iuml: "\xCF",
      iuml: "\xEF",
      "Jcy;": "\u0419",
      "jcy;": "\u0439",
      "Jfr;": "\u{1D50D}",
      "jfr;": "\u{1D527}",
      "Kcy;": "\u041A",
      "kcy;": "\u043A",
      "Kfr;": "\u{1D50E}",
      "kfr;": "\u{1D528}",
      "lap;": "\u2A85",
      "lat;": "\u2AAB",
      "Lcy;": "\u041B",
      "lcy;": "\u043B",
      "lEg;": "\u2A8B",
      "leg;": "\u22DA",
      "leq;": "\u2264",
      "les;": "\u2A7D",
      "Lfr;": "\u{1D50F}",
      "lfr;": "\u{1D529}",
      "lgE;": "\u2A91",
      "lnE;": "\u2268",
      "lne;": "\u2A87",
      "loz;": "\u25CA",
      "lrm;": "\u200E",
      "Lsh;": "\u21B0",
      "lsh;": "\u21B0",
      macr: "\xAF",
      "Map;": "\u2905",
      "map;": "\u21A6",
      "Mcy;": "\u041C",
      "mcy;": "\u043C",
      "Mfr;": "\u{1D510}",
      "mfr;": "\u{1D52A}",
      "mho;": "\u2127",
      "mid;": "\u2223",
      "nap;": "\u2249",
      nbsp: "\xA0",
      "Ncy;": "\u041D",
      "ncy;": "\u043D",
      "Nfr;": "\u{1D511}",
      "nfr;": "\u{1D52B}",
      "ngE;": "\u2267\u0338",
      "nge;": "\u2271",
      "nGg;": "\u22D9\u0338",
      "nGt;": "\u226B\u20D2",
      "ngt;": "\u226F",
      "nis;": "\u22FC",
      "niv;": "\u220B",
      "nlE;": "\u2266\u0338",
      "nle;": "\u2270",
      "nLl;": "\u22D8\u0338",
      "nLt;": "\u226A\u20D2",
      "nlt;": "\u226E",
      "Not;": "\u2AEC",
      "not;": "\xAC",
      "npr;": "\u2280",
      "nsc;": "\u2281",
      "num;": "#",
      "Ocy;": "\u041E",
      "ocy;": "\u043E",
      "Ofr;": "\u{1D512}",
      "ofr;": "\u{1D52C}",
      "ogt;": "\u29C1",
      "ohm;": "\u03A9",
      "olt;": "\u29C0",
      "ord;": "\u2A5D",
      ordf: "\xAA",
      ordm: "\xBA",
      "orv;": "\u2A5B",
      Ouml: "\xD6",
      ouml: "\xF6",
      "par;": "\u2225",
      para: "\xB6",
      "Pcy;": "\u041F",
      "pcy;": "\u043F",
      "Pfr;": "\u{1D513}",
      "pfr;": "\u{1D52D}",
      "Phi;": "\u03A6",
      "phi;": "\u03C6",
      "piv;": "\u03D6",
      "prE;": "\u2AB3",
      "pre;": "\u2AAF",
      "Psi;": "\u03A8",
      "psi;": "\u03C8",
      "Qfr;": "\u{1D514}",
      "qfr;": "\u{1D52E}",
      QUOT: '"',
      quot: '"',
      "Rcy;": "\u0420",
      "rcy;": "\u0440",
      "REG;": "\xAE",
      "reg;": "\xAE",
      "Rfr;": "\u211C",
      "rfr;": "\u{1D52F}",
      "Rho;": "\u03A1",
      "rho;": "\u03C1",
      "rlm;": "\u200F",
      "Rsh;": "\u21B1",
      "rsh;": "\u21B1",
      "scE;": "\u2AB4",
      "sce;": "\u2AB0",
      "Scy;": "\u0421",
      "scy;": "\u0441",
      sect: "\xA7",
      "Sfr;": "\u{1D516}",
      "sfr;": "\u{1D530}",
      "shy;": "\xAD",
      "sim;": "\u223C",
      "smt;": "\u2AAA",
      "sol;": "/",
      "squ;": "\u25A1",
      "Sub;": "\u22D0",
      "sub;": "\u2282",
      "Sum;": "\u2211",
      "sum;": "\u2211",
      "Sup;": "\u22D1",
      "sup;": "\u2283",
      sup1: "\xB9",
      sup2: "\xB2",
      sup3: "\xB3",
      "Tab;": "	",
      "Tau;": "\u03A4",
      "tau;": "\u03C4",
      "Tcy;": "\u0422",
      "tcy;": "\u0442",
      "Tfr;": "\u{1D517}",
      "tfr;": "\u{1D531}",
      "top;": "\u22A4",
      "Ucy;": "\u0423",
      "ucy;": "\u0443",
      "Ufr;": "\u{1D518}",
      "ufr;": "\u{1D532}",
      "uml;": "\xA8",
      Uuml: "\xDC",
      uuml: "\xFC",
      "Vcy;": "\u0412",
      "vcy;": "\u0432",
      "Vee;": "\u22C1",
      "vee;": "\u2228",
      "Vfr;": "\u{1D519}",
      "vfr;": "\u{1D533}",
      "Wfr;": "\u{1D51A}",
      "wfr;": "\u{1D534}",
      "Xfr;": "\u{1D51B}",
      "xfr;": "\u{1D535}",
      "Ycy;": "\u042B",
      "ycy;": "\u044B",
      "yen;": "\xA5",
      "Yfr;": "\u{1D51C}",
      "yfr;": "\u{1D536}",
      yuml: "\xFF",
      "Zcy;": "\u0417",
      "zcy;": "\u0437",
      "Zfr;": "\u2128",
      "zfr;": "\u{1D537}",
      "zwj;": "\u200D",
      Acirc: "\xC2",
      acirc: "\xE2",
      acute: "\xB4",
      AElig: "\xC6",
      aelig: "\xE6",
      "andd;": "\u2A5C",
      "andv;": "\u2A5A",
      "ange;": "\u29A4",
      "Aopf;": "\u{1D538}",
      "aopf;": "\u{1D552}",
      "apid;": "\u224B",
      "apos;": "'",
      Aring: "\xC5",
      aring: "\xE5",
      "Ascr;": "\u{1D49C}",
      "ascr;": "\u{1D4B6}",
      "Auml;": "\xC4",
      "auml;": "\xE4",
      "Barv;": "\u2AE7",
      "bbrk;": "\u23B5",
      "Beta;": "\u0392",
      "beta;": "\u03B2",
      "beth;": "\u2136",
      "bNot;": "\u2AED",
      "bnot;": "\u2310",
      "Bopf;": "\u{1D539}",
      "bopf;": "\u{1D553}",
      "boxH;": "\u2550",
      "boxh;": "\u2500",
      "boxV;": "\u2551",
      "boxv;": "\u2502",
      "Bscr;": "\u212C",
      "bscr;": "\u{1D4B7}",
      "bsim;": "\u223D",
      "bsol;": "\\",
      "bull;": "\u2022",
      "bump;": "\u224E",
      "caps;": "\u2229\uFE00",
      "Cdot;": "\u010A",
      "cdot;": "\u010B",
      cedil: "\xB8",
      "cent;": "\xA2",
      "CHcy;": "\u0427",
      "chcy;": "\u0447",
      "circ;": "\u02C6",
      "cirE;": "\u29C3",
      "cire;": "\u2257",
      "comp;": "\u2201",
      "cong;": "\u2245",
      "Copf;": "\u2102",
      "copf;": "\u{1D554}",
      "COPY;": "\xA9",
      "copy;": "\xA9",
      "Cscr;": "\u{1D49E}",
      "cscr;": "\u{1D4B8}",
      "csub;": "\u2ACF",
      "csup;": "\u2AD0",
      "cups;": "\u222A\uFE00",
      "Darr;": "\u21A1",
      "dArr;": "\u21D3",
      "darr;": "\u2193",
      "dash;": "\u2010",
      "dHar;": "\u2965",
      "diam;": "\u22C4",
      "DJcy;": "\u0402",
      "djcy;": "\u0452",
      "Dopf;": "\u{1D53B}",
      "dopf;": "\u{1D555}",
      "Dscr;": "\u{1D49F}",
      "dscr;": "\u{1D4B9}",
      "DScy;": "\u0405",
      "dscy;": "\u0455",
      "dsol;": "\u29F6",
      "dtri;": "\u25BF",
      "DZcy;": "\u040F",
      "dzcy;": "\u045F",
      "ecir;": "\u2256",
      Ecirc: "\xCA",
      ecirc: "\xEA",
      "Edot;": "\u0116",
      "eDot;": "\u2251",
      "edot;": "\u0117",
      "emsp;": "\u2003",
      "ensp;": "\u2002",
      "Eopf;": "\u{1D53C}",
      "eopf;": "\u{1D556}",
      "epar;": "\u22D5",
      "epsi;": "\u03B5",
      "Escr;": "\u2130",
      "escr;": "\u212F",
      "Esim;": "\u2A73",
      "esim;": "\u2242",
      "Euml;": "\xCB",
      "euml;": "\xEB",
      "euro;": "\u20AC",
      "excl;": "!",
      "flat;": "\u266D",
      "fnof;": "\u0192",
      "Fopf;": "\u{1D53D}",
      "fopf;": "\u{1D557}",
      "fork;": "\u22D4",
      "Fscr;": "\u2131",
      "fscr;": "\u{1D4BB}",
      "Gdot;": "\u0120",
      "gdot;": "\u0121",
      "geqq;": "\u2267",
      "gesl;": "\u22DB\uFE00",
      "GJcy;": "\u0403",
      "gjcy;": "\u0453",
      "gnap;": "\u2A8A",
      "gneq;": "\u2A88",
      "Gopf;": "\u{1D53E}",
      "gopf;": "\u{1D558}",
      "Gscr;": "\u{1D4A2}",
      "gscr;": "\u210A",
      "gsim;": "\u2273",
      "gtcc;": "\u2AA7",
      "gvnE;": "\u2269\uFE00",
      "half;": "\xBD",
      "hArr;": "\u21D4",
      "harr;": "\u2194",
      "hbar;": "\u210F",
      "Hopf;": "\u210D",
      "hopf;": "\u{1D559}",
      "Hscr;": "\u210B",
      "hscr;": "\u{1D4BD}",
      Icirc: "\xCE",
      icirc: "\xEE",
      "Idot;": "\u0130",
      "IEcy;": "\u0415",
      "iecy;": "\u0435",
      iexcl: "\xA1",
      "imof;": "\u22B7",
      "IOcy;": "\u0401",
      "iocy;": "\u0451",
      "Iopf;": "\u{1D540}",
      "iopf;": "\u{1D55A}",
      "Iota;": "\u0399",
      "iota;": "\u03B9",
      "Iscr;": "\u2110",
      "iscr;": "\u{1D4BE}",
      "isin;": "\u2208",
      "Iuml;": "\xCF",
      "iuml;": "\xEF",
      "Jopf;": "\u{1D541}",
      "jopf;": "\u{1D55B}",
      "Jscr;": "\u{1D4A5}",
      "jscr;": "\u{1D4BF}",
      "KHcy;": "\u0425",
      "khcy;": "\u0445",
      "KJcy;": "\u040C",
      "kjcy;": "\u045C",
      "Kopf;": "\u{1D542}",
      "kopf;": "\u{1D55C}",
      "Kscr;": "\u{1D4A6}",
      "kscr;": "\u{1D4C0}",
      "Lang;": "\u27EA",
      "lang;": "\u27E8",
      laquo: "\xAB",
      "Larr;": "\u219E",
      "lArr;": "\u21D0",
      "larr;": "\u2190",
      "late;": "\u2AAD",
      "lcub;": "{",
      "ldca;": "\u2936",
      "ldsh;": "\u21B2",
      "leqq;": "\u2266",
      "lesg;": "\u22DA\uFE00",
      "lHar;": "\u2962",
      "LJcy;": "\u0409",
      "ljcy;": "\u0459",
      "lnap;": "\u2A89",
      "lneq;": "\u2A87",
      "Lopf;": "\u{1D543}",
      "lopf;": "\u{1D55D}",
      "lozf;": "\u29EB",
      "lpar;": "(",
      "Lscr;": "\u2112",
      "lscr;": "\u{1D4C1}",
      "lsim;": "\u2272",
      "lsqb;": "[",
      "ltcc;": "\u2AA6",
      "ltri;": "\u25C3",
      "lvnE;": "\u2268\uFE00",
      "macr;": "\xAF",
      "male;": "\u2642",
      "malt;": "\u2720",
      micro: "\xB5",
      "mlcp;": "\u2ADB",
      "mldr;": "\u2026",
      "Mopf;": "\u{1D544}",
      "mopf;": "\u{1D55E}",
      "Mscr;": "\u2133",
      "mscr;": "\u{1D4C2}",
      "nang;": "\u2220\u20D2",
      "napE;": "\u2A70\u0338",
      "nbsp;": "\xA0",
      "ncap;": "\u2A43",
      "ncup;": "\u2A42",
      "ngeq;": "\u2271",
      "nges;": "\u2A7E\u0338",
      "ngtr;": "\u226F",
      "nGtv;": "\u226B\u0338",
      "nisd;": "\u22FA",
      "NJcy;": "\u040A",
      "njcy;": "\u045A",
      "nldr;": "\u2025",
      "nleq;": "\u2270",
      "nles;": "\u2A7D\u0338",
      "nLtv;": "\u226A\u0338",
      "nmid;": "\u2224",
      "Nopf;": "\u2115",
      "nopf;": "\u{1D55F}",
      "npar;": "\u2226",
      "npre;": "\u2AAF\u0338",
      "nsce;": "\u2AB0\u0338",
      "Nscr;": "\u{1D4A9}",
      "nscr;": "\u{1D4C3}",
      "nsim;": "\u2241",
      "nsub;": "\u2284",
      "nsup;": "\u2285",
      "ntgl;": "\u2279",
      "ntlg;": "\u2278",
      "nvap;": "\u224D\u20D2",
      "nvge;": "\u2265\u20D2",
      "nvgt;": ">\u20D2",
      "nvle;": "\u2264\u20D2",
      "nvlt;": "<\u20D2",
      "oast;": "\u229B",
      "ocir;": "\u229A",
      Ocirc: "\xD4",
      ocirc: "\xF4",
      "odiv;": "\u2A38",
      "odot;": "\u2299",
      "ogon;": "\u02DB",
      "oint;": "\u222E",
      "omid;": "\u29B6",
      "Oopf;": "\u{1D546}",
      "oopf;": "\u{1D560}",
      "opar;": "\u29B7",
      "ordf;": "\xAA",
      "ordm;": "\xBA",
      "oror;": "\u2A56",
      "Oscr;": "\u{1D4AA}",
      "oscr;": "\u2134",
      "osol;": "\u2298",
      "Ouml;": "\xD6",
      "ouml;": "\xF6",
      "para;": "\xB6",
      "part;": "\u2202",
      "perp;": "\u22A5",
      "phiv;": "\u03D5",
      "plus;": "+",
      "Popf;": "\u2119",
      "popf;": "\u{1D561}",
      pound: "\xA3",
      "prap;": "\u2AB7",
      "prec;": "\u227A",
      "prnE;": "\u2AB5",
      "prod;": "\u220F",
      "prop;": "\u221D",
      "Pscr;": "\u{1D4AB}",
      "pscr;": "\u{1D4C5}",
      "qint;": "\u2A0C",
      "Qopf;": "\u211A",
      "qopf;": "\u{1D562}",
      "Qscr;": "\u{1D4AC}",
      "qscr;": "\u{1D4C6}",
      "QUOT;": '"',
      "quot;": '"',
      "race;": "\u223D\u0331",
      "Rang;": "\u27EB",
      "rang;": "\u27E9",
      raquo: "\xBB",
      "Rarr;": "\u21A0",
      "rArr;": "\u21D2",
      "rarr;": "\u2192",
      "rcub;": "}",
      "rdca;": "\u2937",
      "rdsh;": "\u21B3",
      "real;": "\u211C",
      "rect;": "\u25AD",
      "rHar;": "\u2964",
      "rhov;": "\u03F1",
      "ring;": "\u02DA",
      "Ropf;": "\u211D",
      "ropf;": "\u{1D563}",
      "rpar;": ")",
      "Rscr;": "\u211B",
      "rscr;": "\u{1D4C7}",
      "rsqb;": "]",
      "rtri;": "\u25B9",
      "scap;": "\u2AB8",
      "scnE;": "\u2AB6",
      "sdot;": "\u22C5",
      "sect;": "\xA7",
      "semi;": ";",
      "sext;": "\u2736",
      "SHcy;": "\u0428",
      "shcy;": "\u0448",
      "sime;": "\u2243",
      "simg;": "\u2A9E",
      "siml;": "\u2A9D",
      "smid;": "\u2223",
      "smte;": "\u2AAC",
      "solb;": "\u29C4",
      "Sopf;": "\u{1D54A}",
      "sopf;": "\u{1D564}",
      "spar;": "\u2225",
      "Sqrt;": "\u221A",
      "squf;": "\u25AA",
      "Sscr;": "\u{1D4AE}",
      "sscr;": "\u{1D4C8}",
      "Star;": "\u22C6",
      "star;": "\u2606",
      "subE;": "\u2AC5",
      "sube;": "\u2286",
      "succ;": "\u227B",
      "sung;": "\u266A",
      "sup1;": "\xB9",
      "sup2;": "\xB2",
      "sup3;": "\xB3",
      "supE;": "\u2AC6",
      "supe;": "\u2287",
      szlig: "\xDF",
      "tbrk;": "\u23B4",
      "tdot;": "\u20DB",
      THORN: "\xDE",
      thorn: "\xFE",
      times: "\xD7",
      "tint;": "\u222D",
      "toea;": "\u2928",
      "Topf;": "\u{1D54B}",
      "topf;": "\u{1D565}",
      "tosa;": "\u2929",
      "trie;": "\u225C",
      "Tscr;": "\u{1D4AF}",
      "tscr;": "\u{1D4C9}",
      "TScy;": "\u0426",
      "tscy;": "\u0446",
      "Uarr;": "\u219F",
      "uArr;": "\u21D1",
      "uarr;": "\u2191",
      Ucirc: "\xDB",
      ucirc: "\xFB",
      "uHar;": "\u2963",
      "Uopf;": "\u{1D54C}",
      "uopf;": "\u{1D566}",
      "Upsi;": "\u03D2",
      "upsi;": "\u03C5",
      "Uscr;": "\u{1D4B0}",
      "uscr;": "\u{1D4CA}",
      "utri;": "\u25B5",
      "Uuml;": "\xDC",
      "uuml;": "\xFC",
      "vArr;": "\u21D5",
      "varr;": "\u2195",
      "Vbar;": "\u2AEB",
      "vBar;": "\u2AE8",
      "Vert;": "\u2016",
      "vert;": "|",
      "Vopf;": "\u{1D54D}",
      "vopf;": "\u{1D567}",
      "Vscr;": "\u{1D4B1}",
      "vscr;": "\u{1D4CB}",
      "Wopf;": "\u{1D54E}",
      "wopf;": "\u{1D568}",
      "Wscr;": "\u{1D4B2}",
      "wscr;": "\u{1D4CC}",
      "xcap;": "\u22C2",
      "xcup;": "\u22C3",
      "xmap;": "\u27FC",
      "xnis;": "\u22FB",
      "Xopf;": "\u{1D54F}",
      "xopf;": "\u{1D569}",
      "Xscr;": "\u{1D4B3}",
      "xscr;": "\u{1D4CD}",
      "xvee;": "\u22C1",
      "YAcy;": "\u042F",
      "yacy;": "\u044F",
      "YIcy;": "\u0407",
      "yicy;": "\u0457",
      "Yopf;": "\u{1D550}",
      "yopf;": "\u{1D56A}",
      "Yscr;": "\u{1D4B4}",
      "yscr;": "\u{1D4CE}",
      "YUcy;": "\u042E",
      "yucy;": "\u044E",
      "Yuml;": "\u0178",
      "yuml;": "\xFF",
      "Zdot;": "\u017B",
      "zdot;": "\u017C",
      "Zeta;": "\u0396",
      "zeta;": "\u03B6",
      "ZHcy;": "\u0416",
      "zhcy;": "\u0436",
      "Zopf;": "\u2124",
      "zopf;": "\u{1D56B}",
      "Zscr;": "\u{1D4B5}",
      "zscr;": "\u{1D4CF}",
      "zwnj;": "\u200C",
      Aacute: "\xC1",
      aacute: "\xE1",
      "Acirc;": "\xC2",
      "acirc;": "\xE2",
      "acute;": "\xB4",
      "AElig;": "\xC6",
      "aelig;": "\xE6",
      Agrave: "\xC0",
      agrave: "\xE0",
      "aleph;": "\u2135",
      "Alpha;": "\u0391",
      "alpha;": "\u03B1",
      "Amacr;": "\u0100",
      "amacr;": "\u0101",
      "amalg;": "\u2A3F",
      "angle;": "\u2220",
      "angrt;": "\u221F",
      "angst;": "\xC5",
      "Aogon;": "\u0104",
      "aogon;": "\u0105",
      "Aring;": "\xC5",
      "aring;": "\xE5",
      "asymp;": "\u2248",
      Atilde: "\xC3",
      atilde: "\xE3",
      "awint;": "\u2A11",
      "bcong;": "\u224C",
      "bdquo;": "\u201E",
      "bepsi;": "\u03F6",
      "blank;": "\u2423",
      "blk12;": "\u2592",
      "blk14;": "\u2591",
      "blk34;": "\u2593",
      "block;": "\u2588",
      "boxDL;": "\u2557",
      "boxDl;": "\u2556",
      "boxdL;": "\u2555",
      "boxdl;": "\u2510",
      "boxDR;": "\u2554",
      "boxDr;": "\u2553",
      "boxdR;": "\u2552",
      "boxdr;": "\u250C",
      "boxHD;": "\u2566",
      "boxHd;": "\u2564",
      "boxhD;": "\u2565",
      "boxhd;": "\u252C",
      "boxHU;": "\u2569",
      "boxHu;": "\u2567",
      "boxhU;": "\u2568",
      "boxhu;": "\u2534",
      "boxUL;": "\u255D",
      "boxUl;": "\u255C",
      "boxuL;": "\u255B",
      "boxul;": "\u2518",
      "boxUR;": "\u255A",
      "boxUr;": "\u2559",
      "boxuR;": "\u2558",
      "boxur;": "\u2514",
      "boxVH;": "\u256C",
      "boxVh;": "\u256B",
      "boxvH;": "\u256A",
      "boxvh;": "\u253C",
      "boxVL;": "\u2563",
      "boxVl;": "\u2562",
      "boxvL;": "\u2561",
      "boxvl;": "\u2524",
      "boxVR;": "\u2560",
      "boxVr;": "\u255F",
      "boxvR;": "\u255E",
      "boxvr;": "\u251C",
      "Breve;": "\u02D8",
      "breve;": "\u02D8",
      brvbar: "\xA6",
      "bsemi;": "\u204F",
      "bsime;": "\u22CD",
      "bsolb;": "\u29C5",
      "bumpE;": "\u2AAE",
      "bumpe;": "\u224F",
      "caret;": "\u2041",
      "caron;": "\u02C7",
      "ccaps;": "\u2A4D",
      Ccedil: "\xC7",
      ccedil: "\xE7",
      "Ccirc;": "\u0108",
      "ccirc;": "\u0109",
      "ccups;": "\u2A4C",
      "cedil;": "\xB8",
      "check;": "\u2713",
      "clubs;": "\u2663",
      "Colon;": "\u2237",
      "colon;": ":",
      "comma;": ",",
      "crarr;": "\u21B5",
      "Cross;": "\u2A2F",
      "cross;": "\u2717",
      "csube;": "\u2AD1",
      "csupe;": "\u2AD2",
      "ctdot;": "\u22EF",
      "cuepr;": "\u22DE",
      "cuesc;": "\u22DF",
      "cupor;": "\u2A45",
      curren: "\xA4",
      "cuvee;": "\u22CE",
      "cuwed;": "\u22CF",
      "cwint;": "\u2231",
      "Dashv;": "\u2AE4",
      "dashv;": "\u22A3",
      "dblac;": "\u02DD",
      "ddarr;": "\u21CA",
      "Delta;": "\u0394",
      "delta;": "\u03B4",
      "dharl;": "\u21C3",
      "dharr;": "\u21C2",
      "diams;": "\u2666",
      "disin;": "\u22F2",
      divide: "\xF7",
      "doteq;": "\u2250",
      "dtdot;": "\u22F1",
      "dtrif;": "\u25BE",
      "duarr;": "\u21F5",
      "duhar;": "\u296F",
      Eacute: "\xC9",
      eacute: "\xE9",
      "Ecirc;": "\xCA",
      "ecirc;": "\xEA",
      "eDDot;": "\u2A77",
      "efDot;": "\u2252",
      Egrave: "\xC8",
      egrave: "\xE8",
      "Emacr;": "\u0112",
      "emacr;": "\u0113",
      "empty;": "\u2205",
      "Eogon;": "\u0118",
      "eogon;": "\u0119",
      "eplus;": "\u2A71",
      "epsiv;": "\u03F5",
      "eqsim;": "\u2242",
      "Equal;": "\u2A75",
      "equiv;": "\u2261",
      "erarr;": "\u2971",
      "erDot;": "\u2253",
      "esdot;": "\u2250",
      "exist;": "\u2203",
      "fflig;": "\uFB00",
      "filig;": "\uFB01",
      "fjlig;": "fj",
      "fllig;": "\uFB02",
      "fltns;": "\u25B1",
      "forkv;": "\u2AD9",
      frac12: "\xBD",
      frac14: "\xBC",
      frac34: "\xBE",
      "frasl;": "\u2044",
      "frown;": "\u2322",
      "Gamma;": "\u0393",
      "gamma;": "\u03B3",
      "Gcirc;": "\u011C",
      "gcirc;": "\u011D",
      "gescc;": "\u2AA9",
      "gimel;": "\u2137",
      "gneqq;": "\u2269",
      "gnsim;": "\u22E7",
      "grave;": "`",
      "gsime;": "\u2A8E",
      "gsiml;": "\u2A90",
      "gtcir;": "\u2A7A",
      "gtdot;": "\u22D7",
      "Hacek;": "\u02C7",
      "harrw;": "\u21AD",
      "Hcirc;": "\u0124",
      "hcirc;": "\u0125",
      "hoarr;": "\u21FF",
      Iacute: "\xCD",
      iacute: "\xED",
      "Icirc;": "\xCE",
      "icirc;": "\xEE",
      "iexcl;": "\xA1",
      Igrave: "\xCC",
      igrave: "\xEC",
      "iiint;": "\u222D",
      "iiota;": "\u2129",
      "IJlig;": "\u0132",
      "ijlig;": "\u0133",
      "Imacr;": "\u012A",
      "imacr;": "\u012B",
      "image;": "\u2111",
      "imath;": "\u0131",
      "imped;": "\u01B5",
      "infin;": "\u221E",
      "Iogon;": "\u012E",
      "iogon;": "\u012F",
      "iprod;": "\u2A3C",
      iquest: "\xBF",
      "isinE;": "\u22F9",
      "isins;": "\u22F4",
      "isinv;": "\u2208",
      "Iukcy;": "\u0406",
      "iukcy;": "\u0456",
      "Jcirc;": "\u0134",
      "jcirc;": "\u0135",
      "jmath;": "\u0237",
      "Jukcy;": "\u0404",
      "jukcy;": "\u0454",
      "Kappa;": "\u039A",
      "kappa;": "\u03BA",
      "lAarr;": "\u21DA",
      "langd;": "\u2991",
      "laquo;": "\xAB",
      "larrb;": "\u21E4",
      "lates;": "\u2AAD\uFE00",
      "lBarr;": "\u290E",
      "lbarr;": "\u290C",
      "lbbrk;": "\u2772",
      "lbrke;": "\u298B",
      "lceil;": "\u2308",
      "ldquo;": "\u201C",
      "lescc;": "\u2AA8",
      "lhard;": "\u21BD",
      "lharu;": "\u21BC",
      "lhblk;": "\u2584",
      "llarr;": "\u21C7",
      "lltri;": "\u25FA",
      "lneqq;": "\u2268",
      "lnsim;": "\u22E6",
      "loang;": "\u27EC",
      "loarr;": "\u21FD",
      "lobrk;": "\u27E6",
      "lopar;": "\u2985",
      "lrarr;": "\u21C6",
      "lrhar;": "\u21CB",
      "lrtri;": "\u22BF",
      "lsime;": "\u2A8D",
      "lsimg;": "\u2A8F",
      "lsquo;": "\u2018",
      "ltcir;": "\u2A79",
      "ltdot;": "\u22D6",
      "ltrie;": "\u22B4",
      "ltrif;": "\u25C2",
      "mdash;": "\u2014",
      "mDDot;": "\u223A",
      "micro;": "\xB5",
      middot: "\xB7",
      "minus;": "\u2212",
      "mumap;": "\u22B8",
      "nabla;": "\u2207",
      "napid;": "\u224B\u0338",
      "napos;": "\u0149",
      "natur;": "\u266E",
      "nbump;": "\u224E\u0338",
      "ncong;": "\u2247",
      "ndash;": "\u2013",
      "neArr;": "\u21D7",
      "nearr;": "\u2197",
      "nedot;": "\u2250\u0338",
      "nesim;": "\u2242\u0338",
      "ngeqq;": "\u2267\u0338",
      "ngsim;": "\u2275",
      "nhArr;": "\u21CE",
      "nharr;": "\u21AE",
      "nhpar;": "\u2AF2",
      "nlArr;": "\u21CD",
      "nlarr;": "\u219A",
      "nleqq;": "\u2266\u0338",
      "nless;": "\u226E",
      "nlsim;": "\u2274",
      "nltri;": "\u22EA",
      "notin;": "\u2209",
      "notni;": "\u220C",
      "npart;": "\u2202\u0338",
      "nprec;": "\u2280",
      "nrArr;": "\u21CF",
      "nrarr;": "\u219B",
      "nrtri;": "\u22EB",
      "nsime;": "\u2244",
      "nsmid;": "\u2224",
      "nspar;": "\u2226",
      "nsubE;": "\u2AC5\u0338",
      "nsube;": "\u2288",
      "nsucc;": "\u2281",
      "nsupE;": "\u2AC6\u0338",
      "nsupe;": "\u2289",
      Ntilde: "\xD1",
      ntilde: "\xF1",
      "numsp;": "\u2007",
      "nvsim;": "\u223C\u20D2",
      "nwArr;": "\u21D6",
      "nwarr;": "\u2196",
      Oacute: "\xD3",
      oacute: "\xF3",
      "Ocirc;": "\xD4",
      "ocirc;": "\xF4",
      "odash;": "\u229D",
      "OElig;": "\u0152",
      "oelig;": "\u0153",
      "ofcir;": "\u29BF",
      Ograve: "\xD2",
      ograve: "\xF2",
      "ohbar;": "\u29B5",
      "olarr;": "\u21BA",
      "olcir;": "\u29BE",
      "oline;": "\u203E",
      "Omacr;": "\u014C",
      "omacr;": "\u014D",
      "Omega;": "\u03A9",
      "omega;": "\u03C9",
      "operp;": "\u29B9",
      "oplus;": "\u2295",
      "orarr;": "\u21BB",
      "order;": "\u2134",
      Oslash: "\xD8",
      oslash: "\xF8",
      Otilde: "\xD5",
      otilde: "\xF5",
      "ovbar;": "\u233D",
      "parsl;": "\u2AFD",
      "phone;": "\u260E",
      "plusb;": "\u229E",
      "pluse;": "\u2A72",
      plusmn: "\xB1",
      "pound;": "\xA3",
      "prcue;": "\u227C",
      "Prime;": "\u2033",
      "prime;": "\u2032",
      "prnap;": "\u2AB9",
      "prsim;": "\u227E",
      "quest;": "?",
      "rAarr;": "\u21DB",
      "radic;": "\u221A",
      "rangd;": "\u2992",
      "range;": "\u29A5",
      "raquo;": "\xBB",
      "rarrb;": "\u21E5",
      "rarrc;": "\u2933",
      "rarrw;": "\u219D",
      "ratio;": "\u2236",
      "RBarr;": "\u2910",
      "rBarr;": "\u290F",
      "rbarr;": "\u290D",
      "rbbrk;": "\u2773",
      "rbrke;": "\u298C",
      "rceil;": "\u2309",
      "rdquo;": "\u201D",
      "reals;": "\u211D",
      "rhard;": "\u21C1",
      "rharu;": "\u21C0",
      "rlarr;": "\u21C4",
      "rlhar;": "\u21CC",
      "rnmid;": "\u2AEE",
      "roang;": "\u27ED",
      "roarr;": "\u21FE",
      "robrk;": "\u27E7",
      "ropar;": "\u2986",
      "rrarr;": "\u21C9",
      "rsquo;": "\u2019",
      "rtrie;": "\u22B5",
      "rtrif;": "\u25B8",
      "sbquo;": "\u201A",
      "sccue;": "\u227D",
      "Scirc;": "\u015C",
      "scirc;": "\u015D",
      "scnap;": "\u2ABA",
      "scsim;": "\u227F",
      "sdotb;": "\u22A1",
      "sdote;": "\u2A66",
      "seArr;": "\u21D8",
      "searr;": "\u2198",
      "setmn;": "\u2216",
      "sharp;": "\u266F",
      "Sigma;": "\u03A3",
      "sigma;": "\u03C3",
      "simeq;": "\u2243",
      "simgE;": "\u2AA0",
      "simlE;": "\u2A9F",
      "simne;": "\u2246",
      "slarr;": "\u2190",
      "smile;": "\u2323",
      "smtes;": "\u2AAC\uFE00",
      "sqcap;": "\u2293",
      "sqcup;": "\u2294",
      "sqsub;": "\u228F",
      "sqsup;": "\u2290",
      "srarr;": "\u2192",
      "starf;": "\u2605",
      "strns;": "\xAF",
      "subnE;": "\u2ACB",
      "subne;": "\u228A",
      "supnE;": "\u2ACC",
      "supne;": "\u228B",
      "swArr;": "\u21D9",
      "swarr;": "\u2199",
      "szlig;": "\xDF",
      "Theta;": "\u0398",
      "theta;": "\u03B8",
      "thkap;": "\u2248",
      "THORN;": "\xDE",
      "thorn;": "\xFE",
      "Tilde;": "\u223C",
      "tilde;": "\u02DC",
      "times;": "\xD7",
      "TRADE;": "\u2122",
      "trade;": "\u2122",
      "trisb;": "\u29CD",
      "TSHcy;": "\u040B",
      "tshcy;": "\u045B",
      "twixt;": "\u226C",
      Uacute: "\xDA",
      uacute: "\xFA",
      "Ubrcy;": "\u040E",
      "ubrcy;": "\u045E",
      "Ucirc;": "\xDB",
      "ucirc;": "\xFB",
      "udarr;": "\u21C5",
      "udhar;": "\u296E",
      Ugrave: "\xD9",
      ugrave: "\xF9",
      "uharl;": "\u21BF",
      "uharr;": "\u21BE",
      "uhblk;": "\u2580",
      "ultri;": "\u25F8",
      "Umacr;": "\u016A",
      "umacr;": "\u016B",
      "Union;": "\u22C3",
      "Uogon;": "\u0172",
      "uogon;": "\u0173",
      "uplus;": "\u228E",
      "upsih;": "\u03D2",
      "UpTee;": "\u22A5",
      "Uring;": "\u016E",
      "uring;": "\u016F",
      "urtri;": "\u25F9",
      "utdot;": "\u22F0",
      "utrif;": "\u25B4",
      "uuarr;": "\u21C8",
      "varpi;": "\u03D6",
      "vBarv;": "\u2AE9",
      "VDash;": "\u22AB",
      "Vdash;": "\u22A9",
      "vDash;": "\u22A8",
      "vdash;": "\u22A2",
      "veeeq;": "\u225A",
      "vltri;": "\u22B2",
      "vnsub;": "\u2282\u20D2",
      "vnsup;": "\u2283\u20D2",
      "vprop;": "\u221D",
      "vrtri;": "\u22B3",
      "Wcirc;": "\u0174",
      "wcirc;": "\u0175",
      "Wedge;": "\u22C0",
      "wedge;": "\u2227",
      "xcirc;": "\u25EF",
      "xdtri;": "\u25BD",
      "xhArr;": "\u27FA",
      "xharr;": "\u27F7",
      "xlArr;": "\u27F8",
      "xlarr;": "\u27F5",
      "xodot;": "\u2A00",
      "xrArr;": "\u27F9",
      "xrarr;": "\u27F6",
      "xutri;": "\u25B3",
      Yacute: "\xDD",
      yacute: "\xFD",
      "Ycirc;": "\u0176",
      "ycirc;": "\u0177",
      "Aacute;": "\xC1",
      "aacute;": "\xE1",
      "Abreve;": "\u0102",
      "abreve;": "\u0103",
      "Agrave;": "\xC0",
      "agrave;": "\xE0",
      "andand;": "\u2A55",
      "angmsd;": "\u2221",
      "angsph;": "\u2222",
      "apacir;": "\u2A6F",
      "approx;": "\u2248",
      "Assign;": "\u2254",
      "Atilde;": "\xC3",
      "atilde;": "\xE3",
      "barvee;": "\u22BD",
      "Barwed;": "\u2306",
      "barwed;": "\u2305",
      "becaus;": "\u2235",
      "bernou;": "\u212C",
      "bigcap;": "\u22C2",
      "bigcup;": "\u22C3",
      "bigvee;": "\u22C1",
      "bkarow;": "\u290D",
      "bottom;": "\u22A5",
      "bowtie;": "\u22C8",
      "boxbox;": "\u29C9",
      "bprime;": "\u2035",
      "brvbar;": "\xA6",
      "bullet;": "\u2022",
      "Bumpeq;": "\u224E",
      "bumpeq;": "\u224F",
      "Cacute;": "\u0106",
      "cacute;": "\u0107",
      "capand;": "\u2A44",
      "capcap;": "\u2A4B",
      "capcup;": "\u2A47",
      "capdot;": "\u2A40",
      "Ccaron;": "\u010C",
      "ccaron;": "\u010D",
      "Ccedil;": "\xC7",
      "ccedil;": "\xE7",
      "circeq;": "\u2257",
      "cirmid;": "\u2AEF",
      "Colone;": "\u2A74",
      "colone;": "\u2254",
      "commat;": "@",
      "compfn;": "\u2218",
      "Conint;": "\u222F",
      "conint;": "\u222E",
      "coprod;": "\u2210",
      "copysr;": "\u2117",
      "cularr;": "\u21B6",
      "CupCap;": "\u224D",
      "cupcap;": "\u2A46",
      "cupcup;": "\u2A4A",
      "cupdot;": "\u228D",
      "curarr;": "\u21B7",
      "curren;": "\xA4",
      "cylcty;": "\u232D",
      "Dagger;": "\u2021",
      "dagger;": "\u2020",
      "daleth;": "\u2138",
      "Dcaron;": "\u010E",
      "dcaron;": "\u010F",
      "dfisht;": "\u297F",
      "divide;": "\xF7",
      "divonx;": "\u22C7",
      "dlcorn;": "\u231E",
      "dlcrop;": "\u230D",
      "dollar;": "$",
      "DotDot;": "\u20DC",
      "drcorn;": "\u231F",
      "drcrop;": "\u230C",
      "Dstrok;": "\u0110",
      "dstrok;": "\u0111",
      "Eacute;": "\xC9",
      "eacute;": "\xE9",
      "easter;": "\u2A6E",
      "Ecaron;": "\u011A",
      "ecaron;": "\u011B",
      "ecolon;": "\u2255",
      "Egrave;": "\xC8",
      "egrave;": "\xE8",
      "egsdot;": "\u2A98",
      "elsdot;": "\u2A97",
      "emptyv;": "\u2205",
      "emsp13;": "\u2004",
      "emsp14;": "\u2005",
      "eparsl;": "\u29E3",
      "eqcirc;": "\u2256",
      "equals;": "=",
      "equest;": "\u225F",
      "Exists;": "\u2203",
      "female;": "\u2640",
      "ffilig;": "\uFB03",
      "ffllig;": "\uFB04",
      "ForAll;": "\u2200",
      "forall;": "\u2200",
      "frac12;": "\xBD",
      "frac13;": "\u2153",
      "frac14;": "\xBC",
      "frac15;": "\u2155",
      "frac16;": "\u2159",
      "frac18;": "\u215B",
      "frac23;": "\u2154",
      "frac25;": "\u2156",
      "frac34;": "\xBE",
      "frac35;": "\u2157",
      "frac38;": "\u215C",
      "frac45;": "\u2158",
      "frac56;": "\u215A",
      "frac58;": "\u215D",
      "frac78;": "\u215E",
      "gacute;": "\u01F5",
      "Gammad;": "\u03DC",
      "gammad;": "\u03DD",
      "Gbreve;": "\u011E",
      "gbreve;": "\u011F",
      "Gcedil;": "\u0122",
      "gesdot;": "\u2A80",
      "gesles;": "\u2A94",
      "gtlPar;": "\u2995",
      "gtrarr;": "\u2978",
      "gtrdot;": "\u22D7",
      "gtrsim;": "\u2273",
      "hairsp;": "\u200A",
      "hamilt;": "\u210B",
      "HARDcy;": "\u042A",
      "hardcy;": "\u044A",
      "hearts;": "\u2665",
      "hellip;": "\u2026",
      "hercon;": "\u22B9",
      "homtht;": "\u223B",
      "horbar;": "\u2015",
      "hslash;": "\u210F",
      "Hstrok;": "\u0126",
      "hstrok;": "\u0127",
      "hybull;": "\u2043",
      "hyphen;": "\u2010",
      "Iacute;": "\xCD",
      "iacute;": "\xED",
      "Igrave;": "\xCC",
      "igrave;": "\xEC",
      "iiiint;": "\u2A0C",
      "iinfin;": "\u29DC",
      "incare;": "\u2105",
      "inodot;": "\u0131",
      "intcal;": "\u22BA",
      "iquest;": "\xBF",
      "isinsv;": "\u22F3",
      "Itilde;": "\u0128",
      "itilde;": "\u0129",
      "Jsercy;": "\u0408",
      "jsercy;": "\u0458",
      "kappav;": "\u03F0",
      "Kcedil;": "\u0136",
      "kcedil;": "\u0137",
      "kgreen;": "\u0138",
      "Lacute;": "\u0139",
      "lacute;": "\u013A",
      "lagran;": "\u2112",
      "Lambda;": "\u039B",
      "lambda;": "\u03BB",
      "langle;": "\u27E8",
      "larrfs;": "\u291D",
      "larrhk;": "\u21A9",
      "larrlp;": "\u21AB",
      "larrpl;": "\u2939",
      "larrtl;": "\u21A2",
      "lAtail;": "\u291B",
      "latail;": "\u2919",
      "lbrace;": "{",
      "lbrack;": "[",
      "Lcaron;": "\u013D",
      "lcaron;": "\u013E",
      "Lcedil;": "\u013B",
      "lcedil;": "\u013C",
      "ldquor;": "\u201E",
      "lesdot;": "\u2A7F",
      "lesges;": "\u2A93",
      "lfisht;": "\u297C",
      "lfloor;": "\u230A",
      "lharul;": "\u296A",
      "llhard;": "\u296B",
      "Lmidot;": "\u013F",
      "lmidot;": "\u0140",
      "lmoust;": "\u23B0",
      "loplus;": "\u2A2D",
      "lowast;": "\u2217",
      "lowbar;": "_",
      "lparlt;": "\u2993",
      "lrhard;": "\u296D",
      "lsaquo;": "\u2039",
      "lsquor;": "\u201A",
      "Lstrok;": "\u0141",
      "lstrok;": "\u0142",
      "lthree;": "\u22CB",
      "ltimes;": "\u22C9",
      "ltlarr;": "\u2976",
      "ltrPar;": "\u2996",
      "mapsto;": "\u21A6",
      "marker;": "\u25AE",
      "mcomma;": "\u2A29",
      "midast;": "*",
      "midcir;": "\u2AF0",
      "middot;": "\xB7",
      "minusb;": "\u229F",
      "minusd;": "\u2238",
      "mnplus;": "\u2213",
      "models;": "\u22A7",
      "mstpos;": "\u223E",
      "Nacute;": "\u0143",
      "nacute;": "\u0144",
      "nbumpe;": "\u224F\u0338",
      "Ncaron;": "\u0147",
      "ncaron;": "\u0148",
      "Ncedil;": "\u0145",
      "ncedil;": "\u0146",
      "nearhk;": "\u2924",
      "nequiv;": "\u2262",
      "nesear;": "\u2928",
      "nexist;": "\u2204",
      "nltrie;": "\u22EC",
      "notinE;": "\u22F9\u0338",
      "nparsl;": "\u2AFD\u20E5",
      "nprcue;": "\u22E0",
      "nrarrc;": "\u2933\u0338",
      "nrarrw;": "\u219D\u0338",
      "nrtrie;": "\u22ED",
      "nsccue;": "\u22E1",
      "nsimeq;": "\u2244",
      "Ntilde;": "\xD1",
      "ntilde;": "\xF1",
      "numero;": "\u2116",
      "nVDash;": "\u22AF",
      "nVdash;": "\u22AE",
      "nvDash;": "\u22AD",
      "nvdash;": "\u22AC",
      "nvHarr;": "\u2904",
      "nvlArr;": "\u2902",
      "nvrArr;": "\u2903",
      "nwarhk;": "\u2923",
      "nwnear;": "\u2927",
      "Oacute;": "\xD3",
      "oacute;": "\xF3",
      "Odblac;": "\u0150",
      "odblac;": "\u0151",
      "odsold;": "\u29BC",
      "Ograve;": "\xD2",
      "ograve;": "\xF2",
      "ominus;": "\u2296",
      "origof;": "\u22B6",
      "Oslash;": "\xD8",
      "oslash;": "\xF8",
      "Otilde;": "\xD5",
      "otilde;": "\xF5",
      "Otimes;": "\u2A37",
      "otimes;": "\u2297",
      "parsim;": "\u2AF3",
      "percnt;": "%",
      "period;": ".",
      "permil;": "\u2030",
      "phmmat;": "\u2133",
      "planck;": "\u210F",
      "plankv;": "\u210F",
      "plusdo;": "\u2214",
      "plusdu;": "\u2A25",
      "plusmn;": "\xB1",
      "preceq;": "\u2AAF",
      "primes;": "\u2119",
      "prnsim;": "\u22E8",
      "propto;": "\u221D",
      "prurel;": "\u22B0",
      "puncsp;": "\u2008",
      "qprime;": "\u2057",
      "Racute;": "\u0154",
      "racute;": "\u0155",
      "rangle;": "\u27E9",
      "rarrap;": "\u2975",
      "rarrfs;": "\u291E",
      "rarrhk;": "\u21AA",
      "rarrlp;": "\u21AC",
      "rarrpl;": "\u2945",
      "Rarrtl;": "\u2916",
      "rarrtl;": "\u21A3",
      "rAtail;": "\u291C",
      "ratail;": "\u291A",
      "rbrace;": "}",
      "rbrack;": "]",
      "Rcaron;": "\u0158",
      "rcaron;": "\u0159",
      "Rcedil;": "\u0156",
      "rcedil;": "\u0157",
      "rdquor;": "\u201D",
      "rfisht;": "\u297D",
      "rfloor;": "\u230B",
      "rharul;": "\u296C",
      "rmoust;": "\u23B1",
      "roplus;": "\u2A2E",
      "rpargt;": "\u2994",
      "rsaquo;": "\u203A",
      "rsquor;": "\u2019",
      "rthree;": "\u22CC",
      "rtimes;": "\u22CA",
      "Sacute;": "\u015A",
      "sacute;": "\u015B",
      "Scaron;": "\u0160",
      "scaron;": "\u0161",
      "Scedil;": "\u015E",
      "scedil;": "\u015F",
      "scnsim;": "\u22E9",
      "searhk;": "\u2925",
      "seswar;": "\u2929",
      "sfrown;": "\u2322",
      "SHCHcy;": "\u0429",
      "shchcy;": "\u0449",
      "sigmaf;": "\u03C2",
      "sigmav;": "\u03C2",
      "simdot;": "\u2A6A",
      "smashp;": "\u2A33",
      "SOFTcy;": "\u042C",
      "softcy;": "\u044C",
      "solbar;": "\u233F",
      "spades;": "\u2660",
      "sqcaps;": "\u2293\uFE00",
      "sqcups;": "\u2294\uFE00",
      "sqsube;": "\u2291",
      "sqsupe;": "\u2292",
      "Square;": "\u25A1",
      "square;": "\u25A1",
      "squarf;": "\u25AA",
      "ssetmn;": "\u2216",
      "ssmile;": "\u2323",
      "sstarf;": "\u22C6",
      "subdot;": "\u2ABD",
      "Subset;": "\u22D0",
      "subset;": "\u2282",
      "subsim;": "\u2AC7",
      "subsub;": "\u2AD5",
      "subsup;": "\u2AD3",
      "succeq;": "\u2AB0",
      "supdot;": "\u2ABE",
      "Supset;": "\u22D1",
      "supset;": "\u2283",
      "supsim;": "\u2AC8",
      "supsub;": "\u2AD4",
      "supsup;": "\u2AD6",
      "swarhk;": "\u2926",
      "swnwar;": "\u292A",
      "target;": "\u2316",
      "Tcaron;": "\u0164",
      "tcaron;": "\u0165",
      "Tcedil;": "\u0162",
      "tcedil;": "\u0163",
      "telrec;": "\u2315",
      "there4;": "\u2234",
      "thetav;": "\u03D1",
      "thinsp;": "\u2009",
      "thksim;": "\u223C",
      "timesb;": "\u22A0",
      "timesd;": "\u2A30",
      "topbot;": "\u2336",
      "topcir;": "\u2AF1",
      "tprime;": "\u2034",
      "tridot;": "\u25EC",
      "Tstrok;": "\u0166",
      "tstrok;": "\u0167",
      "Uacute;": "\xDA",
      "uacute;": "\xFA",
      "Ubreve;": "\u016C",
      "ubreve;": "\u016D",
      "Udblac;": "\u0170",
      "udblac;": "\u0171",
      "ufisht;": "\u297E",
      "Ugrave;": "\xD9",
      "ugrave;": "\xF9",
      "ulcorn;": "\u231C",
      "ulcrop;": "\u230F",
      "urcorn;": "\u231D",
      "urcrop;": "\u230E",
      "Utilde;": "\u0168",
      "utilde;": "\u0169",
      "vangrt;": "\u299C",
      "varphi;": "\u03D5",
      "varrho;": "\u03F1",
      "Vdashl;": "\u2AE6",
      "veebar;": "\u22BB",
      "vellip;": "\u22EE",
      "Verbar;": "\u2016",
      "verbar;": "|",
      "vsubnE;": "\u2ACB\uFE00",
      "vsubne;": "\u228A\uFE00",
      "vsupnE;": "\u2ACC\uFE00",
      "vsupne;": "\u228B\uFE00",
      "Vvdash;": "\u22AA",
      "wedbar;": "\u2A5F",
      "wedgeq;": "\u2259",
      "weierp;": "\u2118",
      "wreath;": "\u2240",
      "xoplus;": "\u2A01",
      "xotime;": "\u2A02",
      "xsqcup;": "\u2A06",
      "xuplus;": "\u2A04",
      "xwedge;": "\u22C0",
      "Yacute;": "\xDD",
      "yacute;": "\xFD",
      "Zacute;": "\u0179",
      "zacute;": "\u017A",
      "Zcaron;": "\u017D",
      "zcaron;": "\u017E",
      "zeetrf;": "\u2128",
      "alefsym;": "\u2135",
      "angrtvb;": "\u22BE",
      "angzarr;": "\u237C",
      "asympeq;": "\u224D",
      "backsim;": "\u223D",
      "Because;": "\u2235",
      "because;": "\u2235",
      "bemptyv;": "\u29B0",
      "between;": "\u226C",
      "bigcirc;": "\u25EF",
      "bigodot;": "\u2A00",
      "bigstar;": "\u2605",
      "bnequiv;": "\u2261\u20E5",
      "boxplus;": "\u229E",
      "Cayleys;": "\u212D",
      "Cconint;": "\u2230",
      "ccupssm;": "\u2A50",
      "Cedilla;": "\xB8",
      "cemptyv;": "\u29B2",
      "cirscir;": "\u29C2",
      "coloneq;": "\u2254",
      "congdot;": "\u2A6D",
      "cudarrl;": "\u2938",
      "cudarrr;": "\u2935",
      "cularrp;": "\u293D",
      "curarrm;": "\u293C",
      "dbkarow;": "\u290F",
      "ddagger;": "\u2021",
      "ddotseq;": "\u2A77",
      "demptyv;": "\u29B1",
      "Diamond;": "\u22C4",
      "diamond;": "\u22C4",
      "digamma;": "\u03DD",
      "dotplus;": "\u2214",
      "DownTee;": "\u22A4",
      "dwangle;": "\u29A6",
      "Element;": "\u2208",
      "Epsilon;": "\u0395",
      "epsilon;": "\u03B5",
      "eqcolon;": "\u2255",
      "equivDD;": "\u2A78",
      "gesdoto;": "\u2A82",
      "gtquest;": "\u2A7C",
      "gtrless;": "\u2277",
      "harrcir;": "\u2948",
      "Implies;": "\u21D2",
      "intprod;": "\u2A3C",
      "isindot;": "\u22F5",
      "larrbfs;": "\u291F",
      "larrsim;": "\u2973",
      "lbrksld;": "\u298F",
      "lbrkslu;": "\u298D",
      "ldrdhar;": "\u2967",
      "LeftTee;": "\u22A3",
      "lesdoto;": "\u2A81",
      "lessdot;": "\u22D6",
      "lessgtr;": "\u2276",
      "lesssim;": "\u2272",
      "lotimes;": "\u2A34",
      "lozenge;": "\u25CA",
      "ltquest;": "\u2A7B",
      "luruhar;": "\u2966",
      "maltese;": "\u2720",
      "minusdu;": "\u2A2A",
      "napprox;": "\u2249",
      "natural;": "\u266E",
      "nearrow;": "\u2197",
      "NewLine;": "\n",
      "nexists;": "\u2204",
      "NoBreak;": "\u2060",
      "notinva;": "\u2209",
      "notinvb;": "\u22F7",
      "notinvc;": "\u22F6",
      "NotLess;": "\u226E",
      "notniva;": "\u220C",
      "notnivb;": "\u22FE",
      "notnivc;": "\u22FD",
      "npolint;": "\u2A14",
      "npreceq;": "\u2AAF\u0338",
      "nsqsube;": "\u22E2",
      "nsqsupe;": "\u22E3",
      "nsubset;": "\u2282\u20D2",
      "nsucceq;": "\u2AB0\u0338",
      "nsupset;": "\u2283\u20D2",
      "nvinfin;": "\u29DE",
      "nvltrie;": "\u22B4\u20D2",
      "nvrtrie;": "\u22B5\u20D2",
      "nwarrow;": "\u2196",
      "olcross;": "\u29BB",
      "Omicron;": "\u039F",
      "omicron;": "\u03BF",
      "orderof;": "\u2134",
      "orslope;": "\u2A57",
      "OverBar;": "\u203E",
      "pertenk;": "\u2031",
      "planckh;": "\u210E",
      "pluscir;": "\u2A22",
      "plussim;": "\u2A26",
      "plustwo;": "\u2A27",
      "precsim;": "\u227E",
      "Product;": "\u220F",
      "quatint;": "\u2A16",
      "questeq;": "\u225F",
      "rarrbfs;": "\u2920",
      "rarrsim;": "\u2974",
      "rbrksld;": "\u298E",
      "rbrkslu;": "\u2990",
      "rdldhar;": "\u2969",
      "realine;": "\u211B",
      "rotimes;": "\u2A35",
      "ruluhar;": "\u2968",
      "searrow;": "\u2198",
      "simplus;": "\u2A24",
      "simrarr;": "\u2972",
      "subedot;": "\u2AC3",
      "submult;": "\u2AC1",
      "subplus;": "\u2ABF",
      "subrarr;": "\u2979",
      "succsim;": "\u227F",
      "supdsub;": "\u2AD8",
      "supedot;": "\u2AC4",
      "suphsol;": "\u27C9",
      "suphsub;": "\u2AD7",
      "suplarr;": "\u297B",
      "supmult;": "\u2AC2",
      "supplus;": "\u2AC0",
      "swarrow;": "\u2199",
      "topfork;": "\u2ADA",
      "triplus;": "\u2A39",
      "tritime;": "\u2A3B",
      "UpArrow;": "\u2191",
      "Uparrow;": "\u21D1",
      "uparrow;": "\u2191",
      "Upsilon;": "\u03A5",
      "upsilon;": "\u03C5",
      "uwangle;": "\u29A7",
      "vzigzag;": "\u299A",
      "zigrarr;": "\u21DD",
      "andslope;": "\u2A58",
      "angmsdaa;": "\u29A8",
      "angmsdab;": "\u29A9",
      "angmsdac;": "\u29AA",
      "angmsdad;": "\u29AB",
      "angmsdae;": "\u29AC",
      "angmsdaf;": "\u29AD",
      "angmsdag;": "\u29AE",
      "angmsdah;": "\u29AF",
      "angrtvbd;": "\u299D",
      "approxeq;": "\u224A",
      "awconint;": "\u2233",
      "backcong;": "\u224C",
      "barwedge;": "\u2305",
      "bbrktbrk;": "\u23B6",
      "bigoplus;": "\u2A01",
      "bigsqcup;": "\u2A06",
      "biguplus;": "\u2A04",
      "bigwedge;": "\u22C0",
      "boxminus;": "\u229F",
      "boxtimes;": "\u22A0",
      "bsolhsub;": "\u27C8",
      "capbrcup;": "\u2A49",
      "circledR;": "\xAE",
      "circledS;": "\u24C8",
      "cirfnint;": "\u2A10",
      "clubsuit;": "\u2663",
      "cupbrcap;": "\u2A48",
      "curlyvee;": "\u22CE",
      "cwconint;": "\u2232",
      "DDotrahd;": "\u2911",
      "doteqdot;": "\u2251",
      "DotEqual;": "\u2250",
      "dotminus;": "\u2238",
      "drbkarow;": "\u2910",
      "dzigrarr;": "\u27FF",
      "elinters;": "\u23E7",
      "emptyset;": "\u2205",
      "eqvparsl;": "\u29E5",
      "fpartint;": "\u2A0D",
      "geqslant;": "\u2A7E",
      "gesdotol;": "\u2A84",
      "gnapprox;": "\u2A8A",
      "hksearow;": "\u2925",
      "hkswarow;": "\u2926",
      "imagline;": "\u2110",
      "imagpart;": "\u2111",
      "infintie;": "\u29DD",
      "integers;": "\u2124",
      "Integral;": "\u222B",
      "intercal;": "\u22BA",
      "intlarhk;": "\u2A17",
      "laemptyv;": "\u29B4",
      "ldrushar;": "\u294B",
      "leqslant;": "\u2A7D",
      "lesdotor;": "\u2A83",
      "LessLess;": "\u2AA1",
      "llcorner;": "\u231E",
      "lnapprox;": "\u2A89",
      "lrcorner;": "\u231F",
      "lurdshar;": "\u294A",
      "mapstoup;": "\u21A5",
      "multimap;": "\u22B8",
      "naturals;": "\u2115",
      "ncongdot;": "\u2A6D\u0338",
      "NotEqual;": "\u2260",
      "notindot;": "\u22F5\u0338",
      "NotTilde;": "\u2241",
      "otimesas;": "\u2A36",
      "parallel;": "\u2225",
      "PartialD;": "\u2202",
      "plusacir;": "\u2A23",
      "pointint;": "\u2A15",
      "Precedes;": "\u227A",
      "precneqq;": "\u2AB5",
      "precnsim;": "\u22E8",
      "profalar;": "\u232E",
      "profline;": "\u2312",
      "profsurf;": "\u2313",
      "raemptyv;": "\u29B3",
      "realpart;": "\u211C",
      "RightTee;": "\u22A2",
      "rppolint;": "\u2A12",
      "rtriltri;": "\u29CE",
      "scpolint;": "\u2A13",
      "setminus;": "\u2216",
      "shortmid;": "\u2223",
      "smeparsl;": "\u29E4",
      "sqsubset;": "\u228F",
      "sqsupset;": "\u2290",
      "subseteq;": "\u2286",
      "Succeeds;": "\u227B",
      "succneqq;": "\u2AB6",
      "succnsim;": "\u22E9",
      "SuchThat;": "\u220B",
      "Superset;": "\u2283",
      "supseteq;": "\u2287",
      "thetasym;": "\u03D1",
      "thicksim;": "\u223C",
      "timesbar;": "\u2A31",
      "triangle;": "\u25B5",
      "triminus;": "\u2A3A",
      "trpezium;": "\u23E2",
      "Uarrocir;": "\u2949",
      "ulcorner;": "\u231C",
      "UnderBar;": "_",
      "urcorner;": "\u231D",
      "varkappa;": "\u03F0",
      "varsigma;": "\u03C2",
      "vartheta;": "\u03D1",
      "backprime;": "\u2035",
      "backsimeq;": "\u22CD",
      "Backslash;": "\u2216",
      "bigotimes;": "\u2A02",
      "CenterDot;": "\xB7",
      "centerdot;": "\xB7",
      "checkmark;": "\u2713",
      "CircleDot;": "\u2299",
      "complexes;": "\u2102",
      "Congruent;": "\u2261",
      "Coproduct;": "\u2210",
      "dotsquare;": "\u22A1",
      "DoubleDot;": "\xA8",
      "DownArrow;": "\u2193",
      "Downarrow;": "\u21D3",
      "downarrow;": "\u2193",
      "DownBreve;": "\u0311",
      "gtrapprox;": "\u2A86",
      "gtreqless;": "\u22DB",
      "gvertneqq;": "\u2269\uFE00",
      "heartsuit;": "\u2665",
      "HumpEqual;": "\u224F",
      "LeftArrow;": "\u2190",
      "Leftarrow;": "\u21D0",
      "leftarrow;": "\u2190",
      "LeftFloor;": "\u230A",
      "lesseqgtr;": "\u22DA",
      "LessTilde;": "\u2272",
      "lvertneqq;": "\u2268\uFE00",
      "Mellintrf;": "\u2133",
      "MinusPlus;": "\u2213",
      "ngeqslant;": "\u2A7E\u0338",
      "nleqslant;": "\u2A7D\u0338",
      "NotCupCap;": "\u226D",
      "NotExists;": "\u2204",
      "NotSubset;": "\u2282\u20D2",
      "nparallel;": "\u2226",
      "nshortmid;": "\u2224",
      "nsubseteq;": "\u2288",
      "nsupseteq;": "\u2289",
      "OverBrace;": "\u23DE",
      "pitchfork;": "\u22D4",
      "PlusMinus;": "\xB1",
      "rationals;": "\u211A",
      "spadesuit;": "\u2660",
      "subseteqq;": "\u2AC5",
      "subsetneq;": "\u228A",
      "supseteqq;": "\u2AC6",
      "supsetneq;": "\u228B",
      "Therefore;": "\u2234",
      "therefore;": "\u2234",
      "ThinSpace;": "\u2009",
      "triangleq;": "\u225C",
      "TripleDot;": "\u20DB",
      "UnionPlus;": "\u228E",
      "varpropto;": "\u221D",
      "Bernoullis;": "\u212C",
      "circledast;": "\u229B",
      "CirclePlus;": "\u2295",
      "complement;": "\u2201",
      "curlywedge;": "\u22CF",
      "eqslantgtr;": "\u2A96",
      "EqualTilde;": "\u2242",
      "Fouriertrf;": "\u2131",
      "gtreqqless;": "\u2A8C",
      "ImaginaryI;": "\u2148",
      "Laplacetrf;": "\u2112",
      "LeftVector;": "\u21BC",
      "lessapprox;": "\u2A85",
      "lesseqqgtr;": "\u2A8B",
      "Lleftarrow;": "\u21DA",
      "lmoustache;": "\u23B0",
      "longmapsto;": "\u27FC",
      "mapstodown;": "\u21A7",
      "mapstoleft;": "\u21A4",
      "nLeftarrow;": "\u21CD",
      "nleftarrow;": "\u219A",
      "NotElement;": "\u2209",
      "NotGreater;": "\u226F",
      "nsubseteqq;": "\u2AC5\u0338",
      "nsupseteqq;": "\u2AC6\u0338",
      "precapprox;": "\u2AB7",
      "Proportion;": "\u2237",
      "RightArrow;": "\u2192",
      "Rightarrow;": "\u21D2",
      "rightarrow;": "\u2192",
      "RightFloor;": "\u230B",
      "rmoustache;": "\u23B1",
      "sqsubseteq;": "\u2291",
      "sqsupseteq;": "\u2292",
      "subsetneqq;": "\u2ACB",
      "succapprox;": "\u2AB8",
      "supsetneqq;": "\u2ACC",
      "ThickSpace;": "\u205F\u200A",
      "TildeEqual;": "\u2243",
      "TildeTilde;": "\u2248",
      "UnderBrace;": "\u23DF",
      "UpArrowBar;": "\u2912",
      "UpTeeArrow;": "\u21A5",
      "upuparrows;": "\u21C8",
      "varepsilon;": "\u03F5",
      "varnothing;": "\u2205",
      "backepsilon;": "\u03F6",
      "blacksquare;": "\u25AA",
      "circledcirc;": "\u229A",
      "circleddash;": "\u229D",
      "CircleMinus;": "\u2296",
      "CircleTimes;": "\u2297",
      "curlyeqprec;": "\u22DE",
      "curlyeqsucc;": "\u22DF",
      "diamondsuit;": "\u2666",
      "eqslantless;": "\u2A95",
      "Equilibrium;": "\u21CC",
      "expectation;": "\u2130",
      "GreaterLess;": "\u2277",
      "LeftCeiling;": "\u2308",
      "LessGreater;": "\u2276",
      "MediumSpace;": "\u205F",
      "NotLessLess;": "\u226A\u0338",
      "NotPrecedes;": "\u2280",
      "NotSucceeds;": "\u2281",
      "NotSuperset;": "\u2283\u20D2",
      "nRightarrow;": "\u21CF",
      "nrightarrow;": "\u219B",
      "OverBracket;": "\u23B4",
      "preccurlyeq;": "\u227C",
      "precnapprox;": "\u2AB9",
      "quaternions;": "\u210D",
      "RightVector;": "\u21C0",
      "Rrightarrow;": "\u21DB",
      "RuleDelayed;": "\u29F4",
      "SmallCircle;": "\u2218",
      "SquareUnion;": "\u2294",
      "straightphi;": "\u03D5",
      "SubsetEqual;": "\u2286",
      "succcurlyeq;": "\u227D",
      "succnapprox;": "\u2ABA",
      "thickapprox;": "\u2248",
      "UpDownArrow;": "\u2195",
      "Updownarrow;": "\u21D5",
      "updownarrow;": "\u2195",
      "VerticalBar;": "\u2223",
      "blacklozenge;": "\u29EB",
      "DownArrowBar;": "\u2913",
      "DownTeeArrow;": "\u21A7",
      "ExponentialE;": "\u2147",
      "exponentiale;": "\u2147",
      "GreaterEqual;": "\u2265",
      "GreaterTilde;": "\u2273",
      "HilbertSpace;": "\u210B",
      "HumpDownHump;": "\u224E",
      "Intersection;": "\u22C2",
      "LeftArrowBar;": "\u21E4",
      "LeftTeeArrow;": "\u21A4",
      "LeftTriangle;": "\u22B2",
      "LeftUpVector;": "\u21BF",
      "NotCongruent;": "\u2262",
      "NotHumpEqual;": "\u224F\u0338",
      "NotLessEqual;": "\u2270",
      "NotLessTilde;": "\u2274",
      "Proportional;": "\u221D",
      "RightCeiling;": "\u2309",
      "risingdotseq;": "\u2253",
      "RoundImplies;": "\u2970",
      "ShortUpArrow;": "\u2191",
      "SquareSubset;": "\u228F",
      "triangledown;": "\u25BF",
      "triangleleft;": "\u25C3",
      "UnderBracket;": "\u23B5",
      "varsubsetneq;": "\u228A\uFE00",
      "varsupsetneq;": "\u228B\uFE00",
      "VerticalLine;": "|",
      "ApplyFunction;": "\u2061",
      "bigtriangleup;": "\u25B3",
      "blacktriangle;": "\u25B4",
      "DifferentialD;": "\u2146",
      "divideontimes;": "\u22C7",
      "DoubleLeftTee;": "\u2AE4",
      "DoubleUpArrow;": "\u21D1",
      "fallingdotseq;": "\u2252",
      "hookleftarrow;": "\u21A9",
      "leftarrowtail;": "\u21A2",
      "leftharpoonup;": "\u21BC",
      "LeftTeeVector;": "\u295A",
      "LeftVectorBar;": "\u2952",
      "LessFullEqual;": "\u2266",
      "LongLeftArrow;": "\u27F5",
      "Longleftarrow;": "\u27F8",
      "longleftarrow;": "\u27F5",
      "looparrowleft;": "\u21AB",
      "measuredangle;": "\u2221",
      "NotEqualTilde;": "\u2242\u0338",
      "NotTildeEqual;": "\u2244",
      "NotTildeTilde;": "\u2249",
      "ntriangleleft;": "\u22EA",
      "Poincareplane;": "\u210C",
      "PrecedesEqual;": "\u2AAF",
      "PrecedesTilde;": "\u227E",
      "RightArrowBar;": "\u21E5",
      "RightTeeArrow;": "\u21A6",
      "RightTriangle;": "\u22B3",
      "RightUpVector;": "\u21BE",
      "shortparallel;": "\u2225",
      "smallsetminus;": "\u2216",
      "SucceedsEqual;": "\u2AB0",
      "SucceedsTilde;": "\u227F",
      "SupersetEqual;": "\u2287",
      "triangleright;": "\u25B9",
      "UpEquilibrium;": "\u296E",
      "upharpoonleft;": "\u21BF",
      "varsubsetneqq;": "\u2ACB\uFE00",
      "varsupsetneqq;": "\u2ACC\uFE00",
      "VerticalTilde;": "\u2240",
      "VeryThinSpace;": "\u200A",
      "curvearrowleft;": "\u21B6",
      "DiacriticalDot;": "\u02D9",
      "doublebarwedge;": "\u2306",
      "DoubleRightTee;": "\u22A8",
      "downdownarrows;": "\u21CA",
      "DownLeftVector;": "\u21BD",
      "GreaterGreater;": "\u2AA2",
      "hookrightarrow;": "\u21AA",
      "HorizontalLine;": "\u2500",
      "InvisibleComma;": "\u2063",
      "InvisibleTimes;": "\u2062",
      "LeftDownVector;": "\u21C3",
      "leftleftarrows;": "\u21C7",
      "LeftRightArrow;": "\u2194",
      "Leftrightarrow;": "\u21D4",
      "leftrightarrow;": "\u2194",
      "leftthreetimes;": "\u22CB",
      "LessSlantEqual;": "\u2A7D",
      "LongRightArrow;": "\u27F6",
      "Longrightarrow;": "\u27F9",
      "longrightarrow;": "\u27F6",
      "looparrowright;": "\u21AC",
      "LowerLeftArrow;": "\u2199",
      "NestedLessLess;": "\u226A",
      "NotGreaterLess;": "\u2279",
      "NotLessGreater;": "\u2278",
      "NotSubsetEqual;": "\u2288",
      "NotVerticalBar;": "\u2224",
      "nshortparallel;": "\u2226",
      "ntriangleright;": "\u22EB",
      "OpenCurlyQuote;": "\u2018",
      "ReverseElement;": "\u220B",
      "rightarrowtail;": "\u21A3",
      "rightharpoonup;": "\u21C0",
      "RightTeeVector;": "\u295B",
      "RightVectorBar;": "\u2953",
      "ShortDownArrow;": "\u2193",
      "ShortLeftArrow;": "\u2190",
      "SquareSuperset;": "\u2290",
      "TildeFullEqual;": "\u2245",
      "trianglelefteq;": "\u22B4",
      "upharpoonright;": "\u21BE",
      "UpperLeftArrow;": "\u2196",
      "ZeroWidthSpace;": "\u200B",
      "bigtriangledown;": "\u25BD",
      "circlearrowleft;": "\u21BA",
      "CloseCurlyQuote;": "\u2019",
      "ContourIntegral;": "\u222E",
      "curvearrowright;": "\u21B7",
      "DoubleDownArrow;": "\u21D3",
      "DoubleLeftArrow;": "\u21D0",
      "downharpoonleft;": "\u21C3",
      "DownRightVector;": "\u21C1",
      "leftharpoondown;": "\u21BD",
      "leftrightarrows;": "\u21C6",
      "LeftRightVector;": "\u294E",
      "LeftTriangleBar;": "\u29CF",
      "LeftUpTeeVector;": "\u2960",
      "LeftUpVectorBar;": "\u2958",
      "LowerRightArrow;": "\u2198",
      "nLeftrightarrow;": "\u21CE",
      "nleftrightarrow;": "\u21AE",
      "NotGreaterEqual;": "\u2271",
      "NotGreaterTilde;": "\u2275",
      "NotHumpDownHump;": "\u224E\u0338",
      "NotLeftTriangle;": "\u22EA",
      "NotSquareSubset;": "\u228F\u0338",
      "ntrianglelefteq;": "\u22EC",
      "OverParenthesis;": "\u23DC",
      "RightDownVector;": "\u21C2",
      "rightleftarrows;": "\u21C4",
      "rightsquigarrow;": "\u219D",
      "rightthreetimes;": "\u22CC",
      "ShortRightArrow;": "\u2192",
      "straightepsilon;": "\u03F5",
      "trianglerighteq;": "\u22B5",
      "UpperRightArrow;": "\u2197",
      "vartriangleleft;": "\u22B2",
      "circlearrowright;": "\u21BB",
      "DiacriticalAcute;": "\xB4",
      "DiacriticalGrave;": "`",
      "DiacriticalTilde;": "\u02DC",
      "DoubleRightArrow;": "\u21D2",
      "DownArrowUpArrow;": "\u21F5",
      "downharpoonright;": "\u21C2",
      "EmptySmallSquare;": "\u25FB",
      "GreaterEqualLess;": "\u22DB",
      "GreaterFullEqual;": "\u2267",
      "LeftAngleBracket;": "\u27E8",
      "LeftUpDownVector;": "\u2951",
      "LessEqualGreater;": "\u22DA",
      "NonBreakingSpace;": "\xA0",
      "NotPrecedesEqual;": "\u2AAF\u0338",
      "NotRightTriangle;": "\u22EB",
      "NotSucceedsEqual;": "\u2AB0\u0338",
      "NotSucceedsTilde;": "\u227F\u0338",
      "NotSupersetEqual;": "\u2289",
      "ntrianglerighteq;": "\u22ED",
      "rightharpoondown;": "\u21C1",
      "rightrightarrows;": "\u21C9",
      "RightTriangleBar;": "\u29D0",
      "RightUpTeeVector;": "\u295C",
      "RightUpVectorBar;": "\u2954",
      "twoheadleftarrow;": "\u219E",
      "UnderParenthesis;": "\u23DD",
      "UpArrowDownArrow;": "\u21C5",
      "vartriangleright;": "\u22B3",
      "blacktriangledown;": "\u25BE",
      "blacktriangleleft;": "\u25C2",
      "DoubleUpDownArrow;": "\u21D5",
      "DoubleVerticalBar;": "\u2225",
      "DownLeftTeeVector;": "\u295E",
      "DownLeftVectorBar;": "\u2956",
      "FilledSmallSquare;": "\u25FC",
      "GreaterSlantEqual;": "\u2A7E",
      "LeftDoubleBracket;": "\u27E6",
      "LeftDownTeeVector;": "\u2961",
      "LeftDownVectorBar;": "\u2959",
      "leftrightharpoons;": "\u21CB",
      "LeftTriangleEqual;": "\u22B4",
      "NegativeThinSpace;": "\u200B",
      "NotGreaterGreater;": "\u226B\u0338",
      "NotLessSlantEqual;": "\u2A7D\u0338",
      "NotNestedLessLess;": "\u2AA1\u0338",
      "NotReverseElement;": "\u220C",
      "NotSquareSuperset;": "\u2290\u0338",
      "NotTildeFullEqual;": "\u2247",
      "RightAngleBracket;": "\u27E9",
      "rightleftharpoons;": "\u21CC",
      "RightUpDownVector;": "\u294F",
      "SquareSubsetEqual;": "\u2291",
      "twoheadrightarrow;": "\u21A0",
      "VerticalSeparator;": "\u2758",
      "blacktriangleright;": "\u25B8",
      "DownRightTeeVector;": "\u295F",
      "DownRightVectorBar;": "\u2957",
      "LongLeftRightArrow;": "\u27F7",
      "Longleftrightarrow;": "\u27FA",
      "longleftrightarrow;": "\u27F7",
      "NegativeThickSpace;": "\u200B",
      "NotLeftTriangleBar;": "\u29CF\u0338",
      "PrecedesSlantEqual;": "\u227C",
      "ReverseEquilibrium;": "\u21CB",
      "RightDoubleBracket;": "\u27E7",
      "RightDownTeeVector;": "\u295D",
      "RightDownVectorBar;": "\u2955",
      "RightTriangleEqual;": "\u22B5",
      "SquareIntersection;": "\u2293",
      "SucceedsSlantEqual;": "\u227D",
      "DoubleLongLeftArrow;": "\u27F8",
      "DownLeftRightVector;": "\u2950",
      "LeftArrowRightArrow;": "\u21C6",
      "leftrightsquigarrow;": "\u21AD",
      "NegativeMediumSpace;": "\u200B",
      "NotGreaterFullEqual;": "\u2267\u0338",
      "NotRightTriangleBar;": "\u29D0\u0338",
      "RightArrowLeftArrow;": "\u21C4",
      "SquareSupersetEqual;": "\u2292",
      "CapitalDifferentialD;": "\u2145",
      "DoubleLeftRightArrow;": "\u21D4",
      "DoubleLongRightArrow;": "\u27F9",
      "EmptyVerySmallSquare;": "\u25AB",
      "NestedGreaterGreater;": "\u226B",
      "NotDoubleVerticalBar;": "\u2226",
      "NotGreaterSlantEqual;": "\u2A7E\u0338",
      "NotLeftTriangleEqual;": "\u22EC",
      "NotSquareSubsetEqual;": "\u22E2",
      "OpenCurlyDoubleQuote;": "\u201C",
      "ReverseUpEquilibrium;": "\u296F",
      "CloseCurlyDoubleQuote;": "\u201D",
      "DoubleContourIntegral;": "\u222F",
      "FilledVerySmallSquare;": "\u25AA",
      "NegativeVeryThinSpace;": "\u200B",
      "NotPrecedesSlantEqual;": "\u22E0",
      "NotRightTriangleEqual;": "\u22ED",
      "NotSucceedsSlantEqual;": "\u22E1",
      "DiacriticalDoubleAcute;": "\u02DD",
      "NotSquareSupersetEqual;": "\u22E3",
      "NotNestedGreaterGreater;": "\u2AA2\u0338",
      "ClockwiseContourIntegral;": "\u2232",
      "DoubleLongLeftRightArrow;": "\u27FA",
      "CounterClockwiseContourIntegral;": "\u2233"
    };
    var maxCRNameLength2;
    var decodeHtml2 = (rawText, asAttr) => {
      let offset = 0;
      const end = rawText.length;
      let decodedText = "";
      function advance2(length2) {
        offset += length2;
        rawText = rawText.slice(length2);
      }
      while (offset < end) {
        const head = /&(?:#x?)?/i.exec(rawText);
        if (!head || offset + head.index >= end) {
          const remaining = end - offset;
          decodedText += rawText.slice(0, remaining);
          advance2(remaining);
          break;
        }
        decodedText += rawText.slice(0, head.index);
        advance2(head.index);
        if (head[0] === "&") {
          let name = "";
          let value = void 0;
          if (/[0-9a-z]/i.test(rawText[1])) {
            if (!maxCRNameLength2) {
              maxCRNameLength2 = Object.keys(namedCharacterReferences2).reduce((max, name2) => Math.max(max, name2.length), 0);
            }
            for (let length2 = maxCRNameLength2; !value && length2 > 0; --length2) {
              name = rawText.slice(1, 1 + length2);
              value = namedCharacterReferences2[name];
            }
            if (value) {
              const semi = name.endsWith(";");
              if (asAttr && !semi && /[=a-z0-9]/i.test(rawText[name.length + 1] || "")) {
                decodedText += "&" + name;
                advance2(1 + name.length);
              } else {
                decodedText += value;
                advance2(1 + name.length);
              }
            } else {
              decodedText += "&" + name;
              advance2(1 + name.length);
            }
          } else {
            decodedText += "&";
            advance2(1);
          }
        } else {
          const hex = head[0] === "&#x";
          const pattern = hex ? /^&#x([0-9a-f]+);?/i : /^&#([0-9]+);?/;
          const body = pattern.exec(rawText);
          if (!body) {
            decodedText += head[0];
            advance2(head[0].length);
          } else {
            let cp = Number.parseInt(body[1], hex ? 16 : 10);
            if (cp === 0) {
              cp = 65533;
            } else if (cp > 1114111) {
              cp = 65533;
            } else if (cp >= 55296 && cp <= 57343) {
              cp = 65533;
            } else if (cp >= 64976 && cp <= 65007 || (cp & 65534) === 65534)
              ;
            else if (cp >= 1 && cp <= 8 || cp === 11 || cp >= 13 && cp <= 31 || cp >= 127 && cp <= 159) {
              cp = CCR_REPLACEMENTS2[cp] || cp;
            }
            decodedText += String.fromCodePoint(cp);
            advance2(body[0].length);
          }
        }
      }
      return decodedText;
    };
    var CCR_REPLACEMENTS2 = {
      128: 8364,
      130: 8218,
      131: 402,
      132: 8222,
      133: 8230,
      134: 8224,
      135: 8225,
      136: 710,
      137: 8240,
      138: 352,
      139: 8249,
      140: 338,
      142: 381,
      145: 8216,
      146: 8217,
      147: 8220,
      148: 8221,
      149: 8226,
      150: 8211,
      151: 8212,
      152: 732,
      153: 8482,
      154: 353,
      155: 8250,
      156: 339,
      158: 382,
      159: 376
    };
    var isRawTextContainer2 = /* @__PURE__ */ shared.makeMap("style,iframe,script,noscript", true);
    var parserOptions2 = {
      isVoidTag: shared.isVoidTag,
      isNativeTag: (tag2) => shared.isHTMLTag(tag2) || shared.isSVGTag(tag2),
      isPreTag: (tag2) => tag2 === "pre",
      decodeEntities: decodeHtml2,
      isBuiltInComponent: (tag2) => {
        if (compilerCore.isBuiltInType(tag2, `Transition`)) {
          return TRANSITION2;
        } else if (compilerCore.isBuiltInType(tag2, `TransitionGroup`)) {
          return TRANSITION_GROUP2;
        }
      },
      getNamespace(tag2, parent) {
        let ns = parent ? parent.ns : 0;
        if (parent && ns === 2) {
          if (parent.tag === "annotation-xml") {
            if (tag2 === "svg") {
              return 1;
            }
            if (parent.props.some((a) => a.type === 6 && a.name === "encoding" && a.value != null && (a.value.content === "text/html" || a.value.content === "application/xhtml+xml"))) {
              ns = 0;
            }
          } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag2 !== "mglyph" && tag2 !== "malignmark") {
            ns = 0;
          }
        } else if (parent && ns === 1) {
          if (parent.tag === "foreignObject" || parent.tag === "desc" || parent.tag === "title") {
            ns = 0;
          }
        }
        if (ns === 0) {
          if (tag2 === "svg") {
            return 1;
          }
          if (tag2 === "math") {
            return 2;
          }
        }
        return ns;
      },
      getTextMode({ tag: tag2, ns }) {
        if (ns === 0) {
          if (tag2 === "textarea" || tag2 === "title") {
            return 1;
          }
          if (isRawTextContainer2(tag2)) {
            return 2;
          }
        }
        return 0;
      }
    };
    var transformStyle2 = (node2) => {
      if (node2.type === 1) {
        node2.props.forEach((p, i) => {
          if (p.type === 6 && p.name === "style" && p.value) {
            node2.props[i] = {
              type: 7,
              name: `bind`,
              arg: compilerCore.createSimpleExpression(`style`, true, p.loc),
              exp: parseInlineCSS2(p.value.content, p.loc),
              modifiers: [],
              loc: p.loc
            };
          }
        });
      }
    };
    var parseInlineCSS2 = (cssText, loc) => {
      const normalized = shared.parseStringStyle(cssText);
      return compilerCore.createSimpleExpression(JSON.stringify(normalized), false, loc, 3);
    };
    function createDOMCompilerError2(code, loc) {
      return compilerCore.createCompilerError(code, loc, DOMErrorMessages2);
    }
    var DOMErrorMessages2 = {
      [50]: `v-html is missing expression.`,
      [51]: `v-html will override element children.`,
      [52]: `v-text is missing expression.`,
      [53]: `v-text will override element children.`,
      [54]: `v-model can only be used on <input>, <textarea> and <select> elements.`,
      [55]: `v-model argument is not supported on plain elements.`,
      [56]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,
      [57]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,
      [58]: `v-show is missing expression.`,
      [59]: `<Transition> expects exactly one child element or component.`,
      [60]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`
    };
    var transformVHtml2 = (dir, node2, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError2(50, loc));
      }
      if (node2.children.length) {
        context.onError(createDOMCompilerError2(51, loc));
        node2.children.length = 0;
      }
      return {
        props: [
          compilerCore.createObjectProperty(compilerCore.createSimpleExpression(`innerHTML`, true, loc), exp || compilerCore.createSimpleExpression("", true))
        ]
      };
    };
    var transformVText2 = (dir, node2, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError2(52, loc));
      }
      if (node2.children.length) {
        context.onError(createDOMCompilerError2(53, loc));
        node2.children.length = 0;
      }
      return {
        props: [
          compilerCore.createObjectProperty(compilerCore.createSimpleExpression(`textContent`, true), exp ? compilerCore.createCallExpression(context.helperString(compilerCore.TO_DISPLAY_STRING), [exp], loc) : compilerCore.createSimpleExpression("", true))
        ]
      };
    };
    var transformModel2 = (dir, node2, context) => {
      const baseResult = compilerCore.transformModel(dir, node2, context);
      if (!baseResult.props.length || node2.tagType === 1) {
        return baseResult;
      }
      if (dir.arg) {
        context.onError(createDOMCompilerError2(55, dir.arg.loc));
      }
      function checkDuplicatedValue() {
        const value = compilerCore.findProp(node2, "value");
        if (value) {
          context.onError(createDOMCompilerError2(57, value.loc));
        }
      }
      const { tag: tag2 } = node2;
      const isCustomElement = context.isCustomElement(tag2);
      if (tag2 === "input" || tag2 === "textarea" || tag2 === "select" || isCustomElement) {
        let directiveToUse = V_MODEL_TEXT2;
        let isInvalidType = false;
        if (tag2 === "input" || isCustomElement) {
          const type = compilerCore.findProp(node2, `type`);
          if (type) {
            if (type.type === 7) {
              directiveToUse = V_MODEL_DYNAMIC2;
            } else if (type.value) {
              switch (type.value.content) {
                case "radio":
                  directiveToUse = V_MODEL_RADIO2;
                  break;
                case "checkbox":
                  directiveToUse = V_MODEL_CHECKBOX2;
                  break;
                case "file":
                  isInvalidType = true;
                  context.onError(createDOMCompilerError2(56, dir.loc));
                  break;
                default:
                  checkDuplicatedValue();
                  break;
              }
            }
          } else if (compilerCore.hasDynamicKeyVBind(node2)) {
            directiveToUse = V_MODEL_DYNAMIC2;
          } else {
            checkDuplicatedValue();
          }
        } else if (tag2 === "select") {
          directiveToUse = V_MODEL_SELECT2;
        } else {
          checkDuplicatedValue();
        }
        if (!isInvalidType) {
          baseResult.needRuntime = context.helper(directiveToUse);
        }
      } else {
        context.onError(createDOMCompilerError2(54, dir.loc));
      }
      baseResult.props = baseResult.props.filter((p) => !(p.key.type === 4 && p.key.content === "modelValue"));
      return baseResult;
    };
    var isEventOptionModifier2 = /* @__PURE__ */ shared.makeMap(`passive,once,capture`);
    var isNonKeyModifier2 = /* @__PURE__ */ shared.makeMap(`stop,prevent,self,ctrl,shift,alt,meta,exact,middle`);
    var maybeKeyModifier2 = /* @__PURE__ */ shared.makeMap("left,right");
    var isKeyboardEvent2 = /* @__PURE__ */ shared.makeMap(`onkeyup,onkeydown,onkeypress`, true);
    var resolveModifiers2 = (key, modifiers, context, loc) => {
      const keyModifiers = [];
      const nonKeyModifiers = [];
      const eventOptionModifiers = [];
      for (let i = 0; i < modifiers.length; i++) {
        const modifier = modifiers[i];
        if (modifier === "native" && compilerCore.checkCompatEnabled("COMPILER_V_ON_NATIVE", context, loc)) {
          eventOptionModifiers.push(modifier);
        } else if (isEventOptionModifier2(modifier)) {
          eventOptionModifiers.push(modifier);
        } else {
          if (maybeKeyModifier2(modifier)) {
            if (compilerCore.isStaticExp(key)) {
              if (isKeyboardEvent2(key.content)) {
                keyModifiers.push(modifier);
              } else {
                nonKeyModifiers.push(modifier);
              }
            } else {
              keyModifiers.push(modifier);
              nonKeyModifiers.push(modifier);
            }
          } else {
            if (isNonKeyModifier2(modifier)) {
              nonKeyModifiers.push(modifier);
            } else {
              keyModifiers.push(modifier);
            }
          }
        }
      }
      return {
        keyModifiers,
        nonKeyModifiers,
        eventOptionModifiers
      };
    };
    var transformClick2 = (key, event) => {
      const isStaticClick = compilerCore.isStaticExp(key) && key.content.toLowerCase() === "onclick";
      return isStaticClick ? compilerCore.createSimpleExpression(event, true) : key.type !== 4 ? compilerCore.createCompoundExpression([
        `(`,
        key,
        `) === "onClick" ? "${event}" : (`,
        key,
        `)`
      ]) : key;
    };
    var transformOn2 = (dir, node2, context) => {
      return compilerCore.transformOn(dir, node2, context, (baseResult) => {
        const { modifiers } = dir;
        if (!modifiers.length)
          return baseResult;
        let { key, value: handlerExp } = baseResult.props[0];
        const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers2(key, modifiers, context, dir.loc);
        if (nonKeyModifiers.includes("right")) {
          key = transformClick2(key, `onContextmenu`);
        }
        if (nonKeyModifiers.includes("middle")) {
          key = transformClick2(key, `onMouseup`);
        }
        if (nonKeyModifiers.length) {
          handlerExp = compilerCore.createCallExpression(context.helper(V_ON_WITH_MODIFIERS2), [
            handlerExp,
            JSON.stringify(nonKeyModifiers)
          ]);
        }
        if (keyModifiers.length && (!compilerCore.isStaticExp(key) || isKeyboardEvent2(key.content))) {
          handlerExp = compilerCore.createCallExpression(context.helper(V_ON_WITH_KEYS2), [
            handlerExp,
            JSON.stringify(keyModifiers)
          ]);
        }
        if (eventOptionModifiers.length) {
          const modifierPostfix = eventOptionModifiers.map(shared.capitalize).join("");
          key = compilerCore.isStaticExp(key) ? compilerCore.createSimpleExpression(`${key.content}${modifierPostfix}`, true) : compilerCore.createCompoundExpression([`(`, key, `) + "${modifierPostfix}"`]);
        }
        return {
          props: [compilerCore.createObjectProperty(key, handlerExp)]
        };
      });
    };
    var transformShow2 = (dir, node2, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError2(58, loc));
      }
      return {
        props: [],
        needRuntime: context.helper(V_SHOW2)
      };
    };
    var warnTransitionChildren2 = (node2, context) => {
      if (node2.type === 1 && node2.tagType === 1) {
        const component = context.isBuiltInComponent(node2.tag);
        if (component === TRANSITION2) {
          return () => {
            if (node2.children.length && hasMultipleChildren2(node2)) {
              context.onError(createDOMCompilerError2(59, {
                start: node2.children[0].loc.start,
                end: node2.children[node2.children.length - 1].loc.end,
                source: ""
              }));
            }
          };
        }
      }
    };
    function hasMultipleChildren2(node2) {
      const children = node2.children = node2.children.filter((c) => c.type !== 3 && !(c.type === 2 && !c.content.trim()));
      const child = children[0];
      return children.length !== 1 || child.type === 11 || child.type === 9 && child.branches.some(hasMultipleChildren2);
    }
    var expReplaceRE2 = /__VUE_EXP_START__(.*?)__VUE_EXP_END__/g;
    var stringifyStatic2 = (children, context, parent) => {
      if (context.scopes.vSlot > 0) {
        return;
      }
      let nc = 0;
      let ec = 0;
      const currentChunk = [];
      const stringifyCurrentChunk = (currentIndex) => {
        if (nc >= 20 || ec >= 5) {
          const staticCall = compilerCore.createCallExpression(context.helper(compilerCore.CREATE_STATIC), [
            JSON.stringify(currentChunk.map((node2) => stringifyNode2(node2, context)).join("")).replace(expReplaceRE2, `" + $1 + "`),
            String(currentChunk.length)
          ]);
          replaceHoist2(currentChunk[0], staticCall, context);
          if (currentChunk.length > 1) {
            for (let i2 = 1; i2 < currentChunk.length; i2++) {
              replaceHoist2(currentChunk[i2], null, context);
            }
            const deleteCount = currentChunk.length - 1;
            children.splice(currentIndex - currentChunk.length + 1, deleteCount);
            return deleteCount;
          }
        }
        return 0;
      };
      let i = 0;
      for (; i < children.length; i++) {
        const child = children[i];
        const hoisted = getHoistedNode2(child);
        if (hoisted) {
          const node2 = child;
          const result2 = analyzeNode2(node2);
          if (result2) {
            nc += result2[0];
            ec += result2[1];
            currentChunk.push(node2);
            continue;
          }
        }
        i -= stringifyCurrentChunk(i);
        nc = 0;
        ec = 0;
        currentChunk.length = 0;
      }
      stringifyCurrentChunk(i);
    };
    var getHoistedNode2 = (node2) => (node2.type === 1 && node2.tagType === 0 || node2.type == 12) && node2.codegenNode && node2.codegenNode.type === 4 && node2.codegenNode.hoisted;
    var dataAriaRE2 = /^(data|aria)-/;
    var isStringifiableAttr2 = (name, ns) => {
      return (ns === 0 ? shared.isKnownHtmlAttr(name) : ns === 1 ? shared.isKnownSvgAttr(name) : false) || dataAriaRE2.test(name);
    };
    var replaceHoist2 = (node2, replacement, context) => {
      const hoistToReplace = node2.codegenNode.hoisted;
      context.hoists[context.hoists.indexOf(hoistToReplace)] = replacement;
    };
    var isNonStringifiable2 = /* @__PURE__ */ shared.makeMap(`caption,thead,tr,th,tbody,td,tfoot,colgroup,col`);
    function analyzeNode2(node2) {
      if (node2.type === 1 && isNonStringifiable2(node2.tag)) {
        return false;
      }
      if (node2.type === 12) {
        return [1, 0];
      }
      let nc = 1;
      let ec = node2.props.length > 0 ? 1 : 0;
      let bailed = false;
      const bail = () => {
        bailed = true;
        return false;
      };
      function walk3(node3) {
        for (let i = 0; i < node3.props.length; i++) {
          const p = node3.props[i];
          if (p.type === 6 && !isStringifiableAttr2(p.name, node3.ns)) {
            return bail();
          }
          if (p.type === 7 && p.name === "bind") {
            if (p.arg && (p.arg.type === 8 || p.arg.isStatic && !isStringifiableAttr2(p.arg.content, node3.ns))) {
              return bail();
            }
            if (p.exp && (p.exp.type === 8 || p.exp.constType < 3)) {
              return bail();
            }
          }
        }
        for (let i = 0; i < node3.children.length; i++) {
          nc++;
          const child = node3.children[i];
          if (child.type === 1) {
            if (child.props.length > 0) {
              ec++;
            }
            walk3(child);
            if (bailed) {
              return false;
            }
          }
        }
        return true;
      }
      return walk3(node2) ? [nc, ec] : false;
    }
    function stringifyNode2(node2, context) {
      if (shared.isString(node2)) {
        return node2;
      }
      if (shared.isSymbol(node2)) {
        return ``;
      }
      switch (node2.type) {
        case 1:
          return stringifyElement2(node2, context);
        case 2:
          return shared.escapeHtml(node2.content);
        case 3:
          return `<!--${shared.escapeHtml(node2.content)}-->`;
        case 5:
          return shared.escapeHtml(shared.toDisplayString(evaluateConstant2(node2.content)));
        case 8:
          return shared.escapeHtml(evaluateConstant2(node2));
        case 12:
          return stringifyNode2(node2.content, context);
        default:
          return "";
      }
    }
    function stringifyElement2(node2, context) {
      let res = `<${node2.tag}`;
      for (let i = 0; i < node2.props.length; i++) {
        const p = node2.props[i];
        if (p.type === 6) {
          res += ` ${p.name}`;
          if (p.value) {
            res += `="${shared.escapeHtml(p.value.content)}"`;
          }
        } else if (p.type === 7 && p.name === "bind") {
          const exp = p.exp;
          if (exp.content[0] === "_") {
            res += ` ${p.arg.content}="__VUE_EXP_START__${exp.content}__VUE_EXP_END__"`;
            continue;
          }
          let evaluated = evaluateConstant2(exp);
          if (evaluated != null) {
            const arg = p.arg && p.arg.content;
            if (arg === "class") {
              evaluated = shared.normalizeClass(evaluated);
            } else if (arg === "style") {
              evaluated = shared.stringifyStyle(shared.normalizeStyle(evaluated));
            }
            res += ` ${p.arg.content}="${shared.escapeHtml(evaluated)}"`;
          }
        }
      }
      if (context.scopeId) {
        res += ` ${context.scopeId}`;
      }
      res += `>`;
      for (let i = 0; i < node2.children.length; i++) {
        res += stringifyNode2(node2.children[i], context);
      }
      if (!shared.isVoidTag(node2.tag)) {
        res += `</${node2.tag}>`;
      }
      return res;
    }
    function evaluateConstant2(exp) {
      if (exp.type === 4) {
        return new Function(`return ${exp.content}`)();
      } else {
        let res = ``;
        exp.children.forEach((c) => {
          if (shared.isString(c) || shared.isSymbol(c)) {
            return;
          }
          if (c.type === 2) {
            res += c.content;
          } else if (c.type === 5) {
            res += shared.toDisplayString(evaluateConstant2(c.content));
          } else {
            res += evaluateConstant2(c);
          }
        });
        return res;
      }
    }
    var ignoreSideEffectTags2 = (node2, context) => {
      if (node2.type === 1 && node2.tagType === 0 && (node2.tag === "script" || node2.tag === "style")) {
        context.onError(createDOMCompilerError2(60, node2.loc));
        context.removeNode();
      }
    };
    var DOMNodeTransforms2 = [
      transformStyle2,
      ...[warnTransitionChildren2]
    ];
    var DOMDirectiveTransforms2 = {
      cloak: compilerCore.noopDirectiveTransform,
      html: transformVHtml2,
      text: transformVText2,
      model: transformModel2,
      on: transformOn2,
      show: transformShow2
    };
    function compile2(template, options = {}) {
      return compilerCore.baseCompile(template, shared.extend({}, parserOptions2, options, {
        nodeTransforms: [
          ignoreSideEffectTags2,
          ...DOMNodeTransforms2,
          ...options.nodeTransforms || []
        ],
        directiveTransforms: shared.extend({}, DOMDirectiveTransforms2, options.directiveTransforms || {}),
        transformHoist: stringifyStatic2
      }));
    }
    function parse2(template, options = {}) {
      return compilerCore.baseParse(template, shared.extend({}, parserOptions2, options));
    }
    Object.keys(compilerCore).forEach(function(k) {
      if (k !== "default")
        exports2[k] = compilerCore[k];
    });
    exports2.DOMDirectiveTransforms = DOMDirectiveTransforms2;
    exports2.DOMNodeTransforms = DOMNodeTransforms2;
    exports2.TRANSITION = TRANSITION2;
    exports2.TRANSITION_GROUP = TRANSITION_GROUP2;
    exports2.V_MODEL_CHECKBOX = V_MODEL_CHECKBOX2;
    exports2.V_MODEL_DYNAMIC = V_MODEL_DYNAMIC2;
    exports2.V_MODEL_RADIO = V_MODEL_RADIO2;
    exports2.V_MODEL_SELECT = V_MODEL_SELECT2;
    exports2.V_MODEL_TEXT = V_MODEL_TEXT2;
    exports2.V_ON_WITH_KEYS = V_ON_WITH_KEYS2;
    exports2.V_ON_WITH_MODIFIERS = V_ON_WITH_MODIFIERS2;
    exports2.V_SHOW = V_SHOW2;
    exports2.compile = compile2;
    exports2.createDOMCompilerError = createDOMCompilerError2;
    exports2.parse = parse2;
    exports2.parserOptions = parserOptions2;
    exports2.transformStyle = transformStyle2;
  }
});

// ../../node_modules/.pnpm/@vue+compiler-dom@3.2.31/node_modules/@vue/compiler-dom/index.js
var require_compiler_dom = __commonJS({
  "../../node_modules/.pnpm/@vue+compiler-dom@3.2.31/node_modules/@vue/compiler-dom/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_compiler_dom_cjs_prod();
    } else {
      module2.exports = require_compiler_dom_cjs();
    }
  }
});

// ../../packages/vue-code-gen/out/vue2TemplateCompiler.js
var require_vue2TemplateCompiler = __commonJS({
  "../../packages/vue-code-gen/out/vue2TemplateCompiler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.baseCompile = exports2.compile = void 0;
    var CompilerDom = require_compiler_dom();
    var CompilerCore = require_compiler_core();
    function compile2(template, options = {}) {
      const onError = options.onError;
      options.onError = (error2) => {
        if (error2.code === 33)
          return;
        if (onError)
          onError(error2);
        else
          throw error2;
      };
      return baseCompile2(template, Object.assign({}, CompilerDom.parserOptions, options, {
        nodeTransforms: [
          ...CompilerDom.DOMNodeTransforms,
          ...options.nodeTransforms || []
        ],
        directiveTransforms: Object.assign({}, CompilerDom.DOMDirectiveTransforms, options.directiveTransforms || {})
      }));
    }
    exports2.compile = compile2;
    function baseCompile2(template, options = {}) {
      const onError = options.onError || ((error2) => {
        throw error2;
      });
      const isModuleMode = options.mode === "module";
      const prefixIdentifiers = options.prefixIdentifiers === true || isModuleMode;
      if (!prefixIdentifiers && options.cacheHandlers) {
        onError(CompilerCore.createCompilerError(48));
      }
      if (options.scopeId && !isModuleMode) {
        onError(CompilerCore.createCompilerError(49));
      }
      const ast = CompilerCore.baseParse(template, options);
      const [nodeTransforms, directiveTransforms] = CompilerCore.getBaseTransformPreset(prefixIdentifiers);
      const transformIf2 = nodeTransforms[1];
      const transformFor2 = nodeTransforms[3];
      nodeTransforms[1] = transformFor2;
      nodeTransforms[3] = transformIf2;
      CompilerCore.transform(ast, Object.assign({}, options, {
        prefixIdentifiers,
        nodeTransforms: [
          ...nodeTransforms,
          ...options.nodeTransforms || []
        ],
        directiveTransforms: Object.assign({}, directiveTransforms, options.directiveTransforms || {})
      }));
      return CompilerCore.generate(ast, Object.assign({}, options, {
        prefixIdentifiers
      }));
    }
    exports2.baseCompile = baseCompile2;
  }
});

// ../../packages/vue-code-gen/out/types.js
var require_types = __commonJS({
  "../../packages/vue-code-gen/out/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../packages/vue-code-gen/out/index.js
var require_out3 = __commonJS({
  "../../packages/vue-code-gen/out/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.compileSFCTemplate = exports2.generateSFCScriptTypeCheckCode = void 0;
    var script_1 = require_script();
    var scriptRanges_1 = require_scriptRanges();
    var scriptSetupRanges_1 = require_scriptSetupRanges();
    var CompilerDOM2 = require_compiler_dom();
    var CompilerVue2 = require_vue2TemplateCompiler();
    __exportStar(require_types(), exports2);
    __exportStar(require_compiler_dom(), exports2);
    function generateSFCScriptTypeCheckCode(ts, scriptLang, scriptCode, scriptSetupCode, shimComponentOptions, templateAst, cssVars, vueLibName = "vue") {
      const generated = (0, script_1.generate)("script", "", scriptCode !== void 0 ? { content: scriptCode } : void 0, scriptSetupCode !== void 0 ? { content: scriptSetupCode } : void 0, scriptCode !== void 0 ? (0, scriptRanges_1.parseScriptRanges)(ts, ts.createSourceFile("dummy." + scriptLang, scriptCode, ts.ScriptTarget.ESNext), scriptSetupCode !== void 0, false, false) : void 0, scriptSetupCode !== void 0 ? (0, scriptSetupRanges_1.parseScriptSetupRanges)(ts, ts.createSourceFile("dummy." + scriptLang, scriptSetupCode, ts.ScriptTarget.ESNext)) : void 0, () => void 0, () => cssVars !== null && cssVars !== void 0 ? cssVars : [], vueLibName, shimComponentOptions);
      return {
        code: generated.codeGen.getText(),
        scriptMappings: getScriptMappings("script"),
        scriptSetupMappings: getScriptMappings("scriptSetup")
      };
      function getScriptMappings(vueTag) {
        return generated.codeGen.getMappings().filter((mapping) => mapping.data.vueTag === vueTag && mapping.data.capabilities.diagnostic).map((mapping) => ({
          sourceTextRange: mapping.sourceRange,
          generatedTextRange: mapping.mappedRange
        }));
      }
    }
    exports2.generateSFCScriptTypeCheckCode = generateSFCScriptTypeCheckCode;
    function compileSFCTemplate(htmlCode, options = {}, vueVersion = 3) {
      const errors2 = [];
      const warnings = [];
      let ast;
      try {
        ast = (vueVersion === 2 ? CompilerVue2 : CompilerDOM2).compile(htmlCode, Object.assign({ onError: (err) => errors2.push(err), onWarn: (err) => warnings.push(err), expressionPlugins: ["typescript"] }, options)).ast;
      } catch (e) {
        const err = e;
        errors2.push(err);
      }
      return {
        errors: errors2,
        warnings,
        ast
      };
    }
    exports2.compileSFCTemplate = compileSFCTemplate;
  }
});

// ../../packages/vue-code-gen/out/parsers/refSugarRanges.js
var require_refSugarRanges = __commonJS({
  "../../packages/vue-code-gen/out/parsers/refSugarRanges.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseDotValueRanges = exports2.parseDeclarationRanges = exports2.parseRefSugarCallRanges = exports2.parseRefSugarDeclarationRanges = void 0;
    var scriptSetupRanges_1 = require_scriptSetupRanges();
    function parseRefSugarDeclarationRanges(ts, ast, collectKeys) {
      const calls = [];
      ast.forEachChild((node2) => {
        visitNode(node2);
      });
      return calls;
      function _getStartEnd(node2) {
        return (0, scriptSetupRanges_1.getStartEnd)(node2, ast);
      }
      function visitNode(node2) {
        if (ts.isVariableDeclarationList(node2) && node2.declarations.length === 1) {
          const declaration2 = node2.declarations[0];
          const left = declaration2.name;
          const right = declaration2.initializer;
          if (right && ts.isCallExpression(right) && ts.isIdentifier(right.expression)) {
            const callText = right.expression.getText(ast);
            if (collectKeys.some((key) => key === callText)) {
              const flagStart = _getStartEnd(node2).start;
              const flag = {
                start: flagStart,
                end: flagStart + (node2.flags === ts.NodeFlags.Const ? "count".length : "let".length)
              };
              const bindings = (0, scriptSetupRanges_1.findBindingVars)(ts, left, ast);
              const fnRange = _getStartEnd(right.expression);
              calls.push({
                flag,
                leftBindings: bindings,
                rightFn: fnRange
              });
            }
          }
        }
        node2.forEachChild((child) => visitNode(child));
      }
    }
    exports2.parseRefSugarDeclarationRanges = parseRefSugarDeclarationRanges;
    function parseRefSugarCallRanges(ts, ast, collectKeys) {
      const calls = [];
      ast.forEachChild((node2) => {
        visitNode(node2);
      });
      return calls;
      function _getStartEnd(node2) {
        return (0, scriptSetupRanges_1.getStartEnd)(node2, ast);
      }
      function visitNode(node2) {
        if (ts.isCallExpression(node2) && ts.isIdentifier(node2.expression) && node2.arguments.length) {
          const callText = node2.expression.getText(ast);
          if (collectKeys.some((key) => key === callText)) {
            const firstArg = node2.arguments[0];
            const lastArg = node2.arguments[node2.arguments.length - 1];
            calls.push({
              fullRange: _getStartEnd(node2),
              argsRange: {
                start: firstArg.getStart(ast),
                end: lastArg.getEnd()
              }
            });
          }
        }
        node2.forEachChild((child) => visitNode(child));
      }
    }
    exports2.parseRefSugarCallRanges = parseRefSugarCallRanges;
    function parseDeclarationRanges(ts, ast) {
      const declarations = [];
      ast.forEachChild((node2) => {
        visitNode(node2);
      });
      return declarations;
      function _getStartEnd(node2) {
        return (0, scriptSetupRanges_1.getStartEnd)(node2, ast);
      }
      function visitNode(node2) {
        if (ts.isVariableDeclarationList(node2) && node2.declarations.length === 1) {
          const declaration2 = node2.declarations[0];
          const left = declaration2.name;
          const right = declaration2.initializer;
          if (right) {
            const flagStart = _getStartEnd(node2).start;
            const flag = {
              start: flagStart,
              end: flagStart + (node2.flags === ts.NodeFlags.Const ? "count".length : "let".length)
            };
            const bindings = (0, scriptSetupRanges_1.findBindingVars)(ts, left, ast);
            let rightFn;
            if (ts.isCallExpression(right) && ts.isIdentifier(right.expression)) {
              rightFn = _getStartEnd(right.expression);
            }
            declarations.push({
              flag,
              leftIsIdentifier: ts.isIdentifier(left),
              leftBindings: bindings,
              right: _getStartEnd(right),
              rightFn
            });
          }
        }
        node2.forEachChild((child) => visitNode(child));
      }
    }
    exports2.parseDeclarationRanges = parseDeclarationRanges;
    function parseDotValueRanges(ts, ast) {
      const dotValues = [];
      ast.forEachChild((node2) => {
        visitNode(node2);
      });
      return dotValues;
      function _getStartEnd(node2) {
        return (0, scriptSetupRanges_1.getStartEnd)(node2, ast);
      }
      function visitNode(node2) {
        if (ts.isPropertyAccessExpression(node2) && ts.isIdentifier(node2.name)) {
          const text = node2.name.getText(ast);
          if (text === "value") {
            dotValues.push({
              range: _getStartEnd(node2.name),
              beforeDot: node2.expression.getEnd()
            });
          }
        }
        node2.forEachChild((child) => visitNode(child));
      }
    }
    exports2.parseDotValueRanges = parseDotValueRanges;
  }
});

// ../../node_modules/.pnpm/@vue+compiler-sfc@3.2.31/node_modules/@vue/compiler-sfc/dist/compiler-sfc.esm-browser.js
var compiler_sfc_esm_browser_exports = {};
__export(compiler_sfc_esm_browser_exports, {
  MagicString: () => MagicString,
  babelParse: () => parse_1,
  compileScript: () => compileScript,
  compileStyle: () => compileStyle,
  compileStyleAsync: () => compileStyleAsync,
  compileTemplate: () => compileTemplate,
  extractIdentifiers: () => extractIdentifiers,
  generateCodeFrame: () => generateCodeFrame,
  isInDestructureAssignment: () => isInDestructureAssignment,
  isStaticProperty: () => isStaticProperty,
  parse: () => parse$4,
  rewriteDefault: () => rewriteDefault,
  shouldTransformRef: () => shouldTransform,
  transformRef: () => transform$1,
  transformRefAST: () => transformAST,
  walk: () => walk$2,
  walkIdentifiers: () => walkIdentifiers
});
function makeMap(str, expectsLowerCase) {
  const map2 = /* @__PURE__ */ Object.create(null);
  const list2 = str.split(",");
  for (let i = 0; i < list2.length; i++) {
    map2[list2[i]] = true;
  }
  return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
}
function generateCodeFrame(source, start = 0, end = source.length) {
  let lines = source.split(/(\r?\n)/);
  const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);
  lines = lines.filter((_, idx) => idx % 2 === 0);
  let count = 0;
  const res = [];
  for (let i = 0; i < lines.length; i++) {
    count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
    if (count >= start) {
      for (let j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length)
          continue;
        const line = j + 1;
        res.push(`${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
        const lineLength = lines[j].length;
        const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
        if (j === i) {
          const pad2 = start - (count - (lineLength + newLineSeqLength));
          const length2 = Math.max(1, end > count ? lineLength - pad2 : end - start);
          res.push(`   |  ` + " ".repeat(pad2) + "^".repeat(length2));
        } else if (j > i) {
          if (end > count) {
            const length2 = Math.max(Math.min(end - count, lineLength), 1);
            res.push(`   |  ` + "^".repeat(length2));
          }
          count += lineLength + newLineSeqLength;
        }
      }
      break;
    }
  }
  return res.join("\n");
}
function isSSRSafeAttrName(name) {
  if (attrValidationCache.hasOwnProperty(name)) {
    return attrValidationCache[name];
  }
  const isUnsafe = unsafeAttrCharRE.test(name);
  if (isUnsafe) {
    console.error(`unsafe attribute name: ${name}`);
  }
  return attrValidationCache[name] = !isUnsafe;
}
function normalizeStyle(value) {
  if (isArray(value)) {
    const res = {};
    for (let i = 0; i < value.length; i++) {
      const item = value[i];
      const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString(value)) {
    return value;
  } else if (isObject(value)) {
    return value;
  }
}
function parseStringStyle(cssText) {
  const ret = {};
  cssText.split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function stringifyStyle(styles) {
  let ret = "";
  if (!styles || isString(styles)) {
    return ret;
  }
  for (const key in styles) {
    const value = styles[key];
    const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
    if (isString(value) || typeof value === "number" && isNoUnitNumericStyleProp(normalizedKey)) {
      ret += `${normalizedKey}:${value};`;
    }
  }
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString(value)) {
    res = value;
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      const normalized = normalizeClass(value[i]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function escapeHtml(string2) {
  const str = "" + string2;
  const match = escapeRE.exec(str);
  if (!match) {
    return str;
  }
  let html = "";
  let escaped;
  let index;
  let lastIndex = 0;
  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        escaped = "&quot;";
        break;
      case 38:
        escaped = "&amp;";
        break;
      case 39:
        escaped = "&#39;";
        break;
      case 60:
        escaped = "&lt;";
        break;
      case 62:
        escaped = "&gt;";
        break;
      default:
        continue;
    }
    if (lastIndex !== index) {
      html += str.slice(lastIndex, index);
    }
    lastIndex = index + 1;
    html += escaped;
  }
  return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
}
function defaultOnError(error2) {
  throw error2;
}
function defaultOnWarn(msg) {
  console.warn(`[Vue warn] ${msg.message}`);
}
function createCompilerError(code, loc, messages, additionalMessage) {
  const msg = (messages || errorMessages)[code] + (additionalMessage || ``);
  const error2 = new SyntaxError(String(msg));
  error2.code = code;
  error2.loc = loc;
  return error2;
}
function registerRuntimeHelpers(helpers) {
  Object.getOwnPropertySymbols(helpers).forEach((s) => {
    helperNameMap[s] = helpers[s];
  });
}
function createRoot(children, loc = locStub) {
  return {
    type: 0,
    children,
    helpers: [],
    components: [],
    directives: [],
    hoists: [],
    imports: [],
    cached: 0,
    temps: 0,
    codegenNode: void 0,
    loc
  };
}
function createVNodeCall(context, tag2, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent2 = false, loc = locStub) {
  if (context) {
    if (isBlock) {
      context.helper(OPEN_BLOCK);
      context.helper(getVNodeBlockHelper(context.inSSR, isComponent2));
    } else {
      context.helper(getVNodeHelper(context.inSSR, isComponent2));
    }
    if (directives) {
      context.helper(WITH_DIRECTIVES);
    }
  }
  return {
    type: 13,
    tag: tag2,
    props,
    children,
    patchFlag,
    dynamicProps,
    directives,
    isBlock,
    disableTracking,
    isComponent: isComponent2,
    loc
  };
}
function createArrayExpression(elements, loc = locStub) {
  return {
    type: 17,
    loc,
    elements
  };
}
function createObjectExpression(properties, loc = locStub) {
  return {
    type: 15,
    loc,
    properties
  };
}
function createObjectProperty(key, value) {
  return {
    type: 16,
    loc: locStub,
    key: isString(key) ? createSimpleExpression(key, true) : key,
    value
  };
}
function createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0) {
  return {
    type: 4,
    loc,
    content,
    isStatic,
    constType: isStatic ? 3 : constType
  };
}
function createInterpolation(content, loc) {
  return {
    type: 5,
    loc,
    content: isString(content) ? createSimpleExpression(content, false, loc) : content
  };
}
function createCompoundExpression(children, loc = locStub) {
  return {
    type: 8,
    loc,
    children
  };
}
function createCallExpression(callee, args = [], loc = locStub) {
  return {
    type: 14,
    loc,
    callee,
    arguments: args
  };
}
function createFunctionExpression(params, returns = void 0, newline = false, isSlot = false, loc = locStub) {
  return {
    type: 18,
    params,
    returns,
    newline,
    isSlot,
    loc
  };
}
function createConditionalExpression(test, consequent, alternate, newline = true) {
  return {
    type: 19,
    test,
    consequent,
    alternate,
    newline,
    loc: locStub
  };
}
function createCacheExpression(index, value, isVNode = false) {
  return {
    type: 20,
    index,
    value,
    isVNode,
    loc: locStub
  };
}
function createBlockStatement(body) {
  return {
    type: 21,
    body,
    loc: locStub
  };
}
function createTemplateLiteral(elements) {
  return {
    type: 22,
    elements,
    loc: locStub
  };
}
function createIfStatement(test, consequent, alternate) {
  return {
    type: 23,
    test,
    consequent,
    alternate,
    loc: locStub
  };
}
function createAssignmentExpression(left, right) {
  return {
    type: 24,
    left,
    right,
    loc: locStub
  };
}
function createSequenceExpression(expressions) {
  return {
    type: 25,
    expressions,
    loc: locStub
  };
}
function createReturnStatement(returns) {
  return {
    type: 26,
    returns,
    loc: locStub
  };
}
function isNewLine(code) {
  switch (code) {
    case 10:
    case 13:
    case 8232:
    case 8233:
      return true;
    default:
      return false;
  }
}
function isWhitespace(code) {
  switch (code) {
    case 9:
    case 11:
    case 12:
    case 32:
    case 160:
    case 5760:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
}
function getLineInfo(input2, offset) {
  let line = 1;
  let lineStart = 0;
  let match;
  lineBreakG.lastIndex = 0;
  while ((match = lineBreakG.exec(input2)) && match.index < offset) {
    line++;
    lineStart = lineBreakG.lastIndex;
  }
  return new Position(line, offset - lineStart);
}
function setTrailingComments(node2, comments) {
  if (node2.trailingComments === void 0) {
    node2.trailingComments = comments;
  } else {
    node2.trailingComments.unshift(...comments);
  }
}
function setLeadingComments(node2, comments) {
  if (node2.leadingComments === void 0) {
    node2.leadingComments = comments;
  } else {
    node2.leadingComments.unshift(...comments);
  }
}
function setInnerComments(node2, comments) {
  if (node2.innerComments === void 0) {
    node2.innerComments = comments;
  } else {
    node2.innerComments.unshift(...comments);
  }
}
function adjustInnerComments(node2, elements, commentWS) {
  let lastElement = null;
  let i = elements.length;
  while (lastElement === null && i > 0) {
    lastElement = elements[--i];
  }
  if (lastElement === null || lastElement.start > commentWS.start) {
    setInnerComments(node2, commentWS.comments);
  } else {
    setTrailingComments(lastElement, commentWS.comments);
  }
}
function keepReasonCodeCompat(reasonCode, syntaxPlugin) {
  {
    if (syntaxPlugin === "flow" && reasonCode === "PatternIsOptional") {
      return "OptionalBindingPattern";
    }
  }
  return reasonCode;
}
function makeErrorTemplates(messages, code, syntaxPlugin) {
  const templates = {};
  Object.keys(messages).forEach((reasonCode) => {
    templates[reasonCode] = Object.freeze({
      code,
      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),
      template: messages[reasonCode]
    });
  });
  return Object.freeze(templates);
}
function createKeyword(name, options = {}) {
  options.keyword = name;
  const token = createToken(name, options);
  keywords$1.set(name, token);
  return token;
}
function createBinop(name, binop) {
  return createToken(name, {
    beforeExpr,
    binop
  });
}
function createToken(name, options = {}) {
  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
  ++tokenTypeCounter;
  tokenLabels.push(name);
  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);
  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);
  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);
  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);
  tokenTypes.push(new ExportedTokenType(name, options));
  return tokenTypeCounter;
}
function createKeywordLike(name, options = {}) {
  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
  ++tokenTypeCounter;
  keywords$1.set(name, tokenTypeCounter);
  tokenLabels.push(name);
  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);
  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);
  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);
  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);
  tokenTypes.push(new ExportedTokenType("name", options));
  return tokenTypeCounter;
}
function tokenIsIdentifier(token) {
  return token >= 87 && token <= 122;
}
function tokenKeywordOrIdentifierIsKeyword(token) {
  return token <= 86;
}
function tokenIsKeywordOrIdentifier(token) {
  return token >= 52 && token <= 122;
}
function tokenIsLiteralPropertyName(token) {
  return token >= 52 && token <= 126;
}
function tokenComesBeforeExpression(token) {
  return tokenBeforeExprs[token];
}
function tokenCanStartExpression(token) {
  return tokenStartsExprs[token];
}
function tokenIsAssignment(token) {
  return token >= 27 && token <= 31;
}
function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
  return token >= 119 && token <= 121;
}
function tokenIsLoop(token) {
  return token >= 84 && token <= 86;
}
function tokenIsKeyword(token) {
  return token >= 52 && token <= 86;
}
function tokenIsOperator(token) {
  return token >= 35 && token <= 53;
}
function tokenIsPostfix(token) {
  return token === 32;
}
function tokenIsPrefix(token) {
  return tokenPrefixes[token];
}
function tokenIsTSTypeOperator(token) {
  return token >= 111 && token <= 113;
}
function tokenIsTSDeclarationStart(token) {
  return token >= 114 && token <= 120;
}
function tokenLabelName(token) {
  return tokenLabels[token];
}
function tokenOperatorPrecedence(token) {
  return tokenBinops[token];
}
function tokenIsRightAssociative(token) {
  return token === 51;
}
function getExportedToken(token) {
  return tokenTypes[token];
}
function isTokenType(obj) {
  return typeof obj === "number";
}
function isInAstralSet(code, set) {
  let pos = 65536;
  for (let i = 0, length2 = set.length; i < length2; i += 2) {
    pos += set[i];
    if (pos > code)
      return false;
    pos += set[i + 1];
    if (pos >= code)
      return true;
  }
  return false;
}
function isIdentifierStart(code) {
  if (code < 65)
    return code === 36;
  if (code <= 90)
    return true;
  if (code < 97)
    return code === 95;
  if (code <= 122)
    return true;
  if (code <= 65535) {
    return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
  }
  return isInAstralSet(code, astralIdentifierStartCodes);
}
function isIdentifierChar(code) {
  if (code < 48)
    return code === 36;
  if (code < 58)
    return true;
  if (code < 65)
    return false;
  if (code <= 90)
    return true;
  if (code < 97)
    return code === 95;
  if (code <= 122)
    return true;
  if (code <= 65535) {
    return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
  }
  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
}
function isReservedWord(word, inModule) {
  return inModule && word === "await" || word === "enum";
}
function isStrictReservedWord(word, inModule) {
  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
}
function isStrictBindOnlyReservedWord(word) {
  return reservedWordsStrictBindSet.has(word);
}
function isStrictBindReservedWord(word, inModule) {
  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
}
function isKeyword(word) {
  return keywords.has(word);
}
function isIteratorStart(current, next) {
  return current === 64 && next === 64;
}
function canBeReservedWord(word) {
  return reservedWordLikeSet.has(word);
}
function newParameterDeclarationScope() {
  return new ExpressionScope(kParameterDeclaration);
}
function newArrowHeadScope() {
  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);
}
function newAsyncArrowScope() {
  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);
}
function newExpressionScope() {
  return new ExpressionScope();
}
function functionFlags(isAsync, isGenerator) {
  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);
}
function clonePlaceholder(node2) {
  return cloneIdentifier(node2);
}
function cloneIdentifier(node2) {
  const {
    type,
    start,
    end,
    loc,
    range: range2,
    extra,
    name
  } = node2;
  const cloned = Object.create(NodePrototype);
  cloned.type = type;
  cloned.start = start;
  cloned.end = end;
  cloned.loc = loc;
  cloned.range = range2;
  cloned.extra = extra;
  cloned.name = name;
  if (type === "Placeholder") {
    cloned.expectedNode = node2.expectedNode;
  }
  return cloned;
}
function cloneStringLiteral(node2) {
  const {
    type,
    start,
    end,
    loc,
    range: range2,
    extra
  } = node2;
  if (type === "Placeholder") {
    return clonePlaceholder(node2);
  }
  const cloned = Object.create(NodePrototype);
  cloned.type = "StringLiteral";
  cloned.start = start;
  cloned.end = end;
  cloned.loc = loc;
  cloned.range = range2;
  cloned.extra = extra;
  cloned.value = node2.value;
  return cloned;
}
function isEsModuleType(bodyElement) {
  return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
}
function hasTypeImportKind(node2) {
  return node2.importKind === "type" || node2.importKind === "typeof";
}
function isMaybeDefaultImport(type) {
  return tokenIsKeywordOrIdentifier(type) && type !== 91;
}
function partition(list2, test) {
  const list1 = [];
  const list22 = [];
  for (let i = 0; i < list2.length; i++) {
    (test(list2[i], i, list2) ? list1 : list22).push(list2[i]);
  }
  return [list1, list22];
}
function isFragment(object2) {
  return object2 ? object2.type === "JSXOpeningFragment" || object2.type === "JSXClosingFragment" : false;
}
function getQualifiedJSXName(object2) {
  if (object2.type === "JSXIdentifier") {
    return object2.name;
  }
  if (object2.type === "JSXNamespacedName") {
    return object2.namespace.name + ":" + object2.name.name;
  }
  if (object2.type === "JSXMemberExpression") {
    return getQualifiedJSXName(object2.object) + "." + getQualifiedJSXName(object2.property);
  }
  throw new Error("Node had unexpected type: " + object2.type);
}
function nonNull(x) {
  if (x == null) {
    throw new Error(`Unexpected ${x} value.`);
  }
  return x;
}
function assert(x) {
  if (!x) {
    throw new Error("Assert fail");
  }
}
function keywordTypeFromName(value) {
  switch (value) {
    case "any":
      return "TSAnyKeyword";
    case "boolean":
      return "TSBooleanKeyword";
    case "bigint":
      return "TSBigIntKeyword";
    case "never":
      return "TSNeverKeyword";
    case "number":
      return "TSNumberKeyword";
    case "object":
      return "TSObjectKeyword";
    case "string":
      return "TSStringKeyword";
    case "symbol":
      return "TSSymbolKeyword";
    case "undefined":
      return "TSUndefinedKeyword";
    case "unknown":
      return "TSUnknownKeyword";
    default:
      return void 0;
  }
}
function tsIsAccessModifier(modifier) {
  return modifier === "private" || modifier === "public" || modifier === "protected";
}
function hasPlugin(plugins, name) {
  return plugins.some((plugin2) => {
    if (Array.isArray(plugin2)) {
      return plugin2[0] === name;
    } else {
      return plugin2 === name;
    }
  });
}
function getPluginOption(plugins, name, option) {
  const plugin2 = plugins.find((plugin3) => {
    if (Array.isArray(plugin3)) {
      return plugin3[0] === name;
    } else {
      return plugin3 === name;
    }
  });
  if (plugin2 && Array.isArray(plugin2)) {
    return plugin2[1][option];
  }
  return null;
}
function validatePlugins(plugins) {
  if (hasPlugin(plugins, "decorators")) {
    if (hasPlugin(plugins, "decorators-legacy")) {
      throw new Error("Cannot use the decorators and decorators-legacy plugin together");
    }
    const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");
    if (decoratorsBeforeExport == null) {
      throw new Error("The 'decorators' plugin requires a 'decoratorsBeforeExport' option, whose value must be a boolean. If you are migrating from Babylon/Babel 6 or want to use the old decorators proposal, you should use the 'decorators-legacy' plugin instead of 'decorators'.");
    } else if (typeof decoratorsBeforeExport !== "boolean") {
      throw new Error("'decoratorsBeforeExport' must be a boolean.");
    }
  }
  if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript")) {
    throw new Error("Cannot combine flow and typescript plugins.");
  }
  if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic")) {
    throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
  }
  if (hasPlugin(plugins, "pipelineOperator")) {
    const proposal = getPluginOption(plugins, "pipelineOperator", "proposal");
    if (!PIPELINE_PROPOSALS.includes(proposal)) {
      const proposalList = PIPELINE_PROPOSALS.map((p) => `"${p}"`).join(", ");
      throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
    }
    const tupleSyntaxIsHash = hasPlugin(plugins, "recordAndTuple") && getPluginOption(plugins, "recordAndTuple", "syntaxType") === "hash";
    if (proposal === "hack") {
      if (hasPlugin(plugins, "placeholders")) {
        throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
      }
      if (hasPlugin(plugins, "v8intrinsic")) {
        throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
      }
      const topicToken = getPluginOption(plugins, "pipelineOperator", "topicToken");
      if (!TOPIC_TOKENS.includes(topicToken)) {
        const tokenList = TOPIC_TOKENS.map((t) => `"${t}"`).join(", ");
        throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
      }
      if (topicToken === "#" && tupleSyntaxIsHash) {
        throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
      }
    } else if (proposal === "smart" && tupleSyntaxIsHash) {
      throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
    }
  }
  if (hasPlugin(plugins, "moduleAttributes")) {
    {
      if (hasPlugin(plugins, "importAssertions")) {
        throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");
      }
      const moduleAttributesVerionPluginOption = getPluginOption(plugins, "moduleAttributes", "version");
      if (moduleAttributesVerionPluginOption !== "may-2020") {
        throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
      }
    }
  }
  if (hasPlugin(plugins, "recordAndTuple") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, "recordAndTuple", "syntaxType"))) {
    throw new Error("'recordAndTuple' requires 'syntaxType' option whose value should be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p) => `'${p}'`).join(", "));
  }
  if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
    const error2 = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
    error2.missingPlugins = "doExpressions";
    throw error2;
  }
}
function getOptions(opts) {
  const options = {};
  for (const key of Object.keys(defaultOptions)) {
    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];
  }
  return options;
}
function babel7CompatTokens(tokens) {
  for (let i = 0; i < tokens.length; i++) {
    const token = tokens[i];
    const {
      type
    } = token;
    if (type === 128) {
      {
        const {
          loc,
          start,
          value,
          end
        } = token;
        const hashEndPos = start + 1;
        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);
        tokens.splice(i, 1, new Token({
          type: getExportedToken(25),
          value: "#",
          start,
          end: hashEndPos,
          startLoc: loc.start,
          endLoc: hashEndLoc
        }), new Token({
          type: getExportedToken(122),
          value,
          start: hashEndPos,
          end,
          startLoc: hashEndLoc,
          endLoc: loc.end
        }));
        i++;
        continue;
      }
    }
    if (typeof type === "number") {
      token.type = getExportedToken(type);
    }
  }
  return tokens;
}
function pluginsMap(plugins) {
  const pluginMap = /* @__PURE__ */ new Map();
  for (const plugin2 of plugins) {
    const [name, options] = Array.isArray(plugin2) ? plugin2 : [plugin2, {}];
    if (!pluginMap.has(name))
      pluginMap.set(name, options || {});
  }
  return pluginMap;
}
function parse(input2, options) {
  var _options;
  if (((_options = options) == null ? void 0 : _options.sourceType) === "unambiguous") {
    options = Object.assign({}, options);
    try {
      options.sourceType = "module";
      const parser2 = getParser(options, input2);
      const ast = parser2.parse();
      if (parser2.sawUnambiguousESM) {
        return ast;
      }
      if (parser2.ambiguousScriptDifferentAst) {
        try {
          options.sourceType = "script";
          return getParser(options, input2).parse();
        } catch (_unused) {
        }
      } else {
        ast.program.sourceType = "script";
      }
      return ast;
    } catch (moduleError) {
      try {
        options.sourceType = "script";
        return getParser(options, input2).parse();
      } catch (_unused2) {
      }
      throw moduleError;
    }
  } else {
    return getParser(options, input2).parse();
  }
}
function parseExpression(input2, options) {
  const parser2 = getParser(options, input2);
  if (parser2.options.strictMode) {
    parser2.state.strict = true;
  }
  return parser2.getExpression();
}
function generateExportedTokenTypes(internalTokenTypes) {
  const tokenTypes2 = {};
  for (const typeName of Object.keys(internalTokenTypes)) {
    tokenTypes2[typeName] = getExportedToken(internalTokenTypes[typeName]);
  }
  return tokenTypes2;
}
function getParser(options, input2) {
  let cls = Parser;
  if (options != null && options.plugins) {
    validatePlugins(options.plugins);
    cls = getParserClass(options.plugins);
  }
  return new cls(options, input2);
}
function getParserClass(pluginsFromOptions) {
  const pluginList = mixinPluginNames.filter((name) => hasPlugin(pluginsFromOptions, name));
  const key = pluginList.join("/");
  let cls = parserClassCache[key];
  if (!cls) {
    cls = Parser;
    for (const plugin2 of pluginList) {
      cls = mixinPlugins[plugin2](cls);
    }
    parserClassCache[key] = cls;
  }
  return cls;
}
function isCoreComponent(tag2) {
  if (isBuiltInType(tag2, "Teleport")) {
    return TELEPORT;
  } else if (isBuiltInType(tag2, "Suspense")) {
    return SUSPENSE;
  } else if (isBuiltInType(tag2, "KeepAlive")) {
    return KEEP_ALIVE;
  } else if (isBuiltInType(tag2, "BaseTransition")) {
    return BASE_TRANSITION;
  }
}
function getInnerRange(loc, offset, length2) {
  const source = loc.source.slice(offset, offset + length2);
  const newLoc = {
    source,
    start: advancePositionWithClone(loc.start, loc.source, offset),
    end: loc.end
  };
  if (length2 != null) {
    newLoc.end = advancePositionWithClone(loc.start, loc.source, offset + length2);
  }
  return newLoc;
}
function advancePositionWithClone(pos, source, numberOfCharacters = source.length) {
  return advancePositionWithMutation(extend({}, pos), source, numberOfCharacters);
}
function advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {
  let linesCount = 0;
  let lastNewLinePos = -1;
  for (let i = 0; i < numberOfCharacters; i++) {
    if (source.charCodeAt(i) === 10) {
      linesCount++;
      lastNewLinePos = i;
    }
  }
  pos.offset += numberOfCharacters;
  pos.line += linesCount;
  pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;
  return pos;
}
function assert$1(condition, msg) {
  if (!condition) {
    throw new Error(msg || `unexpected compiler condition`);
  }
}
function findDir(node2, name, allowEmpty = false) {
  for (let i = 0; i < node2.props.length; i++) {
    const p = node2.props[i];
    if (p.type === 7 && (allowEmpty || p.exp) && (isString(name) ? p.name === name : name.test(p.name))) {
      return p;
    }
  }
}
function findProp(node2, name, dynamicOnly = false, allowEmpty = false) {
  for (let i = 0; i < node2.props.length; i++) {
    const p = node2.props[i];
    if (p.type === 6) {
      if (dynamicOnly)
        continue;
      if (p.name === name && (p.value || allowEmpty)) {
        return p;
      }
    } else if (p.name === "bind" && (p.exp || allowEmpty) && isStaticArgOf(p.arg, name)) {
      return p;
    }
  }
}
function isStaticArgOf(arg, name) {
  return !!(arg && isStaticExp(arg) && arg.content === name);
}
function hasDynamicKeyVBind(node2) {
  return node2.props.some((p) => p.type === 7 && p.name === "bind" && (!p.arg || p.arg.type !== 4 || !p.arg.isStatic));
}
function isText(node2) {
  return node2.type === 5 || node2.type === 2;
}
function isVSlot(p) {
  return p.type === 7 && p.name === "slot";
}
function isTemplateNode(node2) {
  return node2.type === 1 && node2.tagType === 3;
}
function isSlotOutlet(node2) {
  return node2.type === 1 && node2.tagType === 2;
}
function getVNodeHelper(ssr, isComponent2) {
  return ssr || isComponent2 ? CREATE_VNODE : CREATE_ELEMENT_VNODE;
}
function getVNodeBlockHelper(ssr, isComponent2) {
  return ssr || isComponent2 ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;
}
function getUnnormalizedProps(props, callPath = []) {
  if (props && !isString(props) && props.type === 14) {
    const callee = props.callee;
    if (!isString(callee) && propsHelperSet.has(callee)) {
      return getUnnormalizedProps(props.arguments[0], callPath.concat(props));
    }
  }
  return [props, callPath];
}
function injectProp(node2, prop, context) {
  let propsWithInjection;
  let props = node2.type === 13 ? node2.props : node2.arguments[2];
  let callPath = [];
  let parentCall;
  if (props && !isString(props) && props.type === 14) {
    const ret = getUnnormalizedProps(props);
    props = ret[0];
    callPath = ret[1];
    parentCall = callPath[callPath.length - 1];
  }
  if (props == null || isString(props)) {
    propsWithInjection = createObjectExpression([prop]);
  } else if (props.type === 14) {
    const first = props.arguments[0];
    if (!isString(first) && first.type === 15) {
      first.properties.unshift(prop);
    } else {
      if (props.callee === TO_HANDLERS) {
        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
          createObjectExpression([prop]),
          props
        ]);
      } else {
        props.arguments.unshift(createObjectExpression([prop]));
      }
    }
    !propsWithInjection && (propsWithInjection = props);
  } else if (props.type === 15) {
    let alreadyExists = false;
    if (prop.key.type === 4) {
      const propKeyName = prop.key.content;
      alreadyExists = props.properties.some((p) => p.key.type === 4 && p.key.content === propKeyName);
    }
    if (!alreadyExists) {
      props.properties.unshift(prop);
    }
    propsWithInjection = props;
  } else {
    propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
      createObjectExpression([prop]),
      props
    ]);
    if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {
      parentCall = callPath[callPath.length - 2];
    }
  }
  if (node2.type === 13) {
    if (parentCall) {
      parentCall.arguments[0] = propsWithInjection;
    } else {
      node2.props = propsWithInjection;
    }
  } else {
    if (parentCall) {
      parentCall.arguments[0] = propsWithInjection;
    } else {
      node2.arguments[2] = propsWithInjection;
    }
  }
}
function toValidAssetId(name, type) {
  return `_${type}_${name.replace(/[^\w]/g, (searchValue, replaceValue) => {
    return searchValue === "-" ? "_" : name.charCodeAt(replaceValue).toString();
  })}`;
}
function hasScopeRef(node2, ids) {
  if (!node2 || Object.keys(ids).length === 0) {
    return false;
  }
  switch (node2.type) {
    case 1:
      for (let i = 0; i < node2.props.length; i++) {
        const p = node2.props[i];
        if (p.type === 7 && (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) {
          return true;
        }
      }
      return node2.children.some((c) => hasScopeRef(c, ids));
    case 11:
      if (hasScopeRef(node2.source, ids)) {
        return true;
      }
      return node2.children.some((c) => hasScopeRef(c, ids));
    case 9:
      return node2.branches.some((b) => hasScopeRef(b, ids));
    case 10:
      if (hasScopeRef(node2.condition, ids)) {
        return true;
      }
      return node2.children.some((c) => hasScopeRef(c, ids));
    case 4:
      return !node2.isStatic && isSimpleIdentifier(node2.content) && !!ids[node2.content];
    case 8:
      return node2.children.some((c) => isObject(c) && hasScopeRef(c, ids));
    case 5:
    case 12:
      return hasScopeRef(node2.content, ids);
    case 2:
    case 3:
      return false;
    default:
      return false;
  }
}
function getMemoedVNodeCall(node2) {
  if (node2.type === 14 && node2.callee === WITH_MEMO) {
    return node2.arguments[1].returns;
  } else {
    return node2;
  }
}
function makeBlock(node2, { helper, removeHelper, inSSR }) {
  if (!node2.isBlock) {
    node2.isBlock = true;
    removeHelper(getVNodeHelper(inSSR, node2.isComponent));
    helper(OPEN_BLOCK);
    helper(getVNodeBlockHelper(inSSR, node2.isComponent));
  }
}
function getCompatValue(key, context) {
  const config2 = context.options ? context.options.compatConfig : context.compatConfig;
  const value = config2 && config2[key];
  if (key === "MODE") {
    return value || 3;
  } else {
    return value;
  }
}
function isCompatEnabled(key, context) {
  const mode = getCompatValue("MODE", context);
  const value = getCompatValue(key, context);
  return mode === 3 ? value === true : value !== false;
}
function checkCompatEnabled(key, context, loc, ...args) {
  const enabled = isCompatEnabled(key, context);
  if (enabled) {
    warnDeprecation(key, context, loc, ...args);
  }
  return enabled;
}
function warnDeprecation(key, context, loc, ...args) {
  const val = getCompatValue(key, context);
  if (val === "suppress-warning") {
    return;
  }
  const { message, link } = deprecationData[key];
  const msg = `(deprecation ${key}) ${typeof message === "function" ? message(...args) : message}${link ? `
  Details: ${link}` : ``}`;
  const err = new SyntaxError(msg);
  err.code = key;
  if (loc)
    err.loc = loc;
  context.onWarn(err);
}
function baseParse(content, options = {}) {
  const context = createParserContext(content, options);
  const start = getCursor(context);
  return createRoot(parseChildren(context, 0, []), getSelection(context, start));
}
function createParserContext(content, rawOptions) {
  const options = extend({}, defaultParserOptions);
  let key;
  for (key in rawOptions) {
    options[key] = rawOptions[key] === void 0 ? defaultParserOptions[key] : rawOptions[key];
  }
  return {
    options,
    column: 1,
    line: 1,
    offset: 0,
    originalSource: content,
    source: content,
    inPre: false,
    inVPre: false,
    onWarn: options.onWarn
  };
}
function parseChildren(context, mode, ancestors) {
  const parent = last(ancestors);
  const ns = parent ? parent.ns : 0;
  const nodes = [];
  while (!isEnd(context, mode, ancestors)) {
    const s = context.source;
    let node2 = void 0;
    if (mode === 0 || mode === 1) {
      if (!context.inVPre && startsWith(s, context.options.delimiters[0])) {
        node2 = parseInterpolation(context, mode);
      } else if (mode === 0 && s[0] === "<") {
        if (s.length === 1) {
          emitError(context, 5, 1);
        } else if (s[1] === "!") {
          if (startsWith(s, "<!--")) {
            node2 = parseComment(context);
          } else if (startsWith(s, "<!DOCTYPE")) {
            node2 = parseBogusComment(context);
          } else if (startsWith(s, "<![CDATA[")) {
            if (ns !== 0) {
              node2 = parseCDATA(context, ancestors);
            } else {
              emitError(context, 1);
              node2 = parseBogusComment(context);
            }
          } else {
            emitError(context, 11);
            node2 = parseBogusComment(context);
          }
        } else if (s[1] === "/") {
          if (s.length === 2) {
            emitError(context, 5, 2);
          } else if (s[2] === ">") {
            emitError(context, 14, 2);
            advanceBy(context, 3);
            continue;
          } else if (/[a-z]/i.test(s[2])) {
            emitError(context, 23);
            parseTag(context, 1, parent);
            continue;
          } else {
            emitError(context, 12, 2);
            node2 = parseBogusComment(context);
          }
        } else if (/[a-z]/i.test(s[1])) {
          node2 = parseElement(context, ancestors);
        } else if (s[1] === "?") {
          emitError(context, 21, 1);
          node2 = parseBogusComment(context);
        } else {
          emitError(context, 12, 1);
        }
      }
    }
    if (!node2) {
      node2 = parseText(context, mode);
    }
    if (isArray(node2)) {
      for (let i = 0; i < node2.length; i++) {
        pushNode(nodes, node2[i]);
      }
    } else {
      pushNode(nodes, node2);
    }
  }
  let removedWhitespace = false;
  if (mode !== 2 && mode !== 1) {
    const shouldCondense = context.options.whitespace !== "preserve";
    for (let i = 0; i < nodes.length; i++) {
      const node2 = nodes[i];
      if (!context.inPre && node2.type === 2) {
        if (!/[^\t\r\n\f ]/.test(node2.content)) {
          const prev = nodes[i - 1];
          const next = nodes[i + 1];
          if (!prev || !next || shouldCondense && (prev.type === 3 || next.type === 3 || prev.type === 1 && next.type === 1 && /[\r\n]/.test(node2.content))) {
            removedWhitespace = true;
            nodes[i] = null;
          } else {
            node2.content = " ";
          }
        } else if (shouldCondense) {
          node2.content = node2.content.replace(/[\t\r\n\f ]+/g, " ");
        }
      } else if (node2.type === 3 && !context.options.comments) {
        removedWhitespace = true;
        nodes[i] = null;
      }
    }
    if (context.inPre && parent && context.options.isPreTag(parent.tag)) {
      const first = nodes[0];
      if (first && first.type === 2) {
        first.content = first.content.replace(/^\r?\n/, "");
      }
    }
  }
  return removedWhitespace ? nodes.filter(Boolean) : nodes;
}
function pushNode(nodes, node2) {
  if (node2.type === 2) {
    const prev = last(nodes);
    if (prev && prev.type === 2 && prev.loc.end.offset === node2.loc.start.offset) {
      prev.content += node2.content;
      prev.loc.end = node2.loc.end;
      prev.loc.source += node2.loc.source;
      return;
    }
  }
  nodes.push(node2);
}
function parseCDATA(context, ancestors) {
  advanceBy(context, 9);
  const nodes = parseChildren(context, 3, ancestors);
  if (context.source.length === 0) {
    emitError(context, 6);
  } else {
    advanceBy(context, 3);
  }
  return nodes;
}
function parseComment(context) {
  const start = getCursor(context);
  let content;
  const match = /--(\!)?>/.exec(context.source);
  if (!match) {
    content = context.source.slice(4);
    advanceBy(context, context.source.length);
    emitError(context, 7);
  } else {
    if (match.index <= 3) {
      emitError(context, 0);
    }
    if (match[1]) {
      emitError(context, 10);
    }
    content = context.source.slice(4, match.index);
    const s = context.source.slice(0, match.index);
    let prevIndex = 1, nestedIndex = 0;
    while ((nestedIndex = s.indexOf("<!--", prevIndex)) !== -1) {
      advanceBy(context, nestedIndex - prevIndex + 1);
      if (nestedIndex + 4 < s.length) {
        emitError(context, 16);
      }
      prevIndex = nestedIndex + 1;
    }
    advanceBy(context, match.index + match[0].length - prevIndex + 1);
  }
  return {
    type: 3,
    content,
    loc: getSelection(context, start)
  };
}
function parseBogusComment(context) {
  const start = getCursor(context);
  const contentStart = context.source[1] === "?" ? 1 : 2;
  let content;
  const closeIndex = context.source.indexOf(">");
  if (closeIndex === -1) {
    content = context.source.slice(contentStart);
    advanceBy(context, context.source.length);
  } else {
    content = context.source.slice(contentStart, closeIndex);
    advanceBy(context, closeIndex + 1);
  }
  return {
    type: 3,
    content,
    loc: getSelection(context, start)
  };
}
function parseElement(context, ancestors) {
  const wasInPre = context.inPre;
  const wasInVPre = context.inVPre;
  const parent = last(ancestors);
  const element = parseTag(context, 0, parent);
  const isPreBoundary = context.inPre && !wasInPre;
  const isVPreBoundary = context.inVPre && !wasInVPre;
  if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {
    if (isPreBoundary) {
      context.inPre = false;
    }
    if (isVPreBoundary) {
      context.inVPre = false;
    }
    return element;
  }
  ancestors.push(element);
  const mode = context.options.getTextMode(element, parent);
  const children = parseChildren(context, mode, ancestors);
  ancestors.pop();
  element.children = children;
  if (startsWithEndTagOpen(context.source, element.tag)) {
    parseTag(context, 1, parent);
  } else {
    emitError(context, 24, 0, element.loc.start);
    if (context.source.length === 0 && element.tag.toLowerCase() === "script") {
      const first = children[0];
      if (first && startsWith(first.loc.source, "<!--")) {
        emitError(context, 8);
      }
    }
  }
  element.loc = getSelection(context, element.loc.start);
  if (isPreBoundary) {
    context.inPre = false;
  }
  if (isVPreBoundary) {
    context.inVPre = false;
  }
  return element;
}
function parseTag(context, type, parent) {
  const start = getCursor(context);
  const match = /^<\/?([a-z][^\t\r\n\f />]*)/i.exec(context.source);
  const tag2 = match[1];
  const ns = context.options.getNamespace(tag2, parent);
  advanceBy(context, match[0].length);
  advanceSpaces(context);
  const cursor = getCursor(context);
  const currentSource = context.source;
  if (context.options.isPreTag(tag2)) {
    context.inPre = true;
  }
  let props = parseAttributes(context, type);
  if (type === 0 && !context.inVPre && props.some((p) => p.type === 7 && p.name === "pre")) {
    context.inVPre = true;
    extend(context, cursor);
    context.source = currentSource;
    props = parseAttributes(context, type).filter((p) => p.name !== "v-pre");
  }
  let isSelfClosing = false;
  if (context.source.length === 0) {
    emitError(context, 9);
  } else {
    isSelfClosing = startsWith(context.source, "/>");
    if (type === 1 && isSelfClosing) {
      emitError(context, 4);
    }
    advanceBy(context, isSelfClosing ? 2 : 1);
  }
  if (type === 1) {
    return;
  }
  let tagType = 0;
  if (!context.inVPre) {
    if (tag2 === "slot") {
      tagType = 2;
    } else if (tag2 === "template") {
      if (props.some((p) => p.type === 7 && isSpecialTemplateDirective(p.name))) {
        tagType = 3;
      }
    } else if (isComponent(tag2, props, context)) {
      tagType = 1;
    }
  }
  return {
    type: 1,
    ns,
    tag: tag2,
    tagType,
    props,
    isSelfClosing,
    children: [],
    loc: getSelection(context, start),
    codegenNode: void 0
  };
}
function isComponent(tag2, props, context) {
  const options = context.options;
  if (options.isCustomElement(tag2)) {
    return false;
  }
  if (tag2 === "component" || /^[A-Z]/.test(tag2) || isCoreComponent(tag2) || options.isBuiltInComponent && options.isBuiltInComponent(tag2) || options.isNativeTag && !options.isNativeTag(tag2)) {
    return true;
  }
  for (let i = 0; i < props.length; i++) {
    const p = props[i];
    if (p.type === 6) {
      if (p.name === "is" && p.value) {
        if (p.value.content.startsWith("vue:")) {
          return true;
        }
      }
    } else {
      if (p.name === "is") {
        return true;
      } else if (p.name === "bind" && isStaticArgOf(p.arg, "is") && false) {
        return true;
      }
    }
  }
}
function parseAttributes(context, type) {
  const props = [];
  const attributeNames = /* @__PURE__ */ new Set();
  while (context.source.length > 0 && !startsWith(context.source, ">") && !startsWith(context.source, "/>")) {
    if (startsWith(context.source, "/")) {
      emitError(context, 22);
      advanceBy(context, 1);
      advanceSpaces(context);
      continue;
    }
    if (type === 1) {
      emitError(context, 3);
    }
    const attr = parseAttribute(context, attributeNames);
    if (attr.type === 6 && attr.value && attr.name === "class") {
      attr.value.content = attr.value.content.replace(/\s+/g, " ").trim();
    }
    if (type === 0) {
      props.push(attr);
    }
    if (/^[^\t\r\n\f />]/.test(context.source)) {
      emitError(context, 15);
    }
    advanceSpaces(context);
  }
  return props;
}
function parseAttribute(context, nameSet) {
  const start = getCursor(context);
  const match = /^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(context.source);
  const name = match[0];
  if (nameSet.has(name)) {
    emitError(context, 2);
  }
  nameSet.add(name);
  if (name[0] === "=") {
    emitError(context, 19);
  }
  {
    const pattern = /["'<]/g;
    let m;
    while (m = pattern.exec(name)) {
      emitError(context, 17, m.index);
    }
  }
  advanceBy(context, name.length);
  let value = void 0;
  if (/^[\t\r\n\f ]*=/.test(context.source)) {
    advanceSpaces(context);
    advanceBy(context, 1);
    advanceSpaces(context);
    value = parseAttributeValue(context);
    if (!value) {
      emitError(context, 13);
    }
  }
  const loc = getSelection(context, start);
  if (!context.inVPre && /^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(name)) {
    const match2 = /(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(name);
    let isPropShorthand = startsWith(name, ".");
    let dirName = match2[1] || (isPropShorthand || startsWith(name, ":") ? "bind" : startsWith(name, "@") ? "on" : "slot");
    let arg;
    if (match2[2]) {
      const isSlot = dirName === "slot";
      const startOffset = name.lastIndexOf(match2[2]);
      const loc2 = getSelection(context, getNewPosition(context, start, startOffset), getNewPosition(context, start, startOffset + match2[2].length + (isSlot && match2[3] || "").length));
      let content = match2[2];
      let isStatic = true;
      if (content.startsWith("[")) {
        isStatic = false;
        if (!content.endsWith("]")) {
          emitError(context, 27);
          content = content.slice(1);
        } else {
          content = content.slice(1, content.length - 1);
        }
      } else if (isSlot) {
        content += match2[3] || "";
      }
      arg = {
        type: 4,
        content,
        isStatic,
        constType: isStatic ? 3 : 0,
        loc: loc2
      };
    }
    if (value && value.isQuoted) {
      const valueLoc = value.loc;
      valueLoc.start.offset++;
      valueLoc.start.column++;
      valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);
      valueLoc.source = valueLoc.source.slice(1, -1);
    }
    const modifiers = match2[3] ? match2[3].slice(1).split(".") : [];
    if (isPropShorthand)
      modifiers.push("prop");
    return {
      type: 7,
      name: dirName,
      exp: value && {
        type: 4,
        content: value.content,
        isStatic: false,
        constType: 0,
        loc: value.loc
      },
      arg,
      modifiers,
      loc
    };
  }
  if (!context.inVPre && startsWith(name, "v-")) {
    emitError(context, 26);
  }
  return {
    type: 6,
    name,
    value: value && {
      type: 2,
      content: value.content,
      loc: value.loc
    },
    loc
  };
}
function parseAttributeValue(context) {
  const start = getCursor(context);
  let content;
  const quote = context.source[0];
  const isQuoted = quote === `"` || quote === `'`;
  if (isQuoted) {
    advanceBy(context, 1);
    const endIndex = context.source.indexOf(quote);
    if (endIndex === -1) {
      content = parseTextData(context, context.source.length, 4);
    } else {
      content = parseTextData(context, endIndex, 4);
      advanceBy(context, 1);
    }
  } else {
    const match = /^[^\t\r\n\f >]+/.exec(context.source);
    if (!match) {
      return void 0;
    }
    const unexpectedChars = /["'<=`]/g;
    let m;
    while (m = unexpectedChars.exec(match[0])) {
      emitError(context, 18, m.index);
    }
    content = parseTextData(context, match[0].length, 4);
  }
  return { content, isQuoted, loc: getSelection(context, start) };
}
function parseInterpolation(context, mode) {
  const [open, close] = context.options.delimiters;
  const closeIndex = context.source.indexOf(close, open.length);
  if (closeIndex === -1) {
    emitError(context, 25);
    return void 0;
  }
  const start = getCursor(context);
  advanceBy(context, open.length);
  const innerStart = getCursor(context);
  const innerEnd = getCursor(context);
  const rawContentLength = closeIndex - open.length;
  const rawContent = context.source.slice(0, rawContentLength);
  const preTrimContent = parseTextData(context, rawContentLength, mode);
  const content = preTrimContent.trim();
  const startOffset = preTrimContent.indexOf(content);
  if (startOffset > 0) {
    advancePositionWithMutation(innerStart, rawContent, startOffset);
  }
  const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);
  advancePositionWithMutation(innerEnd, rawContent, endOffset);
  advanceBy(context, close.length);
  return {
    type: 5,
    content: {
      type: 4,
      isStatic: false,
      constType: 0,
      content,
      loc: getSelection(context, innerStart, innerEnd)
    },
    loc: getSelection(context, start)
  };
}
function parseText(context, mode) {
  const endTokens = mode === 3 ? ["]]>"] : ["<", context.options.delimiters[0]];
  let endIndex = context.source.length;
  for (let i = 0; i < endTokens.length; i++) {
    const index = context.source.indexOf(endTokens[i], 1);
    if (index !== -1 && endIndex > index) {
      endIndex = index;
    }
  }
  const start = getCursor(context);
  const content = parseTextData(context, endIndex, mode);
  return {
    type: 2,
    content,
    loc: getSelection(context, start)
  };
}
function parseTextData(context, length2, mode) {
  const rawText = context.source.slice(0, length2);
  advanceBy(context, length2);
  if (mode === 2 || mode === 3 || !rawText.includes("&")) {
    return rawText;
  } else {
    return context.options.decodeEntities(rawText, mode === 4);
  }
}
function getCursor(context) {
  const { column, line, offset } = context;
  return { column, line, offset };
}
function getSelection(context, start, end) {
  end = end || getCursor(context);
  return {
    start,
    end,
    source: context.originalSource.slice(start.offset, end.offset)
  };
}
function last(xs) {
  return xs[xs.length - 1];
}
function startsWith(source, searchString) {
  return source.startsWith(searchString);
}
function advanceBy(context, numberOfCharacters) {
  const { source } = context;
  advancePositionWithMutation(context, source, numberOfCharacters);
  context.source = source.slice(numberOfCharacters);
}
function advanceSpaces(context) {
  const match = /^[\t\r\n\f ]+/.exec(context.source);
  if (match) {
    advanceBy(context, match[0].length);
  }
}
function getNewPosition(context, start, numberOfCharacters) {
  return advancePositionWithClone(start, context.originalSource.slice(start.offset, numberOfCharacters), numberOfCharacters);
}
function emitError(context, code, offset, loc = getCursor(context)) {
  if (offset) {
    loc.offset += offset;
    loc.column += offset;
  }
  context.options.onError(createCompilerError(code, {
    start: loc,
    end: loc,
    source: ""
  }));
}
function isEnd(context, mode, ancestors) {
  const s = context.source;
  switch (mode) {
    case 0:
      if (startsWith(s, "</")) {
        for (let i = ancestors.length - 1; i >= 0; --i) {
          if (startsWithEndTagOpen(s, ancestors[i].tag)) {
            return true;
          }
        }
      }
      break;
    case 1:
    case 2: {
      const parent = last(ancestors);
      if (parent && startsWithEndTagOpen(s, parent.tag)) {
        return true;
      }
      break;
    }
    case 3:
      if (startsWith(s, "]]>")) {
        return true;
      }
      break;
  }
  return !s;
}
function startsWithEndTagOpen(source, tag2) {
  return startsWith(source, "</") && source.slice(2, 2 + tag2.length).toLowerCase() === tag2.toLowerCase() && /[\t\r\n\f />]/.test(source[2 + tag2.length] || ">");
}
function hoistStatic(root2, context) {
  walk2(root2, context, isSingleElementRoot(root2, root2.children[0]));
}
function isSingleElementRoot(root2, child) {
  const { children } = root2;
  return children.length === 1 && child.type === 1 && !isSlotOutlet(child);
}
function walk2(node2, context, doNotHoistNode = false) {
  const { children } = node2;
  const originalCount = children.length;
  let hoistedCount = 0;
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    if (child.type === 1 && child.tagType === 0) {
      const constantType = doNotHoistNode ? 0 : getConstantType(child, context);
      if (constantType > 0) {
        if (constantType >= 2) {
          child.codegenNode.patchFlag = -1 + ` /* HOISTED */`;
          child.codegenNode = context.hoist(child.codegenNode);
          hoistedCount++;
          continue;
        }
      } else {
        const codegenNode = child.codegenNode;
        if (codegenNode.type === 13) {
          const flag = getPatchFlag(codegenNode);
          if ((!flag || flag === 512 || flag === 1) && getGeneratedPropsConstantType(child, context) >= 2) {
            const props = getNodeProps(child);
            if (props) {
              codegenNode.props = context.hoist(props);
            }
          }
          if (codegenNode.dynamicProps) {
            codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);
          }
        }
      }
    } else if (child.type === 12 && getConstantType(child.content, context) >= 2) {
      child.codegenNode = context.hoist(child.codegenNode);
      hoistedCount++;
    }
    if (child.type === 1) {
      const isComponent2 = child.tagType === 1;
      if (isComponent2) {
        context.scopes.vSlot++;
      }
      walk2(child, context);
      if (isComponent2) {
        context.scopes.vSlot--;
      }
    } else if (child.type === 11) {
      walk2(child, context, child.children.length === 1);
    } else if (child.type === 9) {
      for (let i2 = 0; i2 < child.branches.length; i2++) {
        walk2(child.branches[i2], context, child.branches[i2].children.length === 1);
      }
    }
  }
  if (hoistedCount && context.transformHoist) {
    context.transformHoist(children, context, node2);
  }
  if (hoistedCount && hoistedCount === originalCount && node2.type === 1 && node2.tagType === 0 && node2.codegenNode && node2.codegenNode.type === 13 && isArray(node2.codegenNode.children)) {
    node2.codegenNode.children = context.hoist(createArrayExpression(node2.codegenNode.children));
  }
}
function getConstantType(node2, context) {
  const { constantCache } = context;
  switch (node2.type) {
    case 1:
      if (node2.tagType !== 0) {
        return 0;
      }
      const cached = constantCache.get(node2);
      if (cached !== void 0) {
        return cached;
      }
      const codegenNode = node2.codegenNode;
      if (codegenNode.type !== 13) {
        return 0;
      }
      if (codegenNode.isBlock && node2.tag !== "svg" && node2.tag !== "foreignObject") {
        return 0;
      }
      const flag = getPatchFlag(codegenNode);
      if (!flag) {
        let returnType2 = 3;
        const generatedPropsType = getGeneratedPropsConstantType(node2, context);
        if (generatedPropsType === 0) {
          constantCache.set(node2, 0);
          return 0;
        }
        if (generatedPropsType < returnType2) {
          returnType2 = generatedPropsType;
        }
        for (let i = 0; i < node2.children.length; i++) {
          const childType = getConstantType(node2.children[i], context);
          if (childType === 0) {
            constantCache.set(node2, 0);
            return 0;
          }
          if (childType < returnType2) {
            returnType2 = childType;
          }
        }
        if (returnType2 > 1) {
          for (let i = 0; i < node2.props.length; i++) {
            const p = node2.props[i];
            if (p.type === 7 && p.name === "bind" && p.exp) {
              const expType = getConstantType(p.exp, context);
              if (expType === 0) {
                constantCache.set(node2, 0);
                return 0;
              }
              if (expType < returnType2) {
                returnType2 = expType;
              }
            }
          }
        }
        if (codegenNode.isBlock) {
          context.removeHelper(OPEN_BLOCK);
          context.removeHelper(getVNodeBlockHelper(context.inSSR, codegenNode.isComponent));
          codegenNode.isBlock = false;
          context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));
        }
        constantCache.set(node2, returnType2);
        return returnType2;
      } else {
        constantCache.set(node2, 0);
        return 0;
      }
    case 2:
    case 3:
      return 3;
    case 9:
    case 11:
    case 10:
      return 0;
    case 5:
    case 12:
      return getConstantType(node2.content, context);
    case 4:
      return node2.constType;
    case 8:
      let returnType = 3;
      for (let i = 0; i < node2.children.length; i++) {
        const child = node2.children[i];
        if (isString(child) || isSymbol(child)) {
          continue;
        }
        const childType = getConstantType(child, context);
        if (childType === 0) {
          return 0;
        } else if (childType < returnType) {
          returnType = childType;
        }
      }
      return returnType;
    default:
      return 0;
  }
}
function getConstantTypeOfHelperCall(value, context) {
  if (value.type === 14 && !isString(value.callee) && allowHoistedHelperSet.has(value.callee)) {
    const arg = value.arguments[0];
    if (arg.type === 4) {
      return getConstantType(arg, context);
    } else if (arg.type === 14) {
      return getConstantTypeOfHelperCall(arg, context);
    }
  }
  return 0;
}
function getGeneratedPropsConstantType(node2, context) {
  let returnType = 3;
  const props = getNodeProps(node2);
  if (props && props.type === 15) {
    const { properties } = props;
    for (let i = 0; i < properties.length; i++) {
      const { key, value } = properties[i];
      const keyType = getConstantType(key, context);
      if (keyType === 0) {
        return keyType;
      }
      if (keyType < returnType) {
        returnType = keyType;
      }
      let valueType;
      if (value.type === 4) {
        valueType = getConstantType(value, context);
      } else if (value.type === 14) {
        valueType = getConstantTypeOfHelperCall(value, context);
      } else {
        valueType = 0;
      }
      if (valueType === 0) {
        return valueType;
      }
      if (valueType < returnType) {
        returnType = valueType;
      }
    }
  }
  return returnType;
}
function getNodeProps(node2) {
  const codegenNode = node2.codegenNode;
  if (codegenNode.type === 13) {
    return codegenNode.props;
  }
}
function getPatchFlag(node2) {
  const flag = node2.patchFlag;
  return flag ? parseInt(flag, 10) : void 0;
}
function createTransformContext(root2, { filename = "", prefixIdentifiers = false, hoistStatic: hoistStatic2 = false, cacheHandlers = false, nodeTransforms = [], directiveTransforms = {}, transformHoist = null, isBuiltInComponent = NOOP, isCustomElement = NOOP, expressionPlugins = [], scopeId = null, slotted = true, ssr = false, inSSR = false, ssrCssVars = ``, bindingMetadata = EMPTY_OBJ, inline = false, isTS = false, onError = defaultOnError, onWarn = defaultOnWarn, compatConfig }) {
  const nameMatch = filename.replace(/\?.*$/, "").match(/([^/\\]+)\.\w+$/);
  const context = {
    selfName: nameMatch && capitalize(camelize(nameMatch[1])),
    prefixIdentifiers,
    hoistStatic: hoistStatic2,
    cacheHandlers,
    nodeTransforms,
    directiveTransforms,
    transformHoist,
    isBuiltInComponent,
    isCustomElement,
    expressionPlugins,
    scopeId,
    slotted,
    ssr,
    inSSR,
    ssrCssVars,
    bindingMetadata,
    inline,
    isTS,
    onError,
    onWarn,
    compatConfig,
    root: root2,
    helpers: /* @__PURE__ */ new Map(),
    components: /* @__PURE__ */ new Set(),
    directives: /* @__PURE__ */ new Set(),
    hoists: [],
    imports: [],
    constantCache: /* @__PURE__ */ new Map(),
    temps: 0,
    cached: 0,
    identifiers: /* @__PURE__ */ Object.create(null),
    scopes: {
      vFor: 0,
      vSlot: 0,
      vPre: 0,
      vOnce: 0
    },
    parent: null,
    currentNode: root2,
    childIndex: 0,
    inVOnce: false,
    helper(name) {
      const count = context.helpers.get(name) || 0;
      context.helpers.set(name, count + 1);
      return name;
    },
    removeHelper(name) {
      const count = context.helpers.get(name);
      if (count) {
        const currentCount = count - 1;
        if (!currentCount) {
          context.helpers.delete(name);
        } else {
          context.helpers.set(name, currentCount);
        }
      }
    },
    helperString(name) {
      return `_${helperNameMap[context.helper(name)]}`;
    },
    replaceNode(node2) {
      {
        if (!context.currentNode) {
          throw new Error(`Node being replaced is already removed.`);
        }
        if (!context.parent) {
          throw new Error(`Cannot replace root node.`);
        }
      }
      context.parent.children[context.childIndex] = context.currentNode = node2;
    },
    removeNode(node2) {
      if (!context.parent) {
        throw new Error(`Cannot remove root node.`);
      }
      const list2 = context.parent.children;
      const removalIndex = node2 ? list2.indexOf(node2) : context.currentNode ? context.childIndex : -1;
      if (removalIndex < 0) {
        throw new Error(`node being removed is not a child of current parent`);
      }
      if (!node2 || node2 === context.currentNode) {
        context.currentNode = null;
        context.onNodeRemoved();
      } else {
        if (context.childIndex > removalIndex) {
          context.childIndex--;
          context.onNodeRemoved();
        }
      }
      context.parent.children.splice(removalIndex, 1);
    },
    onNodeRemoved: () => {
    },
    addIdentifiers(exp) {
      {
        if (isString(exp)) {
          addId(exp);
        } else if (exp.identifiers) {
          exp.identifiers.forEach(addId);
        } else if (exp.type === 4) {
          addId(exp.content);
        }
      }
    },
    removeIdentifiers(exp) {
      {
        if (isString(exp)) {
          removeId(exp);
        } else if (exp.identifiers) {
          exp.identifiers.forEach(removeId);
        } else if (exp.type === 4) {
          removeId(exp.content);
        }
      }
    },
    hoist(exp) {
      if (isString(exp))
        exp = createSimpleExpression(exp);
      context.hoists.push(exp);
      const identifier = createSimpleExpression(`_hoisted_${context.hoists.length}`, false, exp.loc, 2);
      identifier.hoisted = exp;
      return identifier;
    },
    cache(exp, isVNode = false) {
      return createCacheExpression(context.cached++, exp, isVNode);
    }
  };
  function addId(id2) {
    const { identifiers } = context;
    if (identifiers[id2] === void 0) {
      identifiers[id2] = 0;
    }
    identifiers[id2]++;
  }
  function removeId(id2) {
    context.identifiers[id2]--;
  }
  return context;
}
function transform(root2, options) {
  const context = createTransformContext(root2, options);
  traverseNode(root2, context);
  if (options.hoistStatic) {
    hoistStatic(root2, context);
  }
  if (!options.ssr) {
    createRootCodegen(root2, context);
  }
  root2.helpers = [...context.helpers.keys()];
  root2.components = [...context.components];
  root2.directives = [...context.directives];
  root2.imports = context.imports;
  root2.hoists = context.hoists;
  root2.temps = context.temps;
  root2.cached = context.cached;
}
function createRootCodegen(root2, context) {
  const { helper } = context;
  const { children } = root2;
  if (children.length === 1) {
    const child = children[0];
    if (isSingleElementRoot(root2, child) && child.codegenNode) {
      const codegenNode = child.codegenNode;
      if (codegenNode.type === 13) {
        makeBlock(codegenNode, context);
      }
      root2.codegenNode = codegenNode;
    } else {
      root2.codegenNode = child;
    }
  } else if (children.length > 1) {
    let patchFlag = 64;
    let patchFlagText = PatchFlagNames[64];
    if (children.filter((c) => c.type !== 3).length === 1) {
      patchFlag |= 2048;
      patchFlagText += `, ${PatchFlagNames[2048]}`;
    }
    root2.codegenNode = createVNodeCall(context, helper(FRAGMENT), void 0, root2.children, patchFlag + ` /* ${patchFlagText} */`, void 0, void 0, true, void 0, false);
  } else
    ;
}
function traverseChildren(parent, context) {
  let i = 0;
  const nodeRemoved = () => {
    i--;
  };
  for (; i < parent.children.length; i++) {
    const child = parent.children[i];
    if (isString(child))
      continue;
    context.parent = parent;
    context.childIndex = i;
    context.onNodeRemoved = nodeRemoved;
    traverseNode(child, context);
  }
}
function traverseNode(node2, context) {
  context.currentNode = node2;
  const { nodeTransforms } = context;
  const exitFns = [];
  for (let i2 = 0; i2 < nodeTransforms.length; i2++) {
    const onExit = nodeTransforms[i2](node2, context);
    if (onExit) {
      if (isArray(onExit)) {
        exitFns.push(...onExit);
      } else {
        exitFns.push(onExit);
      }
    }
    if (!context.currentNode) {
      return;
    } else {
      node2 = context.currentNode;
    }
  }
  switch (node2.type) {
    case 3:
      if (!context.ssr) {
        context.helper(CREATE_COMMENT);
      }
      break;
    case 5:
      if (!context.ssr) {
        context.helper(TO_DISPLAY_STRING);
      }
      break;
    case 9:
      for (let i2 = 0; i2 < node2.branches.length; i2++) {
        traverseNode(node2.branches[i2], context);
      }
      break;
    case 10:
    case 11:
    case 1:
    case 0:
      traverseChildren(node2, context);
      break;
  }
  context.currentNode = node2;
  let i = exitFns.length;
  while (i--) {
    exitFns[i]();
  }
}
function createStructuralDirectiveTransform(name, fn) {
  const matches = isString(name) ? (n2) => n2 === name : (n2) => name.test(n2);
  return (node2, context) => {
    if (node2.type === 1) {
      const { props } = node2;
      if (node2.tagType === 3 && props.some(isVSlot)) {
        return;
      }
      const exitFns = [];
      for (let i = 0; i < props.length; i++) {
        const prop = props[i];
        if (prop.type === 7 && matches(prop.name)) {
          props.splice(i, 1);
          i--;
          const onExit = fn(node2, prop, context);
          if (onExit)
            exitFns.push(onExit);
        }
      }
      return exitFns;
    }
  };
}
function toVLQSigned(aValue) {
  return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
}
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative ? -shifted : shifted;
}
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function getAugmentedNamespace(n2) {
  if (n2.__esModule)
    return n2;
  var a = Object.defineProperty({}, "__esModule", { value: true });
  Object.keys(n2).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n2, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n2[k];
      }
    });
  });
  return a;
}
function createCommonjsModule(fn) {
  var module2 = { exports: {} };
  return fn(module2, module2.exports), module2.exports;
}
function ArraySet() {
  this._array = [];
  this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
}
function generatedPositionAfter(mappingA, mappingB) {
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}
function MappingList() {
  this._array = [];
  this._sorted = true;
  this._last = { generatedLine: -1, generatedColumn: 0 };
}
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, "file", null);
  this._sourceRoot = util.getArg(aArgs, "sourceRoot", null);
  this._skipValidation = util.getArg(aArgs, "skipValidation", false);
  this._sources = new ArraySet$1();
  this._names = new ArraySet$1();
  this._mappings = new MappingList$1();
  this._sourcesContents = null;
}
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}
function randomIntInRange(low, high) {
  return Math.round(low + Math.random() * (high - low));
}
function doQuickSort(ary, comparator, p, r) {
  if (p < r) {
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;
    swap(ary, pivotIndex, r);
    var pivot = ary[r];
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }
    swap(ary, i + 1, j);
    var q = i + 1;
    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}
function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap2 = aSourceMap;
  if (typeof aSourceMap === "string") {
    sourceMap2 = util.parseSourceMapInput(aSourceMap);
  }
  return sourceMap2.sections != null ? new IndexedSourceMapConsumer(sourceMap2, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap2, aSourceMapURL);
}
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap2 = aSourceMap;
  if (typeof aSourceMap === "string") {
    sourceMap2 = util.parseSourceMapInput(aSourceMap);
  }
  var version2 = util.getArg(sourceMap2, "version");
  var sources = util.getArg(sourceMap2, "sources");
  var names = util.getArg(sourceMap2, "names", []);
  var sourceRoot = util.getArg(sourceMap2, "sourceRoot", null);
  var sourcesContent = util.getArg(sourceMap2, "sourcesContent", null);
  var mappings = util.getArg(sourceMap2, "mappings");
  var file = util.getArg(sourceMap2, "file", null);
  if (version2 != this._version) {
    throw new Error("Unsupported version: " + version2);
  }
  if (sourceRoot) {
    sourceRoot = util.normalize(sourceRoot);
  }
  sources = sources.map(String).map(util.normalize).map(function(source) {
    return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
  });
  this._names = ArraySet$2.fromArray(names.map(String), true);
  this._sources = ArraySet$2.fromArray(sources, true);
  this._absoluteSources = this._sources.toArray().map(function(s) {
    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });
  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap2 = aSourceMap;
  if (typeof aSourceMap === "string") {
    sourceMap2 = util.parseSourceMapInput(aSourceMap);
  }
  var version2 = util.getArg(sourceMap2, "version");
  var sections = util.getArg(sourceMap2, "sections");
  if (version2 != this._version) {
    throw new Error("Unsupported version: " + version2);
  }
  this._sources = new ArraySet$2();
  this._names = new ArraySet$2();
  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function(s) {
    if (s.url) {
      throw new Error("Support for url field in sections not implemented.");
    }
    var offset = util.getArg(s, "offset");
    var offsetLine = util.getArg(offset, "line");
    var offsetColumn = util.getArg(offset, "column");
    if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
      throw new Error("Section offsets must be ordered and non-overlapping.");
    }
    lastOffset = offset;
    return {
      generatedOffset: {
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, "map"), aSourceMapURL)
    };
  });
}
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null)
    this.add(aChunks);
}
function createCodegenContext(ast, { mode = "function", prefixIdentifiers = mode === "module", sourceMap: sourceMap2 = false, filename = `template.vue.html`, scopeId = null, optimizeImports = false, runtimeGlobalName = `Vue`, runtimeModuleName = `vue`, ssrRuntimeModuleName = "vue/server-renderer", ssr = false, isTS = false, inSSR = false }) {
  const context = {
    mode,
    prefixIdentifiers,
    sourceMap: sourceMap2,
    filename,
    scopeId,
    optimizeImports,
    runtimeGlobalName,
    runtimeModuleName,
    ssrRuntimeModuleName,
    ssr,
    isTS,
    inSSR,
    source: ast.loc.source,
    code: ``,
    column: 1,
    line: 1,
    offset: 0,
    indentLevel: 0,
    pure: false,
    map: void 0,
    helper(key) {
      return `_${helperNameMap[key]}`;
    },
    push(code, node2) {
      context.code += code;
      if (context.map) {
        if (node2) {
          let name;
          if (node2.type === 4 && !node2.isStatic) {
            const content = node2.content.replace(/^_ctx\./, "");
            if (content !== node2.content && isSimpleIdentifier(content)) {
              name = content;
            }
          }
          addMapping(node2.loc.start, name);
        }
        advancePositionWithMutation(context, code);
        if (node2 && node2.loc !== locStub) {
          addMapping(node2.loc.end);
        }
      }
    },
    indent() {
      newline(++context.indentLevel);
    },
    deindent(withoutNewLine = false) {
      if (withoutNewLine) {
        --context.indentLevel;
      } else {
        newline(--context.indentLevel);
      }
    },
    newline() {
      newline(context.indentLevel);
    }
  };
  function newline(n2) {
    context.push("\n" + `  `.repeat(n2));
  }
  function addMapping(loc, name) {
    context.map.addMapping({
      name,
      source: context.filename,
      original: {
        line: loc.line,
        column: loc.column - 1
      },
      generated: {
        line: context.line,
        column: context.column - 1
      }
    });
  }
  if (sourceMap2) {
    context.map = new SourceMapGenerator$2();
    context.map.setSourceContent(filename, context.source);
  }
  return context;
}
function generate(ast, options = {}) {
  const context = createCodegenContext(ast, options);
  if (options.onContextCreated)
    options.onContextCreated(context);
  const { mode, push, prefixIdentifiers, indent: indent2, deindent, newline, scopeId, ssr } = context;
  const hasHelpers = ast.helpers.length > 0;
  const useWithBlock = !prefixIdentifiers && mode !== "module";
  const genScopeId = scopeId != null && mode === "module";
  const isSetupInlined = !!options.inline;
  const preambleContext = isSetupInlined ? createCodegenContext(ast, options) : context;
  if (mode === "module") {
    genModulePreamble(ast, preambleContext, genScopeId, isSetupInlined);
  } else {
    genFunctionPreamble(ast, preambleContext);
  }
  const functionName = ssr ? `ssrRender` : `render`;
  const args = ssr ? ["_ctx", "_push", "_parent", "_attrs"] : ["_ctx", "_cache"];
  if (options.bindingMetadata && !options.inline) {
    args.push("$props", "$setup", "$data", "$options");
  }
  const signature = options.isTS ? args.map((arg) => `${arg}: any`).join(",") : args.join(", ");
  if (isSetupInlined) {
    push(`(${signature}) => {`);
  } else {
    push(`function ${functionName}(${signature}) {`);
  }
  indent2();
  if (useWithBlock) {
    push(`with (_ctx) {`);
    indent2();
    if (hasHelpers) {
      push(`const { ${ast.helpers.map((s) => `${helperNameMap[s]}: _${helperNameMap[s]}`).join(", ")} } = _Vue`);
      push(`
`);
      newline();
    }
  }
  if (ast.components.length) {
    genAssets(ast.components, "component", context);
    if (ast.directives.length || ast.temps > 0) {
      newline();
    }
  }
  if (ast.directives.length) {
    genAssets(ast.directives, "directive", context);
    if (ast.temps > 0) {
      newline();
    }
  }
  if (ast.temps > 0) {
    push(`let `);
    for (let i = 0; i < ast.temps; i++) {
      push(`${i > 0 ? `, ` : ``}_temp${i}`);
    }
  }
  if (ast.components.length || ast.directives.length || ast.temps) {
    push(`
`);
    newline();
  }
  if (!ssr) {
    push(`return `);
  }
  if (ast.codegenNode) {
    genNode(ast.codegenNode, context);
  } else {
    push(`null`);
  }
  if (useWithBlock) {
    deindent();
    push(`}`);
  }
  deindent();
  push(`}`);
  return {
    ast,
    code: context.code,
    preamble: isSetupInlined ? preambleContext.code : ``,
    map: context.map ? context.map.toJSON() : void 0
  };
}
function genFunctionPreamble(ast, context) {
  const { ssr, prefixIdentifiers, push, newline, runtimeModuleName, runtimeGlobalName, ssrRuntimeModuleName } = context;
  const VueBinding = ssr ? `require(${JSON.stringify(runtimeModuleName)})` : runtimeGlobalName;
  const aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;
  if (ast.helpers.length > 0) {
    if (prefixIdentifiers) {
      push(`const { ${ast.helpers.map(aliasHelper).join(", ")} } = ${VueBinding}
`);
    } else {
      push(`const _Vue = ${VueBinding}
`);
      if (ast.hoists.length) {
        const staticHelpers = [
          CREATE_VNODE,
          CREATE_ELEMENT_VNODE,
          CREATE_COMMENT,
          CREATE_TEXT,
          CREATE_STATIC
        ].filter((helper) => ast.helpers.includes(helper)).map(aliasHelper).join(", ");
        push(`const { ${staticHelpers} } = _Vue
`);
      }
    }
  }
  if (ast.ssrHelpers && ast.ssrHelpers.length) {
    push(`const { ${ast.ssrHelpers.map(aliasHelper).join(", ")} } = require("${ssrRuntimeModuleName}")
`);
  }
  genHoists(ast.hoists, context);
  newline();
  push(`return `);
}
function genModulePreamble(ast, context, genScopeId, inline) {
  const { push, newline, optimizeImports, runtimeModuleName, ssrRuntimeModuleName } = context;
  if (genScopeId && ast.hoists.length) {
    ast.helpers.push(PUSH_SCOPE_ID, POP_SCOPE_ID);
  }
  if (ast.helpers.length) {
    if (optimizeImports) {
      push(`import { ${ast.helpers.map((s) => helperNameMap[s]).join(", ")} } from ${JSON.stringify(runtimeModuleName)}
`);
      push(`
// Binding optimization for webpack code-split
const ${ast.helpers.map((s) => `_${helperNameMap[s]} = ${helperNameMap[s]}`).join(", ")}
`);
    } else {
      push(`import { ${ast.helpers.map((s) => `${helperNameMap[s]} as _${helperNameMap[s]}`).join(", ")} } from ${JSON.stringify(runtimeModuleName)}
`);
    }
  }
  if (ast.ssrHelpers && ast.ssrHelpers.length) {
    push(`import { ${ast.ssrHelpers.map((s) => `${helperNameMap[s]} as _${helperNameMap[s]}`).join(", ")} } from "${ssrRuntimeModuleName}"
`);
  }
  if (ast.imports.length) {
    genImports(ast.imports, context);
    newline();
  }
  genHoists(ast.hoists, context);
  newline();
  if (!inline) {
    push(`export `);
  }
}
function genAssets(assets, type, { helper, push, newline, isTS }) {
  const resolver = helper(type === "component" ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE);
  for (let i = 0; i < assets.length; i++) {
    let id2 = assets[i];
    const maybeSelfReference = id2.endsWith("__self");
    if (maybeSelfReference) {
      id2 = id2.slice(0, -6);
    }
    push(`const ${toValidAssetId(id2, type)} = ${resolver}(${JSON.stringify(id2)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`);
    if (i < assets.length - 1) {
      newline();
    }
  }
}
function genHoists(hoists, context) {
  if (!hoists.length) {
    return;
  }
  context.pure = true;
  const { push, newline, helper, scopeId, mode } = context;
  const genScopeId = scopeId != null && mode !== "function";
  newline();
  if (genScopeId) {
    push(`const _withScopeId = n => (${helper(PUSH_SCOPE_ID)}("${scopeId}"),n=n(),${helper(POP_SCOPE_ID)}(),n)`);
    newline();
  }
  for (let i = 0; i < hoists.length; i++) {
    const exp = hoists[i];
    if (exp) {
      const needScopeIdWrapper = genScopeId && exp.type === 13;
      push(`const _hoisted_${i + 1} = ${needScopeIdWrapper ? `${PURE_ANNOTATION} _withScopeId(() => ` : ``}`);
      genNode(exp, context);
      if (needScopeIdWrapper) {
        push(`)`);
      }
      newline();
    }
  }
  context.pure = false;
}
function genImports(importsOptions, context) {
  if (!importsOptions.length) {
    return;
  }
  importsOptions.forEach((imports) => {
    context.push(`import `);
    genNode(imports.exp, context);
    context.push(` from '${imports.path}'`);
    context.newline();
  });
}
function isText$1(n2) {
  return isString(n2) || n2.type === 4 || n2.type === 2 || n2.type === 5 || n2.type === 8;
}
function genNodeListAsArray(nodes, context) {
  const multilines = nodes.length > 3 || nodes.some((n2) => isArray(n2) || !isText$1(n2));
  context.push(`[`);
  multilines && context.indent();
  genNodeList(nodes, context, multilines);
  multilines && context.deindent();
  context.push(`]`);
}
function genNodeList(nodes, context, multilines = false, comma = true) {
  const { push, newline } = context;
  for (let i = 0; i < nodes.length; i++) {
    const node2 = nodes[i];
    if (isString(node2)) {
      push(node2);
    } else if (isArray(node2)) {
      genNodeListAsArray(node2, context);
    } else {
      genNode(node2, context);
    }
    if (i < nodes.length - 1) {
      if (multilines) {
        comma && push(",");
        newline();
      } else {
        comma && push(", ");
      }
    }
  }
}
function genNode(node2, context) {
  if (isString(node2)) {
    context.push(node2);
    return;
  }
  if (isSymbol(node2)) {
    context.push(context.helper(node2));
    return;
  }
  switch (node2.type) {
    case 1:
    case 9:
    case 11:
      assert$1(node2.codegenNode != null, `Codegen node is missing for element/if/for node. Apply appropriate transforms first.`);
      genNode(node2.codegenNode, context);
      break;
    case 2:
      genText(node2, context);
      break;
    case 4:
      genExpression(node2, context);
      break;
    case 5:
      genInterpolation(node2, context);
      break;
    case 12:
      genNode(node2.codegenNode, context);
      break;
    case 8:
      genCompoundExpression(node2, context);
      break;
    case 3:
      genComment(node2, context);
      break;
    case 13:
      genVNodeCall(node2, context);
      break;
    case 14:
      genCallExpression(node2, context);
      break;
    case 15:
      genObjectExpression(node2, context);
      break;
    case 17:
      genArrayExpression(node2, context);
      break;
    case 18:
      genFunctionExpression(node2, context);
      break;
    case 19:
      genConditionalExpression(node2, context);
      break;
    case 20:
      genCacheExpression(node2, context);
      break;
    case 21:
      genNodeList(node2.body, context, true, false);
      break;
    case 22:
      genTemplateLiteral(node2, context);
      break;
    case 23:
      genIfStatement(node2, context);
      break;
    case 24:
      genAssignmentExpression(node2, context);
      break;
    case 25:
      genSequenceExpression(node2, context);
      break;
    case 26:
      genReturnStatement(node2, context);
      break;
    case 10:
      break;
    default: {
      assert$1(false, `unhandled codegen node type: ${node2.type}`);
      const exhaustiveCheck = node2;
      return exhaustiveCheck;
    }
  }
}
function genText(node2, context) {
  context.push(JSON.stringify(node2.content), node2);
}
function genExpression(node2, context) {
  const { content, isStatic } = node2;
  context.push(isStatic ? JSON.stringify(content) : content, node2);
}
function genInterpolation(node2, context) {
  const { push, helper, pure } = context;
  if (pure)
    push(PURE_ANNOTATION);
  push(`${helper(TO_DISPLAY_STRING)}(`);
  genNode(node2.content, context);
  push(`)`);
}
function genCompoundExpression(node2, context) {
  for (let i = 0; i < node2.children.length; i++) {
    const child = node2.children[i];
    if (isString(child)) {
      context.push(child);
    } else {
      genNode(child, context);
    }
  }
}
function genExpressionAsPropertyKey(node2, context) {
  const { push } = context;
  if (node2.type === 8) {
    push(`[`);
    genCompoundExpression(node2, context);
    push(`]`);
  } else if (node2.isStatic) {
    const text = isSimpleIdentifier(node2.content) ? node2.content : JSON.stringify(node2.content);
    push(text, node2);
  } else {
    push(`[${node2.content}]`, node2);
  }
}
function genComment(node2, context) {
  const { push, helper, pure } = context;
  if (pure) {
    push(PURE_ANNOTATION);
  }
  push(`${helper(CREATE_COMMENT)}(${JSON.stringify(node2.content)})`, node2);
}
function genVNodeCall(node2, context) {
  const { push, helper, pure } = context;
  const { tag: tag2, props, children, patchFlag, dynamicProps, directives, isBlock, disableTracking, isComponent: isComponent2 } = node2;
  if (directives) {
    push(helper(WITH_DIRECTIVES) + `(`);
  }
  if (isBlock) {
    push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
  }
  if (pure) {
    push(PURE_ANNOTATION);
  }
  const callHelper = isBlock ? getVNodeBlockHelper(context.inSSR, isComponent2) : getVNodeHelper(context.inSSR, isComponent2);
  push(helper(callHelper) + `(`, node2);
  genNodeList(genNullableArgs([tag2, props, children, patchFlag, dynamicProps]), context);
  push(`)`);
  if (isBlock) {
    push(`)`);
  }
  if (directives) {
    push(`, `);
    genNode(directives, context);
    push(`)`);
  }
}
function genNullableArgs(args) {
  let i = args.length;
  while (i--) {
    if (args[i] != null)
      break;
  }
  return args.slice(0, i + 1).map((arg) => arg || `null`);
}
function genCallExpression(node2, context) {
  const { push, helper, pure } = context;
  const callee = isString(node2.callee) ? node2.callee : helper(node2.callee);
  if (pure) {
    push(PURE_ANNOTATION);
  }
  push(callee + `(`, node2);
  genNodeList(node2.arguments, context);
  push(`)`);
}
function genObjectExpression(node2, context) {
  const { push, indent: indent2, deindent, newline } = context;
  const { properties } = node2;
  if (!properties.length) {
    push(`{}`, node2);
    return;
  }
  const multilines = properties.length > 1 || properties.some((p) => p.value.type !== 4);
  push(multilines ? `{` : `{ `);
  multilines && indent2();
  for (let i = 0; i < properties.length; i++) {
    const { key, value } = properties[i];
    genExpressionAsPropertyKey(key, context);
    push(`: `);
    genNode(value, context);
    if (i < properties.length - 1) {
      push(`,`);
      newline();
    }
  }
  multilines && deindent();
  push(multilines ? `}` : ` }`);
}
function genArrayExpression(node2, context) {
  genNodeListAsArray(node2.elements, context);
}
function genFunctionExpression(node2, context) {
  const { push, indent: indent2, deindent } = context;
  const { params, returns, body, newline, isSlot } = node2;
  if (isSlot) {
    push(`_${helperNameMap[WITH_CTX]}(`);
  }
  push(`(`, node2);
  if (isArray(params)) {
    genNodeList(params, context);
  } else if (params) {
    genNode(params, context);
  }
  push(`) => `);
  if (newline || body) {
    push(`{`);
    indent2();
  }
  if (returns) {
    if (newline) {
      push(`return `);
    }
    if (isArray(returns)) {
      genNodeListAsArray(returns, context);
    } else {
      genNode(returns, context);
    }
  } else if (body) {
    genNode(body, context);
  }
  if (newline || body) {
    deindent();
    push(`}`);
  }
  if (isSlot) {
    push(`)`);
  }
}
function genConditionalExpression(node2, context) {
  const { test, consequent, alternate, newline: needNewline } = node2;
  const { push, indent: indent2, deindent, newline } = context;
  if (test.type === 4) {
    const needsParens = !isSimpleIdentifier(test.content);
    needsParens && push(`(`);
    genExpression(test, context);
    needsParens && push(`)`);
  } else {
    push(`(`);
    genNode(test, context);
    push(`)`);
  }
  needNewline && indent2();
  context.indentLevel++;
  needNewline || push(` `);
  push(`? `);
  genNode(consequent, context);
  context.indentLevel--;
  needNewline && newline();
  needNewline || push(` `);
  push(`: `);
  const isNested = alternate.type === 19;
  if (!isNested) {
    context.indentLevel++;
  }
  genNode(alternate, context);
  if (!isNested) {
    context.indentLevel--;
  }
  needNewline && deindent(true);
}
function genCacheExpression(node2, context) {
  const { push, helper, indent: indent2, deindent, newline } = context;
  push(`_cache[${node2.index}] || (`);
  if (node2.isVNode) {
    indent2();
    push(`${helper(SET_BLOCK_TRACKING)}(-1),`);
    newline();
  }
  push(`_cache[${node2.index}] = `);
  genNode(node2.value, context);
  if (node2.isVNode) {
    push(`,`);
    newline();
    push(`${helper(SET_BLOCK_TRACKING)}(1),`);
    newline();
    push(`_cache[${node2.index}]`);
    deindent();
  }
  push(`)`);
}
function genTemplateLiteral(node2, context) {
  const { push, indent: indent2, deindent } = context;
  push("`");
  const l = node2.elements.length;
  const multilines = l > 3;
  for (let i = 0; i < l; i++) {
    const e = node2.elements[i];
    if (isString(e)) {
      push(e.replace(/(`|\$|\\)/g, "\\$1"));
    } else {
      push("${");
      if (multilines)
        indent2();
      genNode(e, context);
      if (multilines)
        deindent();
      push("}");
    }
  }
  push("`");
}
function genIfStatement(node2, context) {
  const { push, indent: indent2, deindent } = context;
  const { test, consequent, alternate } = node2;
  push(`if (`);
  genNode(test, context);
  push(`) {`);
  indent2();
  genNode(consequent, context);
  deindent();
  push(`}`);
  if (alternate) {
    push(` else `);
    if (alternate.type === 23) {
      genIfStatement(alternate, context);
    } else {
      push(`{`);
      indent2();
      genNode(alternate, context);
      deindent();
      push(`}`);
    }
  }
}
function genAssignmentExpression(node2, context) {
  genNode(node2.left, context);
  context.push(` = `);
  genNode(node2.right, context);
}
function genSequenceExpression(node2, context) {
  context.push(`(`);
  genNodeList(node2.expressions, context);
  context.push(`)`);
}
function genReturnStatement({ returns }, context) {
  context.push(`return `);
  if (isArray(returns)) {
    genNodeListAsArray(returns, context);
  } else {
    genNode(returns, context);
  }
}
function walk$1(ast, { enter, leave }) {
  const instance = new SyncWalker2(enter, leave);
  return instance.visit(ast, null);
}
function walkIdentifiers(root2, onIdentifier, includeAll = false, parentStack = [], knownIds = /* @__PURE__ */ Object.create(null)) {
  const rootExp = root2.type === "Program" && root2.body[0].type === "ExpressionStatement" && root2.body[0].expression;
  walk$1(root2, {
    enter(node2, parent) {
      parent && parentStack.push(parent);
      if (parent && parent.type.startsWith("TS") && parent.type !== "TSAsExpression" && parent.type !== "TSNonNullExpression" && parent.type !== "TSTypeAssertion") {
        return this.skip();
      }
      if (node2.type === "Identifier") {
        const isLocal = !!knownIds[node2.name];
        const isRefed = isReferencedIdentifier(node2, parent, parentStack);
        if (includeAll || isRefed && !isLocal) {
          onIdentifier(node2, parent, parentStack, isRefed, isLocal);
        }
      } else if (node2.type === "ObjectProperty" && parent.type === "ObjectPattern") {
        node2.inPattern = true;
      } else if (isFunctionType(node2)) {
        walkFunctionParams(node2, (id2) => markScopeIdentifier(node2, id2, knownIds));
      } else if (node2.type === "BlockStatement") {
        walkBlockDeclarations(node2, (id2) => markScopeIdentifier(node2, id2, knownIds));
      }
    },
    leave(node2, parent) {
      parent && parentStack.pop();
      if (node2 !== rootExp && node2.scopeIds) {
        for (const id2 of node2.scopeIds) {
          knownIds[id2]--;
          if (knownIds[id2] === 0) {
            delete knownIds[id2];
          }
        }
      }
    }
  });
}
function isReferencedIdentifier(id2, parent, parentStack) {
  if (!parent) {
    return true;
  }
  if (id2.name === "arguments") {
    return false;
  }
  if (isReferenced(id2, parent)) {
    return true;
  }
  switch (parent.type) {
    case "AssignmentExpression":
    case "AssignmentPattern":
      return true;
    case "ObjectPattern":
    case "ArrayPattern":
      return isInDestructureAssignment(parent, parentStack);
  }
  return false;
}
function isInDestructureAssignment(parent, parentStack) {
  if (parent && (parent.type === "ObjectProperty" || parent.type === "ArrayPattern")) {
    let i = parentStack.length;
    while (i--) {
      const p = parentStack[i];
      if (p.type === "AssignmentExpression") {
        return true;
      } else if (p.type !== "ObjectProperty" && !p.type.endsWith("Pattern")) {
        break;
      }
    }
  }
  return false;
}
function walkFunctionParams(node2, onIdent) {
  for (const p of node2.params) {
    for (const id2 of extractIdentifiers(p)) {
      onIdent(id2);
    }
  }
}
function walkBlockDeclarations(block, onIdent) {
  for (const stmt of block.body) {
    if (stmt.type === "VariableDeclaration") {
      if (stmt.declare)
        continue;
      for (const decl of stmt.declarations) {
        for (const id2 of extractIdentifiers(decl.id)) {
          onIdent(id2);
        }
      }
    } else if (stmt.type === "FunctionDeclaration" || stmt.type === "ClassDeclaration") {
      if (stmt.declare || !stmt.id)
        continue;
      onIdent(stmt.id);
    }
  }
}
function extractIdentifiers(param, nodes = []) {
  switch (param.type) {
    case "Identifier":
      nodes.push(param);
      break;
    case "MemberExpression":
      let object2 = param;
      while (object2.type === "MemberExpression") {
        object2 = object2.object;
      }
      nodes.push(object2);
      break;
    case "ObjectPattern":
      for (const prop of param.properties) {
        if (prop.type === "RestElement") {
          extractIdentifiers(prop.argument, nodes);
        } else {
          extractIdentifiers(prop.value, nodes);
        }
      }
      break;
    case "ArrayPattern":
      param.elements.forEach((element) => {
        if (element)
          extractIdentifiers(element, nodes);
      });
      break;
    case "RestElement":
      extractIdentifiers(param.argument, nodes);
      break;
    case "AssignmentPattern":
      extractIdentifiers(param.left, nodes);
      break;
  }
  return nodes;
}
function markScopeIdentifier(node2, child, knownIds) {
  const { name } = child;
  if (node2.scopeIds && node2.scopeIds.has(name)) {
    return;
  }
  if (name in knownIds) {
    knownIds[name]++;
  } else {
    knownIds[name] = 1;
  }
  (node2.scopeIds || (node2.scopeIds = /* @__PURE__ */ new Set())).add(name);
}
function isReferenced(node2, parent, grandparent) {
  switch (parent.type) {
    case "MemberExpression":
    case "OptionalMemberExpression":
      if (parent.property === node2) {
        return !!parent.computed;
      }
      return parent.object === node2;
    case "JSXMemberExpression":
      return parent.object === node2;
    case "VariableDeclarator":
      return parent.init === node2;
    case "ArrowFunctionExpression":
      return parent.body === node2;
    case "PrivateName":
      return false;
    case "ClassMethod":
    case "ClassPrivateMethod":
    case "ObjectMethod":
      if (parent.key === node2) {
        return !!parent.computed;
      }
      return false;
    case "ObjectProperty":
      if (parent.key === node2) {
        return !!parent.computed;
      }
      return !grandparent || grandparent.type !== "ObjectPattern";
    case "ClassProperty":
      if (parent.key === node2) {
        return !!parent.computed;
      }
      return true;
    case "ClassPrivateProperty":
      return parent.key !== node2;
    case "ClassDeclaration":
    case "ClassExpression":
      return parent.superClass === node2;
    case "AssignmentExpression":
      return parent.right === node2;
    case "AssignmentPattern":
      return parent.right === node2;
    case "LabeledStatement":
      return false;
    case "CatchClause":
      return false;
    case "RestElement":
      return false;
    case "BreakStatement":
    case "ContinueStatement":
      return false;
    case "FunctionDeclaration":
    case "FunctionExpression":
      return false;
    case "ExportNamespaceSpecifier":
    case "ExportDefaultSpecifier":
      return false;
    case "ExportSpecifier":
      if (grandparent === null || grandparent === void 0 ? void 0 : grandparent.source) {
        return false;
      }
      return parent.local === node2;
    case "ImportDefaultSpecifier":
    case "ImportNamespaceSpecifier":
    case "ImportSpecifier":
      return false;
    case "ImportAttribute":
      return false;
    case "JSXAttribute":
      return false;
    case "ObjectPattern":
    case "ArrayPattern":
      return false;
    case "MetaProperty":
      return false;
    case "ObjectTypeProperty":
      return parent.key !== node2;
    case "TSEnumMember":
      return parent.id !== node2;
    case "TSPropertySignature":
      if (parent.key === node2) {
        return !!parent.computed;
      }
      return true;
  }
  return true;
}
function processExpression(node2, context, asParams = false, asRawStatements = false, localVars = Object.create(context.identifiers)) {
  if (!context.prefixIdentifiers || !node2.content.trim()) {
    return node2;
  }
  const { inline, bindingMetadata } = context;
  const rewriteIdentifier = (raw, parent, id2) => {
    const type = hasOwn(bindingMetadata, raw) && bindingMetadata[raw];
    if (inline) {
      const isAssignmentLVal = parent && parent.type === "AssignmentExpression" && parent.left === id2;
      const isUpdateArg = parent && parent.type === "UpdateExpression" && parent.argument === id2;
      const isDestructureAssignment = parent && isInDestructureAssignment(parent, parentStack);
      if (type === "setup-const" || localVars[raw]) {
        return raw;
      } else if (type === "setup-ref") {
        return `${raw}.value`;
      } else if (type === "setup-maybe-ref") {
        return isAssignmentLVal || isUpdateArg || isDestructureAssignment ? `${raw}.value` : `${context.helperString(UNREF)}(${raw})`;
      } else if (type === "setup-let") {
        if (isAssignmentLVal) {
          const { right: rVal, operator } = parent;
          const rExp = rawExp.slice(rVal.start - 1, rVal.end - 1);
          const rExpString = stringifyExpression(processExpression(createSimpleExpression(rExp, false), context, false, false, knownIds));
          return `${context.helperString(IS_REF)}(${raw})${context.isTS ? ` //@ts-ignore
` : ``} ? ${raw}.value ${operator} ${rExpString} : ${raw}`;
        } else if (isUpdateArg) {
          id2.start = parent.start;
          id2.end = parent.end;
          const { prefix: isPrefix, operator } = parent;
          const prefix2 = isPrefix ? operator : ``;
          const postfix2 = isPrefix ? `` : operator;
          return `${context.helperString(IS_REF)}(${raw})${context.isTS ? ` //@ts-ignore
` : ``} ? ${prefix2}${raw}.value${postfix2} : ${prefix2}${raw}${postfix2}`;
        } else if (isDestructureAssignment) {
          return raw;
        } else {
          return `${context.helperString(UNREF)}(${raw})`;
        }
      } else if (type === "props") {
        return `__props.${raw}`;
      } else if (type === "props-aliased") {
        return `__props.${bindingMetadata.__propsAliases[raw]}`;
      }
    } else {
      if (type && type.startsWith("setup")) {
        return `$setup.${raw}`;
      } else if (type === "props-aliased") {
        return `$props.${bindingMetadata.__propsAliases[raw]}`;
      } else if (type) {
        return `$${type}.${raw}`;
      }
    }
    return `_ctx.${raw}`;
  };
  const rawExp = node2.content;
  const bailConstant = rawExp.indexOf(`(`) > -1 || rawExp.indexOf(".") > 0;
  if (isSimpleIdentifier(rawExp)) {
    const isScopeVarReference = context.identifiers[rawExp];
    const isAllowedGlobal = isGloballyWhitelisted(rawExp);
    const isLiteral = isLiteralWhitelisted(rawExp);
    if (!asParams && !isScopeVarReference && !isAllowedGlobal && !isLiteral) {
      if (bindingMetadata[node2.content] === "setup-const") {
        node2.constType = 1;
      }
      node2.content = rewriteIdentifier(rawExp);
    } else if (!isScopeVarReference) {
      if (isLiteral) {
        node2.constType = 3;
      } else {
        node2.constType = 2;
      }
    }
    return node2;
  }
  let ast;
  const source = asRawStatements ? ` ${rawExp} ` : `(${rawExp})${asParams ? `=>{}` : ``}`;
  try {
    ast = parse_1(source, {
      plugins: context.expressionPlugins
    }).program;
  } catch (e) {
    context.onError(createCompilerError(44, node2.loc, void 0, e.message));
    return node2;
  }
  const ids = [];
  const parentStack = [];
  const knownIds = Object.create(context.identifiers);
  walkIdentifiers(ast, (node3, parent, _, isReferenced2, isLocal) => {
    if (isStaticPropertyKey(node3, parent)) {
      return;
    }
    const needPrefix = isReferenced2 && canPrefix(node3);
    if (needPrefix && !isLocal) {
      if (isStaticProperty(parent) && parent.shorthand) {
        node3.prefix = `${node3.name}: `;
      }
      node3.name = rewriteIdentifier(node3.name, parent, node3);
      ids.push(node3);
    } else {
      if (!(needPrefix && isLocal) && !bailConstant) {
        node3.isConstant = true;
      }
      ids.push(node3);
    }
  }, true, parentStack, knownIds);
  const children = [];
  ids.sort((a, b) => a.start - b.start);
  ids.forEach((id2, i) => {
    const start = id2.start - 1;
    const end = id2.end - 1;
    const last2 = ids[i - 1];
    const leadingText = rawExp.slice(last2 ? last2.end - 1 : 0, start);
    if (leadingText.length || id2.prefix) {
      children.push(leadingText + (id2.prefix || ``));
    }
    const source2 = rawExp.slice(start, end);
    children.push(createSimpleExpression(id2.name, false, {
      source: source2,
      start: advancePositionWithClone(node2.loc.start, source2, start),
      end: advancePositionWithClone(node2.loc.start, source2, end)
    }, id2.isConstant ? 3 : 0));
    if (i === ids.length - 1 && end < rawExp.length) {
      children.push(rawExp.slice(end));
    }
  });
  let ret;
  if (children.length) {
    ret = createCompoundExpression(children, node2.loc);
  } else {
    ret = node2;
    ret.constType = bailConstant ? 0 : 3;
  }
  ret.identifiers = Object.keys(knownIds);
  return ret;
}
function canPrefix(id2) {
  if (isGloballyWhitelisted(id2.name)) {
    return false;
  }
  if (id2.name === "require") {
    return false;
  }
  return true;
}
function stringifyExpression(exp) {
  if (isString(exp)) {
    return exp;
  } else if (exp.type === 4) {
    return exp.content;
  } else {
    return exp.children.map(stringifyExpression).join("");
  }
}
function processIf(node2, dir, context, processCodegen) {
  if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
    const loc = dir.exp ? dir.exp.loc : node2.loc;
    context.onError(createCompilerError(28, dir.loc));
    dir.exp = createSimpleExpression(`true`, false, loc);
  }
  if (context.prefixIdentifiers && dir.exp) {
    dir.exp = processExpression(dir.exp, context);
  }
  if (dir.name === "if") {
    const branch = createIfBranch(node2, dir);
    const ifNode = {
      type: 9,
      loc: node2.loc,
      branches: [branch]
    };
    context.replaceNode(ifNode);
    if (processCodegen) {
      return processCodegen(ifNode, branch, true);
    }
  } else {
    const siblings = context.parent.children;
    const comments = [];
    let i = siblings.indexOf(node2);
    while (i-- >= -1) {
      const sibling = siblings[i];
      if (sibling && sibling.type === 3) {
        context.removeNode(sibling);
        comments.unshift(sibling);
        continue;
      }
      if (sibling && sibling.type === 2 && !sibling.content.trim().length) {
        context.removeNode(sibling);
        continue;
      }
      if (sibling && sibling.type === 9) {
        if (dir.name === "else-if" && sibling.branches[sibling.branches.length - 1].condition === void 0) {
          context.onError(createCompilerError(30, node2.loc));
        }
        context.removeNode();
        const branch = createIfBranch(node2, dir);
        if (comments.length && !(context.parent && context.parent.type === 1 && isBuiltInType(context.parent.tag, "transition"))) {
          branch.children = [...comments, ...branch.children];
        }
        {
          const key = branch.userKey;
          if (key) {
            sibling.branches.forEach(({ userKey }) => {
              if (isSameKey(userKey, key)) {
                context.onError(createCompilerError(29, branch.userKey.loc));
              }
            });
          }
        }
        sibling.branches.push(branch);
        const onExit = processCodegen && processCodegen(sibling, branch, false);
        traverseNode(branch, context);
        if (onExit)
          onExit();
        context.currentNode = null;
      } else {
        context.onError(createCompilerError(30, node2.loc));
      }
      break;
    }
  }
}
function createIfBranch(node2, dir) {
  return {
    type: 10,
    loc: node2.loc,
    condition: dir.name === "else" ? void 0 : dir.exp,
    children: node2.tagType === 3 && !findDir(node2, "for") ? node2.children : [node2],
    userKey: findProp(node2, `key`)
  };
}
function createCodegenNodeForBranch(branch, keyIndex, context) {
  if (branch.condition) {
    return createConditionalExpression(branch.condition, createChildrenCodegenNode(branch, keyIndex, context), createCallExpression(context.helper(CREATE_COMMENT), [
      '"v-if"',
      "true"
    ]));
  } else {
    return createChildrenCodegenNode(branch, keyIndex, context);
  }
}
function createChildrenCodegenNode(branch, keyIndex, context) {
  const { helper } = context;
  const keyProperty = createObjectProperty(`key`, createSimpleExpression(`${keyIndex}`, false, locStub, 2));
  const { children } = branch;
  const firstChild = children[0];
  const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1;
  if (needFragmentWrapper) {
    if (children.length === 1 && firstChild.type === 11) {
      const vnodeCall = firstChild.codegenNode;
      injectProp(vnodeCall, keyProperty, context);
      return vnodeCall;
    } else {
      let patchFlag = 64;
      let patchFlagText = PatchFlagNames[64];
      if (children.filter((c) => c.type !== 3).length === 1) {
        patchFlag |= 2048;
        patchFlagText += `, ${PatchFlagNames[2048]}`;
      }
      return createVNodeCall(context, helper(FRAGMENT), createObjectExpression([keyProperty]), children, patchFlag + ` /* ${patchFlagText} */`, void 0, void 0, true, false, false, branch.loc);
    }
  } else {
    const ret = firstChild.codegenNode;
    const vnodeCall = getMemoedVNodeCall(ret);
    if (vnodeCall.type === 13) {
      makeBlock(vnodeCall, context);
    }
    injectProp(vnodeCall, keyProperty, context);
    return ret;
  }
}
function isSameKey(a, b) {
  if (!a || a.type !== b.type) {
    return false;
  }
  if (a.type === 6) {
    if (a.value.content !== b.value.content) {
      return false;
    }
  } else {
    const exp = a.exp;
    const branchExp = b.exp;
    if (exp.type !== branchExp.type) {
      return false;
    }
    if (exp.type !== 4 || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) {
      return false;
    }
  }
  return true;
}
function getParentCondition(node2) {
  while (true) {
    if (node2.type === 19) {
      if (node2.alternate.type === 19) {
        node2 = node2.alternate;
      } else {
        return node2;
      }
    } else if (node2.type === 20) {
      node2 = node2.value;
    }
  }
}
function processFor(node2, dir, context, processCodegen) {
  if (!dir.exp) {
    context.onError(createCompilerError(31, dir.loc));
    return;
  }
  const parseResult = parseForExpression(dir.exp, context);
  if (!parseResult) {
    context.onError(createCompilerError(32, dir.loc));
    return;
  }
  const { addIdentifiers, removeIdentifiers, scopes } = context;
  const { source, value, key, index } = parseResult;
  const forNode = {
    type: 11,
    loc: dir.loc,
    source,
    valueAlias: value,
    keyAlias: key,
    objectIndexAlias: index,
    parseResult,
    children: isTemplateNode(node2) ? node2.children : [node2]
  };
  context.replaceNode(forNode);
  scopes.vFor++;
  if (context.prefixIdentifiers) {
    value && addIdentifiers(value);
    key && addIdentifiers(key);
    index && addIdentifiers(index);
  }
  const onExit = processCodegen && processCodegen(forNode);
  return () => {
    scopes.vFor--;
    if (context.prefixIdentifiers) {
      value && removeIdentifiers(value);
      key && removeIdentifiers(key);
      index && removeIdentifiers(index);
    }
    if (onExit)
      onExit();
  };
}
function parseForExpression(input2, context) {
  const loc = input2.loc;
  const exp = input2.content;
  const inMatch = exp.match(forAliasRE);
  if (!inMatch)
    return;
  const [, LHS, RHS] = inMatch;
  const result2 = {
    source: createAliasExpression(loc, RHS.trim(), exp.indexOf(RHS, LHS.length)),
    value: void 0,
    key: void 0,
    index: void 0
  };
  if (context.prefixIdentifiers) {
    result2.source = processExpression(result2.source, context);
  }
  let valueContent = LHS.trim().replace(stripParensRE, "").trim();
  const trimmedOffset = LHS.indexOf(valueContent);
  const iteratorMatch = valueContent.match(forIteratorRE);
  if (iteratorMatch) {
    valueContent = valueContent.replace(forIteratorRE, "").trim();
    const keyContent = iteratorMatch[1].trim();
    let keyOffset;
    if (keyContent) {
      keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
      result2.key = createAliasExpression(loc, keyContent, keyOffset);
      if (context.prefixIdentifiers) {
        result2.key = processExpression(result2.key, context, true);
      }
    }
    if (iteratorMatch[2]) {
      const indexContent = iteratorMatch[2].trim();
      if (indexContent) {
        result2.index = createAliasExpression(loc, indexContent, exp.indexOf(indexContent, result2.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length));
        if (context.prefixIdentifiers) {
          result2.index = processExpression(result2.index, context, true);
        }
      }
    }
  }
  if (valueContent) {
    result2.value = createAliasExpression(loc, valueContent, trimmedOffset);
    if (context.prefixIdentifiers) {
      result2.value = processExpression(result2.value, context, true);
    }
  }
  return result2;
}
function createAliasExpression(range2, content, offset) {
  return createSimpleExpression(content, false, getInnerRange(range2, offset, content.length));
}
function createForLoopParams({ value, key, index }, memoArgs = []) {
  return createParamsList([value, key, index, ...memoArgs]);
}
function createParamsList(args) {
  let i = args.length;
  while (i--) {
    if (args[i])
      break;
  }
  return args.slice(0, i + 1).map((arg, i2) => arg || createSimpleExpression(`_`.repeat(i2 + 1), false));
}
function buildSlots(node2, context, buildSlotFn = buildClientSlotFn) {
  context.helper(WITH_CTX);
  const { children, loc } = node2;
  const slotsProperties = [];
  const dynamicSlots = [];
  let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
  if (!context.ssr && context.prefixIdentifiers) {
    hasDynamicSlots = hasScopeRef(node2, context.identifiers);
  }
  const onComponentSlot = findDir(node2, "slot", true);
  if (onComponentSlot) {
    const { arg, exp } = onComponentSlot;
    if (arg && !isStaticExp(arg)) {
      hasDynamicSlots = true;
    }
    slotsProperties.push(createObjectProperty(arg || createSimpleExpression("default", true), buildSlotFn(exp, children, loc)));
  }
  let hasTemplateSlots = false;
  let hasNamedDefaultSlot = false;
  const implicitDefaultChildren = [];
  const seenSlotNames = /* @__PURE__ */ new Set();
  for (let i = 0; i < children.length; i++) {
    const slotElement = children[i];
    let slotDir;
    if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, "slot", true))) {
      if (slotElement.type !== 3) {
        implicitDefaultChildren.push(slotElement);
      }
      continue;
    }
    if (onComponentSlot) {
      context.onError(createCompilerError(37, slotDir.loc));
      break;
    }
    hasTemplateSlots = true;
    const { children: slotChildren, loc: slotLoc } = slotElement;
    const { arg: slotName = createSimpleExpression(`default`, true), exp: slotProps, loc: dirLoc } = slotDir;
    let staticSlotName;
    if (isStaticExp(slotName)) {
      staticSlotName = slotName ? slotName.content : `default`;
    } else {
      hasDynamicSlots = true;
    }
    const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);
    let vIf;
    let vElse;
    let vFor;
    if (vIf = findDir(slotElement, "if")) {
      hasDynamicSlots = true;
      dynamicSlots.push(createConditionalExpression(vIf.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback));
    } else if (vElse = findDir(slotElement, /^else(-if)?$/, true)) {
      let j = i;
      let prev;
      while (j--) {
        prev = children[j];
        if (prev.type !== 3) {
          break;
        }
      }
      if (prev && isTemplateNode(prev) && findDir(prev, "if")) {
        children.splice(i, 1);
        i--;
        let conditional = dynamicSlots[dynamicSlots.length - 1];
        while (conditional.alternate.type === 19) {
          conditional = conditional.alternate;
        }
        conditional.alternate = vElse.exp ? createConditionalExpression(vElse.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback) : buildDynamicSlot(slotName, slotFunction);
      } else {
        context.onError(createCompilerError(30, vElse.loc));
      }
    } else if (vFor = findDir(slotElement, "for")) {
      hasDynamicSlots = true;
      const parseResult = vFor.parseResult || parseForExpression(vFor.exp, context);
      if (parseResult) {
        dynamicSlots.push(createCallExpression(context.helper(RENDER_LIST), [
          parseResult.source,
          createFunctionExpression(createForLoopParams(parseResult), buildDynamicSlot(slotName, slotFunction), true)
        ]));
      } else {
        context.onError(createCompilerError(32, vFor.loc));
      }
    } else {
      if (staticSlotName) {
        if (seenSlotNames.has(staticSlotName)) {
          context.onError(createCompilerError(38, dirLoc));
          continue;
        }
        seenSlotNames.add(staticSlotName);
        if (staticSlotName === "default") {
          hasNamedDefaultSlot = true;
        }
      }
      slotsProperties.push(createObjectProperty(slotName, slotFunction));
    }
  }
  if (!onComponentSlot) {
    const buildDefaultSlotProperty = (props, children2) => {
      const fn = buildSlotFn(props, children2, loc);
      return createObjectProperty(`default`, fn);
    };
    if (!hasTemplateSlots) {
      slotsProperties.push(buildDefaultSlotProperty(void 0, children));
    } else if (implicitDefaultChildren.length && implicitDefaultChildren.some((node3) => isNonWhitespaceContent(node3))) {
      if (hasNamedDefaultSlot) {
        context.onError(createCompilerError(39, implicitDefaultChildren[0].loc));
      } else {
        slotsProperties.push(buildDefaultSlotProperty(void 0, implicitDefaultChildren));
      }
    }
  }
  const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots(node2.children) ? 3 : 1;
  let slots = createObjectExpression(slotsProperties.concat(createObjectProperty(`_`, createSimpleExpression(slotFlag + ` /* ${slotFlagsText[slotFlag]} */`, false))), loc);
  if (dynamicSlots.length) {
    slots = createCallExpression(context.helper(CREATE_SLOTS), [
      slots,
      createArrayExpression(dynamicSlots)
    ]);
  }
  return {
    slots,
    hasDynamicSlots
  };
}
function buildDynamicSlot(name, fn) {
  return createObjectExpression([
    createObjectProperty(`name`, name),
    createObjectProperty(`fn`, fn)
  ]);
}
function hasForwardedSlots(children) {
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    switch (child.type) {
      case 1:
        if (child.tagType === 2 || hasForwardedSlots(child.children)) {
          return true;
        }
        break;
      case 9:
        if (hasForwardedSlots(child.branches))
          return true;
        break;
      case 10:
      case 11:
        if (hasForwardedSlots(child.children))
          return true;
        break;
    }
  }
  return false;
}
function isNonWhitespaceContent(node2) {
  if (node2.type !== 2 && node2.type !== 12)
    return true;
  return node2.type === 2 ? !!node2.content.trim() : isNonWhitespaceContent(node2.content);
}
function resolveComponentType(node2, context, ssr = false) {
  let { tag: tag2 } = node2;
  const isExplicitDynamic = isComponentTag(tag2);
  const isProp = findProp(node2, "is");
  if (isProp) {
    if (isExplicitDynamic || false) {
      const exp = isProp.type === 6 ? isProp.value && createSimpleExpression(isProp.value.content, true) : isProp.exp;
      if (exp) {
        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
          exp
        ]);
      }
    } else if (isProp.type === 6 && isProp.value.content.startsWith("vue:")) {
      tag2 = isProp.value.content.slice(4);
    }
  }
  const isDir = !isExplicitDynamic && findDir(node2, "is");
  if (isDir && isDir.exp) {
    return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
      isDir.exp
    ]);
  }
  const builtIn = isCoreComponent(tag2) || context.isBuiltInComponent(tag2);
  if (builtIn) {
    if (!ssr)
      context.helper(builtIn);
    return builtIn;
  }
  {
    const fromSetup = resolveSetupReference(tag2, context);
    if (fromSetup) {
      return fromSetup;
    }
    const dotIndex = tag2.indexOf(".");
    if (dotIndex > 0) {
      const ns = resolveSetupReference(tag2.slice(0, dotIndex), context);
      if (ns) {
        return ns + tag2.slice(dotIndex);
      }
    }
  }
  if (context.selfName && capitalize(camelize(tag2)) === context.selfName) {
    context.helper(RESOLVE_COMPONENT);
    context.components.add(tag2 + `__self`);
    return toValidAssetId(tag2, `component`);
  }
  context.helper(RESOLVE_COMPONENT);
  context.components.add(tag2);
  return toValidAssetId(tag2, `component`);
}
function resolveSetupReference(name, context) {
  const bindings = context.bindingMetadata;
  if (!bindings || bindings.__isScriptSetup === false) {
    return;
  }
  const camelName = camelize(name);
  const PascalName = capitalize(camelName);
  const checkType = (type) => {
    if (bindings[name] === type) {
      return name;
    }
    if (bindings[camelName] === type) {
      return camelName;
    }
    if (bindings[PascalName] === type) {
      return PascalName;
    }
  };
  const fromConst = checkType("setup-const");
  if (fromConst) {
    return context.inline ? fromConst : `$setup[${JSON.stringify(fromConst)}]`;
  }
  const fromMaybeRef = checkType("setup-let") || checkType("setup-ref") || checkType("setup-maybe-ref");
  if (fromMaybeRef) {
    return context.inline ? `${context.helperString(UNREF)}(${fromMaybeRef})` : `$setup[${JSON.stringify(fromMaybeRef)}]`;
  }
}
function buildProps(node2, context, props = node2.props, ssr = false) {
  const { tag: tag2, loc: elementLoc, children } = node2;
  const isComponent2 = node2.tagType === 1;
  let properties = [];
  const mergeArgs = [];
  const runtimeDirectives = [];
  const hasChildren = children.length > 0;
  let shouldUseBlock = false;
  let patchFlag = 0;
  let hasRef = false;
  let hasClassBinding = false;
  let hasStyleBinding = false;
  let hasHydrationEventBinding = false;
  let hasDynamicKeys = false;
  let hasVnodeHook = false;
  const dynamicPropNames = [];
  const analyzePatchFlag = ({ key, value }) => {
    if (isStaticExp(key)) {
      const name = key.content;
      const isEventHandler = isOn(name);
      if (!isComponent2 && isEventHandler && name.toLowerCase() !== "onclick" && name !== "onUpdate:modelValue" && !isReservedProp(name)) {
        hasHydrationEventBinding = true;
      }
      if (isEventHandler && isReservedProp(name)) {
        hasVnodeHook = true;
      }
      if (value.type === 20 || (value.type === 4 || value.type === 8) && getConstantType(value, context) > 0) {
        return;
      }
      if (name === "ref") {
        hasRef = true;
      } else if (name === "class") {
        hasClassBinding = true;
      } else if (name === "style") {
        hasStyleBinding = true;
      } else if (name !== "key" && !dynamicPropNames.includes(name)) {
        dynamicPropNames.push(name);
      }
      if (isComponent2 && (name === "class" || name === "style") && !dynamicPropNames.includes(name)) {
        dynamicPropNames.push(name);
      }
    } else {
      hasDynamicKeys = true;
    }
  };
  for (let i = 0; i < props.length; i++) {
    const prop = props[i];
    if (prop.type === 6) {
      const { loc, name, value } = prop;
      let isStatic = true;
      if (name === "ref") {
        hasRef = true;
        if (context.scopes.vFor > 0) {
          properties.push(createObjectProperty(createSimpleExpression("ref_for", true), createSimpleExpression("true")));
        }
        if (value && context.inline && context.bindingMetadata[value.content]) {
          isStatic = false;
          properties.push(createObjectProperty(createSimpleExpression("ref_key", true), createSimpleExpression(value.content, true, value.loc)));
        }
      }
      if (name === "is" && (isComponentTag(tag2) || value && value.content.startsWith("vue:") || false)) {
        continue;
      }
      properties.push(createObjectProperty(createSimpleExpression(name, true, getInnerRange(loc, 0, name.length)), createSimpleExpression(value ? value.content : "", isStatic, value ? value.loc : loc)));
    } else {
      const { name, arg, exp, loc } = prop;
      const isVBind = name === "bind";
      const isVOn = name === "on";
      if (name === "slot") {
        if (!isComponent2) {
          context.onError(createCompilerError(40, loc));
        }
        continue;
      }
      if (name === "once" || name === "memo") {
        continue;
      }
      if (name === "is" || isVBind && isStaticArgOf(arg, "is") && (isComponentTag(tag2) || false)) {
        continue;
      }
      if (isVOn && ssr) {
        continue;
      }
      if (isVBind && isStaticArgOf(arg, "key") || isVOn && hasChildren && isStaticArgOf(arg, "vue:before-update")) {
        shouldUseBlock = true;
      }
      if (isVBind && isStaticArgOf(arg, "ref") && context.scopes.vFor > 0) {
        properties.push(createObjectProperty(createSimpleExpression("ref_for", true), createSimpleExpression("true")));
      }
      if (!arg && (isVBind || isVOn)) {
        hasDynamicKeys = true;
        if (exp) {
          if (properties.length) {
            mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));
            properties = [];
          }
          if (isVBind) {
            mergeArgs.push(exp);
          } else {
            mergeArgs.push({
              type: 14,
              loc,
              callee: context.helper(TO_HANDLERS),
              arguments: [exp]
            });
          }
        } else {
          context.onError(createCompilerError(isVBind ? 34 : 35, loc));
        }
        continue;
      }
      const directiveTransform = context.directiveTransforms[name];
      if (directiveTransform) {
        const { props: props2, needRuntime } = directiveTransform(prop, node2, context);
        !ssr && props2.forEach(analyzePatchFlag);
        properties.push(...props2);
        if (needRuntime) {
          runtimeDirectives.push(prop);
          if (isSymbol(needRuntime)) {
            directiveImportMap.set(prop, needRuntime);
          }
        }
      } else if (!isBuiltInDirective(name)) {
        runtimeDirectives.push(prop);
        if (hasChildren) {
          shouldUseBlock = true;
        }
      }
    }
  }
  let propsExpression = void 0;
  if (mergeArgs.length) {
    if (properties.length) {
      mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));
    }
    if (mergeArgs.length > 1) {
      propsExpression = createCallExpression(context.helper(MERGE_PROPS), mergeArgs, elementLoc);
    } else {
      propsExpression = mergeArgs[0];
    }
  } else if (properties.length) {
    propsExpression = createObjectExpression(dedupeProperties(properties), elementLoc);
  }
  if (hasDynamicKeys) {
    patchFlag |= 16;
  } else {
    if (hasClassBinding && !isComponent2) {
      patchFlag |= 2;
    }
    if (hasStyleBinding && !isComponent2) {
      patchFlag |= 4;
    }
    if (dynamicPropNames.length) {
      patchFlag |= 8;
    }
    if (hasHydrationEventBinding) {
      patchFlag |= 32;
    }
  }
  if (!shouldUseBlock && (patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {
    patchFlag |= 512;
  }
  if (!context.inSSR && propsExpression) {
    switch (propsExpression.type) {
      case 15:
        let classKeyIndex = -1;
        let styleKeyIndex = -1;
        let hasDynamicKey = false;
        for (let i = 0; i < propsExpression.properties.length; i++) {
          const key = propsExpression.properties[i].key;
          if (isStaticExp(key)) {
            if (key.content === "class") {
              classKeyIndex = i;
            } else if (key.content === "style") {
              styleKeyIndex = i;
            }
          } else if (!key.isHandlerKey) {
            hasDynamicKey = true;
          }
        }
        const classProp = propsExpression.properties[classKeyIndex];
        const styleProp = propsExpression.properties[styleKeyIndex];
        if (!hasDynamicKey) {
          if (classProp && !isStaticExp(classProp.value)) {
            classProp.value = createCallExpression(context.helper(NORMALIZE_CLASS), [classProp.value]);
          }
          if (styleProp && !isStaticExp(styleProp.value) && (hasStyleBinding || styleProp.value.type === 17)) {
            styleProp.value = createCallExpression(context.helper(NORMALIZE_STYLE), [styleProp.value]);
          }
        } else {
          propsExpression = createCallExpression(context.helper(NORMALIZE_PROPS), [propsExpression]);
        }
        break;
      case 14:
        break;
      default:
        propsExpression = createCallExpression(context.helper(NORMALIZE_PROPS), [
          createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [
            propsExpression
          ])
        ]);
        break;
    }
  }
  return {
    props: propsExpression,
    directives: runtimeDirectives,
    patchFlag,
    dynamicPropNames,
    shouldUseBlock
  };
}
function dedupeProperties(properties) {
  const knownProps = /* @__PURE__ */ new Map();
  const deduped = [];
  for (let i = 0; i < properties.length; i++) {
    const prop = properties[i];
    if (prop.key.type === 8 || !prop.key.isStatic) {
      deduped.push(prop);
      continue;
    }
    const name = prop.key.content;
    const existing = knownProps.get(name);
    if (existing) {
      if (name === "style" || name === "class" || isOn(name)) {
        mergeAsArray(existing, prop);
      }
    } else {
      knownProps.set(name, prop);
      deduped.push(prop);
    }
  }
  return deduped;
}
function mergeAsArray(existing, incoming) {
  if (existing.value.type === 17) {
    existing.value.elements.push(incoming.value);
  } else {
    existing.value = createArrayExpression([existing.value, incoming.value], existing.loc);
  }
}
function buildDirectiveArgs(dir, context) {
  const dirArgs = [];
  const runtime = directiveImportMap.get(dir);
  if (runtime) {
    dirArgs.push(context.helperString(runtime));
  } else {
    const fromSetup = resolveSetupReference("v-" + dir.name, context);
    if (fromSetup) {
      dirArgs.push(fromSetup);
    } else {
      context.helper(RESOLVE_DIRECTIVE);
      context.directives.add(dir.name);
      dirArgs.push(toValidAssetId(dir.name, `directive`));
    }
  }
  const { loc } = dir;
  if (dir.exp)
    dirArgs.push(dir.exp);
  if (dir.arg) {
    if (!dir.exp) {
      dirArgs.push(`void 0`);
    }
    dirArgs.push(dir.arg);
  }
  if (Object.keys(dir.modifiers).length) {
    if (!dir.arg) {
      if (!dir.exp) {
        dirArgs.push(`void 0`);
      }
      dirArgs.push(`void 0`);
    }
    const trueExpression = createSimpleExpression(`true`, false, loc);
    dirArgs.push(createObjectExpression(dir.modifiers.map((modifier) => createObjectProperty(modifier, trueExpression)), loc));
  }
  return createArrayExpression(dirArgs, dir.loc);
}
function stringifyDynamicPropNames(props) {
  let propsNamesString = `[`;
  for (let i = 0, l = props.length; i < l; i++) {
    propsNamesString += JSON.stringify(props[i]);
    if (i < l - 1)
      propsNamesString += ", ";
  }
  return propsNamesString + `]`;
}
function isComponentTag(tag2) {
  return tag2 === "component" || tag2 === "Component";
}
function processSlotOutlet(node2, context) {
  let slotName = `"default"`;
  let slotProps = void 0;
  const nonNameProps = [];
  for (let i = 0; i < node2.props.length; i++) {
    const p = node2.props[i];
    if (p.type === 6) {
      if (p.value) {
        if (p.name === "name") {
          slotName = JSON.stringify(p.value.content);
        } else {
          p.name = camelize(p.name);
          nonNameProps.push(p);
        }
      }
    } else {
      if (p.name === "bind" && isStaticArgOf(p.arg, "name")) {
        if (p.exp)
          slotName = p.exp;
      } else {
        if (p.name === "bind" && p.arg && isStaticExp(p.arg)) {
          p.arg.content = camelize(p.arg.content);
        }
        nonNameProps.push(p);
      }
    }
  }
  if (nonNameProps.length > 0) {
    const { props, directives } = buildProps(node2, context, nonNameProps);
    slotProps = props;
    if (directives.length) {
      context.onError(createCompilerError(36, directives[0].loc));
    }
  }
  return {
    slotName,
    slotProps
  };
}
function createTransformProps(props = []) {
  return { props };
}
function getBaseTransformPreset(prefixIdentifiers) {
  return [
    [
      transformOnce,
      transformIf,
      transformMemo,
      transformFor,
      ...[],
      ...prefixIdentifiers ? [
        trackVForSlotScopes,
        transformExpression
      ] : [],
      transformSlotOutlet,
      transformElement,
      trackSlotScopes,
      transformText
    ],
    {
      on: transformOn,
      bind: transformBind,
      model: transformModel
    }
  ];
}
function baseCompile(template, options = {}) {
  const onError = options.onError || defaultOnError;
  const isModuleMode = options.mode === "module";
  const prefixIdentifiers = options.prefixIdentifiers === true || isModuleMode;
  if (!prefixIdentifiers && options.cacheHandlers) {
    onError(createCompilerError(48));
  }
  if (options.scopeId && !isModuleMode) {
    onError(createCompilerError(49));
  }
  const ast = isString(template) ? baseParse(template, options) : template;
  const [nodeTransforms, directiveTransforms] = getBaseTransformPreset(prefixIdentifiers);
  if (options.isTS) {
    const { expressionPlugins } = options;
    if (!expressionPlugins || !expressionPlugins.includes("typescript")) {
      options.expressionPlugins = [...expressionPlugins || [], "typescript"];
    }
  }
  transform(ast, extend({}, options, {
    prefixIdentifiers,
    nodeTransforms: [
      ...nodeTransforms,
      ...options.nodeTransforms || []
    ],
    directiveTransforms: extend({}, directiveTransforms, options.directiveTransforms || {})
  }));
  return generate(ast, extend({}, options, {
    prefixIdentifiers
  }));
}
function createDOMCompilerError(code, loc) {
  return createCompilerError(code, loc, DOMErrorMessages);
}
function hasMultipleChildren(node2) {
  const children = node2.children = node2.children.filter((c) => c.type !== 3 && !(c.type === 2 && !c.content.trim()));
  const child = children[0];
  return children.length !== 1 || child.type === 11 || child.type === 9 && child.branches.some(hasMultipleChildren);
}
function analyzeNode(node2) {
  if (node2.type === 1 && isNonStringifiable(node2.tag)) {
    return false;
  }
  if (node2.type === 12) {
    return [1, 0];
  }
  let nc = 1;
  let ec = node2.props.length > 0 ? 1 : 0;
  let bailed = false;
  const bail = () => {
    bailed = true;
    return false;
  };
  function walk3(node3) {
    for (let i = 0; i < node3.props.length; i++) {
      const p = node3.props[i];
      if (p.type === 6 && !isStringifiableAttr(p.name, node3.ns)) {
        return bail();
      }
      if (p.type === 7 && p.name === "bind") {
        if (p.arg && (p.arg.type === 8 || p.arg.isStatic && !isStringifiableAttr(p.arg.content, node3.ns))) {
          return bail();
        }
        if (p.exp && (p.exp.type === 8 || p.exp.constType < 3)) {
          return bail();
        }
      }
    }
    for (let i = 0; i < node3.children.length; i++) {
      nc++;
      const child = node3.children[i];
      if (child.type === 1) {
        if (child.props.length > 0) {
          ec++;
        }
        walk3(child);
        if (bailed) {
          return false;
        }
      }
    }
    return true;
  }
  return walk3(node2) ? [nc, ec] : false;
}
function stringifyNode(node2, context) {
  if (isString(node2)) {
    return node2;
  }
  if (isSymbol(node2)) {
    return ``;
  }
  switch (node2.type) {
    case 1:
      return stringifyElement(node2, context);
    case 2:
      return escapeHtml(node2.content);
    case 3:
      return `<!--${escapeHtml(node2.content)}-->`;
    case 5:
      return escapeHtml(toDisplayString(evaluateConstant(node2.content)));
    case 8:
      return escapeHtml(evaluateConstant(node2));
    case 12:
      return stringifyNode(node2.content, context);
    default:
      return "";
  }
}
function stringifyElement(node2, context) {
  let res = `<${node2.tag}`;
  for (let i = 0; i < node2.props.length; i++) {
    const p = node2.props[i];
    if (p.type === 6) {
      res += ` ${p.name}`;
      if (p.value) {
        res += `="${escapeHtml(p.value.content)}"`;
      }
    } else if (p.type === 7 && p.name === "bind") {
      const exp = p.exp;
      if (exp.content[0] === "_") {
        res += ` ${p.arg.content}="__VUE_EXP_START__${exp.content}__VUE_EXP_END__"`;
        continue;
      }
      let evaluated = evaluateConstant(exp);
      if (evaluated != null) {
        const arg = p.arg && p.arg.content;
        if (arg === "class") {
          evaluated = normalizeClass(evaluated);
        } else if (arg === "style") {
          evaluated = stringifyStyle(normalizeStyle(evaluated));
        }
        res += ` ${p.arg.content}="${escapeHtml(evaluated)}"`;
      }
    }
  }
  if (context.scopeId) {
    res += ` ${context.scopeId}`;
  }
  res += `>`;
  for (let i = 0; i < node2.children.length; i++) {
    res += stringifyNode(node2.children[i], context);
  }
  if (!isVoidTag(node2.tag)) {
    res += `</${node2.tag}>`;
  }
  return res;
}
function evaluateConstant(exp) {
  if (exp.type === 4) {
    return new Function(`return ${exp.content}`)();
  } else {
    let res = ``;
    exp.children.forEach((c) => {
      if (isString(c) || isSymbol(c)) {
        return;
      }
      if (c.type === 2) {
        res += c.content;
      } else if (c.type === 5) {
        res += toDisplayString(evaluateConstant(c.content));
      } else {
        res += evaluateConstant(c);
      }
    });
    return res;
  }
}
function compile(template, options = {}) {
  return baseCompile(template, extend({}, parserOptions, options, {
    nodeTransforms: [
      ignoreSideEffectTags,
      ...DOMNodeTransforms,
      ...options.nodeTransforms || []
    ],
    directiveTransforms: extend({}, DOMDirectiveTransforms, options.directiveTransforms || {}),
    transformHoist: stringifyStatic
  }));
}
function parse$1(template, options = {}) {
  return baseParse(template, extend({}, parserOptions, options));
}
function pad(hash, len) {
  while (hash.length < len) {
    hash = "0" + hash;
  }
  return hash;
}
function fold(hash, text) {
  var i;
  var chr;
  var len;
  if (text.length === 0) {
    return hash;
  }
  for (i = 0, len = text.length; i < len; i++) {
    chr = text.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0;
  }
  return hash < 0 ? hash * -2 : hash;
}
function foldObject(hash, o, seen2) {
  return Object.keys(o).sort().reduce(foldKey, hash);
  function foldKey(hash2, key) {
    return foldValue(hash2, o[key], key, seen2);
  }
}
function foldValue(input2, value, key, seen2) {
  var hash = fold(fold(fold(input2, key), toString(value)), typeof value);
  if (value === null) {
    return fold(hash, "null");
  }
  if (value === void 0) {
    return fold(hash, "undefined");
  }
  if (typeof value === "object" || typeof value === "function") {
    if (seen2.indexOf(value) !== -1) {
      return fold(hash, "[Circular]" + key);
    }
    seen2.push(value);
    var objHash = foldObject(hash, value, seen2);
    if (!("valueOf" in value) || typeof value.valueOf !== "function") {
      return objHash;
    }
    try {
      return fold(objHash, String(value.valueOf()));
    } catch (err) {
      return fold(objHash, "[valueOf exception]" + (err.stack || err.message));
    }
  }
  return fold(hash, value.toString());
}
function toString(o) {
  return Object.prototype.toString.call(o);
}
function sum(o) {
  return pad(foldValue(0, o, "", []).toString(16), 8);
}
function genCssVarsFromList(vars, id2, isProd) {
  return `{
  ${vars.map((key) => `"${genVarName(id2, key, isProd)}": (${key})`).join(",\n  ")}
}`;
}
function genVarName(id2, raw, isProd) {
  if (isProd) {
    return hashSum(id2 + raw);
  } else {
    return `${id2}-${raw.replace(/([^\w-])/g, "_")}`;
  }
}
function noramlizeExpression(exp) {
  exp = exp.trim();
  if (exp[0] === `'` && exp[exp.length - 1] === `'` || exp[0] === `"` && exp[exp.length - 1] === `"`) {
    return exp.slice(1, -1);
  }
  return exp;
}
function parseCssVars(sfc) {
  const vars = [];
  sfc.styles.forEach((style) => {
    let match;
    const content = style.content.replace(/\/\*([\s\S]*?)\*\//g, "");
    while (match = cssVarRE.exec(content)) {
      const variable = noramlizeExpression(match[1]);
      if (!vars.includes(variable)) {
        vars.push(variable);
      }
    }
  });
  return vars;
}
function genCssVarsCode(vars, bindings, id2, isProd) {
  const varsExp = genCssVarsFromList(vars, id2, isProd);
  const exp = createSimpleExpression(varsExp, false);
  const context = createTransformContext(createRoot([]), {
    prefixIdentifiers: true,
    inline: true,
    bindingMetadata: bindings.__isScriptSetup === false ? void 0 : bindings
  });
  const transformed = processExpression(exp, context);
  const transformedString = transformed.type === 4 ? transformed.content : transformed.children.map((c) => {
    return typeof c === "string" ? c : c.content;
  }).join("");
  return `_${CSS_VARS_HELPER}(_ctx => (${transformedString}))`;
}
function genNormalScriptCssVarsCode(cssVars, bindings, id2, isProd) {
  return `
import { ${CSS_VARS_HELPER} as _${CSS_VARS_HELPER} } from 'vue'
const __injectCSSVars__ = () => {
${genCssVarsCode(cssVars, bindings, id2, isProd)}}
const __setup__ = __default__.setup
__default__.setup = __setup__
  ? (props, ctx) => { __injectCSSVars__();return __setup__(props, ctx) }
  : __injectCSSVars__
`;
}
function createCache(size = 500) {
  return /* @__PURE__ */ new Map();
}
function init() {
  inited = true;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
}
function toByteArray(b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  placeHolders = b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0;
  arr = new Arr(len * 3 / 4 - placeHolders);
  l = placeHolders > 0 ? len - 4 : len;
  var L = 0;
  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 255;
    arr[L++] = tmp >> 8 & 255;
    arr[L++] = tmp & 255;
  }
  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 255;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 255;
    arr[L++] = tmp & 255;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join("");
}
function fromByteArray(uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var output = "";
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 63];
    output += "==";
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 63];
    output += lookup[tmp << 2 & 63];
    output += "=";
  }
  parts.push(output);
  return parts.join("");
}
function read(buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
  }
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
  }
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
}
function write(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
  }
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
  }
  buffer[offset + i - d] |= s * 128;
}
function kMaxLength() {
  return Buffer2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
}
function createBuffer(that, length2) {
  if (kMaxLength() < length2) {
    throw new RangeError("Invalid typed array length");
  }
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    that = new Uint8Array(length2);
    that.__proto__ = Buffer2.prototype;
  } else {
    if (that === null) {
      that = new Buffer2(length2);
    }
    that.length = length2;
  }
  return that;
}
function Buffer2(arg, encodingOrOffset, length2) {
  if (!Buffer2.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer2)) {
    return new Buffer2(arg, encodingOrOffset, length2);
  }
  if (typeof arg === "number") {
    if (typeof encodingOrOffset === "string") {
      throw new Error("If encoding is specified then the first argument must be a string");
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length2);
}
function from(that, value, encodingOrOffset, length2) {
  if (typeof value === "number") {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length2);
  }
  if (typeof value === "string") {
    return fromString(that, value, encodingOrOffset);
  }
  return fromObject(that, value);
}
function assertSize(size) {
  if (typeof size !== "number") {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}
function alloc(that, size, fill2, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill2 !== void 0) {
    return typeof encoding === "string" ? createBuffer(that, size).fill(fill2, encoding) : createBuffer(that, size).fill(fill2);
  }
  return createBuffer(that, size);
}
function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer2.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}
function fromString(that, string2, encoding) {
  if (typeof encoding !== "string" || encoding === "") {
    encoding = "utf8";
  }
  if (!Buffer2.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }
  var length2 = byteLength(string2, encoding) | 0;
  that = createBuffer(that, length2);
  var actual = that.write(string2, encoding);
  if (actual !== length2) {
    that = that.slice(0, actual);
  }
  return that;
}
function fromArrayLike(that, array) {
  var length2 = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length2);
  for (var i = 0; i < length2; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}
function fromArrayBuffer(that, array, byteOffset, length2) {
  array.byteLength;
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError("'offset' is out of bounds");
  }
  if (array.byteLength < byteOffset + (length2 || 0)) {
    throw new RangeError("'length' is out of bounds");
  }
  if (byteOffset === void 0 && length2 === void 0) {
    array = new Uint8Array(array);
  } else if (length2 === void 0) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length2);
  }
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    that = array;
    that.__proto__ = Buffer2.prototype;
  } else {
    that = fromArrayLike(that, array);
  }
  return that;
}
function fromObject(that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);
    if (that.length === 0) {
      return that;
    }
    obj.copy(that, 0, 0, len);
    return that;
  }
  if (obj) {
    if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
      if (typeof obj.length !== "number" || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }
    if (obj.type === "Buffer" && isArray$1(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }
  throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
}
function checked(length2) {
  if (length2 >= kMaxLength()) {
    throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
  }
  return length2 | 0;
}
function internalIsBuffer(b) {
  return !!(b != null && b._isBuffer);
}
function byteLength(string2, encoding) {
  if (internalIsBuffer(string2)) {
    return string2.length;
  }
  if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string2) || string2 instanceof ArrayBuffer)) {
    return string2.byteLength;
  }
  if (typeof string2 !== "string") {
    string2 = "" + string2;
  }
  var len = string2.length;
  if (len === 0)
    return 0;
  var loweredCase = false;
  for (; ; ) {
    switch (encoding) {
      case "ascii":
      case "latin1":
      case "binary":
        return len;
      case "utf8":
      case "utf-8":
      case void 0:
        return utf8ToBytes(string2).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return len * 2;
      case "hex":
        return len >>> 1;
      case "base64":
        return base64ToBytes(string2).length;
      default:
        if (loweredCase)
          return utf8ToBytes(string2).length;
        encoding = ("" + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
function slowToString(encoding, start, end) {
  var loweredCase = false;
  if (start === void 0 || start < 0) {
    start = 0;
  }
  if (start > this.length) {
    return "";
  }
  if (end === void 0 || end > this.length) {
    end = this.length;
  }
  if (end <= 0) {
    return "";
  }
  end >>>= 0;
  start >>>= 0;
  if (end <= start) {
    return "";
  }
  if (!encoding)
    encoding = "utf8";
  while (true) {
    switch (encoding) {
      case "hex":
        return hexSlice(this, start, end);
      case "utf8":
      case "utf-8":
        return utf8Slice(this, start, end);
      case "ascii":
        return asciiSlice(this, start, end);
      case "latin1":
      case "binary":
        return latin1Slice(this, start, end);
      case "base64":
        return base64Slice(this, start, end);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return utf16leSlice(this, start, end);
      default:
        if (loweredCase)
          throw new TypeError("Unknown encoding: " + encoding);
        encoding = (encoding + "").toLowerCase();
        loweredCase = true;
    }
  }
}
function swap$1(b, n2, m) {
  var i = b[n2];
  b[n2] = b[m];
  b[m] = i;
}
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  if (buffer.length === 0)
    return -1;
  if (typeof byteOffset === "string") {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 2147483647) {
    byteOffset = 2147483647;
  } else if (byteOffset < -2147483648) {
    byteOffset = -2147483648;
  }
  byteOffset = +byteOffset;
  if (isNaN(byteOffset)) {
    byteOffset = dir ? 0 : buffer.length - 1;
  }
  if (byteOffset < 0)
    byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir)
      return -1;
    else
      byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir)
      byteOffset = 0;
    else
      return -1;
  }
  if (typeof val === "string") {
    val = Buffer2.from(val, encoding);
  }
  if (internalIsBuffer(val)) {
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === "number") {
    val = val & 255;
    if (Buffer2.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }
  throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;
  if (encoding !== void 0) {
    encoding = String(encoding).toLowerCase();
    if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }
  function read2(buf, i2) {
    if (indexSize === 1) {
      return buf[i2];
    } else {
      return buf.readUInt16BE(i2 * indexSize);
    }
  }
  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read2(arr, i) === read2(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1)
          foundIndex = i;
        if (i - foundIndex + 1 === valLength)
          return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1)
          i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength)
      byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read2(arr, i + j) !== read2(val, j)) {
          found = false;
          break;
        }
      }
      if (found)
        return i;
    }
  }
  return -1;
}
function hexWrite(buf, string2, offset, length2) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length2) {
    length2 = remaining;
  } else {
    length2 = Number(length2);
    if (length2 > remaining) {
      length2 = remaining;
    }
  }
  var strLen = string2.length;
  if (strLen % 2 !== 0)
    throw new TypeError("Invalid hex string");
  if (length2 > strLen / 2) {
    length2 = strLen / 2;
  }
  for (var i = 0; i < length2; ++i) {
    var parsed = parseInt(string2.substr(i * 2, 2), 16);
    if (isNaN(parsed))
      return i;
    buf[offset + i] = parsed;
  }
  return i;
}
function utf8Write(buf, string2, offset, length2) {
  return blitBuffer(utf8ToBytes(string2, buf.length - offset), buf, offset, length2);
}
function asciiWrite(buf, string2, offset, length2) {
  return blitBuffer(asciiToBytes(string2), buf, offset, length2);
}
function latin1Write(buf, string2, offset, length2) {
  return asciiWrite(buf, string2, offset, length2);
}
function base64Write(buf, string2, offset, length2) {
  return blitBuffer(base64ToBytes(string2), buf, offset, length2);
}
function ucs2Write(buf, string2, offset, length2) {
  return blitBuffer(utf16leToBytes(string2, buf.length - offset), buf, offset, length2);
}
function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray(buf);
  } else {
    return fromByteArray(buf.slice(start, end));
  }
}
function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;
      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 128) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 192) === 128) {
            tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
            if (tempCodePoint > 127) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
            tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
            if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
            tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
            if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
              codePoint = tempCodePoint;
            }
          }
      }
    }
    if (codePoint === null) {
      codePoint = 65533;
      bytesPerSequence = 1;
    } else if (codePoint > 65535) {
      codePoint -= 65536;
      res.push(codePoint >>> 10 & 1023 | 55296);
      codePoint = 56320 | codePoint & 1023;
    }
    res.push(codePoint);
    i += bytesPerSequence;
  }
  return decodeCodePointsArray(res);
}
function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints);
  }
  var res = "";
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}
function asciiSlice(buf, start, end) {
  var ret = "";
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 127);
  }
  return ret;
}
function latin1Slice(buf, start, end) {
  var ret = "";
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}
function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0)
    start = 0;
  if (!end || end < 0 || end > len)
    end = len;
  var out = "";
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}
function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = "";
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}
function checkOffset(offset, ext, length2) {
  if (offset % 1 !== 0 || offset < 0)
    throw new RangeError("offset is not uint");
  if (offset + ext > length2)
    throw new RangeError("Trying to access beyond buffer length");
}
function checkInt(buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf))
    throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min)
    throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length)
    throw new RangeError("Index out of range");
}
function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0)
    value = 65535 + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}
function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0)
    value = 4294967295 + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
  }
}
function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length)
    throw new RangeError("Index out of range");
  if (offset < 0)
    throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4);
  }
  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}
function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8);
  }
  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}
function base64clean(str) {
  str = stringtrim(str).replace(INVALID_BASE64_RE, "");
  if (str.length < 2)
    return "";
  while (str.length % 4 !== 0) {
    str = str + "=";
  }
  return str;
}
function stringtrim(str) {
  if (str.trim)
    return str.trim();
  return str.replace(/^\s+|\s+$/g, "");
}
function toHex(n2) {
  if (n2 < 16)
    return "0" + n2.toString(16);
  return n2.toString(16);
}
function utf8ToBytes(string2, units) {
  units = units || Infinity;
  var codePoint;
  var length2 = string2.length;
  var leadSurrogate = null;
  var bytes = [];
  for (var i = 0; i < length2; ++i) {
    codePoint = string2.charCodeAt(i);
    if (codePoint > 55295 && codePoint < 57344) {
      if (!leadSurrogate) {
        if (codePoint > 56319) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
          continue;
        } else if (i + 1 === length2) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
          continue;
        }
        leadSurrogate = codePoint;
        continue;
      }
      if (codePoint < 56320) {
        if ((units -= 3) > -1)
          bytes.push(239, 191, 189);
        leadSurrogate = codePoint;
        continue;
      }
      codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
    } else if (leadSurrogate) {
      if ((units -= 3) > -1)
        bytes.push(239, 191, 189);
    }
    leadSurrogate = null;
    if (codePoint < 128) {
      if ((units -= 1) < 0)
        break;
      bytes.push(codePoint);
    } else if (codePoint < 2048) {
      if ((units -= 2) < 0)
        break;
      bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
    } else if (codePoint < 65536) {
      if ((units -= 3) < 0)
        break;
      bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
    } else if (codePoint < 1114112) {
      if ((units -= 4) < 0)
        break;
      bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
    } else {
      throw new Error("Invalid code point");
    }
  }
  return bytes;
}
function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    byteArray.push(str.charCodeAt(i) & 255);
  }
  return byteArray;
}
function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0)
      break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }
  return byteArray;
}
function base64ToBytes(str) {
  return toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length2) {
  for (var i = 0; i < length2; ++i) {
    if (i + offset >= dst.length || i >= src.length)
      break;
    dst[i + offset] = src[i];
  }
  return i;
}
function isnan(val) {
  return val !== val;
}
function isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
}
function isFastBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
}
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isFastBuffer(obj.slice(0, 0));
}
function encode$2(decoded) {
  var sourceFileIndex = 0;
  var sourceCodeLine = 0;
  var sourceCodeColumn = 0;
  var nameIndex = 0;
  var mappings = "";
  for (var i = 0; i < decoded.length; i++) {
    var line = decoded[i];
    if (i > 0)
      mappings += ";";
    if (line.length === 0)
      continue;
    var generatedCodeColumn = 0;
    var lineMappings = [];
    for (var _i = 0, line_1 = line; _i < line_1.length; _i++) {
      var segment = line_1[_i];
      var segmentMappings = encodeInteger(segment[0] - generatedCodeColumn);
      generatedCodeColumn = segment[0];
      if (segment.length > 1) {
        segmentMappings += encodeInteger(segment[1] - sourceFileIndex) + encodeInteger(segment[2] - sourceCodeLine) + encodeInteger(segment[3] - sourceCodeColumn);
        sourceFileIndex = segment[1];
        sourceCodeLine = segment[2];
        sourceCodeColumn = segment[3];
      }
      if (segment.length === 5) {
        segmentMappings += encodeInteger(segment[4] - nameIndex);
        nameIndex = segment[4];
      }
      lineMappings.push(segmentMappings);
    }
    mappings += lineMappings.join(",");
  }
  return mappings;
}
function encodeInteger(num) {
  var result2 = "";
  num = num < 0 ? -num << 1 | 1 : num << 1;
  do {
    var clamped = num & 31;
    num >>>= 5;
    if (num > 0) {
      clamped |= 32;
    }
    result2 += chars[clamped];
  } while (num > 0);
  return result2;
}
function guessIndent(code) {
  var lines = code.split("\n");
  var tabbed = lines.filter(function(line) {
    return /^\t+/.test(line);
  });
  var spaced = lines.filter(function(line) {
    return /^ {2,}/.test(line);
  });
  if (tabbed.length === 0 && spaced.length === 0) {
    return null;
  }
  if (tabbed.length >= spaced.length) {
    return "	";
  }
  var min = spaced.reduce(function(previous, current) {
    var numSpaces = /^ +/.exec(current)[0].length;
    return Math.min(numSpaces, previous);
  }, Infinity);
  return new Array(min + 1).join(" ");
}
function getRelativePath(from2, to) {
  var fromParts = from2.split(/[/\\]/);
  var toParts = to.split(/[/\\]/);
  fromParts.pop();
  while (fromParts[0] === toParts[0]) {
    fromParts.shift();
    toParts.shift();
  }
  if (fromParts.length) {
    var i = fromParts.length;
    while (i--) {
      fromParts[i] = "..";
    }
  }
  return fromParts.concat(toParts).join("/");
}
function isObject$1(thing) {
  return toString$2.call(thing) === "[object Object]";
}
function getLocator(source) {
  var originalLines = source.split("\n");
  var lineOffsets = [];
  for (var i = 0, pos = 0; i < originalLines.length; i++) {
    lineOffsets.push(pos);
    pos += originalLines[i].length + 1;
  }
  return function locate(index) {
    var i2 = 0;
    var j = lineOffsets.length;
    while (i2 < j) {
      var m = i2 + j >> 1;
      if (index < lineOffsets[m]) {
        j = m;
      } else {
        i2 = m + 1;
      }
    }
    var line = i2 - 1;
    var column = index - lineOffsets[line];
    return { line, column };
  };
}
function normalizeArray(parts, allowAboveRoot) {
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last2 = parts[i];
    if (last2 === ".") {
      parts.splice(i, 1);
    } else if (last2 === "..") {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift("..");
    }
  }
  return parts;
}
function resolve() {
  var resolvedPath = "", resolvedAbsolute = false;
  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path3 = i >= 0 ? arguments[i] : "/";
    if (typeof path3 !== "string") {
      throw new TypeError("Arguments to path.resolve must be strings");
    } else if (!path3) {
      continue;
    }
    resolvedPath = path3 + "/" + resolvedPath;
    resolvedAbsolute = path3.charAt(0) === "/";
  }
  resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
    return !!p;
  }), !resolvedAbsolute).join("/");
  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
}
function normalize(path3) {
  var isPathAbsolute = isAbsolute(path3), trailingSlash = substr(path3, -1) === "/";
  path3 = normalizeArray(filter(path3.split("/"), function(p) {
    return !!p;
  }), !isPathAbsolute).join("/");
  if (!path3 && !isPathAbsolute) {
    path3 = ".";
  }
  if (path3 && trailingSlash) {
    path3 += "/";
  }
  return (isPathAbsolute ? "/" : "") + path3;
}
function isAbsolute(path3) {
  return path3.charAt(0) === "/";
}
function join() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return normalize(filter(paths, function(p, index) {
    if (typeof p !== "string") {
      throw new TypeError("Arguments to path.join must be strings");
    }
    return p;
  }).join("/"));
}
function relative(from2, to) {
  from2 = resolve(from2).substr(1);
  to = resolve(to).substr(1);
  function trim2(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== "")
        break;
    }
    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== "")
        break;
    }
    if (start > end)
      return [];
    return arr.slice(start, end - start + 1);
  }
  var fromParts = trim2(from2.split("/"));
  var toParts = trim2(to.split("/"));
  var length2 = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length2;
  for (var i = 0; i < length2; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }
  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push("..");
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join("/");
}
function dirname(path3) {
  var result2 = splitPath(path3), root2 = result2[0], dir = result2[1];
  if (!root2 && !dir) {
    return ".";
  }
  if (dir) {
    dir = dir.substr(0, dir.length - 1);
  }
  return root2 + dir;
}
function basename(path3, ext) {
  var f = splitPath(path3)[2];
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
}
function extname(path3) {
  return splitPath(path3)[3];
}
function filter(xs, f) {
  if (xs.filter)
    return xs.filter(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    if (f(xs[i], i, xs))
      res.push(xs[i]);
  }
  return res;
}
function error(type) {
  throw new RangeError(errors[type]);
}
function map(array, fn) {
  var length2 = array.length;
  var result2 = [];
  while (length2--) {
    result2[length2] = fn(array[length2]);
  }
  return result2;
}
function mapDomain(string2, fn) {
  var parts = string2.split("@");
  var result2 = "";
  if (parts.length > 1) {
    result2 = parts[0] + "@";
    string2 = parts[1];
  }
  string2 = string2.replace(regexSeparators, ".");
  var labels = string2.split(".");
  var encoded = map(labels, fn).join(".");
  return result2 + encoded;
}
function ucs2decode(string2) {
  var output = [], counter = 0, length2 = string2.length, value, extra;
  while (counter < length2) {
    value = string2.charCodeAt(counter++);
    if (value >= 55296 && value <= 56319 && counter < length2) {
      extra = string2.charCodeAt(counter++);
      if ((extra & 64512) == 56320) {
        output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
      } else {
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
}
function digitToBasic(digit, flag) {
  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
}
function adapt(delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
    delta = floor(delta / baseMinusTMin);
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
}
function encode$3(input2) {
  var n2, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
  input2 = ucs2decode(input2);
  inputLength = input2.length;
  n2 = initialN;
  delta = 0;
  bias = initialBias;
  for (j = 0; j < inputLength; ++j) {
    currentValue = input2[j];
    if (currentValue < 128) {
      output.push(stringFromCharCode(currentValue));
    }
  }
  handledCPCount = basicLength = output.length;
  if (basicLength) {
    output.push(delimiter$1);
  }
  while (handledCPCount < inputLength) {
    for (m = maxInt, j = 0; j < inputLength; ++j) {
      currentValue = input2[j];
      if (currentValue >= n2 && currentValue < m) {
        m = currentValue;
      }
    }
    handledCPCountPlusOne = handledCPCount + 1;
    if (m - n2 > floor((maxInt - delta) / handledCPCountPlusOne)) {
      error("overflow");
    }
    delta += (m - n2) * handledCPCountPlusOne;
    n2 = m;
    for (j = 0; j < inputLength; ++j) {
      currentValue = input2[j];
      if (currentValue < n2 && ++delta > maxInt) {
        error("overflow");
      }
      if (currentValue == n2) {
        for (q = delta, k = base; ; k += base) {
          t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
          if (q < t) {
            break;
          }
          qMinusT = q - t;
          baseMinusT = base - t;
          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
          q = floor(qMinusT / baseMinusT);
        }
        output.push(stringFromCharCode(digitToBasic(q, 0)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }
    ++delta;
    ++n2;
  }
  return output.join("");
}
function toASCII(input2) {
  return mapDomain(input2, function(string2) {
    return regexNonASCII.test(string2) ? "xn--" + encode$3(string2) : string2;
  });
}
function defaultSetTimout() {
  throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
  throw new Error("clearTimeout has not been defined");
}
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    return setTimeout(fun, 0);
  }
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e2) {
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    return clearTimeout(marker);
  }
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      return cachedClearTimeout.call(null, marker);
    } catch (e2) {
      return cachedClearTimeout.call(this, marker);
    }
  }
}
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
function nextTick(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
function noop() {
}
function binding(name) {
  throw new Error("process.binding is not supported");
}
function cwd() {
  return "/";
}
function chdir(dir) {
  throw new Error("process.chdir is not supported");
}
function umask() {
  return 0;
}
function hrtime(previousTimestamp) {
  var clocktime = performanceNow.call(performance) * 1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds, nanoseconds];
}
function uptime() {
  var currentTime = new Date();
  var dif = currentTime - startTime;
  return dif / 1e3;
}
function format(f) {
  if (!isString$1(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect2(arguments[i]));
    }
    return objects.join(" ");
  }
  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x2) {
    if (x2 === "%%")
      return "%";
    if (i >= len)
      return x2;
    switch (x2) {
      case "%s":
        return String(args[i++]);
      case "%d":
        return Number(args[i++]);
      case "%j":
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return "[Circular]";
        }
      default:
        return x2;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject$2(x)) {
      str += " " + x;
    } else {
      str += " " + inspect2(x);
    }
  }
  return str;
}
function deprecate(fn, msg) {
  if (isUndefined(global2.process)) {
    return function() {
      return deprecate(fn, msg).apply(this, arguments);
    };
  }
  if (browser$1.noDeprecation === true) {
    return fn;
  }
  var warned2 = false;
  function deprecated() {
    if (!warned2) {
      if (browser$1.throwDeprecation) {
        throw new Error(msg);
      } else if (browser$1.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned2 = true;
    }
    return fn.apply(this, arguments);
  }
  return deprecated;
}
function debuglog(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = browser$1.env.NODE_DEBUG || "";
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
      var pid = 0;
      debugs[set] = function() {
        var msg = format.apply(null, arguments);
        console.error("%s %d: %s", set, pid, msg);
      };
    } else {
      debugs[set] = function() {
      };
    }
  }
  return debugs[set];
}
function inspect2(obj, opts) {
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  if (arguments.length >= 3)
    ctx.depth = arguments[2];
  if (arguments.length >= 4)
    ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    ctx.showHidden = opts;
  } else if (opts) {
    _extend(ctx, opts);
  }
  if (isUndefined(ctx.showHidden))
    ctx.showHidden = false;
  if (isUndefined(ctx.depth))
    ctx.depth = 2;
  if (isUndefined(ctx.colors))
    ctx.colors = false;
  if (isUndefined(ctx.customInspect))
    ctx.customInspect = true;
  if (ctx.colors)
    ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
function stylizeWithColor(str, styleType) {
  var style = inspect2.styles[styleType];
  if (style) {
    return "\x1B[" + inspect2.colors[style][0] + "m" + str + "\x1B[" + inspect2.colors[style][1] + "m";
  } else {
    return str;
  }
}
function stylizeNoColor(str, styleType) {
  return str;
}
function arrayToHash(array) {
  var hash = {};
  array.forEach(function(val, idx) {
    hash[val] = true;
  });
  return hash;
}
function formatValue(ctx, value, recurseTimes) {
  if (ctx.customInspect && value && isFunction$1(value.inspect) && value.inspect !== inspect2 && !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString$1(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);
  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }
  if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
    return formatError(value);
  }
  if (keys.length === 0) {
    if (isFunction$1(value)) {
      var name = value.name ? ": " + value.name : "";
      return ctx.stylize("[Function" + name + "]", "special");
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), "date");
    }
    if (isError(value)) {
      return formatError(value);
    }
  }
  var base2 = "", array = false, braces = ["{", "}"];
  if (isArray$2(value)) {
    array = true;
    braces = ["[", "]"];
  }
  if (isFunction$1(value)) {
    var n2 = value.name ? ": " + value.name : "";
    base2 = " [Function" + n2 + "]";
  }
  if (isRegExp(value)) {
    base2 = " " + RegExp.prototype.toString.call(value);
  }
  if (isDate(value)) {
    base2 = " " + Date.prototype.toUTCString.call(value);
  }
  if (isError(value)) {
    base2 = " " + formatError(value);
  }
  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base2 + braces[1];
  }
  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
    } else {
      return ctx.stylize("[Object]", "special");
    }
  }
  ctx.seen.push(value);
  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }
  ctx.seen.pop();
  return reduceToSingleString(output, base2, braces);
}
function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize("undefined", "undefined");
  if (isString$1(value)) {
    var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
    return ctx.stylize(simple, "string");
  }
  if (isNumber(value))
    return ctx.stylize("" + value, "number");
  if (isBoolean(value))
    return ctx.stylize("" + value, "boolean");
  if (isNull(value))
    return ctx.stylize("null", "null");
}
function formatError(value) {
  return "[" + Error.prototype.toString.call(value) + "]";
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty$1(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push("");
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize("[Getter/Setter]", "special");
    } else {
      str = ctx.stylize("[Getter]", "special");
    }
  } else {
    if (desc.set) {
      str = ctx.stylize("[Setter]", "special");
    }
  }
  if (!hasOwnProperty$1(visibleKeys, key)) {
    name = "[" + key + "]";
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf("\n") > -1) {
        if (array) {
          str = str.split("\n").map(function(line) {
            return "  " + line;
          }).join("\n").substr(2);
        } else {
          str = "\n" + str.split("\n").map(function(line) {
            return "   " + line;
          }).join("\n");
        }
      }
    } else {
      str = ctx.stylize("[Circular]", "special");
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify("" + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, "name");
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, "string");
    }
  }
  return name + ": " + str;
}
function reduceToSingleString(output, base2, braces) {
  var length2 = output.reduce(function(prev, cur) {
    if (cur.indexOf("\n") >= 0)
      ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
  }, 0);
  if (length2 > 60) {
    return braces[0] + (base2 === "" ? "" : base2 + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
  }
  return braces[0] + base2 + " " + output.join(", ") + " " + braces[1];
}
function isArray$2(ar) {
  return Array.isArray(ar);
}
function isBoolean(arg) {
  return typeof arg === "boolean";
}
function isNull(arg) {
  return arg === null;
}
function isNullOrUndefined(arg) {
  return arg == null;
}
function isNumber(arg) {
  return typeof arg === "number";
}
function isString$1(arg) {
  return typeof arg === "string";
}
function isSymbol$1(arg) {
  return typeof arg === "symbol";
}
function isUndefined(arg) {
  return arg === void 0;
}
function isRegExp(re) {
  return isObject$2(re) && objectToString$1(re) === "[object RegExp]";
}
function isObject$2(arg) {
  return typeof arg === "object" && arg !== null;
}
function isDate(d) {
  return isObject$2(d) && objectToString$1(d) === "[object Date]";
}
function isError(e) {
  return isObject$2(e) && (objectToString$1(e) === "[object Error]" || e instanceof Error);
}
function isFunction$1(arg) {
  return typeof arg === "function";
}
function isPrimitive(arg) {
  return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
}
function isBuffer$1(maybeBuf) {
  return Buffer2.isBuffer(maybeBuf);
}
function objectToString$1(o) {
  return Object.prototype.toString.call(o);
}
function pad$1(n2) {
  return n2 < 10 ? "0" + n2.toString(10) : n2.toString(10);
}
function timestamp() {
  var d = new Date();
  var time = [
    pad$1(d.getHours()),
    pad$1(d.getMinutes()),
    pad$1(d.getSeconds())
  ].join(":");
  return [d.getDate(), months[d.getMonth()], time].join(" ");
}
function log() {
  console.log("%s - %s", timestamp(), format.apply(null, arguments));
}
function _extend(origin, add2) {
  if (!add2 || !isObject$2(add2))
    return origin;
  var keys = Object.keys(add2);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add2[keys[i]];
  }
  return origin;
}
function hasOwnProperty$1(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
function hasOwnProperty$2(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
function stringifyPrimitive(v) {
  switch (typeof v) {
    case "string":
      return v;
    case "boolean":
      return v ? "true" : "false";
    case "number":
      return isFinite(v) ? v : "";
    default:
      return "";
  }
}
function stringify(obj, sep2, eq, name) {
  sep2 = sep2 || "&";
  eq = eq || "=";
  if (obj === null) {
    obj = void 0;
  }
  if (typeof obj === "object") {
    return map$1(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray$3(obj[k])) {
        return map$1(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep2);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep2);
  }
  if (!name)
    return "";
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
}
function map$1(xs, f) {
  if (xs.map)
    return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}
function parse$2(qs, sep2, eq, options) {
  sep2 = sep2 || "&";
  eq = eq || "=";
  var obj = {};
  if (typeof qs !== "string" || qs.length === 0) {
    return obj;
  }
  var regexp = /\+/g;
  qs = qs.split(sep2);
  var maxKeys = 1e3;
  if (options && typeof options.maxKeys === "number") {
    maxKeys = options.maxKeys;
  }
  var len = qs.length;
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }
  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = "";
    }
    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);
    if (!hasOwnProperty$2(obj, k)) {
      obj[k] = v;
    } else if (isArray$3(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }
  return obj;
}
function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}
function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && isObject$2(url) && url instanceof Url)
    return url;
  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}
function parse$3(self2, url, parseQueryString, slashesDenoteHost) {
  if (!isString$1(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }
  var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, "/");
  url = uSplit.join(splitter);
  var rest = url;
  rest = rest.trim();
  if (!slashesDenoteHost && url.split("#").length === 1) {
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      self2.path = rest;
      self2.href = rest;
      self2.pathname = simplePath[1];
      if (simplePath[2]) {
        self2.search = simplePath[2];
        if (parseQueryString) {
          self2.query = parse$2(self2.search.substr(1));
        } else {
          self2.query = self2.search.substr(1);
        }
      } else if (parseQueryString) {
        self2.search = "";
        self2.query = {};
      }
      return self2;
    }
  }
  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    self2.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === "//";
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      self2.slashes = true;
    }
  }
  var i, hec, l, p;
  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    var hostEnd = -1;
    for (i = 0; i < hostEndingChars.length; i++) {
      hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    var auth, atSign;
    if (hostEnd === -1) {
      atSign = rest.lastIndexOf("@");
    } else {
      atSign = rest.lastIndexOf("@", hostEnd);
    }
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      self2.auth = decodeURIComponent(auth);
    }
    hostEnd = -1;
    for (i = 0; i < nonHostChars.length; i++) {
      hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    if (hostEnd === -1)
      hostEnd = rest.length;
    self2.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);
    parseHost(self2);
    self2.hostname = self2.hostname || "";
    var ipv6Hostname = self2.hostname[0] === "[" && self2.hostname[self2.hostname.length - 1] === "]";
    if (!ipv6Hostname) {
      var hostparts = self2.hostname.split(/\./);
      for (i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part)
          continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = "";
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              newpart += "x";
            } else {
              newpart += part[j];
            }
          }
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = "/" + notHost.join(".") + rest;
            }
            self2.hostname = validParts.join(".");
            break;
          }
        }
      }
    }
    if (self2.hostname.length > hostnameMaxLen) {
      self2.hostname = "";
    } else {
      self2.hostname = self2.hostname.toLowerCase();
    }
    if (!ipv6Hostname) {
      self2.hostname = toASCII(self2.hostname);
    }
    p = self2.port ? ":" + self2.port : "";
    var h = self2.hostname || "";
    self2.host = h + p;
    self2.href += self2.host;
    if (ipv6Hostname) {
      self2.hostname = self2.hostname.substr(1, self2.hostname.length - 2);
      if (rest[0] !== "/") {
        rest = "/" + rest;
      }
    }
  }
  if (!unsafeProtocol[lowerProto]) {
    for (i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }
  var hash = rest.indexOf("#");
  if (hash !== -1) {
    self2.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf("?");
  if (qm !== -1) {
    self2.search = rest.substr(qm);
    self2.query = rest.substr(qm + 1);
    if (parseQueryString) {
      self2.query = parse$2(self2.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    self2.search = "";
    self2.query = {};
  }
  if (rest)
    self2.pathname = rest;
  if (slashedProtocol[lowerProto] && self2.hostname && !self2.pathname) {
    self2.pathname = "/";
  }
  if (self2.pathname || self2.search) {
    p = self2.pathname || "";
    var s = self2.search || "";
    self2.path = p + s;
  }
  self2.href = format$1(self2);
  return self2;
}
function urlFormat(obj) {
  if (isString$1(obj))
    obj = parse$3({}, obj);
  return format$1(obj);
}
function format$1(self2) {
  var auth = self2.auth || "";
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ":");
    auth += "@";
  }
  var protocol = self2.protocol || "", pathname = self2.pathname || "", hash = self2.hash || "", host = false, query = "";
  if (self2.host) {
    host = auth + self2.host;
  } else if (self2.hostname) {
    host = auth + (self2.hostname.indexOf(":") === -1 ? self2.hostname : "[" + this.hostname + "]");
    if (self2.port) {
      host += ":" + self2.port;
    }
  }
  if (self2.query && isObject$2(self2.query) && Object.keys(self2.query).length) {
    query = stringify(self2.query);
  }
  var search = self2.search || query && "?" + query || "";
  if (protocol && protocol.substr(-1) !== ":")
    protocol += ":";
  if (self2.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = "//" + (host || "");
    if (pathname && pathname.charAt(0) !== "/")
      pathname = "/" + pathname;
  } else if (!host) {
    host = "";
  }
  if (hash && hash.charAt(0) !== "#")
    hash = "#" + hash;
  if (search && search.charAt(0) !== "?")
    search = "?" + search;
  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace("#", "%23");
  return protocol + host + pathname + search + hash;
}
function urlResolve(source, relative2) {
  return urlParse(source, false, true).resolve(relative2);
}
function urlResolveObject(source, relative2) {
  if (!source)
    return relative2;
  return urlParse(source, false, true).resolveObject(relative2);
}
function parseHost(self2) {
  var host = self2.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ":") {
      self2.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host)
    self2.hostname = host;
}
function isRelativeUrl(url) {
  const firstChar = url.charAt(0);
  return firstChar === "." || firstChar === "~" || firstChar === "@";
}
function isExternalUrl(url) {
  return externalRE.test(url);
}
function isDataUrl(url) {
  return dataUrlRE.test(url);
}
function parseUrl(url) {
  const firstChar = url.charAt(0);
  if (firstChar === "~") {
    const secondChar = url.charAt(1);
    url = url.slice(secondChar === "/" ? 2 : 1);
  }
  return parseUriParts(url);
}
function parseUriParts(urlString) {
  return urlParse(isString(urlString) ? urlString : "", false, true);
}
function getImportsExpressionExp(path3, hash, loc, context) {
  if (path3) {
    let name;
    let exp;
    const existingIndex = context.imports.findIndex((i) => i.path === path3);
    if (existingIndex > -1) {
      name = `_imports_${existingIndex}`;
      exp = context.imports[existingIndex].exp;
    } else {
      name = `_imports_${context.imports.length}`;
      exp = createSimpleExpression(name, false, loc, 3);
      context.imports.push({ exp, path: path3 });
    }
    if (!hash) {
      return exp;
    }
    const hashExp = `${name} + '${hash}'`;
    const existingHoistIndex = context.hoists.findIndex((h) => {
      return h && h.type === 4 && !h.isStatic && h.content === hashExp;
    });
    if (existingHoistIndex > -1) {
      return createSimpleExpression(`_hoisted_${existingHoistIndex + 1}`, false, loc, 3);
    }
    return context.hoist(createSimpleExpression(hashExp, false, loc, 3));
  } else {
    return createSimpleExpression(`''`, false, loc, 3);
  }
}
function ssrProcessIf(node2, context, disableNestedFragments = false) {
  const [rootBranch] = node2.branches;
  const ifStatement = createIfStatement(rootBranch.condition, processIfBranch(rootBranch, context, disableNestedFragments));
  context.pushStatement(ifStatement);
  let currentIf = ifStatement;
  for (let i = 1; i < node2.branches.length; i++) {
    const branch = node2.branches[i];
    const branchBlockStatement = processIfBranch(branch, context, disableNestedFragments);
    if (branch.condition) {
      currentIf = currentIf.alternate = createIfStatement(branch.condition, branchBlockStatement);
    } else {
      currentIf.alternate = branchBlockStatement;
    }
  }
  if (!currentIf.alternate) {
    currentIf.alternate = createBlockStatement([
      createCallExpression(`_push`, ["`<!---->`"])
    ]);
  }
}
function processIfBranch(branch, context, disableNestedFragments = false) {
  const { children } = branch;
  const needFragmentWrapper = !disableNestedFragments && (children.length !== 1 || children[0].type !== 1) && !(children.length === 1 && children[0].type === 11);
  return processChildrenAsStatement(children, context, needFragmentWrapper);
}
function ssrProcessFor(node2, context, disableNestedFragments = false) {
  const needFragmentWrapper = !disableNestedFragments && (node2.children.length !== 1 || node2.children[0].type !== 1);
  const renderLoop = createFunctionExpression(createForLoopParams(node2.parseResult));
  renderLoop.body = processChildrenAsStatement(node2.children, context, needFragmentWrapper);
  if (!disableNestedFragments) {
    context.pushStringPart(`<!--[-->`);
  }
  context.pushStatement(createCallExpression(context.helper(SSR_RENDER_LIST), [
    node2.source,
    renderLoop
  ]));
  if (!disableNestedFragments) {
    context.pushStringPart(`<!--]-->`);
  }
}
function ssrProcessSlotOutlet(node2, context) {
  const renderCall = node2.ssrCodegenNode;
  if (node2.children.length) {
    const fallbackRenderFn = createFunctionExpression([]);
    fallbackRenderFn.body = processChildrenAsStatement(node2.children, context);
    renderCall.arguments[3] = fallbackRenderFn;
  }
  if (context.withSlotScopeId) {
    const slotScopeId = renderCall.arguments[6];
    renderCall.arguments[6] = slotScopeId ? `${slotScopeId} + _scopeId` : `_scopeId`;
  }
  context.pushStatement(node2.ssrCodegenNode);
}
function createSSRCompilerError(code, loc) {
  return createCompilerError(code, loc, SSRErrorMessages);
}
function ssrProcessTeleport(node2, context) {
  const targetProp = findProp(node2, "to");
  if (!targetProp) {
    context.onError(createSSRCompilerError(62, node2.loc));
    return;
  }
  let target;
  if (targetProp.type === 6) {
    target = targetProp.value && createSimpleExpression(targetProp.value.content, true);
  } else {
    target = targetProp.exp;
  }
  if (!target) {
    context.onError(createSSRCompilerError(62, targetProp.loc));
    return;
  }
  const disabledProp = findProp(node2, "disabled", false, true);
  const disabled = disabledProp ? disabledProp.type === 6 ? `true` : disabledProp.exp || `false` : `false`;
  const contentRenderFn = createFunctionExpression([`_push`], void 0, true, false, node2.loc);
  contentRenderFn.body = processChildrenAsStatement(node2.children, context);
  context.pushStatement(createCallExpression(context.helper(SSR_RENDER_TELEPORT), [
    `_push`,
    contentRenderFn,
    target,
    disabled,
    `_parent`
  ]));
}
function ssrTransformSuspense(node2, context) {
  return () => {
    if (node2.children.length) {
      const wipEntry = {
        slotsExp: null,
        wipSlots: []
      };
      wipMap.set(node2, wipEntry);
      wipEntry.slotsExp = buildSlots(node2, context, (_props, children, loc) => {
        const fn = createFunctionExpression([], void 0, true, false, loc);
        wipEntry.wipSlots.push({
          fn,
          children
        });
        return fn;
      }).slots;
    }
  };
}
function ssrProcessSuspense(node2, context) {
  const wipEntry = wipMap.get(node2);
  if (!wipEntry) {
    return;
  }
  const { slotsExp, wipSlots } = wipEntry;
  for (let i = 0; i < wipSlots.length; i++) {
    const { fn, children } = wipSlots[i];
    fn.body = processChildrenAsStatement(children, context);
  }
  context.pushStatement(createCallExpression(context.helper(SSR_RENDER_SUSPENSE), [
    `_push`,
    slotsExp
  ]));
}
function ssrProcessTransitionGroup(node2, context) {
  const tag2 = findProp(node2, "tag");
  if (tag2) {
    if (tag2.type === 7) {
      context.pushStringPart(`<`);
      context.pushStringPart(tag2.exp);
      context.pushStringPart(`>`);
      processChildren(node2.children, context, false, true);
      context.pushStringPart(`</`);
      context.pushStringPart(tag2.exp);
      context.pushStringPart(`>`);
    } else {
      context.pushStringPart(`<${tag2.value.content}>`);
      processChildren(node2.children, context, false, true);
      context.pushStringPart(`</${tag2.value.content}>`);
    }
  } else {
    processChildren(node2.children, context, true, true);
  }
}
function buildSSRProps(props, directives, context) {
  let mergePropsArgs = [];
  if (props) {
    if (props.type === 14) {
      mergePropsArgs = props.arguments;
    } else {
      mergePropsArgs.push(props);
    }
  }
  if (directives.length) {
    for (const dir of directives) {
      mergePropsArgs.push(createCallExpression(context.helper(SSR_GET_DIRECTIVE_PROPS), [
        `_ctx`,
        ...buildDirectiveArgs(dir, context).elements
      ]));
    }
  }
  return mergePropsArgs.length > 1 ? createCallExpression(context.helper(MERGE_PROPS), mergePropsArgs) : mergePropsArgs[0];
}
function isTrueFalseValue(prop) {
  if (prop.type === 7) {
    return prop.name === "bind" && prop.arg && isStaticExp(prop.arg) && (prop.arg.content === "true-value" || prop.arg.content === "false-value");
  } else {
    return prop.name === "true-value" || prop.name === "false-value";
  }
}
function isTextareaWithValue(node2, prop) {
  return !!(node2.tag === "textarea" && prop.name === "bind" && isStaticArgOf(prop.arg, "value"));
}
function mergeCall(call, arg) {
  const existing = call.arguments[0];
  if (existing.type === 17) {
    existing.elements.push(arg);
  } else {
    call.arguments[0] = createArrayExpression([existing, arg]);
  }
}
function removeStaticBinding(tag2, binding2) {
  const regExp = new RegExp(`^ ${binding2}=".+"$`);
  const i = tag2.findIndex((e) => typeof e === "string" && regExp.test(e));
  if (i > -1) {
    tag2.splice(i, 1);
  }
}
function findVModel(node2) {
  return node2.props.find((p) => p.type === 7 && p.name === "model" && p.exp);
}
function ssrProcessElement(node2, context) {
  const isVoidTag2 = context.options.isVoidTag || NO;
  const elementsToAdd = node2.ssrCodegenNode.elements;
  for (let j = 0; j < elementsToAdd.length; j++) {
    context.pushStringPart(elementsToAdd[j]);
  }
  if (context.withSlotScopeId) {
    context.pushStringPart(createSimpleExpression(`_scopeId`, false));
  }
  context.pushStringPart(`>`);
  const rawChildren = rawChildrenMap.get(node2);
  if (rawChildren) {
    context.pushStringPart(rawChildren);
  } else if (node2.children.length) {
    processChildren(node2.children, context);
  }
  if (!isVoidTag2(node2.tag)) {
    context.pushStringPart(`</${node2.tag}>`);
  }
}
function ssrProcessComponent(node2, context) {
  const component = componentTypeMap.get(node2);
  if (!node2.ssrCodegenNode) {
    if (component === TELEPORT) {
      return ssrProcessTeleport(node2, context);
    } else if (component === SUSPENSE) {
      return ssrProcessSuspense(node2, context);
    } else if (component === TRANSITION_GROUP) {
      return ssrProcessTransitionGroup(node2, context);
    } else {
      processChildren(node2.children, context);
    }
  } else {
    const wipEntries = wipMap$1.get(node2) || [];
    for (let i = 0; i < wipEntries.length; i++) {
      const { fn, children, vnodeBranch } = wipEntries[i];
      fn.body = createIfStatement(createSimpleExpression(`_push`, false), processChildrenAsStatement(children, context, false, true), vnodeBranch);
    }
    if (context.withSlotScopeId) {
      node2.ssrCodegenNode.arguments.push(`_scopeId`);
    }
    if (typeof component === "string") {
      context.pushStatement(createCallExpression(`_push`, [node2.ssrCodegenNode]));
    } else {
      context.pushStatement(node2.ssrCodegenNode);
    }
  }
}
function createVNodeSlotBranch(props, children, parentContext) {
  const rawOptions = rawOptionsMap.get(parentContext.root);
  const subOptions = Object.assign(Object.assign({}, rawOptions), {
    nodeTransforms: [
      ...vnodeNodeTransforms,
      ...rawOptions.nodeTransforms || []
    ],
    directiveTransforms: Object.assign(Object.assign({}, vnodeDirectiveTransforms), rawOptions.directiveTransforms || {})
  });
  const wrapperNode = {
    type: 1,
    ns: 0,
    tag: "template",
    tagType: 3,
    isSelfClosing: false,
    props: [
      {
        type: 7,
        name: "slot",
        exp: props,
        arg: void 0,
        modifiers: [],
        loc: locStub
      }
    ],
    children,
    loc: locStub,
    codegenNode: void 0
  };
  subTransform(wrapperNode, subOptions, parentContext);
  return createReturnStatement(children);
}
function subTransform(node2, options, parentContext) {
  const childRoot = createRoot([node2]);
  const childContext = createTransformContext(childRoot, options);
  childContext.ssr = false;
  childContext.scopes = Object.assign({}, parentContext.scopes);
  childContext.identifiers = Object.assign({}, parentContext.identifiers);
  childContext.imports = parentContext.imports;
  traverseNode(childRoot, childContext);
  ["helpers", "components", "directives"].forEach((key) => {
    childContext[key].forEach((value, helperKey) => {
      if (key === "helpers") {
        const parentCount = parentContext.helpers.get(helperKey);
        if (parentCount === void 0) {
          parentContext.helpers.set(helperKey, value);
        } else {
          parentContext.helpers.set(helperKey, value + parentCount);
        }
      } else {
        parentContext[key].add(value);
      }
    });
  });
}
function clone3(v) {
  if (isArray(v)) {
    return v.map(clone3);
  } else if (isObject(v)) {
    const res = {};
    for (const key in v) {
      res[key] = clone3(v[key]);
    }
    return res;
  } else {
    return v;
  }
}
function ssrCodegenTransform(ast, options) {
  const context = createSSRTransformContext(ast, options);
  if (options.ssrCssVars) {
    const varsExp = processExpression(createSimpleExpression(options.ssrCssVars, false), createTransformContext(createRoot([]), options));
    context.body.push(createCompoundExpression([`const _cssVars = { style: `, varsExp, `}`]));
  }
  const isFragment2 = ast.children.length > 1 && ast.children.some((c) => !isText(c));
  processChildren(ast.children, context, isFragment2);
  ast.codegenNode = createBlockStatement(context.body);
  ast.ssrHelpers = Array.from(/* @__PURE__ */ new Set([...ast.helpers.filter((h) => h in ssrHelpers), ...context.helpers]));
  ast.helpers = ast.helpers.filter((h) => !(h in ssrHelpers));
}
function createSSRTransformContext(root2, options, helpers = /* @__PURE__ */ new Set(), withSlotScopeId = false) {
  const body = [];
  let currentString = null;
  return {
    root: root2,
    options,
    body,
    helpers,
    withSlotScopeId,
    onError: options.onError || ((e) => {
      throw e;
    }),
    helper(name) {
      helpers.add(name);
      return name;
    },
    pushStringPart(part) {
      if (!currentString) {
        const currentCall = createCallExpression(`_push`);
        body.push(currentCall);
        currentString = createTemplateLiteral([]);
        currentCall.arguments.push(currentString);
      }
      const bufferedElements = currentString.elements;
      const lastItem = bufferedElements[bufferedElements.length - 1];
      if (isString(part) && isString(lastItem)) {
        bufferedElements[bufferedElements.length - 1] += part;
      } else {
        bufferedElements.push(part);
      }
    },
    pushStatement(statement) {
      currentString = null;
      body.push(statement);
    }
  };
}
function createChildContext(parent, withSlotScopeId = parent.withSlotScopeId) {
  return createSSRTransformContext(parent.root, parent.options, parent.helpers, withSlotScopeId);
}
function processChildren(children, context, asFragment = false, disableNestedFragments = false) {
  if (asFragment) {
    context.pushStringPart(`<!--[-->`);
  }
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    switch (child.type) {
      case 1:
        switch (child.tagType) {
          case 0:
            ssrProcessElement(child, context);
            break;
          case 1:
            ssrProcessComponent(child, context);
            break;
          case 2:
            ssrProcessSlotOutlet(child, context);
            break;
          case 3:
            break;
          default:
            context.onError(createSSRCompilerError(63, child.loc));
            const exhaustiveCheck2 = child;
            return exhaustiveCheck2;
        }
        break;
      case 2:
        context.pushStringPart(escapeHtml(child.content));
        break;
      case 3:
        context.pushStringPart(`<!--${child.content}-->`);
        break;
      case 5:
        context.pushStringPart(createCallExpression(context.helper(SSR_INTERPOLATE), [child.content]));
        break;
      case 9:
        ssrProcessIf(child, context, disableNestedFragments);
        break;
      case 11:
        ssrProcessFor(child, context, disableNestedFragments);
        break;
      case 10:
        break;
      case 12:
      case 8:
        break;
      default:
        context.onError(createSSRCompilerError(63, child.loc));
        const exhaustiveCheck = child;
        return exhaustiveCheck;
    }
  }
  if (asFragment) {
    context.pushStringPart(`<!--]-->`);
  }
}
function processChildrenAsStatement(children, parentContext, asFragment = false, withSlotScopeId = parentContext.withSlotScopeId) {
  const childContext = createChildContext(parentContext, withSlotScopeId);
  processChildren(children, childContext, asFragment);
  return createBlockStatement(childContext.body);
}
function findValueBinding(node2) {
  const valueBinding = findProp(node2, "value");
  return valueBinding ? valueBinding.type === 7 ? valueBinding.exp : createSimpleExpression(valueBinding.value.content, true) : createSimpleExpression(`null`, false);
}
function injectFallthroughAttrs(node2) {
  if (node2.type === 1 && (node2.tagType === 0 || node2.tagType === 1) && !findDir(node2, "for")) {
    node2.props.push({
      type: 7,
      name: "bind",
      arg: void 0,
      exp: createSimpleExpression(`_attrs`, false),
      modifiers: [],
      loc: locStub
    });
  }
}
function injectCssVars(node2) {
  if (node2.type === 1 && (node2.tagType === 0 || node2.tagType === 1) && !findDir(node2, "for")) {
    if (isBuiltInType(node2.tag, "Suspense")) {
      for (const child of node2.children) {
        if (child.type === 1 && child.tagType === 3) {
          child.children.forEach(injectCssVars);
        } else {
          injectCssVars(child);
        }
      }
    } else {
      node2.props.push({
        type: 7,
        name: "bind",
        arg: void 0,
        exp: createSimpleExpression(`_cssVars`, false),
        modifiers: [],
        loc: locStub
      });
    }
  }
}
function compile$1(template, options = {}) {
  options = Object.assign(Object.assign(Object.assign({}, options), parserOptions), {
    ssr: true,
    inSSR: true,
    scopeId: options.mode === "function" ? null : options.scopeId,
    prefixIdentifiers: true,
    cacheHandlers: false,
    hoistStatic: false
  });
  const ast = baseParse(template, options);
  rawOptionsMap.set(ast, options);
  transform(ast, Object.assign(Object.assign({}, options), { hoistStatic: false, nodeTransforms: [
    ssrTransformIf,
    ssrTransformFor,
    trackVForSlotScopes,
    transformExpression,
    ssrTransformSlotOutlet,
    ssrInjectFallthroughAttrs,
    ssrInjectCssVars,
    ssrTransformElement,
    ssrTransformComponent,
    trackSlotScopes,
    transformStyle,
    ...options.nodeTransforms || []
  ], directiveTransforms: Object.assign({
    bind: transformBind,
    model: ssrTransformModel,
    show: ssrTransformShow,
    on: noopDirectiveTransform,
    cloak: noopDirectiveTransform,
    once: noopDirectiveTransform,
    memo: noopDirectiveTransform
  }, options.directiveTransforms || {}) }));
  ssrCodegenTransform(ast, options);
  return generate(ast, options);
}
function warnOnce(msg) {
  const isNodeProd = typeof process !== "undefined" && {}.NODE_ENV === "production";
  if (!isNodeProd && true && !hasWarned[msg]) {
    hasWarned[msg] = true;
    warn(msg);
  }
}
function warn(msg) {
  console.warn(`\x1B[1m\x1B[33m[@vue/compiler-sfc]\x1B[0m\x1B[33m ${msg}\x1B[0m
`);
}
function preprocess({ source, filename, preprocessOptions }, preprocessor) {
  let res = "";
  let err = null;
  preprocessor.render(source, Object.assign({ filename }, preprocessOptions), (_err, _res) => {
    if (_err)
      err = _err;
    res = _res;
  });
  if (err)
    throw err;
  return res;
}
function compileTemplate(options) {
  const { preprocessLang, preprocessCustomRequire } = options;
  if (preprocessLang && !preprocessCustomRequire) {
    throw new Error(`[@vue/compiler-sfc] Template preprocessing in the browser build must provide the \`preprocessCustomRequire\` option to return the in-browser version of the preprocessor in the shape of { render(): string }.`);
  }
  const preprocessor = preprocessLang ? preprocessCustomRequire ? preprocessCustomRequire(preprocessLang) : void 0 : false;
  if (preprocessor) {
    try {
      return doCompileTemplate(Object.assign(Object.assign({}, options), { source: preprocess(options, preprocessor) }));
    } catch (e) {
      return {
        code: `export default function render() {}`,
        source: options.source,
        tips: [],
        errors: [e]
      };
    }
  } else if (preprocessLang) {
    return {
      code: `export default function render() {}`,
      source: options.source,
      tips: [
        `Component ${options.filename} uses lang ${preprocessLang} for template. Please install the language preprocessor.`
      ],
      errors: [
        `Component ${options.filename} uses lang ${preprocessLang} for template, however it is not installed.`
      ]
    };
  } else {
    return doCompileTemplate(options);
  }
}
function doCompileTemplate({ filename, id: id2, scoped, slotted, inMap, source, ssr = false, ssrCssVars, isProd = false, compiler = ssr ? CompilerSSR : CompilerDOM, compilerOptions = {}, transformAssetUrls }) {
  const errors2 = [];
  const warnings = [];
  let nodeTransforms = [];
  if (isObject(transformAssetUrls)) {
    const assetOptions = normalizeOptions(transformAssetUrls);
    nodeTransforms = [
      createAssetUrlTransformWithOptions(assetOptions),
      createSrcsetTransformWithOptions(assetOptions)
    ];
  } else if (transformAssetUrls !== false) {
    nodeTransforms = [transformAssetUrl, transformSrcset];
  }
  if (ssr && !ssrCssVars) {
    warnOnce(`compileTemplate is called with \`ssr: true\` but no corresponding \`cssVars\` option.\`.`);
  }
  if (!id2) {
    warnOnce(`compileTemplate now requires the \`id\` option.\`.`);
    id2 = "";
  }
  const shortId = id2.replace(/^data-v-/, "");
  const longId = `data-v-${shortId}`;
  let { code, ast, preamble, map: map2 } = compiler.compile(source, Object.assign(Object.assign({ mode: "module", prefixIdentifiers: true, hoistStatic: true, cacheHandlers: true, ssrCssVars: ssr && ssrCssVars && ssrCssVars.length ? genCssVarsFromList(ssrCssVars, shortId, isProd) : "", scopeId: scoped ? longId : void 0, slotted, sourceMap: true }, compilerOptions), { nodeTransforms: nodeTransforms.concat(compilerOptions.nodeTransforms || []), filename, onError: (e) => errors2.push(e), onWarn: (w) => warnings.push(w) }));
  if (inMap) {
    if (map2) {
      map2 = mapLines(inMap, map2);
    }
    if (errors2.length) {
      patchErrors(errors2, source, inMap);
    }
  }
  const tips = warnings.map((w) => {
    let msg = w.message;
    if (w.loc) {
      msg += `
${generateCodeFrame(source, w.loc.start.offset, w.loc.end.offset)}`;
    }
    return msg;
  });
  return { code, ast, preamble, source, errors: errors2, tips, map: map2 };
}
function mapLines(oldMap, newMap) {
  if (!oldMap)
    return newMap;
  if (!newMap)
    return oldMap;
  const oldMapConsumer = new SourceMapConsumer$1(oldMap);
  const newMapConsumer = new SourceMapConsumer$1(newMap);
  const mergedMapGenerator = new SourceMapGenerator$2();
  newMapConsumer.eachMapping((m) => {
    if (m.originalLine == null) {
      return;
    }
    const origPosInOldMap = oldMapConsumer.originalPositionFor({
      line: m.originalLine,
      column: m.originalColumn
    });
    if (origPosInOldMap.source == null) {
      return;
    }
    mergedMapGenerator.addMapping({
      generated: {
        line: m.generatedLine,
        column: m.generatedColumn
      },
      original: {
        line: origPosInOldMap.line,
        column: m.originalColumn
      },
      source: origPosInOldMap.source,
      name: origPosInOldMap.name
    });
  });
  const generator = mergedMapGenerator;
  oldMapConsumer.sources.forEach((sourceFile) => {
    generator._sources.add(sourceFile);
    const sourceContent = oldMapConsumer.sourceContentFor(sourceFile);
    if (sourceContent != null) {
      mergedMapGenerator.setSourceContent(sourceFile, sourceContent);
    }
  });
  generator._sourceRoot = oldMap.sourceRoot;
  generator._file = oldMap.file;
  return generator.toJSON();
}
function patchErrors(errors2, source, inMap) {
  const originalSource = inMap.sourcesContent[0];
  const offset = originalSource.indexOf(source);
  const lineOffset = originalSource.slice(0, offset).split(/\r?\n/).length - 1;
  errors2.forEach((err) => {
    if (err.loc) {
      err.loc.start.line += lineOffset;
      err.loc.start.offset += offset;
      if (err.loc.end !== err.loc.start) {
        err.loc.end.line += lineOffset;
        err.loc.end.offset += offset;
      }
    }
  });
}
function rewriteDefault(input2, as, parserPlugins) {
  if (!hasDefaultExport(input2)) {
    return input2 + `
const ${as} = {}`;
  }
  let replaced;
  const classMatch = input2.match(exportDefaultClassRE);
  if (classMatch) {
    replaced = input2.replace(exportDefaultClassRE, "$1class $2") + `
const ${as} = ${classMatch[2]}`;
  } else {
    replaced = input2.replace(defaultExportRE, `$1const ${as} =`);
  }
  if (!hasDefaultExport(replaced)) {
    return replaced;
  }
  const s = new MagicString(input2);
  const ast = parse_1(input2, {
    sourceType: "module",
    plugins: parserPlugins
  }).program.body;
  ast.forEach((node2) => {
    if (node2.type === "ExportDefaultDeclaration") {
      s.overwrite(node2.start, node2.declaration.start, `const ${as} = `);
    }
    if (node2.type === "ExportNamedDeclaration") {
      node2.specifiers.forEach((specifier) => {
        if (specifier.type === "ExportSpecifier" && specifier.exported.type === "Identifier" && specifier.exported.name === "default") {
          const end = specifier.end;
          s.overwrite(specifier.start, input2.charAt(end) === "," ? end + 1 : end, ``);
          s.append(`
const ${as} = ${specifier.local.name}`);
        }
      });
    }
  });
  return s.toString();
}
function hasDefaultExport(input2) {
  return defaultExportRE.test(input2) || namedDefaultExportRE.test(input2);
}
function shouldTransform(src) {
  return transformCheckRE.test(src);
}
function transform$1(src, { filename, sourceMap: sourceMap2, parserPlugins, importHelpersFrom = "vue" } = {}) {
  const plugins = parserPlugins || [];
  if (filename) {
    if (/\.tsx?$/.test(filename)) {
      plugins.push("typescript");
    }
    if (filename.endsWith("x")) {
      plugins.push("jsx");
    }
  }
  const ast = parse_1(src, {
    sourceType: "module",
    plugins
  });
  const s = new MagicString(src);
  const res = transformAST(ast.program, s, 0);
  if (res.importedHelpers.length) {
    s.prepend(`import { ${res.importedHelpers.map((h) => `${h} as _${h}`).join(", ")} } from '${importHelpersFrom}'
`);
  }
  return Object.assign(Object.assign({}, res), { code: s.toString(), map: sourceMap2 ? s.generateMap({
    source: filename,
    hires: true,
    includeContent: true
  }) : null });
}
function transformAST(ast, s, offset = 0, knownRefs, knownProps) {
  warnExperimental();
  let convertSymbol = CONVERT_SYMBOL;
  let escapeSymbol = ESCAPE_SYMBOL;
  for (const node2 of ast.body) {
    if (node2.type === "ImportDeclaration" && node2.source.value === "vue/macros") {
      s.remove(node2.start + offset, node2.end + offset);
      for (const specifier of node2.specifiers) {
        if (specifier.type === "ImportSpecifier") {
          const imported = specifier.imported.name;
          const local = specifier.local.name;
          if (local !== imported) {
            if (imported === ESCAPE_SYMBOL) {
              escapeSymbol = local;
            } else if (imported === CONVERT_SYMBOL) {
              convertSymbol = local;
            } else {
              error2(`macro imports for ref-creating methods do not support aliasing.`, specifier);
            }
          }
        }
      }
    }
  }
  const importedHelpers = /* @__PURE__ */ new Set();
  const rootScope = {};
  const scopeStack = [rootScope];
  let currentScope = rootScope;
  let escapeScope;
  const excludedIds = /* @__PURE__ */ new WeakSet();
  const parentStack = [];
  const propsLocalToPublicMap = /* @__PURE__ */ Object.create(null);
  if (knownRefs) {
    for (const key of knownRefs) {
      rootScope[key] = true;
    }
  }
  if (knownProps) {
    for (const key in knownProps) {
      const { local } = knownProps[key];
      rootScope[local] = "prop";
      propsLocalToPublicMap[local] = key;
    }
  }
  function isRefCreationCall(callee) {
    if (callee === convertSymbol) {
      return convertSymbol;
    }
    if (callee[0] === "$" && shorthands.includes(callee.slice(1))) {
      return callee;
    }
    return false;
  }
  function error2(msg, node2) {
    const e = new Error(msg);
    e.node = node2;
    throw e;
  }
  function helper(msg) {
    importedHelpers.add(msg);
    return `_${msg}`;
  }
  function registerBinding2(id2, isRef = false) {
    excludedIds.add(id2);
    if (currentScope) {
      currentScope[id2.name] = isRef;
    } else {
      error2("registerBinding called without active scope, something is wrong.", id2);
    }
  }
  const registerRefBinding = (id2) => registerBinding2(id2, true);
  let tempVarCount = 0;
  function genTempVar() {
    return `__$temp_${++tempVarCount}`;
  }
  function snip2(node2) {
    return s.original.slice(node2.start + offset, node2.end + offset);
  }
  function walkScope(node2, isRoot = false) {
    for (const stmt of node2.body) {
      if (stmt.type === "VariableDeclaration") {
        walkVariableDeclaration(stmt, isRoot);
      } else if (stmt.type === "FunctionDeclaration" || stmt.type === "ClassDeclaration") {
        if (stmt.declare || !stmt.id)
          continue;
        registerBinding2(stmt.id);
      } else if ((stmt.type === "ForOfStatement" || stmt.type === "ForInStatement") && stmt.left.type === "VariableDeclaration") {
        walkVariableDeclaration(stmt.left);
      } else if (stmt.type === "ExportNamedDeclaration" && stmt.declaration && stmt.declaration.type === "VariableDeclaration") {
        walkVariableDeclaration(stmt.declaration, isRoot);
      } else if (stmt.type === "LabeledStatement" && stmt.body.type === "VariableDeclaration") {
        walkVariableDeclaration(stmt.body, isRoot);
      }
    }
  }
  function walkVariableDeclaration(stmt, isRoot = false) {
    if (stmt.declare) {
      return;
    }
    for (const decl of stmt.declarations) {
      let refCall;
      const isCall = decl.init && decl.init.type === "CallExpression" && decl.init.callee.type === "Identifier";
      if (isCall && (refCall = isRefCreationCall(decl.init.callee.name))) {
        processRefDeclaration(refCall, decl.id, decl.init);
      } else {
        const isProps = isRoot && isCall && decl.init.callee.name === "defineProps";
        for (const id2 of extractIdentifiers(decl.id)) {
          if (isProps) {
            excludedIds.add(id2);
          } else {
            registerBinding2(id2);
          }
        }
      }
    }
  }
  function processRefDeclaration(method, id2, call) {
    excludedIds.add(call.callee);
    if (method === convertSymbol) {
      s.remove(call.callee.start + offset, call.callee.end + offset);
      if (id2.type === "Identifier") {
        registerRefBinding(id2);
      } else if (id2.type === "ObjectPattern") {
        processRefObjectPattern(id2, call);
      } else if (id2.type === "ArrayPattern") {
        processRefArrayPattern(id2, call);
      }
    } else {
      if (id2.type === "Identifier") {
        registerRefBinding(id2);
        s.overwrite(call.start + offset, call.start + method.length + offset, helper(method.slice(1)));
      } else {
        error2(`${method}() cannot be used with destructure patterns.`, call);
      }
    }
  }
  function processRefObjectPattern(pattern, call, tempVar, path3 = []) {
    if (!tempVar) {
      tempVar = genTempVar();
      s.overwrite(pattern.start + offset, pattern.end + offset, tempVar);
    }
    for (const p of pattern.properties) {
      let nameId;
      let key;
      let defaultValue;
      if (p.type === "ObjectProperty") {
        if (p.key.start === p.value.start) {
          nameId = p.key;
          if (p.value.type === "Identifier") {
            excludedIds.add(p.value);
          } else if (p.value.type === "AssignmentPattern" && p.value.left.type === "Identifier") {
            excludedIds.add(p.value.left);
            defaultValue = p.value.right;
          }
        } else {
          key = p.computed ? p.key : p.key.name;
          if (p.value.type === "Identifier") {
            nameId = p.value;
          } else if (p.value.type === "ObjectPattern") {
            processRefObjectPattern(p.value, call, tempVar, [...path3, key]);
          } else if (p.value.type === "ArrayPattern") {
            processRefArrayPattern(p.value, call, tempVar, [...path3, key]);
          } else if (p.value.type === "AssignmentPattern") {
            if (p.value.left.type === "Identifier") {
              nameId = p.value.left;
              defaultValue = p.value.right;
            } else if (p.value.left.type === "ObjectPattern") {
              processRefObjectPattern(p.value.left, call, tempVar, [
                ...path3,
                [key, p.value.right]
              ]);
            } else if (p.value.left.type === "ArrayPattern") {
              processRefArrayPattern(p.value.left, call, tempVar, [
                ...path3,
                [key, p.value.right]
              ]);
            } else
              ;
          }
        }
      } else {
        error2(`reactivity destructure does not support rest elements.`, p);
      }
      if (nameId) {
        registerRefBinding(nameId);
        const source = pathToString(tempVar, path3);
        const keyStr = isString(key) ? `'${key}'` : key ? snip2(key) : `'${nameId.name}'`;
        const defaultStr = defaultValue ? `, ${snip2(defaultValue)}` : ``;
        s.appendLeft(call.end + offset, `,
  ${nameId.name} = ${helper("toRef")}(${source}, ${keyStr}${defaultStr})`);
      }
    }
  }
  function processRefArrayPattern(pattern, call, tempVar, path3 = []) {
    if (!tempVar) {
      tempVar = genTempVar();
      s.overwrite(pattern.start + offset, pattern.end + offset, tempVar);
    }
    for (let i = 0; i < pattern.elements.length; i++) {
      const e = pattern.elements[i];
      if (!e)
        continue;
      let nameId;
      let defaultValue;
      if (e.type === "Identifier") {
        nameId = e;
      } else if (e.type === "AssignmentPattern") {
        nameId = e.left;
        defaultValue = e.right;
      } else if (e.type === "RestElement") {
        error2(`reactivity destructure does not support rest elements.`, e);
      } else if (e.type === "ObjectPattern") {
        processRefObjectPattern(e, call, tempVar, [...path3, i]);
      } else if (e.type === "ArrayPattern") {
        processRefArrayPattern(e, call, tempVar, [...path3, i]);
      }
      if (nameId) {
        registerRefBinding(nameId);
        const source = pathToString(tempVar, path3);
        const defaultStr = defaultValue ? `, ${snip2(defaultValue)}` : ``;
        s.appendLeft(call.end + offset, `,
  ${nameId.name} = ${helper("toRef")}(${source}, ${i}${defaultStr})`);
      }
    }
  }
  function pathToString(source, path3) {
    if (path3.length) {
      for (const seg of path3) {
        if (isArray(seg)) {
          source = `(${source}${segToString(seg[0])} || ${snip2(seg[1])})`;
        } else {
          source += segToString(seg);
        }
      }
    }
    return source;
  }
  function segToString(seg) {
    if (typeof seg === "number") {
      return `[${seg}]`;
    } else if (typeof seg === "string") {
      return `.${seg}`;
    } else {
      return snip2(seg);
    }
  }
  function rewriteId(scope, id2, parent, parentStack2) {
    if (hasOwn(scope, id2.name)) {
      const bindingType = scope[id2.name];
      if (bindingType) {
        const isProp = bindingType === "prop";
        if (isStaticProperty(parent) && parent.shorthand) {
          if (!parent.inPattern || isInDestructureAssignment(parent, parentStack2)) {
            if (isProp) {
              if (escapeScope) {
                registerEscapedPropBinding(id2);
                s.appendLeft(id2.end + offset, `: __props_${propsLocalToPublicMap[id2.name]}`);
              } else {
                s.appendLeft(id2.end + offset, `: __props.${propsLocalToPublicMap[id2.name]}`);
              }
            } else {
              s.appendLeft(id2.end + offset, `: ${id2.name}.value`);
            }
          }
        } else {
          if (isProp) {
            if (escapeScope) {
              registerEscapedPropBinding(id2);
              s.overwrite(id2.start + offset, id2.end + offset, `__props_${propsLocalToPublicMap[id2.name]}`);
            } else {
              s.overwrite(id2.start + offset, id2.end + offset, `__props.${propsLocalToPublicMap[id2.name]}`);
            }
          } else {
            s.appendLeft(id2.end + offset, ".value");
          }
        }
      }
      return true;
    }
    return false;
  }
  const propBindingRefs = {};
  function registerEscapedPropBinding(id2) {
    if (!propBindingRefs.hasOwnProperty(id2.name)) {
      propBindingRefs[id2.name] = true;
      const publicKey = propsLocalToPublicMap[id2.name];
      s.prependRight(offset, `const __props_${publicKey} = ${helper(`toRef`)}(__props, '${publicKey}')
`);
    }
  }
  walkScope(ast, true);
  walk$1(ast, {
    enter(node2, parent) {
      parent && parentStack.push(parent);
      if (isFunctionType(node2)) {
        scopeStack.push(currentScope = {});
        walkFunctionParams(node2, registerBinding2);
        if (node2.body.type === "BlockStatement") {
          walkScope(node2.body);
        }
        return;
      }
      if (node2.type === "BlockStatement" && !isFunctionType(parent)) {
        scopeStack.push(currentScope = {});
        walkScope(node2);
        return;
      }
      if (parent && parent.type.startsWith("TS") && parent.type !== "TSAsExpression" && parent.type !== "TSNonNullExpression" && parent.type !== "TSTypeAssertion") {
        return this.skip();
      }
      if (node2.type === "Identifier" && !(escapeScope && rootScope[node2.name] !== "prop") && isReferencedIdentifier(node2, parent, parentStack) && !excludedIds.has(node2)) {
        let i = scopeStack.length;
        while (i--) {
          if (rewriteId(scopeStack[i], node2, parent, parentStack)) {
            return;
          }
        }
      }
      if (node2.type === "CallExpression" && node2.callee.type === "Identifier") {
        const callee = node2.callee.name;
        const refCall = isRefCreationCall(callee);
        if (refCall && (!parent || parent.type !== "VariableDeclarator")) {
          return error2(`${refCall} can only be used as the initializer of a variable declaration.`, node2);
        }
        if (callee === escapeSymbol) {
          s.remove(node2.callee.start + offset, node2.callee.end + offset);
          escapeScope = node2;
        }
        if (callee === "$raw") {
          error2(`$raw() has been replaced by $$(). See ${RFC_LINK} for latest updates.`, node2);
        }
        if (callee === "$fromRef") {
          error2(`$fromRef() has been replaced by $(). See ${RFC_LINK} for latest updates.`, node2);
        }
      }
    },
    leave(node2, parent) {
      parent && parentStack.pop();
      if (node2.type === "BlockStatement" && !isFunctionType(parent) || isFunctionType(node2)) {
        scopeStack.pop();
        currentScope = scopeStack[scopeStack.length - 1] || null;
      }
      if (node2 === escapeScope) {
        escapeScope = void 0;
      }
    }
  });
  return {
    rootRefs: Object.keys(rootScope).filter((key) => rootScope[key] === true),
    importedHelpers: [...importedHelpers]
  };
}
function warnExperimental() {
  if (typeof window !== "undefined") {
    return;
  }
  warnOnce$1(`Reactivity transform is an experimental feature.
Experimental features may change behavior between patch versions.
It is recommended to pin your vue dependencies to exact versions to avoid breakage.
You can follow the proposal's status at ${RFC_LINK}.`);
}
function warnOnce$1(msg) {
  const isNodeProd = typeof process !== "undefined" && {}.NODE_ENV === "production";
  if (!isNodeProd && true && !hasWarned$1[msg]) {
    hasWarned$1[msg] = true;
    warn$1(msg);
  }
}
function warn$1(msg) {
  console.warn(`\x1B[1m\x1B[33m[@vue/reactivity-transform]\x1B[0m\x1B[33m ${msg}\x1B[0m
`);
}
function compileScript(sfc, options) {
  let { script, scriptSetup, source, filename } = sfc;
  const enableReactivityTransform = !!options.reactivityTransform || !!options.refSugar || !!options.refTransform;
  const enablePropsTransform = !!options.reactivityTransform || !!options.propsDestructureTransform;
  const isProd = !!options.isProd;
  const genSourceMap = options.sourceMap !== false;
  let refBindings;
  if (!options.id) {
    warnOnce(`compileScript now requires passing the \`id\` option.
Upgrade your vite or vue-loader version for compatibility with the latest experimental proposals.`);
  }
  const scopeId = options.id ? options.id.replace(/^data-v-/, "") : "";
  const cssVars = sfc.cssVars;
  const scriptLang = script && script.lang;
  const scriptSetupLang = scriptSetup && scriptSetup.lang;
  const isTS = scriptLang === "ts" || scriptLang === "tsx" || scriptSetupLang === "ts" || scriptSetupLang === "tsx";
  const plugins = [];
  if (!isTS || scriptLang === "tsx" || scriptSetupLang === "tsx") {
    plugins.push("jsx");
  }
  if (options.babelParserPlugins)
    plugins.push(...options.babelParserPlugins);
  if (isTS)
    plugins.push("typescript", "decorators-legacy");
  if (!scriptSetup) {
    if (!script) {
      throw new Error(`[@vue/compiler-sfc] SFC contains no <script> tags.`);
    }
    if (scriptLang && !isTS && scriptLang !== "jsx") {
      return script;
    }
    try {
      let content = script.content;
      let map2 = script.map;
      const scriptAst2 = parse_1(content, {
        plugins,
        sourceType: "module"
      }).program;
      const bindings = analyzeScriptBindings(scriptAst2.body);
      if (enableReactivityTransform && shouldTransform(content)) {
        const s2 = new MagicString(source);
        const startOffset2 = script.loc.start.offset;
        const endOffset2 = script.loc.end.offset;
        const { importedHelpers } = transformAST(scriptAst2, s2, startOffset2);
        if (importedHelpers.length) {
          s2.prepend(`import { ${importedHelpers.map((h) => `${h} as _${h}`).join(", ")} } from 'vue'
`);
        }
        s2.remove(0, startOffset2);
        s2.remove(endOffset2, source.length);
        content = s2.toString();
        if (genSourceMap) {
          map2 = s2.generateMap({
            source: filename,
            hires: true,
            includeContent: true
          });
        }
      }
      if (cssVars.length) {
        content = rewriteDefault(content, DEFAULT_VAR, plugins);
        content += genNormalScriptCssVarsCode(cssVars, bindings, scopeId, isProd);
        content += `
export default ${DEFAULT_VAR}`;
      }
      return Object.assign(Object.assign({}, script), {
        content,
        map: map2,
        bindings,
        scriptAst: scriptAst2.body
      });
    } catch (e) {
      return script;
    }
  }
  if (script && scriptLang !== scriptSetupLang) {
    throw new Error(`[@vue/compiler-sfc] <script> and <script setup> must have the same language type.`);
  }
  if (scriptSetupLang && !isTS && scriptSetupLang !== "jsx") {
    return scriptSetup;
  }
  const bindingMetadata = {};
  const helperImports = /* @__PURE__ */ new Set();
  const userImports = /* @__PURE__ */ Object.create(null);
  const userImportAlias = /* @__PURE__ */ Object.create(null);
  const scriptBindings = /* @__PURE__ */ Object.create(null);
  const setupBindings = /* @__PURE__ */ Object.create(null);
  let defaultExport;
  let hasDefinePropsCall = false;
  let hasDefineEmitCall = false;
  let hasDefineExposeCall = false;
  let propsRuntimeDecl;
  let propsRuntimeDefaults;
  let propsDestructureDecl;
  let propsDestructureRestId;
  let propsTypeDecl;
  let propsTypeDeclRaw;
  let propsIdentifier;
  let emitsRuntimeDecl;
  let emitsTypeDecl;
  let emitsTypeDeclRaw;
  let emitIdentifier;
  let hasAwait = false;
  let hasInlinedSsrRenderFn = false;
  const typeDeclaredProps = {};
  const typeDeclaredEmits = /* @__PURE__ */ new Set();
  const declaredTypes = {};
  const propsDestructuredBindings = /* @__PURE__ */ Object.create(null);
  const s = new MagicString(source);
  const startOffset = scriptSetup.loc.start.offset;
  const endOffset = scriptSetup.loc.end.offset;
  const scriptStartOffset = script && script.loc.start.offset;
  const scriptEndOffset = script && script.loc.end.offset;
  function helper(key) {
    helperImports.add(key);
    return `_${key}`;
  }
  function parse2(input2, options2, offset) {
    try {
      return parse_1(input2, options2).program;
    } catch (e) {
      e.message = `[@vue/compiler-sfc] ${e.message}

${sfc.filename}
${generateCodeFrame(source, e.pos + offset, e.pos + offset + 1)}`;
      throw e;
    }
  }
  function error2(msg, node2, end = node2.end + startOffset) {
    throw new Error(`[@vue/compiler-sfc] ${msg}

${sfc.filename}
${generateCodeFrame(source, node2.start + startOffset, end)}`);
  }
  function registerUserImport(source2, local, imported, isType, isFromSetup) {
    if (source2 === "vue" && imported) {
      userImportAlias[imported] = local;
    }
    let isUsedInTemplate = true;
    if (isTS && sfc.template && !sfc.template.src && !sfc.template.lang) {
      isUsedInTemplate = isImportUsed(local, sfc);
    }
    userImports[local] = {
      isType,
      imported: imported || "default",
      source: source2,
      isFromSetup,
      isUsedInTemplate
    };
  }
  function processDefineProps(node2, declId) {
    if (!isCallOf(node2, DEFINE_PROPS)) {
      return false;
    }
    if (hasDefinePropsCall) {
      error2(`duplicate ${DEFINE_PROPS}() call`, node2);
    }
    hasDefinePropsCall = true;
    propsRuntimeDecl = node2.arguments[0];
    if (node2.typeParameters) {
      if (propsRuntimeDecl) {
        error2(`${DEFINE_PROPS}() cannot accept both type and non-type arguments at the same time. Use one or the other.`, node2);
      }
      propsTypeDeclRaw = node2.typeParameters.params[0];
      propsTypeDecl = resolveQualifiedType(propsTypeDeclRaw, (node3) => node3.type === "TSTypeLiteral");
      if (!propsTypeDecl) {
        error2(`type argument passed to ${DEFINE_PROPS}() must be a literal type, or a reference to an interface or literal type.`, propsTypeDeclRaw);
      }
    }
    if (declId) {
      if (enablePropsTransform && declId.type === "ObjectPattern") {
        propsDestructureDecl = declId;
        for (const prop of declId.properties) {
          if (prop.type === "ObjectProperty") {
            if (prop.computed) {
              error2(`${DEFINE_PROPS}() destructure cannot use computed key.`, prop.key);
            }
            const propKey = prop.key.name;
            if (prop.value.type === "AssignmentPattern") {
              const { left, right } = prop.value;
              if (left.type !== "Identifier") {
                error2(`${DEFINE_PROPS}() destructure does not support nested patterns.`, left);
              }
              propsDestructuredBindings[propKey] = {
                local: left.name,
                default: right
              };
            } else if (prop.value.type === "Identifier") {
              propsDestructuredBindings[propKey] = {
                local: prop.value.name
              };
            } else {
              error2(`${DEFINE_PROPS}() destructure does not support nested patterns.`, prop.value);
            }
          } else {
            propsDestructureRestId = prop.argument.name;
          }
        }
      } else {
        propsIdentifier = scriptSetup.content.slice(declId.start, declId.end);
      }
    }
    return true;
  }
  function processWithDefaults(node2, declId) {
    if (!isCallOf(node2, WITH_DEFAULTS)) {
      return false;
    }
    if (processDefineProps(node2.arguments[0], declId)) {
      if (propsRuntimeDecl) {
        error2(`${WITH_DEFAULTS} can only be used with type-based ${DEFINE_PROPS} declaration.`, node2);
      }
      if (propsDestructureDecl) {
        error2(`${WITH_DEFAULTS}() is unnecessary when using destructure with ${DEFINE_PROPS}().
Prefer using destructure default values, e.g. const { foo = 1 } = defineProps(...).`, node2.callee);
      }
      propsRuntimeDefaults = node2.arguments[1];
      if (!propsRuntimeDefaults || propsRuntimeDefaults.type !== "ObjectExpression") {
        error2(`The 2nd argument of ${WITH_DEFAULTS} must be an object literal.`, propsRuntimeDefaults || node2);
      }
    } else {
      error2(`${WITH_DEFAULTS}' first argument must be a ${DEFINE_PROPS} call.`, node2.arguments[0] || node2);
    }
    return true;
  }
  function processDefineEmits(node2, declId) {
    if (!isCallOf(node2, DEFINE_EMITS)) {
      return false;
    }
    if (hasDefineEmitCall) {
      error2(`duplicate ${DEFINE_EMITS}() call`, node2);
    }
    hasDefineEmitCall = true;
    emitsRuntimeDecl = node2.arguments[0];
    if (node2.typeParameters) {
      if (emitsRuntimeDecl) {
        error2(`${DEFINE_EMITS}() cannot accept both type and non-type arguments at the same time. Use one or the other.`, node2);
      }
      emitsTypeDeclRaw = node2.typeParameters.params[0];
      emitsTypeDecl = resolveQualifiedType(emitsTypeDeclRaw, (node3) => node3.type === "TSFunctionType" || node3.type === "TSTypeLiteral");
      if (!emitsTypeDecl) {
        error2(`type argument passed to ${DEFINE_EMITS}() must be a function type, a literal type with call signatures, or a reference to the above types.`, emitsTypeDeclRaw);
      }
    }
    if (declId) {
      emitIdentifier = scriptSetup.content.slice(declId.start, declId.end);
    }
    return true;
  }
  function resolveQualifiedType(node2, qualifier) {
    if (qualifier(node2)) {
      return node2;
    }
    if (node2.type === "TSTypeReference" && node2.typeName.type === "Identifier") {
      const refName = node2.typeName.name;
      const isQualifiedType = (node3) => {
        if (node3.type === "TSInterfaceDeclaration" && node3.id.name === refName) {
          return node3.body;
        } else if (node3.type === "TSTypeAliasDeclaration" && node3.id.name === refName && qualifier(node3.typeAnnotation)) {
          return node3.typeAnnotation;
        } else if (node3.type === "ExportNamedDeclaration" && node3.declaration) {
          return isQualifiedType(node3.declaration);
        }
      };
      const body = scriptAst ? [...scriptSetupAst.body, ...scriptAst.body] : scriptSetupAst.body;
      for (const node3 of body) {
        const qualified = isQualifiedType(node3);
        if (qualified) {
          return qualified;
        }
      }
    }
  }
  function processDefineExpose(node2) {
    if (isCallOf(node2, DEFINE_EXPOSE)) {
      if (hasDefineExposeCall) {
        error2(`duplicate ${DEFINE_EXPOSE}() call`, node2);
      }
      hasDefineExposeCall = true;
      return true;
    }
    return false;
  }
  function checkInvalidScopeReference(node2, method) {
    if (!node2)
      return;
    walkIdentifiers(node2, (id2) => {
      if (setupBindings[id2.name]) {
        error2(`\`${method}()\` in <script setup> cannot reference locally declared variables because it will be hoisted outside of the setup() function. If your component options require initialization in the module scope, use a separate normal <script> to export the options instead.`, id2);
      }
    });
  }
  function processAwait(node2, needSemi, isStatement) {
    const argumentStart = node2.argument.extra && node2.argument.extra.parenthesized ? node2.argument.extra.parenStart : node2.argument.start;
    const argumentStr = source.slice(argumentStart + startOffset, node2.argument.end + startOffset);
    const containsNestedAwait = /\bawait\b/.test(argumentStr);
    s.overwrite(node2.start + startOffset, argumentStart + startOffset, `${needSemi ? `;` : ``}(
  ([__temp,__restore] = ${helper(`withAsyncContext`)}(${containsNestedAwait ? `async ` : ``}() => `);
    s.appendLeft(node2.end + startOffset, `)),
  ${isStatement ? `` : `__temp = `}await __temp,
  __restore()${isStatement ? `` : `,
  __temp`}
)`);
  }
  function hasStaticWithDefaults() {
    return propsRuntimeDefaults && propsRuntimeDefaults.type === "ObjectExpression" && propsRuntimeDefaults.properties.every((node2) => node2.type === "ObjectProperty" && !node2.computed || node2.type === "ObjectMethod");
  }
  function genRuntimeProps(props) {
    const keys = Object.keys(props);
    if (!keys.length) {
      return ``;
    }
    const hasStaticDefaults = hasStaticWithDefaults();
    const scriptSetupSource = scriptSetup.content;
    let propsDecls = `{
    ${keys.map((key) => {
      let defaultString;
      const destructured = genDestructuredDefaultValue(key);
      if (destructured) {
        defaultString = `default: ${destructured}`;
      } else if (hasStaticDefaults) {
        const prop = propsRuntimeDefaults.properties.find((node2) => node2.key.name === key);
        if (prop) {
          if (prop.type === "ObjectProperty") {
            defaultString = `default: ${scriptSetupSource.slice(prop.value.start, prop.value.end)}`;
          } else {
            defaultString = `default() ${scriptSetupSource.slice(prop.body.start, prop.body.end)}`;
          }
        }
      }
      const { type, required } = props[key];
      if (!isProd) {
        return `${key}: { type: ${toRuntimeTypeString(type)}, required: ${required}${defaultString ? `, ${defaultString}` : ``} }`;
      } else if (type.some((el) => el === "Boolean" || defaultString && el === "Function")) {
        return `${key}: { type: ${toRuntimeTypeString(type)}${defaultString ? `, ${defaultString}` : ``} }`;
      } else {
        return `${key}: ${defaultString ? `{ ${defaultString} }` : "null"}`;
      }
    }).join(",\n    ")}
  }`;
    if (propsRuntimeDefaults && !hasStaticDefaults) {
      propsDecls = `${helper("mergeDefaults")}(${propsDecls}, ${source.slice(propsRuntimeDefaults.start + startOffset, propsRuntimeDefaults.end + startOffset)})`;
    }
    return `
  props: ${propsDecls},`;
  }
  function genDestructuredDefaultValue(key) {
    const destructured = propsDestructuredBindings[key];
    if (destructured && destructured.default) {
      const value = scriptSetup.content.slice(destructured.default.start, destructured.default.end);
      const isLiteral = destructured.default.type.endsWith("Literal");
      return isLiteral ? value : `() => ${value}`;
    }
  }
  function genSetupPropsType(node2) {
    const scriptSetupSource = scriptSetup.content;
    if (hasStaticWithDefaults()) {
      let res = `{ `;
      const members = node2.type === "TSTypeLiteral" ? node2.members : node2.body;
      for (const m of members) {
        if ((m.type === "TSPropertySignature" || m.type === "TSMethodSignature") && m.typeAnnotation && m.key.type === "Identifier") {
          if (propsRuntimeDefaults.properties.some((p) => p.key.name === m.key.name)) {
            res += m.key.name + (m.type === "TSMethodSignature" ? "()" : "") + scriptSetupSource.slice(m.typeAnnotation.start, m.typeAnnotation.end) + ", ";
          } else {
            res += scriptSetupSource.slice(m.start, m.typeAnnotation.end) + `, `;
          }
        }
      }
      return (res.length ? res.slice(0, -2) : res) + ` }`;
    } else {
      return scriptSetupSource.slice(node2.start, node2.end);
    }
  }
  let scriptAst;
  if (script) {
    scriptAst = parse2(script.content, {
      plugins,
      sourceType: "module"
    }, scriptStartOffset);
    for (const node2 of scriptAst.body) {
      if (node2.type === "ImportDeclaration") {
        for (const specifier of node2.specifiers) {
          const imported = specifier.type === "ImportSpecifier" && specifier.imported.type === "Identifier" && specifier.imported.name;
          registerUserImport(node2.source.value, specifier.local.name, imported, node2.importKind === "type", false);
        }
      } else if (node2.type === "ExportDefaultDeclaration") {
        defaultExport = node2;
        const start = node2.start + scriptStartOffset;
        const end = node2.declaration.start + scriptStartOffset;
        s.overwrite(start, end, `const ${DEFAULT_VAR} = `);
      } else if (node2.type === "ExportNamedDeclaration") {
        const defaultSpecifier = node2.specifiers.find((s2) => s2.exported.type === "Identifier" && s2.exported.name === "default");
        if (defaultSpecifier) {
          defaultExport = node2;
          if (node2.specifiers.length > 1) {
            s.remove(defaultSpecifier.start + scriptStartOffset, defaultSpecifier.end + scriptStartOffset);
          } else {
            s.remove(node2.start + scriptStartOffset, node2.end + scriptStartOffset);
          }
          if (node2.source) {
            s.prepend(`import { ${defaultSpecifier.local.name} as ${DEFAULT_VAR} } from '${node2.source.value}'
`);
          } else {
            s.appendLeft(scriptEndOffset, `
const ${DEFAULT_VAR} = ${defaultSpecifier.local.name}
`);
          }
        }
        if (node2.declaration) {
          walkDeclaration(node2.declaration, scriptBindings, userImportAlias);
        }
      } else if ((node2.type === "VariableDeclaration" || node2.type === "FunctionDeclaration" || node2.type === "ClassDeclaration" || node2.type === "TSEnumDeclaration") && !node2.declare) {
        walkDeclaration(node2, scriptBindings, userImportAlias);
      }
    }
    if (enableReactivityTransform && shouldTransform(script.content)) {
      const { rootRefs, importedHelpers } = transformAST(scriptAst, s, scriptStartOffset);
      refBindings = rootRefs;
      for (const h of importedHelpers) {
        helperImports.add(h);
      }
    }
    if (scriptStartOffset > startOffset) {
      s.move(scriptStartOffset, scriptEndOffset, 0);
    }
  }
  const scriptSetupAst = parse2(scriptSetup.content, {
    plugins: [
      ...plugins,
      "topLevelAwait"
    ],
    sourceType: "module"
  }, startOffset);
  for (const node2 of scriptSetupAst.body) {
    const start = node2.start + startOffset;
    let end = node2.end + startOffset;
    if (node2.trailingComments && node2.trailingComments.length > 0) {
      const lastCommentNode = node2.trailingComments[node2.trailingComments.length - 1];
      end = lastCommentNode.end + startOffset;
    }
    while (end <= source.length) {
      if (!/\s/.test(source.charAt(end))) {
        break;
      }
      end++;
    }
    if (node2.type === "LabeledStatement" && node2.label.name === "ref" && node2.body.type === "ExpressionStatement") {
      error2(`ref sugar using the label syntax was an experimental proposal and has been dropped based on community feedback. Please check out the new proposal at https://github.com/vuejs/rfcs/discussions/369`, node2);
    }
    if (node2.type === "ImportDeclaration") {
      s.move(start, end, 0);
      let removed = 0;
      const removeSpecifier = (i) => {
        const removeLeft = i > removed;
        removed++;
        const current = node2.specifiers[i];
        const next = node2.specifiers[i + 1];
        s.remove(removeLeft ? node2.specifiers[i - 1].end + startOffset : current.start + startOffset, next && !removeLeft ? next.start + startOffset : current.end + startOffset);
      };
      for (let i = 0; i < node2.specifiers.length; i++) {
        const specifier = node2.specifiers[i];
        const local = specifier.local.name;
        const imported = specifier.type === "ImportSpecifier" && specifier.imported.type === "Identifier" && specifier.imported.name;
        const source2 = node2.source.value;
        const existing = userImports[local];
        if (source2 === "vue" && (imported === DEFINE_PROPS || imported === DEFINE_EMITS || imported === DEFINE_EXPOSE)) {
          warnOnce(`\`${imported}\` is a compiler macro and no longer needs to be imported.`);
          removeSpecifier(i);
        } else if (existing) {
          if (existing.source === source2 && existing.imported === imported) {
            removeSpecifier(i);
          } else {
            error2(`different imports aliased to same local name.`, specifier);
          }
        } else {
          registerUserImport(source2, local, imported, node2.importKind === "type", true);
        }
      }
      if (node2.specifiers.length && removed === node2.specifiers.length) {
        s.remove(node2.start + startOffset, node2.end + startOffset);
      }
    }
    if (node2.type === "ExpressionStatement") {
      if (processDefineProps(node2.expression) || processDefineEmits(node2.expression) || processWithDefaults(node2.expression)) {
        s.remove(node2.start + startOffset, node2.end + startOffset);
      } else if (processDefineExpose(node2.expression)) {
        const callee = node2.expression.callee;
        s.overwrite(callee.start + startOffset, callee.end + startOffset, "expose");
      }
    }
    if (node2.type === "VariableDeclaration" && !node2.declare) {
      const total = node2.declarations.length;
      let left = total;
      for (let i = 0; i < total; i++) {
        const decl = node2.declarations[i];
        if (decl.init) {
          const isDefineProps = processDefineProps(decl.init, decl.id) || processWithDefaults(decl.init, decl.id);
          const isDefineEmits = processDefineEmits(decl.init, decl.id);
          if (isDefineProps || isDefineEmits) {
            if (left === 1) {
              s.remove(node2.start + startOffset, node2.end + startOffset);
            } else {
              let start2 = decl.start + startOffset;
              let end2 = decl.end + startOffset;
              if (i < total - 1) {
                end2 = node2.declarations[i + 1].start + startOffset;
              } else {
                start2 = node2.declarations[i - 1].end + startOffset;
              }
              s.remove(start2, end2);
              left--;
            }
          }
        }
      }
    }
    if ((node2.type === "VariableDeclaration" || node2.type === "FunctionDeclaration" || node2.type === "ClassDeclaration") && !node2.declare) {
      walkDeclaration(node2, setupBindings, userImportAlias);
    }
    if (node2.type === "VariableDeclaration" && !node2.declare || node2.type.endsWith("Statement")) {
      walk$1(node2, {
        enter(child, parent) {
          if (isFunctionType(child)) {
            this.skip();
          }
          if (child.type === "AwaitExpression") {
            hasAwait = true;
            const needsSemi = scriptSetupAst.body.some((n2) => {
              return n2.type === "ExpressionStatement" && n2.start === child.start;
            });
            processAwait(child, needsSemi, parent.type === "ExpressionStatement");
          }
        }
      });
    }
    if (node2.type === "ExportNamedDeclaration" && node2.exportKind !== "type" || node2.type === "ExportAllDeclaration" || node2.type === "ExportDefaultDeclaration") {
      error2(`<script setup> cannot contain ES module exports. If you are using a previous version of <script setup>, please consult the updated RFC at https://github.com/vuejs/rfcs/pull/227.`, node2);
    }
    if (isTS) {
      if (node2.type === "TSEnumDeclaration") {
        registerBinding(setupBindings, node2.id, "setup-const");
      }
      if (node2.type.startsWith("TS") || node2.type === "ExportNamedDeclaration" && node2.exportKind === "type" || node2.type === "VariableDeclaration" && node2.declare) {
        recordType(node2, declaredTypes);
        s.move(start, end, 0);
      }
    }
  }
  if (enableReactivityTransform && (refBindings || shouldTransform(scriptSetup.content)) || propsDestructureDecl) {
    const { rootRefs, importedHelpers } = transformAST(scriptSetupAst, s, startOffset, refBindings, propsDestructuredBindings);
    refBindings = refBindings ? [...refBindings, ...rootRefs] : rootRefs;
    for (const h of importedHelpers) {
      helperImports.add(h);
    }
  }
  if (propsTypeDecl) {
    extractRuntimeProps(propsTypeDecl, typeDeclaredProps, declaredTypes);
  }
  if (emitsTypeDecl) {
    extractRuntimeEmits(emitsTypeDecl, typeDeclaredEmits);
  }
  checkInvalidScopeReference(propsRuntimeDecl, DEFINE_PROPS);
  checkInvalidScopeReference(propsRuntimeDefaults, DEFINE_PROPS);
  checkInvalidScopeReference(propsDestructureDecl, DEFINE_PROPS);
  checkInvalidScopeReference(emitsRuntimeDecl, DEFINE_PROPS);
  if (script) {
    if (startOffset < scriptStartOffset) {
      s.remove(0, startOffset);
      s.remove(endOffset, scriptStartOffset);
      s.remove(scriptEndOffset, source.length);
    } else {
      s.remove(0, scriptStartOffset);
      s.remove(scriptEndOffset, startOffset);
      s.remove(endOffset, source.length);
    }
  } else {
    s.remove(0, startOffset);
    s.remove(endOffset, source.length);
  }
  if (scriptAst) {
    Object.assign(bindingMetadata, analyzeScriptBindings(scriptAst.body));
  }
  if (propsRuntimeDecl) {
    for (const key of getObjectOrArrayExpressionKeys(propsRuntimeDecl)) {
      bindingMetadata[key] = "props";
    }
  }
  for (const key in typeDeclaredProps) {
    bindingMetadata[key] = "props";
  }
  if (propsDestructureDecl) {
    if (propsDestructureRestId) {
      bindingMetadata[propsDestructureRestId] = "setup-const";
    }
    for (const key in propsDestructuredBindings) {
      const { local } = propsDestructuredBindings[key];
      if (local !== key) {
        bindingMetadata[local] = "props-aliased";
        (bindingMetadata.__propsAliases || (bindingMetadata.__propsAliases = {}))[local] = key;
      }
    }
  }
  for (const [key, { isType, imported, source: source2 }] of Object.entries(userImports)) {
    if (isType)
      continue;
    bindingMetadata[key] = imported === "default" && source2.endsWith(".vue") || source2 === "vue" ? "setup-const" : "setup-maybe-ref";
  }
  for (const key in scriptBindings) {
    bindingMetadata[key] = scriptBindings[key];
  }
  for (const key in setupBindings) {
    bindingMetadata[key] = setupBindings[key];
  }
  if (refBindings) {
    for (const key of refBindings) {
      bindingMetadata[key] = "setup-ref";
    }
  }
  if (cssVars.length) {
    helperImports.add(CSS_VARS_HELPER);
    helperImports.add("unref");
    s.prependRight(startOffset, `
${genCssVarsCode(cssVars, bindingMetadata, scopeId, isProd)}
`);
  }
  let args = `__props`;
  if (propsTypeDecl) {
    args += `: any`;
  }
  if (propsIdentifier) {
    s.prependLeft(startOffset, `
const ${propsIdentifier} = __props${propsTypeDecl ? ` as ${genSetupPropsType(propsTypeDecl)}` : ``}
`);
  }
  if (propsDestructureRestId) {
    s.prependLeft(startOffset, `
const ${propsDestructureRestId} = ${helper(`createPropsRestProxy`)}(__props, ${JSON.stringify(Object.keys(propsDestructuredBindings))})
`);
  }
  if (hasAwait) {
    const any = isTS ? `: any` : ``;
    s.prependLeft(startOffset, `
let __temp${any}, __restore${any}
`);
  }
  const destructureElements = hasDefineExposeCall || !options.inlineTemplate ? [`expose`] : [];
  if (emitIdentifier) {
    destructureElements.push(emitIdentifier === `emit` ? `emit` : `emit: ${emitIdentifier}`);
  }
  if (destructureElements.length) {
    args += `, { ${destructureElements.join(", ")} }`;
    if (emitsTypeDecl) {
      args += `: { emit: (${scriptSetup.content.slice(emitsTypeDecl.start, emitsTypeDecl.end)}), expose: any, slots: any, attrs: any }`;
    }
  }
  let returned;
  if (options.inlineTemplate) {
    if (sfc.template && !sfc.template.src) {
      if (options.templateOptions && options.templateOptions.ssr) {
        hasInlinedSsrRenderFn = true;
      }
      const { code, ast, preamble, tips, errors: errors2 } = compileTemplate(Object.assign(Object.assign({ filename, source: sfc.template.content, inMap: sfc.template.map }, options.templateOptions), { id: scopeId, scoped: sfc.styles.some((s2) => s2.scoped), isProd: options.isProd, ssrCssVars: sfc.cssVars, compilerOptions: Object.assign(Object.assign({}, options.templateOptions && options.templateOptions.compilerOptions), {
        inline: true,
        isTS,
        bindingMetadata
      }) }));
      if (tips.length) {
        tips.forEach(warnOnce);
      }
      const err = errors2[0];
      if (typeof err === "string") {
        throw new Error(err);
      } else if (err) {
        if (err.loc) {
          err.message += `

` + sfc.filename + "\n" + generateCodeFrame(source, err.loc.start.offset, err.loc.end.offset) + `
`;
        }
        throw err;
      }
      if (preamble) {
        s.prepend(preamble);
      }
      if (ast && ast.helpers.includes(UNREF)) {
        helperImports.delete("unref");
      }
      returned = code;
    } else {
      returned = `() => {}`;
    }
  } else {
    const allBindings = Object.assign(Object.assign({}, scriptBindings), setupBindings);
    for (const key in userImports) {
      if (!userImports[key].isType && userImports[key].isUsedInTemplate) {
        allBindings[key] = true;
      }
    }
    returned = `{ ${Object.keys(allBindings).join(", ")} }`;
  }
  if (!options.inlineTemplate && true) {
    s.appendRight(endOffset, `
const __returned__ = ${returned}
Object.defineProperty(__returned__, '__isScriptSetup', { enumerable: false, value: true })
return __returned__
}

`);
  } else {
    s.appendRight(endOffset, `
return ${returned}
}

`);
  }
  let runtimeOptions = ``;
  if (hasInlinedSsrRenderFn) {
    runtimeOptions += `
  __ssrInlineRender: true,`;
  }
  if (propsRuntimeDecl) {
    let declCode = scriptSetup.content.slice(propsRuntimeDecl.start, propsRuntimeDecl.end).trim();
    if (propsDestructureDecl) {
      const defaults = [];
      for (const key in propsDestructuredBindings) {
        const d = genDestructuredDefaultValue(key);
        if (d)
          defaults.push(`${key}: ${d}`);
      }
      if (defaults.length) {
        declCode = `${helper(`mergeDefaults`)}(${declCode}, {
  ${defaults.join(",\n  ")}
})`;
      }
    }
    runtimeOptions += `
  props: ${declCode},`;
  } else if (propsTypeDecl) {
    runtimeOptions += genRuntimeProps(typeDeclaredProps);
  }
  if (emitsRuntimeDecl) {
    runtimeOptions += `
  emits: ${scriptSetup.content.slice(emitsRuntimeDecl.start, emitsRuntimeDecl.end).trim()},`;
  } else if (emitsTypeDecl) {
    runtimeOptions += genRuntimeEmits(typeDeclaredEmits);
  }
  const exposeCall = hasDefineExposeCall || options.inlineTemplate ? `` : `  expose();
`;
  if (isTS) {
    const def = defaultExport ? `
  ...${DEFAULT_VAR},` : ``;
    s.prependLeft(startOffset, `
export default /*#__PURE__*/${helper(`defineComponent`)}({${def}${runtimeOptions}
  ${hasAwait ? `async ` : ``}setup(${args}) {
${exposeCall}`);
    s.appendRight(endOffset, `})`);
  } else {
    if (defaultExport) {
      s.prependLeft(startOffset, `
export default /*#__PURE__*/Object.assign(${DEFAULT_VAR}, {${runtimeOptions}
  ${hasAwait ? `async ` : ``}setup(${args}) {
${exposeCall}`);
      s.appendRight(endOffset, `})`);
    } else {
      s.prependLeft(startOffset, `
export default {${runtimeOptions}
  ${hasAwait ? `async ` : ``}setup(${args}) {
${exposeCall}`);
      s.appendRight(endOffset, `}`);
    }
  }
  if (helperImports.size > 0) {
    s.prepend(`import { ${[...helperImports].map((h) => `${h} as _${h}`).join(", ")} } from 'vue'
`);
  }
  s.trim();
  return Object.assign(Object.assign({}, scriptSetup), { bindings: bindingMetadata, imports: userImports, content: s.toString(), map: genSourceMap ? s.generateMap({
    source: filename,
    hires: true,
    includeContent: true
  }) : void 0, scriptAst: scriptAst === null || scriptAst === void 0 ? void 0 : scriptAst.body, scriptSetupAst: scriptSetupAst === null || scriptSetupAst === void 0 ? void 0 : scriptSetupAst.body });
}
function registerBinding(bindings, node2, type) {
  bindings[node2.name] = type;
}
function walkDeclaration(node2, bindings, userImportAlias) {
  if (node2.type === "VariableDeclaration") {
    const isConst = node2.kind === "const";
    for (const { id: id2, init: init3 } of node2.declarations) {
      const isDefineCall = !!(isConst && isCallOf(init3, (c) => c === DEFINE_PROPS || c === DEFINE_EMITS || c === WITH_DEFAULTS));
      if (id2.type === "Identifier") {
        let bindingType;
        const userReactiveBinding = userImportAlias["reactive"] || "reactive";
        if (isCallOf(init3, userReactiveBinding)) {
          bindingType = "setup-let";
        } else if (isDefineCall || isConst && canNeverBeRef(init3, userReactiveBinding)) {
          bindingType = "setup-const";
        } else if (isConst) {
          if (isCallOf(init3, userImportAlias["ref"] || "ref")) {
            bindingType = "setup-ref";
          } else {
            bindingType = "setup-maybe-ref";
          }
        } else {
          bindingType = "setup-let";
        }
        registerBinding(bindings, id2, bindingType);
      } else {
        if (isCallOf(init3, DEFINE_PROPS)) {
          return;
        }
        if (id2.type === "ObjectPattern") {
          walkObjectPattern(id2, bindings, isConst, isDefineCall);
        } else if (id2.type === "ArrayPattern") {
          walkArrayPattern(id2, bindings, isConst, isDefineCall);
        }
      }
    }
  } else if (node2.type === "TSEnumDeclaration" || node2.type === "FunctionDeclaration" || node2.type === "ClassDeclaration") {
    bindings[node2.id.name] = "setup-const";
  }
}
function walkObjectPattern(node2, bindings, isConst, isDefineCall = false) {
  for (const p of node2.properties) {
    if (p.type === "ObjectProperty") {
      if (p.key.type === "Identifier" && p.key === p.value) {
        const type = isDefineCall ? "setup-const" : isConst ? "setup-maybe-ref" : "setup-let";
        registerBinding(bindings, p.key, type);
      } else {
        walkPattern(p.value, bindings, isConst, isDefineCall);
      }
    } else {
      const type = isConst ? "setup-const" : "setup-let";
      registerBinding(bindings, p.argument, type);
    }
  }
}
function walkArrayPattern(node2, bindings, isConst, isDefineCall = false) {
  for (const e of node2.elements) {
    e && walkPattern(e, bindings, isConst, isDefineCall);
  }
}
function walkPattern(node2, bindings, isConst, isDefineCall = false) {
  if (node2.type === "Identifier") {
    const type = isDefineCall ? "setup-const" : isConst ? "setup-maybe-ref" : "setup-let";
    registerBinding(bindings, node2, type);
  } else if (node2.type === "RestElement") {
    const type = isConst ? "setup-const" : "setup-let";
    registerBinding(bindings, node2.argument, type);
  } else if (node2.type === "ObjectPattern") {
    walkObjectPattern(node2, bindings, isConst);
  } else if (node2.type === "ArrayPattern") {
    walkArrayPattern(node2, bindings, isConst);
  } else if (node2.type === "AssignmentPattern") {
    if (node2.left.type === "Identifier") {
      const type = isDefineCall ? "setup-const" : isConst ? "setup-maybe-ref" : "setup-let";
      registerBinding(bindings, node2.left, type);
    } else {
      walkPattern(node2.left, bindings, isConst);
    }
  }
}
function recordType(node2, declaredTypes) {
  if (node2.type === "TSInterfaceDeclaration") {
    declaredTypes[node2.id.name] = [`Object`];
  } else if (node2.type === "TSTypeAliasDeclaration") {
    declaredTypes[node2.id.name] = inferRuntimeType(node2.typeAnnotation, declaredTypes);
  } else if (node2.type === "ExportNamedDeclaration" && node2.declaration) {
    recordType(node2.declaration, declaredTypes);
  }
}
function extractRuntimeProps(node2, props, declaredTypes, isProd) {
  const members = node2.type === "TSTypeLiteral" ? node2.members : node2.body;
  for (const m of members) {
    if ((m.type === "TSPropertySignature" || m.type === "TSMethodSignature") && m.key.type === "Identifier") {
      let type;
      if (m.type === "TSMethodSignature") {
        type = ["Function"];
      } else if (m.typeAnnotation) {
        type = inferRuntimeType(m.typeAnnotation.typeAnnotation, declaredTypes);
      }
      props[m.key.name] = {
        key: m.key.name,
        required: !m.optional,
        type: type || [`null`]
      };
    }
  }
}
function inferRuntimeType(node2, declaredTypes) {
  switch (node2.type) {
    case "TSStringKeyword":
      return ["String"];
    case "TSNumberKeyword":
      return ["Number"];
    case "TSBooleanKeyword":
      return ["Boolean"];
    case "TSObjectKeyword":
      return ["Object"];
    case "TSTypeLiteral":
      return ["Object"];
    case "TSFunctionType":
      return ["Function"];
    case "TSArrayType":
    case "TSTupleType":
      return ["Array"];
    case "TSLiteralType":
      switch (node2.literal.type) {
        case "StringLiteral":
          return ["String"];
        case "BooleanLiteral":
          return ["Boolean"];
        case "NumericLiteral":
        case "BigIntLiteral":
          return ["Number"];
        default:
          return [`null`];
      }
    case "TSTypeReference":
      if (node2.typeName.type === "Identifier") {
        if (declaredTypes[node2.typeName.name]) {
          return declaredTypes[node2.typeName.name];
        }
        switch (node2.typeName.name) {
          case "Array":
          case "Function":
          case "Object":
          case "Set":
          case "Map":
          case "WeakSet":
          case "WeakMap":
          case "Date":
            return [node2.typeName.name];
          case "Record":
          case "Partial":
          case "Readonly":
          case "Pick":
          case "Omit":
          case "Exclude":
          case "Extract":
          case "Required":
          case "InstanceType":
            return ["Object"];
        }
      }
      return [`null`];
    case "TSParenthesizedType":
      return inferRuntimeType(node2.typeAnnotation, declaredTypes);
    case "TSUnionType":
      return [
        ...new Set([].concat(...node2.types.map((t) => inferRuntimeType(t, declaredTypes))))
      ];
    case "TSIntersectionType":
      return ["Object"];
    case "TSSymbolKeyword":
      return ["Symbol"];
    default:
      return [`null`];
  }
}
function toRuntimeTypeString(types2) {
  return types2.length > 1 ? `[${types2.join(", ")}]` : types2[0];
}
function extractRuntimeEmits(node2, emits) {
  if (node2.type === "TSTypeLiteral" || node2.type === "TSInterfaceBody") {
    const members = node2.type === "TSTypeLiteral" ? node2.members : node2.body;
    for (let t of members) {
      if (t.type === "TSCallSignatureDeclaration") {
        extractEventNames(t.parameters[0], emits);
      }
    }
    return;
  } else {
    extractEventNames(node2.parameters[0], emits);
  }
}
function extractEventNames(eventName, emits) {
  if (eventName.type === "Identifier" && eventName.typeAnnotation && eventName.typeAnnotation.type === "TSTypeAnnotation") {
    const typeNode = eventName.typeAnnotation.typeAnnotation;
    if (typeNode.type === "TSLiteralType") {
      if (typeNode.literal.type !== "UnaryExpression") {
        emits.add(String(typeNode.literal.value));
      }
    } else if (typeNode.type === "TSUnionType") {
      for (const t of typeNode.types) {
        if (t.type === "TSLiteralType" && t.literal.type !== "UnaryExpression") {
          emits.add(String(t.literal.value));
        }
      }
    }
  }
}
function genRuntimeEmits(emits) {
  return emits.size ? `
  emits: [${Array.from(emits).map((p) => JSON.stringify(p)).join(", ")}],` : ``;
}
function isCallOf(node2, test) {
  return !!(node2 && node2.type === "CallExpression" && node2.callee.type === "Identifier" && (typeof test === "string" ? node2.callee.name === test : test(node2.callee.name)));
}
function canNeverBeRef(node2, userReactiveImport) {
  if (isCallOf(node2, userReactiveImport)) {
    return true;
  }
  switch (node2.type) {
    case "UnaryExpression":
    case "BinaryExpression":
    case "ArrayExpression":
    case "ObjectExpression":
    case "FunctionExpression":
    case "ArrowFunctionExpression":
    case "UpdateExpression":
    case "ClassExpression":
    case "TaggedTemplateExpression":
      return true;
    case "SequenceExpression":
      return canNeverBeRef(node2.expressions[node2.expressions.length - 1], userReactiveImport);
    default:
      if (node2.type.endsWith("Literal")) {
        return true;
      }
      return false;
  }
}
function analyzeScriptBindings(ast) {
  for (const node2 of ast) {
    if (node2.type === "ExportDefaultDeclaration" && node2.declaration.type === "ObjectExpression") {
      return analyzeBindingsFromOptions(node2.declaration);
    }
  }
  return {};
}
function analyzeBindingsFromOptions(node2) {
  const bindings = {};
  Object.defineProperty(bindings, "__isScriptSetup", {
    enumerable: false,
    value: false
  });
  for (const property of node2.properties) {
    if (property.type === "ObjectProperty" && !property.computed && property.key.type === "Identifier") {
      if (property.key.name === "props") {
        for (const key of getObjectOrArrayExpressionKeys(property.value)) {
          bindings[key] = "props";
        }
      } else if (property.key.name === "inject") {
        for (const key of getObjectOrArrayExpressionKeys(property.value)) {
          bindings[key] = "options";
        }
      } else if (property.value.type === "ObjectExpression" && (property.key.name === "computed" || property.key.name === "methods")) {
        for (const key of getObjectExpressionKeys(property.value)) {
          bindings[key] = "options";
        }
      }
    } else if (property.type === "ObjectMethod" && property.key.type === "Identifier" && (property.key.name === "setup" || property.key.name === "data")) {
      for (const bodyItem of property.body.body) {
        if (bodyItem.type === "ReturnStatement" && bodyItem.argument && bodyItem.argument.type === "ObjectExpression") {
          for (const key of getObjectExpressionKeys(bodyItem.argument)) {
            bindings[key] = property.key.name === "setup" ? "setup-maybe-ref" : "data";
          }
        }
      }
    }
  }
  return bindings;
}
function getObjectExpressionKeys(node2) {
  const keys = [];
  for (const prop of node2.properties) {
    if ((prop.type === "ObjectProperty" || prop.type === "ObjectMethod") && !prop.computed) {
      if (prop.key.type === "Identifier") {
        keys.push(prop.key.name);
      } else if (prop.key.type === "StringLiteral") {
        keys.push(prop.key.value);
      }
    }
  }
  return keys;
}
function getArrayExpressionKeys(node2) {
  const keys = [];
  for (const element of node2.elements) {
    if (element && element.type === "StringLiteral") {
      keys.push(element.value);
    }
  }
  return keys;
}
function getObjectOrArrayExpressionKeys(value) {
  if (value.type === "ArrayExpression") {
    return getArrayExpressionKeys(value);
  }
  if (value.type === "ObjectExpression") {
    return getObjectExpressionKeys(value);
  }
  return [];
}
function resolveTemplateUsageCheckString(sfc) {
  const { content, ast } = sfc.template;
  const cached = templateUsageCheckCache.get(content);
  if (cached) {
    return cached;
  }
  let code = "";
  transform(createRoot([ast]), {
    nodeTransforms: [
      (node2) => {
        if (node2.type === 1) {
          if (!parserOptions.isNativeTag(node2.tag) && !parserOptions.isBuiltInComponent(node2.tag)) {
            code += `,${camelize(node2.tag)},${capitalize(camelize(node2.tag))}`;
          }
          for (let i = 0; i < node2.props.length; i++) {
            const prop = node2.props[i];
            if (prop.type === 7) {
              if (!isBuiltInDir(prop.name)) {
                code += `,v${capitalize(camelize(prop.name))}`;
              }
              if (prop.exp) {
                code += `,${stripStrings(prop.exp.content)}`;
              }
            }
          }
        } else if (node2.type === 5) {
          code += `,${stripStrings(node2.content.content)}`;
        }
      }
    ]
  });
  code += ";";
  templateUsageCheckCache.set(content, code);
  return code;
}
function stripStrings(exp) {
  return exp.replace(/'[^']*'|"[^"]*"/g, "").replace(/`[^`]+`/g, stripTemplateString);
}
function stripTemplateString(str) {
  const interpMatch = str.match(/\${[^}]+}/g);
  if (interpMatch) {
    return interpMatch.map((m) => m.slice(2, -1)).join(",");
  }
  return "";
}
function isImportUsed(local, sfc) {
  return new RegExp(`[^\\w$_]${local.replace(/\$/g, "\\$")}[^\\w$_]`).test(resolveTemplateUsageCheckString(sfc));
}
function hmrShouldReload(prevImports, next) {
  if (!next.scriptSetup || next.scriptSetup.lang !== "ts" && next.scriptSetup.lang !== "tsx") {
    return false;
  }
  for (const key in prevImports) {
    if (!prevImports[key].isUsedInTemplate && isImportUsed(key, next)) {
      return true;
    }
  }
  return false;
}
function parse$4(source, { sourceMap: sourceMap2 = true, filename = "anonymous.vue", sourceRoot = "", pad: pad2 = false, ignoreEmpty = true, compiler = CompilerDOM } = {}) {
  const sourceKey = source + sourceMap2 + filename + sourceRoot + pad2 + compiler.parse;
  const cache = sourceToSFC.get(sourceKey);
  if (cache) {
    return cache;
  }
  const descriptor = {
    filename,
    source,
    template: null,
    script: null,
    scriptSetup: null,
    styles: [],
    customBlocks: [],
    cssVars: [],
    slotted: false,
    shouldForceReload: (prevImports) => hmrShouldReload(prevImports, descriptor)
  };
  const errors2 = [];
  const ast = compiler.parse(source, {
    isNativeTag: () => true,
    isPreTag: () => true,
    getTextMode: ({ tag: tag2, props }, parent) => {
      if (!parent && tag2 !== "template" || tag2 === "template" && props.some((p) => p.type === 6 && p.name === "lang" && p.value && p.value.content && p.value.content !== "html")) {
        return 2;
      } else {
        return 0;
      }
    },
    onError: (e) => {
      errors2.push(e);
    }
  });
  ast.children.forEach((node2) => {
    if (node2.type !== 1) {
      return;
    }
    if (ignoreEmpty && node2.tag !== "template" && isEmpty2(node2) && !hasSrc(node2)) {
      return;
    }
    switch (node2.tag) {
      case "template":
        if (!descriptor.template) {
          const templateBlock = descriptor.template = createBlock(node2, source, false);
          templateBlock.ast = node2;
          if (templateBlock.attrs.functional) {
            const err = new SyntaxError(`<template functional> is no longer supported in Vue 3, since functional components no longer have significant performance difference from stateful ones. Just use a normal <template> instead.`);
            err.loc = node2.props.find((p) => p.name === "functional").loc;
            errors2.push(err);
          }
        } else {
          errors2.push(createDuplicateBlockError(node2));
        }
        break;
      case "script":
        const scriptBlock = createBlock(node2, source, pad2);
        const isSetup = !!scriptBlock.attrs.setup;
        if (isSetup && !descriptor.scriptSetup) {
          descriptor.scriptSetup = scriptBlock;
          break;
        }
        if (!isSetup && !descriptor.script) {
          descriptor.script = scriptBlock;
          break;
        }
        errors2.push(createDuplicateBlockError(node2, isSetup));
        break;
      case "style":
        const styleBlock = createBlock(node2, source, pad2);
        if (styleBlock.attrs.vars) {
          errors2.push(new SyntaxError(`<style vars> has been replaced by a new proposal: https://github.com/vuejs/rfcs/pull/231`));
        }
        descriptor.styles.push(styleBlock);
        break;
      default:
        descriptor.customBlocks.push(createBlock(node2, source, pad2));
        break;
    }
  });
  if (descriptor.scriptSetup) {
    if (descriptor.scriptSetup.src) {
      errors2.push(new SyntaxError(`<script setup> cannot use the "src" attribute because its syntax will be ambiguous outside of the component.`));
      descriptor.scriptSetup = null;
    }
    if (descriptor.script && descriptor.script.src) {
      errors2.push(new SyntaxError(`<script> cannot use the "src" attribute when <script setup> is also present because they must be processed together.`));
      descriptor.script = null;
    }
  }
  if (sourceMap2) {
    const genMap = (block) => {
      if (block && !block.src) {
        block.map = generateSourceMap(filename, source, block.content, sourceRoot, !pad2 || block.type === "template" ? block.loc.start.line - 1 : 0);
      }
    };
    genMap(descriptor.template);
    genMap(descriptor.script);
    descriptor.styles.forEach(genMap);
    descriptor.customBlocks.forEach(genMap);
  }
  descriptor.cssVars = parseCssVars(descriptor);
  const slottedRE = /(?:::v-|:)slotted\(/;
  descriptor.slotted = descriptor.styles.some((s) => s.scoped && slottedRE.test(s.content));
  const result2 = {
    descriptor,
    errors: errors2
  };
  sourceToSFC.set(sourceKey, result2);
  return result2;
}
function createDuplicateBlockError(node2, isScriptSetup = false) {
  const err = new SyntaxError(`Single file component can contain only one <${node2.tag}${isScriptSetup ? ` setup` : ``}> element`);
  err.loc = node2.loc;
  return err;
}
function createBlock(node2, source, pad2) {
  const type = node2.tag;
  let { start, end } = node2.loc;
  let content = "";
  if (node2.children.length) {
    start = node2.children[0].loc.start;
    end = node2.children[node2.children.length - 1].loc.end;
    content = source.slice(start.offset, end.offset);
  } else {
    const offset = node2.loc.source.indexOf(`</`);
    if (offset > -1) {
      start = {
        line: start.line,
        column: start.column + offset,
        offset: start.offset + offset
      };
    }
    end = Object.assign({}, start);
  }
  const loc = {
    source: content,
    start,
    end
  };
  const attrs = {};
  const block = {
    type,
    content,
    loc,
    attrs
  };
  if (pad2) {
    block.content = padContent(source, block, pad2) + block.content;
  }
  node2.props.forEach((p) => {
    if (p.type === 6) {
      attrs[p.name] = p.value ? p.value.content || true : true;
      if (p.name === "lang") {
        block.lang = p.value && p.value.content;
      } else if (p.name === "src") {
        block.src = p.value && p.value.content;
      } else if (type === "style") {
        if (p.name === "scoped") {
          block.scoped = true;
        } else if (p.name === "module") {
          block.module = attrs[p.name];
        }
      } else if (type === "script" && p.name === "setup") {
        block.setup = attrs.setup;
      }
    }
  });
  return block;
}
function generateSourceMap(filename, source, generated, sourceRoot, lineOffset) {
  const map2 = new SourceMapGenerator$2({
    file: filename.replace(/\\/g, "/"),
    sourceRoot: sourceRoot.replace(/\\/g, "/")
  });
  map2.setSourceContent(filename, source);
  generated.split(splitRE).forEach((line, index) => {
    if (!emptyRE.test(line)) {
      const originalLine = index + 1 + lineOffset;
      const generatedLine = index + 1;
      for (let i = 0; i < line.length; i++) {
        if (!/\s/.test(line[i])) {
          map2.addMapping({
            source: filename,
            original: {
              line: originalLine,
              column: i
            },
            generated: {
              line: generatedLine,
              column: i
            }
          });
        }
      }
    }
  });
  return JSON.parse(map2.toString());
}
function padContent(content, block, pad2) {
  content = content.slice(0, block.loc.start.offset);
  if (pad2 === "space") {
    return content.replace(replaceRE, " ");
  } else {
    const offset = content.split(splitRE).length;
    const padChar = block.type === "script" && !block.lang ? "//\n" : "\n";
    return Array(offset).join(padChar);
  }
}
function hasSrc(node2) {
  return node2.props.some((p) => {
    if (p.type !== 6) {
      return false;
    }
    return p.name === "src";
  });
}
function isEmpty2(node2) {
  for (let i = 0; i < node2.children.length; i++) {
    const child = node2.children[i];
    if (child.type !== 2 || child.content.trim() !== "") {
      return false;
    }
  }
  return true;
}
function isatty() {
  return false;
}
function ReadStream() {
  throw new Error("tty.ReadStream is not implemented");
}
function WriteStream() {
  throw new Error("tty.ReadStream is not implemented");
}
function registerInput(dependant) {
  Input = dependant;
}
function getTokenType([type, value], processor2) {
  if (type === "word") {
    if (value[0] === ".") {
      return "class";
    }
    if (value[0] === "#") {
      return "hash";
    }
  }
  if (!processor2.endOfFile()) {
    let next = processor2.nextToken();
    processor2.back(next);
    if (next[0] === "brackets" || next[0] === "(")
      return "call";
  }
  return type;
}
function terminalHighlight(css) {
  let processor2 = tokenize(new Input(css), { ignoreErrors: true });
  let result2 = "";
  while (!processor2.endOfFile()) {
    let token = processor2.nextToken();
    let color = HIGHLIGHT_THEME[getTokenType(token, processor2)];
    if (color) {
      result2 += token[1].split(/\r?\n/).map((i) => color(i)).join("\n");
    } else {
      result2 += token[1];
    }
  }
  return result2;
}
function capitalize$1(str) {
  return str[0].toUpperCase() + str.slice(1);
}
function stringify$1(node2, builder) {
  let str = new stringifier(builder);
  str.stringify(node2);
}
function cloneNode(obj, parent) {
  let cloned = new obj.constructor();
  for (let i in obj) {
    if (!Object.prototype.hasOwnProperty.call(obj, i)) {
      continue;
    }
    if (i === "proxyCache")
      continue;
    let value = obj[i];
    let type = typeof value;
    if (i === "parent" && type === "object") {
      if (parent)
        cloned[i] = parent;
    } else if (i === "source") {
      cloned[i] = value;
    } else if (Array.isArray(value)) {
      cloned[i] = value.map((j) => cloneNode(j, cloned));
    } else {
      if (type === "object" && value !== null)
        value = cloneNode(value);
      cloned[i] = value;
    }
  }
  return cloned;
}
function toVLQSigned$1(aValue) {
  return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
}
function fromVLQSigned$1(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative ? -shifted : shifted;
}
function ArraySet$3() {
  this._array = [];
  this._set = hasNativeMap$1 ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
}
function generatedPositionAfter$1(mappingA, mappingB) {
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA || util$1.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}
function MappingList$2() {
  this._array = [];
  this._sorted = true;
  this._last = { generatedLine: -1, generatedColumn: 0 };
}
function SourceMapGenerator$3(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util$1.getArg(aArgs, "file", null);
  this._sourceRoot = util$1.getArg(aArgs, "sourceRoot", null);
  this._skipValidation = util$1.getArg(aArgs, "skipValidation", false);
  this._sources = new ArraySet$4();
  this._names = new ArraySet$4();
  this._mappings = new MappingList$3();
  this._sourcesContents = null;
}
function SortTemplate(comparator) {
  function swap2(ary, x, y) {
    var temp = ary[x];
    ary[x] = ary[y];
    ary[y] = temp;
  }
  function randomIntInRange2(low, high) {
    return Math.round(low + Math.random() * (high - low));
  }
  function doQuickSort2(ary, comparator2, p, r) {
    if (p < r) {
      var pivotIndex = randomIntInRange2(p, r);
      var i = p - 1;
      swap2(ary, pivotIndex, r);
      var pivot = ary[r];
      for (var j = p; j < r; j++) {
        if (comparator2(ary[j], pivot, false) <= 0) {
          i += 1;
          swap2(ary, i, j);
        }
      }
      swap2(ary, i + 1, j);
      var q = i + 1;
      doQuickSort2(ary, comparator2, p, q - 1);
      doQuickSort2(ary, comparator2, q + 1, r);
    }
  }
  return doQuickSort2;
}
function cloneSort(comparator) {
  let template = SortTemplate.toString();
  let templateFn = new Function(`return ${template}`)();
  return templateFn(comparator);
}
function SourceMapConsumer$2(aSourceMap, aSourceMapURL) {
  var sourceMap2 = aSourceMap;
  if (typeof aSourceMap === "string") {
    sourceMap2 = util$1.parseSourceMapInput(aSourceMap);
  }
  return sourceMap2.sections != null ? new IndexedSourceMapConsumer$1(sourceMap2, aSourceMapURL) : new BasicSourceMapConsumer$1(sourceMap2, aSourceMapURL);
}
function BasicSourceMapConsumer$1(aSourceMap, aSourceMapURL) {
  var sourceMap2 = aSourceMap;
  if (typeof aSourceMap === "string") {
    sourceMap2 = util$1.parseSourceMapInput(aSourceMap);
  }
  var version2 = util$1.getArg(sourceMap2, "version");
  var sources = util$1.getArg(sourceMap2, "sources");
  var names = util$1.getArg(sourceMap2, "names", []);
  var sourceRoot = util$1.getArg(sourceMap2, "sourceRoot", null);
  var sourcesContent = util$1.getArg(sourceMap2, "sourcesContent", null);
  var mappings = util$1.getArg(sourceMap2, "mappings");
  var file = util$1.getArg(sourceMap2, "file", null);
  if (version2 != this._version) {
    throw new Error("Unsupported version: " + version2);
  }
  if (sourceRoot) {
    sourceRoot = util$1.normalize(sourceRoot);
  }
  sources = sources.map(String).map(util$1.normalize).map(function(source) {
    return sourceRoot && util$1.isAbsolute(sourceRoot) && util$1.isAbsolute(source) ? util$1.relative(sourceRoot, source) : source;
  });
  this._names = ArraySet$5.fromArray(names.map(String), true);
  this._sources = ArraySet$5.fromArray(sources, true);
  this._absoluteSources = this._sources.toArray().map(function(s) {
    return util$1.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });
  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}
function Mapping$1() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}
function sortGenerated(array, start) {
  let l = array.length;
  let n2 = array.length - start;
  if (n2 <= 1) {
    return;
  } else if (n2 == 2) {
    let a = array[start];
    let b = array[start + 1];
    if (compareGenerated(a, b) > 0) {
      array[start] = b;
      array[start + 1] = a;
    }
  } else if (n2 < 20) {
    for (let i = start; i < l; i++) {
      for (let j = i; j > start; j--) {
        let a = array[j - 1];
        let b = array[j];
        if (compareGenerated(a, b) <= 0) {
          break;
        }
        array[j - 1] = b;
        array[j] = a;
      }
    }
  } else {
    quickSort$3(array, compareGenerated, start);
  }
}
function IndexedSourceMapConsumer$1(aSourceMap, aSourceMapURL) {
  var sourceMap2 = aSourceMap;
  if (typeof aSourceMap === "string") {
    sourceMap2 = util$1.parseSourceMapInput(aSourceMap);
  }
  var version2 = util$1.getArg(sourceMap2, "version");
  var sections = util$1.getArg(sourceMap2, "sections");
  if (version2 != this._version) {
    throw new Error("Unsupported version: " + version2);
  }
  this._sources = new ArraySet$5();
  this._names = new ArraySet$5();
  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function(s) {
    if (s.url) {
      throw new Error("Support for url field in sections not implemented.");
    }
    var offset = util$1.getArg(s, "offset");
    var offsetLine = util$1.getArg(offset, "line");
    var offsetColumn = util$1.getArg(offset, "column");
    if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
      throw new Error("Section offsets must be ordered and non-overlapping.");
    }
    lastOffset = offset;
    return {
      generatedOffset: {
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer$2(util$1.getArg(s, "map"), aSourceMapURL)
    };
  });
}
function SourceNode$2(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode$1] = true;
  if (aChunks != null)
    this.add(aChunks);
}
function fromBase64(str) {
  if (Buffer2) {
    return Buffer2.from(str, "base64").toString();
  } else {
    return window.atob(str);
  }
}
function cleanSource(nodes) {
  return nodes.map((i) => {
    if (i.nodes)
      i.nodes = cleanSource(i.nodes);
    delete i.source;
    return i;
  });
}
function markDirtyUp(node2) {
  node2[isClean$2] = false;
  if (node2.proxyOf.nodes) {
    for (let i of node2.proxyOf.nodes) {
      markDirtyUp(i);
    }
  }
}
function parse$6(css, opts) {
  let input$1 = new input(css, opts);
  let parser$12 = new parser(input$1);
  try {
    parser$12.parse();
  } catch (e) {
    {
      if (e.name === "CssSyntaxError" && opts && opts.from) {
        if (/\.scss$/i.test(opts.from)) {
          e.message += "\nYou tried to parse SCSS with the standard CSS parser; try again with the postcss-scss parser";
        } else if (/\.sass/i.test(opts.from)) {
          e.message += "\nYou tried to parse Sass with the standard CSS parser; try again with the postcss-sass parser";
        } else if (/\.less$/i.test(opts.from)) {
          e.message += "\nYou tried to parse Less with the standard CSS parser; try again with the postcss-less parser";
        }
      }
    }
    throw e;
  }
  return parser$12.root;
}
function isPromise(obj) {
  return typeof obj === "object" && typeof obj.then === "function";
}
function getEvents(node2) {
  let key = false;
  let type = TYPE_TO_CLASS_NAME[node2.type];
  if (node2.type === "decl") {
    key = node2.prop.toLowerCase();
  } else if (node2.type === "atrule") {
    key = node2.name.toLowerCase();
  }
  if (key && node2.append) {
    return [
      type,
      type + "-" + key,
      CHILDREN,
      type + "Exit",
      type + "Exit-" + key
    ];
  } else if (key) {
    return [type, type + "-" + key, type + "Exit", type + "Exit-" + key];
  } else if (node2.append) {
    return [type, CHILDREN, type + "Exit"];
  } else {
    return [type, type + "Exit"];
  }
}
function toStack(node2) {
  let events;
  if (node2.type === "document") {
    events = ["Document", CHILDREN, "DocumentExit"];
  } else if (node2.type === "root") {
    events = ["Root", CHILDREN, "RootExit"];
  } else {
    events = getEvents(node2);
  }
  return {
    node: node2,
    events,
    eventIndex: 0,
    visitors: [],
    visitorIndex: 0,
    iterator: 0
  };
}
function cleanMarks(node2) {
  node2[isClean$3] = false;
  if (node2.nodes)
    node2.nodes.forEach((i) => cleanMarks(i));
  return node2;
}
function fromJSON(json, inputs) {
  if (Array.isArray(json))
    return json.map((n2) => fromJSON(n2));
  let { inputs: ownInputs, ...defaults } = json;
  if (ownInputs) {
    inputs = [];
    for (let input$1 of ownInputs) {
      let inputHydrated = { ...input$1, __proto__: input.prototype };
      if (inputHydrated.map) {
        inputHydrated.map = {
          ...inputHydrated.map,
          __proto__: previousMap.prototype
        };
      }
      inputs.push(inputHydrated);
    }
  }
  if (defaults.nodes) {
    defaults.nodes = json.nodes.map((n2) => fromJSON(n2, inputs));
  }
  if (defaults.source) {
    let { inputId, ...source } = defaults.source;
    defaults.source = source;
    if (inputId != null) {
      defaults.source.input = inputs[inputId];
    }
  }
  if (defaults.type === "root") {
    return new root(defaults);
  } else if (defaults.type === "decl") {
    return new declaration(defaults);
  } else if (defaults.type === "rule") {
    return new rule(defaults);
  } else if (defaults.type === "comment") {
    return new comment(defaults);
  } else if (defaults.type === "atrule") {
    return new atRule(defaults);
  } else {
    throw new Error("Unknown node type: " + json.type);
  }
}
function postcss$1(...plugins) {
  if (plugins.length === 1 && Array.isArray(plugins[0])) {
    plugins = plugins[0];
  }
  return new processor(plugins);
}
function processRule(id2, rule2) {
  if (processedRules.has(rule2) || rule2.parent && rule2.parent.type === "atrule" && /-?keyframes$/.test(rule2.parent.name)) {
    return;
  }
  processedRules.add(rule2);
  rule2.selector = selectorParser((selectorRoot) => {
    selectorRoot.each((selector2) => {
      rewriteSelector(id2, selector2, selectorRoot);
    });
  }).processSync(rule2.selector);
}
function rewriteSelector(id2, selector2, selectorRoot, slotted = false) {
  let node2 = null;
  let shouldInject = true;
  selector2.each((n2) => {
    if (n2.type === "combinator" && (n2.value === ">>>" || n2.value === "/deep/")) {
      n2.value = " ";
      n2.spaces.before = n2.spaces.after = "";
      warn(`the >>> and /deep/ combinators have been deprecated. Use :deep() instead.`);
      return false;
    }
    if (n2.type === "pseudo") {
      const { value } = n2;
      if (value === ":deep" || value === "::v-deep") {
        if (n2.nodes.length) {
          let last2 = n2;
          n2.nodes[0].each((ss) => {
            selector2.insertAfter(last2, ss);
            last2 = ss;
          });
          const prev = selector2.at(selector2.index(n2) - 1);
          if (!prev || !isSpaceCombinator(prev)) {
            selector2.insertAfter(n2, selectorParser.combinator({
              value: " "
            }));
          }
          selector2.removeChild(n2);
        } else {
          warn(`::v-deep usage as a combinator has been deprecated. Use :deep(<inner-selector>) instead.`);
          const prev = selector2.at(selector2.index(n2) - 1);
          if (prev && isSpaceCombinator(prev)) {
            selector2.removeChild(prev);
          }
          selector2.removeChild(n2);
        }
        return false;
      }
      if (value === ":slotted" || value === "::v-slotted") {
        rewriteSelector(id2, n2.nodes[0], selectorRoot, true);
        let last2 = n2;
        n2.nodes[0].each((ss) => {
          selector2.insertAfter(last2, ss);
          last2 = ss;
        });
        selector2.removeChild(n2);
        shouldInject = false;
        return false;
      }
      if (value === ":global" || value === "::v-global") {
        selectorRoot.insertAfter(selector2, n2.nodes[0]);
        selectorRoot.removeChild(selector2);
        return false;
      }
    }
    if (n2.type !== "pseudo" && n2.type !== "combinator") {
      node2 = n2;
    }
  });
  if (node2) {
    node2.spaces.after = "";
  } else {
    selector2.first.spaces.before = "";
  }
  if (shouldInject) {
    const idToAdd = slotted ? id2 + "-s" : id2;
    selector2.insertAfter(node2, selectorParser.attribute({
      attribute: idToAdd,
      value: idToAdd,
      raws: {},
      quoteMark: `"`
    }));
  }
}
function isSpaceCombinator(node2) {
  return node2.type === "combinator" && /^\s+$/.test(node2.value);
}
function merge$1(oldMap, newMap) {
  if (!oldMap)
    return newMap;
  if (!newMap)
    return oldMap;
  var oldMapConsumer = new SourceMapConsumer$7(oldMap);
  var newMapConsumer = new SourceMapConsumer$7(newMap);
  var mergedMapGenerator = new SourceMapGenerator$9();
  newMapConsumer.eachMapping(function(m) {
    if (m.originalLine == null)
      return;
    var origPosInOldMap = oldMapConsumer.originalPositionFor({
      line: m.originalLine,
      column: m.originalColumn
    });
    if (origPosInOldMap.source == null)
      return;
    mergedMapGenerator.addMapping({
      original: {
        line: origPosInOldMap.line,
        column: origPosInOldMap.column
      },
      generated: {
        line: m.generatedLine,
        column: m.generatedColumn
      },
      source: origPosInOldMap.source,
      name: origPosInOldMap.name
    });
  });
  var consumers = [oldMapConsumer, newMapConsumer];
  consumers.forEach(function(consumer) {
    consumer.sources.forEach(function(sourceFile) {
      mergedMapGenerator._sources.add(sourceFile);
      var sourceContent = consumer.sourceContentFor(sourceFile);
      if (sourceContent != null) {
        mergedMapGenerator.setSourceContent(sourceFile, sourceContent);
      }
    });
  });
  mergedMapGenerator._sourceRoot = oldMap.sourceRoot;
  mergedMapGenerator._file = oldMap.file;
  return JSON.parse(mergedMapGenerator.toString());
}
function getSource(source, filename, additionalData) {
  if (!additionalData)
    return source;
  if (isFunction(additionalData)) {
    return additionalData(source, filename);
  }
  return additionalData + source;
}
function compileStyle(options) {
  return doCompileStyle(Object.assign(Object.assign({}, options), { isAsync: false }));
}
function compileStyleAsync(options) {
  return doCompileStyle(Object.assign(Object.assign({}, options), { isAsync: true }));
}
function doCompileStyle(options) {
  const { filename, id: id2, scoped = false, trim: trim2 = true, isProd = false, modules = false, modulesOptions = {}, preprocessLang, postcssOptions, postcssPlugins } = options;
  const preprocessor = preprocessLang && processors[preprocessLang];
  const preProcessedSource = preprocessor && preprocess$1(options, preprocessor);
  const map2 = preProcessedSource ? preProcessedSource.map : options.inMap || options.map;
  const source = preProcessedSource ? preProcessedSource.code : options.source;
  const shortId = id2.replace(/^data-v-/, "");
  const longId = `data-v-${shortId}`;
  const plugins = (postcssPlugins || []).slice();
  plugins.unshift(cssVarsPlugin({ id: shortId, isProd }));
  if (trim2) {
    plugins.push(trimPlugin());
  }
  if (scoped) {
    plugins.push(scopedPlugin(longId));
  }
  let cssModules;
  if (modules) {
    {
      throw new Error("[@vue/compiler-sfc] `modules` option is not supported in the browser build.");
    }
  }
  const postCSSOptions = Object.assign(Object.assign({}, postcssOptions), { to: filename, from: filename });
  if (map2) {
    postCSSOptions.map = {
      inline: false,
      annotation: false,
      prev: map2
    };
  }
  let result2;
  let code;
  let outMap;
  const dependencies = new Set(preProcessedSource ? preProcessedSource.dependencies : []);
  dependencies.delete(filename);
  const errors2 = [];
  if (preProcessedSource && preProcessedSource.errors.length) {
    errors2.push(...preProcessedSource.errors);
  }
  const recordPlainCssDependencies = (messages) => {
    messages.forEach((msg) => {
      if (msg.type === "dependency") {
        dependencies.add(msg.file);
      }
    });
    return dependencies;
  };
  try {
    result2 = postcss_1(plugins).process(source, postCSSOptions);
    if (options.isAsync) {
      return result2.then((result3) => ({
        code: result3.css || "",
        map: result3.map && result3.map.toJSON(),
        errors: errors2,
        modules: cssModules,
        rawResult: result3,
        dependencies: recordPlainCssDependencies(result3.messages)
      })).catch((error2) => ({
        code: "",
        map: void 0,
        errors: [...errors2, error2],
        rawResult: void 0,
        dependencies
      }));
    }
    recordPlainCssDependencies(result2.messages);
    code = result2.css;
    outMap = result2.map;
  } catch (e) {
    errors2.push(e);
  }
  return {
    code: code || ``,
    map: outMap && outMap.toJSON(),
    errors: errors2,
    rawResult: result2,
    dependencies
  };
}
function preprocess$1(options, preprocessor) {
  if (!options.preprocessCustomRequire) {
    throw new Error(`[@vue/compiler-sfc] Style preprocessing in the browser build must provide the \`preprocessCustomRequire\` option to return the in-browser version of the preprocessor.`);
  }
  return preprocessor(options.source, options.inMap || options.map, Object.assign({ filename: options.filename }, options.preprocessOptions), options.preprocessCustomRequire);
}
var PatchFlagNames, slotFlagsText, GLOBALS_WHITE_LISTED, isGloballyWhitelisted, range, specialBooleanAttrs, isBooleanAttr, unsafeAttrCharRE, attrValidationCache, propsToAttrMap, isNoUnitNumericStyleProp, isKnownHtmlAttr, isKnownSvgAttr, listDelimiterRE, propertyDelimiterRE, HTML_TAGS, SVG_TAGS, VOID_TAGS, isHTMLTag, isSVGTag, isVoidTag, escapeRE, toDisplayString, replacer, EMPTY_OBJ, NOOP, NO, onRE, isOn, extend, hasOwnProperty, hasOwn, isArray, isMap, isSet, isFunction, isString, isSymbol, isObject, objectToString, toTypeString, isPlainObject, isReservedProp, isBuiltInDirective, cacheStringFunction, camelizeRE, camelize, hyphenateRE, hyphenate, capitalize, toHandlerKey, errorMessages, FRAGMENT, TELEPORT, SUSPENSE, KEEP_ALIVE, BASE_TRANSITION, OPEN_BLOCK, CREATE_BLOCK, CREATE_ELEMENT_BLOCK, CREATE_VNODE, CREATE_ELEMENT_VNODE, CREATE_COMMENT, CREATE_TEXT, CREATE_STATIC, RESOLVE_COMPONENT, RESOLVE_DYNAMIC_COMPONENT, RESOLVE_DIRECTIVE, RESOLVE_FILTER, WITH_DIRECTIVES, RENDER_LIST, RENDER_SLOT, CREATE_SLOTS, TO_DISPLAY_STRING, MERGE_PROPS, NORMALIZE_CLASS, NORMALIZE_STYLE, NORMALIZE_PROPS, GUARD_REACTIVE_PROPS, TO_HANDLERS, CAMELIZE, CAPITALIZE, TO_HANDLER_KEY, SET_BLOCK_TRACKING, PUSH_SCOPE_ID, POP_SCOPE_ID, WITH_CTX, UNREF, IS_REF, WITH_MEMO, IS_MEMO_SAME, helperNameMap, locStub, lineBreak, lineBreakG, skipWhiteSpace, skipWhiteSpaceInLine, skipWhiteSpaceToLineBreak, Position, SourceLocation, BaseParser, CommentsParser, ErrorCodes, ErrorMessages, SourceTypeModuleErrorMessages, ParserError, estree, TokContext, types, beforeExpr, startsExpr, isLoop, isAssign, prefix, postfix, ExportedTokenType, keywords$1, tokenTypeCounter, tokenTypes, tokenLabels, tokenBinops, tokenBeforeExprs, tokenStartsExprs, tokenPrefixes, tt, nonASCIIidentifierStartChars, nonASCIIidentifierChars, nonASCIIidentifierStart, nonASCIIidentifier, astralIdentifierStartCodes, astralIdentifierCodes, reservedWords, keywords, reservedWordsStrictSet, reservedWordsStrictBindSet, reservedWordLikeSet, SCOPE_OTHER, SCOPE_PROGRAM, SCOPE_FUNCTION, SCOPE_ARROW, SCOPE_SIMPLE_CATCH, SCOPE_SUPER, SCOPE_DIRECT_SUPER, SCOPE_CLASS, SCOPE_STATIC_BLOCK, SCOPE_TS_MODULE, SCOPE_VAR, BIND_KIND_VALUE, BIND_KIND_TYPE, BIND_SCOPE_VAR, BIND_SCOPE_LEXICAL, BIND_SCOPE_FUNCTION, BIND_FLAGS_NONE, BIND_FLAGS_CLASS, BIND_FLAGS_TS_ENUM, BIND_FLAGS_TS_CONST_ENUM, BIND_FLAGS_TS_EXPORT_ONLY, BIND_FLAGS_FLOW_DECLARE_FN, BIND_CLASS, BIND_LEXICAL, BIND_VAR, BIND_FUNCTION, BIND_TS_INTERFACE, BIND_TS_TYPE, BIND_TS_ENUM, BIND_TS_AMBIENT, BIND_NONE, BIND_OUTSIDE, BIND_TS_CONST_ENUM, BIND_TS_NAMESPACE, BIND_FLOW_DECLARE_FN, CLASS_ELEMENT_FLAG_STATIC, CLASS_ELEMENT_KIND_GETTER, CLASS_ELEMENT_KIND_SETTER, CLASS_ELEMENT_KIND_ACCESSOR, CLASS_ELEMENT_STATIC_GETTER, CLASS_ELEMENT_STATIC_SETTER, CLASS_ELEMENT_INSTANCE_GETTER, CLASS_ELEMENT_INSTANCE_SETTER, CLASS_ELEMENT_OTHER, Scope, ScopeHandler, FlowScope, FlowScopeHandler, State, _isDigit, VALID_REGEX_FLAGS, forbiddenNumericSeparatorSiblings, allowedNumericSeparatorSiblings, Token, Tokenizer, ClassScope, ClassScopeHandler, kExpression, kMaybeArrowParameterDeclaration, kMaybeAsyncArrowParameterDeclaration, kParameterDeclaration, ExpressionScope, ArrowHeadParsingScope, ExpressionScopeHandler, PARAM, PARAM_YIELD, PARAM_AWAIT, PARAM_RETURN, PARAM_IN, ProductionParameterHandler, UtilParser, ExpressionErrors, Node, NodePrototype, NodeUtils, reservedTypes, FlowErrors, exportSuggestions, FLOW_PRAGMA_REGEX, flow, entities, HEX_NUMBER, DECIMAL_NUMBER, JsxErrors, jsx, TypeScriptScope, TypeScriptScopeHandler, TSErrors, typescript, PlaceHolderErrors, placeholders, v8intrinsic, PIPELINE_PROPOSALS, TOPIC_TOKENS, RECORD_AND_TUPLE_SYNTAX_TYPES, mixinPlugins, mixinPluginNames, defaultOptions, unwrapParenthesizedExpression, LValParser, invalidHackPipeBodies, ExpressionParser, loopLabel, switchLabel, FUNC_NO_FLAGS, FUNC_STATEMENT, FUNC_HANGING_STATEMENT, FUNC_NULLABLE_ID, loneSurrogate, keywordRelationalOperator, StatementParser, Parser, tokTypes, parserClassCache, parse_1, parseExpression_1, isStaticExp, isBuiltInType, nonIdentifierRE, isSimpleIdentifier, validFirstIdentCharRE, validIdentCharRE, whitespaceRE, isMemberExpressionBrowser, isMemberExpressionNode, isMemberExpression, propsHelperSet, deprecationData, decodeRE, decodeMap, defaultParserOptions, isSpecialTemplateDirective, allowHoistedHelperSet, intToCharMap, encode, decode, base64, VLQ_BASE_SHIFT, VLQ_BASE, VLQ_BASE_MASK, VLQ_CONTINUATION_BIT, encode$1, decode$1, base64Vlq, util, has, hasNativeMap, ArraySet_1, arraySet, MappingList_1, mappingList, ArraySet$1, MappingList$1, SourceMapGenerator_1, sourceMapGenerator, binarySearch, quickSort_1, quickSort, ArraySet$2, quickSort$1, SourceMapConsumer_1, BasicSourceMapConsumer_1, IndexedSourceMapConsumer_1, sourceMapConsumer, SourceMapGenerator$1, REGEX_NEWLINE, NEWLINE_CODE, isSourceNode, SourceNode_1, sourceNode, SourceMapGenerator$2, SourceMapConsumer$1, SourceNode$1, sourceMap, PURE_ANNOTATION, WalkerBase2, SyncWalker2, isFunctionType, isStaticProperty, isStaticPropertyKey, isLiteralWhitelisted, transformExpression, transformIf, transformFor, forAliasRE, forIteratorRE, stripParensRE, defaultFallback, trackSlotScopes, trackVForSlotScopes, buildClientSlotFn, directiveImportMap, transformElement, transformSlotOutlet, fnExpRE, transformOn, transformBind, injectPrefix, transformText, seen, transformOnce, transformModel, seen$1, transformMemo, noopDirectiveTransform, V_MODEL_RADIO, V_MODEL_CHECKBOX, V_MODEL_TEXT, V_MODEL_SELECT, V_MODEL_DYNAMIC, V_ON_WITH_MODIFIERS, V_ON_WITH_KEYS, V_SHOW, TRANSITION, TRANSITION_GROUP, namedCharacterReferences, maxCRNameLength, decodeHtml, CCR_REPLACEMENTS, isRawTextContainer, parserOptions, transformStyle, parseInlineCSS, DOMErrorMessages, transformVHtml, transformVText, transformModel$1, isEventOptionModifier, isNonKeyModifier, maybeKeyModifier, isKeyboardEvent, resolveModifiers, transformClick, transformOn$1, transformShow, warnTransitionChildren, expReplaceRE, stringifyStatic, getHoistedNode, dataAriaRE, isStringifiableAttr, replaceHoist, isNonStringifiable, ignoreSideEffectTags, DOMNodeTransforms, DOMDirectiveTransforms, CompilerDOM, hashSum, CSS_VARS_HELPER, cssVarRE, cssVarsPlugin, global2, lookup, revLookup, Arr, inited, toString$1, isArray$1, INSPECT_MAX_BYTES, MAX_ARGUMENTS_LENGTH, INVALID_BASE64_RE, chars, BitSet, Chunk, btoa, SourceMap, toString$2, Mappings, n, warned, MagicString, splitPathRe, splitPath, sep, delimiter, path, substr, _polyfillNode_path, maxInt, base, tMin, tMax, skew, damp, initialBias, initialN, delimiter$1, regexNonASCII, regexSeparators, errors, baseMinusTMin, floor, stringFromCharCode, cachedSetTimeout, cachedClearTimeout, queue, draining, currentQueue, queueIndex, title, platform, browser, env, argv, version, versions, release, config, on, addListener, once, off, removeListener, removeAllListeners, emit, performance, performanceNow, startTime, browser$1, inherits, inherits$1, formatRegExp, debugs, debugEnviron, months, _polyfillNode_util, _polyfillNode_util$1, isArray$3, objectKeys, _polyfillNode_url, protocolPattern, portPattern, simplePathPattern, delims, unwise, autoEscape, nonHostChars, hostEndingChars, hostnameMaxLen, hostnamePartPattern, hostnamePartStart, unsafeProtocol, hostlessProtocol, slashedProtocol, _polyfillNode_url$1, externalRE, dataUrlRE, defaultAssetUrlOptions, normalizeOptions, createAssetUrlTransformWithOptions, transformAssetUrl, srcsetTags, escapedSpaceCharacters, createSrcsetTransformWithOptions, transformSrcset, SSR_INTERPOLATE, SSR_RENDER_VNODE, SSR_RENDER_COMPONENT, SSR_RENDER_SLOT, SSR_RENDER_CLASS, SSR_RENDER_STYLE, SSR_RENDER_ATTRS, SSR_RENDER_ATTR, SSR_RENDER_DYNAMIC_ATTR, SSR_RENDER_LIST, SSR_INCLUDE_BOOLEAN_ATTR, SSR_LOOSE_EQUAL, SSR_LOOSE_CONTAIN, SSR_RENDER_DYNAMIC_MODEL, SSR_GET_DYNAMIC_MODEL_PROPS, SSR_RENDER_TELEPORT, SSR_RENDER_SUSPENSE, SSR_GET_DIRECTIVE_PROPS, ssrHelpers, ssrTransformIf, ssrTransformFor, ssrTransformSlotOutlet, SSRErrorMessages, wipMap, rawChildrenMap, ssrTransformElement, wipMap$1, componentTypeMap, ssrTransformComponent, rawOptionsMap, baseNodeTransforms, baseDirectiveTransforms, vnodeNodeTransforms, vnodeDirectiveTransforms, ssrTransformModel, ssrTransformShow, hasSingleChild, ssrInjectFallthroughAttrs, ssrInjectCssVars, CompilerSSR, _polyfillNode_fs, _polyfillNode_fs$1, _fs, _path, require$$0, hasWarned, defaultExportRE, namedDefaultExportRE, exportDefaultClassRE, CONVERT_SYMBOL, ESCAPE_SYMBOL, shorthands, transformCheckRE, RFC_LINK, hasWarned$1, DEFINE_PROPS, DEFINE_EMITS, DEFINE_EXPOSE, WITH_DEFAULTS, DEFAULT_VAR, isBuiltInDir, templateUsageCheckCache, sourceToSFC, splitRE, emptyRE, replaceRE, _polyfillNode_tty, _polyfillNode_tty$1, tty, isColorSupported, formatter, replaceClose, createColors, picocolors, createColors_1, SINGLE_QUOTE, DOUBLE_QUOTE, BACKSLASH, SLASH, NEWLINE, SPACE, FEED, TAB, CR, OPEN_SQUARE, CLOSE_SQUARE, OPEN_PARENTHESES, CLOSE_PARENTHESES, OPEN_CURLY, CLOSE_CURLY, SEMICOLON, ASTERISK, COLON, AT, RE_AT_END, RE_WORD_END, RE_BAD_BRACKET, RE_HEX_ESCAPE, tokenize, Input, HIGHLIGHT_THEME, terminalHighlight_1, CssSyntaxError, cssSyntaxError, isClean, my, symbols, DEFAULT_RAW, Stringifier, stringifier, stringify_1, isClean$1, my$1, Node$1, node_1, Declaration, declaration, intToCharMap$1, encode$4, decode$2, base64$1, VLQ_BASE_SHIFT$1, VLQ_BASE$1, VLQ_BASE_MASK$1, VLQ_CONTINUATION_BIT$1, encode$5, decode$3, base64Vlq$1, util$1, has$1, hasNativeMap$1, ArraySet_1$1, arraySet$1, MappingList_1$1, mappingList$1, ArraySet$4, MappingList$3, SourceMapGenerator_1$1, sourceMapGenerator$1, binarySearch$1, sortCache, quickSort_1$1, quickSort$2, ArraySet$5, quickSort$3, SourceMapConsumer_1$1, compareGenerated, BasicSourceMapConsumer_1$1, IndexedSourceMapConsumer_1$1, sourceMapConsumer$1, SourceMapGenerator$4, REGEX_NEWLINE$1, NEWLINE_CODE$1, isSourceNode$1, SourceNode_1$1, sourceNode$1, SourceMapGenerator$5, SourceMapConsumer$3, SourceNode$3, sourceMap$1, urlAlphabet, customAlphabet, nanoid, nonSecure, SourceMapConsumer$4, SourceMapGenerator$6, existsSync, readFileSync, dirname$1, join$1, PreviousMap, previousMap, require$$2, SourceMapConsumer$5, SourceMapGenerator$7, fileURLToPath, pathToFileURL, resolve$1, isAbsolute$1, nanoid$1, fromOffsetCache, sourceMapAvailable, pathAvailable, Input$1, input, SourceMapConsumer$6, SourceMapGenerator$8, dirname$2, resolve$2, relative$1, sep$1, pathToFileURL$1, sourceMapAvailable$1, pathAvailable$1, MapGenerator, mapGenerator, Comment, comment, isClean$2, my$2, parse$5, Rule, AtRule, Container, container, LazyResult, Processor, Document, document, printed, warnOnce$2, Warning, warning, Result, result, AtRule$1, atRule, LazyResult$1, Processor$1, Root, root, list, list_1, Rule$1, rule, Parser$1, parser, parse_1$1, isClean$3, my$3, TYPE_TO_CLASS_NAME, PLUGIN_PROPS, NOT_VISITORS, CHILDREN, postcss, LazyResult$2, lazyResult, NoWorkResult, noWorkResult, Processor$2, processor, fromJSON_1, postcss_1, trimPlugin, unesc_1, getProp_1, ensureObject_1, stripComments_1, util$2, node, types$1, container$1, root$1, selector, object, hasOwnProperty$3, merge, regexAnySingleEscape, regexSingleEscape, regexExcessiveSpaces, cssesc, cssesc_1, className, comment$1, id, namespace, tag, string, pseudo, node$1, attribute, universal, combinator, nesting, sortAscending_1, tokenTypes$1, tokenize_1, parser$1, processor$1, constructors, guards, selectors, dist, selectorParser, animationNameRE, animationRE, scopedPlugin, processedRules, SourceMapConsumer$7, SourceMapGenerator$9, mergeSourceMap, scss, sass, less, styl, processors, walk$2;
var init_compiler_sfc_esm_browser = __esm({
  "../../node_modules/.pnpm/@vue+compiler-sfc@3.2.31/node_modules/@vue/compiler-sfc/dist/compiler-sfc.esm-browser.js"() {
    PatchFlagNames = {
      [1]: `TEXT`,
      [2]: `CLASS`,
      [4]: `STYLE`,
      [8]: `PROPS`,
      [16]: `FULL_PROPS`,
      [32]: `HYDRATE_EVENTS`,
      [64]: `STABLE_FRAGMENT`,
      [128]: `KEYED_FRAGMENT`,
      [256]: `UNKEYED_FRAGMENT`,
      [512]: `NEED_PATCH`,
      [1024]: `DYNAMIC_SLOTS`,
      [2048]: `DEV_ROOT_FRAGMENT`,
      [-1]: `HOISTED`,
      [-2]: `BAIL`
    };
    slotFlagsText = {
      [1]: "STABLE",
      [2]: "DYNAMIC",
      [3]: "FORWARDED"
    };
    GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
    isGloballyWhitelisted = /* @__PURE__ */ makeMap(GLOBALS_WHITE_LISTED);
    range = 2;
    specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
    isBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);
    unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
    attrValidationCache = {};
    propsToAttrMap = {
      acceptCharset: "accept-charset",
      className: "class",
      htmlFor: "for",
      httpEquiv: "http-equiv"
    };
    isNoUnitNumericStyleProp = /* @__PURE__ */ makeMap(`animation-iteration-count,border-image-outset,border-image-slice,border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,stroke-miterlimit,stroke-opacity,stroke-width`);
    isKnownHtmlAttr = /* @__PURE__ */ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`);
    isKnownSvgAttr = /* @__PURE__ */ makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
    listDelimiterRE = /;(?![^(]*\))/g;
    propertyDelimiterRE = /:(.+)/;
    HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
    SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
    VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
    isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
    isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
    isVoidTag = /* @__PURE__ */ makeMap(VOID_TAGS);
    escapeRE = /["'&<>]/;
    toDisplayString = (val) => {
      return isString(val) ? val : val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
    };
    replacer = (_key, val) => {
      if (val && val.__v_isRef) {
        return replacer(_key, val.value);
      } else if (isMap(val)) {
        return {
          [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
            entries[`${key} =>`] = val2;
            return entries;
          }, {})
        };
      } else if (isSet(val)) {
        return {
          [`Set(${val.size})`]: [...val.values()]
        };
      } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
        return String(val);
      }
      return val;
    };
    EMPTY_OBJ = Object.freeze({});
    Object.freeze([]);
    NOOP = () => {
    };
    NO = () => false;
    onRE = /^on[^a-z]/;
    isOn = (key) => onRE.test(key);
    extend = Object.assign;
    hasOwnProperty = Object.prototype.hasOwnProperty;
    hasOwn = (val, key) => hasOwnProperty.call(val, key);
    isArray = Array.isArray;
    isMap = (val) => toTypeString(val) === "[object Map]";
    isSet = (val) => toTypeString(val) === "[object Set]";
    isFunction = (val) => typeof val === "function";
    isString = (val) => typeof val === "string";
    isSymbol = (val) => typeof val === "symbol";
    isObject = (val) => val !== null && typeof val === "object";
    objectToString = Object.prototype.toString;
    toTypeString = (value) => objectToString.call(value);
    isPlainObject = (val) => toTypeString(val) === "[object Object]";
    isReservedProp = /* @__PURE__ */ makeMap(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
    isBuiltInDirective = /* @__PURE__ */ makeMap("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
    cacheStringFunction = (fn) => {
      const cache = /* @__PURE__ */ Object.create(null);
      return (str) => {
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
      };
    };
    camelizeRE = /-(\w)/g;
    camelize = cacheStringFunction((str) => {
      return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
    });
    hyphenateRE = /\B([A-Z])/g;
    hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
    capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
    toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);
    errorMessages = {
      [0]: "Illegal comment.",
      [1]: "CDATA section is allowed only in XML context.",
      [2]: "Duplicate attribute.",
      [3]: "End tag cannot have attributes.",
      [4]: "Illegal '/' in tags.",
      [5]: "Unexpected EOF in tag.",
      [6]: "Unexpected EOF in CDATA section.",
      [7]: "Unexpected EOF in comment.",
      [8]: "Unexpected EOF in script.",
      [9]: "Unexpected EOF in tag.",
      [10]: "Incorrectly closed comment.",
      [11]: "Incorrectly opened comment.",
      [12]: "Illegal tag name. Use '&lt;' to print '<'.",
      [13]: "Attribute value was expected.",
      [14]: "End tag name was expected.",
      [15]: "Whitespace was expected.",
      [16]: "Unexpected '<!--' in comment.",
      [17]: `Attribute name cannot contain U+0022 ("), U+0027 ('), and U+003C (<).`,
      [18]: "Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",
      [19]: "Attribute name cannot start with '='.",
      [21]: "'<?' is allowed only in XML context.",
      [20]: `Unexpected null character.`,
      [22]: "Illegal '/' in tags.",
      [23]: "Invalid end tag.",
      [24]: "Element is missing end tag.",
      [25]: "Interpolation end sign was not found.",
      [27]: "End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",
      [26]: "Legal directive name was expected.",
      [28]: `v-if/v-else-if is missing expression.`,
      [29]: `v-if/else branches must use unique keys.`,
      [30]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,
      [31]: `v-for is missing expression.`,
      [32]: `v-for has invalid expression.`,
      [33]: `<template v-for> key should be placed on the <template> tag.`,
      [34]: `v-bind is missing expression.`,
      [35]: `v-on is missing expression.`,
      [36]: `Unexpected custom directive on <slot> outlet.`,
      [37]: `Mixed v-slot usage on both the component and nested <template>.When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.`,
      [38]: `Duplicate slot names found. `,
      [39]: `Extraneous children found when component already has explicitly named default slot. These children will be ignored.`,
      [40]: `v-slot can only be used on components or <template> tags.`,
      [41]: `v-model is missing expression.`,
      [42]: `v-model value must be a valid JavaScript member expression.`,
      [43]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,
      [44]: `Error parsing JavaScript expression: `,
      [45]: `<KeepAlive> expects exactly one child component.`,
      [46]: `"prefixIdentifiers" option is not supported in this build of compiler.`,
      [47]: `ES module mode is not supported in this build of compiler.`,
      [48]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,
      [49]: `"scopeId" option is only supported in module mode.`,
      [50]: ``
    };
    FRAGMENT = Symbol(`Fragment`);
    TELEPORT = Symbol(`Teleport`);
    SUSPENSE = Symbol(`Suspense`);
    KEEP_ALIVE = Symbol(`KeepAlive`);
    BASE_TRANSITION = Symbol(`BaseTransition`);
    OPEN_BLOCK = Symbol(`openBlock`);
    CREATE_BLOCK = Symbol(`createBlock`);
    CREATE_ELEMENT_BLOCK = Symbol(`createElementBlock`);
    CREATE_VNODE = Symbol(`createVNode`);
    CREATE_ELEMENT_VNODE = Symbol(`createElementVNode`);
    CREATE_COMMENT = Symbol(`createCommentVNode`);
    CREATE_TEXT = Symbol(`createTextVNode`);
    CREATE_STATIC = Symbol(`createStaticVNode`);
    RESOLVE_COMPONENT = Symbol(`resolveComponent`);
    RESOLVE_DYNAMIC_COMPONENT = Symbol(`resolveDynamicComponent`);
    RESOLVE_DIRECTIVE = Symbol(`resolveDirective`);
    RESOLVE_FILTER = Symbol(`resolveFilter`);
    WITH_DIRECTIVES = Symbol(`withDirectives`);
    RENDER_LIST = Symbol(`renderList`);
    RENDER_SLOT = Symbol(`renderSlot`);
    CREATE_SLOTS = Symbol(`createSlots`);
    TO_DISPLAY_STRING = Symbol(`toDisplayString`);
    MERGE_PROPS = Symbol(`mergeProps`);
    NORMALIZE_CLASS = Symbol(`normalizeClass`);
    NORMALIZE_STYLE = Symbol(`normalizeStyle`);
    NORMALIZE_PROPS = Symbol(`normalizeProps`);
    GUARD_REACTIVE_PROPS = Symbol(`guardReactiveProps`);
    TO_HANDLERS = Symbol(`toHandlers`);
    CAMELIZE = Symbol(`camelize`);
    CAPITALIZE = Symbol(`capitalize`);
    TO_HANDLER_KEY = Symbol(`toHandlerKey`);
    SET_BLOCK_TRACKING = Symbol(`setBlockTracking`);
    PUSH_SCOPE_ID = Symbol(`pushScopeId`);
    POP_SCOPE_ID = Symbol(`popScopeId`);
    WITH_CTX = Symbol(`withCtx`);
    UNREF = Symbol(`unref`);
    IS_REF = Symbol(`isRef`);
    WITH_MEMO = Symbol(`withMemo`);
    IS_MEMO_SAME = Symbol(`isMemoSame`);
    helperNameMap = {
      [FRAGMENT]: `Fragment`,
      [TELEPORT]: `Teleport`,
      [SUSPENSE]: `Suspense`,
      [KEEP_ALIVE]: `KeepAlive`,
      [BASE_TRANSITION]: `BaseTransition`,
      [OPEN_BLOCK]: `openBlock`,
      [CREATE_BLOCK]: `createBlock`,
      [CREATE_ELEMENT_BLOCK]: `createElementBlock`,
      [CREATE_VNODE]: `createVNode`,
      [CREATE_ELEMENT_VNODE]: `createElementVNode`,
      [CREATE_COMMENT]: `createCommentVNode`,
      [CREATE_TEXT]: `createTextVNode`,
      [CREATE_STATIC]: `createStaticVNode`,
      [RESOLVE_COMPONENT]: `resolveComponent`,
      [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
      [RESOLVE_DIRECTIVE]: `resolveDirective`,
      [RESOLVE_FILTER]: `resolveFilter`,
      [WITH_DIRECTIVES]: `withDirectives`,
      [RENDER_LIST]: `renderList`,
      [RENDER_SLOT]: `renderSlot`,
      [CREATE_SLOTS]: `createSlots`,
      [TO_DISPLAY_STRING]: `toDisplayString`,
      [MERGE_PROPS]: `mergeProps`,
      [NORMALIZE_CLASS]: `normalizeClass`,
      [NORMALIZE_STYLE]: `normalizeStyle`,
      [NORMALIZE_PROPS]: `normalizeProps`,
      [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,
      [TO_HANDLERS]: `toHandlers`,
      [CAMELIZE]: `camelize`,
      [CAPITALIZE]: `capitalize`,
      [TO_HANDLER_KEY]: `toHandlerKey`,
      [SET_BLOCK_TRACKING]: `setBlockTracking`,
      [PUSH_SCOPE_ID]: `pushScopeId`,
      [POP_SCOPE_ID]: `popScopeId`,
      [WITH_CTX]: `withCtx`,
      [UNREF]: `unref`,
      [IS_REF]: `isRef`,
      [WITH_MEMO]: `withMemo`,
      [IS_MEMO_SAME]: `isMemoSame`
    };
    locStub = {
      source: "",
      start: { line: 1, column: 1, offset: 0 },
      end: { line: 1, column: 1, offset: 0 }
    };
    lineBreak = /\r\n?|[\n\u2028\u2029]/;
    lineBreakG = new RegExp(lineBreak.source, "g");
    skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
    skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/y;
    skipWhiteSpaceToLineBreak = new RegExp("(?=(" + skipWhiteSpaceInLine.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
    Position = class {
      constructor(line, col) {
        this.line = void 0;
        this.column = void 0;
        this.line = line;
        this.column = col;
      }
    };
    SourceLocation = class {
      constructor(start, end) {
        this.start = void 0;
        this.end = void 0;
        this.filename = void 0;
        this.identifierName = void 0;
        this.start = start;
        this.end = end;
      }
    };
    BaseParser = class {
      constructor() {
        this.sawUnambiguousESM = false;
        this.ambiguousScriptDifferentAst = false;
      }
      hasPlugin(name) {
        return this.plugins.has(name);
      }
      getPluginOption(plugin2, name) {
        if (this.hasPlugin(plugin2))
          return this.plugins.get(plugin2)[name];
      }
    };
    CommentsParser = class extends BaseParser {
      addComment(comment2) {
        if (this.filename)
          comment2.loc.filename = this.filename;
        this.state.comments.push(comment2);
      }
      processComment(node2) {
        const {
          commentStack
        } = this.state;
        const commentStackLength = commentStack.length;
        if (commentStackLength === 0)
          return;
        let i = commentStackLength - 1;
        const lastCommentWS = commentStack[i];
        if (lastCommentWS.start === node2.end) {
          lastCommentWS.leadingNode = node2;
          i--;
        }
        const {
          start: nodeStart
        } = node2;
        for (; i >= 0; i--) {
          const commentWS = commentStack[i];
          const commentEnd = commentWS.end;
          if (commentEnd > nodeStart) {
            commentWS.containingNode = node2;
            this.finalizeComment(commentWS);
            commentStack.splice(i, 1);
          } else {
            if (commentEnd === nodeStart) {
              commentWS.trailingNode = node2;
            }
            break;
          }
        }
      }
      finalizeComment(commentWS) {
        const {
          comments
        } = commentWS;
        if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
          if (commentWS.leadingNode !== null) {
            setTrailingComments(commentWS.leadingNode, comments);
          }
          if (commentWS.trailingNode !== null) {
            setLeadingComments(commentWS.trailingNode, comments);
          }
        } else {
          const {
            containingNode: node2,
            start: commentStart
          } = commentWS;
          if (this.input.charCodeAt(commentStart - 1) === 44) {
            switch (node2.type) {
              case "ObjectExpression":
              case "ObjectPattern":
              case "RecordExpression":
                adjustInnerComments(node2, node2.properties, commentWS);
                break;
              case "CallExpression":
              case "OptionalCallExpression":
                adjustInnerComments(node2, node2.arguments, commentWS);
                break;
              case "FunctionDeclaration":
              case "FunctionExpression":
              case "ArrowFunctionExpression":
              case "ObjectMethod":
              case "ClassMethod":
              case "ClassPrivateMethod":
                adjustInnerComments(node2, node2.params, commentWS);
                break;
              case "ArrayExpression":
              case "ArrayPattern":
              case "TupleExpression":
                adjustInnerComments(node2, node2.elements, commentWS);
                break;
              case "ExportNamedDeclaration":
              case "ImportDeclaration":
                adjustInnerComments(node2, node2.specifiers, commentWS);
                break;
              default: {
                setInnerComments(node2, comments);
              }
            }
          } else {
            setInnerComments(node2, comments);
          }
        }
      }
      finalizeRemainingComments() {
        const {
          commentStack
        } = this.state;
        for (let i = commentStack.length - 1; i >= 0; i--) {
          this.finalizeComment(commentStack[i]);
        }
        this.state.commentStack = [];
      }
      resetPreviousNodeTrailingComments(node2) {
        const {
          commentStack
        } = this.state;
        const {
          length: length2
        } = commentStack;
        if (length2 === 0)
          return;
        const commentWS = commentStack[length2 - 1];
        if (commentWS.leadingNode === node2) {
          commentWS.leadingNode = null;
        }
      }
      takeSurroundingComments(node2, start, end) {
        const {
          commentStack
        } = this.state;
        const commentStackLength = commentStack.length;
        if (commentStackLength === 0)
          return;
        let i = commentStackLength - 1;
        for (; i >= 0; i--) {
          const commentWS = commentStack[i];
          const commentEnd = commentWS.end;
          const commentStart = commentWS.start;
          if (commentStart === end) {
            commentWS.leadingNode = node2;
          } else if (commentEnd === start) {
            commentWS.trailingNode = node2;
          } else if (commentEnd < start) {
            break;
          }
        }
      }
    };
    ErrorCodes = Object.freeze({
      SyntaxError: "BABEL_PARSER_SYNTAX_ERROR",
      SourceTypeModuleError: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"
    });
    ErrorMessages = makeErrorTemplates({
      AccessorIsGenerator: "A %0ter cannot be a generator.",
      ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
      AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
      AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
      AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
      AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
      AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
      AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
      BadGetterArity: "A 'get' accesor must not have any formal parameters.",
      BadSetterArity: "A 'set' accesor must have exactly one formal parameter.",
      BadSetterRestParameter: "A 'set' accesor function argument must not be a rest parameter.",
      ConstructorClassField: "Classes may not have a field named 'constructor'.",
      ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
      ConstructorIsAccessor: "Class constructor may not be an accessor.",
      ConstructorIsAsync: "Constructor can't be an async function.",
      ConstructorIsGenerator: "Constructor can't be a generator.",
      DeclarationMissingInitializer: "'%0' require an initialization value.",
      DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.",
      DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
      DecoratorExportClass: "Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.",
      DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
      DecoratorStaticBlock: "Decorators can't be used with a static block.",
      DeletePrivateField: "Deleting a private field is not allowed.",
      DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
      DuplicateConstructor: "Duplicate constructor in the same class.",
      DuplicateDefaultExport: "Only one default export allowed per module.",
      DuplicateExport: "`%0` has already been exported. Exported identifiers must be unique.",
      DuplicateProto: "Redefinition of __proto__ property.",
      DuplicateRegExpFlags: "Duplicate regular expression flag.",
      ElementAfterRest: "Rest element must be last element.",
      EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
      ExportBindingIsString: "A string literal cannot be used as an exported binding without `from`.\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?",
      ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
      ForInOfLoopInitializer: "'%0' loop variable declaration may not have an initializer.",
      ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
      ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
      GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
      IllegalBreakContinue: "Unsyntactic %0.",
      IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
      IllegalReturn: "'return' outside of function.",
      ImportBindingIsString: 'A string literal cannot be used as an imported binding.\n- Did you mean `import { "%0" as foo }`?',
      ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
      ImportCallArity: "`import()` requires exactly %0.",
      ImportCallNotNewExpression: "Cannot use new with import(...).",
      ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
      InvalidBigIntLiteral: "Invalid BigIntLiteral.",
      InvalidCodePoint: "Code point out of bounds.",
      InvalidDecimal: "Invalid decimal.",
      InvalidDigit: "Expected number in radix %0.",
      InvalidEscapeSequence: "Bad character escape sequence.",
      InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
      InvalidEscapedReservedWord: "Escape sequence in keyword %0.",
      InvalidIdentifier: "Invalid identifier %0.",
      InvalidLhs: "Invalid left-hand side in %0.",
      InvalidLhsBinding: "Binding invalid left-hand side in %0.",
      InvalidNumber: "Invalid number.",
      InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
      InvalidOrUnexpectedToken: "Unexpected character '%0'.",
      InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
      InvalidPrivateFieldResolution: "Private name #%0 is not defined.",
      InvalidPropertyBindingPattern: "Binding member expression.",
      InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
      InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
      LabelRedeclaration: "Label '%0' is already declared.",
      LetInLexicalBinding: "'let' is not allowed to be used as a name in 'let' or 'const' declarations.",
      LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
      MalformedRegExpFlags: "Invalid regular expression flag.",
      MissingClassName: "A class name is required.",
      MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
      MissingSemicolon: "Missing semicolon.",
      MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
      MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
      ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
      ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
      ModuleAttributesWithDuplicateKeys: 'Duplicate key "%0" is not allowed in module attributes.',
      ModuleExportNameHasLoneSurrogate: "An export name cannot include a lone surrogate, found '\\u%0'.",
      ModuleExportUndefined: "Export '%0' is not defined.",
      MultipleDefaultsInSwitch: "Multiple default clauses.",
      NewlineAfterThrow: "Illegal newline after throw.",
      NoCatchOrFinally: "Missing catch or finally clause.",
      NumberIdentifier: "Identifier directly after number.",
      NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
      ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
      OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
      OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
      OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
      ParamDupe: "Argument name clash.",
      PatternHasAccessor: "Object pattern can't contain getter or setter.",
      PatternHasMethod: "Object pattern can't contain methods.",
      PipeBodyIsTighter: "Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
      PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
      PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
      PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "%0" }.',
      PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
      PipeUnparenthesizedBody: "Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.",
      PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
      PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
      PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
      PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
      PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
      PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
      PrivateInExpectedIn: "Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).",
      PrivateNameRedeclaration: "Duplicate private name #%0.",
      RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
      RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
      RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
      RecordNoProto: "'__proto__' is not allowed in Record expressions.",
      RestTrailingComma: "Unexpected trailing comma after rest element.",
      SloppyFunction: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
      StaticPrototype: "Classes may not have static property named prototype.",
      StrictDelete: "Deleting local variable in strict mode.",
      StrictEvalArguments: "Assigning to '%0' in strict mode.",
      StrictEvalArgumentsBinding: "Binding '%0' in strict mode.",
      StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
      StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
      StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
      StrictWith: "'with' in strict mode.",
      SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
      SuperPrivateField: "Private fields can't be accessed on super.",
      TrailingDecorator: "Decorators must be attached to a class element.",
      TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
      TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
      TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
      UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
      UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
      UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
      UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
      UnexpectedKeyword: "Unexpected keyword '%0'.",
      UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
      UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
      UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
      UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
      UnexpectedPrivateField: "Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\n or a property of member expression (i.e. this.#p).",
      UnexpectedReservedWord: "Unexpected reserved word '%0'.",
      UnexpectedSuper: "'super' is only allowed in object methods and classes.",
      UnexpectedToken: "Unexpected token '%0'.",
      UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
      UnsupportedBind: "Binding should be performed on object property.",
      UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
      UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
      UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
      UnsupportedMetaProperty: "The only valid meta property for %0 is %0.%1.",
      UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
      UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
      UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
      UnterminatedComment: "Unterminated comment.",
      UnterminatedRegExp: "Unterminated regular expression.",
      UnterminatedString: "Unterminated string constant.",
      UnterminatedTemplate: "Unterminated template.",
      VarRedeclaration: "Identifier '%0' has already been declared.",
      YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
      YieldInParameter: "Yield expression is not allowed in formal parameters.",
      ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
    }, ErrorCodes.SyntaxError);
    SourceTypeModuleErrorMessages = makeErrorTemplates({
      ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: "module"'`,
      ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: "module"'`
    }, ErrorCodes.SourceTypeModuleError);
    ParserError = class extends CommentsParser {
      getLocationForPosition(pos) {
        let loc;
        if (pos === this.state.start)
          loc = this.state.startLoc;
        else if (pos === this.state.lastTokStart)
          loc = this.state.lastTokStartLoc;
        else if (pos === this.state.end)
          loc = this.state.endLoc;
        else if (pos === this.state.lastTokEnd)
          loc = this.state.lastTokEndLoc;
        else
          loc = getLineInfo(this.input, pos);
        return loc;
      }
      raise(pos, {
        code,
        reasonCode,
        template
      }, ...params) {
        return this.raiseWithData(pos, {
          code,
          reasonCode
        }, template, ...params);
      }
      raiseOverwrite(pos, {
        code,
        template
      }, ...params) {
        const loc = this.getLocationForPosition(pos);
        const message = template.replace(/%(\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;
        if (this.options.errorRecovery) {
          const errors2 = this.state.errors;
          for (let i = errors2.length - 1; i >= 0; i--) {
            const error2 = errors2[i];
            if (error2.pos === pos) {
              return Object.assign(error2, {
                message
              });
            } else if (error2.pos < pos) {
              break;
            }
          }
        }
        return this._raise({
          code,
          loc,
          pos
        }, message);
      }
      raiseWithData(pos, data, errorTemplate, ...params) {
        const loc = this.getLocationForPosition(pos);
        const message = errorTemplate.replace(/%(\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;
        return this._raise(Object.assign({
          loc,
          pos
        }, data), message);
      }
      _raise(errorContext, message) {
        const err = new SyntaxError(message);
        Object.assign(err, errorContext);
        if (this.options.errorRecovery) {
          if (!this.isLookahead)
            this.state.errors.push(err);
          return err;
        } else {
          throw err;
        }
      }
    };
    estree = (superClass) => class extends superClass {
      parseRegExpLiteral({
        pattern,
        flags
      }) {
        let regex = null;
        try {
          regex = new RegExp(pattern, flags);
        } catch (e) {
        }
        const node2 = this.estreeParseLiteral(regex);
        node2.regex = {
          pattern,
          flags
        };
        return node2;
      }
      parseBigIntLiteral(value) {
        let bigInt;
        try {
          bigInt = BigInt(value);
        } catch (_unused) {
          bigInt = null;
        }
        const node2 = this.estreeParseLiteral(bigInt);
        node2.bigint = String(node2.value || value);
        return node2;
      }
      parseDecimalLiteral(value) {
        const decimal = null;
        const node2 = this.estreeParseLiteral(decimal);
        node2.decimal = String(node2.value || value);
        return node2;
      }
      estreeParseLiteral(value) {
        return this.parseLiteral(value, "Literal");
      }
      parseStringLiteral(value) {
        return this.estreeParseLiteral(value);
      }
      parseNumericLiteral(value) {
        return this.estreeParseLiteral(value);
      }
      parseNullLiteral() {
        return this.estreeParseLiteral(null);
      }
      parseBooleanLiteral(value) {
        return this.estreeParseLiteral(value);
      }
      directiveToStmt(directive) {
        const directiveLiteral = directive.value;
        const stmt = this.startNodeAt(directive.start, directive.loc.start);
        const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);
        expression.value = directiveLiteral.extra.expressionValue;
        expression.raw = directiveLiteral.extra.raw;
        stmt.expression = this.finishNodeAt(expression, "Literal", directiveLiteral.end, directiveLiteral.loc.end);
        stmt.directive = directiveLiteral.extra.raw.slice(1, -1);
        return this.finishNodeAt(stmt, "ExpressionStatement", directive.end, directive.loc.end);
      }
      initFunction(node2, isAsync) {
        super.initFunction(node2, isAsync);
        node2.expression = false;
      }
      checkDeclaration(node2) {
        if (node2 != null && this.isObjectProperty(node2)) {
          this.checkDeclaration(node2.value);
        } else {
          super.checkDeclaration(node2);
        }
      }
      getObjectOrClassMethodParams(method) {
        return method.value.params;
      }
      isValidDirective(stmt) {
        var _stmt$expression$extr;
        return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
      }
      parseBlockBody(node2, ...args) {
        super.parseBlockBody(node2, ...args);
        const directiveStatements = node2.directives.map((d) => this.directiveToStmt(d));
        node2.body = directiveStatements.concat(node2.body);
        delete node2.directives;
      }
      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);
        if (method.typeParameters) {
          method.value.typeParameters = method.typeParameters;
          delete method.typeParameters;
        }
        classBody.body.push(method);
      }
      parsePrivateName() {
        const node2 = super.parsePrivateName();
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return node2;
          }
        }
        return this.convertPrivateNameToPrivateIdentifier(node2);
      }
      convertPrivateNameToPrivateIdentifier(node2) {
        const name = super.getPrivateNameSV(node2);
        node2 = node2;
        delete node2.id;
        node2.name = name;
        node2.type = "PrivateIdentifier";
        return node2;
      }
      isPrivateName(node2) {
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return super.isPrivateName(node2);
          }
        }
        return node2.type === "PrivateIdentifier";
      }
      getPrivateNameSV(node2) {
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return super.getPrivateNameSV(node2);
          }
        }
        return node2.name;
      }
      parseLiteral(value, type) {
        const node2 = super.parseLiteral(value, type);
        node2.raw = node2.extra.raw;
        delete node2.extra;
        return node2;
      }
      parseFunctionBody(node2, allowExpression, isMethod = false) {
        super.parseFunctionBody(node2, allowExpression, isMethod);
        node2.expression = node2.body.type !== "BlockStatement";
      }
      parseMethod(node2, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
        let funcNode = this.startNode();
        funcNode.kind = node2.kind;
        funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
        funcNode.type = "FunctionExpression";
        delete funcNode.kind;
        node2.value = funcNode;
        if (type === "ClassPrivateMethod") {
          node2.computed = false;
        }
        type = "MethodDefinition";
        return this.finishNode(node2, type);
      }
      parseClassProperty(...args) {
        const propertyNode = super.parseClassProperty(...args);
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return propertyNode;
          }
        }
        propertyNode.type = "PropertyDefinition";
        return propertyNode;
      }
      parseClassPrivateProperty(...args) {
        const propertyNode = super.parseClassPrivateProperty(...args);
        {
          if (!this.getPluginOption("estree", "classFeatures")) {
            return propertyNode;
          }
        }
        propertyNode.type = "PropertyDefinition";
        propertyNode.computed = false;
        return propertyNode;
      }
      parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
        const node2 = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
        if (node2) {
          node2.type = "Property";
          if (node2.kind === "method")
            node2.kind = "init";
          node2.shorthand = false;
        }
        return node2;
      }
      parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
        const node2 = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
        if (node2) {
          node2.kind = "init";
          node2.type = "Property";
        }
        return node2;
      }
      isAssignable(node2, isBinding) {
        if (node2 != null && this.isObjectProperty(node2)) {
          return this.isAssignable(node2.value, isBinding);
        }
        return super.isAssignable(node2, isBinding);
      }
      toAssignable(node2, isLHS = false) {
        if (node2 != null && this.isObjectProperty(node2)) {
          this.toAssignable(node2.value, isLHS);
          return node2;
        }
        return super.toAssignable(node2, isLHS);
      }
      toAssignableObjectExpressionProp(prop, ...args) {
        if (prop.kind === "get" || prop.kind === "set") {
          this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);
        } else if (prop.method) {
          this.raise(prop.key.start, ErrorMessages.PatternHasMethod);
        } else {
          super.toAssignableObjectExpressionProp(prop, ...args);
        }
      }
      finishCallExpression(node2, optional) {
        super.finishCallExpression(node2, optional);
        if (node2.callee.type === "Import") {
          node2.type = "ImportExpression";
          node2.source = node2.arguments[0];
          if (this.hasPlugin("importAssertions")) {
            var _node$arguments$;
            node2.attributes = (_node$arguments$ = node2.arguments[1]) != null ? _node$arguments$ : null;
          }
          delete node2.arguments;
          delete node2.callee;
        }
        return node2;
      }
      toReferencedArguments(node2) {
        if (node2.type === "ImportExpression") {
          return;
        }
        super.toReferencedArguments(node2);
      }
      parseExport(node2) {
        super.parseExport(node2);
        switch (node2.type) {
          case "ExportAllDeclaration":
            node2.exported = null;
            break;
          case "ExportNamedDeclaration":
            if (node2.specifiers.length === 1 && node2.specifiers[0].type === "ExportNamespaceSpecifier") {
              node2.type = "ExportAllDeclaration";
              node2.exported = node2.specifiers[0].exported;
              delete node2.specifiers;
            }
            break;
        }
        return node2;
      }
      parseSubscript(base2, startPos, startLoc, noCalls, state) {
        const node2 = super.parseSubscript(base2, startPos, startLoc, noCalls, state);
        if (state.optionalChainMember) {
          if (node2.type === "OptionalMemberExpression" || node2.type === "OptionalCallExpression") {
            node2.type = node2.type.substring(8);
          }
          if (state.stop) {
            const chain = this.startNodeAtNode(node2);
            chain.expression = node2;
            return this.finishNode(chain, "ChainExpression");
          }
        } else if (node2.type === "MemberExpression" || node2.type === "CallExpression") {
          node2.optional = false;
        }
        return node2;
      }
      hasPropertyAsPrivateName(node2) {
        if (node2.type === "ChainExpression") {
          node2 = node2.expression;
        }
        return super.hasPropertyAsPrivateName(node2);
      }
      isOptionalChain(node2) {
        return node2.type === "ChainExpression";
      }
      isObjectProperty(node2) {
        return node2.type === "Property" && node2.kind === "init" && !node2.method;
      }
      isObjectMethod(node2) {
        return node2.method || node2.kind === "get" || node2.kind === "set";
      }
    };
    TokContext = class {
      constructor(token, preserveSpace) {
        this.token = void 0;
        this.preserveSpace = void 0;
        this.token = token;
        this.preserveSpace = !!preserveSpace;
      }
    };
    types = {
      brace: new TokContext("{"),
      template: new TokContext("`", true)
    };
    beforeExpr = true;
    startsExpr = true;
    isLoop = true;
    isAssign = true;
    prefix = true;
    postfix = true;
    ExportedTokenType = class {
      constructor(label, conf = {}) {
        this.label = void 0;
        this.keyword = void 0;
        this.beforeExpr = void 0;
        this.startsExpr = void 0;
        this.rightAssociative = void 0;
        this.isLoop = void 0;
        this.isAssign = void 0;
        this.prefix = void 0;
        this.postfix = void 0;
        this.binop = void 0;
        this.label = label;
        this.keyword = conf.keyword;
        this.beforeExpr = !!conf.beforeExpr;
        this.startsExpr = !!conf.startsExpr;
        this.rightAssociative = !!conf.rightAssociative;
        this.isLoop = !!conf.isLoop;
        this.isAssign = !!conf.isAssign;
        this.prefix = !!conf.prefix;
        this.postfix = !!conf.postfix;
        this.binop = conf.binop != null ? conf.binop : null;
        {
          this.updateContext = null;
        }
      }
    };
    keywords$1 = /* @__PURE__ */ new Map();
    tokenTypeCounter = -1;
    tokenTypes = [];
    tokenLabels = [];
    tokenBinops = [];
    tokenBeforeExprs = [];
    tokenStartsExprs = [];
    tokenPrefixes = [];
    tt = {
      bracketL: createToken("[", {
        beforeExpr,
        startsExpr
      }),
      bracketHashL: createToken("#[", {
        beforeExpr,
        startsExpr
      }),
      bracketBarL: createToken("[|", {
        beforeExpr,
        startsExpr
      }),
      bracketR: createToken("]"),
      bracketBarR: createToken("|]"),
      braceL: createToken("{", {
        beforeExpr,
        startsExpr
      }),
      braceBarL: createToken("{|", {
        beforeExpr,
        startsExpr
      }),
      braceHashL: createToken("#{", {
        beforeExpr,
        startsExpr
      }),
      braceR: createToken("}", {
        beforeExpr
      }),
      braceBarR: createToken("|}"),
      parenL: createToken("(", {
        beforeExpr,
        startsExpr
      }),
      parenR: createToken(")"),
      comma: createToken(",", {
        beforeExpr
      }),
      semi: createToken(";", {
        beforeExpr
      }),
      colon: createToken(":", {
        beforeExpr
      }),
      doubleColon: createToken("::", {
        beforeExpr
      }),
      dot: createToken("."),
      question: createToken("?", {
        beforeExpr
      }),
      questionDot: createToken("?."),
      arrow: createToken("=>", {
        beforeExpr
      }),
      template: createToken("template"),
      ellipsis: createToken("...", {
        beforeExpr
      }),
      backQuote: createToken("`", {
        startsExpr
      }),
      dollarBraceL: createToken("${", {
        beforeExpr,
        startsExpr
      }),
      at: createToken("@"),
      hash: createToken("#", {
        startsExpr
      }),
      interpreterDirective: createToken("#!..."),
      eq: createToken("=", {
        beforeExpr,
        isAssign
      }),
      assign: createToken("_=", {
        beforeExpr,
        isAssign
      }),
      slashAssign: createToken("_=", {
        beforeExpr,
        isAssign
      }),
      xorAssign: createToken("_=", {
        beforeExpr,
        isAssign
      }),
      moduloAssign: createToken("_=", {
        beforeExpr,
        isAssign
      }),
      incDec: createToken("++/--", {
        prefix,
        postfix,
        startsExpr
      }),
      bang: createToken("!", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      tilde: createToken("~", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      pipeline: createBinop("|>", 0),
      nullishCoalescing: createBinop("??", 1),
      logicalOR: createBinop("||", 1),
      logicalAND: createBinop("&&", 2),
      bitwiseOR: createBinop("|", 3),
      bitwiseXOR: createBinop("^", 4),
      bitwiseAND: createBinop("&", 5),
      equality: createBinop("==/!=/===/!==", 6),
      lt: createBinop("</>/<=/>=", 7),
      gt: createBinop("</>/<=/>=", 7),
      relational: createBinop("</>/<=/>=", 7),
      bitShift: createBinop("<</>>/>>>", 8),
      plusMin: createToken("+/-", {
        beforeExpr,
        binop: 9,
        prefix,
        startsExpr
      }),
      modulo: createToken("%", {
        binop: 10,
        startsExpr
      }),
      star: createToken("*", {
        binop: 10
      }),
      slash: createBinop("/", 10),
      exponent: createToken("**", {
        beforeExpr,
        binop: 11,
        rightAssociative: true
      }),
      _in: createKeyword("in", {
        beforeExpr,
        binop: 7
      }),
      _instanceof: createKeyword("instanceof", {
        beforeExpr,
        binop: 7
      }),
      _break: createKeyword("break"),
      _case: createKeyword("case", {
        beforeExpr
      }),
      _catch: createKeyword("catch"),
      _continue: createKeyword("continue"),
      _debugger: createKeyword("debugger"),
      _default: createKeyword("default", {
        beforeExpr
      }),
      _else: createKeyword("else", {
        beforeExpr
      }),
      _finally: createKeyword("finally"),
      _function: createKeyword("function", {
        startsExpr
      }),
      _if: createKeyword("if"),
      _return: createKeyword("return", {
        beforeExpr
      }),
      _switch: createKeyword("switch"),
      _throw: createKeyword("throw", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      _try: createKeyword("try"),
      _var: createKeyword("var"),
      _const: createKeyword("const"),
      _with: createKeyword("with"),
      _new: createKeyword("new", {
        beforeExpr,
        startsExpr
      }),
      _this: createKeyword("this", {
        startsExpr
      }),
      _super: createKeyword("super", {
        startsExpr
      }),
      _class: createKeyword("class", {
        startsExpr
      }),
      _extends: createKeyword("extends", {
        beforeExpr
      }),
      _export: createKeyword("export"),
      _import: createKeyword("import", {
        startsExpr
      }),
      _null: createKeyword("null", {
        startsExpr
      }),
      _true: createKeyword("true", {
        startsExpr
      }),
      _false: createKeyword("false", {
        startsExpr
      }),
      _typeof: createKeyword("typeof", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      _void: createKeyword("void", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      _delete: createKeyword("delete", {
        beforeExpr,
        prefix,
        startsExpr
      }),
      _do: createKeyword("do", {
        isLoop,
        beforeExpr
      }),
      _for: createKeyword("for", {
        isLoop
      }),
      _while: createKeyword("while", {
        isLoop
      }),
      _as: createKeywordLike("as", {
        startsExpr
      }),
      _assert: createKeywordLike("assert", {
        startsExpr
      }),
      _async: createKeywordLike("async", {
        startsExpr
      }),
      _await: createKeywordLike("await", {
        startsExpr
      }),
      _from: createKeywordLike("from", {
        startsExpr
      }),
      _get: createKeywordLike("get", {
        startsExpr
      }),
      _let: createKeywordLike("let", {
        startsExpr
      }),
      _meta: createKeywordLike("meta", {
        startsExpr
      }),
      _of: createKeywordLike("of", {
        startsExpr
      }),
      _sent: createKeywordLike("sent", {
        startsExpr
      }),
      _set: createKeywordLike("set", {
        startsExpr
      }),
      _static: createKeywordLike("static", {
        startsExpr
      }),
      _yield: createKeywordLike("yield", {
        startsExpr
      }),
      _asserts: createKeywordLike("asserts", {
        startsExpr
      }),
      _checks: createKeywordLike("checks", {
        startsExpr
      }),
      _exports: createKeywordLike("exports", {
        startsExpr
      }),
      _global: createKeywordLike("global", {
        startsExpr
      }),
      _implements: createKeywordLike("implements", {
        startsExpr
      }),
      _intrinsic: createKeywordLike("intrinsic", {
        startsExpr
      }),
      _infer: createKeywordLike("infer", {
        startsExpr
      }),
      _is: createKeywordLike("is", {
        startsExpr
      }),
      _mixins: createKeywordLike("mixins", {
        startsExpr
      }),
      _proto: createKeywordLike("proto", {
        startsExpr
      }),
      _require: createKeywordLike("require", {
        startsExpr
      }),
      _keyof: createKeywordLike("keyof", {
        startsExpr
      }),
      _readonly: createKeywordLike("readonly", {
        startsExpr
      }),
      _unique: createKeywordLike("unique", {
        startsExpr
      }),
      _abstract: createKeywordLike("abstract", {
        startsExpr
      }),
      _declare: createKeywordLike("declare", {
        startsExpr
      }),
      _enum: createKeywordLike("enum", {
        startsExpr
      }),
      _module: createKeywordLike("module", {
        startsExpr
      }),
      _namespace: createKeywordLike("namespace", {
        startsExpr
      }),
      _interface: createKeywordLike("interface", {
        startsExpr
      }),
      _type: createKeywordLike("type", {
        startsExpr
      }),
      _opaque: createKeywordLike("opaque", {
        startsExpr
      }),
      name: createToken("name", {
        startsExpr
      }),
      string: createToken("string", {
        startsExpr
      }),
      num: createToken("num", {
        startsExpr
      }),
      bigint: createToken("bigint", {
        startsExpr
      }),
      decimal: createToken("decimal", {
        startsExpr
      }),
      regexp: createToken("regexp", {
        startsExpr
      }),
      privateName: createToken("#name", {
        startsExpr
      }),
      eof: createToken("eof"),
      jsxName: createToken("jsxName"),
      jsxText: createToken("jsxText", {
        beforeExpr: true
      }),
      jsxTagStart: createToken("jsxTagStart", {
        startsExpr: true
      }),
      jsxTagEnd: createToken("jsxTagEnd"),
      placeholder: createToken("%%", {
        startsExpr: true
      })
    };
    {
      tokenTypes[8].updateContext = (context) => {
        context.pop();
      };
      tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context) => {
        context.push(types.brace);
      };
      tokenTypes[22].updateContext = (context) => {
        if (context[context.length - 1] === types.template) {
          context.pop();
        } else {
          context.push(types.template);
        }
      };
      tokenTypes[132].updateContext = (context) => {
        context.push(types.j_expr, types.j_oTag);
      };
    }
    nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
    nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
    nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
    nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
    nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
    astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
    astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
    reservedWords = {
      keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
      strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
      strictBind: ["eval", "arguments"]
    };
    keywords = new Set(reservedWords.keyword);
    reservedWordsStrictSet = new Set(reservedWords.strict);
    reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
    reservedWordLikeSet = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
    SCOPE_OTHER = 0;
    SCOPE_PROGRAM = 1;
    SCOPE_FUNCTION = 2;
    SCOPE_ARROW = 4;
    SCOPE_SIMPLE_CATCH = 8;
    SCOPE_SUPER = 16;
    SCOPE_DIRECT_SUPER = 32;
    SCOPE_CLASS = 64;
    SCOPE_STATIC_BLOCK = 128;
    SCOPE_TS_MODULE = 256;
    SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;
    BIND_KIND_VALUE = 1;
    BIND_KIND_TYPE = 2;
    BIND_SCOPE_VAR = 4;
    BIND_SCOPE_LEXICAL = 8;
    BIND_SCOPE_FUNCTION = 16;
    BIND_FLAGS_NONE = 64;
    BIND_FLAGS_CLASS = 128;
    BIND_FLAGS_TS_ENUM = 256;
    BIND_FLAGS_TS_CONST_ENUM = 512;
    BIND_FLAGS_TS_EXPORT_ONLY = 1024;
    BIND_FLAGS_FLOW_DECLARE_FN = 2048;
    BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS;
    BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0;
    BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0;
    BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0;
    BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS;
    BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0;
    BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM;
    BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;
    BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE;
    BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE;
    BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM;
    BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;
    BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;
    CLASS_ELEMENT_FLAG_STATIC = 4;
    CLASS_ELEMENT_KIND_GETTER = 2;
    CLASS_ELEMENT_KIND_SETTER = 1;
    CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;
    CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC;
    CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC;
    CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER;
    CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER;
    CLASS_ELEMENT_OTHER = 0;
    Scope = class {
      constructor(flags) {
        this.var = /* @__PURE__ */ new Set();
        this.lexical = /* @__PURE__ */ new Set();
        this.functions = /* @__PURE__ */ new Set();
        this.flags = flags;
      }
    };
    ScopeHandler = class {
      constructor(raise, inModule) {
        this.scopeStack = [];
        this.undefinedExports = /* @__PURE__ */ new Map();
        this.undefinedPrivateNames = /* @__PURE__ */ new Map();
        this.raise = raise;
        this.inModule = inModule;
      }
      get inFunction() {
        return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;
      }
      get allowSuper() {
        return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;
      }
      get allowDirectSuper() {
        return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;
      }
      get inClass() {
        return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;
      }
      get inClassAndNotInNonArrowFunction() {
        const flags = this.currentThisScopeFlags();
        return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;
      }
      get inStaticBlock() {
        for (let i = this.scopeStack.length - 1; ; i--) {
          const {
            flags
          } = this.scopeStack[i];
          if (flags & SCOPE_STATIC_BLOCK) {
            return true;
          }
          if (flags & (SCOPE_VAR | SCOPE_CLASS)) {
            return false;
          }
        }
      }
      get inNonArrowFunction() {
        return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;
      }
      get treatFunctionsAsVar() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
      }
      createScope(flags) {
        return new Scope(flags);
      }
      enter(flags) {
        this.scopeStack.push(this.createScope(flags));
      }
      exit() {
        this.scopeStack.pop();
      }
      treatFunctionsAsVarInScope(scope) {
        return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);
      }
      declareName(name, bindingType, pos) {
        let scope = this.currentScope();
        if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {
          this.checkRedeclarationInScope(scope, name, bindingType, pos);
          if (bindingType & BIND_SCOPE_FUNCTION) {
            scope.functions.add(name);
          } else {
            scope.lexical.add(name);
          }
          if (bindingType & BIND_SCOPE_LEXICAL) {
            this.maybeExportDefined(scope, name);
          }
        } else if (bindingType & BIND_SCOPE_VAR) {
          for (let i = this.scopeStack.length - 1; i >= 0; --i) {
            scope = this.scopeStack[i];
            this.checkRedeclarationInScope(scope, name, bindingType, pos);
            scope.var.add(name);
            this.maybeExportDefined(scope, name);
            if (scope.flags & SCOPE_VAR)
              break;
          }
        }
        if (this.inModule && scope.flags & SCOPE_PROGRAM) {
          this.undefinedExports.delete(name);
        }
      }
      maybeExportDefined(scope, name) {
        if (this.inModule && scope.flags & SCOPE_PROGRAM) {
          this.undefinedExports.delete(name);
        }
      }
      checkRedeclarationInScope(scope, name, bindingType, pos) {
        if (this.isRedeclaredInScope(scope, name, bindingType)) {
          this.raise(pos, ErrorMessages.VarRedeclaration, name);
        }
      }
      isRedeclaredInScope(scope, name, bindingType) {
        if (!(bindingType & BIND_KIND_VALUE))
          return false;
        if (bindingType & BIND_SCOPE_LEXICAL) {
          return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);
        }
        if (bindingType & BIND_SCOPE_FUNCTION) {
          return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);
        }
        return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);
      }
      checkLocalExport(id2) {
        const {
          name
        } = id2;
        const topLevelScope = this.scopeStack[0];
        if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {
          this.undefinedExports.set(name, id2.start);
        }
      }
      currentScope() {
        return this.scopeStack[this.scopeStack.length - 1];
      }
      currentVarScopeFlags() {
        for (let i = this.scopeStack.length - 1; ; i--) {
          const {
            flags
          } = this.scopeStack[i];
          if (flags & SCOPE_VAR) {
            return flags;
          }
        }
      }
      currentThisScopeFlags() {
        for (let i = this.scopeStack.length - 1; ; i--) {
          const {
            flags
          } = this.scopeStack[i];
          if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {
            return flags;
          }
        }
      }
    };
    FlowScope = class extends Scope {
      constructor(...args) {
        super(...args);
        this.declareFunctions = /* @__PURE__ */ new Set();
      }
    };
    FlowScopeHandler = class extends ScopeHandler {
      createScope(flags) {
        return new FlowScope(flags);
      }
      declareName(name, bindingType, pos) {
        const scope = this.currentScope();
        if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
          this.checkRedeclarationInScope(scope, name, bindingType, pos);
          this.maybeExportDefined(scope, name);
          scope.declareFunctions.add(name);
          return;
        }
        super.declareName(...arguments);
      }
      isRedeclaredInScope(scope, name, bindingType) {
        if (super.isRedeclaredInScope(...arguments))
          return true;
        if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
          return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));
        }
        return false;
      }
      checkLocalExport(id2) {
        if (!this.scopeStack[0].declareFunctions.has(id2.name)) {
          super.checkLocalExport(id2);
        }
      }
    };
    State = class {
      constructor() {
        this.strict = void 0;
        this.curLine = void 0;
        this.lineStart = void 0;
        this.startLoc = void 0;
        this.endLoc = void 0;
        this.errors = [];
        this.potentialArrowAt = -1;
        this.noArrowAt = [];
        this.noArrowParamsConversionAt = [];
        this.maybeInArrowParameters = false;
        this.inType = false;
        this.noAnonFunctionType = false;
        this.hasFlowComment = false;
        this.isAmbientContext = false;
        this.inAbstractClass = false;
        this.topicContext = {
          maxNumOfResolvableTopics: 0,
          maxTopicIndex: null
        };
        this.soloAwait = false;
        this.inFSharpPipelineDirectBody = false;
        this.labels = [];
        this.decoratorStack = [[]];
        this.comments = [];
        this.commentStack = [];
        this.pos = 0;
        this.type = 129;
        this.value = null;
        this.start = 0;
        this.end = 0;
        this.lastTokEndLoc = null;
        this.lastTokStartLoc = null;
        this.lastTokStart = 0;
        this.lastTokEnd = 0;
        this.context = [types.brace];
        this.canStartJSXElement = true;
        this.containsEsc = false;
        this.strictErrors = /* @__PURE__ */ new Map();
        this.tokensLength = 0;
      }
      init({
        strictMode,
        sourceType,
        startLine,
        startColumn
      }) {
        this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === "module";
        this.curLine = startLine;
        this.lineStart = -startColumn;
        this.startLoc = this.endLoc = new Position(startLine, startColumn);
      }
      curPosition() {
        return new Position(this.curLine, this.pos - this.lineStart);
      }
      clone(skipArrays) {
        const state = new State();
        const keys = Object.keys(this);
        for (let i = 0, length2 = keys.length; i < length2; i++) {
          const key = keys[i];
          let val = this[key];
          if (!skipArrays && Array.isArray(val)) {
            val = val.slice();
          }
          state[key] = val;
        }
        return state;
      }
    };
    _isDigit = function isDigit(code) {
      return code >= 48 && code <= 57;
    };
    VALID_REGEX_FLAGS = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100]);
    forbiddenNumericSeparatorSiblings = {
      decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],
      hex: [46, 88, 95, 120]
    };
    allowedNumericSeparatorSiblings = {};
    allowedNumericSeparatorSiblings.bin = [48, 49];
    allowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];
    allowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];
    allowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];
    Token = class {
      constructor(state) {
        this.type = state.type;
        this.value = state.value;
        this.start = state.start;
        this.end = state.end;
        this.loc = new SourceLocation(state.startLoc, state.endLoc);
      }
    };
    Tokenizer = class extends ParserError {
      constructor(options, input2) {
        super();
        this.isLookahead = void 0;
        this.tokens = [];
        this.state = new State();
        this.state.init(options);
        this.input = input2;
        this.length = input2.length;
        this.isLookahead = false;
      }
      pushToken(token) {
        this.tokens.length = this.state.tokensLength;
        this.tokens.push(token);
        ++this.state.tokensLength;
      }
      next() {
        this.checkKeywordEscapes();
        if (this.options.tokens) {
          this.pushToken(new Token(this.state));
        }
        this.state.lastTokEnd = this.state.end;
        this.state.lastTokStart = this.state.start;
        this.state.lastTokEndLoc = this.state.endLoc;
        this.state.lastTokStartLoc = this.state.startLoc;
        this.nextToken();
      }
      eat(type) {
        if (this.match(type)) {
          this.next();
          return true;
        } else {
          return false;
        }
      }
      match(type) {
        return this.state.type === type;
      }
      createLookaheadState(state) {
        return {
          pos: state.pos,
          value: null,
          type: state.type,
          start: state.start,
          end: state.end,
          lastTokEnd: state.end,
          context: [this.curContext()],
          inType: state.inType
        };
      }
      lookahead() {
        const old = this.state;
        this.state = this.createLookaheadState(old);
        this.isLookahead = true;
        this.nextToken();
        this.isLookahead = false;
        const curr = this.state;
        this.state = old;
        return curr;
      }
      nextTokenStart() {
        return this.nextTokenStartSince(this.state.pos);
      }
      nextTokenStartSince(pos) {
        skipWhiteSpace.lastIndex = pos;
        return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
      }
      lookaheadCharCode() {
        return this.input.charCodeAt(this.nextTokenStart());
      }
      codePointAtPos(pos) {
        let cp = this.input.charCodeAt(pos);
        if ((cp & 64512) === 55296 && ++pos < this.input.length) {
          const trail = this.input.charCodeAt(pos);
          if ((trail & 64512) === 56320) {
            cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
          }
        }
        return cp;
      }
      setStrict(strict) {
        this.state.strict = strict;
        if (strict) {
          this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));
          this.state.strictErrors.clear();
        }
      }
      curContext() {
        return this.state.context[this.state.context.length - 1];
      }
      nextToken() {
        const curContext = this.curContext();
        if (!curContext.preserveSpace)
          this.skipSpace();
        this.state.start = this.state.pos;
        if (!this.isLookahead)
          this.state.startLoc = this.state.curPosition();
        if (this.state.pos >= this.length) {
          this.finishToken(129);
          return;
        }
        if (curContext === types.template) {
          this.readTmplToken();
        } else {
          this.getTokenFromCode(this.codePointAtPos(this.state.pos));
        }
      }
      skipBlockComment() {
        let startLoc;
        if (!this.isLookahead)
          startLoc = this.state.curPosition();
        const start = this.state.pos;
        const end = this.input.indexOf("*/", start + 2);
        if (end === -1)
          throw this.raise(start, ErrorMessages.UnterminatedComment);
        this.state.pos = end + 2;
        lineBreakG.lastIndex = start + 2;
        while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {
          ++this.state.curLine;
          this.state.lineStart = lineBreakG.lastIndex;
        }
        if (this.isLookahead)
          return;
        const comment2 = {
          type: "CommentBlock",
          value: this.input.slice(start + 2, end),
          start,
          end: end + 2,
          loc: new SourceLocation(startLoc, this.state.curPosition())
        };
        if (this.options.tokens)
          this.pushToken(comment2);
        return comment2;
      }
      skipLineComment(startSkip) {
        const start = this.state.pos;
        let startLoc;
        if (!this.isLookahead)
          startLoc = this.state.curPosition();
        let ch = this.input.charCodeAt(this.state.pos += startSkip);
        if (this.state.pos < this.length) {
          while (!isNewLine(ch) && ++this.state.pos < this.length) {
            ch = this.input.charCodeAt(this.state.pos);
          }
        }
        if (this.isLookahead)
          return;
        const end = this.state.pos;
        const value = this.input.slice(start + startSkip, end);
        const comment2 = {
          type: "CommentLine",
          value,
          start,
          end,
          loc: new SourceLocation(startLoc, this.state.curPosition())
        };
        if (this.options.tokens)
          this.pushToken(comment2);
        return comment2;
      }
      skipSpace() {
        const spaceStart = this.state.pos;
        const comments = [];
        loop:
          while (this.state.pos < this.length) {
            const ch = this.input.charCodeAt(this.state.pos);
            switch (ch) {
              case 32:
              case 160:
              case 9:
                ++this.state.pos;
                break;
              case 13:
                if (this.input.charCodeAt(this.state.pos + 1) === 10) {
                  ++this.state.pos;
                }
              case 10:
              case 8232:
              case 8233:
                ++this.state.pos;
                ++this.state.curLine;
                this.state.lineStart = this.state.pos;
                break;
              case 47:
                switch (this.input.charCodeAt(this.state.pos + 1)) {
                  case 42: {
                    const comment2 = this.skipBlockComment();
                    if (comment2 !== void 0) {
                      this.addComment(comment2);
                      if (this.options.attachComment)
                        comments.push(comment2);
                    }
                    break;
                  }
                  case 47: {
                    const comment2 = this.skipLineComment(2);
                    if (comment2 !== void 0) {
                      this.addComment(comment2);
                      if (this.options.attachComment)
                        comments.push(comment2);
                    }
                    break;
                  }
                  default:
                    break loop;
                }
                break;
              default:
                if (isWhitespace(ch)) {
                  ++this.state.pos;
                } else if (ch === 45 && !this.inModule) {
                  const pos = this.state.pos;
                  if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
                    const comment2 = this.skipLineComment(3);
                    if (comment2 !== void 0) {
                      this.addComment(comment2);
                      if (this.options.attachComment)
                        comments.push(comment2);
                    }
                  } else {
                    break loop;
                  }
                } else if (ch === 60 && !this.inModule) {
                  const pos = this.state.pos;
                  if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {
                    const comment2 = this.skipLineComment(4);
                    if (comment2 !== void 0) {
                      this.addComment(comment2);
                      if (this.options.attachComment)
                        comments.push(comment2);
                    }
                  } else {
                    break loop;
                  }
                } else {
                  break loop;
                }
            }
          }
        if (comments.length > 0) {
          const end = this.state.pos;
          const CommentWhitespace = {
            start: spaceStart,
            end,
            comments,
            leadingNode: null,
            trailingNode: null,
            containingNode: null
          };
          this.state.commentStack.push(CommentWhitespace);
        }
      }
      finishToken(type, val) {
        this.state.end = this.state.pos;
        const prevType = this.state.type;
        this.state.type = type;
        this.state.value = val;
        if (!this.isLookahead) {
          this.state.endLoc = this.state.curPosition();
          this.updateContext(prevType);
        }
      }
      replaceToken(type) {
        this.state.type = type;
        this.updateContext();
      }
      readToken_numberSign() {
        if (this.state.pos === 0 && this.readToken_interpreter()) {
          return;
        }
        const nextPos = this.state.pos + 1;
        const next = this.codePointAtPos(nextPos);
        if (next >= 48 && next <= 57) {
          throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);
        }
        if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
          this.expectPlugin("recordAndTuple");
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "hash") {
            throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);
          }
          this.state.pos += 2;
          if (next === 123) {
            this.finishToken(7);
          } else {
            this.finishToken(1);
          }
        } else if (isIdentifierStart(next)) {
          ++this.state.pos;
          this.finishToken(128, this.readWord1(next));
        } else if (next === 92) {
          ++this.state.pos;
          this.finishToken(128, this.readWord1());
        } else {
          this.finishOp(25, 1);
        }
      }
      readToken_dot() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next >= 48 && next <= 57) {
          this.readNumber(true);
          return;
        }
        if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
          this.state.pos += 3;
          this.finishToken(21);
        } else {
          ++this.state.pos;
          this.finishToken(16);
        }
      }
      readToken_slash() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) {
          this.finishOp(29, 2);
        } else {
          this.finishOp(50, 1);
        }
      }
      readToken_interpreter() {
        if (this.state.pos !== 0 || this.length < 2)
          return false;
        let ch = this.input.charCodeAt(this.state.pos + 1);
        if (ch !== 33)
          return false;
        const start = this.state.pos;
        this.state.pos += 1;
        while (!isNewLine(ch) && ++this.state.pos < this.length) {
          ch = this.input.charCodeAt(this.state.pos);
        }
        const value = this.input.slice(start + 2, this.state.pos);
        this.finishToken(26, value);
        return true;
      }
      readToken_mult_modulo(code) {
        let type = code === 42 ? 49 : 48;
        let width = 1;
        let next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 42 && next === 42) {
          width++;
          next = this.input.charCodeAt(this.state.pos + 2);
          type = 51;
        }
        if (next === 61 && !this.state.inType) {
          width++;
          type = code === 37 ? 31 : 28;
        }
        this.finishOp(type, width);
      }
      readToken_pipe_amp(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === code) {
          if (this.input.charCodeAt(this.state.pos + 2) === 61) {
            this.finishOp(28, 3);
          } else {
            this.finishOp(code === 124 ? 37 : 38, 2);
          }
          return;
        }
        if (code === 124) {
          if (next === 62) {
            this.finishOp(35, 2);
            return;
          }
          if (this.hasPlugin("recordAndTuple") && next === 125) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
              throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);
            }
            this.state.pos += 2;
            this.finishToken(9);
            return;
          }
          if (this.hasPlugin("recordAndTuple") && next === 93) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
              throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);
            }
            this.state.pos += 2;
            this.finishToken(4);
            return;
          }
        }
        if (next === 61) {
          this.finishOp(28, 2);
          return;
        }
        this.finishOp(code === 124 ? 39 : 41, 1);
      }
      readToken_caret() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61 && !this.state.inType) {
          this.finishOp(30, 2);
        } else {
          this.finishOp(40, 1);
        }
      }
      readToken_plus_min(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === code) {
          this.finishOp(32, 2);
          return;
        }
        if (next === 61) {
          this.finishOp(28, 2);
        } else {
          this.finishOp(47, 1);
        }
      }
      readToken_lt() {
        const {
          pos
        } = this.state;
        const next = this.input.charCodeAt(pos + 1);
        if (next === 60) {
          if (this.input.charCodeAt(pos + 2) === 61) {
            this.finishOp(28, 3);
            return;
          }
          this.finishOp(46, 2);
          return;
        }
        if (next === 61) {
          this.finishOp(45, 2);
          return;
        }
        this.finishOp(43, 1);
      }
      readToken_gt() {
        const {
          pos
        } = this.state;
        const next = this.input.charCodeAt(pos + 1);
        if (next === 62) {
          const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;
          if (this.input.charCodeAt(pos + size) === 61) {
            this.finishOp(28, size + 1);
            return;
          }
          this.finishOp(46, size);
          return;
        }
        if (next === 61) {
          this.finishOp(45, 2);
          return;
        }
        this.finishOp(44, 1);
      }
      readToken_eq_excl(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) {
          this.finishOp(42, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
          return;
        }
        if (code === 61 && next === 62) {
          this.state.pos += 2;
          this.finishToken(19);
          return;
        }
        this.finishOp(code === 61 ? 27 : 33, 1);
      }
      readToken_question() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        const next2 = this.input.charCodeAt(this.state.pos + 2);
        if (next === 63) {
          if (next2 === 61) {
            this.finishOp(28, 3);
          } else {
            this.finishOp(36, 2);
          }
        } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
          this.state.pos += 2;
          this.finishToken(18);
        } else {
          ++this.state.pos;
          this.finishToken(17);
        }
      }
      getTokenFromCode(code) {
        switch (code) {
          case 46:
            this.readToken_dot();
            return;
          case 40:
            ++this.state.pos;
            this.finishToken(10);
            return;
          case 41:
            ++this.state.pos;
            this.finishToken(11);
            return;
          case 59:
            ++this.state.pos;
            this.finishToken(13);
            return;
          case 44:
            ++this.state.pos;
            this.finishToken(12);
            return;
          case 91:
            if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
              if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);
              }
              this.state.pos += 2;
              this.finishToken(2);
            } else {
              ++this.state.pos;
              this.finishToken(0);
            }
            return;
          case 93:
            ++this.state.pos;
            this.finishToken(3);
            return;
          case 123:
            if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
              if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);
              }
              this.state.pos += 2;
              this.finishToken(6);
            } else {
              ++this.state.pos;
              this.finishToken(5);
            }
            return;
          case 125:
            ++this.state.pos;
            this.finishToken(8);
            return;
          case 58:
            if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
              this.finishOp(15, 2);
            } else {
              ++this.state.pos;
              this.finishToken(14);
            }
            return;
          case 63:
            this.readToken_question();
            return;
          case 96:
            ++this.state.pos;
            this.finishToken(22);
            return;
          case 48: {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (next === 120 || next === 88) {
              this.readRadixNumber(16);
              return;
            }
            if (next === 111 || next === 79) {
              this.readRadixNumber(8);
              return;
            }
            if (next === 98 || next === 66) {
              this.readRadixNumber(2);
              return;
            }
          }
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            this.readNumber(false);
            return;
          case 34:
          case 39:
            this.readString(code);
            return;
          case 47:
            this.readToken_slash();
            return;
          case 37:
          case 42:
            this.readToken_mult_modulo(code);
            return;
          case 124:
          case 38:
            this.readToken_pipe_amp(code);
            return;
          case 94:
            this.readToken_caret();
            return;
          case 43:
          case 45:
            this.readToken_plus_min(code);
            return;
          case 60:
            this.readToken_lt();
            return;
          case 62:
            this.readToken_gt();
            return;
          case 61:
          case 33:
            this.readToken_eq_excl(code);
            return;
          case 126:
            this.finishOp(34, 1);
            return;
          case 64:
            ++this.state.pos;
            this.finishToken(24);
            return;
          case 35:
            this.readToken_numberSign();
            return;
          case 92:
            this.readWord();
            return;
          default:
            if (isIdentifierStart(code)) {
              this.readWord(code);
              return;
            }
        }
        throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));
      }
      finishOp(type, size) {
        const str = this.input.slice(this.state.pos, this.state.pos + size);
        this.state.pos += size;
        this.finishToken(type, str);
      }
      readRegexp() {
        const start = this.state.start + 1;
        let escaped, inClass;
        let {
          pos
        } = this.state;
        for (; ; ++pos) {
          if (pos >= this.length) {
            throw this.raise(start, ErrorMessages.UnterminatedRegExp);
          }
          const ch = this.input.charCodeAt(pos);
          if (isNewLine(ch)) {
            throw this.raise(start, ErrorMessages.UnterminatedRegExp);
          }
          if (escaped) {
            escaped = false;
          } else {
            if (ch === 91) {
              inClass = true;
            } else if (ch === 93 && inClass) {
              inClass = false;
            } else if (ch === 47 && !inClass) {
              break;
            }
            escaped = ch === 92;
          }
        }
        const content = this.input.slice(start, pos);
        ++pos;
        let mods = "";
        while (pos < this.length) {
          const cp = this.codePointAtPos(pos);
          const char = String.fromCharCode(cp);
          if (VALID_REGEX_FLAGS.has(cp)) {
            if (mods.includes(char)) {
              this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);
            }
          } else if (isIdentifierChar(cp) || cp === 92) {
            this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);
          } else {
            break;
          }
          ++pos;
          mods += char;
        }
        this.state.pos = pos;
        this.finishToken(127, {
          pattern: content,
          flags: mods
        });
      }
      readInt(radix, len, forceLen, allowNumSeparator = true) {
        const start = this.state.pos;
        const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
        const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;
        let invalid = false;
        let total = 0;
        for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
          const code = this.input.charCodeAt(this.state.pos);
          let val;
          if (code === 95) {
            const prev = this.input.charCodeAt(this.state.pos - 1);
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (allowedSiblings.indexOf(next) === -1) {
              this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);
            } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {
              this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);
            }
            if (!allowNumSeparator) {
              this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);
            }
            ++this.state.pos;
            continue;
          }
          if (code >= 97) {
            val = code - 97 + 10;
          } else if (code >= 65) {
            val = code - 65 + 10;
          } else if (_isDigit(code)) {
            val = code - 48;
          } else {
            val = Infinity;
          }
          if (val >= radix) {
            if (this.options.errorRecovery && val <= 9) {
              val = 0;
              this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);
            } else if (forceLen) {
              val = 0;
              invalid = true;
            } else {
              break;
            }
          }
          ++this.state.pos;
          total = total * radix + val;
        }
        if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {
          return null;
        }
        return total;
      }
      readRadixNumber(radix) {
        const start = this.state.pos;
        let isBigInt = false;
        this.state.pos += 2;
        const val = this.readInt(radix);
        if (val == null) {
          this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);
        }
        const next = this.input.charCodeAt(this.state.pos);
        if (next === 110) {
          ++this.state.pos;
          isBigInt = true;
        } else if (next === 109) {
          throw this.raise(start, ErrorMessages.InvalidDecimal);
        }
        if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
          throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);
        }
        if (isBigInt) {
          const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, "");
          this.finishToken(125, str);
          return;
        }
        this.finishToken(124, val);
      }
      readNumber(startsWithDot) {
        const start = this.state.pos;
        let isFloat = false;
        let isBigInt = false;
        let isDecimal = false;
        let hasExponent = false;
        let isOctal = false;
        if (!startsWithDot && this.readInt(10) === null) {
          this.raise(start, ErrorMessages.InvalidNumber);
        }
        const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;
        if (hasLeadingZero) {
          const integer2 = this.input.slice(start, this.state.pos);
          this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);
          if (!this.state.strict) {
            const underscorePos = integer2.indexOf("_");
            if (underscorePos > 0) {
              this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);
            }
          }
          isOctal = hasLeadingZero && !/[89]/.test(integer2);
        }
        let next = this.input.charCodeAt(this.state.pos);
        if (next === 46 && !isOctal) {
          ++this.state.pos;
          this.readInt(10);
          isFloat = true;
          next = this.input.charCodeAt(this.state.pos);
        }
        if ((next === 69 || next === 101) && !isOctal) {
          next = this.input.charCodeAt(++this.state.pos);
          if (next === 43 || next === 45) {
            ++this.state.pos;
          }
          if (this.readInt(10) === null) {
            this.raise(start, ErrorMessages.InvalidOrMissingExponent);
          }
          isFloat = true;
          hasExponent = true;
          next = this.input.charCodeAt(this.state.pos);
        }
        if (next === 110) {
          if (isFloat || hasLeadingZero) {
            this.raise(start, ErrorMessages.InvalidBigIntLiteral);
          }
          ++this.state.pos;
          isBigInt = true;
        }
        if (next === 109) {
          this.expectPlugin("decimal", this.state.pos);
          if (hasExponent || hasLeadingZero) {
            this.raise(start, ErrorMessages.InvalidDecimal);
          }
          ++this.state.pos;
          isDecimal = true;
        }
        if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
          throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);
        }
        const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
        if (isBigInt) {
          this.finishToken(125, str);
          return;
        }
        if (isDecimal) {
          this.finishToken(126, str);
          return;
        }
        const val = isOctal ? parseInt(str, 8) : parseFloat(str);
        this.finishToken(124, val);
      }
      readCodePoint(throwOnInvalid) {
        const ch = this.input.charCodeAt(this.state.pos);
        let code;
        if (ch === 123) {
          const codePos = ++this.state.pos;
          code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos, true, throwOnInvalid);
          ++this.state.pos;
          if (code !== null && code > 1114111) {
            if (throwOnInvalid) {
              this.raise(codePos, ErrorMessages.InvalidCodePoint);
            } else {
              return null;
            }
          }
        } else {
          code = this.readHexChar(4, false, throwOnInvalid);
        }
        return code;
      }
      readString(quote) {
        let out = "", chunkStart = ++this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.length) {
            throw this.raise(this.state.start, ErrorMessages.UnterminatedString);
          }
          const ch = this.input.charCodeAt(this.state.pos);
          if (ch === quote)
            break;
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.readEscapedChar(false);
            chunkStart = this.state.pos;
          } else if (ch === 8232 || ch === 8233) {
            ++this.state.pos;
            ++this.state.curLine;
            this.state.lineStart = this.state.pos;
          } else if (isNewLine(ch)) {
            throw this.raise(this.state.start, ErrorMessages.UnterminatedString);
          } else {
            ++this.state.pos;
          }
        }
        out += this.input.slice(chunkStart, this.state.pos++);
        this.finishToken(123, out);
      }
      readTmplToken() {
        let out = "", chunkStart = this.state.pos, containsInvalid = false;
        for (; ; ) {
          if (this.state.pos >= this.length) {
            throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);
          }
          const ch = this.input.charCodeAt(this.state.pos);
          if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
            if (this.state.pos === this.state.start && this.match(20)) {
              if (ch === 36) {
                this.state.pos += 2;
                this.finishToken(23);
                return;
              } else {
                ++this.state.pos;
                this.finishToken(22);
                return;
              }
            }
            out += this.input.slice(chunkStart, this.state.pos);
            this.finishToken(20, containsInvalid ? null : out);
            return;
          }
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.state.pos);
            const escaped = this.readEscapedChar(true);
            if (escaped === null) {
              containsInvalid = true;
            } else {
              out += escaped;
            }
            chunkStart = this.state.pos;
          } else if (isNewLine(ch)) {
            out += this.input.slice(chunkStart, this.state.pos);
            ++this.state.pos;
            switch (ch) {
              case 13:
                if (this.input.charCodeAt(this.state.pos) === 10) {
                  ++this.state.pos;
                }
              case 10:
                out += "\n";
                break;
              default:
                out += String.fromCharCode(ch);
                break;
            }
            ++this.state.curLine;
            this.state.lineStart = this.state.pos;
            chunkStart = this.state.pos;
          } else {
            ++this.state.pos;
          }
        }
      }
      recordStrictModeErrors(pos, message) {
        if (this.state.strict && !this.state.strictErrors.has(pos)) {
          this.raise(pos, message);
        } else {
          this.state.strictErrors.set(pos, message);
        }
      }
      readEscapedChar(inTemplate) {
        const throwOnInvalid = !inTemplate;
        const ch = this.input.charCodeAt(++this.state.pos);
        ++this.state.pos;
        switch (ch) {
          case 110:
            return "\n";
          case 114:
            return "\r";
          case 120: {
            const code = this.readHexChar(2, false, throwOnInvalid);
            return code === null ? null : String.fromCharCode(code);
          }
          case 117: {
            const code = this.readCodePoint(throwOnInvalid);
            return code === null ? null : String.fromCodePoint(code);
          }
          case 116:
            return "	";
          case 98:
            return "\b";
          case 118:
            return "\v";
          case 102:
            return "\f";
          case 13:
            if (this.input.charCodeAt(this.state.pos) === 10) {
              ++this.state.pos;
            }
          case 10:
            this.state.lineStart = this.state.pos;
            ++this.state.curLine;
          case 8232:
          case 8233:
            return "";
          case 56:
          case 57:
            if (inTemplate) {
              return null;
            } else {
              this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);
            }
          default:
            if (ch >= 48 && ch <= 55) {
              const codePos = this.state.pos - 1;
              const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);
              let octalStr = match[0];
              let octal = parseInt(octalStr, 8);
              if (octal > 255) {
                octalStr = octalStr.slice(0, -1);
                octal = parseInt(octalStr, 8);
              }
              this.state.pos += octalStr.length - 1;
              const next = this.input.charCodeAt(this.state.pos);
              if (octalStr !== "0" || next === 56 || next === 57) {
                if (inTemplate) {
                  return null;
                } else {
                  this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);
                }
              }
              return String.fromCharCode(octal);
            }
            return String.fromCharCode(ch);
        }
      }
      readHexChar(len, forceLen, throwOnInvalid) {
        const codePos = this.state.pos;
        const n2 = this.readInt(16, len, forceLen, false);
        if (n2 === null) {
          if (throwOnInvalid) {
            this.raise(codePos, ErrorMessages.InvalidEscapeSequence);
          } else {
            this.state.pos = codePos - 1;
          }
        }
        return n2;
      }
      readWord1(firstCode) {
        this.state.containsEsc = false;
        let word = "";
        const start = this.state.pos;
        let chunkStart = this.state.pos;
        if (firstCode !== void 0) {
          this.state.pos += firstCode <= 65535 ? 1 : 2;
        }
        while (this.state.pos < this.length) {
          const ch = this.codePointAtPos(this.state.pos);
          if (isIdentifierChar(ch)) {
            this.state.pos += ch <= 65535 ? 1 : 2;
          } else if (ch === 92) {
            this.state.containsEsc = true;
            word += this.input.slice(chunkStart, this.state.pos);
            const escStart = this.state.pos;
            const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;
            if (this.input.charCodeAt(++this.state.pos) !== 117) {
              this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);
              chunkStart = this.state.pos - 1;
              continue;
            }
            ++this.state.pos;
            const esc = this.readCodePoint(true);
            if (esc !== null) {
              if (!identifierCheck(esc)) {
                this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);
              }
              word += String.fromCodePoint(esc);
            }
            chunkStart = this.state.pos;
          } else {
            break;
          }
        }
        return word + this.input.slice(chunkStart, this.state.pos);
      }
      readWord(firstCode) {
        const word = this.readWord1(firstCode);
        const type = keywords$1.get(word);
        if (type !== void 0) {
          this.finishToken(type, tokenLabelName(type));
        } else {
          this.finishToken(122, word);
        }
      }
      checkKeywordEscapes() {
        const {
          type
        } = this.state;
        if (tokenIsKeyword(type) && this.state.containsEsc) {
          this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, tokenLabelName(type));
        }
      }
      updateContext(prevType) {
        const {
          context,
          type
        } = this.state;
        switch (type) {
          case 8:
            context.pop();
            break;
          case 5:
          case 7:
          case 23:
            context.push(types.brace);
            break;
          case 22:
            if (context[context.length - 1] === types.template) {
              context.pop();
            } else {
              context.push(types.template);
            }
            break;
        }
      }
    };
    ClassScope = class {
      constructor() {
        this.privateNames = /* @__PURE__ */ new Set();
        this.loneAccessors = /* @__PURE__ */ new Map();
        this.undefinedPrivateNames = /* @__PURE__ */ new Map();
      }
    };
    ClassScopeHandler = class {
      constructor(raise) {
        this.stack = [];
        this.undefinedPrivateNames = /* @__PURE__ */ new Map();
        this.raise = raise;
      }
      current() {
        return this.stack[this.stack.length - 1];
      }
      enter() {
        this.stack.push(new ClassScope());
      }
      exit() {
        const oldClassScope = this.stack.pop();
        const current = this.current();
        for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {
          if (current) {
            if (!current.undefinedPrivateNames.has(name)) {
              current.undefinedPrivateNames.set(name, pos);
            }
          } else {
            this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);
          }
        }
      }
      declarePrivateName(name, elementType, pos) {
        const classScope = this.current();
        let redefined = classScope.privateNames.has(name);
        if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {
          const accessor = redefined && classScope.loneAccessors.get(name);
          if (accessor) {
            const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;
            const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;
            const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;
            const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;
            redefined = oldKind === newKind || oldStatic !== newStatic;
            if (!redefined)
              classScope.loneAccessors.delete(name);
          } else if (!redefined) {
            classScope.loneAccessors.set(name, elementType);
          }
        }
        if (redefined) {
          this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);
        }
        classScope.privateNames.add(name);
        classScope.undefinedPrivateNames.delete(name);
      }
      usePrivateName(name, pos) {
        let classScope;
        for (classScope of this.stack) {
          if (classScope.privateNames.has(name))
            return;
        }
        if (classScope) {
          classScope.undefinedPrivateNames.set(name, pos);
        } else {
          this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);
        }
      }
    };
    kExpression = 0;
    kMaybeArrowParameterDeclaration = 1;
    kMaybeAsyncArrowParameterDeclaration = 2;
    kParameterDeclaration = 3;
    ExpressionScope = class {
      constructor(type = kExpression) {
        this.type = void 0;
        this.type = type;
      }
      canBeArrowParameterDeclaration() {
        return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;
      }
      isCertainlyParameterDeclaration() {
        return this.type === kParameterDeclaration;
      }
    };
    ArrowHeadParsingScope = class extends ExpressionScope {
      constructor(type) {
        super(type);
        this.errors = /* @__PURE__ */ new Map();
      }
      recordDeclarationError(pos, template) {
        this.errors.set(pos, template);
      }
      clearDeclarationError(pos) {
        this.errors.delete(pos);
      }
      iterateErrors(iterator) {
        this.errors.forEach(iterator);
      }
    };
    ExpressionScopeHandler = class {
      constructor(raise) {
        this.stack = [new ExpressionScope()];
        this.raise = raise;
      }
      enter(scope) {
        this.stack.push(scope);
      }
      exit() {
        this.stack.pop();
      }
      recordParameterInitializerError(pos, template) {
        const {
          stack
        } = this;
        let i = stack.length - 1;
        let scope = stack[i];
        while (!scope.isCertainlyParameterDeclaration()) {
          if (scope.canBeArrowParameterDeclaration()) {
            scope.recordDeclarationError(pos, template);
          } else {
            return;
          }
          scope = stack[--i];
        }
        this.raise(pos, template);
      }
      recordParenthesizedIdentifierError(pos, template) {
        const {
          stack
        } = this;
        const scope = stack[stack.length - 1];
        if (scope.isCertainlyParameterDeclaration()) {
          this.raise(pos, template);
        } else if (scope.canBeArrowParameterDeclaration()) {
          scope.recordDeclarationError(pos, template);
        } else {
          return;
        }
      }
      recordAsyncArrowParametersError(pos, template) {
        const {
          stack
        } = this;
        let i = stack.length - 1;
        let scope = stack[i];
        while (scope.canBeArrowParameterDeclaration()) {
          if (scope.type === kMaybeAsyncArrowParameterDeclaration) {
            scope.recordDeclarationError(pos, template);
          }
          scope = stack[--i];
        }
      }
      validateAsPattern() {
        const {
          stack
        } = this;
        const currentScope = stack[stack.length - 1];
        if (!currentScope.canBeArrowParameterDeclaration())
          return;
        currentScope.iterateErrors((template, pos) => {
          this.raise(pos, template);
          let i = stack.length - 2;
          let scope = stack[i];
          while (scope.canBeArrowParameterDeclaration()) {
            scope.clearDeclarationError(pos);
            scope = stack[--i];
          }
        });
      }
    };
    PARAM = 0;
    PARAM_YIELD = 1;
    PARAM_AWAIT = 2;
    PARAM_RETURN = 4;
    PARAM_IN = 8;
    ProductionParameterHandler = class {
      constructor() {
        this.stacks = [];
      }
      enter(flags) {
        this.stacks.push(flags);
      }
      exit() {
        this.stacks.pop();
      }
      currentFlags() {
        return this.stacks[this.stacks.length - 1];
      }
      get hasAwait() {
        return (this.currentFlags() & PARAM_AWAIT) > 0;
      }
      get hasYield() {
        return (this.currentFlags() & PARAM_YIELD) > 0;
      }
      get hasReturn() {
        return (this.currentFlags() & PARAM_RETURN) > 0;
      }
      get hasIn() {
        return (this.currentFlags() & PARAM_IN) > 0;
      }
    };
    UtilParser = class extends Tokenizer {
      addExtra(node2, key, val) {
        if (!node2)
          return;
        const extra = node2.extra = node2.extra || {};
        extra[key] = val;
      }
      isContextual(token) {
        return this.state.type === token && !this.state.containsEsc;
      }
      isUnparsedContextual(nameStart, name) {
        const nameEnd = nameStart + name.length;
        if (this.input.slice(nameStart, nameEnd) === name) {
          const nextCh = this.input.charCodeAt(nameEnd);
          return !(isIdentifierChar(nextCh) || (nextCh & 64512) === 55296);
        }
        return false;
      }
      isLookaheadContextual(name) {
        const next = this.nextTokenStart();
        return this.isUnparsedContextual(next, name);
      }
      eatContextual(token) {
        if (this.isContextual(token)) {
          this.next();
          return true;
        }
        return false;
      }
      expectContextual(token, template) {
        if (!this.eatContextual(token))
          this.unexpected(null, template);
      }
      canInsertSemicolon() {
        return this.match(129) || this.match(8) || this.hasPrecedingLineBreak();
      }
      hasPrecedingLineBreak() {
        return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
      }
      hasFollowingLineBreak() {
        skipWhiteSpaceToLineBreak.lastIndex = this.state.end;
        return skipWhiteSpaceToLineBreak.test(this.input);
      }
      isLineTerminator() {
        return this.eat(13) || this.canInsertSemicolon();
      }
      semicolon(allowAsi = true) {
        if (allowAsi ? this.isLineTerminator() : this.eat(13))
          return;
        this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);
      }
      expect(type, pos) {
        this.eat(type) || this.unexpected(pos, type);
      }
      assertNoSpace(message = "Unexpected space.") {
        if (this.state.start > this.state.lastTokEnd) {
          this.raise(this.state.lastTokEnd, {
            code: ErrorCodes.SyntaxError,
            reasonCode: "UnexpectedSpace",
            template: message
          });
        }
      }
      unexpected(pos, messageOrType = {
        code: ErrorCodes.SyntaxError,
        reasonCode: "UnexpectedToken",
        template: "Unexpected token"
      }) {
        if (isTokenType(messageOrType)) {
          messageOrType = {
            code: ErrorCodes.SyntaxError,
            reasonCode: "UnexpectedToken",
            template: `Unexpected token, expected "${tokenLabelName(messageOrType)}"`
          };
        }
        throw this.raise(pos != null ? pos : this.state.start, messageOrType);
      }
      expectPlugin(name, pos) {
        if (!this.hasPlugin(name)) {
          throw this.raiseWithData(pos != null ? pos : this.state.start, {
            missingPlugin: [name]
          }, `This experimental syntax requires enabling the parser plugin: '${name}'`);
        }
        return true;
      }
      expectOnePlugin(names, pos) {
        if (!names.some((n2) => this.hasPlugin(n2))) {
          throw this.raiseWithData(pos != null ? pos : this.state.start, {
            missingPlugin: names
          }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(", ")}'`);
        }
      }
      tryParse(fn, oldState = this.state.clone()) {
        const abortSignal = {
          node: null
        };
        try {
          const node2 = fn((node3 = null) => {
            abortSignal.node = node3;
            throw abortSignal;
          });
          if (this.state.errors.length > oldState.errors.length) {
            const failState = this.state;
            this.state = oldState;
            this.state.tokensLength = failState.tokensLength;
            return {
              node: node2,
              error: failState.errors[oldState.errors.length],
              thrown: false,
              aborted: false,
              failState
            };
          }
          return {
            node: node2,
            error: null,
            thrown: false,
            aborted: false,
            failState: null
          };
        } catch (error2) {
          const failState = this.state;
          this.state = oldState;
          if (error2 instanceof SyntaxError) {
            return {
              node: null,
              error: error2,
              thrown: true,
              aborted: false,
              failState
            };
          }
          if (error2 === abortSignal) {
            return {
              node: abortSignal.node,
              error: null,
              thrown: false,
              aborted: true,
              failState
            };
          }
          throw error2;
        }
      }
      checkExpressionErrors(refExpressionErrors, andThrow) {
        if (!refExpressionErrors)
          return false;
        const {
          shorthandAssign,
          doubleProto,
          optionalParameters
        } = refExpressionErrors;
        const hasErrors = shorthandAssign + doubleProto + optionalParameters > -3;
        if (!andThrow) {
          return hasErrors;
        } else if (hasErrors) {
          if (shorthandAssign >= 0) {
            this.unexpected(shorthandAssign);
          }
          if (doubleProto >= 0) {
            this.raise(doubleProto, ErrorMessages.DuplicateProto);
          }
          if (optionalParameters >= 0) {
            this.unexpected(optionalParameters);
          }
        }
      }
      isLiteralPropertyName() {
        return tokenIsLiteralPropertyName(this.state.type);
      }
      isPrivateName(node2) {
        return node2.type === "PrivateName";
      }
      getPrivateNameSV(node2) {
        return node2.id.name;
      }
      hasPropertyAsPrivateName(node2) {
        return (node2.type === "MemberExpression" || node2.type === "OptionalMemberExpression") && this.isPrivateName(node2.property);
      }
      isOptionalChain(node2) {
        return node2.type === "OptionalMemberExpression" || node2.type === "OptionalCallExpression";
      }
      isObjectProperty(node2) {
        return node2.type === "ObjectProperty";
      }
      isObjectMethod(node2) {
        return node2.type === "ObjectMethod";
      }
      initializeScopes(inModule = this.options.sourceType === "module") {
        const oldLabels = this.state.labels;
        this.state.labels = [];
        const oldExportedIdentifiers = this.exportedIdentifiers;
        this.exportedIdentifiers = /* @__PURE__ */ new Set();
        const oldInModule = this.inModule;
        this.inModule = inModule;
        const oldScope = this.scope;
        const ScopeHandler2 = this.getScopeHandler();
        this.scope = new ScopeHandler2(this.raise.bind(this), this.inModule);
        const oldProdParam = this.prodParam;
        this.prodParam = new ProductionParameterHandler();
        const oldClassScope = this.classScope;
        this.classScope = new ClassScopeHandler(this.raise.bind(this));
        const oldExpressionScope = this.expressionScope;
        this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));
        return () => {
          this.state.labels = oldLabels;
          this.exportedIdentifiers = oldExportedIdentifiers;
          this.inModule = oldInModule;
          this.scope = oldScope;
          this.prodParam = oldProdParam;
          this.classScope = oldClassScope;
          this.expressionScope = oldExpressionScope;
        };
      }
      enterInitialScopes() {
        let paramFlags = PARAM;
        if (this.inModule) {
          paramFlags |= PARAM_AWAIT;
        }
        this.scope.enter(SCOPE_PROGRAM);
        this.prodParam.enter(paramFlags);
      }
    };
    ExpressionErrors = class {
      constructor() {
        this.shorthandAssign = -1;
        this.doubleProto = -1;
        this.optionalParameters = -1;
      }
    };
    Node = class {
      constructor(parser2, pos, loc) {
        this.type = "";
        this.start = pos;
        this.end = 0;
        this.loc = new SourceLocation(loc);
        if (parser2 != null && parser2.options.ranges)
          this.range = [pos, 0];
        if (parser2 != null && parser2.filename)
          this.loc.filename = parser2.filename;
      }
    };
    NodePrototype = Node.prototype;
    {
      NodePrototype.__clone = function() {
        const newNode = new Node();
        const keys = Object.keys(this);
        for (let i = 0, length2 = keys.length; i < length2; i++) {
          const key = keys[i];
          if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") {
            newNode[key] = this[key];
          }
        }
        return newNode;
      };
    }
    NodeUtils = class extends UtilParser {
      startNode() {
        return new Node(this, this.state.start, this.state.startLoc);
      }
      startNodeAt(pos, loc) {
        return new Node(this, pos, loc);
      }
      startNodeAtNode(type) {
        return this.startNodeAt(type.start, type.loc.start);
      }
      finishNode(node2, type) {
        return this.finishNodeAt(node2, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
      }
      finishNodeAt(node2, type, pos, loc) {
        node2.type = type;
        node2.end = pos;
        node2.loc.end = loc;
        if (this.options.ranges)
          node2.range[1] = pos;
        if (this.options.attachComment)
          this.processComment(node2);
        return node2;
      }
      resetStartLocation(node2, start, startLoc) {
        node2.start = start;
        node2.loc.start = startLoc;
        if (this.options.ranges)
          node2.range[0] = start;
      }
      resetEndLocation(node2, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {
        node2.end = end;
        node2.loc.end = endLoc;
        if (this.options.ranges)
          node2.range[1] = end;
      }
      resetStartLocationFromNode(node2, locationNode) {
        this.resetStartLocation(node2, locationNode.start, locationNode.loc.start);
      }
    };
    reservedTypes = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);
    FlowErrors = makeErrorTemplates({
      AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
      AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
      AssignReservedType: "Cannot overwrite reserved type %0.",
      DeclareClassElement: "The `declare` modifier can only appear on class fields.",
      DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
      DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
      EnumBooleanMemberNotInitialized: "Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.",
      EnumDuplicateMemberName: "Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.",
      EnumInconsistentMemberValues: "Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.",
      EnumInvalidExplicitType: "Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.",
      EnumInvalidExplicitTypeUnknownSupplied: "Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.",
      EnumInvalidMemberInitializerPrimaryType: "Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.",
      EnumInvalidMemberInitializerSymbolType: "Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.",
      EnumInvalidMemberInitializerUnknownType: "The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.",
      EnumInvalidMemberName: "Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.",
      EnumNumberMemberNotInitialized: "Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.",
      EnumStringMemberInconsistentlyInitailized: "String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.",
      GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
      ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
      InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
      InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
      InexactVariance: "Explicit inexact syntax cannot have variance.",
      InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
      MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
      NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
      NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
      PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
      SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
      SpreadVariance: "Spread properties cannot have variance.",
      ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
      ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
      ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
      ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
      ThisParamNoDefault: "The `this` parameter may not have a default value.",
      TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
      TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
      UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
      UnexpectedReservedType: "Unexpected reserved type %0.",
      UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
      UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
      UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
      UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
      UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
      UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
      UnsupportedDeclareExportKind: "`declare export %0` is not supported. Use `%1` instead.",
      UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
      UnterminatedFlowComment: "Unterminated flow-comment."
    }, ErrorCodes.SyntaxError, "flow");
    exportSuggestions = {
      const: "declare export var",
      let: "declare export var",
      type: "export type",
      interface: "export interface"
    };
    FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
    flow = (superClass) => class extends superClass {
      constructor(...args) {
        super(...args);
        this.flowPragma = void 0;
      }
      getScopeHandler() {
        return FlowScopeHandler;
      }
      shouldParseTypes() {
        return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
      }
      shouldParseEnums() {
        return !!this.getPluginOption("flow", "enums");
      }
      finishToken(type, val) {
        if (type !== 123 && type !== 13 && type !== 26) {
          if (this.flowPragma === void 0) {
            this.flowPragma = null;
          }
        }
        return super.finishToken(type, val);
      }
      addComment(comment2) {
        if (this.flowPragma === void 0) {
          const matches = FLOW_PRAGMA_REGEX.exec(comment2.value);
          if (!matches)
            ;
          else if (matches[1] === "flow") {
            this.flowPragma = "flow";
          } else if (matches[1] === "noflow") {
            this.flowPragma = "noflow";
          } else {
            throw new Error("Unexpected flow pragma");
          }
        }
        return super.addComment(comment2);
      }
      flowParseTypeInitialiser(tok) {
        const oldInType = this.state.inType;
        this.state.inType = true;
        this.expect(tok || 14);
        const type = this.flowParseType();
        this.state.inType = oldInType;
        return type;
      }
      flowParsePredicate() {
        const node2 = this.startNode();
        const moduloPos = this.state.start;
        this.next();
        this.expectContextual(101);
        if (this.state.lastTokStart > moduloPos + 1) {
          this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);
        }
        if (this.eat(10)) {
          node2.value = this.parseExpression();
          this.expect(11);
          return this.finishNode(node2, "DeclaredPredicate");
        } else {
          return this.finishNode(node2, "InferredPredicate");
        }
      }
      flowParseTypeAndPredicateInitialiser() {
        const oldInType = this.state.inType;
        this.state.inType = true;
        this.expect(14);
        let type = null;
        let predicate = null;
        if (this.match(48)) {
          this.state.inType = oldInType;
          predicate = this.flowParsePredicate();
        } else {
          type = this.flowParseType();
          this.state.inType = oldInType;
          if (this.match(48)) {
            predicate = this.flowParsePredicate();
          }
        }
        return [type, predicate];
      }
      flowParseDeclareClass(node2) {
        this.next();
        this.flowParseInterfaceish(node2, true);
        return this.finishNode(node2, "DeclareClass");
      }
      flowParseDeclareFunction(node2) {
        this.next();
        const id2 = node2.id = this.parseIdentifier();
        const typeNode = this.startNode();
        const typeContainer = this.startNode();
        if (this.match(43)) {
          typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          typeNode.typeParameters = null;
        }
        this.expect(10);
        const tmp = this.flowParseFunctionTypeParams();
        typeNode.params = tmp.params;
        typeNode.rest = tmp.rest;
        typeNode.this = tmp._this;
        this.expect(11);
        [typeNode.returnType, node2.predicate] = this.flowParseTypeAndPredicateInitialiser();
        typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
        id2.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
        this.resetEndLocation(id2);
        this.semicolon();
        this.scope.declareName(node2.id.name, BIND_FLOW_DECLARE_FN, node2.id.start);
        return this.finishNode(node2, "DeclareFunction");
      }
      flowParseDeclare(node2, insideModule) {
        if (this.match(74)) {
          return this.flowParseDeclareClass(node2);
        } else if (this.match(62)) {
          return this.flowParseDeclareFunction(node2);
        } else if (this.match(68)) {
          return this.flowParseDeclareVariable(node2);
        } else if (this.eatContextual(117)) {
          if (this.match(16)) {
            return this.flowParseDeclareModuleExports(node2);
          } else {
            if (insideModule) {
              this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);
            }
            return this.flowParseDeclareModule(node2);
          }
        } else if (this.isContextual(120)) {
          return this.flowParseDeclareTypeAlias(node2);
        } else if (this.isContextual(121)) {
          return this.flowParseDeclareOpaqueType(node2);
        } else if (this.isContextual(119)) {
          return this.flowParseDeclareInterface(node2);
        } else if (this.match(76)) {
          return this.flowParseDeclareExportDeclaration(node2, insideModule);
        } else {
          throw this.unexpected();
        }
      }
      flowParseDeclareVariable(node2) {
        this.next();
        node2.id = this.flowParseTypeAnnotatableIdentifier(true);
        this.scope.declareName(node2.id.name, BIND_VAR, node2.id.start);
        this.semicolon();
        return this.finishNode(node2, "DeclareVariable");
      }
      flowParseDeclareModule(node2) {
        this.scope.enter(SCOPE_OTHER);
        if (this.match(123)) {
          node2.id = this.parseExprAtom();
        } else {
          node2.id = this.parseIdentifier();
        }
        const bodyNode = node2.body = this.startNode();
        const body = bodyNode.body = [];
        this.expect(5);
        while (!this.match(8)) {
          let bodyNode2 = this.startNode();
          if (this.match(77)) {
            this.next();
            if (!this.isContextual(120) && !this.match(81)) {
              this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);
            }
            this.parseImport(bodyNode2);
          } else {
            this.expectContextual(115, FlowErrors.UnsupportedStatementInDeclareModule);
            bodyNode2 = this.flowParseDeclare(bodyNode2, true);
          }
          body.push(bodyNode2);
        }
        this.scope.exit();
        this.expect(8);
        this.finishNode(bodyNode, "BlockStatement");
        let kind = null;
        let hasModuleExport = false;
        body.forEach((bodyElement) => {
          if (isEsModuleType(bodyElement)) {
            if (kind === "CommonJS") {
              this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);
            }
            kind = "ES";
          } else if (bodyElement.type === "DeclareModuleExports") {
            if (hasModuleExport) {
              this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);
            }
            if (kind === "ES") {
              this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);
            }
            kind = "CommonJS";
            hasModuleExport = true;
          }
        });
        node2.kind = kind || "CommonJS";
        return this.finishNode(node2, "DeclareModule");
      }
      flowParseDeclareExportDeclaration(node2, insideModule) {
        this.expect(76);
        if (this.eat(59)) {
          if (this.match(62) || this.match(74)) {
            node2.declaration = this.flowParseDeclare(this.startNode());
          } else {
            node2.declaration = this.flowParseType();
            this.semicolon();
          }
          node2.default = true;
          return this.finishNode(node2, "DeclareExportDeclaration");
        } else {
          if (this.match(69) || this.isLet() || (this.isContextual(120) || this.isContextual(119)) && !insideModule) {
            const label = this.state.value;
            const suggestion = exportSuggestions[label];
            throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);
          }
          if (this.match(68) || this.match(62) || this.match(74) || this.isContextual(121)) {
            node2.declaration = this.flowParseDeclare(this.startNode());
            node2.default = false;
            return this.finishNode(node2, "DeclareExportDeclaration");
          } else if (this.match(49) || this.match(5) || this.isContextual(119) || this.isContextual(120) || this.isContextual(121)) {
            node2 = this.parseExport(node2);
            if (node2.type === "ExportNamedDeclaration") {
              node2.type = "ExportDeclaration";
              node2.default = false;
              delete node2.exportKind;
            }
            node2.type = "Declare" + node2.type;
            return node2;
          }
        }
        throw this.unexpected();
      }
      flowParseDeclareModuleExports(node2) {
        this.next();
        this.expectContextual(102);
        node2.typeAnnotation = this.flowParseTypeAnnotation();
        this.semicolon();
        return this.finishNode(node2, "DeclareModuleExports");
      }
      flowParseDeclareTypeAlias(node2) {
        this.next();
        this.flowParseTypeAlias(node2);
        node2.type = "DeclareTypeAlias";
        return node2;
      }
      flowParseDeclareOpaqueType(node2) {
        this.next();
        this.flowParseOpaqueType(node2, true);
        node2.type = "DeclareOpaqueType";
        return node2;
      }
      flowParseDeclareInterface(node2) {
        this.next();
        this.flowParseInterfaceish(node2);
        return this.finishNode(node2, "DeclareInterface");
      }
      flowParseInterfaceish(node2, isClass = false) {
        node2.id = this.flowParseRestrictedIdentifier(!isClass, true);
        this.scope.declareName(node2.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node2.id.start);
        if (this.match(43)) {
          node2.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          node2.typeParameters = null;
        }
        node2.extends = [];
        node2.implements = [];
        node2.mixins = [];
        if (this.eat(75)) {
          do {
            node2.extends.push(this.flowParseInterfaceExtends());
          } while (!isClass && this.eat(12));
        }
        if (this.isContextual(108)) {
          this.next();
          do {
            node2.mixins.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
        if (this.isContextual(104)) {
          this.next();
          do {
            node2.implements.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
        node2.body = this.flowParseObjectType({
          allowStatic: isClass,
          allowExact: false,
          allowSpread: false,
          allowProto: isClass,
          allowInexact: false
        });
      }
      flowParseInterfaceExtends() {
        const node2 = this.startNode();
        node2.id = this.flowParseQualifiedTypeIdentifier();
        if (this.match(43)) {
          node2.typeParameters = this.flowParseTypeParameterInstantiation();
        } else {
          node2.typeParameters = null;
        }
        return this.finishNode(node2, "InterfaceExtends");
      }
      flowParseInterface(node2) {
        this.flowParseInterfaceish(node2);
        return this.finishNode(node2, "InterfaceDeclaration");
      }
      checkNotUnderscore(word) {
        if (word === "_") {
          this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);
        }
      }
      checkReservedType(word, startLoc, declaration2) {
        if (!reservedTypes.has(word))
          return;
        this.raise(startLoc, declaration2 ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);
      }
      flowParseRestrictedIdentifier(liberal, declaration2) {
        this.checkReservedType(this.state.value, this.state.start, declaration2);
        return this.parseIdentifier(liberal);
      }
      flowParseTypeAlias(node2) {
        node2.id = this.flowParseRestrictedIdentifier(false, true);
        this.scope.declareName(node2.id.name, BIND_LEXICAL, node2.id.start);
        if (this.match(43)) {
          node2.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          node2.typeParameters = null;
        }
        node2.right = this.flowParseTypeInitialiser(27);
        this.semicolon();
        return this.finishNode(node2, "TypeAlias");
      }
      flowParseOpaqueType(node2, declare) {
        this.expectContextual(120);
        node2.id = this.flowParseRestrictedIdentifier(true, true);
        this.scope.declareName(node2.id.name, BIND_LEXICAL, node2.id.start);
        if (this.match(43)) {
          node2.typeParameters = this.flowParseTypeParameterDeclaration();
        } else {
          node2.typeParameters = null;
        }
        node2.supertype = null;
        if (this.match(14)) {
          node2.supertype = this.flowParseTypeInitialiser(14);
        }
        node2.impltype = null;
        if (!declare) {
          node2.impltype = this.flowParseTypeInitialiser(27);
        }
        this.semicolon();
        return this.finishNode(node2, "OpaqueType");
      }
      flowParseTypeParameter(requireDefault = false) {
        const nodeStart = this.state.start;
        const node2 = this.startNode();
        const variance = this.flowParseVariance();
        const ident = this.flowParseTypeAnnotatableIdentifier();
        node2.name = ident.name;
        node2.variance = variance;
        node2.bound = ident.typeAnnotation;
        if (this.match(27)) {
          this.eat(27);
          node2.default = this.flowParseType();
        } else {
          if (requireDefault) {
            this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);
          }
        }
        return this.finishNode(node2, "TypeParameter");
      }
      flowParseTypeParameterDeclaration() {
        const oldInType = this.state.inType;
        const node2 = this.startNode();
        node2.params = [];
        this.state.inType = true;
        if (this.match(43) || this.match(132)) {
          this.next();
        } else {
          this.unexpected();
        }
        let defaultRequired = false;
        do {
          const typeParameter = this.flowParseTypeParameter(defaultRequired);
          node2.params.push(typeParameter);
          if (typeParameter.default) {
            defaultRequired = true;
          }
          if (!this.match(44)) {
            this.expect(12);
          }
        } while (!this.match(44));
        this.expect(44);
        this.state.inType = oldInType;
        return this.finishNode(node2, "TypeParameterDeclaration");
      }
      flowParseTypeParameterInstantiation() {
        const node2 = this.startNode();
        const oldInType = this.state.inType;
        node2.params = [];
        this.state.inType = true;
        this.expect(43);
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        this.state.noAnonFunctionType = false;
        while (!this.match(44)) {
          node2.params.push(this.flowParseType());
          if (!this.match(44)) {
            this.expect(12);
          }
        }
        this.state.noAnonFunctionType = oldNoAnonFunctionType;
        this.expect(44);
        this.state.inType = oldInType;
        return this.finishNode(node2, "TypeParameterInstantiation");
      }
      flowParseTypeParameterInstantiationCallOrNew() {
        const node2 = this.startNode();
        const oldInType = this.state.inType;
        node2.params = [];
        this.state.inType = true;
        this.expect(43);
        while (!this.match(44)) {
          node2.params.push(this.flowParseTypeOrImplicitInstantiation());
          if (!this.match(44)) {
            this.expect(12);
          }
        }
        this.expect(44);
        this.state.inType = oldInType;
        return this.finishNode(node2, "TypeParameterInstantiation");
      }
      flowParseInterfaceType() {
        const node2 = this.startNode();
        this.expectContextual(119);
        node2.extends = [];
        if (this.eat(75)) {
          do {
            node2.extends.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
        node2.body = this.flowParseObjectType({
          allowStatic: false,
          allowExact: false,
          allowSpread: false,
          allowProto: false,
          allowInexact: false
        });
        return this.finishNode(node2, "InterfaceTypeAnnotation");
      }
      flowParseObjectPropertyKey() {
        return this.match(124) || this.match(123) ? this.parseExprAtom() : this.parseIdentifier(true);
      }
      flowParseObjectTypeIndexer(node2, isStatic, variance) {
        node2.static = isStatic;
        if (this.lookahead().type === 14) {
          node2.id = this.flowParseObjectPropertyKey();
          node2.key = this.flowParseTypeInitialiser();
        } else {
          node2.id = null;
          node2.key = this.flowParseType();
        }
        this.expect(3);
        node2.value = this.flowParseTypeInitialiser();
        node2.variance = variance;
        return this.finishNode(node2, "ObjectTypeIndexer");
      }
      flowParseObjectTypeInternalSlot(node2, isStatic) {
        node2.static = isStatic;
        node2.id = this.flowParseObjectPropertyKey();
        this.expect(3);
        this.expect(3);
        if (this.match(43) || this.match(10)) {
          node2.method = true;
          node2.optional = false;
          node2.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node2.start, node2.loc.start));
        } else {
          node2.method = false;
          if (this.eat(17)) {
            node2.optional = true;
          }
          node2.value = this.flowParseTypeInitialiser();
        }
        return this.finishNode(node2, "ObjectTypeInternalSlot");
      }
      flowParseObjectTypeMethodish(node2) {
        node2.params = [];
        node2.rest = null;
        node2.typeParameters = null;
        node2.this = null;
        if (this.match(43)) {
          node2.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        this.expect(10);
        if (this.match(72)) {
          node2.this = this.flowParseFunctionTypeParam(true);
          node2.this.name = null;
          if (!this.match(11)) {
            this.expect(12);
          }
        }
        while (!this.match(11) && !this.match(21)) {
          node2.params.push(this.flowParseFunctionTypeParam(false));
          if (!this.match(11)) {
            this.expect(12);
          }
        }
        if (this.eat(21)) {
          node2.rest = this.flowParseFunctionTypeParam(false);
        }
        this.expect(11);
        node2.returnType = this.flowParseTypeInitialiser();
        return this.finishNode(node2, "FunctionTypeAnnotation");
      }
      flowParseObjectTypeCallProperty(node2, isStatic) {
        const valueNode = this.startNode();
        node2.static = isStatic;
        node2.value = this.flowParseObjectTypeMethodish(valueNode);
        return this.finishNode(node2, "ObjectTypeCallProperty");
      }
      flowParseObjectType({
        allowStatic,
        allowExact,
        allowSpread,
        allowProto,
        allowInexact
      }) {
        const oldInType = this.state.inType;
        this.state.inType = true;
        const nodeStart = this.startNode();
        nodeStart.callProperties = [];
        nodeStart.properties = [];
        nodeStart.indexers = [];
        nodeStart.internalSlots = [];
        let endDelim;
        let exact;
        let inexact = false;
        if (allowExact && this.match(6)) {
          this.expect(6);
          endDelim = 9;
          exact = true;
        } else {
          this.expect(5);
          endDelim = 8;
          exact = false;
        }
        nodeStart.exact = exact;
        while (!this.match(endDelim)) {
          let isStatic = false;
          let protoStart = null;
          let inexactStart = null;
          const node2 = this.startNode();
          if (allowProto && this.isContextual(109)) {
            const lookahead = this.lookahead();
            if (lookahead.type !== 14 && lookahead.type !== 17) {
              this.next();
              protoStart = this.state.start;
              allowStatic = false;
            }
          }
          if (allowStatic && this.isContextual(98)) {
            const lookahead = this.lookahead();
            if (lookahead.type !== 14 && lookahead.type !== 17) {
              this.next();
              isStatic = true;
            }
          }
          const variance = this.flowParseVariance();
          if (this.eat(0)) {
            if (protoStart != null) {
              this.unexpected(protoStart);
            }
            if (this.eat(0)) {
              if (variance) {
                this.unexpected(variance.start);
              }
              nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node2, isStatic));
            } else {
              nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node2, isStatic, variance));
            }
          } else if (this.match(10) || this.match(43)) {
            if (protoStart != null) {
              this.unexpected(protoStart);
            }
            if (variance) {
              this.unexpected(variance.start);
            }
            nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node2, isStatic));
          } else {
            let kind = "init";
            if (this.isContextual(92) || this.isContextual(97)) {
              const lookahead = this.lookahead();
              if (tokenIsLiteralPropertyName(lookahead.type)) {
                kind = this.state.value;
                this.next();
              }
            }
            const propOrInexact = this.flowParseObjectTypeProperty(node2, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);
            if (propOrInexact === null) {
              inexact = true;
              inexactStart = this.state.lastTokStart;
            } else {
              nodeStart.properties.push(propOrInexact);
            }
          }
          this.flowObjectTypeSemicolon();
          if (inexactStart && !this.match(8) && !this.match(9)) {
            this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);
          }
        }
        this.expect(endDelim);
        if (allowSpread) {
          nodeStart.inexact = inexact;
        }
        const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
        this.state.inType = oldInType;
        return out;
      }
      flowParseObjectTypeProperty(node2, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {
        if (this.eat(21)) {
          const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);
          if (isInexactToken) {
            if (!allowSpread) {
              this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);
            } else if (!allowInexact) {
              this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);
            }
            if (variance) {
              this.raise(variance.start, FlowErrors.InexactVariance);
            }
            return null;
          }
          if (!allowSpread) {
            this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);
          }
          if (protoStart != null) {
            this.unexpected(protoStart);
          }
          if (variance) {
            this.raise(variance.start, FlowErrors.SpreadVariance);
          }
          node2.argument = this.flowParseType();
          return this.finishNode(node2, "ObjectTypeSpreadProperty");
        } else {
          node2.key = this.flowParseObjectPropertyKey();
          node2.static = isStatic;
          node2.proto = protoStart != null;
          node2.kind = kind;
          let optional = false;
          if (this.match(43) || this.match(10)) {
            node2.method = true;
            if (protoStart != null) {
              this.unexpected(protoStart);
            }
            if (variance) {
              this.unexpected(variance.start);
            }
            node2.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node2.start, node2.loc.start));
            if (kind === "get" || kind === "set") {
              this.flowCheckGetterSetterParams(node2);
            }
            if (!allowSpread && node2.key.name === "constructor" && node2.value.this) {
              this.raise(node2.value.this.start, FlowErrors.ThisParamBannedInConstructor);
            }
          } else {
            if (kind !== "init")
              this.unexpected();
            node2.method = false;
            if (this.eat(17)) {
              optional = true;
            }
            node2.value = this.flowParseTypeInitialiser();
            node2.variance = variance;
          }
          node2.optional = optional;
          return this.finishNode(node2, "ObjectTypeProperty");
        }
      }
      flowCheckGetterSetterParams(property) {
        const paramCount = property.kind === "get" ? 0 : 1;
        const start = property.start;
        const length2 = property.value.params.length + (property.value.rest ? 1 : 0);
        if (property.value.this) {
          this.raise(property.value.this.start, property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);
        }
        if (length2 !== paramCount) {
          if (property.kind === "get") {
            this.raise(start, ErrorMessages.BadGetterArity);
          } else {
            this.raise(start, ErrorMessages.BadSetterArity);
          }
        }
        if (property.kind === "set" && property.value.rest) {
          this.raise(start, ErrorMessages.BadSetterRestParameter);
        }
      }
      flowObjectTypeSemicolon() {
        if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {
          this.unexpected();
        }
      }
      flowParseQualifiedTypeIdentifier(startPos, startLoc, id2) {
        startPos = startPos || this.state.start;
        startLoc = startLoc || this.state.startLoc;
        let node2 = id2 || this.flowParseRestrictedIdentifier(true);
        while (this.eat(16)) {
          const node22 = this.startNodeAt(startPos, startLoc);
          node22.qualification = node2;
          node22.id = this.flowParseRestrictedIdentifier(true);
          node2 = this.finishNode(node22, "QualifiedTypeIdentifier");
        }
        return node2;
      }
      flowParseGenericType(startPos, startLoc, id2) {
        const node2 = this.startNodeAt(startPos, startLoc);
        node2.typeParameters = null;
        node2.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id2);
        if (this.match(43)) {
          node2.typeParameters = this.flowParseTypeParameterInstantiation();
        }
        return this.finishNode(node2, "GenericTypeAnnotation");
      }
      flowParseTypeofType() {
        const node2 = this.startNode();
        this.expect(81);
        node2.argument = this.flowParsePrimaryType();
        return this.finishNode(node2, "TypeofTypeAnnotation");
      }
      flowParseTupleType() {
        const node2 = this.startNode();
        node2.types = [];
        this.expect(0);
        while (this.state.pos < this.length && !this.match(3)) {
          node2.types.push(this.flowParseType());
          if (this.match(3))
            break;
          this.expect(12);
        }
        this.expect(3);
        return this.finishNode(node2, "TupleTypeAnnotation");
      }
      flowParseFunctionTypeParam(first) {
        let name = null;
        let optional = false;
        let typeAnnotation = null;
        const node2 = this.startNode();
        const lh = this.lookahead();
        const isThis = this.state.type === 72;
        if (lh.type === 14 || lh.type === 17) {
          if (isThis && !first) {
            this.raise(node2.start, FlowErrors.ThisParamMustBeFirst);
          }
          name = this.parseIdentifier(isThis);
          if (this.eat(17)) {
            optional = true;
            if (isThis) {
              this.raise(node2.start, FlowErrors.ThisParamMayNotBeOptional);
            }
          }
          typeAnnotation = this.flowParseTypeInitialiser();
        } else {
          typeAnnotation = this.flowParseType();
        }
        node2.name = name;
        node2.optional = optional;
        node2.typeAnnotation = typeAnnotation;
        return this.finishNode(node2, "FunctionTypeParam");
      }
      reinterpretTypeAsFunctionTypeParam(type) {
        const node2 = this.startNodeAt(type.start, type.loc.start);
        node2.name = null;
        node2.optional = false;
        node2.typeAnnotation = type;
        return this.finishNode(node2, "FunctionTypeParam");
      }
      flowParseFunctionTypeParams(params = []) {
        let rest = null;
        let _this = null;
        if (this.match(72)) {
          _this = this.flowParseFunctionTypeParam(true);
          _this.name = null;
          if (!this.match(11)) {
            this.expect(12);
          }
        }
        while (!this.match(11) && !this.match(21)) {
          params.push(this.flowParseFunctionTypeParam(false));
          if (!this.match(11)) {
            this.expect(12);
          }
        }
        if (this.eat(21)) {
          rest = this.flowParseFunctionTypeParam(false);
        }
        return {
          params,
          rest,
          _this
        };
      }
      flowIdentToTypeAnnotation(startPos, startLoc, node2, id2) {
        switch (id2.name) {
          case "any":
            return this.finishNode(node2, "AnyTypeAnnotation");
          case "bool":
          case "boolean":
            return this.finishNode(node2, "BooleanTypeAnnotation");
          case "mixed":
            return this.finishNode(node2, "MixedTypeAnnotation");
          case "empty":
            return this.finishNode(node2, "EmptyTypeAnnotation");
          case "number":
            return this.finishNode(node2, "NumberTypeAnnotation");
          case "string":
            return this.finishNode(node2, "StringTypeAnnotation");
          case "symbol":
            return this.finishNode(node2, "SymbolTypeAnnotation");
          default:
            this.checkNotUnderscore(id2.name);
            return this.flowParseGenericType(startPos, startLoc, id2);
        }
      }
      flowParsePrimaryType() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const node2 = this.startNode();
        let tmp;
        let type;
        let isGroupedType = false;
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        switch (this.state.type) {
          case 5:
            return this.flowParseObjectType({
              allowStatic: false,
              allowExact: false,
              allowSpread: true,
              allowProto: false,
              allowInexact: true
            });
          case 6:
            return this.flowParseObjectType({
              allowStatic: false,
              allowExact: true,
              allowSpread: true,
              allowProto: false,
              allowInexact: false
            });
          case 0:
            this.state.noAnonFunctionType = false;
            type = this.flowParseTupleType();
            this.state.noAnonFunctionType = oldNoAnonFunctionType;
            return type;
          case 43:
            node2.typeParameters = this.flowParseTypeParameterDeclaration();
            this.expect(10);
            tmp = this.flowParseFunctionTypeParams();
            node2.params = tmp.params;
            node2.rest = tmp.rest;
            node2.this = tmp._this;
            this.expect(11);
            this.expect(19);
            node2.returnType = this.flowParseType();
            return this.finishNode(node2, "FunctionTypeAnnotation");
          case 10:
            this.next();
            if (!this.match(11) && !this.match(21)) {
              if (tokenIsIdentifier(this.state.type) || this.match(72)) {
                const token = this.lookahead().type;
                isGroupedType = token !== 17 && token !== 14;
              } else {
                isGroupedType = true;
              }
            }
            if (isGroupedType) {
              this.state.noAnonFunctionType = false;
              type = this.flowParseType();
              this.state.noAnonFunctionType = oldNoAnonFunctionType;
              if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {
                this.expect(11);
                return type;
              } else {
                this.eat(12);
              }
            }
            if (type) {
              tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
            } else {
              tmp = this.flowParseFunctionTypeParams();
            }
            node2.params = tmp.params;
            node2.rest = tmp.rest;
            node2.this = tmp._this;
            this.expect(11);
            this.expect(19);
            node2.returnType = this.flowParseType();
            node2.typeParameters = null;
            return this.finishNode(node2, "FunctionTypeAnnotation");
          case 123:
            return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
          case 79:
          case 80:
            node2.value = this.match(79);
            this.next();
            return this.finishNode(node2, "BooleanLiteralTypeAnnotation");
          case 47:
            if (this.state.value === "-") {
              this.next();
              if (this.match(124)) {
                return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node2);
              }
              if (this.match(125)) {
                return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node2);
              }
              throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);
            }
            throw this.unexpected();
          case 124:
            return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
          case 125:
            return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
          case 82:
            this.next();
            return this.finishNode(node2, "VoidTypeAnnotation");
          case 78:
            this.next();
            return this.finishNode(node2, "NullLiteralTypeAnnotation");
          case 72:
            this.next();
            return this.finishNode(node2, "ThisTypeAnnotation");
          case 49:
            this.next();
            return this.finishNode(node2, "ExistsTypeAnnotation");
          case 81:
            return this.flowParseTypeofType();
          default:
            if (tokenIsKeyword(this.state.type)) {
              const label = tokenLabelName(this.state.type);
              this.next();
              return super.createIdentifier(node2, label);
            } else if (tokenIsIdentifier(this.state.type)) {
              if (this.isContextual(119)) {
                return this.flowParseInterfaceType();
              }
              return this.flowIdentToTypeAnnotation(startPos, startLoc, node2, this.parseIdentifier());
            }
        }
        throw this.unexpected();
      }
      flowParsePostfixType() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let type = this.flowParsePrimaryType();
        let seenOptionalIndexedAccess = false;
        while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {
          const node2 = this.startNodeAt(startPos, startLoc);
          const optional = this.eat(18);
          seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
          this.expect(0);
          if (!optional && this.match(3)) {
            node2.elementType = type;
            this.next();
            type = this.finishNode(node2, "ArrayTypeAnnotation");
          } else {
            node2.objectType = type;
            node2.indexType = this.flowParseType();
            this.expect(3);
            if (seenOptionalIndexedAccess) {
              node2.optional = optional;
              type = this.finishNode(node2, "OptionalIndexedAccessType");
            } else {
              type = this.finishNode(node2, "IndexedAccessType");
            }
          }
        }
        return type;
      }
      flowParsePrefixType() {
        const node2 = this.startNode();
        if (this.eat(17)) {
          node2.typeAnnotation = this.flowParsePrefixType();
          return this.finishNode(node2, "NullableTypeAnnotation");
        } else {
          return this.flowParsePostfixType();
        }
      }
      flowParseAnonFunctionWithoutParens() {
        const param = this.flowParsePrefixType();
        if (!this.state.noAnonFunctionType && this.eat(19)) {
          const node2 = this.startNodeAt(param.start, param.loc.start);
          node2.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
          node2.rest = null;
          node2.this = null;
          node2.returnType = this.flowParseType();
          node2.typeParameters = null;
          return this.finishNode(node2, "FunctionTypeAnnotation");
        }
        return param;
      }
      flowParseIntersectionType() {
        const node2 = this.startNode();
        this.eat(41);
        const type = this.flowParseAnonFunctionWithoutParens();
        node2.types = [type];
        while (this.eat(41)) {
          node2.types.push(this.flowParseAnonFunctionWithoutParens());
        }
        return node2.types.length === 1 ? type : this.finishNode(node2, "IntersectionTypeAnnotation");
      }
      flowParseUnionType() {
        const node2 = this.startNode();
        this.eat(39);
        const type = this.flowParseIntersectionType();
        node2.types = [type];
        while (this.eat(39)) {
          node2.types.push(this.flowParseIntersectionType());
        }
        return node2.types.length === 1 ? type : this.finishNode(node2, "UnionTypeAnnotation");
      }
      flowParseType() {
        const oldInType = this.state.inType;
        this.state.inType = true;
        const type = this.flowParseUnionType();
        this.state.inType = oldInType;
        return type;
      }
      flowParseTypeOrImplicitInstantiation() {
        if (this.state.type === 122 && this.state.value === "_") {
          const startPos = this.state.start;
          const startLoc = this.state.startLoc;
          const node2 = this.parseIdentifier();
          return this.flowParseGenericType(startPos, startLoc, node2);
        } else {
          return this.flowParseType();
        }
      }
      flowParseTypeAnnotation() {
        const node2 = this.startNode();
        node2.typeAnnotation = this.flowParseTypeInitialiser();
        return this.finishNode(node2, "TypeAnnotation");
      }
      flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
        const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
        if (this.match(14)) {
          ident.typeAnnotation = this.flowParseTypeAnnotation();
          this.resetEndLocation(ident);
        }
        return ident;
      }
      typeCastToParameter(node2) {
        node2.expression.typeAnnotation = node2.typeAnnotation;
        this.resetEndLocation(node2.expression, node2.typeAnnotation.end, node2.typeAnnotation.loc.end);
        return node2.expression;
      }
      flowParseVariance() {
        let variance = null;
        if (this.match(47)) {
          variance = this.startNode();
          if (this.state.value === "+") {
            variance.kind = "plus";
          } else {
            variance.kind = "minus";
          }
          this.next();
          this.finishNode(variance, "Variance");
        }
        return variance;
      }
      parseFunctionBody(node2, allowExpressionBody, isMethod = false) {
        if (allowExpressionBody) {
          return this.forwardNoArrowParamsConversionAt(node2, () => super.parseFunctionBody(node2, true, isMethod));
        }
        return super.parseFunctionBody(node2, false, isMethod);
      }
      parseFunctionBodyAndFinish(node2, type, isMethod = false) {
        if (this.match(14)) {
          const typeNode = this.startNode();
          [typeNode.typeAnnotation, node2.predicate] = this.flowParseTypeAndPredicateInitialiser();
          node2.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
        }
        super.parseFunctionBodyAndFinish(node2, type, isMethod);
      }
      parseStatement(context, topLevel) {
        if (this.state.strict && this.isContextual(119)) {
          const lookahead = this.lookahead();
          if (tokenIsKeywordOrIdentifier(lookahead.type)) {
            const node2 = this.startNode();
            this.next();
            return this.flowParseInterface(node2);
          }
        } else if (this.shouldParseEnums() && this.isContextual(116)) {
          const node2 = this.startNode();
          this.next();
          return this.flowParseEnumDeclaration(node2);
        }
        const stmt = super.parseStatement(context, topLevel);
        if (this.flowPragma === void 0 && !this.isValidDirective(stmt)) {
          this.flowPragma = null;
        }
        return stmt;
      }
      parseExpressionStatement(node2, expr) {
        if (expr.type === "Identifier") {
          if (expr.name === "declare") {
            if (this.match(74) || tokenIsIdentifier(this.state.type) || this.match(62) || this.match(68) || this.match(76)) {
              return this.flowParseDeclare(node2);
            }
          } else if (tokenIsIdentifier(this.state.type)) {
            if (expr.name === "interface") {
              return this.flowParseInterface(node2);
            } else if (expr.name === "type") {
              return this.flowParseTypeAlias(node2);
            } else if (expr.name === "opaque") {
              return this.flowParseOpaqueType(node2, false);
            }
          }
        }
        return super.parseExpressionStatement(node2, expr);
      }
      shouldParseExportDeclaration() {
        const {
          type
        } = this.state;
        if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 116) {
          return !this.state.containsEsc;
        }
        return super.shouldParseExportDeclaration();
      }
      isExportDefaultSpecifier() {
        const {
          type
        } = this.state;
        if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 116) {
          return this.state.containsEsc;
        }
        return super.isExportDefaultSpecifier();
      }
      parseExportDefaultExpression() {
        if (this.shouldParseEnums() && this.isContextual(116)) {
          const node2 = this.startNode();
          this.next();
          return this.flowParseEnumDeclaration(node2);
        }
        return super.parseExportDefaultExpression();
      }
      parseConditional(expr, startPos, startLoc, refExpressionErrors) {
        if (!this.match(17))
          return expr;
        if (this.state.maybeInArrowParameters) {
          const nextCh = this.lookaheadCharCode();
          if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
            this.setOptionalParametersError(refExpressionErrors);
            return expr;
          }
        }
        this.expect(17);
        const state = this.state.clone();
        const originalNoArrowAt = this.state.noArrowAt;
        const node2 = this.startNodeAt(startPos, startLoc);
        let {
          consequent,
          failed
        } = this.tryParseConditionalConsequent();
        let [valid, invalid] = this.getArrowLikeExpressions(consequent);
        if (failed || invalid.length > 0) {
          const noArrowAt = [...originalNoArrowAt];
          if (invalid.length > 0) {
            this.state = state;
            this.state.noArrowAt = noArrowAt;
            for (let i = 0; i < invalid.length; i++) {
              noArrowAt.push(invalid[i].start);
            }
            ({
              consequent,
              failed
            } = this.tryParseConditionalConsequent());
            [valid, invalid] = this.getArrowLikeExpressions(consequent);
          }
          if (failed && valid.length > 1) {
            this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);
          }
          if (failed && valid.length === 1) {
            this.state = state;
            noArrowAt.push(valid[0].start);
            this.state.noArrowAt = noArrowAt;
            ({
              consequent,
              failed
            } = this.tryParseConditionalConsequent());
          }
        }
        this.getArrowLikeExpressions(consequent, true);
        this.state.noArrowAt = originalNoArrowAt;
        this.expect(14);
        node2.test = expr;
        node2.consequent = consequent;
        node2.alternate = this.forwardNoArrowParamsConversionAt(node2, () => this.parseMaybeAssign(void 0, void 0));
        return this.finishNode(node2, "ConditionalExpression");
      }
      tryParseConditionalConsequent() {
        this.state.noArrowParamsConversionAt.push(this.state.start);
        const consequent = this.parseMaybeAssignAllowIn();
        const failed = !this.match(14);
        this.state.noArrowParamsConversionAt.pop();
        return {
          consequent,
          failed
        };
      }
      getArrowLikeExpressions(node2, disallowInvalid) {
        const stack = [node2];
        const arrows = [];
        while (stack.length !== 0) {
          const node3 = stack.pop();
          if (node3.type === "ArrowFunctionExpression") {
            if (node3.typeParameters || !node3.returnType) {
              this.finishArrowValidation(node3);
            } else {
              arrows.push(node3);
            }
            stack.push(node3.body);
          } else if (node3.type === "ConditionalExpression") {
            stack.push(node3.consequent);
            stack.push(node3.alternate);
          }
        }
        if (disallowInvalid) {
          arrows.forEach((node3) => this.finishArrowValidation(node3));
          return [arrows, []];
        }
        return partition(arrows, (node3) => node3.params.every((param) => this.isAssignable(param, true)));
      }
      finishArrowValidation(node2) {
        var _node$extra;
        this.toAssignableList(node2.params, (_node$extra = node2.extra) == null ? void 0 : _node$extra.trailingComma, false);
        this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
        super.checkParams(node2, false, true);
        this.scope.exit();
      }
      forwardNoArrowParamsConversionAt(node2, parse2) {
        let result2;
        if (this.state.noArrowParamsConversionAt.indexOf(node2.start) !== -1) {
          this.state.noArrowParamsConversionAt.push(this.state.start);
          result2 = parse2();
          this.state.noArrowParamsConversionAt.pop();
        } else {
          result2 = parse2();
        }
        return result2;
      }
      parseParenItem(node2, startPos, startLoc) {
        node2 = super.parseParenItem(node2, startPos, startLoc);
        if (this.eat(17)) {
          node2.optional = true;
          this.resetEndLocation(node2);
        }
        if (this.match(14)) {
          const typeCastNode = this.startNodeAt(startPos, startLoc);
          typeCastNode.expression = node2;
          typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
          return this.finishNode(typeCastNode, "TypeCastExpression");
        }
        return node2;
      }
      assertModuleNodeAllowed(node2) {
        if (node2.type === "ImportDeclaration" && (node2.importKind === "type" || node2.importKind === "typeof") || node2.type === "ExportNamedDeclaration" && node2.exportKind === "type" || node2.type === "ExportAllDeclaration" && node2.exportKind === "type") {
          return;
        }
        super.assertModuleNodeAllowed(node2);
      }
      parseExport(node2) {
        const decl = super.parseExport(node2);
        if (decl.type === "ExportNamedDeclaration" || decl.type === "ExportAllDeclaration") {
          decl.exportKind = decl.exportKind || "value";
        }
        return decl;
      }
      parseExportDeclaration(node2) {
        if (this.isContextual(120)) {
          node2.exportKind = "type";
          const declarationNode = this.startNode();
          this.next();
          if (this.match(5)) {
            node2.specifiers = this.parseExportSpecifiers(true);
            this.parseExportFrom(node2);
            return null;
          } else {
            return this.flowParseTypeAlias(declarationNode);
          }
        } else if (this.isContextual(121)) {
          node2.exportKind = "type";
          const declarationNode = this.startNode();
          this.next();
          return this.flowParseOpaqueType(declarationNode, false);
        } else if (this.isContextual(119)) {
          node2.exportKind = "type";
          const declarationNode = this.startNode();
          this.next();
          return this.flowParseInterface(declarationNode);
        } else if (this.shouldParseEnums() && this.isContextual(116)) {
          node2.exportKind = "value";
          const declarationNode = this.startNode();
          this.next();
          return this.flowParseEnumDeclaration(declarationNode);
        } else {
          return super.parseExportDeclaration(node2);
        }
      }
      eatExportStar(node2) {
        if (super.eatExportStar(...arguments))
          return true;
        if (this.isContextual(120) && this.lookahead().type === 49) {
          node2.exportKind = "type";
          this.next();
          this.next();
          return true;
        }
        return false;
      }
      maybeParseExportNamespaceSpecifier(node2) {
        const pos = this.state.start;
        const hasNamespace = super.maybeParseExportNamespaceSpecifier(node2);
        if (hasNamespace && node2.exportKind === "type") {
          this.unexpected(pos);
        }
        return hasNamespace;
      }
      parseClassId(node2, isStatement, optionalId) {
        super.parseClassId(node2, isStatement, optionalId);
        if (this.match(43)) {
          node2.typeParameters = this.flowParseTypeParameterDeclaration();
        }
      }
      parseClassMember(classBody, member, state) {
        const pos = this.state.start;
        if (this.isContextual(115)) {
          if (this.parseClassMemberFromModifier(classBody, member)) {
            return;
          }
          member.declare = true;
        }
        super.parseClassMember(classBody, member, state);
        if (member.declare) {
          if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {
            this.raise(pos, FlowErrors.DeclareClassElement);
          } else if (member.value) {
            this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);
          }
        }
      }
      isIterator(word) {
        return word === "iterator" || word === "asyncIterator";
      }
      readIterator() {
        const word = super.readWord1();
        const fullWord = "@@" + word;
        if (!this.isIterator(word) || !this.state.inType) {
          this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);
        }
        this.finishToken(122, fullWord);
      }
      getTokenFromCode(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 123 && next === 124) {
          return this.finishOp(6, 2);
        } else if (this.state.inType && (code === 62 || code === 60)) {
          return this.finishOp(code === 62 ? 44 : 43, 1);
        } else if (this.state.inType && code === 63) {
          if (next === 46) {
            return this.finishOp(18, 2);
          }
          return this.finishOp(17, 1);
        } else if (isIteratorStart(code, next)) {
          this.state.pos += 2;
          return this.readIterator();
        } else {
          return super.getTokenFromCode(code);
        }
      }
      isAssignable(node2, isBinding) {
        if (node2.type === "TypeCastExpression") {
          return this.isAssignable(node2.expression, isBinding);
        } else {
          return super.isAssignable(node2, isBinding);
        }
      }
      toAssignable(node2, isLHS = false) {
        if (node2.type === "TypeCastExpression") {
          return super.toAssignable(this.typeCastToParameter(node2), isLHS);
        } else {
          return super.toAssignable(node2, isLHS);
        }
      }
      toAssignableList(exprList, trailingCommaPos, isLHS) {
        for (let i = 0; i < exprList.length; i++) {
          const expr = exprList[i];
          if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {
            exprList[i] = this.typeCastToParameter(expr);
          }
        }
        return super.toAssignableList(exprList, trailingCommaPos, isLHS);
      }
      toReferencedList(exprList, isParenthesizedExpr) {
        for (let i = 0; i < exprList.length; i++) {
          var _expr$extra;
          const expr = exprList[i];
          if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
            this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);
          }
        }
        return exprList;
      }
      parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
        const node2 = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
        if (canBePattern && !this.state.maybeInArrowParameters) {
          this.toReferencedList(node2.elements);
        }
        return node2;
      }
      checkLVal(expr, ...args) {
        if (expr.type !== "TypeCastExpression") {
          return super.checkLVal(expr, ...args);
        }
      }
      parseClassProperty(node2) {
        if (this.match(14)) {
          node2.typeAnnotation = this.flowParseTypeAnnotation();
        }
        return super.parseClassProperty(node2);
      }
      parseClassPrivateProperty(node2) {
        if (this.match(14)) {
          node2.typeAnnotation = this.flowParseTypeAnnotation();
        }
        return super.parseClassPrivateProperty(node2);
      }
      isClassMethod() {
        return this.match(43) || super.isClassMethod();
      }
      isClassProperty() {
        return this.match(14) || super.isClassProperty();
      }
      isNonstaticConstructor(method) {
        return !this.match(14) && super.isNonstaticConstructor(method);
      }
      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        if (method.variance) {
          this.unexpected(method.variance.start);
        }
        delete method.variance;
        if (this.match(43)) {
          method.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
        if (method.params && isConstructor) {
          const params = method.params;
          if (params.length > 0 && this.isThisParam(params[0])) {
            this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);
          }
        } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
          const params = method.value.params;
          if (params.length > 0 && this.isThisParam(params[0])) {
            this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);
          }
        }
      }
      pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        if (method.variance) {
          this.unexpected(method.variance.start);
        }
        delete method.variance;
        if (this.match(43)) {
          method.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
      }
      parseClassSuper(node2) {
        super.parseClassSuper(node2);
        if (node2.superClass && this.match(43)) {
          node2.superTypeParameters = this.flowParseTypeParameterInstantiation();
        }
        if (this.isContextual(104)) {
          this.next();
          const implemented = node2.implements = [];
          do {
            const node3 = this.startNode();
            node3.id = this.flowParseRestrictedIdentifier(true);
            if (this.match(43)) {
              node3.typeParameters = this.flowParseTypeParameterInstantiation();
            } else {
              node3.typeParameters = null;
            }
            implemented.push(this.finishNode(node3, "ClassImplements"));
          } while (this.eat(12));
        }
      }
      checkGetterSetterParams(method) {
        super.checkGetterSetterParams(method);
        const params = this.getObjectOrClassMethodParams(method);
        if (params.length > 0) {
          const param = params[0];
          if (this.isThisParam(param) && method.kind === "get") {
            this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);
          } else if (this.isThisParam(param)) {
            this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);
          }
        }
      }
      parsePropertyNamePrefixOperator(node2) {
        node2.variance = this.flowParseVariance();
      }
      parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
        if (prop.variance) {
          this.unexpected(prop.variance.start);
        }
        delete prop.variance;
        let typeParameters;
        if (this.match(43) && !isAccessor) {
          typeParameters = this.flowParseTypeParameterDeclaration();
          if (!this.match(10))
            this.unexpected();
        }
        super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
        if (typeParameters) {
          (prop.value || prop).typeParameters = typeParameters;
        }
      }
      parseAssignableListItemTypes(param) {
        if (this.eat(17)) {
          if (param.type !== "Identifier") {
            this.raise(param.start, FlowErrors.PatternIsOptional);
          }
          if (this.isThisParam(param)) {
            this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);
          }
          param.optional = true;
        }
        if (this.match(14)) {
          param.typeAnnotation = this.flowParseTypeAnnotation();
        } else if (this.isThisParam(param)) {
          this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);
        }
        if (this.match(27) && this.isThisParam(param)) {
          this.raise(param.start, FlowErrors.ThisParamNoDefault);
        }
        this.resetEndLocation(param);
        return param;
      }
      parseMaybeDefault(startPos, startLoc, left) {
        const node2 = super.parseMaybeDefault(startPos, startLoc, left);
        if (node2.type === "AssignmentPattern" && node2.typeAnnotation && node2.right.start < node2.typeAnnotation.start) {
          this.raise(node2.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);
        }
        return node2;
      }
      shouldParseDefaultImport(node2) {
        if (!hasTypeImportKind(node2)) {
          return super.shouldParseDefaultImport(node2);
        }
        return isMaybeDefaultImport(this.state.type);
      }
      parseImportSpecifierLocal(node2, specifier, type, contextDescription) {
        specifier.local = hasTypeImportKind(node2) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
        this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);
        node2.specifiers.push(this.finishNode(specifier, type));
      }
      maybeParseDefaultImportSpecifier(node2) {
        node2.importKind = "value";
        let kind = null;
        if (this.match(81)) {
          kind = "typeof";
        } else if (this.isContextual(120)) {
          kind = "type";
        }
        if (kind) {
          const lh = this.lookahead();
          const {
            type
          } = lh;
          if (kind === "type" && type === 49) {
            this.unexpected(lh.start);
          }
          if (isMaybeDefaultImport(type) || type === 5 || type === 49) {
            this.next();
            node2.importKind = kind;
          }
        }
        return super.maybeParseDefaultImportSpecifier(node2);
      }
      parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
        const firstIdent = specifier.imported;
        let specifierTypeKind = null;
        if (firstIdent.type === "Identifier") {
          if (firstIdent.name === "type") {
            specifierTypeKind = "type";
          } else if (firstIdent.name === "typeof") {
            specifierTypeKind = "typeof";
          }
        }
        let isBinding = false;
        if (this.isContextual(87) && !this.isLookaheadContextual("as")) {
          const as_ident = this.parseIdentifier(true);
          if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {
            specifier.imported = as_ident;
            specifier.importKind = specifierTypeKind;
            specifier.local = cloneIdentifier(as_ident);
          } else {
            specifier.imported = firstIdent;
            specifier.importKind = null;
            specifier.local = this.parseIdentifier();
          }
        } else {
          if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {
            specifier.imported = this.parseIdentifier(true);
            specifier.importKind = specifierTypeKind;
          } else {
            if (importedIsString) {
              throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);
            }
            specifier.imported = firstIdent;
            specifier.importKind = null;
          }
          if (this.eatContextual(87)) {
            specifier.local = this.parseIdentifier();
          } else {
            isBinding = true;
            specifier.local = cloneIdentifier(specifier.imported);
          }
        }
        const specifierIsTypeImport = hasTypeImportKind(specifier);
        if (isInTypeOnlyImport && specifierIsTypeImport) {
          this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);
        }
        if (isInTypeOnlyImport || specifierIsTypeImport) {
          this.checkReservedType(specifier.local.name, specifier.local.start, true);
        }
        if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {
          this.checkReservedWord(specifier.local.name, specifier.start, true, true);
        }
        this.checkLVal(specifier.local, "import specifier", BIND_LEXICAL);
        return this.finishNode(specifier, "ImportSpecifier");
      }
      parseBindingAtom() {
        switch (this.state.type) {
          case 72:
            return this.parseIdentifier(true);
          default:
            return super.parseBindingAtom();
        }
      }
      parseFunctionParams(node2, allowModifiers) {
        const kind = node2.kind;
        if (kind !== "get" && kind !== "set" && this.match(43)) {
          node2.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        super.parseFunctionParams(node2, allowModifiers);
      }
      parseVarId(decl, kind) {
        super.parseVarId(decl, kind);
        if (this.match(14)) {
          decl.id.typeAnnotation = this.flowParseTypeAnnotation();
          this.resetEndLocation(decl.id);
        }
      }
      parseAsyncArrowFromCallExpression(node2, call) {
        if (this.match(14)) {
          const oldNoAnonFunctionType = this.state.noAnonFunctionType;
          this.state.noAnonFunctionType = true;
          node2.returnType = this.flowParseTypeAnnotation();
          this.state.noAnonFunctionType = oldNoAnonFunctionType;
        }
        return super.parseAsyncArrowFromCallExpression(node2, call);
      }
      shouldParseAsyncArrow() {
        return this.match(14) || super.shouldParseAsyncArrow();
      }
      parseMaybeAssign(refExpressionErrors, afterLeftParse) {
        var _jsx;
        let state = null;
        let jsx2;
        if (this.hasPlugin("jsx") && (this.match(132) || this.match(43))) {
          state = this.state.clone();
          jsx2 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
          if (!jsx2.error)
            return jsx2.node;
          const {
            context
          } = this.state;
          const curContext = context[context.length - 1];
          if (curContext === types.j_oTag) {
            context.length -= 2;
          } else if (curContext === types.j_expr) {
            context.length -= 1;
          }
        }
        if ((_jsx = jsx2) != null && _jsx.error || this.match(43)) {
          var _jsx2, _jsx3;
          state = state || this.state.clone();
          let typeParameters;
          const arrow = this.tryParse((abort) => {
            var _arrowExpression$extr;
            typeParameters = this.flowParseTypeParameterDeclaration();
            const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
              const result2 = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
              this.resetStartLocationFromNode(result2, typeParameters);
              return result2;
            });
            if ((_arrowExpression$extr = arrowExpression2.extra) != null && _arrowExpression$extr.parenthesized)
              abort();
            const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
            if (expr.type !== "ArrowFunctionExpression")
              abort();
            expr.typeParameters = typeParameters;
            this.resetStartLocationFromNode(expr, typeParameters);
            return arrowExpression2;
          }, state);
          let arrowExpression = null;
          if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
            if (!arrow.error && !arrow.aborted) {
              if (arrow.node.async) {
                this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);
              }
              return arrow.node;
            }
            arrowExpression = arrow.node;
          }
          if ((_jsx2 = jsx2) != null && _jsx2.node) {
            this.state = jsx2.failState;
            return jsx2.node;
          }
          if (arrowExpression) {
            this.state = arrow.failState;
            return arrowExpression;
          }
          if ((_jsx3 = jsx2) != null && _jsx3.thrown)
            throw jsx2.error;
          if (arrow.thrown)
            throw arrow.error;
          throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);
        }
        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
      }
      parseArrow(node2) {
        if (this.match(14)) {
          const result2 = this.tryParse(() => {
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            this.state.noAnonFunctionType = true;
            const typeNode = this.startNode();
            [typeNode.typeAnnotation, node2.predicate] = this.flowParseTypeAndPredicateInitialiser();
            this.state.noAnonFunctionType = oldNoAnonFunctionType;
            if (this.canInsertSemicolon())
              this.unexpected();
            if (!this.match(19))
              this.unexpected();
            return typeNode;
          });
          if (result2.thrown)
            return null;
          if (result2.error)
            this.state = result2.failState;
          node2.returnType = result2.node.typeAnnotation ? this.finishNode(result2.node, "TypeAnnotation") : null;
        }
        return super.parseArrow(node2);
      }
      shouldParseArrow(params) {
        return this.match(14) || super.shouldParseArrow(params);
      }
      setArrowFunctionParameters(node2, params) {
        if (this.state.noArrowParamsConversionAt.indexOf(node2.start) !== -1) {
          node2.params = params;
        } else {
          super.setArrowFunctionParameters(node2, params);
        }
      }
      checkParams(node2, allowDuplicates, isArrowFunction) {
        if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node2.start) !== -1) {
          return;
        }
        for (let i = 0; i < node2.params.length; i++) {
          if (this.isThisParam(node2.params[i]) && i > 0) {
            this.raise(node2.params[i].start, FlowErrors.ThisParamMustBeFirst);
          }
        }
        return super.checkParams(...arguments);
      }
      parseParenAndDistinguishExpression(canBeArrow) {
        return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);
      }
      parseSubscripts(base2, startPos, startLoc, noCalls) {
        if (base2.type === "Identifier" && base2.name === "async" && this.state.noArrowAt.indexOf(startPos) !== -1) {
          this.next();
          const node2 = this.startNodeAt(startPos, startLoc);
          node2.callee = base2;
          node2.arguments = this.parseCallExpressionArguments(11, false);
          base2 = this.finishNode(node2, "CallExpression");
        } else if (base2.type === "Identifier" && base2.name === "async" && this.match(43)) {
          const state = this.state.clone();
          const arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);
          if (!arrow.error && !arrow.aborted)
            return arrow.node;
          const result2 = this.tryParse(() => super.parseSubscripts(base2, startPos, startLoc, noCalls), state);
          if (result2.node && !result2.error)
            return result2.node;
          if (arrow.node) {
            this.state = arrow.failState;
            return arrow.node;
          }
          if (result2.node) {
            this.state = result2.failState;
            return result2.node;
          }
          throw arrow.error || result2.error;
        }
        return super.parseSubscripts(base2, startPos, startLoc, noCalls);
      }
      parseSubscript(base2, startPos, startLoc, noCalls, subscriptState) {
        if (this.match(18) && this.isLookaheadToken_lt()) {
          subscriptState.optionalChainMember = true;
          if (noCalls) {
            subscriptState.stop = true;
            return base2;
          }
          this.next();
          const node2 = this.startNodeAt(startPos, startLoc);
          node2.callee = base2;
          node2.typeArguments = this.flowParseTypeParameterInstantiation();
          this.expect(10);
          node2.arguments = this.parseCallExpressionArguments(11, false);
          node2.optional = true;
          return this.finishCallExpression(node2, true);
        } else if (!noCalls && this.shouldParseTypes() && this.match(43)) {
          const node2 = this.startNodeAt(startPos, startLoc);
          node2.callee = base2;
          const result2 = this.tryParse(() => {
            node2.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
            this.expect(10);
            node2.arguments = this.parseCallExpressionArguments(11, false);
            if (subscriptState.optionalChainMember)
              node2.optional = false;
            return this.finishCallExpression(node2, subscriptState.optionalChainMember);
          });
          if (result2.node) {
            if (result2.error)
              this.state = result2.failState;
            return result2.node;
          }
        }
        return super.parseSubscript(base2, startPos, startLoc, noCalls, subscriptState);
      }
      parseNewArguments(node2) {
        let targs = null;
        if (this.shouldParseTypes() && this.match(43)) {
          targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
        }
        node2.typeArguments = targs;
        super.parseNewArguments(node2);
      }
      parseAsyncArrowWithTypeParameters(startPos, startLoc) {
        const node2 = this.startNodeAt(startPos, startLoc);
        this.parseFunctionParams(node2);
        if (!this.parseArrow(node2))
          return;
        return this.parseArrowExpression(node2, void 0, true);
      }
      readToken_mult_modulo(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 42 && next === 47 && this.state.hasFlowComment) {
          this.state.hasFlowComment = false;
          this.state.pos += 2;
          this.nextToken();
          return;
        }
        super.readToken_mult_modulo(code);
      }
      readToken_pipe_amp(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 124 && next === 125) {
          this.finishOp(9, 2);
          return;
        }
        super.readToken_pipe_amp(code);
      }
      parseTopLevel(file, program) {
        const fileNode = super.parseTopLevel(file, program);
        if (this.state.hasFlowComment) {
          this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);
        }
        return fileNode;
      }
      skipBlockComment() {
        if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
          if (this.state.hasFlowComment) {
            this.unexpected(null, FlowErrors.NestedFlowComment);
          }
          this.hasFlowCommentCompletion();
          this.state.pos += this.skipFlowComment();
          this.state.hasFlowComment = true;
          return;
        }
        if (this.state.hasFlowComment) {
          const end = this.input.indexOf("*-/", this.state.pos += 2);
          if (end === -1) {
            throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);
          }
          this.state.pos = end + 3;
          return;
        }
        return super.skipBlockComment();
      }
      skipFlowComment() {
        const {
          pos
        } = this.state;
        let shiftToFirstNonWhiteSpace = 2;
        while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {
          shiftToFirstNonWhiteSpace++;
        }
        const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
        const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
        if (ch2 === 58 && ch3 === 58) {
          return shiftToFirstNonWhiteSpace + 2;
        }
        if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") {
          return shiftToFirstNonWhiteSpace + 12;
        }
        if (ch2 === 58 && ch3 !== 58) {
          return shiftToFirstNonWhiteSpace;
        }
        return false;
      }
      hasFlowCommentCompletion() {
        const end = this.input.indexOf("*/", this.state.pos);
        if (end === -1) {
          throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);
        }
      }
      flowEnumErrorBooleanMemberNotInitialized(pos, {
        enumName,
        memberName
      }) {
        this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);
      }
      flowEnumErrorInvalidMemberName(pos, {
        enumName,
        memberName
      }) {
        const suggestion = memberName[0].toUpperCase() + memberName.slice(1);
        this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);
      }
      flowEnumErrorDuplicateMemberName(pos, {
        enumName,
        memberName
      }) {
        this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);
      }
      flowEnumErrorInconsistentMemberValues(pos, {
        enumName
      }) {
        this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);
      }
      flowEnumErrorInvalidExplicitType(pos, {
        enumName,
        suppliedType
      }) {
        return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);
      }
      flowEnumErrorInvalidMemberInitializer(pos, {
        enumName,
        explicitType,
        memberName
      }) {
        let message = null;
        switch (explicitType) {
          case "boolean":
          case "number":
          case "string":
            message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;
            break;
          case "symbol":
            message = FlowErrors.EnumInvalidMemberInitializerSymbolType;
            break;
          default:
            message = FlowErrors.EnumInvalidMemberInitializerUnknownType;
        }
        return this.raise(pos, message, enumName, memberName, explicitType);
      }
      flowEnumErrorNumberMemberNotInitialized(pos, {
        enumName,
        memberName
      }) {
        this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);
      }
      flowEnumErrorStringMemberInconsistentlyInitailized(pos, {
        enumName
      }) {
        this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);
      }
      flowEnumMemberInit() {
        const startPos = this.state.start;
        const endOfInit = () => this.match(12) || this.match(8);
        switch (this.state.type) {
          case 124: {
            const literal = this.parseNumericLiteral(this.state.value);
            if (endOfInit()) {
              return {
                type: "number",
                pos: literal.start,
                value: literal
              };
            }
            return {
              type: "invalid",
              pos: startPos
            };
          }
          case 123: {
            const literal = this.parseStringLiteral(this.state.value);
            if (endOfInit()) {
              return {
                type: "string",
                pos: literal.start,
                value: literal
              };
            }
            return {
              type: "invalid",
              pos: startPos
            };
          }
          case 79:
          case 80: {
            const literal = this.parseBooleanLiteral(this.match(79));
            if (endOfInit()) {
              return {
                type: "boolean",
                pos: literal.start,
                value: literal
              };
            }
            return {
              type: "invalid",
              pos: startPos
            };
          }
          default:
            return {
              type: "invalid",
              pos: startPos
            };
        }
      }
      flowEnumMemberRaw() {
        const pos = this.state.start;
        const id2 = this.parseIdentifier(true);
        const init3 = this.eat(27) ? this.flowEnumMemberInit() : {
          type: "none",
          pos
        };
        return {
          id: id2,
          init: init3
        };
      }
      flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {
        const {
          explicitType
        } = context;
        if (explicitType === null) {
          return;
        }
        if (explicitType !== expectedType) {
          this.flowEnumErrorInvalidMemberInitializer(pos, context);
        }
      }
      flowEnumMembers({
        enumName,
        explicitType
      }) {
        const seenNames = /* @__PURE__ */ new Set();
        const members = {
          booleanMembers: [],
          numberMembers: [],
          stringMembers: [],
          defaultedMembers: []
        };
        let hasUnknownMembers = false;
        while (!this.match(8)) {
          if (this.eat(21)) {
            hasUnknownMembers = true;
            break;
          }
          const memberNode = this.startNode();
          const {
            id: id2,
            init: init3
          } = this.flowEnumMemberRaw();
          const memberName = id2.name;
          if (memberName === "") {
            continue;
          }
          if (/^[a-z]/.test(memberName)) {
            this.flowEnumErrorInvalidMemberName(id2.start, {
              enumName,
              memberName
            });
          }
          if (seenNames.has(memberName)) {
            this.flowEnumErrorDuplicateMemberName(id2.start, {
              enumName,
              memberName
            });
          }
          seenNames.add(memberName);
          const context = {
            enumName,
            explicitType,
            memberName
          };
          memberNode.id = id2;
          switch (init3.type) {
            case "boolean": {
              this.flowEnumCheckExplicitTypeMismatch(init3.pos, context, "boolean");
              memberNode.init = init3.value;
              members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
              break;
            }
            case "number": {
              this.flowEnumCheckExplicitTypeMismatch(init3.pos, context, "number");
              memberNode.init = init3.value;
              members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
              break;
            }
            case "string": {
              this.flowEnumCheckExplicitTypeMismatch(init3.pos, context, "string");
              memberNode.init = init3.value;
              members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
              break;
            }
            case "invalid": {
              throw this.flowEnumErrorInvalidMemberInitializer(init3.pos, context);
            }
            case "none": {
              switch (explicitType) {
                case "boolean":
                  this.flowEnumErrorBooleanMemberNotInitialized(init3.pos, context);
                  break;
                case "number":
                  this.flowEnumErrorNumberMemberNotInitialized(init3.pos, context);
                  break;
                default:
                  members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
              }
            }
          }
          if (!this.match(8)) {
            this.expect(12);
          }
        }
        return {
          members,
          hasUnknownMembers
        };
      }
      flowEnumStringMembers(initializedMembers, defaultedMembers, {
        enumName
      }) {
        if (initializedMembers.length === 0) {
          return defaultedMembers;
        } else if (defaultedMembers.length === 0) {
          return initializedMembers;
        } else if (defaultedMembers.length > initializedMembers.length) {
          for (const member of initializedMembers) {
            this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {
              enumName
            });
          }
          return defaultedMembers;
        } else {
          for (const member of defaultedMembers) {
            this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {
              enumName
            });
          }
          return initializedMembers;
        }
      }
      flowEnumParseExplicitType({
        enumName
      }) {
        if (this.eatContextual(95)) {
          if (!tokenIsIdentifier(this.state.type)) {
            throw this.flowEnumErrorInvalidExplicitType(this.state.start, {
              enumName,
              suppliedType: null
            });
          }
          const {
            value
          } = this.state;
          this.next();
          if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") {
            this.flowEnumErrorInvalidExplicitType(this.state.start, {
              enumName,
              suppliedType: value
            });
          }
          return value;
        }
        return null;
      }
      flowEnumBody(node2, {
        enumName,
        nameLoc
      }) {
        const explicitType = this.flowEnumParseExplicitType({
          enumName
        });
        this.expect(5);
        const {
          members,
          hasUnknownMembers
        } = this.flowEnumMembers({
          enumName,
          explicitType
        });
        node2.hasUnknownMembers = hasUnknownMembers;
        switch (explicitType) {
          case "boolean":
            node2.explicitType = true;
            node2.members = members.booleanMembers;
            this.expect(8);
            return this.finishNode(node2, "EnumBooleanBody");
          case "number":
            node2.explicitType = true;
            node2.members = members.numberMembers;
            this.expect(8);
            return this.finishNode(node2, "EnumNumberBody");
          case "string":
            node2.explicitType = true;
            node2.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
              enumName
            });
            this.expect(8);
            return this.finishNode(node2, "EnumStringBody");
          case "symbol":
            node2.members = members.defaultedMembers;
            this.expect(8);
            return this.finishNode(node2, "EnumSymbolBody");
          default: {
            const empty = () => {
              node2.members = [];
              this.expect(8);
              return this.finishNode(node2, "EnumStringBody");
            };
            node2.explicitType = false;
            const boolsLen = members.booleanMembers.length;
            const numsLen = members.numberMembers.length;
            const strsLen = members.stringMembers.length;
            const defaultedLen = members.defaultedMembers.length;
            if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
              return empty();
            } else if (!boolsLen && !numsLen) {
              node2.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
                enumName
              });
              this.expect(8);
              return this.finishNode(node2, "EnumStringBody");
            } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
              for (const member of members.defaultedMembers) {
                this.flowEnumErrorBooleanMemberNotInitialized(member.start, {
                  enumName,
                  memberName: member.id.name
                });
              }
              node2.members = members.booleanMembers;
              this.expect(8);
              return this.finishNode(node2, "EnumBooleanBody");
            } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
              for (const member of members.defaultedMembers) {
                this.flowEnumErrorNumberMemberNotInitialized(member.start, {
                  enumName,
                  memberName: member.id.name
                });
              }
              node2.members = members.numberMembers;
              this.expect(8);
              return this.finishNode(node2, "EnumNumberBody");
            } else {
              this.flowEnumErrorInconsistentMemberValues(nameLoc, {
                enumName
              });
              return empty();
            }
          }
        }
      }
      flowParseEnumDeclaration(node2) {
        const id2 = this.parseIdentifier();
        node2.id = id2;
        node2.body = this.flowEnumBody(this.startNode(), {
          enumName: id2.name,
          nameLoc: id2.start
        });
        return this.finishNode(node2, "EnumDeclaration");
      }
      isLookaheadToken_lt() {
        const next = this.nextTokenStart();
        if (this.input.charCodeAt(next) === 60) {
          const afterNext = this.input.charCodeAt(next + 1);
          return afterNext !== 60 && afterNext !== 61;
        }
        return false;
      }
      maybeUnwrapTypeCastExpression(node2) {
        return node2.type === "TypeCastExpression" ? node2.expression : node2;
      }
    };
    entities = {
      quot: '"',
      amp: "&",
      apos: "'",
      lt: "<",
      gt: ">",
      nbsp: "\xA0",
      iexcl: "\xA1",
      cent: "\xA2",
      pound: "\xA3",
      curren: "\xA4",
      yen: "\xA5",
      brvbar: "\xA6",
      sect: "\xA7",
      uml: "\xA8",
      copy: "\xA9",
      ordf: "\xAA",
      laquo: "\xAB",
      not: "\xAC",
      shy: "\xAD",
      reg: "\xAE",
      macr: "\xAF",
      deg: "\xB0",
      plusmn: "\xB1",
      sup2: "\xB2",
      sup3: "\xB3",
      acute: "\xB4",
      micro: "\xB5",
      para: "\xB6",
      middot: "\xB7",
      cedil: "\xB8",
      sup1: "\xB9",
      ordm: "\xBA",
      raquo: "\xBB",
      frac14: "\xBC",
      frac12: "\xBD",
      frac34: "\xBE",
      iquest: "\xBF",
      Agrave: "\xC0",
      Aacute: "\xC1",
      Acirc: "\xC2",
      Atilde: "\xC3",
      Auml: "\xC4",
      Aring: "\xC5",
      AElig: "\xC6",
      Ccedil: "\xC7",
      Egrave: "\xC8",
      Eacute: "\xC9",
      Ecirc: "\xCA",
      Euml: "\xCB",
      Igrave: "\xCC",
      Iacute: "\xCD",
      Icirc: "\xCE",
      Iuml: "\xCF",
      ETH: "\xD0",
      Ntilde: "\xD1",
      Ograve: "\xD2",
      Oacute: "\xD3",
      Ocirc: "\xD4",
      Otilde: "\xD5",
      Ouml: "\xD6",
      times: "\xD7",
      Oslash: "\xD8",
      Ugrave: "\xD9",
      Uacute: "\xDA",
      Ucirc: "\xDB",
      Uuml: "\xDC",
      Yacute: "\xDD",
      THORN: "\xDE",
      szlig: "\xDF",
      agrave: "\xE0",
      aacute: "\xE1",
      acirc: "\xE2",
      atilde: "\xE3",
      auml: "\xE4",
      aring: "\xE5",
      aelig: "\xE6",
      ccedil: "\xE7",
      egrave: "\xE8",
      eacute: "\xE9",
      ecirc: "\xEA",
      euml: "\xEB",
      igrave: "\xEC",
      iacute: "\xED",
      icirc: "\xEE",
      iuml: "\xEF",
      eth: "\xF0",
      ntilde: "\xF1",
      ograve: "\xF2",
      oacute: "\xF3",
      ocirc: "\xF4",
      otilde: "\xF5",
      ouml: "\xF6",
      divide: "\xF7",
      oslash: "\xF8",
      ugrave: "\xF9",
      uacute: "\xFA",
      ucirc: "\xFB",
      uuml: "\xFC",
      yacute: "\xFD",
      thorn: "\xFE",
      yuml: "\xFF",
      OElig: "\u0152",
      oelig: "\u0153",
      Scaron: "\u0160",
      scaron: "\u0161",
      Yuml: "\u0178",
      fnof: "\u0192",
      circ: "\u02C6",
      tilde: "\u02DC",
      Alpha: "\u0391",
      Beta: "\u0392",
      Gamma: "\u0393",
      Delta: "\u0394",
      Epsilon: "\u0395",
      Zeta: "\u0396",
      Eta: "\u0397",
      Theta: "\u0398",
      Iota: "\u0399",
      Kappa: "\u039A",
      Lambda: "\u039B",
      Mu: "\u039C",
      Nu: "\u039D",
      Xi: "\u039E",
      Omicron: "\u039F",
      Pi: "\u03A0",
      Rho: "\u03A1",
      Sigma: "\u03A3",
      Tau: "\u03A4",
      Upsilon: "\u03A5",
      Phi: "\u03A6",
      Chi: "\u03A7",
      Psi: "\u03A8",
      Omega: "\u03A9",
      alpha: "\u03B1",
      beta: "\u03B2",
      gamma: "\u03B3",
      delta: "\u03B4",
      epsilon: "\u03B5",
      zeta: "\u03B6",
      eta: "\u03B7",
      theta: "\u03B8",
      iota: "\u03B9",
      kappa: "\u03BA",
      lambda: "\u03BB",
      mu: "\u03BC",
      nu: "\u03BD",
      xi: "\u03BE",
      omicron: "\u03BF",
      pi: "\u03C0",
      rho: "\u03C1",
      sigmaf: "\u03C2",
      sigma: "\u03C3",
      tau: "\u03C4",
      upsilon: "\u03C5",
      phi: "\u03C6",
      chi: "\u03C7",
      psi: "\u03C8",
      omega: "\u03C9",
      thetasym: "\u03D1",
      upsih: "\u03D2",
      piv: "\u03D6",
      ensp: "\u2002",
      emsp: "\u2003",
      thinsp: "\u2009",
      zwnj: "\u200C",
      zwj: "\u200D",
      lrm: "\u200E",
      rlm: "\u200F",
      ndash: "\u2013",
      mdash: "\u2014",
      lsquo: "\u2018",
      rsquo: "\u2019",
      sbquo: "\u201A",
      ldquo: "\u201C",
      rdquo: "\u201D",
      bdquo: "\u201E",
      dagger: "\u2020",
      Dagger: "\u2021",
      bull: "\u2022",
      hellip: "\u2026",
      permil: "\u2030",
      prime: "\u2032",
      Prime: "\u2033",
      lsaquo: "\u2039",
      rsaquo: "\u203A",
      oline: "\u203E",
      frasl: "\u2044",
      euro: "\u20AC",
      image: "\u2111",
      weierp: "\u2118",
      real: "\u211C",
      trade: "\u2122",
      alefsym: "\u2135",
      larr: "\u2190",
      uarr: "\u2191",
      rarr: "\u2192",
      darr: "\u2193",
      harr: "\u2194",
      crarr: "\u21B5",
      lArr: "\u21D0",
      uArr: "\u21D1",
      rArr: "\u21D2",
      dArr: "\u21D3",
      hArr: "\u21D4",
      forall: "\u2200",
      part: "\u2202",
      exist: "\u2203",
      empty: "\u2205",
      nabla: "\u2207",
      isin: "\u2208",
      notin: "\u2209",
      ni: "\u220B",
      prod: "\u220F",
      sum: "\u2211",
      minus: "\u2212",
      lowast: "\u2217",
      radic: "\u221A",
      prop: "\u221D",
      infin: "\u221E",
      ang: "\u2220",
      and: "\u2227",
      or: "\u2228",
      cap: "\u2229",
      cup: "\u222A",
      int: "\u222B",
      there4: "\u2234",
      sim: "\u223C",
      cong: "\u2245",
      asymp: "\u2248",
      ne: "\u2260",
      equiv: "\u2261",
      le: "\u2264",
      ge: "\u2265",
      sub: "\u2282",
      sup: "\u2283",
      nsub: "\u2284",
      sube: "\u2286",
      supe: "\u2287",
      oplus: "\u2295",
      otimes: "\u2297",
      perp: "\u22A5",
      sdot: "\u22C5",
      lceil: "\u2308",
      rceil: "\u2309",
      lfloor: "\u230A",
      rfloor: "\u230B",
      lang: "\u2329",
      rang: "\u232A",
      loz: "\u25CA",
      spades: "\u2660",
      clubs: "\u2663",
      hearts: "\u2665",
      diams: "\u2666"
    };
    HEX_NUMBER = /^[\da-fA-F]+$/;
    DECIMAL_NUMBER = /^\d+$/;
    JsxErrors = makeErrorTemplates({
      AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
      MissingClosingTagElement: "Expected corresponding JSX closing tag for <%0>.",
      MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
      UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
      UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
      UnterminatedJsxContent: "Unterminated JSX contents.",
      UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
    }, ErrorCodes.SyntaxError, "jsx");
    types.j_oTag = new TokContext("<tag");
    types.j_cTag = new TokContext("</tag");
    types.j_expr = new TokContext("<tag>...</tag>", true);
    jsx = (superClass) => class extends superClass {
      jsxReadToken() {
        let out = "";
        let chunkStart = this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.length) {
            throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);
          }
          const ch = this.input.charCodeAt(this.state.pos);
          switch (ch) {
            case 60:
            case 123:
              if (this.state.pos === this.state.start) {
                if (ch === 60 && this.state.canStartJSXElement) {
                  ++this.state.pos;
                  return this.finishToken(132);
                }
                return super.getTokenFromCode(ch);
              }
              out += this.input.slice(chunkStart, this.state.pos);
              return this.finishToken(131, out);
            case 38:
              out += this.input.slice(chunkStart, this.state.pos);
              out += this.jsxReadEntity();
              chunkStart = this.state.pos;
              break;
            case 62:
            case 125:
            default:
              if (isNewLine(ch)) {
                out += this.input.slice(chunkStart, this.state.pos);
                out += this.jsxReadNewLine(true);
                chunkStart = this.state.pos;
              } else {
                ++this.state.pos;
              }
          }
        }
      }
      jsxReadNewLine(normalizeCRLF) {
        const ch = this.input.charCodeAt(this.state.pos);
        let out;
        ++this.state.pos;
        if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
          ++this.state.pos;
          out = normalizeCRLF ? "\n" : "\r\n";
        } else {
          out = String.fromCharCode(ch);
        }
        ++this.state.curLine;
        this.state.lineStart = this.state.pos;
        return out;
      }
      jsxReadString(quote) {
        let out = "";
        let chunkStart = ++this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.length) {
            throw this.raise(this.state.start, ErrorMessages.UnterminatedString);
          }
          const ch = this.input.charCodeAt(this.state.pos);
          if (ch === quote)
            break;
          if (ch === 38) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadEntity();
            chunkStart = this.state.pos;
          } else if (isNewLine(ch)) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadNewLine(false);
            chunkStart = this.state.pos;
          } else {
            ++this.state.pos;
          }
        }
        out += this.input.slice(chunkStart, this.state.pos++);
        return this.finishToken(123, out);
      }
      jsxReadEntity() {
        let str = "";
        let count = 0;
        let entity;
        let ch = this.input[this.state.pos];
        const startPos = ++this.state.pos;
        while (this.state.pos < this.length && count++ < 10) {
          ch = this.input[this.state.pos++];
          if (ch === ";") {
            if (str[0] === "#") {
              if (str[1] === "x") {
                str = str.substr(2);
                if (HEX_NUMBER.test(str)) {
                  entity = String.fromCodePoint(parseInt(str, 16));
                }
              } else {
                str = str.substr(1);
                if (DECIMAL_NUMBER.test(str)) {
                  entity = String.fromCodePoint(parseInt(str, 10));
                }
              }
            } else {
              entity = entities[str];
            }
            break;
          }
          str += ch;
        }
        if (!entity) {
          this.state.pos = startPos;
          return "&";
        }
        return entity;
      }
      jsxReadWord() {
        let ch;
        const start = this.state.pos;
        do {
          ch = this.input.charCodeAt(++this.state.pos);
        } while (isIdentifierChar(ch) || ch === 45);
        return this.finishToken(130, this.input.slice(start, this.state.pos));
      }
      jsxParseIdentifier() {
        const node2 = this.startNode();
        if (this.match(130)) {
          node2.name = this.state.value;
        } else if (tokenIsKeyword(this.state.type)) {
          node2.name = tokenLabelName(this.state.type);
        } else {
          this.unexpected();
        }
        this.next();
        return this.finishNode(node2, "JSXIdentifier");
      }
      jsxParseNamespacedName() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const name = this.jsxParseIdentifier();
        if (!this.eat(14))
          return name;
        const node2 = this.startNodeAt(startPos, startLoc);
        node2.namespace = name;
        node2.name = this.jsxParseIdentifier();
        return this.finishNode(node2, "JSXNamespacedName");
      }
      jsxParseElementName() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let node2 = this.jsxParseNamespacedName();
        if (node2.type === "JSXNamespacedName") {
          return node2;
        }
        while (this.eat(16)) {
          const newNode = this.startNodeAt(startPos, startLoc);
          newNode.object = node2;
          newNode.property = this.jsxParseIdentifier();
          node2 = this.finishNode(newNode, "JSXMemberExpression");
        }
        return node2;
      }
      jsxParseAttributeValue() {
        let node2;
        switch (this.state.type) {
          case 5:
            node2 = this.startNode();
            this.next();
            node2 = this.jsxParseExpressionContainer(node2);
            if (node2.expression.type === "JSXEmptyExpression") {
              this.raise(node2.start, JsxErrors.AttributeIsEmpty);
            }
            return node2;
          case 132:
          case 123:
            return this.parseExprAtom();
          default:
            throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);
        }
      }
      jsxParseEmptyExpression() {
        const node2 = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);
        return this.finishNodeAt(node2, "JSXEmptyExpression", this.state.start, this.state.startLoc);
      }
      jsxParseSpreadChild(node2) {
        this.next();
        node2.expression = this.parseExpression();
        this.expect(8);
        return this.finishNode(node2, "JSXSpreadChild");
      }
      jsxParseExpressionContainer(node2) {
        if (this.match(8)) {
          node2.expression = this.jsxParseEmptyExpression();
        } else {
          const expression = this.parseExpression();
          node2.expression = expression;
        }
        this.expect(8);
        return this.finishNode(node2, "JSXExpressionContainer");
      }
      jsxParseAttribute() {
        const node2 = this.startNode();
        if (this.eat(5)) {
          this.expect(21);
          node2.argument = this.parseMaybeAssignAllowIn();
          this.expect(8);
          return this.finishNode(node2, "JSXSpreadAttribute");
        }
        node2.name = this.jsxParseNamespacedName();
        node2.value = this.eat(27) ? this.jsxParseAttributeValue() : null;
        return this.finishNode(node2, "JSXAttribute");
      }
      jsxParseOpeningElementAt(startPos, startLoc) {
        const node2 = this.startNodeAt(startPos, startLoc);
        if (this.match(133)) {
          this.expect(133);
          return this.finishNode(node2, "JSXOpeningFragment");
        }
        node2.name = this.jsxParseElementName();
        return this.jsxParseOpeningElementAfterName(node2);
      }
      jsxParseOpeningElementAfterName(node2) {
        const attributes = [];
        while (!this.match(50) && !this.match(133)) {
          attributes.push(this.jsxParseAttribute());
        }
        node2.attributes = attributes;
        node2.selfClosing = this.eat(50);
        this.expect(133);
        return this.finishNode(node2, "JSXOpeningElement");
      }
      jsxParseClosingElementAt(startPos, startLoc) {
        const node2 = this.startNodeAt(startPos, startLoc);
        if (this.match(133)) {
          this.expect(133);
          return this.finishNode(node2, "JSXClosingFragment");
        }
        node2.name = this.jsxParseElementName();
        this.expect(133);
        return this.finishNode(node2, "JSXClosingElement");
      }
      jsxParseElementAt(startPos, startLoc) {
        const node2 = this.startNodeAt(startPos, startLoc);
        const children = [];
        const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
        let closingElement = null;
        if (!openingElement.selfClosing) {
          contents:
            for (; ; ) {
              switch (this.state.type) {
                case 132:
                  startPos = this.state.start;
                  startLoc = this.state.startLoc;
                  this.next();
                  if (this.eat(50)) {
                    closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
                    break contents;
                  }
                  children.push(this.jsxParseElementAt(startPos, startLoc));
                  break;
                case 131:
                  children.push(this.parseExprAtom());
                  break;
                case 5: {
                  const node3 = this.startNode();
                  this.next();
                  if (this.match(21)) {
                    children.push(this.jsxParseSpreadChild(node3));
                  } else {
                    children.push(this.jsxParseExpressionContainer(node3));
                  }
                  break;
                }
                default:
                  throw this.unexpected();
              }
            }
          if (isFragment(openingElement) && !isFragment(closingElement)) {
            this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);
          } else if (!isFragment(openingElement) && isFragment(closingElement)) {
            this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));
          } else if (!isFragment(openingElement) && !isFragment(closingElement)) {
            if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
              this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));
            }
          }
        }
        if (isFragment(openingElement)) {
          node2.openingFragment = openingElement;
          node2.closingFragment = closingElement;
        } else {
          node2.openingElement = openingElement;
          node2.closingElement = closingElement;
        }
        node2.children = children;
        if (this.match(43)) {
          throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);
        }
        return isFragment(openingElement) ? this.finishNode(node2, "JSXFragment") : this.finishNode(node2, "JSXElement");
      }
      jsxParseElement() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        this.next();
        return this.jsxParseElementAt(startPos, startLoc);
      }
      parseExprAtom(refExpressionErrors) {
        if (this.match(131)) {
          return this.parseLiteral(this.state.value, "JSXText");
        } else if (this.match(132)) {
          return this.jsxParseElement();
        } else if (this.match(43) && this.input.charCodeAt(this.state.pos) !== 33) {
          this.replaceToken(132);
          return this.jsxParseElement();
        } else {
          return super.parseExprAtom(refExpressionErrors);
        }
      }
      getTokenFromCode(code) {
        const context = this.curContext();
        if (context === types.j_expr) {
          return this.jsxReadToken();
        }
        if (context === types.j_oTag || context === types.j_cTag) {
          if (isIdentifierStart(code)) {
            return this.jsxReadWord();
          }
          if (code === 62) {
            ++this.state.pos;
            return this.finishToken(133);
          }
          if ((code === 34 || code === 39) && context === types.j_oTag) {
            return this.jsxReadString(code);
          }
        }
        if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
          ++this.state.pos;
          return this.finishToken(132);
        }
        return super.getTokenFromCode(code);
      }
      updateContext(prevType) {
        super.updateContext(prevType);
        const {
          context,
          type
        } = this.state;
        if (type === 50 && prevType === 132) {
          context.splice(-2, 2, types.j_cTag);
          this.state.canStartJSXElement = false;
        } else if (type === 132) {
          context.push(types.j_expr, types.j_oTag);
        } else if (type === 133) {
          const out = context.pop();
          if (out === types.j_oTag && prevType === 50 || out === types.j_cTag) {
            context.pop();
            this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;
          } else {
            this.state.canStartJSXElement = true;
          }
        } else {
          this.state.canStartJSXElement = tokenComesBeforeExpression(type);
        }
      }
    };
    TypeScriptScope = class extends Scope {
      constructor(...args) {
        super(...args);
        this.types = /* @__PURE__ */ new Set();
        this.enums = /* @__PURE__ */ new Set();
        this.constEnums = /* @__PURE__ */ new Set();
        this.classes = /* @__PURE__ */ new Set();
        this.exportOnlyBindings = /* @__PURE__ */ new Set();
      }
    };
    TypeScriptScopeHandler = class extends ScopeHandler {
      createScope(flags) {
        return new TypeScriptScope(flags);
      }
      declareName(name, bindingType, pos) {
        const scope = this.currentScope();
        if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {
          this.maybeExportDefined(scope, name);
          scope.exportOnlyBindings.add(name);
          return;
        }
        super.declareName(...arguments);
        if (bindingType & BIND_KIND_TYPE) {
          if (!(bindingType & BIND_KIND_VALUE)) {
            this.checkRedeclarationInScope(scope, name, bindingType, pos);
            this.maybeExportDefined(scope, name);
          }
          scope.types.add(name);
        }
        if (bindingType & BIND_FLAGS_TS_ENUM)
          scope.enums.add(name);
        if (bindingType & BIND_FLAGS_TS_CONST_ENUM)
          scope.constEnums.add(name);
        if (bindingType & BIND_FLAGS_CLASS)
          scope.classes.add(name);
      }
      isRedeclaredInScope(scope, name, bindingType) {
        if (scope.enums.has(name)) {
          if (bindingType & BIND_FLAGS_TS_ENUM) {
            const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);
            const wasConst = scope.constEnums.has(name);
            return isConst !== wasConst;
          }
          return true;
        }
        if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {
          if (scope.lexical.has(name)) {
            return !!(bindingType & BIND_KIND_VALUE);
          } else {
            return false;
          }
        }
        if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {
          return true;
        }
        return super.isRedeclaredInScope(...arguments);
      }
      checkLocalExport(id2) {
        const topLevelScope = this.scopeStack[0];
        const {
          name
        } = id2;
        if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {
          super.checkLocalExport(id2);
        }
      }
    };
    TSErrors = makeErrorTemplates({
      AbstractMethodHasImplementation: "Method '%0' cannot have an implementation because it is marked abstract.",
      AbstractPropertyHasInitializer: "Property '%0' cannot have an initializer because it is marked abstract.",
      AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
      AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
      ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
      ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
      ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
      DeclareAccessor: "'declare' is not allowed in %0ters.",
      DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
      DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
      DuplicateAccessibilityModifier: "Accessibility modifier already seen.",
      DuplicateModifier: "Duplicate modifier: '%0'.",
      EmptyHeritageClauseType: "'%0' list cannot be empty.",
      EmptyTypeArguments: "Type argument list cannot be empty.",
      EmptyTypeParameters: "Type parameter list cannot be empty.",
      ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
      ImportAliasHasImportType: "An import alias can not use 'import type'.",
      IncompatibleModifiers: "'%0' modifier cannot be used with '%1' modifier.",
      IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
      IndexSignatureHasAccessibility: "Index signatures cannot have an accessibility modifier ('%0').",
      IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
      IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
      IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
      InvalidModifierOnTypeMember: "'%0' modifier cannot appear on a type member.",
      InvalidModifiersOrder: "'%0' modifier must precede '%1' modifier.",
      InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
      MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
      MixedLabeledAndUnlabeledElements: "Tuple members must all have names or all not have names.",
      NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
      NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
      OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
      OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
      PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
      PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
      PrivateElementHasAccessibility: "Private elements cannot have an accessibility modifier ('%0').",
      ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
      ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
      ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
      SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
      SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
      SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
      StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
      TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
      TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
      TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
      TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
      UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
      UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
      UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
      UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
      UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
      UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
      UnsupportedSignatureParameterKind: "Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0."
    }, ErrorCodes.SyntaxError, "typescript");
    typescript = (superClass) => class extends superClass {
      getScopeHandler() {
        return TypeScriptScopeHandler;
      }
      tsIsIdentifier() {
        return tokenIsIdentifier(this.state.type);
      }
      tsTokenCanFollowModifier() {
        return (this.match(0) || this.match(5) || this.match(49) || this.match(21) || this.match(128) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
      }
      tsNextTokenCanFollowModifier() {
        this.next();
        return this.tsTokenCanFollowModifier();
      }
      tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
        if (!tokenIsIdentifier(this.state.type)) {
          return void 0;
        }
        const modifier = this.state.value;
        if (allowedModifiers.indexOf(modifier) !== -1) {
          if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {
            return void 0;
          }
          if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
            return modifier;
          }
        }
        return void 0;
      }
      tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate, stopOnStartOfClassStaticBlock) {
        const enforceOrder = (pos, modifier, before, after) => {
          if (modifier === before && modified[after]) {
            this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);
          }
        };
        const incompatible = (pos, modifier, mod1, mod2) => {
          if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
            this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);
          }
        };
        for (; ; ) {
          const startPos = this.state.start;
          const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
          if (!modifier)
            break;
          if (tsIsAccessModifier(modifier)) {
            if (modified.accessibility) {
              this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);
            } else {
              enforceOrder(startPos, modifier, modifier, "override");
              enforceOrder(startPos, modifier, modifier, "static");
              enforceOrder(startPos, modifier, modifier, "readonly");
              modified.accessibility = modifier;
            }
          } else {
            if (Object.hasOwnProperty.call(modified, modifier)) {
              this.raise(startPos, TSErrors.DuplicateModifier, modifier);
            } else {
              enforceOrder(startPos, modifier, "static", "readonly");
              enforceOrder(startPos, modifier, "static", "override");
              enforceOrder(startPos, modifier, "override", "readonly");
              enforceOrder(startPos, modifier, "abstract", "override");
              incompatible(startPos, modifier, "declare", "override");
              incompatible(startPos, modifier, "static", "abstract");
            }
            modified[modifier] = true;
          }
          if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
            this.raise(startPos, errorTemplate, modifier);
          }
        }
      }
      tsIsListTerminator(kind) {
        switch (kind) {
          case "EnumMembers":
          case "TypeMembers":
            return this.match(8);
          case "HeritageClauseElement":
            return this.match(5);
          case "TupleElementTypes":
            return this.match(3);
          case "TypeParametersOrArguments":
            return this.match(44);
        }
        throw new Error("Unreachable");
      }
      tsParseList(kind, parseElement2) {
        const result2 = [];
        while (!this.tsIsListTerminator(kind)) {
          result2.push(parseElement2());
        }
        return result2;
      }
      tsParseDelimitedList(kind, parseElement2, refTrailingCommaPos) {
        return nonNull(this.tsParseDelimitedListWorker(kind, parseElement2, true, refTrailingCommaPos));
      }
      tsParseDelimitedListWorker(kind, parseElement2, expectSuccess, refTrailingCommaPos) {
        const result2 = [];
        let trailingCommaPos = -1;
        for (; ; ) {
          if (this.tsIsListTerminator(kind)) {
            break;
          }
          trailingCommaPos = -1;
          const element = parseElement2();
          if (element == null) {
            return void 0;
          }
          result2.push(element);
          if (this.eat(12)) {
            trailingCommaPos = this.state.lastTokStart;
            continue;
          }
          if (this.tsIsListTerminator(kind)) {
            break;
          }
          if (expectSuccess) {
            this.expect(12);
          }
          return void 0;
        }
        if (refTrailingCommaPos) {
          refTrailingCommaPos.value = trailingCommaPos;
        }
        return result2;
      }
      tsParseBracketedList(kind, parseElement2, bracket, skipFirstToken, refTrailingCommaPos) {
        if (!skipFirstToken) {
          if (bracket) {
            this.expect(0);
          } else {
            this.expect(43);
          }
        }
        const result2 = this.tsParseDelimitedList(kind, parseElement2, refTrailingCommaPos);
        if (bracket) {
          this.expect(3);
        } else {
          this.expect(44);
        }
        return result2;
      }
      tsParseImportType() {
        const node2 = this.startNode();
        this.expect(77);
        this.expect(10);
        if (!this.match(123)) {
          this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);
        }
        node2.argument = this.parseExprAtom();
        this.expect(11);
        if (this.eat(16)) {
          node2.qualifier = this.tsParseEntityName(true);
        }
        if (this.match(43)) {
          node2.typeParameters = this.tsParseTypeArguments();
        }
        return this.finishNode(node2, "TSImportType");
      }
      tsParseEntityName(allowReservedWords) {
        let entity = this.parseIdentifier();
        while (this.eat(16)) {
          const node2 = this.startNodeAtNode(entity);
          node2.left = entity;
          node2.right = this.parseIdentifier(allowReservedWords);
          entity = this.finishNode(node2, "TSQualifiedName");
        }
        return entity;
      }
      tsParseTypeReference() {
        const node2 = this.startNode();
        node2.typeName = this.tsParseEntityName(false);
        if (!this.hasPrecedingLineBreak() && this.match(43)) {
          node2.typeParameters = this.tsParseTypeArguments();
        }
        return this.finishNode(node2, "TSTypeReference");
      }
      tsParseThisTypePredicate(lhs) {
        this.next();
        const node2 = this.startNodeAtNode(lhs);
        node2.parameterName = lhs;
        node2.typeAnnotation = this.tsParseTypeAnnotation(false);
        node2.asserts = false;
        return this.finishNode(node2, "TSTypePredicate");
      }
      tsParseThisTypeNode() {
        const node2 = this.startNode();
        this.next();
        return this.finishNode(node2, "TSThisType");
      }
      tsParseTypeQuery() {
        const node2 = this.startNode();
        this.expect(81);
        if (this.match(77)) {
          node2.exprName = this.tsParseImportType();
        } else {
          node2.exprName = this.tsParseEntityName(true);
        }
        return this.finishNode(node2, "TSTypeQuery");
      }
      tsParseTypeParameter() {
        const node2 = this.startNode();
        node2.name = this.tsParseTypeParameterName();
        node2.constraint = this.tsEatThenParseType(75);
        node2.default = this.tsEatThenParseType(27);
        return this.finishNode(node2, "TSTypeParameter");
      }
      tsTryParseTypeParameters() {
        if (this.match(43)) {
          return this.tsParseTypeParameters();
        }
      }
      tsParseTypeParameters() {
        const node2 = this.startNode();
        if (this.match(43) || this.match(132)) {
          this.next();
        } else {
          this.unexpected();
        }
        const refTrailingCommaPos = {
          value: -1
        };
        node2.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this), false, true, refTrailingCommaPos);
        if (node2.params.length === 0) {
          this.raise(node2.start, TSErrors.EmptyTypeParameters);
        }
        if (refTrailingCommaPos.value !== -1) {
          this.addExtra(node2, "trailingComma", refTrailingCommaPos.value);
        }
        return this.finishNode(node2, "TSTypeParameterDeclaration");
      }
      tsTryNextParseConstantContext() {
        if (this.lookahead().type === 69) {
          this.next();
          return this.tsParseTypeReference();
        }
        return null;
      }
      tsFillSignature(returnToken, signature) {
        const returnTokenRequired = returnToken === 19;
        signature.typeParameters = this.tsTryParseTypeParameters();
        this.expect(10);
        signature.parameters = this.tsParseBindingListForSignature();
        if (returnTokenRequired) {
          signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
        } else if (this.match(returnToken)) {
          signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
        }
      }
      tsParseBindingListForSignature() {
        return this.parseBindingList(11, 41).map((pattern) => {
          if (pattern.type !== "Identifier" && pattern.type !== "RestElement" && pattern.type !== "ObjectPattern" && pattern.type !== "ArrayPattern") {
            this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);
          }
          return pattern;
        });
      }
      tsParseTypeMemberSemicolon() {
        if (!this.eat(12) && !this.isLineTerminator()) {
          this.expect(13);
        }
      }
      tsParseSignatureMember(kind, node2) {
        this.tsFillSignature(14, node2);
        this.tsParseTypeMemberSemicolon();
        return this.finishNode(node2, kind);
      }
      tsIsUnambiguouslyIndexSignature() {
        this.next();
        if (tokenIsIdentifier(this.state.type)) {
          this.next();
          return this.match(14);
        }
        return false;
      }
      tsTryParseIndexSignature(node2) {
        if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
          return void 0;
        }
        this.expect(0);
        const id2 = this.parseIdentifier();
        id2.typeAnnotation = this.tsParseTypeAnnotation();
        this.resetEndLocation(id2);
        this.expect(3);
        node2.parameters = [id2];
        const type = this.tsTryParseTypeAnnotation();
        if (type)
          node2.typeAnnotation = type;
        this.tsParseTypeMemberSemicolon();
        return this.finishNode(node2, "TSIndexSignature");
      }
      tsParsePropertyOrMethodSignature(node2, readonly) {
        if (this.eat(17))
          node2.optional = true;
        const nodeAny = node2;
        if (this.match(10) || this.match(43)) {
          if (readonly) {
            this.raise(node2.start, TSErrors.ReadonlyForMethodSignature);
          }
          const method = nodeAny;
          if (method.kind && this.match(43)) {
            this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);
          }
          this.tsFillSignature(14, method);
          this.tsParseTypeMemberSemicolon();
          if (method.kind === "get") {
            if (method.parameters.length > 0) {
              this.raise(this.state.pos, ErrorMessages.BadGetterArity);
              if (this.isThisParam(method.parameters[0])) {
                this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);
              }
            }
          } else if (method.kind === "set") {
            if (method.parameters.length !== 1) {
              this.raise(this.state.pos, ErrorMessages.BadSetterArity);
            } else {
              const firstParameter = method.parameters[0];
              if (this.isThisParam(firstParameter)) {
                this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);
              }
              if (firstParameter.type === "Identifier" && firstParameter.optional) {
                this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);
              }
              if (firstParameter.type === "RestElement") {
                this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);
              }
            }
            if (method.typeAnnotation) {
              this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);
            }
          } else {
            method.kind = "method";
          }
          return this.finishNode(method, "TSMethodSignature");
        } else {
          const property = nodeAny;
          if (readonly)
            property.readonly = true;
          const type = this.tsTryParseTypeAnnotation();
          if (type)
            property.typeAnnotation = type;
          this.tsParseTypeMemberSemicolon();
          return this.finishNode(property, "TSPropertySignature");
        }
      }
      tsParseTypeMember() {
        const node2 = this.startNode();
        if (this.match(10) || this.match(43)) {
          return this.tsParseSignatureMember("TSCallSignatureDeclaration", node2);
        }
        if (this.match(71)) {
          const id2 = this.startNode();
          this.next();
          if (this.match(10) || this.match(43)) {
            return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node2);
          } else {
            node2.key = this.createIdentifier(id2, "new");
            return this.tsParsePropertyOrMethodSignature(node2, false);
          }
        }
        this.tsParseModifiers(node2, ["readonly"], ["declare", "abstract", "private", "protected", "public", "static", "override"], TSErrors.InvalidModifierOnTypeMember);
        const idx = this.tsTryParseIndexSignature(node2);
        if (idx) {
          return idx;
        }
        this.parsePropertyName(node2);
        if (!node2.computed && node2.key.type === "Identifier" && (node2.key.name === "get" || node2.key.name === "set") && this.tsTokenCanFollowModifier()) {
          node2.kind = node2.key.name;
          this.parsePropertyName(node2);
        }
        return this.tsParsePropertyOrMethodSignature(node2, !!node2.readonly);
      }
      tsParseTypeLiteral() {
        const node2 = this.startNode();
        node2.members = this.tsParseObjectTypeMembers();
        return this.finishNode(node2, "TSTypeLiteral");
      }
      tsParseObjectTypeMembers() {
        this.expect(5);
        const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
        this.expect(8);
        return members;
      }
      tsIsStartOfMappedType() {
        this.next();
        if (this.eat(47)) {
          return this.isContextual(112);
        }
        if (this.isContextual(112)) {
          this.next();
        }
        if (!this.match(0)) {
          return false;
        }
        this.next();
        if (!this.tsIsIdentifier()) {
          return false;
        }
        this.next();
        return this.match(52);
      }
      tsParseMappedTypeParameter() {
        const node2 = this.startNode();
        node2.name = this.tsParseTypeParameterName();
        node2.constraint = this.tsExpectThenParseType(52);
        return this.finishNode(node2, "TSTypeParameter");
      }
      tsParseMappedType() {
        const node2 = this.startNode();
        this.expect(5);
        if (this.match(47)) {
          node2.readonly = this.state.value;
          this.next();
          this.expectContextual(112);
        } else if (this.eatContextual(112)) {
          node2.readonly = true;
        }
        this.expect(0);
        node2.typeParameter = this.tsParseMappedTypeParameter();
        node2.nameType = this.eatContextual(87) ? this.tsParseType() : null;
        this.expect(3);
        if (this.match(47)) {
          node2.optional = this.state.value;
          this.next();
          this.expect(17);
        } else if (this.eat(17)) {
          node2.optional = true;
        }
        node2.typeAnnotation = this.tsTryParseType();
        this.semicolon();
        this.expect(8);
        return this.finishNode(node2, "TSMappedType");
      }
      tsParseTupleType() {
        const node2 = this.startNode();
        node2.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
        let seenOptionalElement = false;
        let labeledElements = null;
        node2.elementTypes.forEach((elementNode) => {
          var _labeledElements;
          let {
            type
          } = elementNode;
          if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {
            this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);
          }
          seenOptionalElement = seenOptionalElement || type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType";
          if (type === "TSRestType") {
            elementNode = elementNode.typeAnnotation;
            type = elementNode.type;
          }
          const isLabeled = type === "TSNamedTupleMember";
          labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;
          if (labeledElements !== isLabeled) {
            this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);
          }
        });
        return this.finishNode(node2, "TSTupleType");
      }
      tsParseTupleElementType() {
        const {
          start: startPos,
          startLoc
        } = this.state;
        const rest = this.eat(21);
        let type = this.tsParseType();
        const optional = this.eat(17);
        const labeled = this.eat(14);
        if (labeled) {
          const labeledNode = this.startNodeAtNode(type);
          labeledNode.optional = optional;
          if (type.type === "TSTypeReference" && !type.typeParameters && type.typeName.type === "Identifier") {
            labeledNode.label = type.typeName;
          } else {
            this.raise(type.start, TSErrors.InvalidTupleMemberLabel);
            labeledNode.label = type;
          }
          labeledNode.elementType = this.tsParseType();
          type = this.finishNode(labeledNode, "TSNamedTupleMember");
        } else if (optional) {
          const optionalTypeNode = this.startNodeAtNode(type);
          optionalTypeNode.typeAnnotation = type;
          type = this.finishNode(optionalTypeNode, "TSOptionalType");
        }
        if (rest) {
          const restNode = this.startNodeAt(startPos, startLoc);
          restNode.typeAnnotation = type;
          type = this.finishNode(restNode, "TSRestType");
        }
        return type;
      }
      tsParseParenthesizedType() {
        const node2 = this.startNode();
        this.expect(10);
        node2.typeAnnotation = this.tsParseType();
        this.expect(11);
        return this.finishNode(node2, "TSParenthesizedType");
      }
      tsParseFunctionOrConstructorType(type, abstract) {
        const node2 = this.startNode();
        if (type === "TSConstructorType") {
          node2.abstract = !!abstract;
          if (abstract)
            this.next();
          this.next();
        }
        this.tsFillSignature(19, node2);
        return this.finishNode(node2, type);
      }
      tsParseLiteralTypeNode() {
        const node2 = this.startNode();
        node2.literal = (() => {
          switch (this.state.type) {
            case 124:
            case 125:
            case 123:
            case 79:
            case 80:
              return this.parseExprAtom();
            default:
              throw this.unexpected();
          }
        })();
        return this.finishNode(node2, "TSLiteralType");
      }
      tsParseTemplateLiteralType() {
        const node2 = this.startNode();
        node2.literal = this.parseTemplate(false);
        return this.finishNode(node2, "TSLiteralType");
      }
      parseTemplateSubstitution() {
        if (this.state.inType)
          return this.tsParseType();
        return super.parseTemplateSubstitution();
      }
      tsParseThisTypeOrThisTypePredicate() {
        const thisKeyword = this.tsParseThisTypeNode();
        if (this.isContextual(107) && !this.hasPrecedingLineBreak()) {
          return this.tsParseThisTypePredicate(thisKeyword);
        } else {
          return thisKeyword;
        }
      }
      tsParseNonArrayType() {
        switch (this.state.type) {
          case 123:
          case 124:
          case 125:
          case 79:
          case 80:
            return this.tsParseLiteralTypeNode();
          case 47:
            if (this.state.value === "-") {
              const node2 = this.startNode();
              const nextToken = this.lookahead();
              if (nextToken.type !== 124 && nextToken.type !== 125) {
                throw this.unexpected();
              }
              node2.literal = this.parseMaybeUnary();
              return this.finishNode(node2, "TSLiteralType");
            }
            break;
          case 72:
            return this.tsParseThisTypeOrThisTypePredicate();
          case 81:
            return this.tsParseTypeQuery();
          case 77:
            return this.tsParseImportType();
          case 5:
            return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
          case 0:
            return this.tsParseTupleType();
          case 10:
            return this.tsParseParenthesizedType();
          case 22:
            return this.tsParseTemplateLiteralType();
          default: {
            const {
              type
            } = this.state;
            if (tokenIsIdentifier(type) || type === 82 || type === 78) {
              const nodeType = type === 82 ? "TSVoidKeyword" : type === 78 ? "TSNullKeyword" : keywordTypeFromName(this.state.value);
              if (nodeType !== void 0 && this.lookaheadCharCode() !== 46) {
                const node2 = this.startNode();
                this.next();
                return this.finishNode(node2, nodeType);
              }
              return this.tsParseTypeReference();
            }
          }
        }
        throw this.unexpected();
      }
      tsParseArrayTypeOrHigher() {
        let type = this.tsParseNonArrayType();
        while (!this.hasPrecedingLineBreak() && this.eat(0)) {
          if (this.match(3)) {
            const node2 = this.startNodeAtNode(type);
            node2.elementType = type;
            this.expect(3);
            type = this.finishNode(node2, "TSArrayType");
          } else {
            const node2 = this.startNodeAtNode(type);
            node2.objectType = type;
            node2.indexType = this.tsParseType();
            this.expect(3);
            type = this.finishNode(node2, "TSIndexedAccessType");
          }
        }
        return type;
      }
      tsParseTypeOperator() {
        const node2 = this.startNode();
        const operator = this.state.value;
        this.next();
        node2.operator = operator;
        node2.typeAnnotation = this.tsParseTypeOperatorOrHigher();
        if (operator === "readonly") {
          this.tsCheckTypeAnnotationForReadOnly(node2);
        }
        return this.finishNode(node2, "TSTypeOperator");
      }
      tsCheckTypeAnnotationForReadOnly(node2) {
        switch (node2.typeAnnotation.type) {
          case "TSTupleType":
          case "TSArrayType":
            return;
          default:
            this.raise(node2.start, TSErrors.UnexpectedReadonly);
        }
      }
      tsParseInferType() {
        const node2 = this.startNode();
        this.expectContextual(106);
        const typeParameter = this.startNode();
        typeParameter.name = this.tsParseTypeParameterName();
        node2.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
        return this.finishNode(node2, "TSInferType");
      }
      tsParseTypeOperatorOrHigher() {
        const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;
        return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(106) ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();
      }
      tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
        const node2 = this.startNode();
        const hasLeadingOperator = this.eat(operator);
        const types2 = [];
        do {
          types2.push(parseConstituentType());
        } while (this.eat(operator));
        if (types2.length === 1 && !hasLeadingOperator) {
          return types2[0];
        }
        node2.types = types2;
        return this.finishNode(node2, kind);
      }
      tsParseIntersectionTypeOrHigher() {
        return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 41);
      }
      tsParseUnionTypeOrHigher() {
        return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 39);
      }
      tsIsStartOfFunctionType() {
        if (this.match(43)) {
          return true;
        }
        return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
      }
      tsSkipParameterStart() {
        if (tokenIsIdentifier(this.state.type) || this.match(72)) {
          this.next();
          return true;
        }
        if (this.match(5)) {
          let braceStackCounter = 1;
          this.next();
          while (braceStackCounter > 0) {
            if (this.match(5)) {
              ++braceStackCounter;
            } else if (this.match(8)) {
              --braceStackCounter;
            }
            this.next();
          }
          return true;
        }
        if (this.match(0)) {
          let braceStackCounter = 1;
          this.next();
          while (braceStackCounter > 0) {
            if (this.match(0)) {
              ++braceStackCounter;
            } else if (this.match(3)) {
              --braceStackCounter;
            }
            this.next();
          }
          return true;
        }
        return false;
      }
      tsIsUnambiguouslyStartOfFunctionType() {
        this.next();
        if (this.match(11) || this.match(21)) {
          return true;
        }
        if (this.tsSkipParameterStart()) {
          if (this.match(14) || this.match(12) || this.match(17) || this.match(27)) {
            return true;
          }
          if (this.match(11)) {
            this.next();
            if (this.match(19)) {
              return true;
            }
          }
        }
        return false;
      }
      tsParseTypeOrTypePredicateAnnotation(returnToken) {
        return this.tsInType(() => {
          const t = this.startNode();
          this.expect(returnToken);
          const node2 = this.startNode();
          const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
          if (asserts && this.match(72)) {
            let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
            if (thisTypePredicate.type === "TSThisType") {
              node2.parameterName = thisTypePredicate;
              node2.asserts = true;
              node2.typeAnnotation = null;
              thisTypePredicate = this.finishNode(node2, "TSTypePredicate");
            } else {
              this.resetStartLocationFromNode(thisTypePredicate, node2);
              thisTypePredicate.asserts = true;
            }
            t.typeAnnotation = thisTypePredicate;
            return this.finishNode(t, "TSTypeAnnotation");
          }
          const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
          if (!typePredicateVariable) {
            if (!asserts) {
              return this.tsParseTypeAnnotation(false, t);
            }
            node2.parameterName = this.parseIdentifier();
            node2.asserts = asserts;
            node2.typeAnnotation = null;
            t.typeAnnotation = this.finishNode(node2, "TSTypePredicate");
            return this.finishNode(t, "TSTypeAnnotation");
          }
          const type = this.tsParseTypeAnnotation(false);
          node2.parameterName = typePredicateVariable;
          node2.typeAnnotation = type;
          node2.asserts = asserts;
          t.typeAnnotation = this.finishNode(node2, "TSTypePredicate");
          return this.finishNode(t, "TSTypeAnnotation");
        });
      }
      tsTryParseTypeOrTypePredicateAnnotation() {
        return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : void 0;
      }
      tsTryParseTypeAnnotation() {
        return this.match(14) ? this.tsParseTypeAnnotation() : void 0;
      }
      tsTryParseType() {
        return this.tsEatThenParseType(14);
      }
      tsParseTypePredicatePrefix() {
        const id2 = this.parseIdentifier();
        if (this.isContextual(107) && !this.hasPrecedingLineBreak()) {
          this.next();
          return id2;
        }
      }
      tsParseTypePredicateAsserts() {
        if (this.state.type !== 100) {
          return false;
        }
        const containsEsc = this.state.containsEsc;
        this.next();
        if (!tokenIsIdentifier(this.state.type) && !this.match(72)) {
          return false;
        }
        if (containsEsc) {
          this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, "asserts");
        }
        return true;
      }
      tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
        this.tsInType(() => {
          if (eatColon)
            this.expect(14);
          t.typeAnnotation = this.tsParseType();
        });
        return this.finishNode(t, "TSTypeAnnotation");
      }
      tsParseType() {
        assert(this.state.inType);
        const type = this.tsParseNonConditionalType();
        if (this.hasPrecedingLineBreak() || !this.eat(75)) {
          return type;
        }
        const node2 = this.startNodeAtNode(type);
        node2.checkType = type;
        node2.extendsType = this.tsParseNonConditionalType();
        this.expect(17);
        node2.trueType = this.tsParseType();
        this.expect(14);
        node2.falseType = this.tsParseType();
        return this.finishNode(node2, "TSConditionalType");
      }
      isAbstractConstructorSignature() {
        return this.isContextual(114) && this.lookahead().type === 71;
      }
      tsParseNonConditionalType() {
        if (this.tsIsStartOfFunctionType()) {
          return this.tsParseFunctionOrConstructorType("TSFunctionType");
        }
        if (this.match(71)) {
          return this.tsParseFunctionOrConstructorType("TSConstructorType");
        } else if (this.isAbstractConstructorSignature()) {
          return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
        }
        return this.tsParseUnionTypeOrHigher();
      }
      tsParseTypeAssertion() {
        if (this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
          this.raise(this.state.start, TSErrors.ReservedTypeAssertion);
        }
        const node2 = this.startNode();
        const _const = this.tsTryNextParseConstantContext();
        node2.typeAnnotation = _const || this.tsNextThenParseType();
        this.expect(44);
        node2.expression = this.parseMaybeUnary();
        return this.finishNode(node2, "TSTypeAssertion");
      }
      tsParseHeritageClause(descriptor) {
        const originalStart = this.state.start;
        const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", this.tsParseExpressionWithTypeArguments.bind(this));
        if (!delimitedList.length) {
          this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);
        }
        return delimitedList;
      }
      tsParseExpressionWithTypeArguments() {
        const node2 = this.startNode();
        node2.expression = this.tsParseEntityName(false);
        if (this.match(43)) {
          node2.typeParameters = this.tsParseTypeArguments();
        }
        return this.finishNode(node2, "TSExpressionWithTypeArguments");
      }
      tsParseInterfaceDeclaration(node2) {
        if (tokenIsIdentifier(this.state.type)) {
          node2.id = this.parseIdentifier();
          this.checkLVal(node2.id, "typescript interface declaration", BIND_TS_INTERFACE);
        } else {
          node2.id = null;
          this.raise(this.state.start, TSErrors.MissingInterfaceName);
        }
        node2.typeParameters = this.tsTryParseTypeParameters();
        if (this.eat(75)) {
          node2.extends = this.tsParseHeritageClause("extends");
        }
        const body = this.startNode();
        body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
        node2.body = this.finishNode(body, "TSInterfaceBody");
        return this.finishNode(node2, "TSInterfaceDeclaration");
      }
      tsParseTypeAliasDeclaration(node2) {
        node2.id = this.parseIdentifier();
        this.checkLVal(node2.id, "typescript type alias", BIND_TS_TYPE);
        node2.typeParameters = this.tsTryParseTypeParameters();
        node2.typeAnnotation = this.tsInType(() => {
          this.expect(27);
          if (this.isContextual(105) && this.lookahead().type !== 16) {
            const node3 = this.startNode();
            this.next();
            return this.finishNode(node3, "TSIntrinsicKeyword");
          }
          return this.tsParseType();
        });
        this.semicolon();
        return this.finishNode(node2, "TSTypeAliasDeclaration");
      }
      tsInNoContext(cb) {
        const oldContext = this.state.context;
        this.state.context = [oldContext[0]];
        try {
          return cb();
        } finally {
          this.state.context = oldContext;
        }
      }
      tsInType(cb) {
        const oldInType = this.state.inType;
        this.state.inType = true;
        try {
          return cb();
        } finally {
          this.state.inType = oldInType;
        }
      }
      tsEatThenParseType(token) {
        return !this.match(token) ? void 0 : this.tsNextThenParseType();
      }
      tsExpectThenParseType(token) {
        return this.tsDoThenParseType(() => this.expect(token));
      }
      tsNextThenParseType() {
        return this.tsDoThenParseType(() => this.next());
      }
      tsDoThenParseType(cb) {
        return this.tsInType(() => {
          cb();
          return this.tsParseType();
        });
      }
      tsParseEnumMember() {
        const node2 = this.startNode();
        node2.id = this.match(123) ? this.parseExprAtom() : this.parseIdentifier(true);
        if (this.eat(27)) {
          node2.initializer = this.parseMaybeAssignAllowIn();
        }
        return this.finishNode(node2, "TSEnumMember");
      }
      tsParseEnumDeclaration(node2, isConst) {
        if (isConst)
          node2.const = true;
        node2.id = this.parseIdentifier();
        this.checkLVal(node2.id, "typescript enum declaration", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);
        this.expect(5);
        node2.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
        this.expect(8);
        return this.finishNode(node2, "TSEnumDeclaration");
      }
      tsParseModuleBlock() {
        const node2 = this.startNode();
        this.scope.enter(SCOPE_OTHER);
        this.expect(5);
        this.parseBlockOrModuleBlockBody(node2.body = [], void 0, true, 8);
        this.scope.exit();
        return this.finishNode(node2, "TSModuleBlock");
      }
      tsParseModuleOrNamespaceDeclaration(node2, nested = false) {
        node2.id = this.parseIdentifier();
        if (!nested) {
          this.checkLVal(node2.id, "module or namespace declaration", BIND_TS_NAMESPACE);
        }
        if (this.eat(16)) {
          const inner = this.startNode();
          this.tsParseModuleOrNamespaceDeclaration(inner, true);
          node2.body = inner;
        } else {
          this.scope.enter(SCOPE_TS_MODULE);
          this.prodParam.enter(PARAM);
          node2.body = this.tsParseModuleBlock();
          this.prodParam.exit();
          this.scope.exit();
        }
        return this.finishNode(node2, "TSModuleDeclaration");
      }
      tsParseAmbientExternalModuleDeclaration(node2) {
        if (this.isContextual(103)) {
          node2.global = true;
          node2.id = this.parseIdentifier();
        } else if (this.match(123)) {
          node2.id = this.parseExprAtom();
        } else {
          this.unexpected();
        }
        if (this.match(5)) {
          this.scope.enter(SCOPE_TS_MODULE);
          this.prodParam.enter(PARAM);
          node2.body = this.tsParseModuleBlock();
          this.prodParam.exit();
          this.scope.exit();
        } else {
          this.semicolon();
        }
        return this.finishNode(node2, "TSModuleDeclaration");
      }
      tsParseImportEqualsDeclaration(node2, isExport) {
        node2.isExport = isExport || false;
        node2.id = this.parseIdentifier();
        this.checkLVal(node2.id, "import equals declaration", BIND_LEXICAL);
        this.expect(27);
        const moduleReference = this.tsParseModuleReference();
        if (node2.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {
          this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);
        }
        node2.moduleReference = moduleReference;
        this.semicolon();
        return this.finishNode(node2, "TSImportEqualsDeclaration");
      }
      tsIsExternalModuleReference() {
        return this.isContextual(110) && this.lookaheadCharCode() === 40;
      }
      tsParseModuleReference() {
        return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
      }
      tsParseExternalModuleReference() {
        const node2 = this.startNode();
        this.expectContextual(110);
        this.expect(10);
        if (!this.match(123)) {
          throw this.unexpected();
        }
        node2.expression = this.parseExprAtom();
        this.expect(11);
        return this.finishNode(node2, "TSExternalModuleReference");
      }
      tsLookAhead(f) {
        const state = this.state.clone();
        const res = f();
        this.state = state;
        return res;
      }
      tsTryParseAndCatch(f) {
        const result2 = this.tryParse((abort) => f() || abort());
        if (result2.aborted || !result2.node)
          return void 0;
        if (result2.error)
          this.state = result2.failState;
        return result2.node;
      }
      tsTryParse(f) {
        const state = this.state.clone();
        const result2 = f();
        if (result2 !== void 0 && result2 !== false) {
          return result2;
        } else {
          this.state = state;
          return void 0;
        }
      }
      tsTryParseDeclare(nany) {
        if (this.isLineTerminator()) {
          return;
        }
        let starttype = this.state.type;
        let kind;
        if (this.isContextual(93)) {
          starttype = 68;
          kind = "let";
        }
        return this.tsInAmbientContext(() => {
          switch (starttype) {
            case 62:
              nany.declare = true;
              return this.parseFunctionStatement(nany, false, true);
            case 74:
              nany.declare = true;
              return this.parseClass(nany, true, false);
            case 69:
              if (this.match(69) && this.isLookaheadContextual("enum")) {
                this.expect(69);
                this.expectContextual(116);
                return this.tsParseEnumDeclaration(nany, true);
              }
            case 68:
              kind = kind || this.state.value;
              return this.parseVarStatement(nany, kind);
            case 103:
              return this.tsParseAmbientExternalModuleDeclaration(nany);
            default: {
              if (tokenIsIdentifier(starttype)) {
                return this.tsParseDeclaration(nany, this.state.value, true);
              }
            }
          }
        });
      }
      tsTryParseExportDeclaration() {
        return this.tsParseDeclaration(this.startNode(), this.state.value, true);
      }
      tsParseExpressionStatement(node2, expr) {
        switch (expr.name) {
          case "declare": {
            const declaration2 = this.tsTryParseDeclare(node2);
            if (declaration2) {
              declaration2.declare = true;
              return declaration2;
            }
            break;
          }
          case "global":
            if (this.match(5)) {
              this.scope.enter(SCOPE_TS_MODULE);
              this.prodParam.enter(PARAM);
              const mod = node2;
              mod.global = true;
              mod.id = expr;
              mod.body = this.tsParseModuleBlock();
              this.scope.exit();
              this.prodParam.exit();
              return this.finishNode(mod, "TSModuleDeclaration");
            }
            break;
          default:
            return this.tsParseDeclaration(node2, expr.name, false);
        }
      }
      tsParseDeclaration(node2, value, next) {
        switch (value) {
          case "abstract":
            if (this.tsCheckLineTerminator(next) && (this.match(74) || tokenIsIdentifier(this.state.type))) {
              return this.tsParseAbstractDeclaration(node2);
            }
            break;
          case "enum":
            if (next || tokenIsIdentifier(this.state.type)) {
              if (next)
                this.next();
              return this.tsParseEnumDeclaration(node2, false);
            }
            break;
          case "interface":
            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
              return this.tsParseInterfaceDeclaration(node2);
            }
            break;
          case "module":
            if (this.tsCheckLineTerminator(next)) {
              if (this.match(123)) {
                return this.tsParseAmbientExternalModuleDeclaration(node2);
              } else if (tokenIsIdentifier(this.state.type)) {
                return this.tsParseModuleOrNamespaceDeclaration(node2);
              }
            }
            break;
          case "namespace":
            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
              return this.tsParseModuleOrNamespaceDeclaration(node2);
            }
            break;
          case "type":
            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
              return this.tsParseTypeAliasDeclaration(node2);
            }
            break;
        }
      }
      tsCheckLineTerminator(next) {
        if (next) {
          if (this.hasFollowingLineBreak())
            return false;
          this.next();
          return true;
        }
        return !this.isLineTerminator();
      }
      tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {
        if (!this.match(43)) {
          return void 0;
        }
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = true;
        const res = this.tsTryParseAndCatch(() => {
          const node2 = this.startNodeAt(startPos, startLoc);
          node2.typeParameters = this.tsParseTypeParameters();
          super.parseFunctionParams(node2);
          node2.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
          this.expect(19);
          return node2;
        });
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        if (!res) {
          return void 0;
        }
        return this.parseArrowExpression(res, null, true);
      }
      tsParseTypeArguments() {
        const node2 = this.startNode();
        node2.params = this.tsInType(() => this.tsInNoContext(() => {
          this.expect(43);
          return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
        }));
        if (node2.params.length === 0) {
          this.raise(node2.start, TSErrors.EmptyTypeArguments);
        }
        this.expect(44);
        return this.finishNode(node2, "TSTypeParameterInstantiation");
      }
      tsIsDeclarationStart() {
        return tokenIsTSDeclarationStart(this.state.type);
      }
      isExportDefaultSpecifier() {
        if (this.tsIsDeclarationStart())
          return false;
        return super.isExportDefaultSpecifier();
      }
      parseAssignableListItem(allowModifiers, decorators) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let accessibility;
        let readonly = false;
        let override = false;
        if (allowModifiers !== void 0) {
          const modified = {};
          this.tsParseModifiers(modified, ["public", "private", "protected", "override", "readonly"]);
          accessibility = modified.accessibility;
          override = modified.override;
          readonly = modified.readonly;
          if (allowModifiers === false && (accessibility || readonly || override)) {
            this.raise(startPos, TSErrors.UnexpectedParameterModifier);
          }
        }
        const left = this.parseMaybeDefault();
        this.parseAssignableListItemTypes(left);
        const elt = this.parseMaybeDefault(left.start, left.loc.start, left);
        if (accessibility || readonly || override) {
          const pp = this.startNodeAt(startPos, startLoc);
          if (decorators.length) {
            pp.decorators = decorators;
          }
          if (accessibility)
            pp.accessibility = accessibility;
          if (readonly)
            pp.readonly = readonly;
          if (override)
            pp.override = override;
          if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {
            this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);
          }
          pp.parameter = elt;
          return this.finishNode(pp, "TSParameterProperty");
        }
        if (decorators.length) {
          left.decorators = decorators;
        }
        return elt;
      }
      parseFunctionBodyAndFinish(node2, type, isMethod = false) {
        if (this.match(14)) {
          node2.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
        }
        const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : void 0;
        if (bodilessType && !this.match(5) && this.isLineTerminator()) {
          this.finishNode(node2, bodilessType);
          return;
        }
        if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
          this.raise(node2.start, TSErrors.DeclareFunctionHasImplementation);
          if (node2.declare) {
            super.parseFunctionBodyAndFinish(node2, bodilessType, isMethod);
            return;
          }
        }
        super.parseFunctionBodyAndFinish(node2, type, isMethod);
      }
      registerFunctionStatementId(node2) {
        if (!node2.body && node2.id) {
          this.checkLVal(node2.id, "function name", BIND_TS_AMBIENT);
        } else {
          super.registerFunctionStatementId(...arguments);
        }
      }
      tsCheckForInvalidTypeCasts(items) {
        items.forEach((node2) => {
          if ((node2 == null ? void 0 : node2.type) === "TSTypeCastExpression") {
            this.raise(node2.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);
          }
        });
      }
      toReferencedList(exprList, isInParens) {
        this.tsCheckForInvalidTypeCasts(exprList);
        return exprList;
      }
      parseArrayLike(...args) {
        const node2 = super.parseArrayLike(...args);
        if (node2.type === "ArrayExpression") {
          this.tsCheckForInvalidTypeCasts(node2.elements);
        }
        return node2;
      }
      parseSubscript(base2, startPos, startLoc, noCalls, state) {
        if (!this.hasPrecedingLineBreak() && this.match(33)) {
          this.state.canStartJSXElement = false;
          this.next();
          const nonNullExpression = this.startNodeAt(startPos, startLoc);
          nonNullExpression.expression = base2;
          return this.finishNode(nonNullExpression, "TSNonNullExpression");
        }
        let isOptionalCall = false;
        if (this.match(18) && this.lookaheadCharCode() === 60) {
          if (noCalls) {
            state.stop = true;
            return base2;
          }
          state.optionalChainMember = isOptionalCall = true;
          this.next();
        }
        if (this.match(43)) {
          let missingParenErrorPos;
          const result2 = this.tsTryParseAndCatch(() => {
            if (!noCalls && this.atPossibleAsyncArrow(base2)) {
              const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);
              if (asyncArrowFn) {
                return asyncArrowFn;
              }
            }
            const node2 = this.startNodeAt(startPos, startLoc);
            node2.callee = base2;
            const typeArguments = this.tsParseTypeArguments();
            if (typeArguments) {
              if (isOptionalCall && !this.match(10)) {
                missingParenErrorPos = this.state.pos;
                this.unexpected();
              }
              if (!noCalls && this.eat(10)) {
                node2.arguments = this.parseCallExpressionArguments(11, false);
                this.tsCheckForInvalidTypeCasts(node2.arguments);
                node2.typeParameters = typeArguments;
                if (state.optionalChainMember) {
                  node2.optional = isOptionalCall;
                }
                return this.finishCallExpression(node2, state.optionalChainMember);
              } else if (this.match(22)) {
                const result3 = this.parseTaggedTemplateExpression(base2, startPos, startLoc, state);
                result3.typeParameters = typeArguments;
                return result3;
              }
            }
            this.unexpected();
          });
          if (missingParenErrorPos) {
            this.unexpected(missingParenErrorPos, 10);
          }
          if (result2)
            return result2;
        }
        return super.parseSubscript(base2, startPos, startLoc, noCalls, state);
      }
      parseNewArguments(node2) {
        if (this.match(43)) {
          const typeParameters = this.tsTryParseAndCatch(() => {
            const args = this.tsParseTypeArguments();
            if (!this.match(10))
              this.unexpected();
            return args;
          });
          if (typeParameters) {
            node2.typeParameters = typeParameters;
          }
        }
        super.parseNewArguments(node2);
      }
      parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
        if (tokenOperatorPrecedence(52) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(87)) {
          const node2 = this.startNodeAt(leftStartPos, leftStartLoc);
          node2.expression = left;
          const _const = this.tsTryNextParseConstantContext();
          if (_const) {
            node2.typeAnnotation = _const;
          } else {
            node2.typeAnnotation = this.tsNextThenParseType();
          }
          this.finishNode(node2, "TSAsExpression");
          this.reScan_lt_gt();
          return this.parseExprOp(node2, leftStartPos, leftStartLoc, minPrec);
        }
        return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);
      }
      checkReservedWord(word, startLoc, checkKeywords, isBinding) {
      }
      checkDuplicateExports() {
      }
      parseImport(node2) {
        node2.importKind = "value";
        if (tokenIsIdentifier(this.state.type) || this.match(49) || this.match(5)) {
          let ahead = this.lookahead();
          if (this.isContextual(120) && ahead.type !== 12 && ahead.type !== 91 && ahead.type !== 27) {
            node2.importKind = "type";
            this.next();
            ahead = this.lookahead();
          }
          if (tokenIsIdentifier(this.state.type) && ahead.type === 27) {
            return this.tsParseImportEqualsDeclaration(node2);
          }
        }
        const importNode = super.parseImport(node2);
        if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {
          this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);
        }
        return importNode;
      }
      parseExport(node2) {
        if (this.match(77)) {
          this.next();
          if (this.isContextual(120) && this.lookaheadCharCode() !== 61) {
            node2.importKind = "type";
            this.next();
          } else {
            node2.importKind = "value";
          }
          return this.tsParseImportEqualsDeclaration(node2, true);
        } else if (this.eat(27)) {
          const assign = node2;
          assign.expression = this.parseExpression();
          this.semicolon();
          return this.finishNode(assign, "TSExportAssignment");
        } else if (this.eatContextual(87)) {
          const decl = node2;
          this.expectContextual(118);
          decl.id = this.parseIdentifier();
          this.semicolon();
          return this.finishNode(decl, "TSNamespaceExportDeclaration");
        } else {
          if (this.isContextual(120) && this.lookahead().type === 5) {
            this.next();
            node2.exportKind = "type";
          } else {
            node2.exportKind = "value";
          }
          return super.parseExport(node2);
        }
      }
      isAbstractClass() {
        return this.isContextual(114) && this.lookahead().type === 74;
      }
      parseExportDefaultExpression() {
        if (this.isAbstractClass()) {
          const cls = this.startNode();
          this.next();
          cls.abstract = true;
          this.parseClass(cls, true, true);
          return cls;
        }
        if (this.match(119)) {
          const interfaceNode = this.startNode();
          this.next();
          const result2 = this.tsParseInterfaceDeclaration(interfaceNode);
          if (result2)
            return result2;
        }
        return super.parseExportDefaultExpression();
      }
      parseStatementContent(context, topLevel) {
        if (this.state.type === 69) {
          const ahead = this.lookahead();
          if (ahead.type === 116) {
            const node2 = this.startNode();
            this.next();
            this.expectContextual(116);
            return this.tsParseEnumDeclaration(node2, true);
          }
        }
        return super.parseStatementContent(context, topLevel);
      }
      parseAccessModifier() {
        return this.tsParseModifier(["public", "protected", "private"]);
      }
      tsHasSomeModifiers(member, modifiers) {
        return modifiers.some((modifier) => {
          if (tsIsAccessModifier(modifier)) {
            return member.accessibility === modifier;
          }
          return !!member[modifier];
        });
      }
      tsIsStartOfStaticBlocks() {
        return this.isContextual(98) && this.lookaheadCharCode() === 123;
      }
      parseClassMember(classBody, member, state) {
        const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
        this.tsParseModifiers(member, modifiers, void 0, void 0, true);
        const callParseClassMemberWithIsStatic = () => {
          if (this.tsIsStartOfStaticBlocks()) {
            this.next();
            this.next();
            if (this.tsHasSomeModifiers(member, modifiers)) {
              this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);
            }
            this.parseClassStaticBlock(classBody, member);
          } else {
            this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
          }
        };
        if (member.declare) {
          this.tsInAmbientContext(callParseClassMemberWithIsStatic);
        } else {
          callParseClassMemberWithIsStatic();
        }
      }
      parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
        const idx = this.tsTryParseIndexSignature(member);
        if (idx) {
          classBody.body.push(idx);
          if (member.abstract) {
            this.raise(member.start, TSErrors.IndexSignatureHasAbstract);
          }
          if (member.accessibility) {
            this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);
          }
          if (member.declare) {
            this.raise(member.start, TSErrors.IndexSignatureHasDeclare);
          }
          if (member.override) {
            this.raise(member.start, TSErrors.IndexSignatureHasOverride);
          }
          return;
        }
        if (!this.state.inAbstractClass && member.abstract) {
          this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);
        }
        if (member.override) {
          if (!state.hadSuperClass) {
            this.raise(member.start, TSErrors.OverrideNotInSubClass);
          }
        }
        super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
      }
      parsePostMemberNameModifiers(methodOrProp) {
        const optional = this.eat(17);
        if (optional)
          methodOrProp.optional = true;
        if (methodOrProp.readonly && this.match(10)) {
          this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);
        }
        if (methodOrProp.declare && this.match(10)) {
          this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);
        }
      }
      parseExpressionStatement(node2, expr) {
        const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node2, expr) : void 0;
        return decl || super.parseExpressionStatement(node2, expr);
      }
      shouldParseExportDeclaration() {
        if (this.tsIsDeclarationStart())
          return true;
        return super.shouldParseExportDeclaration();
      }
      parseConditional(expr, startPos, startLoc, refExpressionErrors) {
        if (!this.state.maybeInArrowParameters || !this.match(17)) {
          return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);
        }
        const result2 = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));
        if (!result2.node) {
          if (result2.error) {
            super.setOptionalParametersError(refExpressionErrors, result2.error);
          }
          return expr;
        }
        if (result2.error)
          this.state = result2.failState;
        return result2.node;
      }
      parseParenItem(node2, startPos, startLoc) {
        node2 = super.parseParenItem(node2, startPos, startLoc);
        if (this.eat(17)) {
          node2.optional = true;
          this.resetEndLocation(node2);
        }
        if (this.match(14)) {
          const typeCastNode = this.startNodeAt(startPos, startLoc);
          typeCastNode.expression = node2;
          typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
          return this.finishNode(typeCastNode, "TSTypeCastExpression");
        }
        return node2;
      }
      parseExportDeclaration(node2) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const isDeclare = this.eatContextual(115);
        if (isDeclare && (this.isContextual(115) || !this.shouldParseExportDeclaration())) {
          throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);
        }
        let declaration2;
        if (tokenIsIdentifier(this.state.type)) {
          declaration2 = this.tsTryParseExportDeclaration();
        }
        if (!declaration2) {
          declaration2 = super.parseExportDeclaration(node2);
        }
        if (declaration2 && (declaration2.type === "TSInterfaceDeclaration" || declaration2.type === "TSTypeAliasDeclaration" || isDeclare)) {
          node2.exportKind = "type";
        }
        if (declaration2 && isDeclare) {
          this.resetStartLocation(declaration2, startPos, startLoc);
          declaration2.declare = true;
        }
        return declaration2;
      }
      parseClassId(node2, isStatement, optionalId) {
        if ((!isStatement || optionalId) && this.isContextual(104)) {
          return;
        }
        super.parseClassId(node2, isStatement, optionalId, node2.declare ? BIND_TS_AMBIENT : BIND_CLASS);
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters)
          node2.typeParameters = typeParameters;
      }
      parseClassPropertyAnnotation(node2) {
        if (!node2.optional && this.eat(33)) {
          node2.definite = true;
        }
        const type = this.tsTryParseTypeAnnotation();
        if (type)
          node2.typeAnnotation = type;
      }
      parseClassProperty(node2) {
        this.parseClassPropertyAnnotation(node2);
        if (this.state.isAmbientContext && this.match(27)) {
          this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);
        }
        if (node2.abstract && this.match(27)) {
          const {
            key
          } = node2;
          this.raise(this.state.start, TSErrors.AbstractPropertyHasInitializer, key.type === "Identifier" && !node2.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);
        }
        return super.parseClassProperty(node2);
      }
      parseClassPrivateProperty(node2) {
        if (node2.abstract) {
          this.raise(node2.start, TSErrors.PrivateElementHasAbstract);
        }
        if (node2.accessibility) {
          this.raise(node2.start, TSErrors.PrivateElementHasAccessibility, node2.accessibility);
        }
        this.parseClassPropertyAnnotation(node2);
        return super.parseClassPrivateProperty(node2);
      }
      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters && isConstructor) {
          this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);
        }
        if (method.declare && (method.kind === "get" || method.kind === "set")) {
          this.raise(method.start, TSErrors.DeclareAccessor, method.kind);
        }
        if (typeParameters)
          method.typeParameters = typeParameters;
        super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
      }
      pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters)
          method.typeParameters = typeParameters;
        super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
      }
      declareClassPrivateMethodInScope(node2, kind) {
        if (node2.type === "TSDeclareMethod")
          return;
        if (node2.type === "MethodDefinition" && !node2.value.body)
          return;
        super.declareClassPrivateMethodInScope(node2, kind);
      }
      parseClassSuper(node2) {
        super.parseClassSuper(node2);
        if (node2.superClass && this.match(43)) {
          node2.superTypeParameters = this.tsParseTypeArguments();
        }
        if (this.eatContextual(104)) {
          node2.implements = this.tsParseHeritageClause("implements");
        }
      }
      parseObjPropValue(prop, ...args) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters)
          prop.typeParameters = typeParameters;
        super.parseObjPropValue(prop, ...args);
      }
      parseFunctionParams(node2, allowModifiers) {
        const typeParameters = this.tsTryParseTypeParameters();
        if (typeParameters)
          node2.typeParameters = typeParameters;
        super.parseFunctionParams(node2, allowModifiers);
      }
      parseVarId(decl, kind) {
        super.parseVarId(decl, kind);
        if (decl.id.type === "Identifier" && this.eat(33)) {
          decl.definite = true;
        }
        const type = this.tsTryParseTypeAnnotation();
        if (type) {
          decl.id.typeAnnotation = type;
          this.resetEndLocation(decl.id);
        }
      }
      parseAsyncArrowFromCallExpression(node2, call) {
        if (this.match(14)) {
          node2.returnType = this.tsParseTypeAnnotation();
        }
        return super.parseAsyncArrowFromCallExpression(node2, call);
      }
      parseMaybeAssign(...args) {
        var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;
        let state;
        let jsx2;
        let typeCast;
        if (this.hasPlugin("jsx") && (this.match(132) || this.match(43))) {
          state = this.state.clone();
          jsx2 = this.tryParse(() => super.parseMaybeAssign(...args), state);
          if (!jsx2.error)
            return jsx2.node;
          const {
            context
          } = this.state;
          if (context[context.length - 1] === types.j_oTag) {
            context.length -= 2;
          } else if (context[context.length - 1] === types.j_expr) {
            context.length -= 1;
          }
        }
        if (!((_jsx = jsx2) != null && _jsx.error) && !this.match(43)) {
          return super.parseMaybeAssign(...args);
        }
        let typeParameters;
        state = state || this.state.clone();
        const arrow = this.tryParse((abort) => {
          var _expr$extra, _typeParameters;
          typeParameters = this.tsParseTypeParameters();
          const expr = super.parseMaybeAssign(...args);
          if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
            abort();
          }
          if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
            this.resetStartLocationFromNode(expr, typeParameters);
          }
          expr.typeParameters = typeParameters;
          return expr;
        }, state);
        if (!arrow.error && !arrow.aborted) {
          if (typeParameters)
            this.reportReservedArrowTypeParam(typeParameters);
          return arrow.node;
        }
        if (!jsx2) {
          assert(!this.hasPlugin("jsx"));
          typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);
          if (!typeCast.error)
            return typeCast.node;
        }
        if ((_jsx2 = jsx2) != null && _jsx2.node) {
          this.state = jsx2.failState;
          return jsx2.node;
        }
        if (arrow.node) {
          this.state = arrow.failState;
          if (typeParameters)
            this.reportReservedArrowTypeParam(typeParameters);
          return arrow.node;
        }
        if ((_typeCast = typeCast) != null && _typeCast.node) {
          this.state = typeCast.failState;
          return typeCast.node;
        }
        if ((_jsx3 = jsx2) != null && _jsx3.thrown)
          throw jsx2.error;
        if (arrow.thrown)
          throw arrow.error;
        if ((_typeCast2 = typeCast) != null && _typeCast2.thrown)
          throw typeCast.error;
        throw ((_jsx4 = jsx2) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);
      }
      reportReservedArrowTypeParam(node2) {
        var _node$extra;
        if (node2.params.length === 1 && !((_node$extra = node2.extra) != null && _node$extra.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
          this.raise(node2.start, TSErrors.ReservedArrowTypeParam);
        }
      }
      parseMaybeUnary(refExpressionErrors) {
        if (!this.hasPlugin("jsx") && this.match(43)) {
          return this.tsParseTypeAssertion();
        } else {
          return super.parseMaybeUnary(refExpressionErrors);
        }
      }
      parseArrow(node2) {
        if (this.match(14)) {
          const result2 = this.tryParse((abort) => {
            const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
            if (this.canInsertSemicolon() || !this.match(19))
              abort();
            return returnType;
          });
          if (result2.aborted)
            return;
          if (!result2.thrown) {
            if (result2.error)
              this.state = result2.failState;
            node2.returnType = result2.node;
          }
        }
        return super.parseArrow(node2);
      }
      parseAssignableListItemTypes(param) {
        if (this.eat(17)) {
          if (param.type !== "Identifier" && !this.state.isAmbientContext && !this.state.inType) {
            this.raise(param.start, TSErrors.PatternIsOptional);
          }
          param.optional = true;
        }
        const type = this.tsTryParseTypeAnnotation();
        if (type)
          param.typeAnnotation = type;
        this.resetEndLocation(param);
        return param;
      }
      isAssignable(node2, isBinding) {
        switch (node2.type) {
          case "TSTypeCastExpression":
            return this.isAssignable(node2.expression, isBinding);
          case "TSParameterProperty":
            return true;
          default:
            return super.isAssignable(node2, isBinding);
        }
      }
      toAssignable(node2, isLHS = false) {
        switch (node2.type) {
          case "TSTypeCastExpression":
            return super.toAssignable(this.typeCastToParameter(node2), isLHS);
          case "TSParameterProperty":
            return super.toAssignable(node2, isLHS);
          case "ParenthesizedExpression":
            return this.toAssignableParenthesizedExpression(node2, isLHS);
          case "TSAsExpression":
          case "TSNonNullExpression":
          case "TSTypeAssertion":
            node2.expression = this.toAssignable(node2.expression, isLHS);
            return node2;
          default:
            return super.toAssignable(node2, isLHS);
        }
      }
      toAssignableParenthesizedExpression(node2, isLHS) {
        switch (node2.expression.type) {
          case "TSAsExpression":
          case "TSNonNullExpression":
          case "TSTypeAssertion":
          case "ParenthesizedExpression":
            node2.expression = this.toAssignable(node2.expression, isLHS);
            return node2;
          default:
            return super.toAssignable(node2, isLHS);
        }
      }
      checkLVal(expr, contextDescription, ...args) {
        var _expr$extra2;
        switch (expr.type) {
          case "TSTypeCastExpression":
            return;
          case "TSParameterProperty":
            this.checkLVal(expr.parameter, "parameter property", ...args);
            return;
          case "TSAsExpression":
          case "TSTypeAssertion":
            if (!args[0] && contextDescription !== "parenthesized expression" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {
              this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);
              break;
            }
            this.checkLVal(expr.expression, "parenthesized expression", ...args);
            return;
          case "TSNonNullExpression":
            this.checkLVal(expr.expression, contextDescription, ...args);
            return;
          default:
            super.checkLVal(expr, contextDescription, ...args);
            return;
        }
      }
      parseBindingAtom() {
        switch (this.state.type) {
          case 72:
            return this.parseIdentifier(true);
          default:
            return super.parseBindingAtom();
        }
      }
      parseMaybeDecoratorArguments(expr) {
        if (this.match(43)) {
          const typeArguments = this.tsParseTypeArguments();
          if (this.match(10)) {
            const call = super.parseMaybeDecoratorArguments(expr);
            call.typeParameters = typeArguments;
            return call;
          }
          this.unexpected(this.state.start, 10);
        }
        return super.parseMaybeDecoratorArguments(expr);
      }
      checkCommaAfterRest(close) {
        if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {
          this.next();
        } else {
          super.checkCommaAfterRest(close);
        }
      }
      isClassMethod() {
        return this.match(43) || super.isClassMethod();
      }
      isClassProperty() {
        return this.match(33) || this.match(14) || super.isClassProperty();
      }
      parseMaybeDefault(...args) {
        const node2 = super.parseMaybeDefault(...args);
        if (node2.type === "AssignmentPattern" && node2.typeAnnotation && node2.right.start < node2.typeAnnotation.start) {
          this.raise(node2.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);
        }
        return node2;
      }
      getTokenFromCode(code) {
        if (this.state.inType) {
          if (code === 62) {
            return this.finishOp(44, 1);
          }
          if (code === 60) {
            return this.finishOp(43, 1);
          }
        }
        return super.getTokenFromCode(code);
      }
      reScan_lt_gt() {
        const {
          type
        } = this.state;
        if (type === 43) {
          this.state.pos -= 1;
          this.readToken_lt();
        } else if (type === 44) {
          this.state.pos -= 1;
          this.readToken_gt();
        }
      }
      toAssignableList(exprList) {
        for (let i = 0; i < exprList.length; i++) {
          const expr = exprList[i];
          if (!expr)
            continue;
          switch (expr.type) {
            case "TSTypeCastExpression":
              exprList[i] = this.typeCastToParameter(expr);
              break;
            case "TSAsExpression":
            case "TSTypeAssertion":
              if (!this.state.maybeInArrowParameters) {
                exprList[i] = this.typeCastToParameter(expr);
              } else {
                this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);
              }
              break;
          }
        }
        return super.toAssignableList(...arguments);
      }
      typeCastToParameter(node2) {
        node2.expression.typeAnnotation = node2.typeAnnotation;
        this.resetEndLocation(node2.expression, node2.typeAnnotation.end, node2.typeAnnotation.loc.end);
        return node2.expression;
      }
      shouldParseArrow(params) {
        if (this.match(14)) {
          return params.every((expr) => this.isAssignable(expr, true));
        }
        return super.shouldParseArrow(params);
      }
      shouldParseAsyncArrow() {
        return this.match(14) || super.shouldParseAsyncArrow();
      }
      canHaveLeadingDecorator() {
        return super.canHaveLeadingDecorator() || this.isAbstractClass();
      }
      jsxParseOpeningElementAfterName(node2) {
        if (this.match(43)) {
          const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());
          if (typeArguments)
            node2.typeParameters = typeArguments;
        }
        return super.jsxParseOpeningElementAfterName(node2);
      }
      getGetterSetterExpectedParamCount(method) {
        const baseCount = super.getGetterSetterExpectedParamCount(method);
        const params = this.getObjectOrClassMethodParams(method);
        const firstParam = params[0];
        const hasContextParam = firstParam && this.isThisParam(firstParam);
        return hasContextParam ? baseCount + 1 : baseCount;
      }
      parseCatchClauseParam() {
        const param = super.parseCatchClauseParam();
        const type = this.tsTryParseTypeAnnotation();
        if (type) {
          param.typeAnnotation = type;
          this.resetEndLocation(param);
        }
        return param;
      }
      tsInAmbientContext(cb) {
        const oldIsAmbientContext = this.state.isAmbientContext;
        this.state.isAmbientContext = true;
        try {
          return cb();
        } finally {
          this.state.isAmbientContext = oldIsAmbientContext;
        }
      }
      parseClass(node2, ...args) {
        const oldInAbstractClass = this.state.inAbstractClass;
        this.state.inAbstractClass = !!node2.abstract;
        try {
          return super.parseClass(node2, ...args);
        } finally {
          this.state.inAbstractClass = oldInAbstractClass;
        }
      }
      tsParseAbstractDeclaration(node2) {
        if (this.match(74)) {
          node2.abstract = true;
          return this.parseClass(node2, true, false);
        } else if (this.isContextual(119)) {
          if (!this.hasFollowingLineBreak()) {
            node2.abstract = true;
            this.raise(node2.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);
            this.next();
            return this.tsParseInterfaceDeclaration(node2);
          }
        } else {
          this.unexpected(null, 74);
        }
      }
      parseMethod(...args) {
        const method = super.parseMethod(...args);
        if (method.abstract) {
          const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;
          if (hasBody) {
            const {
              key
            } = method;
            this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === "Identifier" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);
          }
        }
        return method;
      }
      tsParseTypeParameterName() {
        const typeName = this.parseIdentifier();
        return typeName.name;
      }
      shouldParseAsAmbientContext() {
        return !!this.getPluginOption("typescript", "dts");
      }
      parse() {
        if (this.shouldParseAsAmbientContext()) {
          this.state.isAmbientContext = true;
        }
        return super.parse();
      }
      getExpression() {
        if (this.shouldParseAsAmbientContext()) {
          this.state.isAmbientContext = true;
        }
        return super.getExpression();
      }
      parseExportSpecifier(node2, isString2, isInTypeExport, isMaybeTypeOnly) {
        if (!isString2 && isMaybeTypeOnly) {
          this.parseTypeOnlyImportExportSpecifier(node2, false, isInTypeExport);
          return this.finishNode(node2, "ExportSpecifier");
        }
        node2.exportKind = "value";
        return super.parseExportSpecifier(node2, isString2, isInTypeExport, isMaybeTypeOnly);
      }
      parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
        if (!importedIsString && isMaybeTypeOnly) {
          this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);
          return this.finishNode(specifier, "ImportSpecifier");
        }
        specifier.importKind = "value";
        return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);
      }
      parseTypeOnlyImportExportSpecifier(node2, isImport, isInTypeOnlyImportExport) {
        const leftOfAsKey = isImport ? "imported" : "local";
        const rightOfAsKey = isImport ? "local" : "exported";
        let leftOfAs = node2[leftOfAsKey];
        let rightOfAs;
        let hasTypeSpecifier = false;
        let canParseAsKeyword = true;
        const pos = leftOfAs.start;
        if (this.isContextual(87)) {
          const firstAs = this.parseIdentifier();
          if (this.isContextual(87)) {
            const secondAs = this.parseIdentifier();
            if (tokenIsKeywordOrIdentifier(this.state.type)) {
              hasTypeSpecifier = true;
              leftOfAs = firstAs;
              rightOfAs = this.parseIdentifier();
              canParseAsKeyword = false;
            } else {
              rightOfAs = secondAs;
              canParseAsKeyword = false;
            }
          } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
            canParseAsKeyword = false;
            rightOfAs = this.parseIdentifier();
          } else {
            hasTypeSpecifier = true;
            leftOfAs = firstAs;
          }
        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
          hasTypeSpecifier = true;
          leftOfAs = this.parseIdentifier();
        }
        if (hasTypeSpecifier && isInTypeOnlyImportExport) {
          this.raise(pos, isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports);
        }
        node2[leftOfAsKey] = leftOfAs;
        node2[rightOfAsKey] = rightOfAs;
        const kindKey = isImport ? "importKind" : "exportKind";
        node2[kindKey] = hasTypeSpecifier ? "type" : "value";
        if (canParseAsKeyword && this.eatContextual(87)) {
          node2[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();
        }
        if (!node2[rightOfAsKey]) {
          node2[rightOfAsKey] = cloneIdentifier(node2[leftOfAsKey]);
        }
        if (isImport) {
          this.checkLVal(node2[rightOfAsKey], "import specifier", BIND_LEXICAL);
        }
      }
    };
    PlaceHolderErrors = makeErrorTemplates({
      ClassNameIsRequired: "A class name is required."
    }, ErrorCodes.SyntaxError);
    placeholders = (superClass) => class extends superClass {
      parsePlaceholder(expectedNode) {
        if (this.match(134)) {
          const node2 = this.startNode();
          this.next();
          this.assertNoSpace("Unexpected space in placeholder.");
          node2.name = super.parseIdentifier(true);
          this.assertNoSpace("Unexpected space in placeholder.");
          this.expect(134);
          return this.finishPlaceholder(node2, expectedNode);
        }
      }
      finishPlaceholder(node2, expectedNode) {
        const isFinished = !!(node2.expectedNode && node2.type === "Placeholder");
        node2.expectedNode = expectedNode;
        return isFinished ? node2 : this.finishNode(node2, "Placeholder");
      }
      getTokenFromCode(code) {
        if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
          return this.finishOp(134, 2);
        }
        return super.getTokenFromCode(...arguments);
      }
      parseExprAtom() {
        return this.parsePlaceholder("Expression") || super.parseExprAtom(...arguments);
      }
      parseIdentifier() {
        return this.parsePlaceholder("Identifier") || super.parseIdentifier(...arguments);
      }
      checkReservedWord(word) {
        if (word !== void 0)
          super.checkReservedWord(...arguments);
      }
      parseBindingAtom() {
        return this.parsePlaceholder("Pattern") || super.parseBindingAtom(...arguments);
      }
      checkLVal(expr) {
        if (expr.type !== "Placeholder")
          super.checkLVal(...arguments);
      }
      toAssignable(node2) {
        if (node2 && node2.type === "Placeholder" && node2.expectedNode === "Expression") {
          node2.expectedNode = "Pattern";
          return node2;
        }
        return super.toAssignable(...arguments);
      }
      isLet(context) {
        if (super.isLet(context)) {
          return true;
        }
        if (!this.isContextual(93)) {
          return false;
        }
        if (context)
          return false;
        const nextToken = this.lookahead();
        if (nextToken.type === 134) {
          return true;
        }
        return false;
      }
      verifyBreakContinue(node2) {
        if (node2.label && node2.label.type === "Placeholder")
          return;
        super.verifyBreakContinue(...arguments);
      }
      parseExpressionStatement(node2, expr) {
        if (expr.type !== "Placeholder" || expr.extra && expr.extra.parenthesized) {
          return super.parseExpressionStatement(...arguments);
        }
        if (this.match(14)) {
          const stmt = node2;
          stmt.label = this.finishPlaceholder(expr, "Identifier");
          this.next();
          stmt.body = this.parseStatement("label");
          return this.finishNode(stmt, "LabeledStatement");
        }
        this.semicolon();
        node2.name = expr.name;
        return this.finishPlaceholder(node2, "Statement");
      }
      parseBlock() {
        return this.parsePlaceholder("BlockStatement") || super.parseBlock(...arguments);
      }
      parseFunctionId() {
        return this.parsePlaceholder("Identifier") || super.parseFunctionId(...arguments);
      }
      parseClass(node2, isStatement, optionalId) {
        const type = isStatement ? "ClassDeclaration" : "ClassExpression";
        this.next();
        this.takeDecorators(node2);
        const oldStrict = this.state.strict;
        const placeholder = this.parsePlaceholder("Identifier");
        if (placeholder) {
          if (this.match(75) || this.match(134) || this.match(5)) {
            node2.id = placeholder;
          } else if (optionalId || !isStatement) {
            node2.id = null;
            node2.body = this.finishPlaceholder(placeholder, "ClassBody");
            return this.finishNode(node2, type);
          } else {
            this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);
          }
        } else {
          this.parseClassId(node2, isStatement, optionalId);
        }
        this.parseClassSuper(node2);
        node2.body = this.parsePlaceholder("ClassBody") || this.parseClassBody(!!node2.superClass, oldStrict);
        return this.finishNode(node2, type);
      }
      parseExport(node2) {
        const placeholder = this.parsePlaceholder("Identifier");
        if (!placeholder)
          return super.parseExport(...arguments);
        if (!this.isContextual(91) && !this.match(12)) {
          node2.specifiers = [];
          node2.source = null;
          node2.declaration = this.finishPlaceholder(placeholder, "Declaration");
          return this.finishNode(node2, "ExportNamedDeclaration");
        }
        this.expectPlugin("exportDefaultFrom");
        const specifier = this.startNode();
        specifier.exported = placeholder;
        node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
        return super.parseExport(node2);
      }
      isExportDefaultSpecifier() {
        if (this.match(59)) {
          const next = this.nextTokenStart();
          if (this.isUnparsedContextual(next, "from")) {
            if (this.input.startsWith(tokenLabelName(134), this.nextTokenStartSince(next + 4))) {
              return true;
            }
          }
        }
        return super.isExportDefaultSpecifier();
      }
      maybeParseExportDefaultSpecifier(node2) {
        if (node2.specifiers && node2.specifiers.length > 0) {
          return true;
        }
        return super.maybeParseExportDefaultSpecifier(...arguments);
      }
      checkExport(node2) {
        const {
          specifiers
        } = node2;
        if (specifiers != null && specifiers.length) {
          node2.specifiers = specifiers.filter((node3) => node3.exported.type === "Placeholder");
        }
        super.checkExport(node2);
        node2.specifiers = specifiers;
      }
      parseImport(node2) {
        const placeholder = this.parsePlaceholder("Identifier");
        if (!placeholder)
          return super.parseImport(...arguments);
        node2.specifiers = [];
        if (!this.isContextual(91) && !this.match(12)) {
          node2.source = this.finishPlaceholder(placeholder, "StringLiteral");
          this.semicolon();
          return this.finishNode(node2, "ImportDeclaration");
        }
        const specifier = this.startNodeAtNode(placeholder);
        specifier.local = placeholder;
        this.finishNode(specifier, "ImportDefaultSpecifier");
        node2.specifiers.push(specifier);
        if (this.eat(12)) {
          const hasStarImport = this.maybeParseStarImportSpecifier(node2);
          if (!hasStarImport)
            this.parseNamedImportSpecifiers(node2);
        }
        this.expectContextual(91);
        node2.source = this.parseImportSource();
        this.semicolon();
        return this.finishNode(node2, "ImportDeclaration");
      }
      parseImportSource() {
        return this.parsePlaceholder("StringLiteral") || super.parseImportSource(...arguments);
      }
    };
    v8intrinsic = (superClass) => class extends superClass {
      parseV8Intrinsic() {
        if (this.match(48)) {
          const v8IntrinsicStart = this.state.start;
          const node2 = this.startNode();
          this.next();
          if (tokenIsIdentifier(this.state.type)) {
            const name = this.parseIdentifierName(this.state.start);
            const identifier = this.createIdentifier(node2, name);
            identifier.type = "V8IntrinsicIdentifier";
            if (this.match(10)) {
              return identifier;
            }
          }
          this.unexpected(v8IntrinsicStart);
        }
      }
      parseExprAtom() {
        return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);
      }
    };
    PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"];
    TOPIC_TOKENS = ["^", "%", "#"];
    RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
    mixinPlugins = {
      estree,
      jsx,
      flow,
      typescript,
      v8intrinsic,
      placeholders
    };
    mixinPluginNames = Object.keys(mixinPlugins);
    defaultOptions = {
      sourceType: "script",
      sourceFilename: void 0,
      startColumn: 0,
      startLine: 1,
      allowAwaitOutsideFunction: false,
      allowReturnOutsideFunction: false,
      allowImportExportEverywhere: false,
      allowSuperOutsideMethod: false,
      allowUndeclaredExports: false,
      plugins: [],
      strictMode: null,
      ranges: false,
      tokens: false,
      createParenthesizedExpressions: false,
      errorRecovery: false,
      attachComment: true
    };
    unwrapParenthesizedExpression = (node2) => {
      return node2.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node2.expression) : node2;
    };
    LValParser = class extends NodeUtils {
      toAssignable(node2, isLHS = false) {
        var _node$extra, _node$extra3;
        let parenthesized = void 0;
        if (node2.type === "ParenthesizedExpression" || (_node$extra = node2.extra) != null && _node$extra.parenthesized) {
          parenthesized = unwrapParenthesizedExpression(node2);
          if (isLHS) {
            if (parenthesized.type === "Identifier") {
              this.expressionScope.recordParenthesizedIdentifierError(node2.start, ErrorMessages.InvalidParenthesizedAssignment);
            } else if (parenthesized.type !== "MemberExpression") {
              this.raise(node2.start, ErrorMessages.InvalidParenthesizedAssignment);
            }
          } else {
            this.raise(node2.start, ErrorMessages.InvalidParenthesizedAssignment);
          }
        }
        switch (node2.type) {
          case "Identifier":
          case "ObjectPattern":
          case "ArrayPattern":
          case "AssignmentPattern":
          case "RestElement":
            break;
          case "ObjectExpression":
            node2.type = "ObjectPattern";
            for (let i = 0, length2 = node2.properties.length, last2 = length2 - 1; i < length2; i++) {
              var _node$extra2;
              const prop = node2.properties[i];
              const isLast = i === last2;
              this.toAssignableObjectExpressionProp(prop, isLast, isLHS);
              if (isLast && prop.type === "RestElement" && (_node$extra2 = node2.extra) != null && _node$extra2.trailingComma) {
                this.raiseRestNotLast(node2.extra.trailingComma);
              }
            }
            break;
          case "ObjectProperty":
            this.toAssignable(node2.value, isLHS);
            break;
          case "SpreadElement": {
            this.checkToRestConversion(node2);
            node2.type = "RestElement";
            const arg = node2.argument;
            this.toAssignable(arg, isLHS);
            break;
          }
          case "ArrayExpression":
            node2.type = "ArrayPattern";
            this.toAssignableList(node2.elements, (_node$extra3 = node2.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);
            break;
          case "AssignmentExpression":
            if (node2.operator !== "=") {
              this.raise(node2.left.end, ErrorMessages.MissingEqInAssignment);
            }
            node2.type = "AssignmentPattern";
            delete node2.operator;
            this.toAssignable(node2.left, isLHS);
            break;
          case "ParenthesizedExpression":
            this.toAssignable(parenthesized, isLHS);
            break;
        }
        return node2;
      }
      toAssignableObjectExpressionProp(prop, isLast, isLHS) {
        if (prop.type === "ObjectMethod") {
          const error2 = prop.kind === "get" || prop.kind === "set" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;
          this.raise(prop.key.start, error2);
        } else if (prop.type === "SpreadElement" && !isLast) {
          this.raiseRestNotLast(prop.start);
        } else {
          this.toAssignable(prop, isLHS);
        }
      }
      toAssignableList(exprList, trailingCommaPos, isLHS) {
        let end = exprList.length;
        if (end) {
          const last2 = exprList[end - 1];
          if ((last2 == null ? void 0 : last2.type) === "RestElement") {
            --end;
          } else if ((last2 == null ? void 0 : last2.type) === "SpreadElement") {
            last2.type = "RestElement";
            let arg = last2.argument;
            this.toAssignable(arg, isLHS);
            arg = unwrapParenthesizedExpression(arg);
            if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern" && arg.type !== "ObjectPattern") {
              this.unexpected(arg.start);
            }
            if (trailingCommaPos) {
              this.raiseTrailingCommaAfterRest(trailingCommaPos);
            }
            --end;
          }
        }
        for (let i = 0; i < end; i++) {
          const elt = exprList[i];
          if (elt) {
            this.toAssignable(elt, isLHS);
            if (elt.type === "RestElement") {
              this.raiseRestNotLast(elt.start);
            }
          }
        }
        return exprList;
      }
      isAssignable(node2, isBinding) {
        switch (node2.type) {
          case "Identifier":
          case "ObjectPattern":
          case "ArrayPattern":
          case "AssignmentPattern":
          case "RestElement":
            return true;
          case "ObjectExpression": {
            const last2 = node2.properties.length - 1;
            return node2.properties.every((prop, i) => {
              return prop.type !== "ObjectMethod" && (i === last2 || prop.type !== "SpreadElement") && this.isAssignable(prop);
            });
          }
          case "ObjectProperty":
            return this.isAssignable(node2.value);
          case "SpreadElement":
            return this.isAssignable(node2.argument);
          case "ArrayExpression":
            return node2.elements.every((element) => element === null || this.isAssignable(element));
          case "AssignmentExpression":
            return node2.operator === "=";
          case "ParenthesizedExpression":
            return this.isAssignable(node2.expression);
          case "MemberExpression":
          case "OptionalMemberExpression":
            return !isBinding;
          default:
            return false;
        }
      }
      toReferencedList(exprList, isParenthesizedExpr) {
        return exprList;
      }
      toReferencedListDeep(exprList, isParenthesizedExpr) {
        this.toReferencedList(exprList, isParenthesizedExpr);
        for (const expr of exprList) {
          if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
            this.toReferencedListDeep(expr.elements);
          }
        }
      }
      parseSpread(refExpressionErrors, refNeedsArrowPos) {
        const node2 = this.startNode();
        this.next();
        node2.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0, refNeedsArrowPos);
        return this.finishNode(node2, "SpreadElement");
      }
      parseRestBinding() {
        const node2 = this.startNode();
        this.next();
        node2.argument = this.parseBindingAtom();
        return this.finishNode(node2, "RestElement");
      }
      parseBindingAtom() {
        switch (this.state.type) {
          case 0: {
            const node2 = this.startNode();
            this.next();
            node2.elements = this.parseBindingList(3, 93, true);
            return this.finishNode(node2, "ArrayPattern");
          }
          case 5:
            return this.parseObjectLike(8, true);
        }
        return this.parseIdentifier();
      }
      parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {
        const elts = [];
        let first = true;
        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
          }
          if (allowEmpty && this.match(12)) {
            elts.push(null);
          } else if (this.eat(close)) {
            break;
          } else if (this.match(21)) {
            elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));
            this.checkCommaAfterRest(closeCharCode);
            this.expect(close);
            break;
          } else {
            const decorators = [];
            if (this.match(24) && this.hasPlugin("decorators")) {
              this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);
            }
            while (this.match(24)) {
              decorators.push(this.parseDecorator());
            }
            elts.push(this.parseAssignableListItem(allowModifiers, decorators));
          }
        }
        return elts;
      }
      parseBindingRestProperty(prop) {
        this.next();
        prop.argument = this.parseIdentifier();
        this.checkCommaAfterRest(125);
        return this.finishNode(prop, "RestElement");
      }
      parseBindingProperty() {
        const prop = this.startNode();
        const {
          type,
          start: startPos,
          startLoc
        } = this.state;
        if (type === 21) {
          return this.parseBindingRestProperty(prop);
        } else {
          this.parsePropertyName(prop);
        }
        prop.method = false;
        this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);
        return prop;
      }
      parseAssignableListItem(allowModifiers, decorators) {
        const left = this.parseMaybeDefault();
        this.parseAssignableListItemTypes(left);
        const elt = this.parseMaybeDefault(left.start, left.loc.start, left);
        if (decorators.length) {
          left.decorators = decorators;
        }
        return elt;
      }
      parseAssignableListItemTypes(param) {
        return param;
      }
      parseMaybeDefault(startPos, startLoc, left) {
        var _startLoc, _startPos, _left;
        startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;
        startPos = (_startPos = startPos) != null ? _startPos : this.state.start;
        left = (_left = left) != null ? _left : this.parseBindingAtom();
        if (!this.eat(27))
          return left;
        const node2 = this.startNodeAt(startPos, startLoc);
        node2.left = left;
        node2.right = this.parseMaybeAssignAllowIn();
        return this.finishNode(node2, "AssignmentPattern");
      }
      checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {
        switch (expr.type) {
          case "Identifier": {
            const {
              name
            } = expr;
            if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {
              this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);
            }
            if (checkClashes) {
              if (checkClashes.has(name)) {
                this.raise(expr.start, ErrorMessages.ParamDupe);
              } else {
                checkClashes.add(name);
              }
            }
            if (disallowLetBinding && name === "let") {
              this.raise(expr.start, ErrorMessages.LetInLexicalBinding);
            }
            if (!(bindingType & BIND_NONE)) {
              this.scope.declareName(name, bindingType, expr.start);
            }
            break;
          }
          case "MemberExpression":
            if (bindingType !== BIND_NONE) {
              this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);
            }
            break;
          case "ObjectPattern":
            for (let prop of expr.properties) {
              if (this.isObjectProperty(prop))
                prop = prop.value;
              else if (this.isObjectMethod(prop))
                continue;
              this.checkLVal(prop, "object destructuring pattern", bindingType, checkClashes, disallowLetBinding);
            }
            break;
          case "ArrayPattern":
            for (const elem of expr.elements) {
              if (elem) {
                this.checkLVal(elem, "array destructuring pattern", bindingType, checkClashes, disallowLetBinding);
              }
            }
            break;
          case "AssignmentPattern":
            this.checkLVal(expr.left, "assignment pattern", bindingType, checkClashes);
            break;
          case "RestElement":
            this.checkLVal(expr.argument, "rest element", bindingType, checkClashes);
            break;
          case "ParenthesizedExpression":
            this.checkLVal(expr.expression, "parenthesized expression", bindingType, checkClashes);
            break;
          default: {
            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);
          }
        }
      }
      checkToRestConversion(node2) {
        if (node2.argument.type !== "Identifier" && node2.argument.type !== "MemberExpression") {
          this.raise(node2.argument.start, ErrorMessages.InvalidRestAssignmentPattern);
        }
      }
      checkCommaAfterRest(close) {
        if (this.match(12)) {
          if (this.lookaheadCharCode() === close) {
            this.raiseTrailingCommaAfterRest(this.state.start);
          } else {
            this.raiseRestNotLast(this.state.start);
          }
        }
      }
      raiseRestNotLast(pos) {
        throw this.raise(pos, ErrorMessages.ElementAfterRest);
      }
      raiseTrailingCommaAfterRest(pos) {
        this.raise(pos, ErrorMessages.RestTrailingComma);
      }
    };
    invalidHackPipeBodies = /* @__PURE__ */ new Map([["ArrowFunctionExpression", "arrow function"], ["AssignmentExpression", "assignment"], ["ConditionalExpression", "conditional"], ["YieldExpression", "yield"]]);
    ExpressionParser = class extends LValParser {
      checkProto(prop, isRecord, protoRef, refExpressionErrors) {
        if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
          return;
        }
        const key = prop.key;
        const name = key.type === "Identifier" ? key.name : key.value;
        if (name === "__proto__") {
          if (isRecord) {
            this.raise(key.start, ErrorMessages.RecordNoProto);
            return;
          }
          if (protoRef.used) {
            if (refExpressionErrors) {
              if (refExpressionErrors.doubleProto === -1) {
                refExpressionErrors.doubleProto = key.start;
              }
            } else {
              this.raise(key.start, ErrorMessages.DuplicateProto);
            }
          }
          protoRef.used = true;
        }
      }
      shouldExitDescending(expr, potentialArrowAt) {
        return expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt;
      }
      getExpression() {
        this.enterInitialScopes();
        this.nextToken();
        const expr = this.parseExpression();
        if (!this.match(129)) {
          this.unexpected();
        }
        this.finalizeRemainingComments();
        expr.comments = this.state.comments;
        expr.errors = this.state.errors;
        if (this.options.tokens) {
          expr.tokens = this.tokens;
        }
        return expr;
      }
      parseExpression(disallowIn, refExpressionErrors) {
        if (disallowIn) {
          return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
        }
        return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
      }
      parseExpressionBase(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const expr = this.parseMaybeAssign(refExpressionErrors);
        if (this.match(12)) {
          const node2 = this.startNodeAt(startPos, startLoc);
          node2.expressions = [expr];
          while (this.eat(12)) {
            node2.expressions.push(this.parseMaybeAssign(refExpressionErrors));
          }
          this.toReferencedList(node2.expressions);
          return this.finishNode(node2, "SequenceExpression");
        }
        return expr;
      }
      parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
        return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
      }
      parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
        return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
      }
      setOptionalParametersError(refExpressionErrors, resultError) {
        var _resultError$pos;
        refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;
      }
      parseMaybeAssign(refExpressionErrors, afterLeftParse) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        if (this.isContextual(99)) {
          if (this.prodParam.hasYield) {
            let left2 = this.parseYield();
            if (afterLeftParse) {
              left2 = afterLeftParse.call(this, left2, startPos, startLoc);
            }
            return left2;
          }
        }
        let ownExpressionErrors;
        if (refExpressionErrors) {
          ownExpressionErrors = false;
        } else {
          refExpressionErrors = new ExpressionErrors();
          ownExpressionErrors = true;
        }
        const {
          type
        } = this.state;
        if (type === 10 || tokenIsIdentifier(type)) {
          this.state.potentialArrowAt = this.state.start;
        }
        let left = this.parseMaybeConditional(refExpressionErrors);
        if (afterLeftParse) {
          left = afterLeftParse.call(this, left, startPos, startLoc);
        }
        if (tokenIsAssignment(this.state.type)) {
          const node2 = this.startNodeAt(startPos, startLoc);
          const operator = this.state.value;
          node2.operator = operator;
          if (this.match(27)) {
            node2.left = this.toAssignable(left, true);
            if (refExpressionErrors.doubleProto >= startPos) {
              refExpressionErrors.doubleProto = -1;
            }
            if (refExpressionErrors.shorthandAssign >= startPos) {
              refExpressionErrors.shorthandAssign = -1;
            }
          } else {
            node2.left = left;
          }
          this.checkLVal(left, "assignment expression");
          this.next();
          node2.right = this.parseMaybeAssign();
          return this.finishNode(node2, "AssignmentExpression");
        } else if (ownExpressionErrors) {
          this.checkExpressionErrors(refExpressionErrors, true);
        }
        return left;
      }
      parseMaybeConditional(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseExprOps(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) {
          return expr;
        }
        return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);
      }
      parseConditional(expr, startPos, startLoc, refExpressionErrors) {
        if (this.eat(17)) {
          const node2 = this.startNodeAt(startPos, startLoc);
          node2.test = expr;
          node2.consequent = this.parseMaybeAssignAllowIn();
          this.expect(14);
          node2.alternate = this.parseMaybeAssign();
          return this.finishNode(node2, "ConditionalExpression");
        }
        return expr;
      }
      parseMaybeUnaryOrPrivate(refExpressionErrors) {
        return this.match(128) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
      }
      parseExprOps(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) {
          return expr;
        }
        return this.parseExprOp(expr, startPos, startLoc, -1);
      }
      parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
        if (this.isPrivateName(left)) {
          const value = this.getPrivateNameSV(left);
          const {
            start
          } = left;
          if (minPrec >= tokenOperatorPrecedence(52) || !this.prodParam.hasIn || !this.match(52)) {
            this.raise(start, ErrorMessages.PrivateInExpectedIn, value);
          }
          this.classScope.usePrivateName(value, start);
        }
        const op = this.state.type;
        if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(52))) {
          let prec = tokenOperatorPrecedence(op);
          if (prec > minPrec) {
            if (op === 35) {
              this.expectPlugin("pipelineOperator");
              if (this.state.inFSharpPipelineDirectBody) {
                return left;
              }
              this.checkPipelineAtInfixOperator(left, leftStartPos);
            }
            const node2 = this.startNodeAt(leftStartPos, leftStartLoc);
            node2.left = left;
            node2.operator = this.state.value;
            const logical = op === 37 || op === 38;
            const coalesce = op === 36;
            if (coalesce) {
              prec = tokenOperatorPrecedence(38);
            }
            this.next();
            if (op === 35 && this.getPluginOption("pipelineOperator", "proposal") === "minimal") {
              if (this.state.type === 90 && this.prodParam.hasAwait) {
                throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);
              }
            }
            node2.right = this.parseExprOpRightExpr(op, prec);
            this.finishNode(node2, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
            const nextOp = this.state.type;
            if (coalesce && (nextOp === 37 || nextOp === 38) || logical && nextOp === 36) {
              throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);
            }
            return this.parseExprOp(node2, leftStartPos, leftStartLoc, minPrec);
          }
        }
        return left;
      }
      parseExprOpRightExpr(op, prec) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        switch (op) {
          case 35:
            switch (this.getPluginOption("pipelineOperator", "proposal")) {
              case "hack":
                return this.withTopicBindingContext(() => {
                  return this.parseHackPipeBody();
                });
              case "smart":
                return this.withTopicBindingContext(() => {
                  if (this.prodParam.hasYield && this.isContextual(99)) {
                    throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, this.state.value);
                  }
                  return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);
                });
              case "fsharp":
                return this.withSoloAwaitPermittingContext(() => {
                  return this.parseFSharpPipelineBody(prec);
                });
            }
          default:
            return this.parseExprOpBaseRightExpr(op, prec);
        }
      }
      parseExprOpBaseRightExpr(op, prec) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);
      }
      parseHackPipeBody() {
        var _body$extra;
        const {
          start
        } = this.state;
        const body = this.parseMaybeAssign();
        if (invalidHackPipeBodies.has(body.type) && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {
          this.raise(start, ErrorMessages.PipeUnparenthesizedBody, invalidHackPipeBodies.get(body.type));
        }
        if (!this.topicReferenceWasUsedInCurrentContext()) {
          this.raise(start, ErrorMessages.PipeTopicUnused);
        }
        return body;
      }
      checkExponentialAfterUnary(node2) {
        if (this.match(51)) {
          this.raise(node2.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);
        }
      }
      parseMaybeUnary(refExpressionErrors, sawUnary) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const isAwait = this.isContextual(90);
        if (isAwait && this.isAwaitAllowed()) {
          this.next();
          const expr2 = this.parseAwait(startPos, startLoc);
          if (!sawUnary)
            this.checkExponentialAfterUnary(expr2);
          return expr2;
        }
        const update = this.match(32);
        const node2 = this.startNode();
        if (tokenIsPrefix(this.state.type)) {
          node2.operator = this.state.value;
          node2.prefix = true;
          if (this.match(66)) {
            this.expectPlugin("throwExpressions");
          }
          const isDelete = this.match(83);
          this.next();
          node2.argument = this.parseMaybeUnary(null, true);
          this.checkExpressionErrors(refExpressionErrors, true);
          if (this.state.strict && isDelete) {
            const arg = node2.argument;
            if (arg.type === "Identifier") {
              this.raise(node2.start, ErrorMessages.StrictDelete);
            } else if (this.hasPropertyAsPrivateName(arg)) {
              this.raise(node2.start, ErrorMessages.DeletePrivateField);
            }
          }
          if (!update) {
            if (!sawUnary)
              this.checkExponentialAfterUnary(node2);
            return this.finishNode(node2, "UnaryExpression");
          }
        }
        const expr = this.parseUpdate(node2, update, refExpressionErrors);
        if (isAwait) {
          const {
            type
          } = this.state;
          const startsExpr2 = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(48);
          if (startsExpr2 && !this.isAmbiguousAwait()) {
            this.raiseOverwrite(startPos, ErrorMessages.AwaitNotInAsyncContext);
            return this.parseAwait(startPos, startLoc);
          }
        }
        return expr;
      }
      parseUpdate(node2, update, refExpressionErrors) {
        if (update) {
          this.checkLVal(node2.argument, "prefix operation");
          return this.finishNode(node2, "UpdateExpression");
        }
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let expr = this.parseExprSubscripts(refExpressionErrors);
        if (this.checkExpressionErrors(refExpressionErrors, false))
          return expr;
        while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {
          const node3 = this.startNodeAt(startPos, startLoc);
          node3.operator = this.state.value;
          node3.prefix = false;
          node3.argument = expr;
          this.checkLVal(expr, "postfix operation");
          this.next();
          expr = this.finishNode(node3, "UpdateExpression");
        }
        return expr;
      }
      parseExprSubscripts(refExpressionErrors) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseExprAtom(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) {
          return expr;
        }
        return this.parseSubscripts(expr, startPos, startLoc);
      }
      parseSubscripts(base2, startPos, startLoc, noCalls) {
        const state = {
          optionalChainMember: false,
          maybeAsyncArrow: this.atPossibleAsyncArrow(base2),
          stop: false
        };
        do {
          base2 = this.parseSubscript(base2, startPos, startLoc, noCalls, state);
          state.maybeAsyncArrow = false;
        } while (!state.stop);
        return base2;
      }
      parseSubscript(base2, startPos, startLoc, noCalls, state) {
        if (!noCalls && this.eat(15)) {
          return this.parseBind(base2, startPos, startLoc, noCalls, state);
        } else if (this.match(22)) {
          return this.parseTaggedTemplateExpression(base2, startPos, startLoc, state);
        }
        let optional = false;
        if (this.match(18)) {
          if (noCalls && this.lookaheadCharCode() === 40) {
            state.stop = true;
            return base2;
          }
          state.optionalChainMember = optional = true;
          this.next();
        }
        if (!noCalls && this.match(10)) {
          return this.parseCoverCallAndAsyncArrowHead(base2, startPos, startLoc, state, optional);
        } else {
          const computed = this.eat(0);
          if (computed || optional || this.eat(16)) {
            return this.parseMember(base2, startPos, startLoc, state, computed, optional);
          } else {
            state.stop = true;
            return base2;
          }
        }
      }
      parseMember(base2, startPos, startLoc, state, computed, optional) {
        const node2 = this.startNodeAt(startPos, startLoc);
        node2.object = base2;
        node2.computed = computed;
        const privateName = !computed && this.match(128) && this.state.value;
        const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);
        if (privateName !== false) {
          if (node2.object.type === "Super") {
            this.raise(startPos, ErrorMessages.SuperPrivateField);
          }
          this.classScope.usePrivateName(privateName, property.start);
        }
        node2.property = property;
        if (computed) {
          this.expect(3);
        }
        if (state.optionalChainMember) {
          node2.optional = optional;
          return this.finishNode(node2, "OptionalMemberExpression");
        } else {
          return this.finishNode(node2, "MemberExpression");
        }
      }
      parseBind(base2, startPos, startLoc, noCalls, state) {
        const node2 = this.startNodeAt(startPos, startLoc);
        node2.object = base2;
        node2.callee = this.parseNoCallExpr();
        state.stop = true;
        return this.parseSubscripts(this.finishNode(node2, "BindExpression"), startPos, startLoc, noCalls);
      }
      parseCoverCallAndAsyncArrowHead(base2, startPos, startLoc, state, optional) {
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        let refExpressionErrors = null;
        this.state.maybeInArrowParameters = true;
        this.next();
        let node2 = this.startNodeAt(startPos, startLoc);
        node2.callee = base2;
        if (state.maybeAsyncArrow) {
          this.expressionScope.enter(newAsyncArrowScope());
          refExpressionErrors = new ExpressionErrors();
        }
        if (state.optionalChainMember) {
          node2.optional = optional;
        }
        if (optional) {
          node2.arguments = this.parseCallExpressionArguments(11);
        } else {
          node2.arguments = this.parseCallExpressionArguments(11, base2.type === "Import", base2.type !== "Super", node2, refExpressionErrors);
        }
        this.finishCallExpression(node2, state.optionalChainMember);
        if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
          state.stop = true;
          this.expressionScope.validateAsPattern();
          this.expressionScope.exit();
          node2 = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node2);
        } else {
          if (state.maybeAsyncArrow) {
            this.checkExpressionErrors(refExpressionErrors, true);
            this.expressionScope.exit();
          }
          this.toReferencedArguments(node2);
        }
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return node2;
      }
      toReferencedArguments(node2, isParenthesizedExpr) {
        this.toReferencedListDeep(node2.arguments, isParenthesizedExpr);
      }
      parseTaggedTemplateExpression(base2, startPos, startLoc, state) {
        const node2 = this.startNodeAt(startPos, startLoc);
        node2.tag = base2;
        node2.quasi = this.parseTemplate(true);
        if (state.optionalChainMember) {
          this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);
        }
        return this.finishNode(node2, "TaggedTemplateExpression");
      }
      atPossibleAsyncArrow(base2) {
        return base2.type === "Identifier" && base2.name === "async" && this.state.lastTokEnd === base2.end && !this.canInsertSemicolon() && base2.end - base2.start === 5 && base2.start === this.state.potentialArrowAt;
      }
      finishCallExpression(node2, optional) {
        if (node2.callee.type === "Import") {
          if (node2.arguments.length === 2) {
            {
              if (!this.hasPlugin("moduleAttributes")) {
                this.expectPlugin("importAssertions");
              }
            }
          }
          if (node2.arguments.length === 0 || node2.arguments.length > 2) {
            this.raise(node2.start, ErrorMessages.ImportCallArity, this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? "one or two arguments" : "one argument");
          } else {
            for (const arg of node2.arguments) {
              if (arg.type === "SpreadElement") {
                this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);
              }
            }
          }
        }
        return this.finishNode(node2, optional ? "OptionalCallExpression" : "CallExpression");
      }
      parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
        const elts = [];
        let first = true;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
            if (this.match(close)) {
              if (dynamicImport && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes")) {
                this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);
              }
              if (nodeForExtra) {
                this.addExtra(nodeForExtra, "trailingComma", this.state.lastTokStart);
              }
              this.next();
              break;
            }
          }
          elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
        }
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return elts;
      }
      shouldParseAsyncArrow() {
        return this.match(19) && !this.canInsertSemicolon();
      }
      parseAsyncArrowFromCallExpression(node2, call) {
        var _call$extra;
        this.resetPreviousNodeTrailingComments(call);
        this.expect(19);
        this.parseArrowExpression(node2, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);
        if (call.innerComments) {
          setInnerComments(node2, call.innerComments);
        }
        if (call.callee.trailingComments) {
          setInnerComments(node2, call.callee.trailingComments);
        }
        return node2;
      }
      parseNoCallExpr() {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
      }
      parseExprAtom(refExpressionErrors) {
        let node2;
        const {
          type
        } = this.state;
        switch (type) {
          case 73:
            return this.parseSuper();
          case 77:
            node2 = this.startNode();
            this.next();
            if (this.match(16)) {
              return this.parseImportMetaProperty(node2);
            }
            if (!this.match(10)) {
              this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);
            }
            return this.finishNode(node2, "Import");
          case 72:
            node2 = this.startNode();
            this.next();
            return this.finishNode(node2, "ThisExpression");
          case 84: {
            return this.parseDo(this.startNode(), false);
          }
          case 50:
          case 29: {
            this.readRegexp();
            return this.parseRegExpLiteral(this.state.value);
          }
          case 124:
            return this.parseNumericLiteral(this.state.value);
          case 125:
            return this.parseBigIntLiteral(this.state.value);
          case 126:
            return this.parseDecimalLiteral(this.state.value);
          case 123:
            return this.parseStringLiteral(this.state.value);
          case 78:
            return this.parseNullLiteral();
          case 79:
            return this.parseBooleanLiteral(true);
          case 80:
            return this.parseBooleanLiteral(false);
          case 10: {
            const canBeArrow = this.state.potentialArrowAt === this.state.start;
            return this.parseParenAndDistinguishExpression(canBeArrow);
          }
          case 2:
          case 1: {
            return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
          }
          case 0: {
            return this.parseArrayLike(3, true, false, refExpressionErrors);
          }
          case 6:
          case 7: {
            return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
          }
          case 5: {
            return this.parseObjectLike(8, false, false, refExpressionErrors);
          }
          case 62:
            return this.parseFunctionOrFunctionSent();
          case 24:
            this.parseDecorators();
          case 74:
            node2 = this.startNode();
            this.takeDecorators(node2);
            return this.parseClass(node2, false);
          case 71:
            return this.parseNewOrNewTarget();
          case 22:
            return this.parseTemplate(false);
          case 15: {
            node2 = this.startNode();
            this.next();
            node2.object = null;
            const callee = node2.callee = this.parseNoCallExpr();
            if (callee.type === "MemberExpression") {
              return this.finishNode(node2, "BindExpression");
            } else {
              throw this.raise(callee.start, ErrorMessages.UnsupportedBind);
            }
          }
          case 128: {
            this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, this.state.value);
            return this.parsePrivateName();
          }
          case 31: {
            return this.parseTopicReferenceThenEqualsSign(48, "%");
          }
          case 30: {
            return this.parseTopicReferenceThenEqualsSign(40, "^");
          }
          case 40:
          case 48:
          case 25: {
            const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
            if (pipeProposal) {
              return this.parseTopicReference(pipeProposal);
            } else {
              throw this.unexpected();
            }
          }
          case 43: {
            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {
              this.expectOnePlugin(["jsx", "flow", "typescript"]);
              break;
            } else {
              throw this.unexpected();
            }
          }
          default:
            if (tokenIsIdentifier(type)) {
              if (this.isContextual(117) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {
                return this.parseModuleExpression();
              }
              const canBeArrow = this.state.potentialArrowAt === this.state.start;
              const containsEsc = this.state.containsEsc;
              const id2 = this.parseIdentifier();
              if (!containsEsc && id2.name === "async" && !this.canInsertSemicolon()) {
                const {
                  type: type2
                } = this.state;
                if (type2 === 62) {
                  this.resetPreviousNodeTrailingComments(id2);
                  this.next();
                  return this.parseFunction(this.startNodeAtNode(id2), void 0, true);
                } else if (tokenIsIdentifier(type2)) {
                  if (this.lookaheadCharCode() === 61) {
                    return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id2));
                  } else {
                    return id2;
                  }
                } else if (type2 === 84) {
                  this.resetPreviousNodeTrailingComments(id2);
                  return this.parseDo(this.startNodeAtNode(id2), true);
                }
              }
              if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {
                this.next();
                return this.parseArrowExpression(this.startNodeAtNode(id2), [id2], false);
              }
              return id2;
            } else {
              throw this.unexpected();
            }
        }
      }
      parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
        const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
        if (pipeProposal) {
          this.state.type = topicTokenType;
          this.state.value = topicTokenValue;
          this.state.pos--;
          this.state.end--;
          this.state.endLoc.column--;
          return this.parseTopicReference(pipeProposal);
        } else {
          throw this.unexpected();
        }
      }
      parseTopicReference(pipeProposal) {
        const node2 = this.startNode();
        const start = this.state.start;
        const tokenType = this.state.type;
        this.next();
        return this.finishTopicReference(node2, start, pipeProposal, tokenType);
      }
      finishTopicReference(node2, start, pipeProposal, tokenType) {
        if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {
          let nodeType;
          if (pipeProposal === "smart") {
            nodeType = "PipelinePrimaryTopicReference";
          } else {
            nodeType = "TopicReference";
          }
          if (!this.topicReferenceIsAllowedInCurrentContext()) {
            if (pipeProposal === "smart") {
              this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);
            } else {
              this.raise(start, ErrorMessages.PipeTopicUnbound);
            }
          }
          this.registerTopicReference();
          return this.finishNode(node2, nodeType);
        } else {
          throw this.raise(start, ErrorMessages.PipeTopicUnconfiguredToken, tokenLabelName(tokenType));
        }
      }
      testTopicReferenceConfiguration(pipeProposal, start, tokenType) {
        switch (pipeProposal) {
          case "hack": {
            const pluginTopicToken = this.getPluginOption("pipelineOperator", "topicToken");
            return tokenLabelName(tokenType) === pluginTopicToken;
          }
          case "smart":
            return tokenType === 25;
          default:
            throw this.raise(start, ErrorMessages.PipeTopicRequiresHackPipes);
        }
      }
      parseAsyncArrowUnaryFunction(node2) {
        this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
        const params = [this.parseIdentifier()];
        this.prodParam.exit();
        if (this.hasPrecedingLineBreak()) {
          this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);
        }
        this.expect(19);
        this.parseArrowExpression(node2, params, true);
        return node2;
      }
      parseDo(node2, isAsync) {
        this.expectPlugin("doExpressions");
        if (isAsync) {
          this.expectPlugin("asyncDoExpressions");
        }
        node2.async = isAsync;
        this.next();
        const oldLabels = this.state.labels;
        this.state.labels = [];
        if (isAsync) {
          this.prodParam.enter(PARAM_AWAIT);
          node2.body = this.parseBlock();
          this.prodParam.exit();
        } else {
          node2.body = this.parseBlock();
        }
        this.state.labels = oldLabels;
        return this.finishNode(node2, "DoExpression");
      }
      parseSuper() {
        const node2 = this.startNode();
        this.next();
        if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {
          this.raise(node2.start, ErrorMessages.SuperNotAllowed);
        } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {
          this.raise(node2.start, ErrorMessages.UnexpectedSuper);
        }
        if (!this.match(10) && !this.match(0) && !this.match(16)) {
          this.raise(node2.start, ErrorMessages.UnsupportedSuper);
        }
        return this.finishNode(node2, "Super");
      }
      parsePrivateName() {
        const node2 = this.startNode();
        const id2 = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));
        const name = this.state.value;
        this.next();
        node2.id = this.createIdentifier(id2, name);
        return this.finishNode(node2, "PrivateName");
      }
      parseFunctionOrFunctionSent() {
        const node2 = this.startNode();
        this.next();
        if (this.prodParam.hasYield && this.match(16)) {
          const meta = this.createIdentifier(this.startNodeAtNode(node2), "function");
          this.next();
          if (this.match(96)) {
            this.expectPlugin("functionSent");
          } else if (!this.hasPlugin("functionSent")) {
            this.unexpected();
          }
          return this.parseMetaProperty(node2, meta, "sent");
        }
        return this.parseFunction(node2);
      }
      parseMetaProperty(node2, meta, propertyName) {
        node2.meta = meta;
        const containsEsc = this.state.containsEsc;
        node2.property = this.parseIdentifier(true);
        if (node2.property.name !== propertyName || containsEsc) {
          this.raise(node2.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);
        }
        return this.finishNode(node2, "MetaProperty");
      }
      parseImportMetaProperty(node2) {
        const id2 = this.createIdentifier(this.startNodeAtNode(node2), "import");
        this.next();
        if (this.isContextual(94)) {
          if (!this.inModule) {
            this.raise(id2.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);
          }
          this.sawUnambiguousESM = true;
        }
        return this.parseMetaProperty(node2, id2, "meta");
      }
      parseLiteralAtNode(value, type, node2) {
        this.addExtra(node2, "rawValue", value);
        this.addExtra(node2, "raw", this.input.slice(node2.start, this.state.end));
        node2.value = value;
        this.next();
        return this.finishNode(node2, type);
      }
      parseLiteral(value, type) {
        const node2 = this.startNode();
        return this.parseLiteralAtNode(value, type, node2);
      }
      parseStringLiteral(value) {
        return this.parseLiteral(value, "StringLiteral");
      }
      parseNumericLiteral(value) {
        return this.parseLiteral(value, "NumericLiteral");
      }
      parseBigIntLiteral(value) {
        return this.parseLiteral(value, "BigIntLiteral");
      }
      parseDecimalLiteral(value) {
        return this.parseLiteral(value, "DecimalLiteral");
      }
      parseRegExpLiteral(value) {
        const node2 = this.parseLiteral(value.value, "RegExpLiteral");
        node2.pattern = value.pattern;
        node2.flags = value.flags;
        return node2;
      }
      parseBooleanLiteral(value) {
        const node2 = this.startNode();
        node2.value = value;
        this.next();
        return this.finishNode(node2, "BooleanLiteral");
      }
      parseNullLiteral() {
        const node2 = this.startNode();
        this.next();
        return this.finishNode(node2, "NullLiteral");
      }
      parseParenAndDistinguishExpression(canBeArrow) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        let val;
        this.next();
        this.expressionScope.enter(newArrowHeadScope());
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.maybeInArrowParameters = true;
        this.state.inFSharpPipelineDirectBody = false;
        const innerStartPos = this.state.start;
        const innerStartLoc = this.state.startLoc;
        const exprList = [];
        const refExpressionErrors = new ExpressionErrors();
        let first = true;
        let spreadStart;
        let optionalCommaStart;
        while (!this.match(11)) {
          if (first) {
            first = false;
          } else {
            this.expect(12, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);
            if (this.match(11)) {
              optionalCommaStart = this.state.start;
              break;
            }
          }
          if (this.match(21)) {
            const spreadNodeStartPos = this.state.start;
            const spreadNodeStartLoc = this.state.startLoc;
            spreadStart = this.state.start;
            exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));
            this.checkCommaAfterRest(41);
            break;
          } else {
            exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
          }
        }
        const innerEndPos = this.state.lastTokEnd;
        const innerEndLoc = this.state.lastTokEndLoc;
        this.expect(11);
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        let arrowNode = this.startNodeAt(startPos, startLoc);
        if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
          this.expressionScope.validateAsPattern();
          this.expressionScope.exit();
          this.parseArrowExpression(arrowNode, exprList, false);
          return arrowNode;
        }
        this.expressionScope.exit();
        if (!exprList.length) {
          this.unexpected(this.state.lastTokStart);
        }
        if (optionalCommaStart)
          this.unexpected(optionalCommaStart);
        if (spreadStart)
          this.unexpected(spreadStart);
        this.checkExpressionErrors(refExpressionErrors, true);
        this.toReferencedListDeep(exprList, true);
        if (exprList.length > 1) {
          val = this.startNodeAt(innerStartPos, innerStartLoc);
          val.expressions = exprList;
          this.finishNode(val, "SequenceExpression");
          this.resetEndLocation(val, innerEndPos, innerEndLoc);
        } else {
          val = exprList[0];
        }
        if (!this.options.createParenthesizedExpressions) {
          this.addExtra(val, "parenthesized", true);
          this.addExtra(val, "parenStart", startPos);
          this.takeSurroundingComments(val, startPos, this.state.lastTokEnd);
          return val;
        }
        const parenExpression = this.startNodeAt(startPos, startLoc);
        parenExpression.expression = val;
        this.finishNode(parenExpression, "ParenthesizedExpression");
        return parenExpression;
      }
      shouldParseArrow(params) {
        return !this.canInsertSemicolon();
      }
      parseArrow(node2) {
        if (this.eat(19)) {
          return node2;
        }
      }
      parseParenItem(node2, startPos, startLoc) {
        return node2;
      }
      parseNewOrNewTarget() {
        const node2 = this.startNode();
        this.next();
        if (this.match(16)) {
          const meta = this.createIdentifier(this.startNodeAtNode(node2), "new");
          this.next();
          const metaProp = this.parseMetaProperty(node2, meta, "target");
          if (!this.scope.inNonArrowFunction && !this.scope.inClass) {
            this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);
          }
          return metaProp;
        }
        return this.parseNew(node2);
      }
      parseNew(node2) {
        node2.callee = this.parseNoCallExpr();
        if (node2.callee.type === "Import") {
          this.raise(node2.callee.start, ErrorMessages.ImportCallNotNewExpression);
        } else if (this.isOptionalChain(node2.callee)) {
          this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);
        } else if (this.eat(18)) {
          this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);
        }
        this.parseNewArguments(node2);
        return this.finishNode(node2, "NewExpression");
      }
      parseNewArguments(node2) {
        if (this.eat(10)) {
          const args = this.parseExprList(11);
          this.toReferencedList(args);
          node2.arguments = args;
        } else {
          node2.arguments = [];
        }
      }
      parseTemplateElement(isTagged) {
        const elem = this.startNode();
        if (this.state.value === null) {
          if (!isTagged) {
            this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);
          }
        }
        elem.value = {
          raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
          cooked: this.state.value
        };
        this.next();
        elem.tail = this.match(22);
        return this.finishNode(elem, "TemplateElement");
      }
      parseTemplate(isTagged) {
        const node2 = this.startNode();
        this.next();
        node2.expressions = [];
        let curElt = this.parseTemplateElement(isTagged);
        node2.quasis = [curElt];
        while (!curElt.tail) {
          this.expect(23);
          node2.expressions.push(this.parseTemplateSubstitution());
          this.expect(8);
          node2.quasis.push(curElt = this.parseTemplateElement(isTagged));
        }
        this.next();
        return this.finishNode(node2, "TemplateLiteral");
      }
      parseTemplateSubstitution() {
        return this.parseExpression();
      }
      parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
        if (isRecord) {
          this.expectPlugin("recordAndTuple");
        }
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const propHash = /* @__PURE__ */ Object.create(null);
        let first = true;
        const node2 = this.startNode();
        node2.properties = [];
        this.next();
        while (!this.match(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
            if (this.match(close)) {
              this.addExtra(node2, "trailingComma", this.state.lastTokStart);
              break;
            }
          }
          let prop;
          if (isPattern) {
            prop = this.parseBindingProperty();
          } else {
            prop = this.parsePropertyDefinition(refExpressionErrors);
            this.checkProto(prop, isRecord, propHash, refExpressionErrors);
          }
          if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {
            this.raise(prop.start, ErrorMessages.InvalidRecordProperty);
          }
          if (prop.shorthand) {
            this.addExtra(prop, "shorthand", true);
          }
          node2.properties.push(prop);
        }
        this.next();
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        let type = "ObjectExpression";
        if (isPattern) {
          type = "ObjectPattern";
        } else if (isRecord) {
          type = "RecordExpression";
        }
        return this.finishNode(node2, type);
      }
      maybeAsyncOrAccessorProp(prop) {
        return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(49));
      }
      parsePropertyDefinition(refExpressionErrors) {
        let decorators = [];
        if (this.match(24)) {
          if (this.hasPlugin("decorators")) {
            this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);
          }
          while (this.match(24)) {
            decorators.push(this.parseDecorator());
          }
        }
        const prop = this.startNode();
        let isAsync = false;
        let isAccessor = false;
        let startPos;
        let startLoc;
        if (this.match(21)) {
          if (decorators.length)
            this.unexpected();
          return this.parseSpread();
        }
        if (decorators.length) {
          prop.decorators = decorators;
          decorators = [];
        }
        prop.method = false;
        if (refExpressionErrors) {
          startPos = this.state.start;
          startLoc = this.state.startLoc;
        }
        let isGenerator = this.eat(49);
        this.parsePropertyNamePrefixOperator(prop);
        const containsEsc = this.state.containsEsc;
        const key = this.parsePropertyName(prop);
        if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
          const keyName = key.name;
          if (keyName === "async" && !this.hasPrecedingLineBreak()) {
            isAsync = true;
            this.resetPreviousNodeTrailingComments(key);
            isGenerator = this.eat(49);
            this.parsePropertyName(prop);
          }
          if (keyName === "get" || keyName === "set") {
            isAccessor = true;
            this.resetPreviousNodeTrailingComments(key);
            prop.kind = keyName;
            if (this.match(49)) {
              isGenerator = true;
              this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);
              this.next();
            }
            this.parsePropertyName(prop);
          }
        }
        this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
        return prop;
      }
      getGetterSetterExpectedParamCount(method) {
        return method.kind === "get" ? 0 : 1;
      }
      getObjectOrClassMethodParams(method) {
        return method.params;
      }
      checkGetterSetterParams(method) {
        var _params;
        const paramCount = this.getGetterSetterExpectedParamCount(method);
        const params = this.getObjectOrClassMethodParams(method);
        const start = method.start;
        if (params.length !== paramCount) {
          if (method.kind === "get") {
            this.raise(start, ErrorMessages.BadGetterArity);
          } else {
            this.raise(start, ErrorMessages.BadSetterArity);
          }
        }
        if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {
          this.raise(start, ErrorMessages.BadSetterRestParameter);
        }
      }
      parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
        if (isAccessor) {
          this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
          this.checkGetterSetterParams(prop);
          return prop;
        }
        if (isAsync || isGenerator || this.match(10)) {
          if (isPattern)
            this.unexpected();
          prop.kind = "method";
          prop.method = true;
          return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
        }
      }
      parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
        prop.shorthand = false;
        if (this.eat(14)) {
          prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
          return this.finishNode(prop, "ObjectProperty");
        }
        if (!prop.computed && prop.key.type === "Identifier") {
          this.checkReservedWord(prop.key.name, prop.key.start, true, false);
          if (isPattern) {
            prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));
          } else if (this.match(27) && refExpressionErrors) {
            if (refExpressionErrors.shorthandAssign === -1) {
              refExpressionErrors.shorthandAssign = this.state.start;
            }
            prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));
          } else {
            prop.value = cloneIdentifier(prop.key);
          }
          prop.shorthand = true;
          return this.finishNode(prop, "ObjectProperty");
        }
      }
      parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
        const node2 = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
        if (!node2)
          this.unexpected();
        return node2;
      }
      parsePropertyName(prop) {
        if (this.eat(0)) {
          prop.computed = true;
          prop.key = this.parseMaybeAssignAllowIn();
          this.expect(3);
        } else {
          const {
            type,
            value
          } = this.state;
          let key;
          if (tokenIsKeywordOrIdentifier(type)) {
            key = this.parseIdentifier(true);
          } else {
            switch (type) {
              case 124:
                key = this.parseNumericLiteral(value);
                break;
              case 123:
                key = this.parseStringLiteral(value);
                break;
              case 125:
                key = this.parseBigIntLiteral(value);
                break;
              case 126:
                key = this.parseDecimalLiteral(value);
                break;
              case 128: {
                const privateKeyPos = this.state.start + 1;
                this.raise(privateKeyPos, ErrorMessages.UnexpectedPrivateField);
                key = this.parsePrivateName();
                break;
              }
              default:
                throw this.unexpected();
            }
          }
          prop.key = key;
          if (type !== 128) {
            prop.computed = false;
          }
        }
        return prop.key;
      }
      initFunction(node2, isAsync) {
        node2.id = null;
        node2.generator = false;
        node2.async = !!isAsync;
      }
      parseMethod(node2, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
        this.initFunction(node2, isAsync);
        node2.generator = !!isGenerator;
        const allowModifiers = isConstructor;
        this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
        this.prodParam.enter(functionFlags(isAsync, node2.generator));
        this.parseFunctionParams(node2, allowModifiers);
        this.parseFunctionBodyAndFinish(node2, type, true);
        this.prodParam.exit();
        this.scope.exit();
        return node2;
      }
      parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
        if (isTuple) {
          this.expectPlugin("recordAndTuple");
        }
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const node2 = this.startNode();
        this.next();
        node2.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node2);
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return this.finishNode(node2, isTuple ? "TupleExpression" : "ArrayExpression");
      }
      parseArrowExpression(node2, params, isAsync, trailingCommaPos) {
        this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
        let flags = functionFlags(isAsync, false);
        if (!this.match(0) && this.prodParam.hasIn) {
          flags |= PARAM_IN;
        }
        this.prodParam.enter(flags);
        this.initFunction(node2, isAsync);
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        if (params) {
          this.state.maybeInArrowParameters = true;
          this.setArrowFunctionParameters(node2, params, trailingCommaPos);
        }
        this.state.maybeInArrowParameters = false;
        this.parseFunctionBody(node2, true);
        this.prodParam.exit();
        this.scope.exit();
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return this.finishNode(node2, "ArrowFunctionExpression");
      }
      setArrowFunctionParameters(node2, params, trailingCommaPos) {
        node2.params = this.toAssignableList(params, trailingCommaPos, false);
      }
      parseFunctionBodyAndFinish(node2, type, isMethod = false) {
        this.parseFunctionBody(node2, false, isMethod);
        this.finishNode(node2, type);
      }
      parseFunctionBody(node2, allowExpression, isMethod = false) {
        const isExpression = allowExpression && !this.match(5);
        this.expressionScope.enter(newExpressionScope());
        if (isExpression) {
          node2.body = this.parseMaybeAssign();
          this.checkParams(node2, false, allowExpression, false);
        } else {
          const oldStrict = this.state.strict;
          const oldLabels = this.state.labels;
          this.state.labels = [];
          this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);
          node2.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
            const nonSimple = !this.isSimpleParamList(node2.params);
            if (hasStrictModeDirective && nonSimple) {
              const errorPos = (node2.kind === "method" || node2.kind === "constructor") && !!node2.key ? node2.key.end : node2.start;
              this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);
            }
            const strictModeChanged = !oldStrict && this.state.strict;
            this.checkParams(node2, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);
            if (this.state.strict && node2.id) {
              this.checkLVal(node2.id, "function name", BIND_OUTSIDE, void 0, void 0, strictModeChanged);
            }
          });
          this.prodParam.exit();
          this.state.labels = oldLabels;
        }
        this.expressionScope.exit();
      }
      isSimpleParamList(params) {
        for (let i = 0, len = params.length; i < len; i++) {
          if (params[i].type !== "Identifier")
            return false;
        }
        return true;
      }
      checkParams(node2, allowDuplicates, isArrowFunction, strictModeChanged = true) {
        const checkClashes = /* @__PURE__ */ new Set();
        for (const param of node2.params) {
          this.checkLVal(param, "function parameter list", BIND_VAR, allowDuplicates ? null : checkClashes, void 0, strictModeChanged);
        }
      }
      parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
        const elts = [];
        let first = true;
        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
            if (this.match(close)) {
              if (nodeForExtra) {
                this.addExtra(nodeForExtra, "trailingComma", this.state.lastTokStart);
              }
              this.next();
              break;
            }
          }
          elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
        }
        return elts;
      }
      parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
        let elt;
        if (this.match(12)) {
          if (!allowEmpty) {
            this.raise(this.state.pos, ErrorMessages.UnexpectedToken, ",");
          }
          elt = null;
        } else if (this.match(21)) {
          const spreadNodeStartPos = this.state.start;
          const spreadNodeStartLoc = this.state.startLoc;
          elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);
        } else if (this.match(17)) {
          this.expectPlugin("partialApplication");
          if (!allowPlaceholder) {
            this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);
          }
          const node2 = this.startNode();
          this.next();
          elt = this.finishNode(node2, "ArgumentPlaceholder");
        } else {
          elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
        }
        return elt;
      }
      parseIdentifier(liberal) {
        const node2 = this.startNode();
        const name = this.parseIdentifierName(node2.start, liberal);
        return this.createIdentifier(node2, name);
      }
      createIdentifier(node2, name) {
        node2.name = name;
        node2.loc.identifierName = name;
        return this.finishNode(node2, "Identifier");
      }
      parseIdentifierName(pos, liberal) {
        let name;
        const {
          start,
          type
        } = this.state;
        if (tokenIsKeywordOrIdentifier(type)) {
          name = this.state.value;
        } else {
          throw this.unexpected();
        }
        const tokenIsKeyword2 = tokenKeywordOrIdentifierIsKeyword(type);
        if (liberal) {
          if (tokenIsKeyword2) {
            this.replaceToken(122);
          }
        } else {
          this.checkReservedWord(name, start, tokenIsKeyword2, false);
        }
        this.next();
        return name;
      }
      checkReservedWord(word, startLoc, checkKeywords, isBinding) {
        if (word.length > 10) {
          return;
        }
        if (!canBeReservedWord(word)) {
          return;
        }
        if (word === "yield") {
          if (this.prodParam.hasYield) {
            this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);
            return;
          }
        } else if (word === "await") {
          if (this.prodParam.hasAwait) {
            this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);
            return;
          } else if (this.scope.inStaticBlock) {
            this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);
            return;
          } else {
            this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);
          }
        } else if (word === "arguments") {
          if (this.scope.inClassAndNotInNonArrowFunction) {
            this.raise(startLoc, ErrorMessages.ArgumentsInClass);
            return;
          }
        }
        if (checkKeywords && isKeyword(word)) {
          this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);
          return;
        }
        const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;
        if (reservedTest(word, this.inModule)) {
          this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);
        }
      }
      isAwaitAllowed() {
        if (this.prodParam.hasAwait)
          return true;
        if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {
          return true;
        }
        return false;
      }
      parseAwait(startPos, startLoc) {
        const node2 = this.startNodeAt(startPos, startLoc);
        this.expressionScope.recordParameterInitializerError(node2.start, ErrorMessages.AwaitExpressionFormalParameter);
        if (this.eat(49)) {
          this.raise(node2.start, ErrorMessages.ObsoleteAwaitStar);
        }
        if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
          if (this.isAmbiguousAwait()) {
            this.ambiguousScriptDifferentAst = true;
          } else {
            this.sawUnambiguousESM = true;
          }
        }
        if (!this.state.soloAwait) {
          node2.argument = this.parseMaybeUnary(null, true);
        }
        return this.finishNode(node2, "AwaitExpression");
      }
      isAmbiguousAwait() {
        return this.hasPrecedingLineBreak() || this.match(47) || this.match(10) || this.match(0) || this.match(22) || this.match(127) || this.match(50) || this.hasPlugin("v8intrinsic") && this.match(48);
      }
      parseYield() {
        const node2 = this.startNode();
        this.expressionScope.recordParameterInitializerError(node2.start, ErrorMessages.YieldInParameter);
        this.next();
        let delegating = false;
        let argument = null;
        if (!this.hasPrecedingLineBreak()) {
          delegating = this.eat(49);
          switch (this.state.type) {
            case 13:
            case 129:
            case 8:
            case 11:
            case 3:
            case 9:
            case 14:
            case 12:
              if (!delegating)
                break;
            default:
              argument = this.parseMaybeAssign();
          }
        }
        node2.delegate = delegating;
        node2.argument = argument;
        return this.finishNode(node2, "YieldExpression");
      }
      checkPipelineAtInfixOperator(left, leftStartPos) {
        if (this.getPluginOption("pipelineOperator", "proposal") === "smart") {
          if (left.type === "SequenceExpression") {
            this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);
          }
        }
      }
      checkHackPipeBodyEarlyErrors(startPos) {
        if (!this.topicReferenceWasUsedInCurrentContext()) {
          this.raise(startPos, ErrorMessages.PipeTopicUnused);
        }
      }
      parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {
        const bodyNode = this.startNodeAt(startPos, startLoc);
        if (this.isSimpleReference(childExpr)) {
          bodyNode.callee = childExpr;
          return this.finishNode(bodyNode, "PipelineBareFunction");
        } else {
          this.checkSmartPipeTopicBodyEarlyErrors(startPos);
          bodyNode.expression = childExpr;
          return this.finishNode(bodyNode, "PipelineTopicExpression");
        }
      }
      isSimpleReference(expression) {
        switch (expression.type) {
          case "MemberExpression":
            return !expression.computed && this.isSimpleReference(expression.object);
          case "Identifier":
            return true;
          default:
            return false;
        }
      }
      checkSmartPipeTopicBodyEarlyErrors(startPos) {
        if (this.match(19)) {
          throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);
        } else if (!this.topicReferenceWasUsedInCurrentContext()) {
          this.raise(startPos, ErrorMessages.PipelineTopicUnused);
        }
      }
      withTopicBindingContext(callback) {
        const outerContextTopicState = this.state.topicContext;
        this.state.topicContext = {
          maxNumOfResolvableTopics: 1,
          maxTopicIndex: null
        };
        try {
          return callback();
        } finally {
          this.state.topicContext = outerContextTopicState;
        }
      }
      withSmartMixTopicForbiddingContext(callback) {
        const proposal = this.getPluginOption("pipelineOperator", "proposal");
        if (proposal === "smart") {
          const outerContextTopicState = this.state.topicContext;
          this.state.topicContext = {
            maxNumOfResolvableTopics: 0,
            maxTopicIndex: null
          };
          try {
            return callback();
          } finally {
            this.state.topicContext = outerContextTopicState;
          }
        } else {
          return callback();
        }
      }
      withSoloAwaitPermittingContext(callback) {
        const outerContextSoloAwaitState = this.state.soloAwait;
        this.state.soloAwait = true;
        try {
          return callback();
        } finally {
          this.state.soloAwait = outerContextSoloAwaitState;
        }
      }
      allowInAnd(callback) {
        const flags = this.prodParam.currentFlags();
        const prodParamToSet = PARAM_IN & ~flags;
        if (prodParamToSet) {
          this.prodParam.enter(flags | PARAM_IN);
          try {
            return callback();
          } finally {
            this.prodParam.exit();
          }
        }
        return callback();
      }
      disallowInAnd(callback) {
        const flags = this.prodParam.currentFlags();
        const prodParamToClear = PARAM_IN & flags;
        if (prodParamToClear) {
          this.prodParam.enter(flags & ~PARAM_IN);
          try {
            return callback();
          } finally {
            this.prodParam.exit();
          }
        }
        return callback();
      }
      registerTopicReference() {
        this.state.topicContext.maxTopicIndex = 0;
      }
      topicReferenceIsAllowedInCurrentContext() {
        return this.state.topicContext.maxNumOfResolvableTopics >= 1;
      }
      topicReferenceWasUsedInCurrentContext() {
        return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
      }
      parseFSharpPipelineBody(prec) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        this.state.potentialArrowAt = this.state.start;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = true;
        const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return ret;
      }
      parseModuleExpression() {
        this.expectPlugin("moduleBlocks");
        const node2 = this.startNode();
        this.next();
        this.eat(5);
        const revertScopes = this.initializeScopes(true);
        this.enterInitialScopes();
        const program = this.startNode();
        try {
          node2.body = this.parseProgram(program, 8, "module");
        } finally {
          revertScopes();
        }
        this.eat(8);
        return this.finishNode(node2, "ModuleExpression");
      }
      parsePropertyNamePrefixOperator(prop) {
      }
    };
    loopLabel = {
      kind: "loop"
    };
    switchLabel = {
      kind: "switch"
    };
    FUNC_NO_FLAGS = 0;
    FUNC_STATEMENT = 1;
    FUNC_HANGING_STATEMENT = 2;
    FUNC_NULLABLE_ID = 4;
    loneSurrogate = /[\uD800-\uDFFF]/u;
    keywordRelationalOperator = /in(?:stanceof)?/y;
    StatementParser = class extends ExpressionParser {
      parseTopLevel(file, program) {
        file.program = this.parseProgram(program);
        file.comments = this.state.comments;
        if (this.options.tokens)
          file.tokens = babel7CompatTokens(this.tokens);
        return this.finishNode(file, "File");
      }
      parseProgram(program, end = 129, sourceType = this.options.sourceType) {
        program.sourceType = sourceType;
        program.interpreter = this.parseInterpreterDirective();
        this.parseBlockBody(program, true, true, end);
        if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
          for (const [name] of Array.from(this.scope.undefinedExports)) {
            const pos = this.scope.undefinedExports.get(name);
            this.raise(pos, ErrorMessages.ModuleExportUndefined, name);
          }
        }
        return this.finishNode(program, "Program");
      }
      stmtToDirective(stmt) {
        const directive = stmt;
        directive.type = "Directive";
        directive.value = directive.expression;
        delete directive.expression;
        const directiveLiteral = directive.value;
        const expressionValue = directiveLiteral.value;
        const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);
        const val = directiveLiteral.value = raw.slice(1, -1);
        this.addExtra(directiveLiteral, "raw", raw);
        this.addExtra(directiveLiteral, "rawValue", val);
        this.addExtra(directiveLiteral, "expressionValue", expressionValue);
        directiveLiteral.type = "DirectiveLiteral";
        return directive;
      }
      parseInterpreterDirective() {
        if (!this.match(26)) {
          return null;
        }
        const node2 = this.startNode();
        node2.value = this.state.value;
        this.next();
        return this.finishNode(node2, "InterpreterDirective");
      }
      isLet(context) {
        if (!this.isContextual(93)) {
          return false;
        }
        return this.isLetKeyword(context);
      }
      isLetKeyword(context) {
        const next = this.nextTokenStart();
        const nextCh = this.codePointAtPos(next);
        if (nextCh === 92 || nextCh === 91) {
          return true;
        }
        if (context)
          return false;
        if (nextCh === 123)
          return true;
        if (isIdentifierStart(nextCh)) {
          keywordRelationalOperator.lastIndex = next;
          if (keywordRelationalOperator.test(this.input)) {
            const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
            if (!isIdentifierChar(endCh) && endCh !== 92) {
              return false;
            }
          }
          return true;
        }
        return false;
      }
      parseStatement(context, topLevel) {
        if (this.match(24)) {
          this.parseDecorators(true);
        }
        return this.parseStatementContent(context, topLevel);
      }
      parseStatementContent(context, topLevel) {
        let starttype = this.state.type;
        const node2 = this.startNode();
        let kind;
        if (this.isLet(context)) {
          starttype = 68;
          kind = "let";
        }
        switch (starttype) {
          case 54:
            return this.parseBreakContinueStatement(node2, true);
          case 57:
            return this.parseBreakContinueStatement(node2, false);
          case 58:
            return this.parseDebuggerStatement(node2);
          case 84:
            return this.parseDoStatement(node2);
          case 85:
            return this.parseForStatement(node2);
          case 62:
            if (this.lookaheadCharCode() === 46)
              break;
            if (context) {
              if (this.state.strict) {
                this.raise(this.state.start, ErrorMessages.StrictFunction);
              } else if (context !== "if" && context !== "label") {
                this.raise(this.state.start, ErrorMessages.SloppyFunction);
              }
            }
            return this.parseFunctionStatement(node2, false, !context);
          case 74:
            if (context)
              this.unexpected();
            return this.parseClass(node2, true);
          case 63:
            return this.parseIfStatement(node2);
          case 64:
            return this.parseReturnStatement(node2);
          case 65:
            return this.parseSwitchStatement(node2);
          case 66:
            return this.parseThrowStatement(node2);
          case 67:
            return this.parseTryStatement(node2);
          case 69:
          case 68:
            kind = kind || this.state.value;
            if (context && kind !== "var") {
              this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);
            }
            return this.parseVarStatement(node2, kind);
          case 86:
            return this.parseWhileStatement(node2);
          case 70:
            return this.parseWithStatement(node2);
          case 5:
            return this.parseBlock();
          case 13:
            return this.parseEmptyStatement(node2);
          case 77: {
            const nextTokenCharCode = this.lookaheadCharCode();
            if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
              break;
            }
          }
          case 76: {
            if (!this.options.allowImportExportEverywhere && !topLevel) {
              this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);
            }
            this.next();
            let result2;
            if (starttype === 77) {
              result2 = this.parseImport(node2);
              if (result2.type === "ImportDeclaration" && (!result2.importKind || result2.importKind === "value")) {
                this.sawUnambiguousESM = true;
              }
            } else {
              result2 = this.parseExport(node2);
              if (result2.type === "ExportNamedDeclaration" && (!result2.exportKind || result2.exportKind === "value") || result2.type === "ExportAllDeclaration" && (!result2.exportKind || result2.exportKind === "value") || result2.type === "ExportDefaultDeclaration") {
                this.sawUnambiguousESM = true;
              }
            }
            this.assertModuleNodeAllowed(node2);
            return result2;
          }
          default: {
            if (this.isAsyncFunction()) {
              if (context) {
                this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);
              }
              this.next();
              return this.parseFunctionStatement(node2, true, !context);
            }
          }
        }
        const maybeName = this.state.value;
        const expr = this.parseExpression();
        if (tokenIsIdentifier(starttype) && expr.type === "Identifier" && this.eat(14)) {
          return this.parseLabeledStatement(node2, maybeName, expr, context);
        } else {
          return this.parseExpressionStatement(node2, expr);
        }
      }
      assertModuleNodeAllowed(node2) {
        if (!this.options.allowImportExportEverywhere && !this.inModule) {
          this.raise(node2.start, SourceTypeModuleErrorMessages.ImportOutsideModule);
        }
      }
      takeDecorators(node2) {
        const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        if (decorators.length) {
          node2.decorators = decorators;
          this.resetStartLocationFromNode(node2, decorators[0]);
          this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];
        }
      }
      canHaveLeadingDecorator() {
        return this.match(74);
      }
      parseDecorators(allowExport) {
        const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        while (this.match(24)) {
          const decorator = this.parseDecorator();
          currentContextDecorators.push(decorator);
        }
        if (this.match(76)) {
          if (!allowExport) {
            this.unexpected();
          }
          if (this.hasPlugin("decorators") && !this.getPluginOption("decorators", "decoratorsBeforeExport")) {
            this.raise(this.state.start, ErrorMessages.DecoratorExportClass);
          }
        } else if (!this.canHaveLeadingDecorator()) {
          throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);
        }
      }
      parseDecorator() {
        this.expectOnePlugin(["decorators-legacy", "decorators"]);
        const node2 = this.startNode();
        this.next();
        if (this.hasPlugin("decorators")) {
          this.state.decoratorStack.push([]);
          const startPos = this.state.start;
          const startLoc = this.state.startLoc;
          let expr;
          if (this.eat(10)) {
            expr = this.parseExpression();
            this.expect(11);
          } else {
            expr = this.parseIdentifier(false);
            while (this.eat(16)) {
              const node3 = this.startNodeAt(startPos, startLoc);
              node3.object = expr;
              node3.property = this.parseIdentifier(true);
              node3.computed = false;
              expr = this.finishNode(node3, "MemberExpression");
            }
          }
          node2.expression = this.parseMaybeDecoratorArguments(expr);
          this.state.decoratorStack.pop();
        } else {
          node2.expression = this.parseExprSubscripts();
        }
        return this.finishNode(node2, "Decorator");
      }
      parseMaybeDecoratorArguments(expr) {
        if (this.eat(10)) {
          const node2 = this.startNodeAtNode(expr);
          node2.callee = expr;
          node2.arguments = this.parseCallExpressionArguments(11, false);
          this.toReferencedList(node2.arguments);
          return this.finishNode(node2, "CallExpression");
        }
        return expr;
      }
      parseBreakContinueStatement(node2, isBreak) {
        this.next();
        if (this.isLineTerminator()) {
          node2.label = null;
        } else {
          node2.label = this.parseIdentifier();
          this.semicolon();
        }
        this.verifyBreakContinue(node2, isBreak);
        return this.finishNode(node2, isBreak ? "BreakStatement" : "ContinueStatement");
      }
      verifyBreakContinue(node2, isBreak) {
        let i;
        for (i = 0; i < this.state.labels.length; ++i) {
          const lab = this.state.labels[i];
          if (node2.label == null || lab.name === node2.label.name) {
            if (lab.kind != null && (isBreak || lab.kind === "loop"))
              break;
            if (node2.label && isBreak)
              break;
          }
        }
        if (i === this.state.labels.length) {
          this.raise(node2.start, ErrorMessages.IllegalBreakContinue, isBreak ? "break" : "continue");
        }
      }
      parseDebuggerStatement(node2) {
        this.next();
        this.semicolon();
        return this.finishNode(node2, "DebuggerStatement");
      }
      parseHeaderExpression() {
        this.expect(10);
        const val = this.parseExpression();
        this.expect(11);
        return val;
      }
      parseDoStatement(node2) {
        this.next();
        this.state.labels.push(loopLabel);
        node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("do"));
        this.state.labels.pop();
        this.expect(86);
        node2.test = this.parseHeaderExpression();
        this.eat(13);
        return this.finishNode(node2, "DoWhileStatement");
      }
      parseForStatement(node2) {
        this.next();
        this.state.labels.push(loopLabel);
        let awaitAt = -1;
        if (this.isAwaitAllowed() && this.eatContextual(90)) {
          awaitAt = this.state.lastTokStart;
        }
        this.scope.enter(SCOPE_OTHER);
        this.expect(10);
        if (this.match(13)) {
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node2, null);
        }
        const startsWithLet = this.isContextual(93);
        const isLet = startsWithLet && this.isLetKeyword();
        if (this.match(68) || this.match(69) || isLet) {
          const init4 = this.startNode();
          const kind = isLet ? "let" : this.state.value;
          this.next();
          this.parseVar(init4, true, kind);
          this.finishNode(init4, "VariableDeclaration");
          if ((this.match(52) || this.isContextual(95)) && init4.declarations.length === 1) {
            return this.parseForIn(node2, init4, awaitAt);
          }
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node2, init4);
        }
        const startsWithAsync = this.isContextual(89);
        const refExpressionErrors = new ExpressionErrors();
        const init3 = this.parseExpression(true, refExpressionErrors);
        const isForOf = this.isContextual(95);
        if (isForOf) {
          if (startsWithLet) {
            this.raise(init3.start, ErrorMessages.ForOfLet);
          } else if (awaitAt === -1 && startsWithAsync && init3.type === "Identifier") {
            this.raise(init3.start, ErrorMessages.ForOfAsync);
          }
        }
        if (isForOf || this.match(52)) {
          this.toAssignable(init3, true);
          const description = isForOf ? "for-of statement" : "for-in statement";
          this.checkLVal(init3, description);
          return this.parseForIn(node2, init3, awaitAt);
        } else {
          this.checkExpressionErrors(refExpressionErrors, true);
        }
        if (awaitAt > -1) {
          this.unexpected(awaitAt);
        }
        return this.parseFor(node2, init3);
      }
      parseFunctionStatement(node2, isAsync, declarationPosition) {
        this.next();
        return this.parseFunction(node2, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);
      }
      parseIfStatement(node2) {
        this.next();
        node2.test = this.parseHeaderExpression();
        node2.consequent = this.parseStatement("if");
        node2.alternate = this.eat(60) ? this.parseStatement("if") : null;
        return this.finishNode(node2, "IfStatement");
      }
      parseReturnStatement(node2) {
        if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {
          this.raise(this.state.start, ErrorMessages.IllegalReturn);
        }
        this.next();
        if (this.isLineTerminator()) {
          node2.argument = null;
        } else {
          node2.argument = this.parseExpression();
          this.semicolon();
        }
        return this.finishNode(node2, "ReturnStatement");
      }
      parseSwitchStatement(node2) {
        this.next();
        node2.discriminant = this.parseHeaderExpression();
        const cases = node2.cases = [];
        this.expect(5);
        this.state.labels.push(switchLabel);
        this.scope.enter(SCOPE_OTHER);
        let cur;
        for (let sawDefault; !this.match(8); ) {
          if (this.match(55) || this.match(59)) {
            const isCase = this.match(55);
            if (cur)
              this.finishNode(cur, "SwitchCase");
            cases.push(cur = this.startNode());
            cur.consequent = [];
            this.next();
            if (isCase) {
              cur.test = this.parseExpression();
            } else {
              if (sawDefault) {
                this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);
              }
              sawDefault = true;
              cur.test = null;
            }
            this.expect(14);
          } else {
            if (cur) {
              cur.consequent.push(this.parseStatement(null));
            } else {
              this.unexpected();
            }
          }
        }
        this.scope.exit();
        if (cur)
          this.finishNode(cur, "SwitchCase");
        this.next();
        this.state.labels.pop();
        return this.finishNode(node2, "SwitchStatement");
      }
      parseThrowStatement(node2) {
        this.next();
        if (this.hasPrecedingLineBreak()) {
          this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);
        }
        node2.argument = this.parseExpression();
        this.semicolon();
        return this.finishNode(node2, "ThrowStatement");
      }
      parseCatchClauseParam() {
        const param = this.parseBindingAtom();
        const simple = param.type === "Identifier";
        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);
        this.checkLVal(param, "catch clause", BIND_LEXICAL);
        return param;
      }
      parseTryStatement(node2) {
        this.next();
        node2.block = this.parseBlock();
        node2.handler = null;
        if (this.match(56)) {
          const clause = this.startNode();
          this.next();
          if (this.match(10)) {
            this.expect(10);
            clause.param = this.parseCatchClauseParam();
            this.expect(11);
          } else {
            clause.param = null;
            this.scope.enter(SCOPE_OTHER);
          }
          clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
          this.scope.exit();
          node2.handler = this.finishNode(clause, "CatchClause");
        }
        node2.finalizer = this.eat(61) ? this.parseBlock() : null;
        if (!node2.handler && !node2.finalizer) {
          this.raise(node2.start, ErrorMessages.NoCatchOrFinally);
        }
        return this.finishNode(node2, "TryStatement");
      }
      parseVarStatement(node2, kind) {
        this.next();
        this.parseVar(node2, false, kind);
        this.semicolon();
        return this.finishNode(node2, "VariableDeclaration");
      }
      parseWhileStatement(node2) {
        this.next();
        node2.test = this.parseHeaderExpression();
        this.state.labels.push(loopLabel);
        node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("while"));
        this.state.labels.pop();
        return this.finishNode(node2, "WhileStatement");
      }
      parseWithStatement(node2) {
        if (this.state.strict) {
          this.raise(this.state.start, ErrorMessages.StrictWith);
        }
        this.next();
        node2.object = this.parseHeaderExpression();
        node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("with"));
        return this.finishNode(node2, "WithStatement");
      }
      parseEmptyStatement(node2) {
        this.next();
        return this.finishNode(node2, "EmptyStatement");
      }
      parseLabeledStatement(node2, maybeName, expr, context) {
        for (const label of this.state.labels) {
          if (label.name === maybeName) {
            this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);
          }
        }
        const kind = tokenIsLoop(this.state.type) ? "loop" : this.match(65) ? "switch" : null;
        for (let i = this.state.labels.length - 1; i >= 0; i--) {
          const label = this.state.labels[i];
          if (label.statementStart === node2.start) {
            label.statementStart = this.state.start;
            label.kind = kind;
          } else {
            break;
          }
        }
        this.state.labels.push({
          name: maybeName,
          kind,
          statementStart: this.state.start
        });
        node2.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
        this.state.labels.pop();
        node2.label = expr;
        return this.finishNode(node2, "LabeledStatement");
      }
      parseExpressionStatement(node2, expr) {
        node2.expression = expr;
        this.semicolon();
        return this.finishNode(node2, "ExpressionStatement");
      }
      parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
        const node2 = this.startNode();
        if (allowDirectives) {
          this.state.strictErrors.clear();
        }
        this.expect(5);
        if (createNewLexicalScope) {
          this.scope.enter(SCOPE_OTHER);
        }
        this.parseBlockBody(node2, allowDirectives, false, 8, afterBlockParse);
        if (createNewLexicalScope) {
          this.scope.exit();
        }
        return this.finishNode(node2, "BlockStatement");
      }
      isValidDirective(stmt) {
        return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
      }
      parseBlockBody(node2, allowDirectives, topLevel, end, afterBlockParse) {
        const body = node2.body = [];
        const directives = node2.directives = [];
        this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
      }
      parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
        const oldStrict = this.state.strict;
        let hasStrictModeDirective = false;
        let parsedNonDirective = false;
        while (!this.match(end)) {
          const stmt = this.parseStatement(null, topLevel);
          if (directives && !parsedNonDirective) {
            if (this.isValidDirective(stmt)) {
              const directive = this.stmtToDirective(stmt);
              directives.push(directive);
              if (!hasStrictModeDirective && directive.value.value === "use strict") {
                hasStrictModeDirective = true;
                this.setStrict(true);
              }
              continue;
            }
            parsedNonDirective = true;
            this.state.strictErrors.clear();
          }
          body.push(stmt);
        }
        if (afterBlockParse) {
          afterBlockParse.call(this, hasStrictModeDirective);
        }
        if (!oldStrict) {
          this.setStrict(false);
        }
        this.next();
      }
      parseFor(node2, init3) {
        node2.init = init3;
        this.semicolon(false);
        node2.test = this.match(13) ? null : this.parseExpression();
        this.semicolon(false);
        node2.update = this.match(11) ? null : this.parseExpression();
        this.expect(11);
        node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for"));
        this.scope.exit();
        this.state.labels.pop();
        return this.finishNode(node2, "ForStatement");
      }
      parseForIn(node2, init3, awaitAt) {
        const isForIn = this.match(52);
        this.next();
        if (isForIn) {
          if (awaitAt > -1)
            this.unexpected(awaitAt);
        } else {
          node2.await = awaitAt > -1;
        }
        if (init3.type === "VariableDeclaration" && init3.declarations[0].init != null && (!isForIn || this.state.strict || init3.kind !== "var" || init3.declarations[0].id.type !== "Identifier")) {
          this.raise(init3.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? "for-in" : "for-of");
        } else if (init3.type === "AssignmentPattern") {
          this.raise(init3.start, ErrorMessages.InvalidLhs, "for-loop");
        }
        node2.left = init3;
        node2.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
        this.expect(11);
        node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for"));
        this.scope.exit();
        this.state.labels.pop();
        return this.finishNode(node2, isForIn ? "ForInStatement" : "ForOfStatement");
      }
      parseVar(node2, isFor, kind) {
        const declarations = node2.declarations = [];
        const isTypescript = this.hasPlugin("typescript");
        node2.kind = kind;
        for (; ; ) {
          const decl = this.startNode();
          this.parseVarId(decl, kind);
          if (this.eat(27)) {
            decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
          } else {
            if (kind === "const" && !(this.match(52) || this.isContextual(95))) {
              if (!isTypescript) {
                this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, "Const declarations");
              }
            } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(52) || this.isContextual(95)))) {
              this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, "Complex binding patterns");
            }
            decl.init = null;
          }
          declarations.push(this.finishNode(decl, "VariableDeclarator"));
          if (!this.eat(12))
            break;
        }
        return node2;
      }
      parseVarId(decl, kind) {
        decl.id = this.parseBindingAtom();
        this.checkLVal(decl.id, "variable declaration", kind === "var" ? BIND_VAR : BIND_LEXICAL, void 0, kind !== "var");
      }
      parseFunction(node2, statement = FUNC_NO_FLAGS, isAsync = false) {
        const isStatement = statement & FUNC_STATEMENT;
        const isHangingStatement = statement & FUNC_HANGING_STATEMENT;
        const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);
        this.initFunction(node2, isAsync);
        if (this.match(49) && isHangingStatement) {
          this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);
        }
        node2.generator = this.eat(49);
        if (isStatement) {
          node2.id = this.parseFunctionId(requireId);
        }
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = false;
        this.scope.enter(SCOPE_FUNCTION);
        this.prodParam.enter(functionFlags(isAsync, node2.generator));
        if (!isStatement) {
          node2.id = this.parseFunctionId();
        }
        this.parseFunctionParams(node2, false);
        this.withSmartMixTopicForbiddingContext(() => {
          this.parseFunctionBodyAndFinish(node2, isStatement ? "FunctionDeclaration" : "FunctionExpression");
        });
        this.prodParam.exit();
        this.scope.exit();
        if (isStatement && !isHangingStatement) {
          this.registerFunctionStatementId(node2);
        }
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return node2;
      }
      parseFunctionId(requireId) {
        return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
      }
      parseFunctionParams(node2, allowModifiers) {
        this.expect(10);
        this.expressionScope.enter(newParameterDeclarationScope());
        node2.params = this.parseBindingList(11, 41, false, allowModifiers);
        this.expressionScope.exit();
      }
      registerFunctionStatementId(node2) {
        if (!node2.id)
          return;
        this.scope.declareName(node2.id.name, this.state.strict || node2.generator || node2.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node2.id.start);
      }
      parseClass(node2, isStatement, optionalId) {
        this.next();
        this.takeDecorators(node2);
        const oldStrict = this.state.strict;
        this.state.strict = true;
        this.parseClassId(node2, isStatement, optionalId);
        this.parseClassSuper(node2);
        node2.body = this.parseClassBody(!!node2.superClass, oldStrict);
        return this.finishNode(node2, isStatement ? "ClassDeclaration" : "ClassExpression");
      }
      isClassProperty() {
        return this.match(27) || this.match(13) || this.match(8);
      }
      isClassMethod() {
        return this.match(10);
      }
      isNonstaticConstructor(method) {
        return !method.computed && !method.static && (method.key.name === "constructor" || method.key.value === "constructor");
      }
      parseClassBody(hadSuperClass, oldStrict) {
        this.classScope.enter();
        const state = {
          hadConstructor: false,
          hadSuperClass
        };
        let decorators = [];
        const classBody = this.startNode();
        classBody.body = [];
        this.expect(5);
        this.withSmartMixTopicForbiddingContext(() => {
          while (!this.match(8)) {
            if (this.eat(13)) {
              if (decorators.length > 0) {
                throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);
              }
              continue;
            }
            if (this.match(24)) {
              decorators.push(this.parseDecorator());
              continue;
            }
            const member = this.startNode();
            if (decorators.length) {
              member.decorators = decorators;
              this.resetStartLocationFromNode(member, decorators[0]);
              decorators = [];
            }
            this.parseClassMember(classBody, member, state);
            if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {
              this.raise(member.start, ErrorMessages.DecoratorConstructor);
            }
          }
        });
        this.state.strict = oldStrict;
        this.next();
        if (decorators.length) {
          throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);
        }
        this.classScope.exit();
        return this.finishNode(classBody, "ClassBody");
      }
      parseClassMemberFromModifier(classBody, member) {
        const key = this.parseIdentifier(true);
        if (this.isClassMethod()) {
          const method = member;
          method.kind = "method";
          method.computed = false;
          method.key = key;
          method.static = false;
          this.pushClassMethod(classBody, method, false, false, false, false);
          return true;
        } else if (this.isClassProperty()) {
          const prop = member;
          prop.computed = false;
          prop.key = key;
          prop.static = false;
          classBody.body.push(this.parseClassProperty(prop));
          return true;
        }
        this.resetPreviousNodeTrailingComments(key);
        return false;
      }
      parseClassMember(classBody, member, state) {
        const isStatic = this.isContextual(98);
        if (isStatic) {
          if (this.parseClassMemberFromModifier(classBody, member)) {
            return;
          }
          if (this.eat(5)) {
            this.parseClassStaticBlock(classBody, member);
            return;
          }
        }
        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
      }
      parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
        const publicMethod = member;
        const privateMethod = member;
        const publicProp = member;
        const privateProp = member;
        const method = publicMethod;
        const publicMember = publicMethod;
        member.static = isStatic;
        this.parsePropertyNamePrefixOperator(member);
        if (this.eat(49)) {
          method.kind = "method";
          const isPrivateName = this.match(128);
          this.parseClassElementName(method);
          if (isPrivateName) {
            this.pushClassPrivateMethod(classBody, privateMethod, true, false);
            return;
          }
          if (this.isNonstaticConstructor(publicMethod)) {
            this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);
          }
          this.pushClassMethod(classBody, publicMethod, true, false, false, false);
          return;
        }
        const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;
        const isPrivate = this.match(128);
        const key = this.parseClassElementName(member);
        const maybeQuestionTokenStart = this.state.start;
        this.parsePostMemberNameModifiers(publicMember);
        if (this.isClassMethod()) {
          method.kind = "method";
          if (isPrivate) {
            this.pushClassPrivateMethod(classBody, privateMethod, false, false);
            return;
          }
          const isConstructor = this.isNonstaticConstructor(publicMethod);
          let allowsDirectSuper = false;
          if (isConstructor) {
            publicMethod.kind = "constructor";
            if (state.hadConstructor && !this.hasPlugin("typescript")) {
              this.raise(key.start, ErrorMessages.DuplicateConstructor);
            }
            if (isConstructor && this.hasPlugin("typescript") && member.override) {
              this.raise(key.start, ErrorMessages.OverrideOnConstructor);
            }
            state.hadConstructor = true;
            allowsDirectSuper = state.hadSuperClass;
          }
          this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
        } else if (this.isClassProperty()) {
          if (isPrivate) {
            this.pushClassPrivateProperty(classBody, privateProp);
          } else {
            this.pushClassProperty(classBody, publicProp);
          }
        } else if (isContextual && key.name === "async" && !this.isLineTerminator()) {
          this.resetPreviousNodeTrailingComments(key);
          const isGenerator = this.eat(49);
          if (publicMember.optional) {
            this.unexpected(maybeQuestionTokenStart);
          }
          method.kind = "method";
          const isPrivate2 = this.match(128);
          this.parseClassElementName(method);
          this.parsePostMemberNameModifiers(publicMember);
          if (isPrivate2) {
            this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
          } else {
            if (this.isNonstaticConstructor(publicMethod)) {
              this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);
            }
            this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
          }
        } else if (isContextual && (key.name === "get" || key.name === "set") && !(this.match(49) && this.isLineTerminator())) {
          this.resetPreviousNodeTrailingComments(key);
          method.kind = key.name;
          const isPrivate2 = this.match(128);
          this.parseClassElementName(publicMethod);
          if (isPrivate2) {
            this.pushClassPrivateMethod(classBody, privateMethod, false, false);
          } else {
            if (this.isNonstaticConstructor(publicMethod)) {
              this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);
            }
            this.pushClassMethod(classBody, publicMethod, false, false, false, false);
          }
          this.checkGetterSetterParams(publicMethod);
        } else if (this.isLineTerminator()) {
          if (isPrivate) {
            this.pushClassPrivateProperty(classBody, privateProp);
          } else {
            this.pushClassProperty(classBody, publicProp);
          }
        } else {
          this.unexpected();
        }
      }
      parseClassElementName(member) {
        const {
          type,
          value,
          start
        } = this.state;
        if ((type === 122 || type === 123) && member.static && value === "prototype") {
          this.raise(start, ErrorMessages.StaticPrototype);
        }
        if (type === 128) {
          if (value === "constructor") {
            this.raise(start, ErrorMessages.ConstructorClassPrivateField);
          }
          const key = this.parsePrivateName();
          member.key = key;
          return key;
        }
        return this.parsePropertyName(member);
      }
      parseClassStaticBlock(classBody, member) {
        var _member$decorators;
        this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);
        const oldLabels = this.state.labels;
        this.state.labels = [];
        this.prodParam.enter(PARAM);
        const body = member.body = [];
        this.parseBlockOrModuleBlockBody(body, void 0, false, 8);
        this.prodParam.exit();
        this.scope.exit();
        this.state.labels = oldLabels;
        classBody.body.push(this.finishNode(member, "StaticBlock"));
        if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
          this.raise(member.start, ErrorMessages.DecoratorStaticBlock);
        }
      }
      pushClassProperty(classBody, prop) {
        if (!prop.computed && (prop.key.name === "constructor" || prop.key.value === "constructor")) {
          this.raise(prop.key.start, ErrorMessages.ConstructorClassField);
        }
        classBody.body.push(this.parseClassProperty(prop));
      }
      pushClassPrivateProperty(classBody, prop) {
        const node2 = this.parseClassPrivateProperty(prop);
        classBody.body.push(node2);
        this.classScope.declarePrivateName(this.getPrivateNameSV(node2.key), CLASS_ELEMENT_OTHER, node2.key.start);
      }
      pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
      }
      pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        const node2 = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
        classBody.body.push(node2);
        const kind = node2.kind === "get" ? node2.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node2.kind === "set" ? node2.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;
        this.declareClassPrivateMethodInScope(node2, kind);
      }
      declareClassPrivateMethodInScope(node2, kind) {
        this.classScope.declarePrivateName(this.getPrivateNameSV(node2.key), kind, node2.key.start);
      }
      parsePostMemberNameModifiers(methodOrProp) {
      }
      parseClassPrivateProperty(node2) {
        this.parseInitializer(node2);
        this.semicolon();
        return this.finishNode(node2, "ClassPrivateProperty");
      }
      parseClassProperty(node2) {
        this.parseInitializer(node2);
        this.semicolon();
        return this.finishNode(node2, "ClassProperty");
      }
      parseInitializer(node2) {
        this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);
        this.expressionScope.enter(newExpressionScope());
        this.prodParam.enter(PARAM);
        node2.value = this.eat(27) ? this.parseMaybeAssignAllowIn() : null;
        this.expressionScope.exit();
        this.prodParam.exit();
        this.scope.exit();
      }
      parseClassId(node2, isStatement, optionalId, bindingType = BIND_CLASS) {
        if (tokenIsIdentifier(this.state.type)) {
          node2.id = this.parseIdentifier();
          if (isStatement) {
            this.checkLVal(node2.id, "class name", bindingType);
          }
        } else {
          if (optionalId || !isStatement) {
            node2.id = null;
          } else {
            this.unexpected(null, ErrorMessages.MissingClassName);
          }
        }
      }
      parseClassSuper(node2) {
        node2.superClass = this.eat(75) ? this.parseExprSubscripts() : null;
      }
      parseExport(node2) {
        const hasDefault = this.maybeParseExportDefaultSpecifier(node2);
        const parseAfterDefault = !hasDefault || this.eat(12);
        const hasStar = parseAfterDefault && this.eatExportStar(node2);
        const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node2);
        const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));
        const isFromRequired = hasDefault || hasStar;
        if (hasStar && !hasNamespace) {
          if (hasDefault)
            this.unexpected();
          this.parseExportFrom(node2, true);
          return this.finishNode(node2, "ExportAllDeclaration");
        }
        const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node2);
        if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {
          throw this.unexpected(null, 5);
        }
        let hasDeclaration;
        if (isFromRequired || hasSpecifiers) {
          hasDeclaration = false;
          this.parseExportFrom(node2, isFromRequired);
        } else {
          hasDeclaration = this.maybeParseExportDeclaration(node2);
        }
        if (isFromRequired || hasSpecifiers || hasDeclaration) {
          this.checkExport(node2, true, false, !!node2.source);
          return this.finishNode(node2, "ExportNamedDeclaration");
        }
        if (this.eat(59)) {
          node2.declaration = this.parseExportDefaultExpression();
          this.checkExport(node2, true, true);
          return this.finishNode(node2, "ExportDefaultDeclaration");
        }
        throw this.unexpected(null, 5);
      }
      eatExportStar(node2) {
        return this.eat(49);
      }
      maybeParseExportDefaultSpecifier(node2) {
        if (this.isExportDefaultSpecifier()) {
          this.expectPlugin("exportDefaultFrom");
          const specifier = this.startNode();
          specifier.exported = this.parseIdentifier(true);
          node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
          return true;
        }
        return false;
      }
      maybeParseExportNamespaceSpecifier(node2) {
        if (this.isContextual(87)) {
          if (!node2.specifiers)
            node2.specifiers = [];
          const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);
          this.next();
          specifier.exported = this.parseModuleExportName();
          node2.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
          return true;
        }
        return false;
      }
      maybeParseExportNamedSpecifiers(node2) {
        if (this.match(5)) {
          if (!node2.specifiers)
            node2.specifiers = [];
          const isTypeExport = node2.exportKind === "type";
          node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));
          node2.source = null;
          node2.declaration = null;
          if (this.hasPlugin("importAssertions")) {
            node2.assertions = [];
          }
          return true;
        }
        return false;
      }
      maybeParseExportDeclaration(node2) {
        if (this.shouldParseExportDeclaration()) {
          node2.specifiers = [];
          node2.source = null;
          if (this.hasPlugin("importAssertions")) {
            node2.assertions = [];
          }
          node2.declaration = this.parseExportDeclaration(node2);
          return true;
        }
        return false;
      }
      isAsyncFunction() {
        if (!this.isContextual(89))
          return false;
        const next = this.nextTokenStart();
        return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, "function");
      }
      parseExportDefaultExpression() {
        const expr = this.startNode();
        const isAsync = this.isAsyncFunction();
        if (this.match(62) || isAsync) {
          this.next();
          if (isAsync) {
            this.next();
          }
          return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);
        } else if (this.match(74)) {
          return this.parseClass(expr, true, true);
        } else if (this.match(24)) {
          if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport")) {
            this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);
          }
          this.parseDecorators(false);
          return this.parseClass(expr, true, true);
        } else if (this.match(69) || this.match(68) || this.isLet()) {
          throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);
        } else {
          const res = this.parseMaybeAssignAllowIn();
          this.semicolon();
          return res;
        }
      }
      parseExportDeclaration(node2) {
        return this.parseStatement(null);
      }
      isExportDefaultSpecifier() {
        const {
          type
        } = this.state;
        if (tokenIsIdentifier(type)) {
          if (type === 89 && !this.state.containsEsc || type === 93) {
            return false;
          }
          if ((type === 120 || type === 119) && !this.state.containsEsc) {
            const {
              type: nextType
            } = this.lookahead();
            if (tokenIsIdentifier(nextType) && nextType !== 91 || nextType === 5) {
              this.expectOnePlugin(["flow", "typescript"]);
              return false;
            }
          }
        } else if (!this.match(59)) {
          return false;
        }
        const next = this.nextTokenStart();
        const hasFrom = this.isUnparsedContextual(next, "from");
        if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {
          return true;
        }
        if (this.match(59) && hasFrom) {
          const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
          return nextAfterFrom === 34 || nextAfterFrom === 39;
        }
        return false;
      }
      parseExportFrom(node2, expect) {
        if (this.eatContextual(91)) {
          node2.source = this.parseImportSource();
          this.checkExport(node2);
          const assertions = this.maybeParseImportAssertions();
          if (assertions) {
            node2.assertions = assertions;
          }
        } else if (expect) {
          this.unexpected();
        }
        this.semicolon();
      }
      shouldParseExportDeclaration() {
        const {
          type
        } = this.state;
        if (type === 24) {
          this.expectOnePlugin(["decorators", "decorators-legacy"]);
          if (this.hasPlugin("decorators")) {
            if (this.getPluginOption("decorators", "decoratorsBeforeExport")) {
              this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);
            } else {
              return true;
            }
          }
        }
        return type === 68 || type === 69 || type === 62 || type === 74 || this.isLet() || this.isAsyncFunction();
      }
      checkExport(node2, checkNames, isDefault, isFrom) {
        if (checkNames) {
          if (isDefault) {
            this.checkDuplicateExports(node2, "default");
            if (this.hasPlugin("exportDefaultFrom")) {
              var _declaration$extra;
              const declaration2 = node2.declaration;
              if (declaration2.type === "Identifier" && declaration2.name === "from" && declaration2.end - declaration2.start === 4 && !((_declaration$extra = declaration2.extra) != null && _declaration$extra.parenthesized)) {
                this.raise(declaration2.start, ErrorMessages.ExportDefaultFromAsIdentifier);
              }
            }
          } else if (node2.specifiers && node2.specifiers.length) {
            for (const specifier of node2.specifiers) {
              const {
                exported
              } = specifier;
              const exportedName = exported.type === "Identifier" ? exported.name : exported.value;
              this.checkDuplicateExports(specifier, exportedName);
              if (!isFrom && specifier.local) {
                const {
                  local
                } = specifier;
                if (local.type !== "Identifier") {
                  this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);
                } else {
                  this.checkReservedWord(local.name, local.start, true, false);
                  this.scope.checkLocalExport(local);
                }
              }
            }
          } else if (node2.declaration) {
            if (node2.declaration.type === "FunctionDeclaration" || node2.declaration.type === "ClassDeclaration") {
              const id2 = node2.declaration.id;
              if (!id2)
                throw new Error("Assertion failure");
              this.checkDuplicateExports(node2, id2.name);
            } else if (node2.declaration.type === "VariableDeclaration") {
              for (const declaration2 of node2.declaration.declarations) {
                this.checkDeclaration(declaration2.id);
              }
            }
          }
        }
        const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        if (currentContextDecorators.length) {
          throw this.raise(node2.start, ErrorMessages.UnsupportedDecoratorExport);
        }
      }
      checkDeclaration(node2) {
        if (node2.type === "Identifier") {
          this.checkDuplicateExports(node2, node2.name);
        } else if (node2.type === "ObjectPattern") {
          for (const prop of node2.properties) {
            this.checkDeclaration(prop);
          }
        } else if (node2.type === "ArrayPattern") {
          for (const elem of node2.elements) {
            if (elem) {
              this.checkDeclaration(elem);
            }
          }
        } else if (node2.type === "ObjectProperty") {
          this.checkDeclaration(node2.value);
        } else if (node2.type === "RestElement") {
          this.checkDeclaration(node2.argument);
        } else if (node2.type === "AssignmentPattern") {
          this.checkDeclaration(node2.left);
        }
      }
      checkDuplicateExports(node2, name) {
        if (this.exportedIdentifiers.has(name)) {
          this.raise(node2.start, name === "default" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);
        }
        this.exportedIdentifiers.add(name);
      }
      parseExportSpecifiers(isInTypeExport) {
        const nodes = [];
        let first = true;
        this.expect(5);
        while (!this.eat(8)) {
          if (first) {
            first = false;
          } else {
            this.expect(12);
            if (this.eat(8))
              break;
          }
          const isMaybeTypeOnly = this.isContextual(120);
          const isString2 = this.match(123);
          const node2 = this.startNode();
          node2.local = this.parseModuleExportName();
          nodes.push(this.parseExportSpecifier(node2, isString2, isInTypeExport, isMaybeTypeOnly));
        }
        return nodes;
      }
      parseExportSpecifier(node2, isString2, isInTypeExport, isMaybeTypeOnly) {
        if (this.eatContextual(87)) {
          node2.exported = this.parseModuleExportName();
        } else if (isString2) {
          node2.exported = cloneStringLiteral(node2.local);
        } else if (!node2.exported) {
          node2.exported = cloneIdentifier(node2.local);
        }
        return this.finishNode(node2, "ExportSpecifier");
      }
      parseModuleExportName() {
        if (this.match(123)) {
          const result2 = this.parseStringLiteral(this.state.value);
          const surrogate = result2.value.match(loneSurrogate);
          if (surrogate) {
            this.raise(result2.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));
          }
          return result2;
        }
        return this.parseIdentifier(true);
      }
      parseImport(node2) {
        node2.specifiers = [];
        if (!this.match(123)) {
          const hasDefault = this.maybeParseDefaultImportSpecifier(node2);
          const parseNext = !hasDefault || this.eat(12);
          const hasStar = parseNext && this.maybeParseStarImportSpecifier(node2);
          if (parseNext && !hasStar)
            this.parseNamedImportSpecifiers(node2);
          this.expectContextual(91);
        }
        node2.source = this.parseImportSource();
        const assertions = this.maybeParseImportAssertions();
        if (assertions) {
          node2.assertions = assertions;
        } else {
          const attributes = this.maybeParseModuleAttributes();
          if (attributes) {
            node2.attributes = attributes;
          }
        }
        this.semicolon();
        return this.finishNode(node2, "ImportDeclaration");
      }
      parseImportSource() {
        if (!this.match(123))
          this.unexpected();
        return this.parseExprAtom();
      }
      shouldParseDefaultImport(node2) {
        return tokenIsIdentifier(this.state.type);
      }
      parseImportSpecifierLocal(node2, specifier, type, contextDescription) {
        specifier.local = this.parseIdentifier();
        this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);
        node2.specifiers.push(this.finishNode(specifier, type));
      }
      parseAssertEntries() {
        const attrs = [];
        const attrNames = /* @__PURE__ */ new Set();
        do {
          if (this.match(8)) {
            break;
          }
          const node2 = this.startNode();
          const keyName = this.state.value;
          if (attrNames.has(keyName)) {
            this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);
          }
          attrNames.add(keyName);
          if (this.match(123)) {
            node2.key = this.parseStringLiteral(keyName);
          } else {
            node2.key = this.parseIdentifier(true);
          }
          this.expect(14);
          if (!this.match(123)) {
            throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);
          }
          node2.value = this.parseStringLiteral(this.state.value);
          this.finishNode(node2, "ImportAttribute");
          attrs.push(node2);
        } while (this.eat(12));
        return attrs;
      }
      maybeParseModuleAttributes() {
        if (this.match(70) && !this.hasPrecedingLineBreak()) {
          this.expectPlugin("moduleAttributes");
          this.next();
        } else {
          if (this.hasPlugin("moduleAttributes"))
            return [];
          return null;
        }
        const attrs = [];
        const attributes = /* @__PURE__ */ new Set();
        do {
          const node2 = this.startNode();
          node2.key = this.parseIdentifier(true);
          if (node2.key.name !== "type") {
            this.raise(node2.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node2.key.name);
          }
          if (attributes.has(node2.key.name)) {
            this.raise(node2.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node2.key.name);
          }
          attributes.add(node2.key.name);
          this.expect(14);
          if (!this.match(123)) {
            throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);
          }
          node2.value = this.parseStringLiteral(this.state.value);
          this.finishNode(node2, "ImportAttribute");
          attrs.push(node2);
        } while (this.eat(12));
        return attrs;
      }
      maybeParseImportAssertions() {
        if (this.isContextual(88) && !this.hasPrecedingLineBreak()) {
          this.expectPlugin("importAssertions");
          this.next();
        } else {
          if (this.hasPlugin("importAssertions"))
            return [];
          return null;
        }
        this.eat(5);
        const attrs = this.parseAssertEntries();
        this.eat(8);
        return attrs;
      }
      maybeParseDefaultImportSpecifier(node2) {
        if (this.shouldParseDefaultImport(node2)) {
          this.parseImportSpecifierLocal(node2, this.startNode(), "ImportDefaultSpecifier", "default import specifier");
          return true;
        }
        return false;
      }
      maybeParseStarImportSpecifier(node2) {
        if (this.match(49)) {
          const specifier = this.startNode();
          this.next();
          this.expectContextual(87);
          this.parseImportSpecifierLocal(node2, specifier, "ImportNamespaceSpecifier", "import namespace specifier");
          return true;
        }
        return false;
      }
      parseNamedImportSpecifiers(node2) {
        let first = true;
        this.expect(5);
        while (!this.eat(8)) {
          if (first) {
            first = false;
          } else {
            if (this.eat(14)) {
              throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);
            }
            this.expect(12);
            if (this.eat(8))
              break;
          }
          const specifier = this.startNode();
          const importedIsString = this.match(123);
          const isMaybeTypeOnly = this.isContextual(120);
          specifier.imported = this.parseModuleExportName();
          const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node2.importKind === "type" || node2.importKind === "typeof", isMaybeTypeOnly);
          node2.specifiers.push(importSpecifier);
        }
      }
      parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
        if (this.eatContextual(87)) {
          specifier.local = this.parseIdentifier();
        } else {
          const {
            imported
          } = specifier;
          if (importedIsString) {
            throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);
          }
          this.checkReservedWord(imported.name, specifier.start, true, true);
          if (!specifier.local) {
            specifier.local = cloneIdentifier(imported);
          }
        }
        this.checkLVal(specifier.local, "import specifier", BIND_LEXICAL);
        return this.finishNode(specifier, "ImportSpecifier");
      }
      isThisParam(param) {
        return param.type === "Identifier" && param.name === "this";
      }
    };
    Parser = class extends StatementParser {
      constructor(options, input2) {
        options = getOptions(options);
        super(options, input2);
        this.options = options;
        this.initializeScopes();
        this.plugins = pluginsMap(this.options.plugins);
        this.filename = options.sourceFilename;
      }
      getScopeHandler() {
        return ScopeHandler;
      }
      parse() {
        this.enterInitialScopes();
        const file = this.startNode();
        const program = this.startNode();
        this.nextToken();
        file.errors = null;
        this.parseTopLevel(file, program);
        file.errors = this.state.errors;
        return file;
      }
    };
    tokTypes = generateExportedTokenTypes(tt);
    parserClassCache = {};
    parse_1 = parse;
    parseExpression_1 = parseExpression;
    isStaticExp = (p) => p.type === 4 && p.isStatic;
    isBuiltInType = (tag2, expected) => tag2 === expected || tag2 === hyphenate(expected);
    nonIdentifierRE = /^\d|[^\$\w]/;
    isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);
    validFirstIdentCharRE = /[A-Za-z_$\xA0-\uFFFF]/;
    validIdentCharRE = /[\.\?\w$\xA0-\uFFFF]/;
    whitespaceRE = /\s+[.[]\s*|\s*[.[]\s+/g;
    isMemberExpressionBrowser = (path3) => {
      path3 = path3.trim().replace(whitespaceRE, (s) => s.trim());
      let state = 0;
      let stateStack = [];
      let currentOpenBracketCount = 0;
      let currentOpenParensCount = 0;
      let currentStringType = null;
      for (let i = 0; i < path3.length; i++) {
        const char = path3.charAt(i);
        switch (state) {
          case 0:
            if (char === "[") {
              stateStack.push(state);
              state = 1;
              currentOpenBracketCount++;
            } else if (char === "(") {
              stateStack.push(state);
              state = 2;
              currentOpenParensCount++;
            } else if (!(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) {
              return false;
            }
            break;
          case 1:
            if (char === `'` || char === `"` || char === "`") {
              stateStack.push(state);
              state = 3;
              currentStringType = char;
            } else if (char === `[`) {
              currentOpenBracketCount++;
            } else if (char === `]`) {
              if (!--currentOpenBracketCount) {
                state = stateStack.pop();
              }
            }
            break;
          case 2:
            if (char === `'` || char === `"` || char === "`") {
              stateStack.push(state);
              state = 3;
              currentStringType = char;
            } else if (char === `(`) {
              currentOpenParensCount++;
            } else if (char === `)`) {
              if (i === path3.length - 1) {
                return false;
              }
              if (!--currentOpenParensCount) {
                state = stateStack.pop();
              }
            }
            break;
          case 3:
            if (char === currentStringType) {
              state = stateStack.pop();
              currentStringType = null;
            }
            break;
        }
      }
      return !currentOpenBracketCount && !currentOpenParensCount;
    };
    isMemberExpressionNode = (path3, context) => {
      try {
        let ret = parseExpression_1(path3, {
          plugins: context.expressionPlugins
        });
        if (ret.type === "TSAsExpression" || ret.type === "TSTypeAssertion") {
          ret = ret.expression;
        }
        return ret.type === "MemberExpression" || ret.type === "OptionalMemberExpression" || ret.type === "Identifier";
      } catch (e) {
        return false;
      }
    };
    isMemberExpression = isMemberExpressionNode;
    propsHelperSet = /* @__PURE__ */ new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);
    deprecationData = {
      ["COMPILER_IS_ON_ELEMENT"]: {
        message: `Platform-native elements with "is" prop will no longer be treated as components in Vue 3 unless the "is" value is explicitly prefixed with "vue:".`,
        link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`
      },
      ["COMPILER_V_BIND_SYNC"]: {
        message: (key) => `.sync modifier for v-bind has been removed. Use v-model with argument instead. \`v-bind:${key}.sync\` should be changed to \`v-model:${key}\`.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`
      },
      ["COMPILER_V_BIND_PROP"]: {
        message: `.prop modifier for v-bind has been removed and no longer necessary. Vue 3 will automatically set a binding as DOM property when appropriate.`
      },
      ["COMPILER_V_BIND_OBJECT_ORDER"]: {
        message: `v-bind="obj" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`
      },
      ["COMPILER_V_ON_NATIVE"]: {
        message: `.native modifier for v-on has been removed as is no longer necessary.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`
      },
      ["COMPILER_V_IF_V_FOR_PRECEDENCE"]: {
        message: `v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`
      },
      ["COMPILER_NATIVE_TEMPLATE"]: {
        message: `<template> with no special directives will render as a native template element instead of its inner content in Vue 3.`
      },
      ["COMPILER_INLINE_TEMPLATE"]: {
        message: `"inline-template" has been removed in Vue 3.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`
      },
      ["COMPILER_FILTER"]: {
        message: `filters have been removed in Vue 3. The "|" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`
      }
    };
    decodeRE = /&(gt|lt|amp|apos|quot);/g;
    decodeMap = {
      gt: ">",
      lt: "<",
      amp: "&",
      apos: "'",
      quot: '"'
    };
    defaultParserOptions = {
      delimiters: [`{{`, `}}`],
      getNamespace: () => 0,
      getTextMode: () => 0,
      isVoidTag: NO,
      isPreTag: NO,
      isCustomElement: NO,
      decodeEntities: (rawText) => rawText.replace(decodeRE, (_, p1) => decodeMap[p1]),
      onError: defaultOnError,
      onWarn: defaultOnWarn,
      comments: true
    };
    isSpecialTemplateDirective = /* @__PURE__ */ makeMap(`if,else,else-if,for,slot`);
    allowHoistedHelperSet = /* @__PURE__ */ new Set([
      NORMALIZE_CLASS,
      NORMALIZE_STYLE,
      NORMALIZE_PROPS,
      GUARD_REACTIVE_PROPS
    ]);
    intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
    encode = function(number) {
      if (0 <= number && number < intToCharMap.length) {
        return intToCharMap[number];
      }
      throw new TypeError("Must be between 0 and 63: " + number);
    };
    decode = function(charCode) {
      var bigA = 65;
      var bigZ = 90;
      var littleA = 97;
      var littleZ = 122;
      var zero = 48;
      var nine = 57;
      var plus = 43;
      var slash = 47;
      var littleOffset = 26;
      var numberOffset = 52;
      if (bigA <= charCode && charCode <= bigZ) {
        return charCode - bigA;
      }
      if (littleA <= charCode && charCode <= littleZ) {
        return charCode - littleA + littleOffset;
      }
      if (zero <= charCode && charCode <= nine) {
        return charCode - zero + numberOffset;
      }
      if (charCode == plus) {
        return 62;
      }
      if (charCode == slash) {
        return 63;
      }
      return -1;
    };
    base64 = {
      encode,
      decode
    };
    VLQ_BASE_SHIFT = 5;
    VLQ_BASE = 1 << VLQ_BASE_SHIFT;
    VLQ_BASE_MASK = VLQ_BASE - 1;
    VLQ_CONTINUATION_BIT = VLQ_BASE;
    encode$1 = function base64VLQ_encode(aValue) {
      var encoded = "";
      var digit;
      var vlq = toVLQSigned(aValue);
      do {
        digit = vlq & VLQ_BASE_MASK;
        vlq >>>= VLQ_BASE_SHIFT;
        if (vlq > 0) {
          digit |= VLQ_CONTINUATION_BIT;
        }
        encoded += base64.encode(digit);
      } while (vlq > 0);
      return encoded;
    };
    decode$1 = function base64VLQ_decode(aStr, aIndex, aOutParam) {
      var strLen = aStr.length;
      var result2 = 0;
      var shift = 0;
      var continuation, digit;
      do {
        if (aIndex >= strLen) {
          throw new Error("Expected more digits in base 64 VLQ value.");
        }
        digit = base64.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
          throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        }
        continuation = !!(digit & VLQ_CONTINUATION_BIT);
        digit &= VLQ_BASE_MASK;
        result2 = result2 + (digit << shift);
        shift += VLQ_BASE_SHIFT;
      } while (continuation);
      aOutParam.value = fromVLQSigned(result2);
      aOutParam.rest = aIndex;
    };
    base64Vlq = {
      encode: encode$1,
      decode: decode$1
    };
    util = createCommonjsModule(function(module2, exports2) {
      function getArg(aArgs, aName, aDefaultValue) {
        if (aName in aArgs) {
          return aArgs[aName];
        } else if (arguments.length === 3) {
          return aDefaultValue;
        } else {
          throw new Error('"' + aName + '" is a required argument.');
        }
      }
      exports2.getArg = getArg;
      var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
      var dataUrlRegexp = /^data:.+\,.+$/;
      function urlParse2(aUrl) {
        var match = aUrl.match(urlRegexp);
        if (!match) {
          return null;
        }
        return {
          scheme: match[1],
          auth: match[2],
          host: match[3],
          port: match[4],
          path: match[5]
        };
      }
      exports2.urlParse = urlParse2;
      function urlGenerate(aParsedUrl) {
        var url = "";
        if (aParsedUrl.scheme) {
          url += aParsedUrl.scheme + ":";
        }
        url += "//";
        if (aParsedUrl.auth) {
          url += aParsedUrl.auth + "@";
        }
        if (aParsedUrl.host) {
          url += aParsedUrl.host;
        }
        if (aParsedUrl.port) {
          url += ":" + aParsedUrl.port;
        }
        if (aParsedUrl.path) {
          url += aParsedUrl.path;
        }
        return url;
      }
      exports2.urlGenerate = urlGenerate;
      function normalize2(aPath) {
        var path3 = aPath;
        var url = urlParse2(aPath);
        if (url) {
          if (!url.path) {
            return aPath;
          }
          path3 = url.path;
        }
        var isAbsolute2 = exports2.isAbsolute(path3);
        var parts = path3.split(/\/+/);
        for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
          part = parts[i];
          if (part === ".") {
            parts.splice(i, 1);
          } else if (part === "..") {
            up++;
          } else if (up > 0) {
            if (part === "") {
              parts.splice(i + 1, up);
              up = 0;
            } else {
              parts.splice(i, 2);
              up--;
            }
          }
        }
        path3 = parts.join("/");
        if (path3 === "") {
          path3 = isAbsolute2 ? "/" : ".";
        }
        if (url) {
          url.path = path3;
          return urlGenerate(url);
        }
        return path3;
      }
      exports2.normalize = normalize2;
      function join2(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = ".";
        }
        if (aPath === "") {
          aPath = ".";
        }
        var aPathUrl = urlParse2(aPath);
        var aRootUrl = urlParse2(aRoot);
        if (aRootUrl) {
          aRoot = aRootUrl.path || "/";
        }
        if (aPathUrl && !aPathUrl.scheme) {
          if (aRootUrl) {
            aPathUrl.scheme = aRootUrl.scheme;
          }
          return urlGenerate(aPathUrl);
        }
        if (aPathUrl || aPath.match(dataUrlRegexp)) {
          return aPath;
        }
        if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
          aRootUrl.host = aPath;
          return urlGenerate(aRootUrl);
        }
        var joined = aPath.charAt(0) === "/" ? aPath : normalize2(aRoot.replace(/\/+$/, "") + "/" + aPath);
        if (aRootUrl) {
          aRootUrl.path = joined;
          return urlGenerate(aRootUrl);
        }
        return joined;
      }
      exports2.join = join2;
      exports2.isAbsolute = function(aPath) {
        return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
      };
      function relative2(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = ".";
        }
        aRoot = aRoot.replace(/\/$/, "");
        var level = 0;
        while (aPath.indexOf(aRoot + "/") !== 0) {
          var index = aRoot.lastIndexOf("/");
          if (index < 0) {
            return aPath;
          }
          aRoot = aRoot.slice(0, index);
          if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
            return aPath;
          }
          ++level;
        }
        return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
      }
      exports2.relative = relative2;
      var supportsNullProto = function() {
        var obj = /* @__PURE__ */ Object.create(null);
        return !("__proto__" in obj);
      }();
      function identity(s) {
        return s;
      }
      function toSetString(aStr) {
        if (isProtoString(aStr)) {
          return "$" + aStr;
        }
        return aStr;
      }
      exports2.toSetString = supportsNullProto ? identity : toSetString;
      function fromSetString(aStr) {
        if (isProtoString(aStr)) {
          return aStr.slice(1);
        }
        return aStr;
      }
      exports2.fromSetString = supportsNullProto ? identity : fromSetString;
      function isProtoString(s) {
        if (!s) {
          return false;
        }
        var length2 = s.length;
        if (length2 < 9) {
          return false;
        }
        if (s.charCodeAt(length2 - 1) !== 95 || s.charCodeAt(length2 - 2) !== 95 || s.charCodeAt(length2 - 3) !== 111 || s.charCodeAt(length2 - 4) !== 116 || s.charCodeAt(length2 - 5) !== 111 || s.charCodeAt(length2 - 6) !== 114 || s.charCodeAt(length2 - 7) !== 112 || s.charCodeAt(length2 - 8) !== 95 || s.charCodeAt(length2 - 9) !== 95) {
          return false;
        }
        for (var i = length2 - 10; i >= 0; i--) {
          if (s.charCodeAt(i) !== 36) {
            return false;
          }
        }
        return true;
      }
      function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
        var cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0 || onlyCompareOriginal) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports2.compareByOriginalPositions = compareByOriginalPositions;
      function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0 || onlyCompareGenerated) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports2.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
      function strcmp(aStr1, aStr2) {
        if (aStr1 === aStr2) {
          return 0;
        }
        if (aStr1 === null) {
          return 1;
        }
        if (aStr2 === null) {
          return -1;
        }
        if (aStr1 > aStr2) {
          return 1;
        }
        return -1;
      }
      function compareByGeneratedPositionsInflated(mappingA, mappingB) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports2.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
      function parseSourceMapInput(str) {
        return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
      }
      exports2.parseSourceMapInput = parseSourceMapInput;
      function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
        sourceURL = sourceURL || "";
        if (sourceRoot) {
          if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
            sourceRoot += "/";
          }
          sourceURL = sourceRoot + sourceURL;
        }
        if (sourceMapURL) {
          var parsed = urlParse2(sourceMapURL);
          if (!parsed) {
            throw new Error("sourceMapURL could not be parsed");
          }
          if (parsed.path) {
            var index = parsed.path.lastIndexOf("/");
            if (index >= 0) {
              parsed.path = parsed.path.substring(0, index + 1);
            }
          }
          sourceURL = join2(urlGenerate(parsed), sourceURL);
        }
        return normalize2(sourceURL);
      }
      exports2.computeSourceURL = computeSourceURL;
    });
    has = Object.prototype.hasOwnProperty;
    hasNativeMap = typeof Map !== "undefined";
    ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
      var set = new ArraySet();
      for (var i = 0, len = aArray.length; i < len; i++) {
        set.add(aArray[i], aAllowDuplicates);
      }
      return set;
    };
    ArraySet.prototype.size = function ArraySet_size() {
      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    };
    ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
      var idx = this._array.length;
      if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
      }
      if (!isDuplicate) {
        if (hasNativeMap) {
          this._set.set(aStr, idx);
        } else {
          this._set[sStr] = idx;
        }
      }
    };
    ArraySet.prototype.has = function ArraySet_has(aStr) {
      if (hasNativeMap) {
        return this._set.has(aStr);
      } else {
        var sStr = util.toSetString(aStr);
        return has.call(this._set, sStr);
      }
    };
    ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
      if (hasNativeMap) {
        var idx = this._set.get(aStr);
        if (idx >= 0) {
          return idx;
        }
      } else {
        var sStr = util.toSetString(aStr);
        if (has.call(this._set, sStr)) {
          return this._set[sStr];
        }
      }
      throw new Error('"' + aStr + '" is not in the set.');
    };
    ArraySet.prototype.at = function ArraySet_at(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
      }
      throw new Error("No element indexed by " + aIdx);
    };
    ArraySet.prototype.toArray = function ArraySet_toArray() {
      return this._array.slice();
    };
    ArraySet_1 = ArraySet;
    arraySet = {
      ArraySet: ArraySet_1
    };
    MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };
    MappingList.prototype.add = function MappingList_add(aMapping) {
      if (generatedPositionAfter(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
      } else {
        this._sorted = false;
        this._array.push(aMapping);
      }
    };
    MappingList.prototype.toArray = function MappingList_toArray() {
      if (!this._sorted) {
        this._array.sort(util.compareByGeneratedPositionsInflated);
        this._sorted = true;
      }
      return this._array;
    };
    MappingList_1 = MappingList;
    mappingList = {
      MappingList: MappingList_1
    };
    ArraySet$1 = arraySet.ArraySet;
    MappingList$1 = mappingList.MappingList;
    SourceMapGenerator.prototype._version = 3;
    SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot
      });
      aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };
        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }
          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };
          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }
        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var sourceRelative = sourceFile;
        if (sourceRoot !== null) {
          sourceRelative = util.relative(sourceRoot, sourceFile);
        }
        if (!generator._sources.has(sourceRelative)) {
          generator._sources.add(sourceRelative);
        }
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };
    SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, "generated");
      var original = util.getArg(aArgs, "original", null);
      var source = util.getArg(aArgs, "source", null);
      var name = util.getArg(aArgs, "name", null);
      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }
      if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
          this._sources.add(source);
        }
      }
      if (name != null) {
        name = String(name);
        if (!this._names.has(name)) {
          this._names.add(name);
        }
      }
      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source,
        name
      });
    };
    SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }
      if (aSourceContent != null) {
        if (!this._sourcesContents) {
          this._sourcesContents = /* @__PURE__ */ Object.create(null);
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };
    SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(`SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`);
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      var newSources = new ArraySet$1();
      var newNames = new ArraySet$1();
      this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source);
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }
        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }
        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }
      }, this);
      this._sources = newSources;
      this._names = newNames;
      aSourceMapConsumer.sources.forEach(function(sourceFile2) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile2 = util.join(aSourceMapPath, sourceFile2);
          }
          if (sourceRoot != null) {
            sourceFile2 = util.relative(sourceRoot, sourceFile2);
          }
          this.setSourceContent(sourceFile2, content);
        }
      }, this);
    };
    SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
      if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
        throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
      }
      if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
        return;
      } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
        return;
      } else {
        throw new Error("Invalid mapping: " + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };
    SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result2 = "";
      var next;
      var mapping;
      var nameIdx;
      var sourceIdx;
      var mappings = this._mappings.toArray();
      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];
        next = "";
        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            next += ";";
            previousGeneratedLine++;
          }
        } else {
          if (i > 0) {
            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            next += ",";
          }
        }
        next += base64Vlq.encode(mapping.generatedColumn - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;
        if (mapping.source != null) {
          sourceIdx = this._sources.indexOf(mapping.source);
          next += base64Vlq.encode(sourceIdx - previousSource);
          previousSource = sourceIdx;
          next += base64Vlq.encode(mapping.originalLine - 1 - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;
          next += base64Vlq.encode(mapping.originalColumn - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;
          if (mapping.name != null) {
            nameIdx = this._names.indexOf(mapping.name);
            next += base64Vlq.encode(nameIdx - previousName);
            previousName = nameIdx;
          }
        }
        result2 += next;
      }
      return result2;
    };
    SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function(source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
      }, this);
    };
    SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
      var map2 = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map2.file = this._file;
      }
      if (this._sourceRoot != null) {
        map2.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map2.sourcesContent = this._generateSourcesContent(map2.sources, map2.sourceRoot);
      }
      return map2;
    };
    SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
      return JSON.stringify(this.toJSON());
    };
    SourceMapGenerator_1 = SourceMapGenerator;
    sourceMapGenerator = {
      SourceMapGenerator: SourceMapGenerator_1
    };
    binarySearch = createCommonjsModule(function(module2, exports2) {
      exports2.GREATEST_LOWER_BOUND = 1;
      exports2.LEAST_UPPER_BOUND = 2;
      function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
        var mid = Math.floor((aHigh - aLow) / 2) + aLow;
        var cmp = aCompare(aNeedle, aHaystack[mid], true);
        if (cmp === 0) {
          return mid;
        } else if (cmp > 0) {
          if (aHigh - mid > 1) {
            return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
          }
          if (aBias == exports2.LEAST_UPPER_BOUND) {
            return aHigh < aHaystack.length ? aHigh : -1;
          } else {
            return mid;
          }
        } else {
          if (mid - aLow > 1) {
            return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
          }
          if (aBias == exports2.LEAST_UPPER_BOUND) {
            return mid;
          } else {
            return aLow < 0 ? -1 : aLow;
          }
        }
      }
      exports2.search = function search(aNeedle, aHaystack, aCompare, aBias) {
        if (aHaystack.length === 0) {
          return -1;
        }
        var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports2.GREATEST_LOWER_BOUND);
        if (index < 0) {
          return -1;
        }
        while (index - 1 >= 0) {
          if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
            break;
          }
          --index;
        }
        return index;
      };
    });
    quickSort_1 = function(ary, comparator) {
      doQuickSort(ary, comparator, 0, ary.length - 1);
    };
    quickSort = {
      quickSort: quickSort_1
    };
    ArraySet$2 = arraySet.ArraySet;
    quickSort$1 = quickSort.quickSort;
    SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
    };
    SourceMapConsumer.prototype._version = 3;
    SourceMapConsumer.prototype.__generatedMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
      configurable: true,
      enumerable: true,
      get: function() {
        if (!this.__generatedMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__generatedMappings;
      }
    });
    SourceMapConsumer.prototype.__originalMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
      configurable: true,
      enumerable: true,
      get: function() {
        if (!this.__originalMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__originalMappings;
      }
    });
    SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
      var c = aStr.charAt(index);
      return c === ";" || c === ",";
    };
    SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    };
    SourceMapConsumer.GENERATED_ORDER = 1;
    SourceMapConsumer.ORIGINAL_ORDER = 2;
    SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
    SourceMapConsumer.LEAST_UPPER_BOUND = 2;
    SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
      var mappings;
      switch (order) {
        case SourceMapConsumer.GENERATED_ORDER:
          mappings = this._generatedMappings;
          break;
        case SourceMapConsumer.ORIGINAL_ORDER:
          mappings = this._originalMappings;
          break;
        default:
          throw new Error("Unknown order of iteration.");
      }
      var sourceRoot = this.sourceRoot;
      mappings.map(function(mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
        return {
          source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    };
    SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      var line = util.getArg(aArgs, "line");
      var needle = {
        source: util.getArg(aArgs, "source"),
        originalLine: line,
        originalColumn: util.getArg(aArgs, "column", 0)
      };
      needle.source = this._findSourceIndex(needle.source);
      if (needle.source < 0) {
        return [];
      }
      var mappings = [];
      var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (aArgs.column === void 0) {
          var originalLine = mapping.originalLine;
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util.getArg(mapping, "generatedLine", null),
              column: util.getArg(mapping, "generatedColumn", null),
              lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index];
          }
        } else {
          var originalColumn = mapping.originalColumn;
          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util.getArg(mapping, "generatedLine", null),
              column: util.getArg(mapping, "generatedColumn", null),
              lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index];
          }
        }
      }
      return mappings;
    };
    SourceMapConsumer_1 = SourceMapConsumer;
    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util.relative(this.sourceRoot, relativeSource);
      }
      if (this._sources.has(relativeSource)) {
        return this._sources.indexOf(relativeSource);
      }
      var i;
      for (i = 0; i < this._absoluteSources.length; ++i) {
        if (this._absoluteSources[i] == aSource) {
          return i;
        }
      }
      return -1;
    };
    BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
      var smc = Object.create(BasicSourceMapConsumer.prototype);
      var names = smc._names = ArraySet$2.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet$2.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
      smc.file = aSourceMap._file;
      smc._sourceMapURL = aSourceMapURL;
      smc._absoluteSources = smc._sources.toArray().map(function(s) {
        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
      });
      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];
      for (var i = 0, length2 = generatedMappings.length; i < length2; i++) {
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping();
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;
        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;
          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }
          destOriginalMappings.push(destMapping);
        }
        destGeneratedMappings.push(destMapping);
      }
      quickSort$1(smc.__originalMappings, util.compareByOriginalPositions);
      return smc;
    };
    BasicSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
      get: function() {
        return this._absoluteSources.slice();
      }
    });
    BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings2(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length2 = aStr.length;
      var index = 0;
      var cachedSegments = {};
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping, str, segment, end, value;
      while (index < length2) {
        if (aStr.charAt(index) === ";") {
          generatedLine++;
          index++;
          previousGeneratedColumn = 0;
        } else if (aStr.charAt(index) === ",") {
          index++;
        } else {
          mapping = new Mapping();
          mapping.generatedLine = generatedLine;
          for (end = index; end < length2; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          str = aStr.slice(index, end);
          segment = cachedSegments[str];
          if (segment) {
            index += str.length;
          } else {
            segment = [];
            while (index < end) {
              base64Vlq.decode(aStr, index, temp);
              value = temp.value;
              index = temp.rest;
              segment.push(value);
            }
            if (segment.length === 2) {
              throw new Error("Found a source, but no line and column");
            }
            if (segment.length === 3) {
              throw new Error("Found a source and line, but no column");
            }
            cachedSegments[str] = segment;
          }
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;
          if (segment.length > 1) {
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            mapping.originalLine += 1;
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;
            if (segment.length > 4) {
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }
          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === "number") {
            originalMappings.push(mapping);
          }
        }
      }
      quickSort$1(generatedMappings, util.compareByGeneratedPositionsDeflated);
      this.__generatedMappings = generatedMappings;
      quickSort$1(originalMappings, util.compareByOriginalPositions);
      this.__originalMappings = originalMappings;
    };
    BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
      if (aNeedle[aLineName] <= 0) {
        throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
      }
      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };
    BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];
          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }
        mapping.lastGeneratedColumn = Infinity;
      }
    };
    BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, "line"),
        generatedColumn: util.getArg(aArgs, "column")
      };
      var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND));
      if (index >= 0) {
        var mapping = this._generatedMappings[index];
        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, "source", null);
          if (source !== null) {
            source = this._sources.at(source);
            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
          }
          var name = util.getArg(mapping, "name", null);
          if (name !== null) {
            name = this._names.at(name);
          }
          return {
            source,
            line: util.getArg(mapping, "originalLine", null),
            column: util.getArg(mapping, "originalColumn", null),
            name
          };
        }
      }
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };
    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
        return sc == null;
      });
    };
    BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }
      var index = this._findSourceIndex(aSource);
      if (index >= 0) {
        return this.sourcesContent[index];
      }
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util.relative(this.sourceRoot, relativeSource);
      }
      var url;
      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
        var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
        if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
        }
        if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + relativeSource + '" is not in the SourceMap.');
      }
    };
    BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
      var source = util.getArg(aArgs, "source");
      source = this._findSourceIndex(source);
      if (source < 0) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }
      var needle = {
        source,
        originalLine: util.getArg(aArgs, "line"),
        originalColumn: util.getArg(aArgs, "column")
      };
      var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND));
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (mapping.source === needle.source) {
          return {
            line: util.getArg(mapping, "generatedLine", null),
            column: util.getArg(mapping, "generatedColumn", null),
            lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
          };
        }
      }
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };
    BasicSourceMapConsumer_1 = BasicSourceMapConsumer;
    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
    IndexedSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
      get: function() {
        var sources = [];
        for (var i = 0; i < this._sections.length; i++) {
          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
            sources.push(this._sections[i].consumer.sources[j]);
          }
        }
        return sources;
      }
    });
    IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, "line"),
        generatedColumn: util.getArg(aArgs, "column")
      };
      var sectionIndex = binarySearch.search(needle, this._sections, function(needle2, section2) {
        var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }
        return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
      });
      var section = this._sections[sectionIndex];
      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }
      return section.consumer.originalPositionFor({
        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        bias: aArgs.bias
      });
    };
    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
      return this._sections.every(function(s) {
        return s.consumer.hasContentsOfAllSources();
      });
    };
    IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };
    IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        if (section.consumer._findSourceIndex(util.getArg(aArgs, "source")) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
          };
          return ret;
        }
      }
      return {
        line: null,
        column: null
      };
    };
    IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[j];
          var source = section.consumer._sources.at(mapping.source);
          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
          this._sources.add(source);
          source = this._sources.indexOf(source);
          var name = null;
          if (mapping.name) {
            name = section.consumer._names.at(mapping.name);
            this._names.add(name);
            name = this._names.indexOf(name);
          }
          var adjustedMapping = {
            source,
            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name
          };
          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === "number") {
            this.__originalMappings.push(adjustedMapping);
          }
        }
      }
      quickSort$1(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
      quickSort$1(this.__originalMappings, util.compareByOriginalPositions);
    };
    IndexedSourceMapConsumer_1 = IndexedSourceMapConsumer;
    sourceMapConsumer = {
      SourceMapConsumer: SourceMapConsumer_1,
      BasicSourceMapConsumer: BasicSourceMapConsumer_1,
      IndexedSourceMapConsumer: IndexedSourceMapConsumer_1
    };
    SourceMapGenerator$1 = sourceMapGenerator.SourceMapGenerator;
    REGEX_NEWLINE = /(\r?\n)/;
    NEWLINE_CODE = 10;
    isSourceNode = "$$$isSourceNode$$$";
    SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      var node2 = new SourceNode();
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var remainingLinesIndex = 0;
      var shiftNextLine = function() {
        var lineContents = getNextLine();
        var newLine = getNextLine() || "";
        return lineContents + newLine;
        function getNextLine() {
          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
        }
      };
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;
      var lastMapping = null;
      aSourceMapConsumer.eachMapping(function(mapping) {
        if (lastMapping !== null) {
          if (lastGeneratedLine < mapping.generatedLine) {
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
          } else {
            var nextLine = remainingLines[remainingLinesIndex] || "";
            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            lastMapping = mapping;
            return;
          }
        }
        while (lastGeneratedLine < mapping.generatedLine) {
          node2.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[remainingLinesIndex] || "";
          node2.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      if (remainingLinesIndex < remainingLines.length) {
        if (lastMapping) {
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        node2.add(remainingLines.splice(remainingLinesIndex).join(""));
      }
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node2.setSourceContent(sourceFile, content);
        }
      });
      return node2;
      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === void 0) {
          node2.add(code);
        } else {
          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
          node2.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
        }
      }
    };
    SourceNode.prototype.add = function SourceNode_add(aChunk) {
      if (Array.isArray(aChunk)) {
        aChunk.forEach(function(chunk) {
          this.add(chunk);
        }, this);
      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        if (aChunk) {
          this.children.push(aChunk);
        }
      } else {
        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
      }
      return this;
    };
    SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
      if (Array.isArray(aChunk)) {
        for (var i = aChunk.length - 1; i >= 0; i--) {
          this.prepend(aChunk[i]);
        }
      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        this.children.unshift(aChunk);
      } else {
        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
      }
      return this;
    };
    SourceNode.prototype.walk = function SourceNode_walk(aFn) {
      var chunk;
      for (var i = 0, len = this.children.length; i < len; i++) {
        chunk = this.children[i];
        if (chunk[isSourceNode]) {
          chunk.walk(aFn);
        } else {
          if (chunk !== "") {
            aFn(chunk, {
              source: this.source,
              line: this.line,
              column: this.column,
              name: this.name
            });
          }
        }
      }
    };
    SourceNode.prototype.join = function SourceNode_join(aSep) {
      var newChildren;
      var i;
      var len = this.children.length;
      if (len > 0) {
        newChildren = [];
        for (i = 0; i < len - 1; i++) {
          newChildren.push(this.children[i]);
          newChildren.push(aSep);
        }
        newChildren.push(this.children[i]);
        this.children = newChildren;
      }
      return this;
    };
    SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
      var lastChild = this.children[this.children.length - 1];
      if (lastChild[isSourceNode]) {
        lastChild.replaceRight(aPattern, aReplacement);
      } else if (typeof lastChild === "string") {
        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
      } else {
        this.children.push("".replace(aPattern, aReplacement));
      }
      return this;
    };
    SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };
    SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }
      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };
    SourceNode.prototype.toString = function SourceNode_toString() {
      var str = "";
      this.walk(function(chunk) {
        str += chunk;
      });
      return str;
    };
    SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
      var generated = {
        code: "",
        line: 1,
        column: 0
      };
      var map2 = new SourceMapGenerator$1(aArgs);
      var sourceMappingActive = false;
      var lastOriginalSource = null;
      var lastOriginalLine = null;
      var lastOriginalColumn = null;
      var lastOriginalName = null;
      this.walk(function(chunk, original) {
        generated.code += chunk;
        if (original.source !== null && original.line !== null && original.column !== null) {
          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
            map2.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
          lastOriginalSource = original.source;
          lastOriginalLine = original.line;
          lastOriginalColumn = original.column;
          lastOriginalName = original.name;
          sourceMappingActive = true;
        } else if (sourceMappingActive) {
          map2.addMapping({
            generated: {
              line: generated.line,
              column: generated.column
            }
          });
          lastOriginalSource = null;
          sourceMappingActive = false;
        }
        for (var idx = 0, length2 = chunk.length; idx < length2; idx++) {
          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
            generated.line++;
            generated.column = 0;
            if (idx + 1 === length2) {
              lastOriginalSource = null;
              sourceMappingActive = false;
            } else if (sourceMappingActive) {
              map2.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
          } else {
            generated.column++;
          }
        }
      });
      this.walkSourceContents(function(sourceFile, sourceContent) {
        map2.setSourceContent(sourceFile, sourceContent);
      });
      return { code: generated.code, map: map2 };
    };
    SourceNode_1 = SourceNode;
    sourceNode = {
      SourceNode: SourceNode_1
    };
    SourceMapGenerator$2 = sourceMapGenerator.SourceMapGenerator;
    SourceMapConsumer$1 = sourceMapConsumer.SourceMapConsumer;
    SourceNode$1 = sourceNode.SourceNode;
    sourceMap = {
      SourceMapGenerator: SourceMapGenerator$2,
      SourceMapConsumer: SourceMapConsumer$1,
      SourceNode: SourceNode$1
    };
    PURE_ANNOTATION = `/*#__PURE__*/`;
    WalkerBase2 = class {
      constructor() {
        this.should_skip = false;
        this.should_remove = false;
        this.replacement = null;
        this.context = {
          skip: () => this.should_skip = true,
          remove: () => this.should_remove = true,
          replace: (node2) => this.replacement = node2
        };
      }
      replace(parent, prop, index, node2) {
        if (parent) {
          if (index !== null) {
            parent[prop][index] = node2;
          } else {
            parent[prop] = node2;
          }
        }
      }
      remove(parent, prop, index) {
        if (parent) {
          if (index !== null) {
            parent[prop].splice(index, 1);
          } else {
            delete parent[prop];
          }
        }
      }
    };
    SyncWalker2 = class extends WalkerBase2 {
      constructor(enter, leave) {
        super();
        this.enter = enter;
        this.leave = leave;
      }
      visit(node2, parent, prop, index) {
        if (node2) {
          if (this.enter) {
            const _should_skip = this.should_skip;
            const _should_remove = this.should_remove;
            const _replacement = this.replacement;
            this.should_skip = false;
            this.should_remove = false;
            this.replacement = null;
            this.enter.call(this.context, node2, parent, prop, index);
            if (this.replacement) {
              node2 = this.replacement;
              this.replace(parent, prop, index, node2);
            }
            if (this.should_remove) {
              this.remove(parent, prop, index);
            }
            const skipped = this.should_skip;
            const removed = this.should_remove;
            this.should_skip = _should_skip;
            this.should_remove = _should_remove;
            this.replacement = _replacement;
            if (skipped)
              return node2;
            if (removed)
              return null;
          }
          for (const key in node2) {
            const value = node2[key];
            if (typeof value !== "object") {
              continue;
            } else if (Array.isArray(value)) {
              for (let i = 0; i < value.length; i += 1) {
                if (value[i] !== null && typeof value[i].type === "string") {
                  if (!this.visit(value[i], node2, key, i)) {
                    i--;
                  }
                }
              }
            } else if (value !== null && typeof value.type === "string") {
              this.visit(value, node2, key, null);
            }
          }
          if (this.leave) {
            const _replacement = this.replacement;
            const _should_remove = this.should_remove;
            this.replacement = null;
            this.should_remove = false;
            this.leave.call(this.context, node2, parent, prop, index);
            if (this.replacement) {
              node2 = this.replacement;
              this.replace(parent, prop, index, node2);
            }
            if (this.should_remove) {
              this.remove(parent, prop, index);
            }
            const removed = this.should_remove;
            this.replacement = _replacement;
            this.should_remove = _should_remove;
            if (removed)
              return null;
          }
        }
        return node2;
      }
    };
    isFunctionType = (node2) => {
      return /Function(?:Expression|Declaration)$|Method$/.test(node2.type);
    };
    isStaticProperty = (node2) => node2 && (node2.type === "ObjectProperty" || node2.type === "ObjectMethod") && !node2.computed;
    isStaticPropertyKey = (node2, parent) => isStaticProperty(parent) && parent.key === node2;
    isLiteralWhitelisted = /* @__PURE__ */ makeMap("true,false,null,this");
    transformExpression = (node2, context) => {
      if (node2.type === 5) {
        node2.content = processExpression(node2.content, context);
      } else if (node2.type === 1) {
        for (let i = 0; i < node2.props.length; i++) {
          const dir = node2.props[i];
          if (dir.type === 7 && dir.name !== "for") {
            const exp = dir.exp;
            const arg = dir.arg;
            if (exp && exp.type === 4 && !(dir.name === "on" && arg)) {
              dir.exp = processExpression(exp, context, dir.name === "slot");
            }
            if (arg && arg.type === 4 && !arg.isStatic) {
              dir.arg = processExpression(arg, context);
            }
          }
        }
      }
    };
    transformIf = createStructuralDirectiveTransform(/^(if|else|else-if)$/, (node2, dir, context) => {
      return processIf(node2, dir, context, (ifNode, branch, isRoot) => {
        const siblings = context.parent.children;
        let i = siblings.indexOf(ifNode);
        let key = 0;
        while (i-- >= 0) {
          const sibling = siblings[i];
          if (sibling && sibling.type === 9) {
            key += sibling.branches.length;
          }
        }
        return () => {
          if (isRoot) {
            ifNode.codegenNode = createCodegenNodeForBranch(branch, key, context);
          } else {
            const parentCondition = getParentCondition(ifNode.codegenNode);
            parentCondition.alternate = createCodegenNodeForBranch(branch, key + ifNode.branches.length - 1, context);
          }
        };
      });
    });
    transformFor = createStructuralDirectiveTransform("for", (node2, dir, context) => {
      const { helper, removeHelper } = context;
      return processFor(node2, dir, context, (forNode) => {
        const renderExp = createCallExpression(helper(RENDER_LIST), [
          forNode.source
        ]);
        const isTemplate = isTemplateNode(node2);
        const memo = findDir(node2, "memo");
        const keyProp = findProp(node2, `key`);
        const keyExp = keyProp && (keyProp.type === 6 ? createSimpleExpression(keyProp.value.content, true) : keyProp.exp);
        const keyProperty = keyProp ? createObjectProperty(`key`, keyExp) : null;
        if (isTemplate) {
          if (memo) {
            memo.exp = processExpression(memo.exp, context);
          }
          if (keyProperty && keyProp.type !== 6) {
            keyProperty.value = processExpression(keyProperty.value, context);
          }
        }
        const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;
        const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;
        forNode.codegenNode = createVNodeCall(context, helper(FRAGMENT), void 0, renderExp, fragmentFlag + ` /* ${PatchFlagNames[fragmentFlag]} */`, void 0, void 0, true, !isStableFragment, false, node2.loc);
        return () => {
          let childBlock;
          const { children } = forNode;
          if (isTemplate) {
            node2.children.some((c) => {
              if (c.type === 1) {
                const key = findProp(c, "key");
                if (key) {
                  context.onError(createCompilerError(33, key.loc));
                  return true;
                }
              }
            });
          }
          const needFragmentWrapper = children.length !== 1 || children[0].type !== 1;
          const slotOutlet = isSlotOutlet(node2) ? node2 : isTemplate && node2.children.length === 1 && isSlotOutlet(node2.children[0]) ? node2.children[0] : null;
          if (slotOutlet) {
            childBlock = slotOutlet.codegenNode;
            if (isTemplate && keyProperty) {
              injectProp(childBlock, keyProperty, context);
            }
          } else if (needFragmentWrapper) {
            childBlock = createVNodeCall(context, helper(FRAGMENT), keyProperty ? createObjectExpression([keyProperty]) : void 0, node2.children, 64 + ` /* ${PatchFlagNames[64]} */`, void 0, void 0, true, void 0, false);
          } else {
            childBlock = children[0].codegenNode;
            if (isTemplate && keyProperty) {
              injectProp(childBlock, keyProperty, context);
            }
            if (childBlock.isBlock !== !isStableFragment) {
              if (childBlock.isBlock) {
                removeHelper(OPEN_BLOCK);
                removeHelper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
              } else {
                removeHelper(getVNodeHelper(context.inSSR, childBlock.isComponent));
              }
            }
            childBlock.isBlock = !isStableFragment;
            if (childBlock.isBlock) {
              helper(OPEN_BLOCK);
              helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
            } else {
              helper(getVNodeHelper(context.inSSR, childBlock.isComponent));
            }
          }
          if (memo) {
            const loop = createFunctionExpression(createForLoopParams(forNode.parseResult, [
              createSimpleExpression(`_cached`)
            ]));
            loop.body = createBlockStatement([
              createCompoundExpression([`const _memo = (`, memo.exp, `)`]),
              createCompoundExpression([
                `if (_cached`,
                ...keyExp ? [` && _cached.key === `, keyExp] : [],
                ` && ${context.helperString(IS_MEMO_SAME)}(_cached, _memo)) return _cached`
              ]),
              createCompoundExpression([`const _item = `, childBlock]),
              createSimpleExpression(`_item.memo = _memo`),
              createSimpleExpression(`return _item`)
            ]);
            renderExp.arguments.push(loop, createSimpleExpression(`_cache`), createSimpleExpression(String(context.cached++)));
          } else {
            renderExp.arguments.push(createFunctionExpression(createForLoopParams(forNode.parseResult), childBlock, true));
          }
        };
      });
    });
    forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
    forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
    stripParensRE = /^\(|\)$/g;
    defaultFallback = createSimpleExpression(`undefined`, false);
    trackSlotScopes = (node2, context) => {
      if (node2.type === 1 && (node2.tagType === 1 || node2.tagType === 3)) {
        const vSlot = findDir(node2, "slot");
        if (vSlot) {
          const slotProps = vSlot.exp;
          if (context.prefixIdentifiers) {
            slotProps && context.addIdentifiers(slotProps);
          }
          context.scopes.vSlot++;
          return () => {
            if (context.prefixIdentifiers) {
              slotProps && context.removeIdentifiers(slotProps);
            }
            context.scopes.vSlot--;
          };
        }
      }
    };
    trackVForSlotScopes = (node2, context) => {
      let vFor;
      if (isTemplateNode(node2) && node2.props.some(isVSlot) && (vFor = findDir(node2, "for"))) {
        const result2 = vFor.parseResult = parseForExpression(vFor.exp, context);
        if (result2) {
          const { value, key, index } = result2;
          const { addIdentifiers, removeIdentifiers } = context;
          value && addIdentifiers(value);
          key && addIdentifiers(key);
          index && addIdentifiers(index);
          return () => {
            value && removeIdentifiers(value);
            key && removeIdentifiers(key);
            index && removeIdentifiers(index);
          };
        }
      }
    };
    buildClientSlotFn = (props, children, loc) => createFunctionExpression(props, children, false, true, children.length ? children[0].loc : loc);
    directiveImportMap = /* @__PURE__ */ new WeakMap();
    transformElement = (node2, context) => {
      return function postTransformElement() {
        node2 = context.currentNode;
        if (!(node2.type === 1 && (node2.tagType === 0 || node2.tagType === 1))) {
          return;
        }
        const { tag: tag2, props } = node2;
        const isComponent2 = node2.tagType === 1;
        let vnodeTag = isComponent2 ? resolveComponentType(node2, context) : `"${tag2}"`;
        const isDynamicComponent = isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
        let vnodeProps;
        let vnodeChildren;
        let vnodePatchFlag;
        let patchFlag = 0;
        let vnodeDynamicProps;
        let dynamicPropNames;
        let vnodeDirectives;
        let shouldUseBlock = isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent2 && (tag2 === "svg" || tag2 === "foreignObject");
        if (props.length > 0) {
          const propsBuildResult = buildProps(node2, context);
          vnodeProps = propsBuildResult.props;
          patchFlag = propsBuildResult.patchFlag;
          dynamicPropNames = propsBuildResult.dynamicPropNames;
          const directives = propsBuildResult.directives;
          vnodeDirectives = directives && directives.length ? createArrayExpression(directives.map((dir) => buildDirectiveArgs(dir, context))) : void 0;
          if (propsBuildResult.shouldUseBlock) {
            shouldUseBlock = true;
          }
        }
        if (node2.children.length > 0) {
          if (vnodeTag === KEEP_ALIVE) {
            shouldUseBlock = true;
            patchFlag |= 1024;
            if (node2.children.length > 1) {
              context.onError(createCompilerError(45, {
                start: node2.children[0].loc.start,
                end: node2.children[node2.children.length - 1].loc.end,
                source: ""
              }));
            }
          }
          const shouldBuildAsSlots = isComponent2 && vnodeTag !== TELEPORT && vnodeTag !== KEEP_ALIVE;
          if (shouldBuildAsSlots) {
            const { slots, hasDynamicSlots } = buildSlots(node2, context);
            vnodeChildren = slots;
            if (hasDynamicSlots) {
              patchFlag |= 1024;
            }
          } else if (node2.children.length === 1 && vnodeTag !== TELEPORT) {
            const child = node2.children[0];
            const type = child.type;
            const hasDynamicTextChild = type === 5 || type === 8;
            if (hasDynamicTextChild && getConstantType(child, context) === 0) {
              patchFlag |= 1;
            }
            if (hasDynamicTextChild || type === 2) {
              vnodeChildren = child;
            } else {
              vnodeChildren = node2.children;
            }
          } else {
            vnodeChildren = node2.children;
          }
        }
        if (patchFlag !== 0) {
          {
            if (patchFlag < 0) {
              vnodePatchFlag = patchFlag + ` /* ${PatchFlagNames[patchFlag]} */`;
            } else {
              const flagNames = Object.keys(PatchFlagNames).map(Number).filter((n2) => n2 > 0 && patchFlag & n2).map((n2) => PatchFlagNames[n2]).join(`, `);
              vnodePatchFlag = patchFlag + ` /* ${flagNames} */`;
            }
          }
          if (dynamicPropNames && dynamicPropNames.length) {
            vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
          }
        }
        node2.codegenNode = createVNodeCall(context, vnodeTag, vnodeProps, vnodeChildren, vnodePatchFlag, vnodeDynamicProps, vnodeDirectives, !!shouldUseBlock, false, isComponent2, node2.loc);
      };
    };
    transformSlotOutlet = (node2, context) => {
      if (isSlotOutlet(node2)) {
        const { children, loc } = node2;
        const { slotName, slotProps } = processSlotOutlet(node2, context);
        const slotArgs = [
          context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
          slotName,
          "{}",
          "undefined",
          "true"
        ];
        let expectedLen = 2;
        if (slotProps) {
          slotArgs[2] = slotProps;
          expectedLen = 3;
        }
        if (children.length) {
          slotArgs[3] = createFunctionExpression([], children, false, false, loc);
          expectedLen = 4;
        }
        if (context.scopeId && !context.slotted) {
          expectedLen = 5;
        }
        slotArgs.splice(expectedLen);
        node2.codegenNode = createCallExpression(context.helper(RENDER_SLOT), slotArgs, loc);
      }
    };
    fnExpRE = /^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/;
    transformOn = (dir, node2, context, augmentor) => {
      const { loc, modifiers, arg } = dir;
      if (!dir.exp && !modifiers.length) {
        context.onError(createCompilerError(35, loc));
      }
      let eventName;
      if (arg.type === 4) {
        if (arg.isStatic) {
          let rawName = arg.content;
          if (rawName.startsWith("vue:")) {
            rawName = `vnode-${rawName.slice(4)}`;
          }
          eventName = createSimpleExpression(toHandlerKey(camelize(rawName)), true, arg.loc);
        } else {
          eventName = createCompoundExpression([
            `${context.helperString(TO_HANDLER_KEY)}(`,
            arg,
            `)`
          ]);
        }
      } else {
        eventName = arg;
        eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);
        eventName.children.push(`)`);
      }
      let exp = dir.exp;
      if (exp && !exp.content.trim()) {
        exp = void 0;
      }
      let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;
      if (exp) {
        const isMemberExp = isMemberExpression(exp.content, context);
        const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));
        const hasMultipleStatements = exp.content.includes(`;`);
        if (context.prefixIdentifiers) {
          isInlineStatement && context.addIdentifiers(`$event`);
          exp = dir.exp = processExpression(exp, context, false, hasMultipleStatements);
          isInlineStatement && context.removeIdentifiers(`$event`);
          shouldCache = context.cacheHandlers && !context.inVOnce && !(exp.type === 4 && exp.constType > 0) && !(isMemberExp && node2.tagType === 1) && !hasScopeRef(exp, context.identifiers);
          if (shouldCache && isMemberExp) {
            if (exp.type === 4) {
              exp.content = `${exp.content} && ${exp.content}(...args)`;
            } else {
              exp.children = [...exp.children, ` && `, ...exp.children, `(...args)`];
            }
          }
        }
        if (isInlineStatement || shouldCache && isMemberExp) {
          exp = createCompoundExpression([
            `${isInlineStatement ? context.isTS ? `($event: any)` : `$event` : `${context.isTS ? `
//@ts-ignore
` : ``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
            exp,
            hasMultipleStatements ? `}` : `)`
          ]);
        }
      }
      let ret = {
        props: [
          createObjectProperty(eventName, exp || createSimpleExpression(`() => {}`, false, loc))
        ]
      };
      if (augmentor) {
        ret = augmentor(ret);
      }
      if (shouldCache) {
        ret.props[0].value = context.cache(ret.props[0].value);
      }
      ret.props.forEach((p) => p.key.isHandlerKey = true);
      return ret;
    };
    transformBind = (dir, _node, context) => {
      const { exp, modifiers, loc } = dir;
      const arg = dir.arg;
      if (arg.type !== 4) {
        arg.children.unshift(`(`);
        arg.children.push(`) || ""`);
      } else if (!arg.isStatic) {
        arg.content = `${arg.content} || ""`;
      }
      if (modifiers.includes("camel")) {
        if (arg.type === 4) {
          if (arg.isStatic) {
            arg.content = camelize(arg.content);
          } else {
            arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;
          }
        } else {
          arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
          arg.children.push(`)`);
        }
      }
      if (!context.inSSR) {
        if (modifiers.includes("prop")) {
          injectPrefix(arg, ".");
        }
        if (modifiers.includes("attr")) {
          injectPrefix(arg, "^");
        }
      }
      if (!exp || exp.type === 4 && !exp.content.trim()) {
        context.onError(createCompilerError(34, loc));
        return {
          props: [createObjectProperty(arg, createSimpleExpression("", true, loc))]
        };
      }
      return {
        props: [createObjectProperty(arg, exp)]
      };
    };
    injectPrefix = (arg, prefix2) => {
      if (arg.type === 4) {
        if (arg.isStatic) {
          arg.content = prefix2 + arg.content;
        } else {
          arg.content = `\`${prefix2}\${${arg.content}}\``;
        }
      } else {
        arg.children.unshift(`'${prefix2}' + (`);
        arg.children.push(`)`);
      }
    };
    transformText = (node2, context) => {
      if (node2.type === 0 || node2.type === 1 || node2.type === 11 || node2.type === 10) {
        return () => {
          const children = node2.children;
          let currentContainer = void 0;
          let hasText = false;
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isText(child)) {
              hasText = true;
              for (let j = i + 1; j < children.length; j++) {
                const next = children[j];
                if (isText(next)) {
                  if (!currentContainer) {
                    currentContainer = children[i] = {
                      type: 8,
                      loc: child.loc,
                      children: [child]
                    };
                  }
                  currentContainer.children.push(` + `, next);
                  children.splice(j, 1);
                  j--;
                } else {
                  currentContainer = void 0;
                  break;
                }
              }
            }
          }
          if (!hasText || children.length === 1 && (node2.type === 0 || node2.type === 1 && node2.tagType === 0 && !node2.props.find((p) => p.type === 7 && !context.directiveTransforms[p.name]) && true)) {
            return;
          }
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isText(child) || child.type === 8) {
              const callArgs = [];
              if (child.type !== 2 || child.content !== " ") {
                callArgs.push(child);
              }
              if (!context.ssr && getConstantType(child, context) === 0) {
                callArgs.push(1 + ` /* ${PatchFlagNames[1]} */`);
              }
              children[i] = {
                type: 12,
                content: child,
                loc: child.loc,
                codegenNode: createCallExpression(context.helper(CREATE_TEXT), callArgs)
              };
            }
          }
        };
      }
    };
    seen = /* @__PURE__ */ new WeakSet();
    transformOnce = (node2, context) => {
      if (node2.type === 1 && findDir(node2, "once", true)) {
        if (seen.has(node2) || context.inVOnce) {
          return;
        }
        seen.add(node2);
        context.inVOnce = true;
        context.helper(SET_BLOCK_TRACKING);
        return () => {
          context.inVOnce = false;
          const cur = context.currentNode;
          if (cur.codegenNode) {
            cur.codegenNode = context.cache(cur.codegenNode, true);
          }
        };
      }
    };
    transformModel = (dir, node2, context) => {
      const { exp, arg } = dir;
      if (!exp) {
        context.onError(createCompilerError(41, dir.loc));
        return createTransformProps();
      }
      const rawExp = exp.loc.source;
      const expString = exp.type === 4 ? exp.content : rawExp;
      const bindingType = context.bindingMetadata[rawExp];
      const maybeRef = context.inline && bindingType && bindingType !== "setup-const";
      if (!expString.trim() || !isMemberExpression(expString, context) && !maybeRef) {
        context.onError(createCompilerError(42, exp.loc));
        return createTransformProps();
      }
      if (context.prefixIdentifiers && isSimpleIdentifier(expString) && context.identifiers[expString]) {
        context.onError(createCompilerError(43, exp.loc));
        return createTransformProps();
      }
      const propName = arg ? arg : createSimpleExpression("modelValue", true);
      const eventName = arg ? isStaticExp(arg) ? `onUpdate:${arg.content}` : createCompoundExpression(['"onUpdate:" + ', arg]) : `onUpdate:modelValue`;
      let assignmentExp;
      const eventArg = context.isTS ? `($event: any)` : `$event`;
      if (maybeRef) {
        if (bindingType === "setup-ref") {
          assignmentExp = createCompoundExpression([
            `${eventArg} => ((`,
            createSimpleExpression(rawExp, false, exp.loc),
            `).value = $event)`
          ]);
        } else {
          const altAssignment = bindingType === "setup-let" ? `${rawExp} = $event` : `null`;
          assignmentExp = createCompoundExpression([
            `${eventArg} => (${context.helperString(IS_REF)}(${rawExp}) ? (`,
            createSimpleExpression(rawExp, false, exp.loc),
            `).value = $event : ${altAssignment})`
          ]);
        }
      } else {
        assignmentExp = createCompoundExpression([
          `${eventArg} => ((`,
          exp,
          `) = $event)`
        ]);
      }
      const props = [
        createObjectProperty(propName, dir.exp),
        createObjectProperty(eventName, assignmentExp)
      ];
      if (context.prefixIdentifiers && !context.inVOnce && context.cacheHandlers && !hasScopeRef(exp, context.identifiers)) {
        props[1].value = context.cache(props[1].value);
      }
      if (dir.modifiers.length && node2.tagType === 1) {
        const modifiers = dir.modifiers.map((m) => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`).join(`, `);
        const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([arg, ' + "Modifiers"']) : `modelModifiers`;
        props.push(createObjectProperty(modifiersKey, createSimpleExpression(`{ ${modifiers} }`, false, dir.loc, 2)));
      }
      return createTransformProps(props);
    };
    seen$1 = /* @__PURE__ */ new WeakSet();
    transformMemo = (node2, context) => {
      if (node2.type === 1) {
        const dir = findDir(node2, "memo");
        if (!dir || seen$1.has(node2)) {
          return;
        }
        seen$1.add(node2);
        return () => {
          const codegenNode = node2.codegenNode || context.currentNode.codegenNode;
          if (codegenNode && codegenNode.type === 13) {
            if (node2.tagType !== 1) {
              makeBlock(codegenNode, context);
            }
            node2.codegenNode = createCallExpression(context.helper(WITH_MEMO), [
              dir.exp,
              createFunctionExpression(void 0, codegenNode),
              `_cache`,
              String(context.cached++)
            ]);
          }
        };
      }
    };
    noopDirectiveTransform = () => ({ props: [] });
    V_MODEL_RADIO = Symbol(`vModelRadio`);
    V_MODEL_CHECKBOX = Symbol(`vModelCheckbox`);
    V_MODEL_TEXT = Symbol(`vModelText`);
    V_MODEL_SELECT = Symbol(`vModelSelect`);
    V_MODEL_DYNAMIC = Symbol(`vModelDynamic`);
    V_ON_WITH_MODIFIERS = Symbol(`vOnModifiersGuard`);
    V_ON_WITH_KEYS = Symbol(`vOnKeysGuard`);
    V_SHOW = Symbol(`vShow`);
    TRANSITION = Symbol(`Transition`);
    TRANSITION_GROUP = Symbol(`TransitionGroup`);
    registerRuntimeHelpers({
      [V_MODEL_RADIO]: `vModelRadio`,
      [V_MODEL_CHECKBOX]: `vModelCheckbox`,
      [V_MODEL_TEXT]: `vModelText`,
      [V_MODEL_SELECT]: `vModelSelect`,
      [V_MODEL_DYNAMIC]: `vModelDynamic`,
      [V_ON_WITH_MODIFIERS]: `withModifiers`,
      [V_ON_WITH_KEYS]: `withKeys`,
      [V_SHOW]: `vShow`,
      [TRANSITION]: `Transition`,
      [TRANSITION_GROUP]: `TransitionGroup`
    });
    namedCharacterReferences = {
      GT: ">",
      gt: ">",
      LT: "<",
      lt: "<",
      "ac;": "\u223E",
      "af;": "\u2061",
      AMP: "&",
      amp: "&",
      "ap;": "\u2248",
      "DD;": "\u2145",
      "dd;": "\u2146",
      deg: "\xB0",
      "ee;": "\u2147",
      "eg;": "\u2A9A",
      "el;": "\u2A99",
      ETH: "\xD0",
      eth: "\xF0",
      "gE;": "\u2267",
      "ge;": "\u2265",
      "Gg;": "\u22D9",
      "gg;": "\u226B",
      "gl;": "\u2277",
      "GT;": ">",
      "Gt;": "\u226B",
      "gt;": ">",
      "ic;": "\u2063",
      "ii;": "\u2148",
      "Im;": "\u2111",
      "in;": "\u2208",
      "it;": "\u2062",
      "lE;": "\u2266",
      "le;": "\u2264",
      "lg;": "\u2276",
      "Ll;": "\u22D8",
      "ll;": "\u226A",
      "LT;": "<",
      "Lt;": "\u226A",
      "lt;": "<",
      "mp;": "\u2213",
      "Mu;": "\u039C",
      "mu;": "\u03BC",
      "ne;": "\u2260",
      "ni;": "\u220B",
      not: "\xAC",
      "Nu;": "\u039D",
      "nu;": "\u03BD",
      "Or;": "\u2A54",
      "or;": "\u2228",
      "oS;": "\u24C8",
      "Pi;": "\u03A0",
      "pi;": "\u03C0",
      "pm;": "\xB1",
      "Pr;": "\u2ABB",
      "pr;": "\u227A",
      "Re;": "\u211C",
      REG: "\xAE",
      reg: "\xAE",
      "rx;": "\u211E",
      "Sc;": "\u2ABC",
      "sc;": "\u227B",
      shy: "\xAD",
      uml: "\xA8",
      "wp;": "\u2118",
      "wr;": "\u2240",
      "Xi;": "\u039E",
      "xi;": "\u03BE",
      yen: "\xA5",
      "acd;": "\u223F",
      "acE;": "\u223E\u0333",
      "Acy;": "\u0410",
      "acy;": "\u0430",
      "Afr;": "\u{1D504}",
      "afr;": "\u{1D51E}",
      "AMP;": "&",
      "amp;": "&",
      "And;": "\u2A53",
      "and;": "\u2227",
      "ang;": "\u2220",
      "apE;": "\u2A70",
      "ape;": "\u224A",
      "ast;": "*",
      Auml: "\xC4",
      auml: "\xE4",
      "Bcy;": "\u0411",
      "bcy;": "\u0431",
      "Bfr;": "\u{1D505}",
      "bfr;": "\u{1D51F}",
      "bne;": "=\u20E5",
      "bot;": "\u22A5",
      "Cap;": "\u22D2",
      "cap;": "\u2229",
      cent: "\xA2",
      "Cfr;": "\u212D",
      "cfr;": "\u{1D520}",
      "Chi;": "\u03A7",
      "chi;": "\u03C7",
      "cir;": "\u25CB",
      COPY: "\xA9",
      copy: "\xA9",
      "Cup;": "\u22D3",
      "cup;": "\u222A",
      "Dcy;": "\u0414",
      "dcy;": "\u0434",
      "deg;": "\xB0",
      "Del;": "\u2207",
      "Dfr;": "\u{1D507}",
      "dfr;": "\u{1D521}",
      "die;": "\xA8",
      "div;": "\xF7",
      "Dot;": "\xA8",
      "dot;": "\u02D9",
      "Ecy;": "\u042D",
      "ecy;": "\u044D",
      "Efr;": "\u{1D508}",
      "efr;": "\u{1D522}",
      "egs;": "\u2A96",
      "ell;": "\u2113",
      "els;": "\u2A95",
      "ENG;": "\u014A",
      "eng;": "\u014B",
      "Eta;": "\u0397",
      "eta;": "\u03B7",
      "ETH;": "\xD0",
      "eth;": "\xF0",
      Euml: "\xCB",
      euml: "\xEB",
      "Fcy;": "\u0424",
      "fcy;": "\u0444",
      "Ffr;": "\u{1D509}",
      "ffr;": "\u{1D523}",
      "gap;": "\u2A86",
      "Gcy;": "\u0413",
      "gcy;": "\u0433",
      "gEl;": "\u2A8C",
      "gel;": "\u22DB",
      "geq;": "\u2265",
      "ges;": "\u2A7E",
      "Gfr;": "\u{1D50A}",
      "gfr;": "\u{1D524}",
      "ggg;": "\u22D9",
      "gla;": "\u2AA5",
      "glE;": "\u2A92",
      "glj;": "\u2AA4",
      "gnE;": "\u2269",
      "gne;": "\u2A88",
      "Hat;": "^",
      "Hfr;": "\u210C",
      "hfr;": "\u{1D525}",
      "Icy;": "\u0418",
      "icy;": "\u0438",
      "iff;": "\u21D4",
      "Ifr;": "\u2111",
      "ifr;": "\u{1D526}",
      "Int;": "\u222C",
      "int;": "\u222B",
      Iuml: "\xCF",
      iuml: "\xEF",
      "Jcy;": "\u0419",
      "jcy;": "\u0439",
      "Jfr;": "\u{1D50D}",
      "jfr;": "\u{1D527}",
      "Kcy;": "\u041A",
      "kcy;": "\u043A",
      "Kfr;": "\u{1D50E}",
      "kfr;": "\u{1D528}",
      "lap;": "\u2A85",
      "lat;": "\u2AAB",
      "Lcy;": "\u041B",
      "lcy;": "\u043B",
      "lEg;": "\u2A8B",
      "leg;": "\u22DA",
      "leq;": "\u2264",
      "les;": "\u2A7D",
      "Lfr;": "\u{1D50F}",
      "lfr;": "\u{1D529}",
      "lgE;": "\u2A91",
      "lnE;": "\u2268",
      "lne;": "\u2A87",
      "loz;": "\u25CA",
      "lrm;": "\u200E",
      "Lsh;": "\u21B0",
      "lsh;": "\u21B0",
      macr: "\xAF",
      "Map;": "\u2905",
      "map;": "\u21A6",
      "Mcy;": "\u041C",
      "mcy;": "\u043C",
      "Mfr;": "\u{1D510}",
      "mfr;": "\u{1D52A}",
      "mho;": "\u2127",
      "mid;": "\u2223",
      "nap;": "\u2249",
      nbsp: "\xA0",
      "Ncy;": "\u041D",
      "ncy;": "\u043D",
      "Nfr;": "\u{1D511}",
      "nfr;": "\u{1D52B}",
      "ngE;": "\u2267\u0338",
      "nge;": "\u2271",
      "nGg;": "\u22D9\u0338",
      "nGt;": "\u226B\u20D2",
      "ngt;": "\u226F",
      "nis;": "\u22FC",
      "niv;": "\u220B",
      "nlE;": "\u2266\u0338",
      "nle;": "\u2270",
      "nLl;": "\u22D8\u0338",
      "nLt;": "\u226A\u20D2",
      "nlt;": "\u226E",
      "Not;": "\u2AEC",
      "not;": "\xAC",
      "npr;": "\u2280",
      "nsc;": "\u2281",
      "num;": "#",
      "Ocy;": "\u041E",
      "ocy;": "\u043E",
      "Ofr;": "\u{1D512}",
      "ofr;": "\u{1D52C}",
      "ogt;": "\u29C1",
      "ohm;": "\u03A9",
      "olt;": "\u29C0",
      "ord;": "\u2A5D",
      ordf: "\xAA",
      ordm: "\xBA",
      "orv;": "\u2A5B",
      Ouml: "\xD6",
      ouml: "\xF6",
      "par;": "\u2225",
      para: "\xB6",
      "Pcy;": "\u041F",
      "pcy;": "\u043F",
      "Pfr;": "\u{1D513}",
      "pfr;": "\u{1D52D}",
      "Phi;": "\u03A6",
      "phi;": "\u03C6",
      "piv;": "\u03D6",
      "prE;": "\u2AB3",
      "pre;": "\u2AAF",
      "Psi;": "\u03A8",
      "psi;": "\u03C8",
      "Qfr;": "\u{1D514}",
      "qfr;": "\u{1D52E}",
      QUOT: '"',
      quot: '"',
      "Rcy;": "\u0420",
      "rcy;": "\u0440",
      "REG;": "\xAE",
      "reg;": "\xAE",
      "Rfr;": "\u211C",
      "rfr;": "\u{1D52F}",
      "Rho;": "\u03A1",
      "rho;": "\u03C1",
      "rlm;": "\u200F",
      "Rsh;": "\u21B1",
      "rsh;": "\u21B1",
      "scE;": "\u2AB4",
      "sce;": "\u2AB0",
      "Scy;": "\u0421",
      "scy;": "\u0441",
      sect: "\xA7",
      "Sfr;": "\u{1D516}",
      "sfr;": "\u{1D530}",
      "shy;": "\xAD",
      "sim;": "\u223C",
      "smt;": "\u2AAA",
      "sol;": "/",
      "squ;": "\u25A1",
      "Sub;": "\u22D0",
      "sub;": "\u2282",
      "Sum;": "\u2211",
      "sum;": "\u2211",
      "Sup;": "\u22D1",
      "sup;": "\u2283",
      sup1: "\xB9",
      sup2: "\xB2",
      sup3: "\xB3",
      "Tab;": "	",
      "Tau;": "\u03A4",
      "tau;": "\u03C4",
      "Tcy;": "\u0422",
      "tcy;": "\u0442",
      "Tfr;": "\u{1D517}",
      "tfr;": "\u{1D531}",
      "top;": "\u22A4",
      "Ucy;": "\u0423",
      "ucy;": "\u0443",
      "Ufr;": "\u{1D518}",
      "ufr;": "\u{1D532}",
      "uml;": "\xA8",
      Uuml: "\xDC",
      uuml: "\xFC",
      "Vcy;": "\u0412",
      "vcy;": "\u0432",
      "Vee;": "\u22C1",
      "vee;": "\u2228",
      "Vfr;": "\u{1D519}",
      "vfr;": "\u{1D533}",
      "Wfr;": "\u{1D51A}",
      "wfr;": "\u{1D534}",
      "Xfr;": "\u{1D51B}",
      "xfr;": "\u{1D535}",
      "Ycy;": "\u042B",
      "ycy;": "\u044B",
      "yen;": "\xA5",
      "Yfr;": "\u{1D51C}",
      "yfr;": "\u{1D536}",
      yuml: "\xFF",
      "Zcy;": "\u0417",
      "zcy;": "\u0437",
      "Zfr;": "\u2128",
      "zfr;": "\u{1D537}",
      "zwj;": "\u200D",
      Acirc: "\xC2",
      acirc: "\xE2",
      acute: "\xB4",
      AElig: "\xC6",
      aelig: "\xE6",
      "andd;": "\u2A5C",
      "andv;": "\u2A5A",
      "ange;": "\u29A4",
      "Aopf;": "\u{1D538}",
      "aopf;": "\u{1D552}",
      "apid;": "\u224B",
      "apos;": "'",
      Aring: "\xC5",
      aring: "\xE5",
      "Ascr;": "\u{1D49C}",
      "ascr;": "\u{1D4B6}",
      "Auml;": "\xC4",
      "auml;": "\xE4",
      "Barv;": "\u2AE7",
      "bbrk;": "\u23B5",
      "Beta;": "\u0392",
      "beta;": "\u03B2",
      "beth;": "\u2136",
      "bNot;": "\u2AED",
      "bnot;": "\u2310",
      "Bopf;": "\u{1D539}",
      "bopf;": "\u{1D553}",
      "boxH;": "\u2550",
      "boxh;": "\u2500",
      "boxV;": "\u2551",
      "boxv;": "\u2502",
      "Bscr;": "\u212C",
      "bscr;": "\u{1D4B7}",
      "bsim;": "\u223D",
      "bsol;": "\\",
      "bull;": "\u2022",
      "bump;": "\u224E",
      "caps;": "\u2229\uFE00",
      "Cdot;": "\u010A",
      "cdot;": "\u010B",
      cedil: "\xB8",
      "cent;": "\xA2",
      "CHcy;": "\u0427",
      "chcy;": "\u0447",
      "circ;": "\u02C6",
      "cirE;": "\u29C3",
      "cire;": "\u2257",
      "comp;": "\u2201",
      "cong;": "\u2245",
      "Copf;": "\u2102",
      "copf;": "\u{1D554}",
      "COPY;": "\xA9",
      "copy;": "\xA9",
      "Cscr;": "\u{1D49E}",
      "cscr;": "\u{1D4B8}",
      "csub;": "\u2ACF",
      "csup;": "\u2AD0",
      "cups;": "\u222A\uFE00",
      "Darr;": "\u21A1",
      "dArr;": "\u21D3",
      "darr;": "\u2193",
      "dash;": "\u2010",
      "dHar;": "\u2965",
      "diam;": "\u22C4",
      "DJcy;": "\u0402",
      "djcy;": "\u0452",
      "Dopf;": "\u{1D53B}",
      "dopf;": "\u{1D555}",
      "Dscr;": "\u{1D49F}",
      "dscr;": "\u{1D4B9}",
      "DScy;": "\u0405",
      "dscy;": "\u0455",
      "dsol;": "\u29F6",
      "dtri;": "\u25BF",
      "DZcy;": "\u040F",
      "dzcy;": "\u045F",
      "ecir;": "\u2256",
      Ecirc: "\xCA",
      ecirc: "\xEA",
      "Edot;": "\u0116",
      "eDot;": "\u2251",
      "edot;": "\u0117",
      "emsp;": "\u2003",
      "ensp;": "\u2002",
      "Eopf;": "\u{1D53C}",
      "eopf;": "\u{1D556}",
      "epar;": "\u22D5",
      "epsi;": "\u03B5",
      "Escr;": "\u2130",
      "escr;": "\u212F",
      "Esim;": "\u2A73",
      "esim;": "\u2242",
      "Euml;": "\xCB",
      "euml;": "\xEB",
      "euro;": "\u20AC",
      "excl;": "!",
      "flat;": "\u266D",
      "fnof;": "\u0192",
      "Fopf;": "\u{1D53D}",
      "fopf;": "\u{1D557}",
      "fork;": "\u22D4",
      "Fscr;": "\u2131",
      "fscr;": "\u{1D4BB}",
      "Gdot;": "\u0120",
      "gdot;": "\u0121",
      "geqq;": "\u2267",
      "gesl;": "\u22DB\uFE00",
      "GJcy;": "\u0403",
      "gjcy;": "\u0453",
      "gnap;": "\u2A8A",
      "gneq;": "\u2A88",
      "Gopf;": "\u{1D53E}",
      "gopf;": "\u{1D558}",
      "Gscr;": "\u{1D4A2}",
      "gscr;": "\u210A",
      "gsim;": "\u2273",
      "gtcc;": "\u2AA7",
      "gvnE;": "\u2269\uFE00",
      "half;": "\xBD",
      "hArr;": "\u21D4",
      "harr;": "\u2194",
      "hbar;": "\u210F",
      "Hopf;": "\u210D",
      "hopf;": "\u{1D559}",
      "Hscr;": "\u210B",
      "hscr;": "\u{1D4BD}",
      Icirc: "\xCE",
      icirc: "\xEE",
      "Idot;": "\u0130",
      "IEcy;": "\u0415",
      "iecy;": "\u0435",
      iexcl: "\xA1",
      "imof;": "\u22B7",
      "IOcy;": "\u0401",
      "iocy;": "\u0451",
      "Iopf;": "\u{1D540}",
      "iopf;": "\u{1D55A}",
      "Iota;": "\u0399",
      "iota;": "\u03B9",
      "Iscr;": "\u2110",
      "iscr;": "\u{1D4BE}",
      "isin;": "\u2208",
      "Iuml;": "\xCF",
      "iuml;": "\xEF",
      "Jopf;": "\u{1D541}",
      "jopf;": "\u{1D55B}",
      "Jscr;": "\u{1D4A5}",
      "jscr;": "\u{1D4BF}",
      "KHcy;": "\u0425",
      "khcy;": "\u0445",
      "KJcy;": "\u040C",
      "kjcy;": "\u045C",
      "Kopf;": "\u{1D542}",
      "kopf;": "\u{1D55C}",
      "Kscr;": "\u{1D4A6}",
      "kscr;": "\u{1D4C0}",
      "Lang;": "\u27EA",
      "lang;": "\u27E8",
      laquo: "\xAB",
      "Larr;": "\u219E",
      "lArr;": "\u21D0",
      "larr;": "\u2190",
      "late;": "\u2AAD",
      "lcub;": "{",
      "ldca;": "\u2936",
      "ldsh;": "\u21B2",
      "leqq;": "\u2266",
      "lesg;": "\u22DA\uFE00",
      "lHar;": "\u2962",
      "LJcy;": "\u0409",
      "ljcy;": "\u0459",
      "lnap;": "\u2A89",
      "lneq;": "\u2A87",
      "Lopf;": "\u{1D543}",
      "lopf;": "\u{1D55D}",
      "lozf;": "\u29EB",
      "lpar;": "(",
      "Lscr;": "\u2112",
      "lscr;": "\u{1D4C1}",
      "lsim;": "\u2272",
      "lsqb;": "[",
      "ltcc;": "\u2AA6",
      "ltri;": "\u25C3",
      "lvnE;": "\u2268\uFE00",
      "macr;": "\xAF",
      "male;": "\u2642",
      "malt;": "\u2720",
      micro: "\xB5",
      "mlcp;": "\u2ADB",
      "mldr;": "\u2026",
      "Mopf;": "\u{1D544}",
      "mopf;": "\u{1D55E}",
      "Mscr;": "\u2133",
      "mscr;": "\u{1D4C2}",
      "nang;": "\u2220\u20D2",
      "napE;": "\u2A70\u0338",
      "nbsp;": "\xA0",
      "ncap;": "\u2A43",
      "ncup;": "\u2A42",
      "ngeq;": "\u2271",
      "nges;": "\u2A7E\u0338",
      "ngtr;": "\u226F",
      "nGtv;": "\u226B\u0338",
      "nisd;": "\u22FA",
      "NJcy;": "\u040A",
      "njcy;": "\u045A",
      "nldr;": "\u2025",
      "nleq;": "\u2270",
      "nles;": "\u2A7D\u0338",
      "nLtv;": "\u226A\u0338",
      "nmid;": "\u2224",
      "Nopf;": "\u2115",
      "nopf;": "\u{1D55F}",
      "npar;": "\u2226",
      "npre;": "\u2AAF\u0338",
      "nsce;": "\u2AB0\u0338",
      "Nscr;": "\u{1D4A9}",
      "nscr;": "\u{1D4C3}",
      "nsim;": "\u2241",
      "nsub;": "\u2284",
      "nsup;": "\u2285",
      "ntgl;": "\u2279",
      "ntlg;": "\u2278",
      "nvap;": "\u224D\u20D2",
      "nvge;": "\u2265\u20D2",
      "nvgt;": ">\u20D2",
      "nvle;": "\u2264\u20D2",
      "nvlt;": "<\u20D2",
      "oast;": "\u229B",
      "ocir;": "\u229A",
      Ocirc: "\xD4",
      ocirc: "\xF4",
      "odiv;": "\u2A38",
      "odot;": "\u2299",
      "ogon;": "\u02DB",
      "oint;": "\u222E",
      "omid;": "\u29B6",
      "Oopf;": "\u{1D546}",
      "oopf;": "\u{1D560}",
      "opar;": "\u29B7",
      "ordf;": "\xAA",
      "ordm;": "\xBA",
      "oror;": "\u2A56",
      "Oscr;": "\u{1D4AA}",
      "oscr;": "\u2134",
      "osol;": "\u2298",
      "Ouml;": "\xD6",
      "ouml;": "\xF6",
      "para;": "\xB6",
      "part;": "\u2202",
      "perp;": "\u22A5",
      "phiv;": "\u03D5",
      "plus;": "+",
      "Popf;": "\u2119",
      "popf;": "\u{1D561}",
      pound: "\xA3",
      "prap;": "\u2AB7",
      "prec;": "\u227A",
      "prnE;": "\u2AB5",
      "prod;": "\u220F",
      "prop;": "\u221D",
      "Pscr;": "\u{1D4AB}",
      "pscr;": "\u{1D4C5}",
      "qint;": "\u2A0C",
      "Qopf;": "\u211A",
      "qopf;": "\u{1D562}",
      "Qscr;": "\u{1D4AC}",
      "qscr;": "\u{1D4C6}",
      "QUOT;": '"',
      "quot;": '"',
      "race;": "\u223D\u0331",
      "Rang;": "\u27EB",
      "rang;": "\u27E9",
      raquo: "\xBB",
      "Rarr;": "\u21A0",
      "rArr;": "\u21D2",
      "rarr;": "\u2192",
      "rcub;": "}",
      "rdca;": "\u2937",
      "rdsh;": "\u21B3",
      "real;": "\u211C",
      "rect;": "\u25AD",
      "rHar;": "\u2964",
      "rhov;": "\u03F1",
      "ring;": "\u02DA",
      "Ropf;": "\u211D",
      "ropf;": "\u{1D563}",
      "rpar;": ")",
      "Rscr;": "\u211B",
      "rscr;": "\u{1D4C7}",
      "rsqb;": "]",
      "rtri;": "\u25B9",
      "scap;": "\u2AB8",
      "scnE;": "\u2AB6",
      "sdot;": "\u22C5",
      "sect;": "\xA7",
      "semi;": ";",
      "sext;": "\u2736",
      "SHcy;": "\u0428",
      "shcy;": "\u0448",
      "sime;": "\u2243",
      "simg;": "\u2A9E",
      "siml;": "\u2A9D",
      "smid;": "\u2223",
      "smte;": "\u2AAC",
      "solb;": "\u29C4",
      "Sopf;": "\u{1D54A}",
      "sopf;": "\u{1D564}",
      "spar;": "\u2225",
      "Sqrt;": "\u221A",
      "squf;": "\u25AA",
      "Sscr;": "\u{1D4AE}",
      "sscr;": "\u{1D4C8}",
      "Star;": "\u22C6",
      "star;": "\u2606",
      "subE;": "\u2AC5",
      "sube;": "\u2286",
      "succ;": "\u227B",
      "sung;": "\u266A",
      "sup1;": "\xB9",
      "sup2;": "\xB2",
      "sup3;": "\xB3",
      "supE;": "\u2AC6",
      "supe;": "\u2287",
      szlig: "\xDF",
      "tbrk;": "\u23B4",
      "tdot;": "\u20DB",
      THORN: "\xDE",
      thorn: "\xFE",
      times: "\xD7",
      "tint;": "\u222D",
      "toea;": "\u2928",
      "Topf;": "\u{1D54B}",
      "topf;": "\u{1D565}",
      "tosa;": "\u2929",
      "trie;": "\u225C",
      "Tscr;": "\u{1D4AF}",
      "tscr;": "\u{1D4C9}",
      "TScy;": "\u0426",
      "tscy;": "\u0446",
      "Uarr;": "\u219F",
      "uArr;": "\u21D1",
      "uarr;": "\u2191",
      Ucirc: "\xDB",
      ucirc: "\xFB",
      "uHar;": "\u2963",
      "Uopf;": "\u{1D54C}",
      "uopf;": "\u{1D566}",
      "Upsi;": "\u03D2",
      "upsi;": "\u03C5",
      "Uscr;": "\u{1D4B0}",
      "uscr;": "\u{1D4CA}",
      "utri;": "\u25B5",
      "Uuml;": "\xDC",
      "uuml;": "\xFC",
      "vArr;": "\u21D5",
      "varr;": "\u2195",
      "Vbar;": "\u2AEB",
      "vBar;": "\u2AE8",
      "Vert;": "\u2016",
      "vert;": "|",
      "Vopf;": "\u{1D54D}",
      "vopf;": "\u{1D567}",
      "Vscr;": "\u{1D4B1}",
      "vscr;": "\u{1D4CB}",
      "Wopf;": "\u{1D54E}",
      "wopf;": "\u{1D568}",
      "Wscr;": "\u{1D4B2}",
      "wscr;": "\u{1D4CC}",
      "xcap;": "\u22C2",
      "xcup;": "\u22C3",
      "xmap;": "\u27FC",
      "xnis;": "\u22FB",
      "Xopf;": "\u{1D54F}",
      "xopf;": "\u{1D569}",
      "Xscr;": "\u{1D4B3}",
      "xscr;": "\u{1D4CD}",
      "xvee;": "\u22C1",
      "YAcy;": "\u042F",
      "yacy;": "\u044F",
      "YIcy;": "\u0407",
      "yicy;": "\u0457",
      "Yopf;": "\u{1D550}",
      "yopf;": "\u{1D56A}",
      "Yscr;": "\u{1D4B4}",
      "yscr;": "\u{1D4CE}",
      "YUcy;": "\u042E",
      "yucy;": "\u044E",
      "Yuml;": "\u0178",
      "yuml;": "\xFF",
      "Zdot;": "\u017B",
      "zdot;": "\u017C",
      "Zeta;": "\u0396",
      "zeta;": "\u03B6",
      "ZHcy;": "\u0416",
      "zhcy;": "\u0436",
      "Zopf;": "\u2124",
      "zopf;": "\u{1D56B}",
      "Zscr;": "\u{1D4B5}",
      "zscr;": "\u{1D4CF}",
      "zwnj;": "\u200C",
      Aacute: "\xC1",
      aacute: "\xE1",
      "Acirc;": "\xC2",
      "acirc;": "\xE2",
      "acute;": "\xB4",
      "AElig;": "\xC6",
      "aelig;": "\xE6",
      Agrave: "\xC0",
      agrave: "\xE0",
      "aleph;": "\u2135",
      "Alpha;": "\u0391",
      "alpha;": "\u03B1",
      "Amacr;": "\u0100",
      "amacr;": "\u0101",
      "amalg;": "\u2A3F",
      "angle;": "\u2220",
      "angrt;": "\u221F",
      "angst;": "\xC5",
      "Aogon;": "\u0104",
      "aogon;": "\u0105",
      "Aring;": "\xC5",
      "aring;": "\xE5",
      "asymp;": "\u2248",
      Atilde: "\xC3",
      atilde: "\xE3",
      "awint;": "\u2A11",
      "bcong;": "\u224C",
      "bdquo;": "\u201E",
      "bepsi;": "\u03F6",
      "blank;": "\u2423",
      "blk12;": "\u2592",
      "blk14;": "\u2591",
      "blk34;": "\u2593",
      "block;": "\u2588",
      "boxDL;": "\u2557",
      "boxDl;": "\u2556",
      "boxdL;": "\u2555",
      "boxdl;": "\u2510",
      "boxDR;": "\u2554",
      "boxDr;": "\u2553",
      "boxdR;": "\u2552",
      "boxdr;": "\u250C",
      "boxHD;": "\u2566",
      "boxHd;": "\u2564",
      "boxhD;": "\u2565",
      "boxhd;": "\u252C",
      "boxHU;": "\u2569",
      "boxHu;": "\u2567",
      "boxhU;": "\u2568",
      "boxhu;": "\u2534",
      "boxUL;": "\u255D",
      "boxUl;": "\u255C",
      "boxuL;": "\u255B",
      "boxul;": "\u2518",
      "boxUR;": "\u255A",
      "boxUr;": "\u2559",
      "boxuR;": "\u2558",
      "boxur;": "\u2514",
      "boxVH;": "\u256C",
      "boxVh;": "\u256B",
      "boxvH;": "\u256A",
      "boxvh;": "\u253C",
      "boxVL;": "\u2563",
      "boxVl;": "\u2562",
      "boxvL;": "\u2561",
      "boxvl;": "\u2524",
      "boxVR;": "\u2560",
      "boxVr;": "\u255F",
      "boxvR;": "\u255E",
      "boxvr;": "\u251C",
      "Breve;": "\u02D8",
      "breve;": "\u02D8",
      brvbar: "\xA6",
      "bsemi;": "\u204F",
      "bsime;": "\u22CD",
      "bsolb;": "\u29C5",
      "bumpE;": "\u2AAE",
      "bumpe;": "\u224F",
      "caret;": "\u2041",
      "caron;": "\u02C7",
      "ccaps;": "\u2A4D",
      Ccedil: "\xC7",
      ccedil: "\xE7",
      "Ccirc;": "\u0108",
      "ccirc;": "\u0109",
      "ccups;": "\u2A4C",
      "cedil;": "\xB8",
      "check;": "\u2713",
      "clubs;": "\u2663",
      "Colon;": "\u2237",
      "colon;": ":",
      "comma;": ",",
      "crarr;": "\u21B5",
      "Cross;": "\u2A2F",
      "cross;": "\u2717",
      "csube;": "\u2AD1",
      "csupe;": "\u2AD2",
      "ctdot;": "\u22EF",
      "cuepr;": "\u22DE",
      "cuesc;": "\u22DF",
      "cupor;": "\u2A45",
      curren: "\xA4",
      "cuvee;": "\u22CE",
      "cuwed;": "\u22CF",
      "cwint;": "\u2231",
      "Dashv;": "\u2AE4",
      "dashv;": "\u22A3",
      "dblac;": "\u02DD",
      "ddarr;": "\u21CA",
      "Delta;": "\u0394",
      "delta;": "\u03B4",
      "dharl;": "\u21C3",
      "dharr;": "\u21C2",
      "diams;": "\u2666",
      "disin;": "\u22F2",
      divide: "\xF7",
      "doteq;": "\u2250",
      "dtdot;": "\u22F1",
      "dtrif;": "\u25BE",
      "duarr;": "\u21F5",
      "duhar;": "\u296F",
      Eacute: "\xC9",
      eacute: "\xE9",
      "Ecirc;": "\xCA",
      "ecirc;": "\xEA",
      "eDDot;": "\u2A77",
      "efDot;": "\u2252",
      Egrave: "\xC8",
      egrave: "\xE8",
      "Emacr;": "\u0112",
      "emacr;": "\u0113",
      "empty;": "\u2205",
      "Eogon;": "\u0118",
      "eogon;": "\u0119",
      "eplus;": "\u2A71",
      "epsiv;": "\u03F5",
      "eqsim;": "\u2242",
      "Equal;": "\u2A75",
      "equiv;": "\u2261",
      "erarr;": "\u2971",
      "erDot;": "\u2253",
      "esdot;": "\u2250",
      "exist;": "\u2203",
      "fflig;": "\uFB00",
      "filig;": "\uFB01",
      "fjlig;": "fj",
      "fllig;": "\uFB02",
      "fltns;": "\u25B1",
      "forkv;": "\u2AD9",
      frac12: "\xBD",
      frac14: "\xBC",
      frac34: "\xBE",
      "frasl;": "\u2044",
      "frown;": "\u2322",
      "Gamma;": "\u0393",
      "gamma;": "\u03B3",
      "Gcirc;": "\u011C",
      "gcirc;": "\u011D",
      "gescc;": "\u2AA9",
      "gimel;": "\u2137",
      "gneqq;": "\u2269",
      "gnsim;": "\u22E7",
      "grave;": "`",
      "gsime;": "\u2A8E",
      "gsiml;": "\u2A90",
      "gtcir;": "\u2A7A",
      "gtdot;": "\u22D7",
      "Hacek;": "\u02C7",
      "harrw;": "\u21AD",
      "Hcirc;": "\u0124",
      "hcirc;": "\u0125",
      "hoarr;": "\u21FF",
      Iacute: "\xCD",
      iacute: "\xED",
      "Icirc;": "\xCE",
      "icirc;": "\xEE",
      "iexcl;": "\xA1",
      Igrave: "\xCC",
      igrave: "\xEC",
      "iiint;": "\u222D",
      "iiota;": "\u2129",
      "IJlig;": "\u0132",
      "ijlig;": "\u0133",
      "Imacr;": "\u012A",
      "imacr;": "\u012B",
      "image;": "\u2111",
      "imath;": "\u0131",
      "imped;": "\u01B5",
      "infin;": "\u221E",
      "Iogon;": "\u012E",
      "iogon;": "\u012F",
      "iprod;": "\u2A3C",
      iquest: "\xBF",
      "isinE;": "\u22F9",
      "isins;": "\u22F4",
      "isinv;": "\u2208",
      "Iukcy;": "\u0406",
      "iukcy;": "\u0456",
      "Jcirc;": "\u0134",
      "jcirc;": "\u0135",
      "jmath;": "\u0237",
      "Jukcy;": "\u0404",
      "jukcy;": "\u0454",
      "Kappa;": "\u039A",
      "kappa;": "\u03BA",
      "lAarr;": "\u21DA",
      "langd;": "\u2991",
      "laquo;": "\xAB",
      "larrb;": "\u21E4",
      "lates;": "\u2AAD\uFE00",
      "lBarr;": "\u290E",
      "lbarr;": "\u290C",
      "lbbrk;": "\u2772",
      "lbrke;": "\u298B",
      "lceil;": "\u2308",
      "ldquo;": "\u201C",
      "lescc;": "\u2AA8",
      "lhard;": "\u21BD",
      "lharu;": "\u21BC",
      "lhblk;": "\u2584",
      "llarr;": "\u21C7",
      "lltri;": "\u25FA",
      "lneqq;": "\u2268",
      "lnsim;": "\u22E6",
      "loang;": "\u27EC",
      "loarr;": "\u21FD",
      "lobrk;": "\u27E6",
      "lopar;": "\u2985",
      "lrarr;": "\u21C6",
      "lrhar;": "\u21CB",
      "lrtri;": "\u22BF",
      "lsime;": "\u2A8D",
      "lsimg;": "\u2A8F",
      "lsquo;": "\u2018",
      "ltcir;": "\u2A79",
      "ltdot;": "\u22D6",
      "ltrie;": "\u22B4",
      "ltrif;": "\u25C2",
      "mdash;": "\u2014",
      "mDDot;": "\u223A",
      "micro;": "\xB5",
      middot: "\xB7",
      "minus;": "\u2212",
      "mumap;": "\u22B8",
      "nabla;": "\u2207",
      "napid;": "\u224B\u0338",
      "napos;": "\u0149",
      "natur;": "\u266E",
      "nbump;": "\u224E\u0338",
      "ncong;": "\u2247",
      "ndash;": "\u2013",
      "neArr;": "\u21D7",
      "nearr;": "\u2197",
      "nedot;": "\u2250\u0338",
      "nesim;": "\u2242\u0338",
      "ngeqq;": "\u2267\u0338",
      "ngsim;": "\u2275",
      "nhArr;": "\u21CE",
      "nharr;": "\u21AE",
      "nhpar;": "\u2AF2",
      "nlArr;": "\u21CD",
      "nlarr;": "\u219A",
      "nleqq;": "\u2266\u0338",
      "nless;": "\u226E",
      "nlsim;": "\u2274",
      "nltri;": "\u22EA",
      "notin;": "\u2209",
      "notni;": "\u220C",
      "npart;": "\u2202\u0338",
      "nprec;": "\u2280",
      "nrArr;": "\u21CF",
      "nrarr;": "\u219B",
      "nrtri;": "\u22EB",
      "nsime;": "\u2244",
      "nsmid;": "\u2224",
      "nspar;": "\u2226",
      "nsubE;": "\u2AC5\u0338",
      "nsube;": "\u2288",
      "nsucc;": "\u2281",
      "nsupE;": "\u2AC6\u0338",
      "nsupe;": "\u2289",
      Ntilde: "\xD1",
      ntilde: "\xF1",
      "numsp;": "\u2007",
      "nvsim;": "\u223C\u20D2",
      "nwArr;": "\u21D6",
      "nwarr;": "\u2196",
      Oacute: "\xD3",
      oacute: "\xF3",
      "Ocirc;": "\xD4",
      "ocirc;": "\xF4",
      "odash;": "\u229D",
      "OElig;": "\u0152",
      "oelig;": "\u0153",
      "ofcir;": "\u29BF",
      Ograve: "\xD2",
      ograve: "\xF2",
      "ohbar;": "\u29B5",
      "olarr;": "\u21BA",
      "olcir;": "\u29BE",
      "oline;": "\u203E",
      "Omacr;": "\u014C",
      "omacr;": "\u014D",
      "Omega;": "\u03A9",
      "omega;": "\u03C9",
      "operp;": "\u29B9",
      "oplus;": "\u2295",
      "orarr;": "\u21BB",
      "order;": "\u2134",
      Oslash: "\xD8",
      oslash: "\xF8",
      Otilde: "\xD5",
      otilde: "\xF5",
      "ovbar;": "\u233D",
      "parsl;": "\u2AFD",
      "phone;": "\u260E",
      "plusb;": "\u229E",
      "pluse;": "\u2A72",
      plusmn: "\xB1",
      "pound;": "\xA3",
      "prcue;": "\u227C",
      "Prime;": "\u2033",
      "prime;": "\u2032",
      "prnap;": "\u2AB9",
      "prsim;": "\u227E",
      "quest;": "?",
      "rAarr;": "\u21DB",
      "radic;": "\u221A",
      "rangd;": "\u2992",
      "range;": "\u29A5",
      "raquo;": "\xBB",
      "rarrb;": "\u21E5",
      "rarrc;": "\u2933",
      "rarrw;": "\u219D",
      "ratio;": "\u2236",
      "RBarr;": "\u2910",
      "rBarr;": "\u290F",
      "rbarr;": "\u290D",
      "rbbrk;": "\u2773",
      "rbrke;": "\u298C",
      "rceil;": "\u2309",
      "rdquo;": "\u201D",
      "reals;": "\u211D",
      "rhard;": "\u21C1",
      "rharu;": "\u21C0",
      "rlarr;": "\u21C4",
      "rlhar;": "\u21CC",
      "rnmid;": "\u2AEE",
      "roang;": "\u27ED",
      "roarr;": "\u21FE",
      "robrk;": "\u27E7",
      "ropar;": "\u2986",
      "rrarr;": "\u21C9",
      "rsquo;": "\u2019",
      "rtrie;": "\u22B5",
      "rtrif;": "\u25B8",
      "sbquo;": "\u201A",
      "sccue;": "\u227D",
      "Scirc;": "\u015C",
      "scirc;": "\u015D",
      "scnap;": "\u2ABA",
      "scsim;": "\u227F",
      "sdotb;": "\u22A1",
      "sdote;": "\u2A66",
      "seArr;": "\u21D8",
      "searr;": "\u2198",
      "setmn;": "\u2216",
      "sharp;": "\u266F",
      "Sigma;": "\u03A3",
      "sigma;": "\u03C3",
      "simeq;": "\u2243",
      "simgE;": "\u2AA0",
      "simlE;": "\u2A9F",
      "simne;": "\u2246",
      "slarr;": "\u2190",
      "smile;": "\u2323",
      "smtes;": "\u2AAC\uFE00",
      "sqcap;": "\u2293",
      "sqcup;": "\u2294",
      "sqsub;": "\u228F",
      "sqsup;": "\u2290",
      "srarr;": "\u2192",
      "starf;": "\u2605",
      "strns;": "\xAF",
      "subnE;": "\u2ACB",
      "subne;": "\u228A",
      "supnE;": "\u2ACC",
      "supne;": "\u228B",
      "swArr;": "\u21D9",
      "swarr;": "\u2199",
      "szlig;": "\xDF",
      "Theta;": "\u0398",
      "theta;": "\u03B8",
      "thkap;": "\u2248",
      "THORN;": "\xDE",
      "thorn;": "\xFE",
      "Tilde;": "\u223C",
      "tilde;": "\u02DC",
      "times;": "\xD7",
      "TRADE;": "\u2122",
      "trade;": "\u2122",
      "trisb;": "\u29CD",
      "TSHcy;": "\u040B",
      "tshcy;": "\u045B",
      "twixt;": "\u226C",
      Uacute: "\xDA",
      uacute: "\xFA",
      "Ubrcy;": "\u040E",
      "ubrcy;": "\u045E",
      "Ucirc;": "\xDB",
      "ucirc;": "\xFB",
      "udarr;": "\u21C5",
      "udhar;": "\u296E",
      Ugrave: "\xD9",
      ugrave: "\xF9",
      "uharl;": "\u21BF",
      "uharr;": "\u21BE",
      "uhblk;": "\u2580",
      "ultri;": "\u25F8",
      "Umacr;": "\u016A",
      "umacr;": "\u016B",
      "Union;": "\u22C3",
      "Uogon;": "\u0172",
      "uogon;": "\u0173",
      "uplus;": "\u228E",
      "upsih;": "\u03D2",
      "UpTee;": "\u22A5",
      "Uring;": "\u016E",
      "uring;": "\u016F",
      "urtri;": "\u25F9",
      "utdot;": "\u22F0",
      "utrif;": "\u25B4",
      "uuarr;": "\u21C8",
      "varpi;": "\u03D6",
      "vBarv;": "\u2AE9",
      "VDash;": "\u22AB",
      "Vdash;": "\u22A9",
      "vDash;": "\u22A8",
      "vdash;": "\u22A2",
      "veeeq;": "\u225A",
      "vltri;": "\u22B2",
      "vnsub;": "\u2282\u20D2",
      "vnsup;": "\u2283\u20D2",
      "vprop;": "\u221D",
      "vrtri;": "\u22B3",
      "Wcirc;": "\u0174",
      "wcirc;": "\u0175",
      "Wedge;": "\u22C0",
      "wedge;": "\u2227",
      "xcirc;": "\u25EF",
      "xdtri;": "\u25BD",
      "xhArr;": "\u27FA",
      "xharr;": "\u27F7",
      "xlArr;": "\u27F8",
      "xlarr;": "\u27F5",
      "xodot;": "\u2A00",
      "xrArr;": "\u27F9",
      "xrarr;": "\u27F6",
      "xutri;": "\u25B3",
      Yacute: "\xDD",
      yacute: "\xFD",
      "Ycirc;": "\u0176",
      "ycirc;": "\u0177",
      "Aacute;": "\xC1",
      "aacute;": "\xE1",
      "Abreve;": "\u0102",
      "abreve;": "\u0103",
      "Agrave;": "\xC0",
      "agrave;": "\xE0",
      "andand;": "\u2A55",
      "angmsd;": "\u2221",
      "angsph;": "\u2222",
      "apacir;": "\u2A6F",
      "approx;": "\u2248",
      "Assign;": "\u2254",
      "Atilde;": "\xC3",
      "atilde;": "\xE3",
      "barvee;": "\u22BD",
      "Barwed;": "\u2306",
      "barwed;": "\u2305",
      "becaus;": "\u2235",
      "bernou;": "\u212C",
      "bigcap;": "\u22C2",
      "bigcup;": "\u22C3",
      "bigvee;": "\u22C1",
      "bkarow;": "\u290D",
      "bottom;": "\u22A5",
      "bowtie;": "\u22C8",
      "boxbox;": "\u29C9",
      "bprime;": "\u2035",
      "brvbar;": "\xA6",
      "bullet;": "\u2022",
      "Bumpeq;": "\u224E",
      "bumpeq;": "\u224F",
      "Cacute;": "\u0106",
      "cacute;": "\u0107",
      "capand;": "\u2A44",
      "capcap;": "\u2A4B",
      "capcup;": "\u2A47",
      "capdot;": "\u2A40",
      "Ccaron;": "\u010C",
      "ccaron;": "\u010D",
      "Ccedil;": "\xC7",
      "ccedil;": "\xE7",
      "circeq;": "\u2257",
      "cirmid;": "\u2AEF",
      "Colone;": "\u2A74",
      "colone;": "\u2254",
      "commat;": "@",
      "compfn;": "\u2218",
      "Conint;": "\u222F",
      "conint;": "\u222E",
      "coprod;": "\u2210",
      "copysr;": "\u2117",
      "cularr;": "\u21B6",
      "CupCap;": "\u224D",
      "cupcap;": "\u2A46",
      "cupcup;": "\u2A4A",
      "cupdot;": "\u228D",
      "curarr;": "\u21B7",
      "curren;": "\xA4",
      "cylcty;": "\u232D",
      "Dagger;": "\u2021",
      "dagger;": "\u2020",
      "daleth;": "\u2138",
      "Dcaron;": "\u010E",
      "dcaron;": "\u010F",
      "dfisht;": "\u297F",
      "divide;": "\xF7",
      "divonx;": "\u22C7",
      "dlcorn;": "\u231E",
      "dlcrop;": "\u230D",
      "dollar;": "$",
      "DotDot;": "\u20DC",
      "drcorn;": "\u231F",
      "drcrop;": "\u230C",
      "Dstrok;": "\u0110",
      "dstrok;": "\u0111",
      "Eacute;": "\xC9",
      "eacute;": "\xE9",
      "easter;": "\u2A6E",
      "Ecaron;": "\u011A",
      "ecaron;": "\u011B",
      "ecolon;": "\u2255",
      "Egrave;": "\xC8",
      "egrave;": "\xE8",
      "egsdot;": "\u2A98",
      "elsdot;": "\u2A97",
      "emptyv;": "\u2205",
      "emsp13;": "\u2004",
      "emsp14;": "\u2005",
      "eparsl;": "\u29E3",
      "eqcirc;": "\u2256",
      "equals;": "=",
      "equest;": "\u225F",
      "Exists;": "\u2203",
      "female;": "\u2640",
      "ffilig;": "\uFB03",
      "ffllig;": "\uFB04",
      "ForAll;": "\u2200",
      "forall;": "\u2200",
      "frac12;": "\xBD",
      "frac13;": "\u2153",
      "frac14;": "\xBC",
      "frac15;": "\u2155",
      "frac16;": "\u2159",
      "frac18;": "\u215B",
      "frac23;": "\u2154",
      "frac25;": "\u2156",
      "frac34;": "\xBE",
      "frac35;": "\u2157",
      "frac38;": "\u215C",
      "frac45;": "\u2158",
      "frac56;": "\u215A",
      "frac58;": "\u215D",
      "frac78;": "\u215E",
      "gacute;": "\u01F5",
      "Gammad;": "\u03DC",
      "gammad;": "\u03DD",
      "Gbreve;": "\u011E",
      "gbreve;": "\u011F",
      "Gcedil;": "\u0122",
      "gesdot;": "\u2A80",
      "gesles;": "\u2A94",
      "gtlPar;": "\u2995",
      "gtrarr;": "\u2978",
      "gtrdot;": "\u22D7",
      "gtrsim;": "\u2273",
      "hairsp;": "\u200A",
      "hamilt;": "\u210B",
      "HARDcy;": "\u042A",
      "hardcy;": "\u044A",
      "hearts;": "\u2665",
      "hellip;": "\u2026",
      "hercon;": "\u22B9",
      "homtht;": "\u223B",
      "horbar;": "\u2015",
      "hslash;": "\u210F",
      "Hstrok;": "\u0126",
      "hstrok;": "\u0127",
      "hybull;": "\u2043",
      "hyphen;": "\u2010",
      "Iacute;": "\xCD",
      "iacute;": "\xED",
      "Igrave;": "\xCC",
      "igrave;": "\xEC",
      "iiiint;": "\u2A0C",
      "iinfin;": "\u29DC",
      "incare;": "\u2105",
      "inodot;": "\u0131",
      "intcal;": "\u22BA",
      "iquest;": "\xBF",
      "isinsv;": "\u22F3",
      "Itilde;": "\u0128",
      "itilde;": "\u0129",
      "Jsercy;": "\u0408",
      "jsercy;": "\u0458",
      "kappav;": "\u03F0",
      "Kcedil;": "\u0136",
      "kcedil;": "\u0137",
      "kgreen;": "\u0138",
      "Lacute;": "\u0139",
      "lacute;": "\u013A",
      "lagran;": "\u2112",
      "Lambda;": "\u039B",
      "lambda;": "\u03BB",
      "langle;": "\u27E8",
      "larrfs;": "\u291D",
      "larrhk;": "\u21A9",
      "larrlp;": "\u21AB",
      "larrpl;": "\u2939",
      "larrtl;": "\u21A2",
      "lAtail;": "\u291B",
      "latail;": "\u2919",
      "lbrace;": "{",
      "lbrack;": "[",
      "Lcaron;": "\u013D",
      "lcaron;": "\u013E",
      "Lcedil;": "\u013B",
      "lcedil;": "\u013C",
      "ldquor;": "\u201E",
      "lesdot;": "\u2A7F",
      "lesges;": "\u2A93",
      "lfisht;": "\u297C",
      "lfloor;": "\u230A",
      "lharul;": "\u296A",
      "llhard;": "\u296B",
      "Lmidot;": "\u013F",
      "lmidot;": "\u0140",
      "lmoust;": "\u23B0",
      "loplus;": "\u2A2D",
      "lowast;": "\u2217",
      "lowbar;": "_",
      "lparlt;": "\u2993",
      "lrhard;": "\u296D",
      "lsaquo;": "\u2039",
      "lsquor;": "\u201A",
      "Lstrok;": "\u0141",
      "lstrok;": "\u0142",
      "lthree;": "\u22CB",
      "ltimes;": "\u22C9",
      "ltlarr;": "\u2976",
      "ltrPar;": "\u2996",
      "mapsto;": "\u21A6",
      "marker;": "\u25AE",
      "mcomma;": "\u2A29",
      "midast;": "*",
      "midcir;": "\u2AF0",
      "middot;": "\xB7",
      "minusb;": "\u229F",
      "minusd;": "\u2238",
      "mnplus;": "\u2213",
      "models;": "\u22A7",
      "mstpos;": "\u223E",
      "Nacute;": "\u0143",
      "nacute;": "\u0144",
      "nbumpe;": "\u224F\u0338",
      "Ncaron;": "\u0147",
      "ncaron;": "\u0148",
      "Ncedil;": "\u0145",
      "ncedil;": "\u0146",
      "nearhk;": "\u2924",
      "nequiv;": "\u2262",
      "nesear;": "\u2928",
      "nexist;": "\u2204",
      "nltrie;": "\u22EC",
      "notinE;": "\u22F9\u0338",
      "nparsl;": "\u2AFD\u20E5",
      "nprcue;": "\u22E0",
      "nrarrc;": "\u2933\u0338",
      "nrarrw;": "\u219D\u0338",
      "nrtrie;": "\u22ED",
      "nsccue;": "\u22E1",
      "nsimeq;": "\u2244",
      "Ntilde;": "\xD1",
      "ntilde;": "\xF1",
      "numero;": "\u2116",
      "nVDash;": "\u22AF",
      "nVdash;": "\u22AE",
      "nvDash;": "\u22AD",
      "nvdash;": "\u22AC",
      "nvHarr;": "\u2904",
      "nvlArr;": "\u2902",
      "nvrArr;": "\u2903",
      "nwarhk;": "\u2923",
      "nwnear;": "\u2927",
      "Oacute;": "\xD3",
      "oacute;": "\xF3",
      "Odblac;": "\u0150",
      "odblac;": "\u0151",
      "odsold;": "\u29BC",
      "Ograve;": "\xD2",
      "ograve;": "\xF2",
      "ominus;": "\u2296",
      "origof;": "\u22B6",
      "Oslash;": "\xD8",
      "oslash;": "\xF8",
      "Otilde;": "\xD5",
      "otilde;": "\xF5",
      "Otimes;": "\u2A37",
      "otimes;": "\u2297",
      "parsim;": "\u2AF3",
      "percnt;": "%",
      "period;": ".",
      "permil;": "\u2030",
      "phmmat;": "\u2133",
      "planck;": "\u210F",
      "plankv;": "\u210F",
      "plusdo;": "\u2214",
      "plusdu;": "\u2A25",
      "plusmn;": "\xB1",
      "preceq;": "\u2AAF",
      "primes;": "\u2119",
      "prnsim;": "\u22E8",
      "propto;": "\u221D",
      "prurel;": "\u22B0",
      "puncsp;": "\u2008",
      "qprime;": "\u2057",
      "Racute;": "\u0154",
      "racute;": "\u0155",
      "rangle;": "\u27E9",
      "rarrap;": "\u2975",
      "rarrfs;": "\u291E",
      "rarrhk;": "\u21AA",
      "rarrlp;": "\u21AC",
      "rarrpl;": "\u2945",
      "Rarrtl;": "\u2916",
      "rarrtl;": "\u21A3",
      "rAtail;": "\u291C",
      "ratail;": "\u291A",
      "rbrace;": "}",
      "rbrack;": "]",
      "Rcaron;": "\u0158",
      "rcaron;": "\u0159",
      "Rcedil;": "\u0156",
      "rcedil;": "\u0157",
      "rdquor;": "\u201D",
      "rfisht;": "\u297D",
      "rfloor;": "\u230B",
      "rharul;": "\u296C",
      "rmoust;": "\u23B1",
      "roplus;": "\u2A2E",
      "rpargt;": "\u2994",
      "rsaquo;": "\u203A",
      "rsquor;": "\u2019",
      "rthree;": "\u22CC",
      "rtimes;": "\u22CA",
      "Sacute;": "\u015A",
      "sacute;": "\u015B",
      "Scaron;": "\u0160",
      "scaron;": "\u0161",
      "Scedil;": "\u015E",
      "scedil;": "\u015F",
      "scnsim;": "\u22E9",
      "searhk;": "\u2925",
      "seswar;": "\u2929",
      "sfrown;": "\u2322",
      "SHCHcy;": "\u0429",
      "shchcy;": "\u0449",
      "sigmaf;": "\u03C2",
      "sigmav;": "\u03C2",
      "simdot;": "\u2A6A",
      "smashp;": "\u2A33",
      "SOFTcy;": "\u042C",
      "softcy;": "\u044C",
      "solbar;": "\u233F",
      "spades;": "\u2660",
      "sqcaps;": "\u2293\uFE00",
      "sqcups;": "\u2294\uFE00",
      "sqsube;": "\u2291",
      "sqsupe;": "\u2292",
      "Square;": "\u25A1",
      "square;": "\u25A1",
      "squarf;": "\u25AA",
      "ssetmn;": "\u2216",
      "ssmile;": "\u2323",
      "sstarf;": "\u22C6",
      "subdot;": "\u2ABD",
      "Subset;": "\u22D0",
      "subset;": "\u2282",
      "subsim;": "\u2AC7",
      "subsub;": "\u2AD5",
      "subsup;": "\u2AD3",
      "succeq;": "\u2AB0",
      "supdot;": "\u2ABE",
      "Supset;": "\u22D1",
      "supset;": "\u2283",
      "supsim;": "\u2AC8",
      "supsub;": "\u2AD4",
      "supsup;": "\u2AD6",
      "swarhk;": "\u2926",
      "swnwar;": "\u292A",
      "target;": "\u2316",
      "Tcaron;": "\u0164",
      "tcaron;": "\u0165",
      "Tcedil;": "\u0162",
      "tcedil;": "\u0163",
      "telrec;": "\u2315",
      "there4;": "\u2234",
      "thetav;": "\u03D1",
      "thinsp;": "\u2009",
      "thksim;": "\u223C",
      "timesb;": "\u22A0",
      "timesd;": "\u2A30",
      "topbot;": "\u2336",
      "topcir;": "\u2AF1",
      "tprime;": "\u2034",
      "tridot;": "\u25EC",
      "Tstrok;": "\u0166",
      "tstrok;": "\u0167",
      "Uacute;": "\xDA",
      "uacute;": "\xFA",
      "Ubreve;": "\u016C",
      "ubreve;": "\u016D",
      "Udblac;": "\u0170",
      "udblac;": "\u0171",
      "ufisht;": "\u297E",
      "Ugrave;": "\xD9",
      "ugrave;": "\xF9",
      "ulcorn;": "\u231C",
      "ulcrop;": "\u230F",
      "urcorn;": "\u231D",
      "urcrop;": "\u230E",
      "Utilde;": "\u0168",
      "utilde;": "\u0169",
      "vangrt;": "\u299C",
      "varphi;": "\u03D5",
      "varrho;": "\u03F1",
      "Vdashl;": "\u2AE6",
      "veebar;": "\u22BB",
      "vellip;": "\u22EE",
      "Verbar;": "\u2016",
      "verbar;": "|",
      "vsubnE;": "\u2ACB\uFE00",
      "vsubne;": "\u228A\uFE00",
      "vsupnE;": "\u2ACC\uFE00",
      "vsupne;": "\u228B\uFE00",
      "Vvdash;": "\u22AA",
      "wedbar;": "\u2A5F",
      "wedgeq;": "\u2259",
      "weierp;": "\u2118",
      "wreath;": "\u2240",
      "xoplus;": "\u2A01",
      "xotime;": "\u2A02",
      "xsqcup;": "\u2A06",
      "xuplus;": "\u2A04",
      "xwedge;": "\u22C0",
      "Yacute;": "\xDD",
      "yacute;": "\xFD",
      "Zacute;": "\u0179",
      "zacute;": "\u017A",
      "Zcaron;": "\u017D",
      "zcaron;": "\u017E",
      "zeetrf;": "\u2128",
      "alefsym;": "\u2135",
      "angrtvb;": "\u22BE",
      "angzarr;": "\u237C",
      "asympeq;": "\u224D",
      "backsim;": "\u223D",
      "Because;": "\u2235",
      "because;": "\u2235",
      "bemptyv;": "\u29B0",
      "between;": "\u226C",
      "bigcirc;": "\u25EF",
      "bigodot;": "\u2A00",
      "bigstar;": "\u2605",
      "bnequiv;": "\u2261\u20E5",
      "boxplus;": "\u229E",
      "Cayleys;": "\u212D",
      "Cconint;": "\u2230",
      "ccupssm;": "\u2A50",
      "Cedilla;": "\xB8",
      "cemptyv;": "\u29B2",
      "cirscir;": "\u29C2",
      "coloneq;": "\u2254",
      "congdot;": "\u2A6D",
      "cudarrl;": "\u2938",
      "cudarrr;": "\u2935",
      "cularrp;": "\u293D",
      "curarrm;": "\u293C",
      "dbkarow;": "\u290F",
      "ddagger;": "\u2021",
      "ddotseq;": "\u2A77",
      "demptyv;": "\u29B1",
      "Diamond;": "\u22C4",
      "diamond;": "\u22C4",
      "digamma;": "\u03DD",
      "dotplus;": "\u2214",
      "DownTee;": "\u22A4",
      "dwangle;": "\u29A6",
      "Element;": "\u2208",
      "Epsilon;": "\u0395",
      "epsilon;": "\u03B5",
      "eqcolon;": "\u2255",
      "equivDD;": "\u2A78",
      "gesdoto;": "\u2A82",
      "gtquest;": "\u2A7C",
      "gtrless;": "\u2277",
      "harrcir;": "\u2948",
      "Implies;": "\u21D2",
      "intprod;": "\u2A3C",
      "isindot;": "\u22F5",
      "larrbfs;": "\u291F",
      "larrsim;": "\u2973",
      "lbrksld;": "\u298F",
      "lbrkslu;": "\u298D",
      "ldrdhar;": "\u2967",
      "LeftTee;": "\u22A3",
      "lesdoto;": "\u2A81",
      "lessdot;": "\u22D6",
      "lessgtr;": "\u2276",
      "lesssim;": "\u2272",
      "lotimes;": "\u2A34",
      "lozenge;": "\u25CA",
      "ltquest;": "\u2A7B",
      "luruhar;": "\u2966",
      "maltese;": "\u2720",
      "minusdu;": "\u2A2A",
      "napprox;": "\u2249",
      "natural;": "\u266E",
      "nearrow;": "\u2197",
      "NewLine;": "\n",
      "nexists;": "\u2204",
      "NoBreak;": "\u2060",
      "notinva;": "\u2209",
      "notinvb;": "\u22F7",
      "notinvc;": "\u22F6",
      "NotLess;": "\u226E",
      "notniva;": "\u220C",
      "notnivb;": "\u22FE",
      "notnivc;": "\u22FD",
      "npolint;": "\u2A14",
      "npreceq;": "\u2AAF\u0338",
      "nsqsube;": "\u22E2",
      "nsqsupe;": "\u22E3",
      "nsubset;": "\u2282\u20D2",
      "nsucceq;": "\u2AB0\u0338",
      "nsupset;": "\u2283\u20D2",
      "nvinfin;": "\u29DE",
      "nvltrie;": "\u22B4\u20D2",
      "nvrtrie;": "\u22B5\u20D2",
      "nwarrow;": "\u2196",
      "olcross;": "\u29BB",
      "Omicron;": "\u039F",
      "omicron;": "\u03BF",
      "orderof;": "\u2134",
      "orslope;": "\u2A57",
      "OverBar;": "\u203E",
      "pertenk;": "\u2031",
      "planckh;": "\u210E",
      "pluscir;": "\u2A22",
      "plussim;": "\u2A26",
      "plustwo;": "\u2A27",
      "precsim;": "\u227E",
      "Product;": "\u220F",
      "quatint;": "\u2A16",
      "questeq;": "\u225F",
      "rarrbfs;": "\u2920",
      "rarrsim;": "\u2974",
      "rbrksld;": "\u298E",
      "rbrkslu;": "\u2990",
      "rdldhar;": "\u2969",
      "realine;": "\u211B",
      "rotimes;": "\u2A35",
      "ruluhar;": "\u2968",
      "searrow;": "\u2198",
      "simplus;": "\u2A24",
      "simrarr;": "\u2972",
      "subedot;": "\u2AC3",
      "submult;": "\u2AC1",
      "subplus;": "\u2ABF",
      "subrarr;": "\u2979",
      "succsim;": "\u227F",
      "supdsub;": "\u2AD8",
      "supedot;": "\u2AC4",
      "suphsol;": "\u27C9",
      "suphsub;": "\u2AD7",
      "suplarr;": "\u297B",
      "supmult;": "\u2AC2",
      "supplus;": "\u2AC0",
      "swarrow;": "\u2199",
      "topfork;": "\u2ADA",
      "triplus;": "\u2A39",
      "tritime;": "\u2A3B",
      "UpArrow;": "\u2191",
      "Uparrow;": "\u21D1",
      "uparrow;": "\u2191",
      "Upsilon;": "\u03A5",
      "upsilon;": "\u03C5",
      "uwangle;": "\u29A7",
      "vzigzag;": "\u299A",
      "zigrarr;": "\u21DD",
      "andslope;": "\u2A58",
      "angmsdaa;": "\u29A8",
      "angmsdab;": "\u29A9",
      "angmsdac;": "\u29AA",
      "angmsdad;": "\u29AB",
      "angmsdae;": "\u29AC",
      "angmsdaf;": "\u29AD",
      "angmsdag;": "\u29AE",
      "angmsdah;": "\u29AF",
      "angrtvbd;": "\u299D",
      "approxeq;": "\u224A",
      "awconint;": "\u2233",
      "backcong;": "\u224C",
      "barwedge;": "\u2305",
      "bbrktbrk;": "\u23B6",
      "bigoplus;": "\u2A01",
      "bigsqcup;": "\u2A06",
      "biguplus;": "\u2A04",
      "bigwedge;": "\u22C0",
      "boxminus;": "\u229F",
      "boxtimes;": "\u22A0",
      "bsolhsub;": "\u27C8",
      "capbrcup;": "\u2A49",
      "circledR;": "\xAE",
      "circledS;": "\u24C8",
      "cirfnint;": "\u2A10",
      "clubsuit;": "\u2663",
      "cupbrcap;": "\u2A48",
      "curlyvee;": "\u22CE",
      "cwconint;": "\u2232",
      "DDotrahd;": "\u2911",
      "doteqdot;": "\u2251",
      "DotEqual;": "\u2250",
      "dotminus;": "\u2238",
      "drbkarow;": "\u2910",
      "dzigrarr;": "\u27FF",
      "elinters;": "\u23E7",
      "emptyset;": "\u2205",
      "eqvparsl;": "\u29E5",
      "fpartint;": "\u2A0D",
      "geqslant;": "\u2A7E",
      "gesdotol;": "\u2A84",
      "gnapprox;": "\u2A8A",
      "hksearow;": "\u2925",
      "hkswarow;": "\u2926",
      "imagline;": "\u2110",
      "imagpart;": "\u2111",
      "infintie;": "\u29DD",
      "integers;": "\u2124",
      "Integral;": "\u222B",
      "intercal;": "\u22BA",
      "intlarhk;": "\u2A17",
      "laemptyv;": "\u29B4",
      "ldrushar;": "\u294B",
      "leqslant;": "\u2A7D",
      "lesdotor;": "\u2A83",
      "LessLess;": "\u2AA1",
      "llcorner;": "\u231E",
      "lnapprox;": "\u2A89",
      "lrcorner;": "\u231F",
      "lurdshar;": "\u294A",
      "mapstoup;": "\u21A5",
      "multimap;": "\u22B8",
      "naturals;": "\u2115",
      "ncongdot;": "\u2A6D\u0338",
      "NotEqual;": "\u2260",
      "notindot;": "\u22F5\u0338",
      "NotTilde;": "\u2241",
      "otimesas;": "\u2A36",
      "parallel;": "\u2225",
      "PartialD;": "\u2202",
      "plusacir;": "\u2A23",
      "pointint;": "\u2A15",
      "Precedes;": "\u227A",
      "precneqq;": "\u2AB5",
      "precnsim;": "\u22E8",
      "profalar;": "\u232E",
      "profline;": "\u2312",
      "profsurf;": "\u2313",
      "raemptyv;": "\u29B3",
      "realpart;": "\u211C",
      "RightTee;": "\u22A2",
      "rppolint;": "\u2A12",
      "rtriltri;": "\u29CE",
      "scpolint;": "\u2A13",
      "setminus;": "\u2216",
      "shortmid;": "\u2223",
      "smeparsl;": "\u29E4",
      "sqsubset;": "\u228F",
      "sqsupset;": "\u2290",
      "subseteq;": "\u2286",
      "Succeeds;": "\u227B",
      "succneqq;": "\u2AB6",
      "succnsim;": "\u22E9",
      "SuchThat;": "\u220B",
      "Superset;": "\u2283",
      "supseteq;": "\u2287",
      "thetasym;": "\u03D1",
      "thicksim;": "\u223C",
      "timesbar;": "\u2A31",
      "triangle;": "\u25B5",
      "triminus;": "\u2A3A",
      "trpezium;": "\u23E2",
      "Uarrocir;": "\u2949",
      "ulcorner;": "\u231C",
      "UnderBar;": "_",
      "urcorner;": "\u231D",
      "varkappa;": "\u03F0",
      "varsigma;": "\u03C2",
      "vartheta;": "\u03D1",
      "backprime;": "\u2035",
      "backsimeq;": "\u22CD",
      "Backslash;": "\u2216",
      "bigotimes;": "\u2A02",
      "CenterDot;": "\xB7",
      "centerdot;": "\xB7",
      "checkmark;": "\u2713",
      "CircleDot;": "\u2299",
      "complexes;": "\u2102",
      "Congruent;": "\u2261",
      "Coproduct;": "\u2210",
      "dotsquare;": "\u22A1",
      "DoubleDot;": "\xA8",
      "DownArrow;": "\u2193",
      "Downarrow;": "\u21D3",
      "downarrow;": "\u2193",
      "DownBreve;": "\u0311",
      "gtrapprox;": "\u2A86",
      "gtreqless;": "\u22DB",
      "gvertneqq;": "\u2269\uFE00",
      "heartsuit;": "\u2665",
      "HumpEqual;": "\u224F",
      "LeftArrow;": "\u2190",
      "Leftarrow;": "\u21D0",
      "leftarrow;": "\u2190",
      "LeftFloor;": "\u230A",
      "lesseqgtr;": "\u22DA",
      "LessTilde;": "\u2272",
      "lvertneqq;": "\u2268\uFE00",
      "Mellintrf;": "\u2133",
      "MinusPlus;": "\u2213",
      "ngeqslant;": "\u2A7E\u0338",
      "nleqslant;": "\u2A7D\u0338",
      "NotCupCap;": "\u226D",
      "NotExists;": "\u2204",
      "NotSubset;": "\u2282\u20D2",
      "nparallel;": "\u2226",
      "nshortmid;": "\u2224",
      "nsubseteq;": "\u2288",
      "nsupseteq;": "\u2289",
      "OverBrace;": "\u23DE",
      "pitchfork;": "\u22D4",
      "PlusMinus;": "\xB1",
      "rationals;": "\u211A",
      "spadesuit;": "\u2660",
      "subseteqq;": "\u2AC5",
      "subsetneq;": "\u228A",
      "supseteqq;": "\u2AC6",
      "supsetneq;": "\u228B",
      "Therefore;": "\u2234",
      "therefore;": "\u2234",
      "ThinSpace;": "\u2009",
      "triangleq;": "\u225C",
      "TripleDot;": "\u20DB",
      "UnionPlus;": "\u228E",
      "varpropto;": "\u221D",
      "Bernoullis;": "\u212C",
      "circledast;": "\u229B",
      "CirclePlus;": "\u2295",
      "complement;": "\u2201",
      "curlywedge;": "\u22CF",
      "eqslantgtr;": "\u2A96",
      "EqualTilde;": "\u2242",
      "Fouriertrf;": "\u2131",
      "gtreqqless;": "\u2A8C",
      "ImaginaryI;": "\u2148",
      "Laplacetrf;": "\u2112",
      "LeftVector;": "\u21BC",
      "lessapprox;": "\u2A85",
      "lesseqqgtr;": "\u2A8B",
      "Lleftarrow;": "\u21DA",
      "lmoustache;": "\u23B0",
      "longmapsto;": "\u27FC",
      "mapstodown;": "\u21A7",
      "mapstoleft;": "\u21A4",
      "nLeftarrow;": "\u21CD",
      "nleftarrow;": "\u219A",
      "NotElement;": "\u2209",
      "NotGreater;": "\u226F",
      "nsubseteqq;": "\u2AC5\u0338",
      "nsupseteqq;": "\u2AC6\u0338",
      "precapprox;": "\u2AB7",
      "Proportion;": "\u2237",
      "RightArrow;": "\u2192",
      "Rightarrow;": "\u21D2",
      "rightarrow;": "\u2192",
      "RightFloor;": "\u230B",
      "rmoustache;": "\u23B1",
      "sqsubseteq;": "\u2291",
      "sqsupseteq;": "\u2292",
      "subsetneqq;": "\u2ACB",
      "succapprox;": "\u2AB8",
      "supsetneqq;": "\u2ACC",
      "ThickSpace;": "\u205F\u200A",
      "TildeEqual;": "\u2243",
      "TildeTilde;": "\u2248",
      "UnderBrace;": "\u23DF",
      "UpArrowBar;": "\u2912",
      "UpTeeArrow;": "\u21A5",
      "upuparrows;": "\u21C8",
      "varepsilon;": "\u03F5",
      "varnothing;": "\u2205",
      "backepsilon;": "\u03F6",
      "blacksquare;": "\u25AA",
      "circledcirc;": "\u229A",
      "circleddash;": "\u229D",
      "CircleMinus;": "\u2296",
      "CircleTimes;": "\u2297",
      "curlyeqprec;": "\u22DE",
      "curlyeqsucc;": "\u22DF",
      "diamondsuit;": "\u2666",
      "eqslantless;": "\u2A95",
      "Equilibrium;": "\u21CC",
      "expectation;": "\u2130",
      "GreaterLess;": "\u2277",
      "LeftCeiling;": "\u2308",
      "LessGreater;": "\u2276",
      "MediumSpace;": "\u205F",
      "NotLessLess;": "\u226A\u0338",
      "NotPrecedes;": "\u2280",
      "NotSucceeds;": "\u2281",
      "NotSuperset;": "\u2283\u20D2",
      "nRightarrow;": "\u21CF",
      "nrightarrow;": "\u219B",
      "OverBracket;": "\u23B4",
      "preccurlyeq;": "\u227C",
      "precnapprox;": "\u2AB9",
      "quaternions;": "\u210D",
      "RightVector;": "\u21C0",
      "Rrightarrow;": "\u21DB",
      "RuleDelayed;": "\u29F4",
      "SmallCircle;": "\u2218",
      "SquareUnion;": "\u2294",
      "straightphi;": "\u03D5",
      "SubsetEqual;": "\u2286",
      "succcurlyeq;": "\u227D",
      "succnapprox;": "\u2ABA",
      "thickapprox;": "\u2248",
      "UpDownArrow;": "\u2195",
      "Updownarrow;": "\u21D5",
      "updownarrow;": "\u2195",
      "VerticalBar;": "\u2223",
      "blacklozenge;": "\u29EB",
      "DownArrowBar;": "\u2913",
      "DownTeeArrow;": "\u21A7",
      "ExponentialE;": "\u2147",
      "exponentiale;": "\u2147",
      "GreaterEqual;": "\u2265",
      "GreaterTilde;": "\u2273",
      "HilbertSpace;": "\u210B",
      "HumpDownHump;": "\u224E",
      "Intersection;": "\u22C2",
      "LeftArrowBar;": "\u21E4",
      "LeftTeeArrow;": "\u21A4",
      "LeftTriangle;": "\u22B2",
      "LeftUpVector;": "\u21BF",
      "NotCongruent;": "\u2262",
      "NotHumpEqual;": "\u224F\u0338",
      "NotLessEqual;": "\u2270",
      "NotLessTilde;": "\u2274",
      "Proportional;": "\u221D",
      "RightCeiling;": "\u2309",
      "risingdotseq;": "\u2253",
      "RoundImplies;": "\u2970",
      "ShortUpArrow;": "\u2191",
      "SquareSubset;": "\u228F",
      "triangledown;": "\u25BF",
      "triangleleft;": "\u25C3",
      "UnderBracket;": "\u23B5",
      "varsubsetneq;": "\u228A\uFE00",
      "varsupsetneq;": "\u228B\uFE00",
      "VerticalLine;": "|",
      "ApplyFunction;": "\u2061",
      "bigtriangleup;": "\u25B3",
      "blacktriangle;": "\u25B4",
      "DifferentialD;": "\u2146",
      "divideontimes;": "\u22C7",
      "DoubleLeftTee;": "\u2AE4",
      "DoubleUpArrow;": "\u21D1",
      "fallingdotseq;": "\u2252",
      "hookleftarrow;": "\u21A9",
      "leftarrowtail;": "\u21A2",
      "leftharpoonup;": "\u21BC",
      "LeftTeeVector;": "\u295A",
      "LeftVectorBar;": "\u2952",
      "LessFullEqual;": "\u2266",
      "LongLeftArrow;": "\u27F5",
      "Longleftarrow;": "\u27F8",
      "longleftarrow;": "\u27F5",
      "looparrowleft;": "\u21AB",
      "measuredangle;": "\u2221",
      "NotEqualTilde;": "\u2242\u0338",
      "NotTildeEqual;": "\u2244",
      "NotTildeTilde;": "\u2249",
      "ntriangleleft;": "\u22EA",
      "Poincareplane;": "\u210C",
      "PrecedesEqual;": "\u2AAF",
      "PrecedesTilde;": "\u227E",
      "RightArrowBar;": "\u21E5",
      "RightTeeArrow;": "\u21A6",
      "RightTriangle;": "\u22B3",
      "RightUpVector;": "\u21BE",
      "shortparallel;": "\u2225",
      "smallsetminus;": "\u2216",
      "SucceedsEqual;": "\u2AB0",
      "SucceedsTilde;": "\u227F",
      "SupersetEqual;": "\u2287",
      "triangleright;": "\u25B9",
      "UpEquilibrium;": "\u296E",
      "upharpoonleft;": "\u21BF",
      "varsubsetneqq;": "\u2ACB\uFE00",
      "varsupsetneqq;": "\u2ACC\uFE00",
      "VerticalTilde;": "\u2240",
      "VeryThinSpace;": "\u200A",
      "curvearrowleft;": "\u21B6",
      "DiacriticalDot;": "\u02D9",
      "doublebarwedge;": "\u2306",
      "DoubleRightTee;": "\u22A8",
      "downdownarrows;": "\u21CA",
      "DownLeftVector;": "\u21BD",
      "GreaterGreater;": "\u2AA2",
      "hookrightarrow;": "\u21AA",
      "HorizontalLine;": "\u2500",
      "InvisibleComma;": "\u2063",
      "InvisibleTimes;": "\u2062",
      "LeftDownVector;": "\u21C3",
      "leftleftarrows;": "\u21C7",
      "LeftRightArrow;": "\u2194",
      "Leftrightarrow;": "\u21D4",
      "leftrightarrow;": "\u2194",
      "leftthreetimes;": "\u22CB",
      "LessSlantEqual;": "\u2A7D",
      "LongRightArrow;": "\u27F6",
      "Longrightarrow;": "\u27F9",
      "longrightarrow;": "\u27F6",
      "looparrowright;": "\u21AC",
      "LowerLeftArrow;": "\u2199",
      "NestedLessLess;": "\u226A",
      "NotGreaterLess;": "\u2279",
      "NotLessGreater;": "\u2278",
      "NotSubsetEqual;": "\u2288",
      "NotVerticalBar;": "\u2224",
      "nshortparallel;": "\u2226",
      "ntriangleright;": "\u22EB",
      "OpenCurlyQuote;": "\u2018",
      "ReverseElement;": "\u220B",
      "rightarrowtail;": "\u21A3",
      "rightharpoonup;": "\u21C0",
      "RightTeeVector;": "\u295B",
      "RightVectorBar;": "\u2953",
      "ShortDownArrow;": "\u2193",
      "ShortLeftArrow;": "\u2190",
      "SquareSuperset;": "\u2290",
      "TildeFullEqual;": "\u2245",
      "trianglelefteq;": "\u22B4",
      "upharpoonright;": "\u21BE",
      "UpperLeftArrow;": "\u2196",
      "ZeroWidthSpace;": "\u200B",
      "bigtriangledown;": "\u25BD",
      "circlearrowleft;": "\u21BA",
      "CloseCurlyQuote;": "\u2019",
      "ContourIntegral;": "\u222E",
      "curvearrowright;": "\u21B7",
      "DoubleDownArrow;": "\u21D3",
      "DoubleLeftArrow;": "\u21D0",
      "downharpoonleft;": "\u21C3",
      "DownRightVector;": "\u21C1",
      "leftharpoondown;": "\u21BD",
      "leftrightarrows;": "\u21C6",
      "LeftRightVector;": "\u294E",
      "LeftTriangleBar;": "\u29CF",
      "LeftUpTeeVector;": "\u2960",
      "LeftUpVectorBar;": "\u2958",
      "LowerRightArrow;": "\u2198",
      "nLeftrightarrow;": "\u21CE",
      "nleftrightarrow;": "\u21AE",
      "NotGreaterEqual;": "\u2271",
      "NotGreaterTilde;": "\u2275",
      "NotHumpDownHump;": "\u224E\u0338",
      "NotLeftTriangle;": "\u22EA",
      "NotSquareSubset;": "\u228F\u0338",
      "ntrianglelefteq;": "\u22EC",
      "OverParenthesis;": "\u23DC",
      "RightDownVector;": "\u21C2",
      "rightleftarrows;": "\u21C4",
      "rightsquigarrow;": "\u219D",
      "rightthreetimes;": "\u22CC",
      "ShortRightArrow;": "\u2192",
      "straightepsilon;": "\u03F5",
      "trianglerighteq;": "\u22B5",
      "UpperRightArrow;": "\u2197",
      "vartriangleleft;": "\u22B2",
      "circlearrowright;": "\u21BB",
      "DiacriticalAcute;": "\xB4",
      "DiacriticalGrave;": "`",
      "DiacriticalTilde;": "\u02DC",
      "DoubleRightArrow;": "\u21D2",
      "DownArrowUpArrow;": "\u21F5",
      "downharpoonright;": "\u21C2",
      "EmptySmallSquare;": "\u25FB",
      "GreaterEqualLess;": "\u22DB",
      "GreaterFullEqual;": "\u2267",
      "LeftAngleBracket;": "\u27E8",
      "LeftUpDownVector;": "\u2951",
      "LessEqualGreater;": "\u22DA",
      "NonBreakingSpace;": "\xA0",
      "NotPrecedesEqual;": "\u2AAF\u0338",
      "NotRightTriangle;": "\u22EB",
      "NotSucceedsEqual;": "\u2AB0\u0338",
      "NotSucceedsTilde;": "\u227F\u0338",
      "NotSupersetEqual;": "\u2289",
      "ntrianglerighteq;": "\u22ED",
      "rightharpoondown;": "\u21C1",
      "rightrightarrows;": "\u21C9",
      "RightTriangleBar;": "\u29D0",
      "RightUpTeeVector;": "\u295C",
      "RightUpVectorBar;": "\u2954",
      "twoheadleftarrow;": "\u219E",
      "UnderParenthesis;": "\u23DD",
      "UpArrowDownArrow;": "\u21C5",
      "vartriangleright;": "\u22B3",
      "blacktriangledown;": "\u25BE",
      "blacktriangleleft;": "\u25C2",
      "DoubleUpDownArrow;": "\u21D5",
      "DoubleVerticalBar;": "\u2225",
      "DownLeftTeeVector;": "\u295E",
      "DownLeftVectorBar;": "\u2956",
      "FilledSmallSquare;": "\u25FC",
      "GreaterSlantEqual;": "\u2A7E",
      "LeftDoubleBracket;": "\u27E6",
      "LeftDownTeeVector;": "\u2961",
      "LeftDownVectorBar;": "\u2959",
      "leftrightharpoons;": "\u21CB",
      "LeftTriangleEqual;": "\u22B4",
      "NegativeThinSpace;": "\u200B",
      "NotGreaterGreater;": "\u226B\u0338",
      "NotLessSlantEqual;": "\u2A7D\u0338",
      "NotNestedLessLess;": "\u2AA1\u0338",
      "NotReverseElement;": "\u220C",
      "NotSquareSuperset;": "\u2290\u0338",
      "NotTildeFullEqual;": "\u2247",
      "RightAngleBracket;": "\u27E9",
      "rightleftharpoons;": "\u21CC",
      "RightUpDownVector;": "\u294F",
      "SquareSubsetEqual;": "\u2291",
      "twoheadrightarrow;": "\u21A0",
      "VerticalSeparator;": "\u2758",
      "blacktriangleright;": "\u25B8",
      "DownRightTeeVector;": "\u295F",
      "DownRightVectorBar;": "\u2957",
      "LongLeftRightArrow;": "\u27F7",
      "Longleftrightarrow;": "\u27FA",
      "longleftrightarrow;": "\u27F7",
      "NegativeThickSpace;": "\u200B",
      "NotLeftTriangleBar;": "\u29CF\u0338",
      "PrecedesSlantEqual;": "\u227C",
      "ReverseEquilibrium;": "\u21CB",
      "RightDoubleBracket;": "\u27E7",
      "RightDownTeeVector;": "\u295D",
      "RightDownVectorBar;": "\u2955",
      "RightTriangleEqual;": "\u22B5",
      "SquareIntersection;": "\u2293",
      "SucceedsSlantEqual;": "\u227D",
      "DoubleLongLeftArrow;": "\u27F8",
      "DownLeftRightVector;": "\u2950",
      "LeftArrowRightArrow;": "\u21C6",
      "leftrightsquigarrow;": "\u21AD",
      "NegativeMediumSpace;": "\u200B",
      "NotGreaterFullEqual;": "\u2267\u0338",
      "NotRightTriangleBar;": "\u29D0\u0338",
      "RightArrowLeftArrow;": "\u21C4",
      "SquareSupersetEqual;": "\u2292",
      "CapitalDifferentialD;": "\u2145",
      "DoubleLeftRightArrow;": "\u21D4",
      "DoubleLongRightArrow;": "\u27F9",
      "EmptyVerySmallSquare;": "\u25AB",
      "NestedGreaterGreater;": "\u226B",
      "NotDoubleVerticalBar;": "\u2226",
      "NotGreaterSlantEqual;": "\u2A7E\u0338",
      "NotLeftTriangleEqual;": "\u22EC",
      "NotSquareSubsetEqual;": "\u22E2",
      "OpenCurlyDoubleQuote;": "\u201C",
      "ReverseUpEquilibrium;": "\u296F",
      "CloseCurlyDoubleQuote;": "\u201D",
      "DoubleContourIntegral;": "\u222F",
      "FilledVerySmallSquare;": "\u25AA",
      "NegativeVeryThinSpace;": "\u200B",
      "NotPrecedesSlantEqual;": "\u22E0",
      "NotRightTriangleEqual;": "\u22ED",
      "NotSucceedsSlantEqual;": "\u22E1",
      "DiacriticalDoubleAcute;": "\u02DD",
      "NotSquareSupersetEqual;": "\u22E3",
      "NotNestedGreaterGreater;": "\u2AA2\u0338",
      "ClockwiseContourIntegral;": "\u2232",
      "DoubleLongLeftRightArrow;": "\u27FA",
      "CounterClockwiseContourIntegral;": "\u2233"
    };
    decodeHtml = (rawText, asAttr) => {
      let offset = 0;
      const end = rawText.length;
      let decodedText = "";
      function advance2(length2) {
        offset += length2;
        rawText = rawText.slice(length2);
      }
      while (offset < end) {
        const head = /&(?:#x?)?/i.exec(rawText);
        if (!head || offset + head.index >= end) {
          const remaining = end - offset;
          decodedText += rawText.slice(0, remaining);
          advance2(remaining);
          break;
        }
        decodedText += rawText.slice(0, head.index);
        advance2(head.index);
        if (head[0] === "&") {
          let name = "";
          let value = void 0;
          if (/[0-9a-z]/i.test(rawText[1])) {
            if (!maxCRNameLength) {
              maxCRNameLength = Object.keys(namedCharacterReferences).reduce((max, name2) => Math.max(max, name2.length), 0);
            }
            for (let length2 = maxCRNameLength; !value && length2 > 0; --length2) {
              name = rawText.slice(1, 1 + length2);
              value = namedCharacterReferences[name];
            }
            if (value) {
              const semi = name.endsWith(";");
              if (asAttr && !semi && /[=a-z0-9]/i.test(rawText[name.length + 1] || "")) {
                decodedText += "&" + name;
                advance2(1 + name.length);
              } else {
                decodedText += value;
                advance2(1 + name.length);
              }
            } else {
              decodedText += "&" + name;
              advance2(1 + name.length);
            }
          } else {
            decodedText += "&";
            advance2(1);
          }
        } else {
          const hex = head[0] === "&#x";
          const pattern = hex ? /^&#x([0-9a-f]+);?/i : /^&#([0-9]+);?/;
          const body = pattern.exec(rawText);
          if (!body) {
            decodedText += head[0];
            advance2(head[0].length);
          } else {
            let cp = Number.parseInt(body[1], hex ? 16 : 10);
            if (cp === 0) {
              cp = 65533;
            } else if (cp > 1114111) {
              cp = 65533;
            } else if (cp >= 55296 && cp <= 57343) {
              cp = 65533;
            } else if (cp >= 64976 && cp <= 65007 || (cp & 65534) === 65534)
              ;
            else if (cp >= 1 && cp <= 8 || cp === 11 || cp >= 13 && cp <= 31 || cp >= 127 && cp <= 159) {
              cp = CCR_REPLACEMENTS[cp] || cp;
            }
            decodedText += String.fromCodePoint(cp);
            advance2(body[0].length);
          }
        }
      }
      return decodedText;
    };
    CCR_REPLACEMENTS = {
      128: 8364,
      130: 8218,
      131: 402,
      132: 8222,
      133: 8230,
      134: 8224,
      135: 8225,
      136: 710,
      137: 8240,
      138: 352,
      139: 8249,
      140: 338,
      142: 381,
      145: 8216,
      146: 8217,
      147: 8220,
      148: 8221,
      149: 8226,
      150: 8211,
      151: 8212,
      152: 732,
      153: 8482,
      154: 353,
      155: 8250,
      156: 339,
      158: 382,
      159: 376
    };
    isRawTextContainer = /* @__PURE__ */ makeMap("style,iframe,script,noscript", true);
    parserOptions = {
      isVoidTag,
      isNativeTag: (tag2) => isHTMLTag(tag2) || isSVGTag(tag2),
      isPreTag: (tag2) => tag2 === "pre",
      decodeEntities: decodeHtml,
      isBuiltInComponent: (tag2) => {
        if (isBuiltInType(tag2, `Transition`)) {
          return TRANSITION;
        } else if (isBuiltInType(tag2, `TransitionGroup`)) {
          return TRANSITION_GROUP;
        }
      },
      getNamespace(tag2, parent) {
        let ns = parent ? parent.ns : 0;
        if (parent && ns === 2) {
          if (parent.tag === "annotation-xml") {
            if (tag2 === "svg") {
              return 1;
            }
            if (parent.props.some((a) => a.type === 6 && a.name === "encoding" && a.value != null && (a.value.content === "text/html" || a.value.content === "application/xhtml+xml"))) {
              ns = 0;
            }
          } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag2 !== "mglyph" && tag2 !== "malignmark") {
            ns = 0;
          }
        } else if (parent && ns === 1) {
          if (parent.tag === "foreignObject" || parent.tag === "desc" || parent.tag === "title") {
            ns = 0;
          }
        }
        if (ns === 0) {
          if (tag2 === "svg") {
            return 1;
          }
          if (tag2 === "math") {
            return 2;
          }
        }
        return ns;
      },
      getTextMode({ tag: tag2, ns }) {
        if (ns === 0) {
          if (tag2 === "textarea" || tag2 === "title") {
            return 1;
          }
          if (isRawTextContainer(tag2)) {
            return 2;
          }
        }
        return 0;
      }
    };
    transformStyle = (node2) => {
      if (node2.type === 1) {
        node2.props.forEach((p, i) => {
          if (p.type === 6 && p.name === "style" && p.value) {
            node2.props[i] = {
              type: 7,
              name: `bind`,
              arg: createSimpleExpression(`style`, true, p.loc),
              exp: parseInlineCSS(p.value.content, p.loc),
              modifiers: [],
              loc: p.loc
            };
          }
        });
      }
    };
    parseInlineCSS = (cssText, loc) => {
      const normalized = parseStringStyle(cssText);
      return createSimpleExpression(JSON.stringify(normalized), false, loc, 3);
    };
    DOMErrorMessages = {
      [50]: `v-html is missing expression.`,
      [51]: `v-html will override element children.`,
      [52]: `v-text is missing expression.`,
      [53]: `v-text will override element children.`,
      [54]: `v-model can only be used on <input>, <textarea> and <select> elements.`,
      [55]: `v-model argument is not supported on plain elements.`,
      [56]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,
      [57]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,
      [58]: `v-show is missing expression.`,
      [59]: `<Transition> expects exactly one child element or component.`,
      [60]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`
    };
    transformVHtml = (dir, node2, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError(50, loc));
      }
      if (node2.children.length) {
        context.onError(createDOMCompilerError(51, loc));
        node2.children.length = 0;
      }
      return {
        props: [
          createObjectProperty(createSimpleExpression(`innerHTML`, true, loc), exp || createSimpleExpression("", true))
        ]
      };
    };
    transformVText = (dir, node2, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError(52, loc));
      }
      if (node2.children.length) {
        context.onError(createDOMCompilerError(53, loc));
        node2.children.length = 0;
      }
      return {
        props: [
          createObjectProperty(createSimpleExpression(`textContent`, true), exp ? createCallExpression(context.helperString(TO_DISPLAY_STRING), [exp], loc) : createSimpleExpression("", true))
        ]
      };
    };
    transformModel$1 = (dir, node2, context) => {
      const baseResult = transformModel(dir, node2, context);
      if (!baseResult.props.length || node2.tagType === 1) {
        return baseResult;
      }
      if (dir.arg) {
        context.onError(createDOMCompilerError(55, dir.arg.loc));
      }
      function checkDuplicatedValue() {
        const value = findProp(node2, "value");
        if (value) {
          context.onError(createDOMCompilerError(57, value.loc));
        }
      }
      const { tag: tag2 } = node2;
      const isCustomElement = context.isCustomElement(tag2);
      if (tag2 === "input" || tag2 === "textarea" || tag2 === "select" || isCustomElement) {
        let directiveToUse = V_MODEL_TEXT;
        let isInvalidType = false;
        if (tag2 === "input" || isCustomElement) {
          const type = findProp(node2, `type`);
          if (type) {
            if (type.type === 7) {
              directiveToUse = V_MODEL_DYNAMIC;
            } else if (type.value) {
              switch (type.value.content) {
                case "radio":
                  directiveToUse = V_MODEL_RADIO;
                  break;
                case "checkbox":
                  directiveToUse = V_MODEL_CHECKBOX;
                  break;
                case "file":
                  isInvalidType = true;
                  context.onError(createDOMCompilerError(56, dir.loc));
                  break;
                default:
                  checkDuplicatedValue();
                  break;
              }
            }
          } else if (hasDynamicKeyVBind(node2)) {
            directiveToUse = V_MODEL_DYNAMIC;
          } else {
            checkDuplicatedValue();
          }
        } else if (tag2 === "select") {
          directiveToUse = V_MODEL_SELECT;
        } else {
          checkDuplicatedValue();
        }
        if (!isInvalidType) {
          baseResult.needRuntime = context.helper(directiveToUse);
        }
      } else {
        context.onError(createDOMCompilerError(54, dir.loc));
      }
      baseResult.props = baseResult.props.filter((p) => !(p.key.type === 4 && p.key.content === "modelValue"));
      return baseResult;
    };
    isEventOptionModifier = /* @__PURE__ */ makeMap(`passive,once,capture`);
    isNonKeyModifier = /* @__PURE__ */ makeMap(`stop,prevent,self,ctrl,shift,alt,meta,exact,middle`);
    maybeKeyModifier = /* @__PURE__ */ makeMap("left,right");
    isKeyboardEvent = /* @__PURE__ */ makeMap(`onkeyup,onkeydown,onkeypress`, true);
    resolveModifiers = (key, modifiers, context, loc) => {
      const keyModifiers = [];
      const nonKeyModifiers = [];
      const eventOptionModifiers = [];
      for (let i = 0; i < modifiers.length; i++) {
        const modifier = modifiers[i];
        if (isEventOptionModifier(modifier)) {
          eventOptionModifiers.push(modifier);
        } else {
          if (maybeKeyModifier(modifier)) {
            if (isStaticExp(key)) {
              if (isKeyboardEvent(key.content)) {
                keyModifiers.push(modifier);
              } else {
                nonKeyModifiers.push(modifier);
              }
            } else {
              keyModifiers.push(modifier);
              nonKeyModifiers.push(modifier);
            }
          } else {
            if (isNonKeyModifier(modifier)) {
              nonKeyModifiers.push(modifier);
            } else {
              keyModifiers.push(modifier);
            }
          }
        }
      }
      return {
        keyModifiers,
        nonKeyModifiers,
        eventOptionModifiers
      };
    };
    transformClick = (key, event) => {
      const isStaticClick = isStaticExp(key) && key.content.toLowerCase() === "onclick";
      return isStaticClick ? createSimpleExpression(event, true) : key.type !== 4 ? createCompoundExpression([
        `(`,
        key,
        `) === "onClick" ? "${event}" : (`,
        key,
        `)`
      ]) : key;
    };
    transformOn$1 = (dir, node2, context) => {
      return transformOn(dir, node2, context, (baseResult) => {
        const { modifiers } = dir;
        if (!modifiers.length)
          return baseResult;
        let { key, value: handlerExp } = baseResult.props[0];
        const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers, context, dir.loc);
        if (nonKeyModifiers.includes("right")) {
          key = transformClick(key, `onContextmenu`);
        }
        if (nonKeyModifiers.includes("middle")) {
          key = transformClick(key, `onMouseup`);
        }
        if (nonKeyModifiers.length) {
          handlerExp = createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [
            handlerExp,
            JSON.stringify(nonKeyModifiers)
          ]);
        }
        if (keyModifiers.length && (!isStaticExp(key) || isKeyboardEvent(key.content))) {
          handlerExp = createCallExpression(context.helper(V_ON_WITH_KEYS), [
            handlerExp,
            JSON.stringify(keyModifiers)
          ]);
        }
        if (eventOptionModifiers.length) {
          const modifierPostfix = eventOptionModifiers.map(capitalize).join("");
          key = isStaticExp(key) ? createSimpleExpression(`${key.content}${modifierPostfix}`, true) : createCompoundExpression([`(`, key, `) + "${modifierPostfix}"`]);
        }
        return {
          props: [createObjectProperty(key, handlerExp)]
        };
      });
    };
    transformShow = (dir, node2, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError(58, loc));
      }
      return {
        props: [],
        needRuntime: context.helper(V_SHOW)
      };
    };
    warnTransitionChildren = (node2, context) => {
      if (node2.type === 1 && node2.tagType === 1) {
        const component = context.isBuiltInComponent(node2.tag);
        if (component === TRANSITION) {
          return () => {
            if (node2.children.length && hasMultipleChildren(node2)) {
              context.onError(createDOMCompilerError(59, {
                start: node2.children[0].loc.start,
                end: node2.children[node2.children.length - 1].loc.end,
                source: ""
              }));
            }
          };
        }
      }
    };
    expReplaceRE = /__VUE_EXP_START__(.*?)__VUE_EXP_END__/g;
    stringifyStatic = (children, context, parent) => {
      if (context.scopes.vSlot > 0) {
        return;
      }
      let nc = 0;
      let ec = 0;
      const currentChunk = [];
      const stringifyCurrentChunk = (currentIndex) => {
        if (nc >= 20 || ec >= 5) {
          const staticCall = createCallExpression(context.helper(CREATE_STATIC), [
            JSON.stringify(currentChunk.map((node2) => stringifyNode(node2, context)).join("")).replace(expReplaceRE, `" + $1 + "`),
            String(currentChunk.length)
          ]);
          replaceHoist(currentChunk[0], staticCall, context);
          if (currentChunk.length > 1) {
            for (let i2 = 1; i2 < currentChunk.length; i2++) {
              replaceHoist(currentChunk[i2], null, context);
            }
            const deleteCount = currentChunk.length - 1;
            children.splice(currentIndex - currentChunk.length + 1, deleteCount);
            return deleteCount;
          }
        }
        return 0;
      };
      let i = 0;
      for (; i < children.length; i++) {
        const child = children[i];
        const hoisted = getHoistedNode(child);
        if (hoisted) {
          const node2 = child;
          const result2 = analyzeNode(node2);
          if (result2) {
            nc += result2[0];
            ec += result2[1];
            currentChunk.push(node2);
            continue;
          }
        }
        i -= stringifyCurrentChunk(i);
        nc = 0;
        ec = 0;
        currentChunk.length = 0;
      }
      stringifyCurrentChunk(i);
    };
    getHoistedNode = (node2) => (node2.type === 1 && node2.tagType === 0 || node2.type == 12) && node2.codegenNode && node2.codegenNode.type === 4 && node2.codegenNode.hoisted;
    dataAriaRE = /^(data|aria)-/;
    isStringifiableAttr = (name, ns) => {
      return (ns === 0 ? isKnownHtmlAttr(name) : ns === 1 ? isKnownSvgAttr(name) : false) || dataAriaRE.test(name);
    };
    replaceHoist = (node2, replacement, context) => {
      const hoistToReplace = node2.codegenNode.hoisted;
      context.hoists[context.hoists.indexOf(hoistToReplace)] = replacement;
    };
    isNonStringifiable = /* @__PURE__ */ makeMap(`caption,thead,tr,th,tbody,td,tfoot,colgroup,col`);
    ignoreSideEffectTags = (node2, context) => {
      if (node2.type === 1 && node2.tagType === 0 && (node2.tag === "script" || node2.tag === "style")) {
        context.onError(createDOMCompilerError(60, node2.loc));
        context.removeNode();
      }
    };
    DOMNodeTransforms = [
      transformStyle,
      ...[warnTransitionChildren]
    ];
    DOMDirectiveTransforms = {
      cloak: noopDirectiveTransform,
      html: transformVHtml,
      text: transformVText,
      model: transformModel$1,
      on: transformOn$1,
      show: transformShow
    };
    CompilerDOM = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      parserOptions,
      DOMNodeTransforms,
      DOMDirectiveTransforms,
      compile,
      parse: parse$1,
      transformStyle,
      createDOMCompilerError,
      V_MODEL_RADIO,
      V_MODEL_CHECKBOX,
      V_MODEL_TEXT,
      V_MODEL_SELECT,
      V_MODEL_DYNAMIC,
      V_ON_WITH_MODIFIERS,
      V_ON_WITH_KEYS,
      V_SHOW,
      TRANSITION,
      TRANSITION_GROUP,
      baseCompile,
      baseParse,
      transform,
      createTransformContext,
      traverseNode,
      createStructuralDirectiveTransform,
      generate,
      createCompilerError,
      getBaseTransformPreset,
      transformModel,
      transformOn,
      transformBind,
      noopDirectiveTransform,
      processIf,
      processFor,
      createForLoopParams,
      transformExpression,
      processExpression,
      buildSlots,
      trackVForSlotScopes,
      trackSlotScopes,
      transformElement,
      resolveComponentType,
      buildProps,
      buildDirectiveArgs,
      processSlotOutlet,
      generateCodeFrame,
      checkCompatEnabled,
      warnDeprecation,
      locStub,
      createRoot,
      createVNodeCall,
      createArrayExpression,
      createObjectExpression,
      createObjectProperty,
      createSimpleExpression,
      createInterpolation,
      createCompoundExpression,
      createCallExpression,
      createFunctionExpression,
      createConditionalExpression,
      createCacheExpression,
      createBlockStatement,
      createTemplateLiteral,
      createIfStatement,
      createAssignmentExpression,
      createSequenceExpression,
      createReturnStatement,
      isStaticExp,
      isBuiltInType,
      isCoreComponent,
      isSimpleIdentifier,
      isMemberExpressionBrowser,
      isMemberExpressionNode,
      isMemberExpression,
      getInnerRange,
      advancePositionWithClone,
      advancePositionWithMutation,
      assert: assert$1,
      findDir,
      findProp,
      isStaticArgOf,
      hasDynamicKeyVBind,
      isText,
      isVSlot,
      isTemplateNode,
      isSlotOutlet,
      getVNodeHelper,
      getVNodeBlockHelper,
      injectProp,
      toValidAssetId,
      hasScopeRef,
      getMemoedVNodeCall,
      makeBlock,
      walkIdentifiers,
      isReferencedIdentifier,
      isInDestructureAssignment,
      walkFunctionParams,
      walkBlockDeclarations,
      extractIdentifiers,
      isFunctionType,
      isStaticProperty,
      isStaticPropertyKey,
      FRAGMENT,
      TELEPORT,
      SUSPENSE,
      KEEP_ALIVE,
      BASE_TRANSITION,
      OPEN_BLOCK,
      CREATE_BLOCK,
      CREATE_ELEMENT_BLOCK,
      CREATE_VNODE,
      CREATE_ELEMENT_VNODE,
      CREATE_COMMENT,
      CREATE_TEXT,
      CREATE_STATIC,
      RESOLVE_COMPONENT,
      RESOLVE_DYNAMIC_COMPONENT,
      RESOLVE_DIRECTIVE,
      RESOLVE_FILTER,
      WITH_DIRECTIVES,
      RENDER_LIST,
      RENDER_SLOT,
      CREATE_SLOTS,
      TO_DISPLAY_STRING,
      MERGE_PROPS,
      NORMALIZE_CLASS,
      NORMALIZE_STYLE,
      NORMALIZE_PROPS,
      GUARD_REACTIVE_PROPS,
      TO_HANDLERS,
      CAMELIZE,
      CAPITALIZE,
      TO_HANDLER_KEY,
      SET_BLOCK_TRACKING,
      PUSH_SCOPE_ID,
      POP_SCOPE_ID,
      WITH_CTX,
      UNREF,
      IS_REF,
      WITH_MEMO,
      IS_MEMO_SAME,
      helperNameMap,
      registerRuntimeHelpers
    });
    hashSum = sum;
    CSS_VARS_HELPER = `useCssVars`;
    cssVarRE = /v-bind\s*\(((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*)\)/g;
    cssVarsPlugin = (opts) => {
      const { id: id2, isProd } = opts;
      return {
        postcssPlugin: "vue-sfc-vars",
        Declaration(decl) {
          if (cssVarRE.test(decl.value)) {
            decl.value = decl.value.replace(cssVarRE, (_, $1) => {
              return `var(--${genVarName(id2, noramlizeExpression($1), isProd)})`;
            });
          }
        }
      };
    };
    cssVarsPlugin.postcss = true;
    global2 = typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
    lookup = [];
    revLookup = [];
    Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    inited = false;
    toString$1 = {}.toString;
    isArray$1 = Array.isArray || function(arr) {
      return toString$1.call(arr) == "[object Array]";
    };
    INSPECT_MAX_BYTES = 50;
    Buffer2.TYPED_ARRAY_SUPPORT = global2.TYPED_ARRAY_SUPPORT !== void 0 ? global2.TYPED_ARRAY_SUPPORT : true;
    Buffer2.poolSize = 8192;
    Buffer2._augment = function(arr) {
      arr.__proto__ = Buffer2.prototype;
      return arr;
    };
    Buffer2.from = function(value, encodingOrOffset, length2) {
      return from(null, value, encodingOrOffset, length2);
    };
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      Buffer2.prototype.__proto__ = Uint8Array.prototype;
      Buffer2.__proto__ = Uint8Array;
    }
    Buffer2.alloc = function(size, fill2, encoding) {
      return alloc(null, size, fill2, encoding);
    };
    Buffer2.allocUnsafe = function(size) {
      return allocUnsafe(null, size);
    };
    Buffer2.allocUnsafeSlow = function(size) {
      return allocUnsafe(null, size);
    };
    Buffer2.isBuffer = isBuffer;
    Buffer2.compare = function compare(a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError("Arguments must be Buffers");
      }
      if (a === b)
        return 0;
      var x = a.length;
      var y = b.length;
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat(list2, length2) {
      if (!isArray$1(list2)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list2.length === 0) {
        return Buffer2.alloc(0);
      }
      var i;
      if (length2 === void 0) {
        length2 = 0;
        for (i = 0; i < list2.length; ++i) {
          length2 += list2[i].length;
        }
      }
      var buffer = Buffer2.allocUnsafe(length2);
      var pos = 0;
      for (i = 0; i < list2.length; ++i) {
        var buf = list2[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer;
    };
    Buffer2.byteLength = byteLength;
    Buffer2.prototype._isBuffer = true;
    Buffer2.prototype.swap16 = function swap16() {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i = 0; i < len; i += 2) {
        swap$1(this, i, i + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i = 0; i < len; i += 4) {
        swap$1(this, i, i + 3);
        swap$1(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i = 0; i < len; i += 8) {
        swap$1(this, i, i + 7);
        swap$1(this, i + 1, i + 6);
        swap$1(this, i + 2, i + 5);
        swap$1(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString2() {
      var length2 = this.length | 0;
      if (length2 === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length2);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.equals = function equals(b) {
      if (!internalIsBuffer(b))
        throw new TypeError("Argument must be a Buffer");
      if (this === b)
        return true;
      return Buffer2.compare(this, b) === 0;
    };
    Buffer2.prototype.inspect = function inspect() {
      var str = "";
      var max = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
        if (this.length > max)
          str += " ... ";
      }
      return "<Buffer " + str + ">";
    };
    Buffer2.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError("Argument must be a Buffer");
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);
      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    Buffer2.prototype.write = function write2(string2, offset, length2, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length2 = this.length;
        offset = 0;
      } else if (length2 === void 0 && typeof offset === "string") {
        encoding = offset;
        length2 = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length2)) {
          length2 = length2 | 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length2;
          length2 = void 0;
        }
      } else {
        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      }
      var remaining = this.length - offset;
      if (length2 === void 0 || length2 > remaining)
        length2 = remaining;
      if (string2.length > 0 && (length2 < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string2, offset, length2);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string2, offset, length2);
          case "ascii":
            return asciiWrite(this, string2, offset, length2);
          case "latin1":
          case "binary":
            return latin1Write(this, string2, offset, length2);
          case "base64":
            return base64Write(this, string2, offset, length2);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string2, offset, length2);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    MAX_ARGUMENTS_LENGTH = 4096;
    Buffer2.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      var newBuf;
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer2.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer2(sliceLen, void 0);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }
      return newBuf;
    };
    Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      var val = this[offset + --byteLength2];
      var mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var i = byteLength2;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset + --i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return read(this, offset, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return read(this, offset, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return read(this, offset, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return read(this, offset, false, 52, 8);
    };
    Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var mul = 1;
      var i = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var i = byteLength2 - 1;
      var mul = 1;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 255, 0);
      if (!Buffer2.TYPED_ARRAY_SUPPORT)
        value = Math.floor(value);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i = byteLength2 - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 127, -128);
      if (!Buffer2.TYPED_ARRAY_SUPPORT)
        value = Math.floor(value);
      if (value < 0)
        value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("sourceStart out of bounds");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      var i;
      if (this === target && start < targetStart && targetStart < end) {
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1e3 || !Buffer2.TYPED_ARRAY_SUPPORT) {
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
      } else if (typeof val === "number") {
        val = val & 255;
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      var i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer2(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
    chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    BitSet = function BitSet2(arg) {
      this.bits = arg instanceof BitSet2 ? arg.bits.slice() : [];
    };
    BitSet.prototype.add = function add(n2) {
      this.bits[n2 >> 5] |= 1 << (n2 & 31);
    };
    BitSet.prototype.has = function has2(n2) {
      return !!(this.bits[n2 >> 5] & 1 << (n2 & 31));
    };
    Chunk = function Chunk2(start, end, content) {
      this.start = start;
      this.end = end;
      this.original = content;
      this.intro = "";
      this.outro = "";
      this.content = content;
      this.storeName = false;
      this.edited = false;
      Object.defineProperties(this, {
        previous: { writable: true, value: null },
        next: { writable: true, value: null }
      });
    };
    Chunk.prototype.appendLeft = function appendLeft(content) {
      this.outro += content;
    };
    Chunk.prototype.appendRight = function appendRight(content) {
      this.intro = this.intro + content;
    };
    Chunk.prototype.clone = function clone() {
      var chunk = new Chunk(this.start, this.end, this.original);
      chunk.intro = this.intro;
      chunk.outro = this.outro;
      chunk.content = this.content;
      chunk.storeName = this.storeName;
      chunk.edited = this.edited;
      return chunk;
    };
    Chunk.prototype.contains = function contains(index) {
      return this.start < index && index < this.end;
    };
    Chunk.prototype.eachNext = function eachNext(fn) {
      var chunk = this;
      while (chunk) {
        fn(chunk);
        chunk = chunk.next;
      }
    };
    Chunk.prototype.eachPrevious = function eachPrevious(fn) {
      var chunk = this;
      while (chunk) {
        fn(chunk);
        chunk = chunk.previous;
      }
    };
    Chunk.prototype.edit = function edit(content, storeName, contentOnly) {
      this.content = content;
      if (!contentOnly) {
        this.intro = "";
        this.outro = "";
      }
      this.storeName = storeName;
      this.edited = true;
      return this;
    };
    Chunk.prototype.prependLeft = function prependLeft(content) {
      this.outro = content + this.outro;
    };
    Chunk.prototype.prependRight = function prependRight(content) {
      this.intro = content + this.intro;
    };
    Chunk.prototype.split = function split(index) {
      var sliceIndex = index - this.start;
      var originalBefore = this.original.slice(0, sliceIndex);
      var originalAfter = this.original.slice(sliceIndex);
      this.original = originalBefore;
      var newChunk = new Chunk(index, this.end, originalAfter);
      newChunk.outro = this.outro;
      this.outro = "";
      this.end = index;
      if (this.edited) {
        newChunk.edit("", false);
        this.content = "";
      } else {
        this.content = originalBefore;
      }
      newChunk.next = this.next;
      if (newChunk.next) {
        newChunk.next.previous = newChunk;
      }
      newChunk.previous = this;
      this.next = newChunk;
      return newChunk;
    };
    Chunk.prototype.toString = function toString3() {
      return this.intro + this.content + this.outro;
    };
    Chunk.prototype.trimEnd = function trimEnd(rx) {
      this.outro = this.outro.replace(rx, "");
      if (this.outro.length) {
        return true;
      }
      var trimmed = this.content.replace(rx, "");
      if (trimmed.length) {
        if (trimmed !== this.content) {
          this.split(this.start + trimmed.length).edit("", void 0, true);
        }
        return true;
      } else {
        this.edit("", void 0, true);
        this.intro = this.intro.replace(rx, "");
        if (this.intro.length) {
          return true;
        }
      }
    };
    Chunk.prototype.trimStart = function trimStart(rx) {
      this.intro = this.intro.replace(rx, "");
      if (this.intro.length) {
        return true;
      }
      var trimmed = this.content.replace(rx, "");
      if (trimmed.length) {
        if (trimmed !== this.content) {
          this.split(this.end - trimmed.length);
          this.edit("", void 0, true);
        }
        return true;
      } else {
        this.edit("", void 0, true);
        this.outro = this.outro.replace(rx, "");
        if (this.outro.length) {
          return true;
        }
      }
    };
    btoa = function() {
      throw new Error("Unsupported environment: `window.btoa` or `Buffer` should be supported.");
    };
    if (typeof window !== "undefined" && typeof window.btoa === "function") {
      btoa = function(str) {
        return window.btoa(unescape(encodeURIComponent(str)));
      };
    } else if (typeof Buffer2 === "function") {
      btoa = function(str) {
        return Buffer2.from(str, "utf-8").toString("base64");
      };
    }
    SourceMap = function SourceMap2(properties) {
      this.version = 3;
      this.file = properties.file;
      this.sources = properties.sources;
      this.sourcesContent = properties.sourcesContent;
      this.names = properties.names;
      this.mappings = encode$2(properties.mappings);
    };
    SourceMap.prototype.toString = function toString4() {
      return JSON.stringify(this);
    };
    SourceMap.prototype.toUrl = function toUrl() {
      return "data:application/json;charset=utf-8;base64," + btoa(this.toString());
    };
    toString$2 = Object.prototype.toString;
    Mappings = function Mappings2(hires) {
      this.hires = hires;
      this.generatedCodeLine = 0;
      this.generatedCodeColumn = 0;
      this.raw = [];
      this.rawSegments = this.raw[this.generatedCodeLine] = [];
      this.pending = null;
    };
    Mappings.prototype.addEdit = function addEdit(sourceIndex, content, loc, nameIndex) {
      if (content.length) {
        var segment = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];
        if (nameIndex >= 0) {
          segment.push(nameIndex);
        }
        this.rawSegments.push(segment);
      } else if (this.pending) {
        this.rawSegments.push(this.pending);
      }
      this.advance(content);
      this.pending = null;
    };
    Mappings.prototype.addUneditedChunk = function addUneditedChunk(sourceIndex, chunk, original, loc, sourcemapLocations) {
      var originalCharIndex = chunk.start;
      var first = true;
      while (originalCharIndex < chunk.end) {
        if (this.hires || first || sourcemapLocations.has(originalCharIndex)) {
          this.rawSegments.push([this.generatedCodeColumn, sourceIndex, loc.line, loc.column]);
        }
        if (original[originalCharIndex] === "\n") {
          loc.line += 1;
          loc.column = 0;
          this.generatedCodeLine += 1;
          this.raw[this.generatedCodeLine] = this.rawSegments = [];
          this.generatedCodeColumn = 0;
          first = true;
        } else {
          loc.column += 1;
          this.generatedCodeColumn += 1;
          first = false;
        }
        originalCharIndex += 1;
      }
      this.pending = null;
    };
    Mappings.prototype.advance = function advance(str) {
      if (!str) {
        return;
      }
      var lines = str.split("\n");
      if (lines.length > 1) {
        for (var i = 0; i < lines.length - 1; i++) {
          this.generatedCodeLine++;
          this.raw[this.generatedCodeLine] = this.rawSegments = [];
        }
        this.generatedCodeColumn = 0;
      }
      this.generatedCodeColumn += lines[lines.length - 1].length;
    };
    n = "\n";
    warned = {
      insertLeft: false,
      insertRight: false,
      storeName: false
    };
    MagicString = function MagicString2(string2, options) {
      if (options === void 0)
        options = {};
      var chunk = new Chunk(0, string2.length, string2);
      Object.defineProperties(this, {
        original: { writable: true, value: string2 },
        outro: { writable: true, value: "" },
        intro: { writable: true, value: "" },
        firstChunk: { writable: true, value: chunk },
        lastChunk: { writable: true, value: chunk },
        lastSearchedChunk: { writable: true, value: chunk },
        byStart: { writable: true, value: {} },
        byEnd: { writable: true, value: {} },
        filename: { writable: true, value: options.filename },
        indentExclusionRanges: { writable: true, value: options.indentExclusionRanges },
        sourcemapLocations: { writable: true, value: new BitSet() },
        storedNames: { writable: true, value: {} },
        indentStr: { writable: true, value: guessIndent(string2) }
      });
      this.byStart[0] = chunk;
      this.byEnd[string2.length] = chunk;
    };
    MagicString.prototype.addSourcemapLocation = function addSourcemapLocation(char) {
      this.sourcemapLocations.add(char);
    };
    MagicString.prototype.append = function append(content) {
      if (typeof content !== "string") {
        throw new TypeError("outro content must be a string");
      }
      this.outro += content;
      return this;
    };
    MagicString.prototype.appendLeft = function appendLeft2(index, content) {
      if (typeof content !== "string") {
        throw new TypeError("inserted content must be a string");
      }
      this._split(index);
      var chunk = this.byEnd[index];
      if (chunk) {
        chunk.appendLeft(content);
      } else {
        this.intro += content;
      }
      return this;
    };
    MagicString.prototype.appendRight = function appendRight2(index, content) {
      if (typeof content !== "string") {
        throw new TypeError("inserted content must be a string");
      }
      this._split(index);
      var chunk = this.byStart[index];
      if (chunk) {
        chunk.appendRight(content);
      } else {
        this.outro += content;
      }
      return this;
    };
    MagicString.prototype.clone = function clone2() {
      var cloned = new MagicString(this.original, { filename: this.filename });
      var originalChunk = this.firstChunk;
      var clonedChunk = cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone();
      while (originalChunk) {
        cloned.byStart[clonedChunk.start] = clonedChunk;
        cloned.byEnd[clonedChunk.end] = clonedChunk;
        var nextOriginalChunk = originalChunk.next;
        var nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();
        if (nextClonedChunk) {
          clonedChunk.next = nextClonedChunk;
          nextClonedChunk.previous = clonedChunk;
          clonedChunk = nextClonedChunk;
        }
        originalChunk = nextOriginalChunk;
      }
      cloned.lastChunk = clonedChunk;
      if (this.indentExclusionRanges) {
        cloned.indentExclusionRanges = this.indentExclusionRanges.slice();
      }
      cloned.sourcemapLocations = new BitSet(this.sourcemapLocations);
      cloned.intro = this.intro;
      cloned.outro = this.outro;
      return cloned;
    };
    MagicString.prototype.generateDecodedMap = function generateDecodedMap(options) {
      var this$1 = this;
      options = options || {};
      var sourceIndex = 0;
      var names = Object.keys(this.storedNames);
      var mappings = new Mappings(options.hires);
      var locate = getLocator(this.original);
      if (this.intro) {
        mappings.advance(this.intro);
      }
      this.firstChunk.eachNext(function(chunk) {
        var loc = locate(chunk.start);
        if (chunk.intro.length) {
          mappings.advance(chunk.intro);
        }
        if (chunk.edited) {
          mappings.addEdit(sourceIndex, chunk.content, loc, chunk.storeName ? names.indexOf(chunk.original) : -1);
        } else {
          mappings.addUneditedChunk(sourceIndex, chunk, this$1.original, loc, this$1.sourcemapLocations);
        }
        if (chunk.outro.length) {
          mappings.advance(chunk.outro);
        }
      });
      return {
        file: options.file ? options.file.split(/[/\\]/).pop() : null,
        sources: [options.source ? getRelativePath(options.file || "", options.source) : null],
        sourcesContent: options.includeContent ? [this.original] : [null],
        names,
        mappings: mappings.raw
      };
    };
    MagicString.prototype.generateMap = function generateMap(options) {
      return new SourceMap(this.generateDecodedMap(options));
    };
    MagicString.prototype.getIndentString = function getIndentString() {
      return this.indentStr === null ? "	" : this.indentStr;
    };
    MagicString.prototype.indent = function indent(indentStr, options) {
      var pattern = /^[^\r\n]/gm;
      if (isObject$1(indentStr)) {
        options = indentStr;
        indentStr = void 0;
      }
      indentStr = indentStr !== void 0 ? indentStr : this.indentStr || "	";
      if (indentStr === "") {
        return this;
      }
      options = options || {};
      var isExcluded = {};
      if (options.exclude) {
        var exclusions = typeof options.exclude[0] === "number" ? [options.exclude] : options.exclude;
        exclusions.forEach(function(exclusion) {
          for (var i = exclusion[0]; i < exclusion[1]; i += 1) {
            isExcluded[i] = true;
          }
        });
      }
      var shouldIndentNextCharacter = options.indentStart !== false;
      var replacer2 = function(match) {
        if (shouldIndentNextCharacter) {
          return "" + indentStr + match;
        }
        shouldIndentNextCharacter = true;
        return match;
      };
      this.intro = this.intro.replace(pattern, replacer2);
      var charIndex = 0;
      var chunk = this.firstChunk;
      while (chunk) {
        var end = chunk.end;
        if (chunk.edited) {
          if (!isExcluded[charIndex]) {
            chunk.content = chunk.content.replace(pattern, replacer2);
            if (chunk.content.length) {
              shouldIndentNextCharacter = chunk.content[chunk.content.length - 1] === "\n";
            }
          }
        } else {
          charIndex = chunk.start;
          while (charIndex < end) {
            if (!isExcluded[charIndex]) {
              var char = this.original[charIndex];
              if (char === "\n") {
                shouldIndentNextCharacter = true;
              } else if (char !== "\r" && shouldIndentNextCharacter) {
                shouldIndentNextCharacter = false;
                if (charIndex === chunk.start) {
                  chunk.prependRight(indentStr);
                } else {
                  this._splitChunk(chunk, charIndex);
                  chunk = chunk.next;
                  chunk.prependRight(indentStr);
                }
              }
            }
            charIndex += 1;
          }
        }
        charIndex = chunk.end;
        chunk = chunk.next;
      }
      this.outro = this.outro.replace(pattern, replacer2);
      return this;
    };
    MagicString.prototype.insert = function insert() {
      throw new Error("magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)");
    };
    MagicString.prototype.insertLeft = function insertLeft(index, content) {
      if (!warned.insertLeft) {
        console.warn("magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead");
        warned.insertLeft = true;
      }
      return this.appendLeft(index, content);
    };
    MagicString.prototype.insertRight = function insertRight(index, content) {
      if (!warned.insertRight) {
        console.warn("magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead");
        warned.insertRight = true;
      }
      return this.prependRight(index, content);
    };
    MagicString.prototype.move = function move(start, end, index) {
      if (index >= start && index <= end) {
        throw new Error("Cannot move a selection inside itself");
      }
      this._split(start);
      this._split(end);
      this._split(index);
      var first = this.byStart[start];
      var last2 = this.byEnd[end];
      var oldLeft = first.previous;
      var oldRight = last2.next;
      var newRight = this.byStart[index];
      if (!newRight && last2 === this.lastChunk) {
        return this;
      }
      var newLeft = newRight ? newRight.previous : this.lastChunk;
      if (oldLeft) {
        oldLeft.next = oldRight;
      }
      if (oldRight) {
        oldRight.previous = oldLeft;
      }
      if (newLeft) {
        newLeft.next = first;
      }
      if (newRight) {
        newRight.previous = last2;
      }
      if (!first.previous) {
        this.firstChunk = last2.next;
      }
      if (!last2.next) {
        this.lastChunk = first.previous;
        this.lastChunk.next = null;
      }
      first.previous = newLeft;
      last2.next = newRight || null;
      if (!newLeft) {
        this.firstChunk = first;
      }
      if (!newRight) {
        this.lastChunk = last2;
      }
      return this;
    };
    MagicString.prototype.overwrite = function overwrite(start, end, content, options) {
      if (typeof content !== "string") {
        throw new TypeError("replacement content must be a string");
      }
      while (start < 0) {
        start += this.original.length;
      }
      while (end < 0) {
        end += this.original.length;
      }
      if (end > this.original.length) {
        throw new Error("end is out of bounds");
      }
      if (start === end) {
        throw new Error("Cannot overwrite a zero-length range \u2013 use appendLeft or prependRight instead");
      }
      this._split(start);
      this._split(end);
      if (options === true) {
        if (!warned.storeName) {
          console.warn("The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string");
          warned.storeName = true;
        }
        options = { storeName: true };
      }
      var storeName = options !== void 0 ? options.storeName : false;
      var contentOnly = options !== void 0 ? options.contentOnly : false;
      if (storeName) {
        var original = this.original.slice(start, end);
        this.storedNames[original] = true;
      }
      var first = this.byStart[start];
      var last2 = this.byEnd[end];
      if (first) {
        if (end > first.end && first.next !== this.byStart[first.end]) {
          throw new Error("Cannot overwrite across a split point");
        }
        first.edit(content, storeName, contentOnly);
        if (first !== last2) {
          var chunk = first.next;
          while (chunk !== last2) {
            chunk.edit("", false);
            chunk = chunk.next;
          }
          chunk.edit("", false);
        }
      } else {
        var newChunk = new Chunk(start, end, "").edit(content, storeName);
        last2.next = newChunk;
        newChunk.previous = last2;
      }
      return this;
    };
    MagicString.prototype.prepend = function prepend(content) {
      if (typeof content !== "string") {
        throw new TypeError("outro content must be a string");
      }
      this.intro = content + this.intro;
      return this;
    };
    MagicString.prototype.prependLeft = function prependLeft2(index, content) {
      if (typeof content !== "string") {
        throw new TypeError("inserted content must be a string");
      }
      this._split(index);
      var chunk = this.byEnd[index];
      if (chunk) {
        chunk.prependLeft(content);
      } else {
        this.intro = content + this.intro;
      }
      return this;
    };
    MagicString.prototype.prependRight = function prependRight2(index, content) {
      if (typeof content !== "string") {
        throw new TypeError("inserted content must be a string");
      }
      this._split(index);
      var chunk = this.byStart[index];
      if (chunk) {
        chunk.prependRight(content);
      } else {
        this.outro = content + this.outro;
      }
      return this;
    };
    MagicString.prototype.remove = function remove(start, end) {
      while (start < 0) {
        start += this.original.length;
      }
      while (end < 0) {
        end += this.original.length;
      }
      if (start === end) {
        return this;
      }
      if (start < 0 || end > this.original.length) {
        throw new Error("Character is out of bounds");
      }
      if (start > end) {
        throw new Error("end must be greater than start");
      }
      this._split(start);
      this._split(end);
      var chunk = this.byStart[start];
      while (chunk) {
        chunk.intro = "";
        chunk.outro = "";
        chunk.edit("");
        chunk = end > chunk.end ? this.byStart[chunk.end] : null;
      }
      return this;
    };
    MagicString.prototype.lastChar = function lastChar() {
      if (this.outro.length) {
        return this.outro[this.outro.length - 1];
      }
      var chunk = this.lastChunk;
      do {
        if (chunk.outro.length) {
          return chunk.outro[chunk.outro.length - 1];
        }
        if (chunk.content.length) {
          return chunk.content[chunk.content.length - 1];
        }
        if (chunk.intro.length) {
          return chunk.intro[chunk.intro.length - 1];
        }
      } while (chunk = chunk.previous);
      if (this.intro.length) {
        return this.intro[this.intro.length - 1];
      }
      return "";
    };
    MagicString.prototype.lastLine = function lastLine() {
      var lineIndex = this.outro.lastIndexOf(n);
      if (lineIndex !== -1) {
        return this.outro.substr(lineIndex + 1);
      }
      var lineStr = this.outro;
      var chunk = this.lastChunk;
      do {
        if (chunk.outro.length > 0) {
          lineIndex = chunk.outro.lastIndexOf(n);
          if (lineIndex !== -1) {
            return chunk.outro.substr(lineIndex + 1) + lineStr;
          }
          lineStr = chunk.outro + lineStr;
        }
        if (chunk.content.length > 0) {
          lineIndex = chunk.content.lastIndexOf(n);
          if (lineIndex !== -1) {
            return chunk.content.substr(lineIndex + 1) + lineStr;
          }
          lineStr = chunk.content + lineStr;
        }
        if (chunk.intro.length > 0) {
          lineIndex = chunk.intro.lastIndexOf(n);
          if (lineIndex !== -1) {
            return chunk.intro.substr(lineIndex + 1) + lineStr;
          }
          lineStr = chunk.intro + lineStr;
        }
      } while (chunk = chunk.previous);
      lineIndex = this.intro.lastIndexOf(n);
      if (lineIndex !== -1) {
        return this.intro.substr(lineIndex + 1) + lineStr;
      }
      return this.intro + lineStr;
    };
    MagicString.prototype.slice = function slice2(start, end) {
      if (start === void 0)
        start = 0;
      if (end === void 0)
        end = this.original.length;
      while (start < 0) {
        start += this.original.length;
      }
      while (end < 0) {
        end += this.original.length;
      }
      var result2 = "";
      var chunk = this.firstChunk;
      while (chunk && (chunk.start > start || chunk.end <= start)) {
        if (chunk.start < end && chunk.end >= end) {
          return result2;
        }
        chunk = chunk.next;
      }
      if (chunk && chunk.edited && chunk.start !== start) {
        throw new Error("Cannot use replaced character " + start + " as slice start anchor.");
      }
      var startChunk = chunk;
      while (chunk) {
        if (chunk.intro && (startChunk !== chunk || chunk.start === start)) {
          result2 += chunk.intro;
        }
        var containsEnd = chunk.start < end && chunk.end >= end;
        if (containsEnd && chunk.edited && chunk.end !== end) {
          throw new Error("Cannot use replaced character " + end + " as slice end anchor.");
        }
        var sliceStart = startChunk === chunk ? start - chunk.start : 0;
        var sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;
        result2 += chunk.content.slice(sliceStart, sliceEnd);
        if (chunk.outro && (!containsEnd || chunk.end === end)) {
          result2 += chunk.outro;
        }
        if (containsEnd) {
          break;
        }
        chunk = chunk.next;
      }
      return result2;
    };
    MagicString.prototype.snip = function snip(start, end) {
      var clone4 = this.clone();
      clone4.remove(0, start);
      clone4.remove(end, clone4.original.length);
      return clone4;
    };
    MagicString.prototype._split = function _split(index) {
      if (this.byStart[index] || this.byEnd[index]) {
        return;
      }
      var chunk = this.lastSearchedChunk;
      var searchForward = index > chunk.end;
      while (chunk) {
        if (chunk.contains(index)) {
          return this._splitChunk(chunk, index);
        }
        chunk = searchForward ? this.byStart[chunk.end] : this.byEnd[chunk.start];
      }
    };
    MagicString.prototype._splitChunk = function _splitChunk(chunk, index) {
      if (chunk.edited && chunk.content.length) {
        var loc = getLocator(this.original)(index);
        throw new Error("Cannot split a chunk that has already been edited (" + loc.line + ":" + loc.column + ' \u2013 "' + chunk.original + '")');
      }
      var newChunk = chunk.split(index);
      this.byEnd[index] = chunk;
      this.byStart[index] = newChunk;
      this.byEnd[newChunk.end] = newChunk;
      if (chunk === this.lastChunk) {
        this.lastChunk = newChunk;
      }
      this.lastSearchedChunk = chunk;
      return true;
    };
    MagicString.prototype.toString = function toString5() {
      var str = this.intro;
      var chunk = this.firstChunk;
      while (chunk) {
        str += chunk.toString();
        chunk = chunk.next;
      }
      return str + this.outro;
    };
    MagicString.prototype.isEmpty = function isEmpty() {
      var chunk = this.firstChunk;
      do {
        if (chunk.intro.length && chunk.intro.trim() || chunk.content.length && chunk.content.trim() || chunk.outro.length && chunk.outro.trim()) {
          return false;
        }
      } while (chunk = chunk.next);
      return true;
    };
    MagicString.prototype.length = function length() {
      var chunk = this.firstChunk;
      var length2 = 0;
      do {
        length2 += chunk.intro.length + chunk.content.length + chunk.outro.length;
      } while (chunk = chunk.next);
      return length2;
    };
    MagicString.prototype.trimLines = function trimLines() {
      return this.trim("[\\r\\n]");
    };
    MagicString.prototype.trim = function trim(charType) {
      return this.trimStart(charType).trimEnd(charType);
    };
    MagicString.prototype.trimEndAborted = function trimEndAborted(charType) {
      var rx = new RegExp((charType || "\\s") + "+$");
      this.outro = this.outro.replace(rx, "");
      if (this.outro.length) {
        return true;
      }
      var chunk = this.lastChunk;
      do {
        var end = chunk.end;
        var aborted = chunk.trimEnd(rx);
        if (chunk.end !== end) {
          if (this.lastChunk === chunk) {
            this.lastChunk = chunk.next;
          }
          this.byEnd[chunk.end] = chunk;
          this.byStart[chunk.next.start] = chunk.next;
          this.byEnd[chunk.next.end] = chunk.next;
        }
        if (aborted) {
          return true;
        }
        chunk = chunk.previous;
      } while (chunk);
      return false;
    };
    MagicString.prototype.trimEnd = function trimEnd2(charType) {
      this.trimEndAborted(charType);
      return this;
    };
    MagicString.prototype.trimStartAborted = function trimStartAborted(charType) {
      var rx = new RegExp("^" + (charType || "\\s") + "+");
      this.intro = this.intro.replace(rx, "");
      if (this.intro.length) {
        return true;
      }
      var chunk = this.firstChunk;
      do {
        var end = chunk.end;
        var aborted = chunk.trimStart(rx);
        if (chunk.end !== end) {
          if (chunk === this.lastChunk) {
            this.lastChunk = chunk.next;
          }
          this.byEnd[chunk.end] = chunk;
          this.byStart[chunk.next.start] = chunk.next;
          this.byEnd[chunk.next.end] = chunk.next;
        }
        if (aborted) {
          return true;
        }
        chunk = chunk.next;
      } while (chunk);
      return false;
    };
    MagicString.prototype.trimStart = function trimStart2(charType) {
      this.trimStartAborted(charType);
      return this;
    };
    splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    splitPath = function(filename) {
      return splitPathRe.exec(filename).slice(1);
    };
    sep = "/";
    delimiter = ":";
    path = {
      extname,
      basename,
      dirname,
      sep,
      delimiter,
      relative,
      join,
      isAbsolute,
      normalize,
      resolve
    };
    substr = "ab".substr(-1) === "b" ? function(str, start, len) {
      return str.substr(start, len);
    } : function(str, start, len) {
      if (start < 0)
        start = str.length + start;
      return str.substr(start, len);
    };
    _polyfillNode_path = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      resolve,
      normalize,
      isAbsolute,
      join,
      relative,
      sep,
      delimiter,
      dirname,
      basename,
      extname,
      "default": path
    });
    maxInt = 2147483647;
    base = 36;
    tMin = 1;
    tMax = 26;
    skew = 38;
    damp = 700;
    initialBias = 72;
    initialN = 128;
    delimiter$1 = "-";
    regexNonASCII = /[^\x20-\x7E]/;
    regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
    errors = {
      "overflow": "Overflow: input needs wider integers to process",
      "not-basic": "Illegal input >= 0x80 (not a basic code point)",
      "invalid-input": "Invalid input"
    };
    baseMinusTMin = base - tMin;
    floor = Math.floor;
    stringFromCharCode = String.fromCharCode;
    cachedSetTimeout = defaultSetTimout;
    cachedClearTimeout = defaultClearTimeout;
    if (typeof global2.setTimeout === "function") {
      cachedSetTimeout = setTimeout;
    }
    if (typeof global2.clearTimeout === "function") {
      cachedClearTimeout = clearTimeout;
    }
    queue = [];
    draining = false;
    queueIndex = -1;
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    title = "browser";
    platform = "browser";
    browser = true;
    env = {};
    argv = [];
    version = "";
    versions = {};
    release = {};
    config = {};
    on = noop;
    addListener = noop;
    once = noop;
    off = noop;
    removeListener = noop;
    removeAllListeners = noop;
    emit = noop;
    performance = global2.performance || {};
    performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function() {
      return new Date().getTime();
    };
    startTime = new Date();
    browser$1 = {
      nextTick,
      title,
      browser,
      env,
      argv,
      version,
      versions,
      on,
      addListener,
      once,
      off,
      removeListener,
      removeAllListeners,
      emit,
      binding,
      cwd,
      chdir,
      umask,
      hrtime,
      platform,
      release,
      config,
      uptime
    };
    if (typeof Object.create === "function") {
      inherits = function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      inherits = function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
    inherits$1 = inherits;
    formatRegExp = /%[sdj%]/g;
    debugs = {};
    inspect2.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect2.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      "regexp": "red"
    };
    months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    _polyfillNode_util = {
      inherits: inherits$1,
      _extend,
      log,
      isBuffer: isBuffer$1,
      isPrimitive,
      isFunction: isFunction$1,
      isError,
      isDate,
      isObject: isObject$2,
      isRegExp,
      isUndefined,
      isSymbol: isSymbol$1,
      isString: isString$1,
      isNumber,
      isNullOrUndefined,
      isNull,
      isBoolean,
      isArray: isArray$2,
      inspect: inspect2,
      deprecate,
      format,
      debuglog
    };
    _polyfillNode_util$1 = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      format,
      deprecate,
      debuglog,
      inspect: inspect2,
      isArray: isArray$2,
      isBoolean,
      isNull,
      isNullOrUndefined,
      isNumber,
      isString: isString$1,
      isSymbol: isSymbol$1,
      isUndefined,
      isRegExp,
      isObject: isObject$2,
      isDate,
      isError,
      isFunction: isFunction$1,
      isPrimitive,
      isBuffer: isBuffer$1,
      log,
      inherits: inherits$1,
      _extend,
      "default": _polyfillNode_util
    });
    isArray$3 = Array.isArray || function(xs) {
      return Object.prototype.toString.call(xs) === "[object Array]";
    };
    objectKeys = Object.keys || function(obj) {
      var res = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key))
          res.push(key);
      }
      return res;
    };
    _polyfillNode_url = {
      parse: urlParse,
      resolve: urlResolve,
      resolveObject: urlResolveObject,
      format: urlFormat,
      Url
    };
    protocolPattern = /^([a-z0-9.+-]+:)/i;
    portPattern = /:[0-9]*$/;
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
    delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"];
    unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
    autoEscape = ["'"].concat(unwise);
    nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
    hostEndingChars = ["/", "?", "#"];
    hostnameMaxLen = 255;
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    unsafeProtocol = {
      "javascript": true,
      "javascript:": true
    };
    hostlessProtocol = {
      "javascript": true,
      "javascript:": true
    };
    slashedProtocol = {
      "http": true,
      "https": true,
      "ftp": true,
      "gopher": true,
      "file": true,
      "http:": true,
      "https:": true,
      "ftp:": true,
      "gopher:": true,
      "file:": true
    };
    Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
      return parse$3(this, url, parseQueryString, slashesDenoteHost);
    };
    Url.prototype.format = function() {
      return format$1(this);
    };
    Url.prototype.resolve = function(relative2) {
      return this.resolveObject(urlParse(relative2, false, true)).format();
    };
    Url.prototype.resolveObject = function(relative2) {
      if (isString$1(relative2)) {
        var rel = new Url();
        rel.parse(relative2, false, true);
        relative2 = rel;
      }
      var result2 = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result2[tkey] = this[tkey];
      }
      result2.hash = relative2.hash;
      if (relative2.href === "") {
        result2.href = result2.format();
        return result2;
      }
      if (relative2.slashes && !relative2.protocol) {
        var rkeys = Object.keys(relative2);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== "protocol")
            result2[rkey] = relative2[rkey];
        }
        if (slashedProtocol[result2.protocol] && result2.hostname && !result2.pathname) {
          result2.path = result2.pathname = "/";
        }
        result2.href = result2.format();
        return result2;
      }
      var relPath;
      if (relative2.protocol && relative2.protocol !== result2.protocol) {
        if (!slashedProtocol[relative2.protocol]) {
          var keys = Object.keys(relative2);
          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result2[k] = relative2[k];
          }
          result2.href = result2.format();
          return result2;
        }
        result2.protocol = relative2.protocol;
        if (!relative2.host && !hostlessProtocol[relative2.protocol]) {
          relPath = (relative2.pathname || "").split("/");
          while (relPath.length && !(relative2.host = relPath.shift()))
            ;
          if (!relative2.host)
            relative2.host = "";
          if (!relative2.hostname)
            relative2.hostname = "";
          if (relPath[0] !== "")
            relPath.unshift("");
          if (relPath.length < 2)
            relPath.unshift("");
          result2.pathname = relPath.join("/");
        } else {
          result2.pathname = relative2.pathname;
        }
        result2.search = relative2.search;
        result2.query = relative2.query;
        result2.host = relative2.host || "";
        result2.auth = relative2.auth;
        result2.hostname = relative2.hostname || relative2.host;
        result2.port = relative2.port;
        if (result2.pathname || result2.search) {
          var p = result2.pathname || "";
          var s = result2.search || "";
          result2.path = p + s;
        }
        result2.slashes = result2.slashes || relative2.slashes;
        result2.href = result2.format();
        return result2;
      }
      var isSourceAbs = result2.pathname && result2.pathname.charAt(0) === "/", isRelAbs = relative2.host || relative2.pathname && relative2.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result2.host && relative2.pathname, removeAllDots = mustEndAbs, srcPath = result2.pathname && result2.pathname.split("/") || [], psychotic = result2.protocol && !slashedProtocol[result2.protocol];
      relPath = relative2.pathname && relative2.pathname.split("/") || [];
      if (psychotic) {
        result2.hostname = "";
        result2.port = null;
        if (result2.host) {
          if (srcPath[0] === "")
            srcPath[0] = result2.host;
          else
            srcPath.unshift(result2.host);
        }
        result2.host = "";
        if (relative2.protocol) {
          relative2.hostname = null;
          relative2.port = null;
          if (relative2.host) {
            if (relPath[0] === "")
              relPath[0] = relative2.host;
            else
              relPath.unshift(relative2.host);
          }
          relative2.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
      }
      var authInHost;
      if (isRelAbs) {
        result2.host = relative2.host || relative2.host === "" ? relative2.host : result2.host;
        result2.hostname = relative2.hostname || relative2.hostname === "" ? relative2.hostname : result2.hostname;
        result2.search = relative2.search;
        result2.query = relative2.query;
        srcPath = relPath;
      } else if (relPath.length) {
        if (!srcPath)
          srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result2.search = relative2.search;
        result2.query = relative2.query;
      } else if (!isNullOrUndefined(relative2.search)) {
        if (psychotic) {
          result2.hostname = result2.host = srcPath.shift();
          authInHost = result2.host && result2.host.indexOf("@") > 0 ? result2.host.split("@") : false;
          if (authInHost) {
            result2.auth = authInHost.shift();
            result2.host = result2.hostname = authInHost.shift();
          }
        }
        result2.search = relative2.search;
        result2.query = relative2.query;
        if (!isNull(result2.pathname) || !isNull(result2.search)) {
          result2.path = (result2.pathname ? result2.pathname : "") + (result2.search ? result2.search : "");
        }
        result2.href = result2.format();
        return result2;
      }
      if (!srcPath.length) {
        result2.pathname = null;
        if (result2.search) {
          result2.path = "/" + result2.search;
        } else {
          result2.path = null;
        }
        result2.href = result2.format();
        return result2;
      }
      var last2 = srcPath.slice(-1)[0];
      var hasTrailingSlash = (result2.host || relative2.host || srcPath.length > 1) && (last2 === "." || last2 === "..") || last2 === "";
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last2 = srcPath[i];
        if (last2 === ".") {
          srcPath.splice(i, 1);
        } else if (last2 === "..") {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift("..");
        }
      }
      if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
        srcPath.unshift("");
      }
      if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
        srcPath.push("");
      }
      var isAbsolute2 = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
      if (psychotic) {
        result2.hostname = result2.host = isAbsolute2 ? "" : srcPath.length ? srcPath.shift() : "";
        authInHost = result2.host && result2.host.indexOf("@") > 0 ? result2.host.split("@") : false;
        if (authInHost) {
          result2.auth = authInHost.shift();
          result2.host = result2.hostname = authInHost.shift();
        }
      }
      mustEndAbs = mustEndAbs || result2.host && srcPath.length;
      if (mustEndAbs && !isAbsolute2) {
        srcPath.unshift("");
      }
      if (!srcPath.length) {
        result2.pathname = null;
        result2.path = null;
      } else {
        result2.pathname = srcPath.join("/");
      }
      if (!isNull(result2.pathname) || !isNull(result2.search)) {
        result2.path = (result2.pathname ? result2.pathname : "") + (result2.search ? result2.search : "");
      }
      result2.auth = relative2.auth || result2.auth;
      result2.slashes = result2.slashes || relative2.slashes;
      result2.href = result2.format();
      return result2;
    };
    Url.prototype.parseHost = function() {
      return parseHost(this);
    };
    _polyfillNode_url$1 = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      parse: urlParse,
      resolve: urlResolve,
      resolveObject: urlResolveObject,
      format: urlFormat,
      "default": _polyfillNode_url,
      Url
    });
    externalRE = /^(https?:)?\/\//;
    dataUrlRE = /^\s*data:/i;
    defaultAssetUrlOptions = {
      base: null,
      includeAbsolute: false,
      tags: {
        video: ["src", "poster"],
        source: ["src"],
        img: ["src"],
        image: ["xlink:href", "href"],
        use: ["xlink:href", "href"]
      }
    };
    normalizeOptions = (options) => {
      if (Object.keys(options).some((key) => isArray(options[key]))) {
        return Object.assign(Object.assign({}, defaultAssetUrlOptions), { tags: options });
      }
      return Object.assign(Object.assign({}, defaultAssetUrlOptions), options);
    };
    createAssetUrlTransformWithOptions = (options) => {
      return (node2, context) => transformAssetUrl(node2, context, options);
    };
    transformAssetUrl = (node2, context, options = defaultAssetUrlOptions) => {
      if (node2.type === 1) {
        if (!node2.props.length) {
          return;
        }
        const tags = options.tags || defaultAssetUrlOptions.tags;
        const attrs = tags[node2.tag];
        const wildCardAttrs = tags["*"];
        if (!attrs && !wildCardAttrs) {
          return;
        }
        const assetAttrs = (attrs || []).concat(wildCardAttrs || []);
        node2.props.forEach((attr, index) => {
          if (attr.type !== 6 || !assetAttrs.includes(attr.name) || !attr.value || isExternalUrl(attr.value.content) || isDataUrl(attr.value.content) || attr.value.content[0] === "#" || !options.includeAbsolute && !isRelativeUrl(attr.value.content)) {
            return;
          }
          const url = parseUrl(attr.value.content);
          if (options.base && attr.value.content[0] === ".") {
            const base2 = parseUrl(options.base);
            const protocol = base2.protocol || "";
            const host = base2.host ? protocol + "//" + base2.host : "";
            const basePath = base2.path || "/";
            attr.value.content = host + (path.posix || path).join(basePath, url.path + (url.hash || ""));
            return;
          }
          const exp = getImportsExpressionExp(url.path, url.hash, attr.loc, context);
          node2.props[index] = {
            type: 7,
            name: "bind",
            arg: createSimpleExpression(attr.name, true, attr.loc),
            exp,
            modifiers: [],
            loc: attr.loc
          };
        });
      }
    };
    srcsetTags = ["img", "source"];
    escapedSpaceCharacters = /( |\\t|\\n|\\f|\\r)+/g;
    createSrcsetTransformWithOptions = (options) => {
      return (node2, context) => transformSrcset(node2, context, options);
    };
    transformSrcset = (node2, context, options = defaultAssetUrlOptions) => {
      if (node2.type === 1) {
        if (srcsetTags.includes(node2.tag) && node2.props.length) {
          node2.props.forEach((attr, index) => {
            if (attr.name === "srcset" && attr.type === 6) {
              if (!attr.value)
                return;
              const value = attr.value.content;
              if (!value)
                return;
              const imageCandidates = value.split(",").map((s) => {
                const [url, descriptor] = s.replace(escapedSpaceCharacters, " ").trim().split(" ", 2);
                return { url, descriptor };
              });
              for (let i = 0; i < imageCandidates.length; i++) {
                const { url } = imageCandidates[i];
                if (isDataUrl(url)) {
                  imageCandidates[i + 1].url = url + "," + imageCandidates[i + 1].url;
                  imageCandidates.splice(i, 1);
                }
              }
              const hasQualifiedUrl = imageCandidates.some(({ url }) => {
                return !isExternalUrl(url) && !isDataUrl(url) && (options.includeAbsolute || isRelativeUrl(url));
              });
              if (!hasQualifiedUrl) {
                return;
              }
              if (options.base) {
                const base2 = options.base;
                const set = [];
                imageCandidates.forEach(({ url, descriptor }) => {
                  descriptor = descriptor ? ` ${descriptor}` : ``;
                  if (isRelativeUrl(url)) {
                    set.push((path.posix || path).join(base2, url) + descriptor);
                  } else {
                    set.push(url + descriptor);
                  }
                });
                attr.value.content = set.join(", ");
                return;
              }
              const compoundExpression = createCompoundExpression([], attr.loc);
              imageCandidates.forEach(({ url, descriptor }, index2) => {
                if (!isExternalUrl(url) && !isDataUrl(url) && (options.includeAbsolute || isRelativeUrl(url))) {
                  const { path: path3 } = parseUrl(url);
                  let exp;
                  if (path3) {
                    const existingImportsIndex = context.imports.findIndex((i) => i.path === path3);
                    if (existingImportsIndex > -1) {
                      exp = createSimpleExpression(`_imports_${existingImportsIndex}`, false, attr.loc, 3);
                    } else {
                      exp = createSimpleExpression(`_imports_${context.imports.length}`, false, attr.loc, 3);
                      context.imports.push({ exp, path: path3 });
                    }
                    compoundExpression.children.push(exp);
                  }
                } else {
                  const exp = createSimpleExpression(`"${url}"`, false, attr.loc, 3);
                  compoundExpression.children.push(exp);
                }
                const isNotLast = imageCandidates.length - 1 > index2;
                if (descriptor && isNotLast) {
                  compoundExpression.children.push(` + ' ${descriptor}, ' + `);
                } else if (descriptor) {
                  compoundExpression.children.push(` + ' ${descriptor}'`);
                } else if (isNotLast) {
                  compoundExpression.children.push(` + ', ' + `);
                }
              });
              const hoisted = context.hoist(compoundExpression);
              hoisted.constType = 3;
              node2.props[index] = {
                type: 7,
                name: "bind",
                arg: createSimpleExpression("srcset", true, attr.loc),
                exp: hoisted,
                modifiers: [],
                loc: attr.loc
              };
            }
          });
        }
      }
    };
    SSR_INTERPOLATE = Symbol(`ssrInterpolate`);
    SSR_RENDER_VNODE = Symbol(`ssrRenderVNode`);
    SSR_RENDER_COMPONENT = Symbol(`ssrRenderComponent`);
    SSR_RENDER_SLOT = Symbol(`ssrRenderSlot`);
    SSR_RENDER_CLASS = Symbol(`ssrRenderClass`);
    SSR_RENDER_STYLE = Symbol(`ssrRenderStyle`);
    SSR_RENDER_ATTRS = Symbol(`ssrRenderAttrs`);
    SSR_RENDER_ATTR = Symbol(`ssrRenderAttr`);
    SSR_RENDER_DYNAMIC_ATTR = Symbol(`ssrRenderDynamicAttr`);
    SSR_RENDER_LIST = Symbol(`ssrRenderList`);
    SSR_INCLUDE_BOOLEAN_ATTR = Symbol(`ssrIncludeBooleanAttr`);
    SSR_LOOSE_EQUAL = Symbol(`ssrLooseEqual`);
    SSR_LOOSE_CONTAIN = Symbol(`ssrLooseContain`);
    SSR_RENDER_DYNAMIC_MODEL = Symbol(`ssrRenderDynamicModel`);
    SSR_GET_DYNAMIC_MODEL_PROPS = Symbol(`ssrGetDynamicModelProps`);
    SSR_RENDER_TELEPORT = Symbol(`ssrRenderTeleport`);
    SSR_RENDER_SUSPENSE = Symbol(`ssrRenderSuspense`);
    SSR_GET_DIRECTIVE_PROPS = Symbol(`ssrGetDirectiveProps`);
    ssrHelpers = {
      [SSR_INTERPOLATE]: `ssrInterpolate`,
      [SSR_RENDER_VNODE]: `ssrRenderVNode`,
      [SSR_RENDER_COMPONENT]: `ssrRenderComponent`,
      [SSR_RENDER_SLOT]: `ssrRenderSlot`,
      [SSR_RENDER_CLASS]: `ssrRenderClass`,
      [SSR_RENDER_STYLE]: `ssrRenderStyle`,
      [SSR_RENDER_ATTRS]: `ssrRenderAttrs`,
      [SSR_RENDER_ATTR]: `ssrRenderAttr`,
      [SSR_RENDER_DYNAMIC_ATTR]: `ssrRenderDynamicAttr`,
      [SSR_RENDER_LIST]: `ssrRenderList`,
      [SSR_INCLUDE_BOOLEAN_ATTR]: `ssrIncludeBooleanAttr`,
      [SSR_LOOSE_EQUAL]: `ssrLooseEqual`,
      [SSR_LOOSE_CONTAIN]: `ssrLooseContain`,
      [SSR_RENDER_DYNAMIC_MODEL]: `ssrRenderDynamicModel`,
      [SSR_GET_DYNAMIC_MODEL_PROPS]: `ssrGetDynamicModelProps`,
      [SSR_RENDER_TELEPORT]: `ssrRenderTeleport`,
      [SSR_RENDER_SUSPENSE]: `ssrRenderSuspense`,
      [SSR_GET_DIRECTIVE_PROPS]: `ssrGetDirectiveProps`
    };
    registerRuntimeHelpers(ssrHelpers);
    ssrTransformIf = createStructuralDirectiveTransform(/^(if|else|else-if)$/, processIf);
    ssrTransformFor = createStructuralDirectiveTransform("for", processFor);
    ssrTransformSlotOutlet = (node2, context) => {
      if (isSlotOutlet(node2)) {
        const { slotName, slotProps } = processSlotOutlet(node2, context);
        const args = [
          `_ctx.$slots`,
          slotName,
          slotProps || `{}`,
          `null`,
          `_push`,
          `_parent`
        ];
        if (context.scopeId && context.slotted !== false) {
          args.push(`"${context.scopeId}-s"`);
        }
        node2.ssrCodegenNode = createCallExpression(context.helper(SSR_RENDER_SLOT), args);
      }
    };
    SSRErrorMessages = {
      [61]: `Unsafe attribute name for SSR.`,
      [62]: `Missing the 'to' prop on teleport element.`,
      [63]: `Invalid AST node during SSR transform.`
    };
    wipMap = /* @__PURE__ */ new WeakMap();
    rawChildrenMap = /* @__PURE__ */ new WeakMap();
    ssrTransformElement = (node2, context) => {
      if (node2.type !== 1 || node2.tagType !== 0) {
        return;
      }
      return function ssrPostTransformElement() {
        const openTag = [`<${node2.tag}`];
        const needTagForRuntime = node2.tag === "textarea" || node2.tag.indexOf("-") > 0;
        const hasDynamicVBind = hasDynamicKeyVBind(node2);
        const hasCustomDir = node2.props.some((p) => p.type === 7 && !isBuiltInDirective(p.name));
        const needMergeProps = hasDynamicVBind || hasCustomDir;
        if (needMergeProps) {
          const { props, directives } = buildProps(node2, context, node2.props, true);
          if (props || directives.length) {
            const mergedProps = buildSSRProps(props, directives, context);
            const propsExp = createCallExpression(context.helper(SSR_RENDER_ATTRS), [mergedProps]);
            if (node2.tag === "textarea") {
              const existingText = node2.children[0];
              if (!existingText || existingText.type !== 5) {
                const tempId = `_temp${context.temps++}`;
                propsExp.arguments = [
                  createAssignmentExpression(createSimpleExpression(tempId, false), mergedProps)
                ];
                rawChildrenMap.set(node2, createCallExpression(context.helper(SSR_INTERPOLATE), [
                  createConditionalExpression(createSimpleExpression(`"value" in ${tempId}`, false), createSimpleExpression(`${tempId}.value`, false), createSimpleExpression(existingText ? existingText.content : ``, true), false)
                ]));
              }
            } else if (node2.tag === "input") {
              const vModel = findVModel(node2);
              if (vModel) {
                const tempId = `_temp${context.temps++}`;
                const tempExp = createSimpleExpression(tempId, false);
                propsExp.arguments = [
                  createSequenceExpression([
                    createAssignmentExpression(tempExp, mergedProps),
                    createCallExpression(context.helper(MERGE_PROPS), [
                      tempExp,
                      createCallExpression(context.helper(SSR_GET_DYNAMIC_MODEL_PROPS), [
                        tempExp,
                        vModel.exp
                      ])
                    ])
                  ])
                ];
              }
            }
            if (needTagForRuntime) {
              propsExp.arguments.push(`"${node2.tag}"`);
            }
            openTag.push(propsExp);
          }
        }
        let dynamicClassBinding = void 0;
        let staticClassBinding = void 0;
        let dynamicStyleBinding = void 0;
        for (let i = 0; i < node2.props.length; i++) {
          const prop = node2.props[i];
          if (node2.tag === "input" && isTrueFalseValue(prop)) {
            continue;
          }
          if (prop.type === 7) {
            if (prop.name === "html" && prop.exp) {
              rawChildrenMap.set(node2, prop.exp);
            } else if (prop.name === "text" && prop.exp) {
              node2.children = [createInterpolation(prop.exp, prop.loc)];
            } else if (prop.name === "slot") {
              context.onError(createCompilerError(40, prop.loc));
            } else if (isTextareaWithValue(node2, prop) && prop.exp) {
              if (!needMergeProps) {
                node2.children = [createInterpolation(prop.exp, prop.loc)];
              }
            } else if (!needMergeProps) {
              const directiveTransform = context.directiveTransforms[prop.name];
              if (directiveTransform) {
                const { props, ssrTagParts } = directiveTransform(prop, node2, context);
                if (ssrTagParts) {
                  openTag.push(...ssrTagParts);
                }
                for (let j = 0; j < props.length; j++) {
                  const { key, value } = props[j];
                  if (isStaticExp(key)) {
                    let attrName = key.content;
                    if (attrName === "key" || attrName === "ref") {
                      continue;
                    }
                    if (attrName === "class") {
                      openTag.push(` class="`, dynamicClassBinding = createCallExpression(context.helper(SSR_RENDER_CLASS), [value]), `"`);
                    } else if (attrName === "style") {
                      if (dynamicStyleBinding) {
                        mergeCall(dynamicStyleBinding, value);
                      } else {
                        openTag.push(` style="`, dynamicStyleBinding = createCallExpression(context.helper(SSR_RENDER_STYLE), [value]), `"`);
                      }
                    } else {
                      attrName = node2.tag.indexOf("-") > 0 ? attrName : propsToAttrMap[attrName] || attrName.toLowerCase();
                      if (isBooleanAttr(attrName)) {
                        openTag.push(createConditionalExpression(createCallExpression(context.helper(SSR_INCLUDE_BOOLEAN_ATTR), [value]), createSimpleExpression(" " + attrName, true), createSimpleExpression("", true), false));
                      } else if (isSSRSafeAttrName(attrName)) {
                        openTag.push(createCallExpression(context.helper(SSR_RENDER_ATTR), [
                          key,
                          value
                        ]));
                      } else {
                        context.onError(createSSRCompilerError(61, key.loc));
                      }
                    }
                  } else {
                    const args = [key, value];
                    if (needTagForRuntime) {
                      args.push(`"${node2.tag}"`);
                    }
                    openTag.push(createCallExpression(context.helper(SSR_RENDER_DYNAMIC_ATTR), args));
                  }
                }
              }
            }
          } else {
            if (node2.tag === "textarea" && prop.name === "value" && prop.value) {
              rawChildrenMap.set(node2, escapeHtml(prop.value.content));
            } else if (!needMergeProps) {
              if (prop.name === "key" || prop.name === "ref") {
                continue;
              }
              if (prop.name === "class" && prop.value) {
                staticClassBinding = JSON.stringify(prop.value.content);
              }
              openTag.push(` ${prop.name}` + (prop.value ? `="${escapeHtml(prop.value.content)}"` : ``));
            }
          }
        }
        if (dynamicClassBinding && staticClassBinding) {
          mergeCall(dynamicClassBinding, staticClassBinding);
          removeStaticBinding(openTag, "class");
        }
        if (context.scopeId) {
          openTag.push(` ${context.scopeId}`);
        }
        node2.ssrCodegenNode = createTemplateLiteral(openTag);
      };
    };
    wipMap$1 = /* @__PURE__ */ new WeakMap();
    componentTypeMap = /* @__PURE__ */ new WeakMap();
    ssrTransformComponent = (node2, context) => {
      if (node2.type !== 1 || node2.tagType !== 1) {
        return;
      }
      const component = resolveComponentType(node2, context, true);
      componentTypeMap.set(node2, component);
      if (isSymbol(component)) {
        if (component === SUSPENSE) {
          return ssrTransformSuspense(node2, context);
        }
        return;
      }
      const vnodeBranches = [];
      const clonedNode = clone3(node2);
      return function ssrPostTransformComponent() {
        if (clonedNode.children.length) {
          buildSlots(clonedNode, context, (props, children) => {
            vnodeBranches.push(createVNodeSlotBranch(props, children, context));
            return createFunctionExpression(void 0);
          });
        }
        let propsExp = `null`;
        if (node2.props.length) {
          const { props, directives } = buildProps(node2, context);
          if (props || directives.length) {
            propsExp = buildSSRProps(props, directives, context);
          }
        }
        const wipEntries = [];
        wipMap$1.set(node2, wipEntries);
        const buildSSRSlotFn = (props, children, loc) => {
          const fn = createFunctionExpression([props || `_`, `_push`, `_parent`, `_scopeId`], void 0, true, true, loc);
          wipEntries.push({
            fn,
            children,
            vnodeBranch: vnodeBranches[wipEntries.length]
          });
          return fn;
        };
        const slots = node2.children.length ? buildSlots(node2, context, buildSSRSlotFn).slots : `null`;
        if (typeof component !== "string") {
          node2.ssrCodegenNode = createCallExpression(context.helper(SSR_RENDER_VNODE), [
            `_push`,
            createCallExpression(context.helper(CREATE_VNODE), [
              component,
              propsExp,
              slots
            ]),
            `_parent`
          ]);
        } else {
          node2.ssrCodegenNode = createCallExpression(context.helper(SSR_RENDER_COMPONENT), [component, propsExp, slots, `_parent`]);
        }
      };
    };
    rawOptionsMap = /* @__PURE__ */ new WeakMap();
    [baseNodeTransforms, baseDirectiveTransforms] = getBaseTransformPreset(true);
    vnodeNodeTransforms = [...baseNodeTransforms, ...DOMNodeTransforms];
    vnodeDirectiveTransforms = Object.assign(Object.assign({}, baseDirectiveTransforms), DOMDirectiveTransforms);
    ssrTransformModel = (dir, node2, context) => {
      const model = dir.exp;
      function checkDuplicatedValue() {
        const value = findProp(node2, "value");
        if (value) {
          context.onError(createDOMCompilerError(57, value.loc));
        }
      }
      if (node2.tagType === 0) {
        const res = { props: [] };
        const defaultProps = [
          createObjectProperty(`value`, model)
        ];
        if (node2.tag === "input") {
          const type = findProp(node2, "type");
          if (type) {
            const value = findValueBinding(node2);
            if (type.type === 7) {
              res.ssrTagParts = [
                createCallExpression(context.helper(SSR_RENDER_DYNAMIC_MODEL), [
                  type.exp,
                  model,
                  value
                ])
              ];
            } else if (type.value) {
              switch (type.value.content) {
                case "radio":
                  res.props = [
                    createObjectProperty(`checked`, createCallExpression(context.helper(SSR_LOOSE_EQUAL), [
                      model,
                      value
                    ]))
                  ];
                  break;
                case "checkbox":
                  const trueValueBinding = findProp(node2, "true-value");
                  if (trueValueBinding) {
                    const trueValue = trueValueBinding.type === 6 ? JSON.stringify(trueValueBinding.value.content) : trueValueBinding.exp;
                    res.props = [
                      createObjectProperty(`checked`, createCallExpression(context.helper(SSR_LOOSE_EQUAL), [
                        model,
                        trueValue
                      ]))
                    ];
                  } else {
                    res.props = [
                      createObjectProperty(`checked`, createConditionalExpression(createCallExpression(`Array.isArray`, [model]), createCallExpression(context.helper(SSR_LOOSE_CONTAIN), [
                        model,
                        value
                      ]), model))
                    ];
                  }
                  break;
                case "file":
                  context.onError(createDOMCompilerError(56, dir.loc));
                  break;
                default:
                  checkDuplicatedValue();
                  res.props = defaultProps;
                  break;
              }
            }
          } else if (hasDynamicKeyVBind(node2))
            ;
          else {
            checkDuplicatedValue();
            res.props = defaultProps;
          }
        } else if (node2.tag === "textarea") {
          checkDuplicatedValue();
          node2.children = [createInterpolation(model, model.loc)];
        } else if (node2.tag === "select")
          ;
        else {
          context.onError(createDOMCompilerError(54, dir.loc));
        }
        return res;
      } else {
        return transformModel(dir, node2, context);
      }
    };
    ssrTransformShow = (dir, node2, context) => {
      if (!dir.exp) {
        context.onError(createDOMCompilerError(58));
      }
      return {
        props: [
          createObjectProperty(`style`, createConditionalExpression(dir.exp, createSimpleExpression(`null`, false), createObjectExpression([
            createObjectProperty(`display`, createSimpleExpression(`none`, true))
          ]), false))
        ]
      };
    };
    hasSingleChild = (node2) => node2.children.filter((n2) => n2.type !== 3).length === 1;
    ssrInjectFallthroughAttrs = (node2, context) => {
      if (node2.type === 0) {
        context.identifiers._attrs = 1;
      }
      if (node2.type === 1 && node2.tagType === 1 && (isBuiltInType(node2.tag, "Transition") || isBuiltInType(node2.tag, "KeepAlive"))) {
        if (hasSingleChild(node2)) {
          injectFallthroughAttrs(node2.children[0]);
        }
        return;
      }
      const parent = context.parent;
      if (!parent || parent.type !== 0) {
        return;
      }
      if (node2.type === 10 && hasSingleChild(node2)) {
        injectFallthroughAttrs(node2.children[0]);
      } else if (hasSingleChild(parent)) {
        injectFallthroughAttrs(node2);
      }
    };
    ssrInjectCssVars = (node2, context) => {
      if (!context.ssrCssVars) {
        return;
      }
      if (node2.type === 0) {
        context.identifiers._cssVars = 1;
      }
      const parent = context.parent;
      if (!parent || parent.type !== 0) {
        return;
      }
      if (node2.type === 10) {
        for (const child of node2.children) {
          injectCssVars(child);
        }
      } else {
        injectCssVars(node2);
      }
    };
    CompilerSSR = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      compile: compile$1
    });
    _polyfillNode_fs = {};
    _polyfillNode_fs$1 = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      "default": _polyfillNode_fs
    });
    _fs = /* @__PURE__ */ getAugmentedNamespace(_polyfillNode_fs$1);
    _path = /* @__PURE__ */ getAugmentedNamespace(_polyfillNode_path);
    require$$0 = /* @__PURE__ */ getAugmentedNamespace(_polyfillNode_util$1);
    hasWarned = {};
    defaultExportRE = /((?:^|\n|;)\s*)export(\s*)default/;
    namedDefaultExportRE = /((?:^|\n|;)\s*)export(.+)as(\s*)default/s;
    exportDefaultClassRE = /((?:^|\n|;)\s*)export\s+default\s+class\s+([\w$]+)/;
    CONVERT_SYMBOL = "$";
    ESCAPE_SYMBOL = "$$";
    shorthands = ["ref", "computed", "shallowRef", "toRef", "customRef"];
    transformCheckRE = /[^\w]\$(?:\$|ref|computed|shallowRef)?\s*(\(|\<)/;
    RFC_LINK = `https://github.com/vuejs/rfcs/discussions/369`;
    hasWarned$1 = {};
    DEFINE_PROPS = "defineProps";
    DEFINE_EMITS = "defineEmits";
    DEFINE_EXPOSE = "defineExpose";
    WITH_DEFAULTS = "withDefaults";
    DEFAULT_VAR = `__default__`;
    isBuiltInDir = makeMap(`once,memo,if,else,else-if,slot,text,html,on,bind,model,show,cloak,is`);
    templateUsageCheckCache = createCache();
    sourceToSFC = createCache();
    splitRE = /\r?\n/g;
    emptyRE = /^(?:\/\/)?\s*$/;
    replaceRE = /./g;
    _polyfillNode_tty = {
      isatty,
      ReadStream,
      WriteStream
    };
    _polyfillNode_tty$1 = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      isatty,
      ReadStream,
      WriteStream,
      "default": _polyfillNode_tty
    });
    tty = /* @__PURE__ */ getAugmentedNamespace(_polyfillNode_tty$1);
    isColorSupported = !("NO_COLOR" in {} || browser$1.argv.includes("--no-color")) && ("FORCE_COLOR" in {} || browser$1.argv.includes("--color") || false || tty.isatty(1) && {}.TERM !== "dumb" || "CI" in {});
    formatter = (open, close, replace = open) => (input2) => {
      let string2 = "" + input2;
      let index = string2.indexOf(close, open.length);
      return ~index ? open + replaceClose(string2, close, replace, index) + close : open + string2 + close;
    };
    replaceClose = (string2, close, replace, index) => {
      let start = string2.substring(0, index) + replace;
      let end = string2.substring(index + close.length);
      let nextIndex = end.indexOf(close);
      return ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end;
    };
    createColors = (enabled = isColorSupported) => ({
      isColorSupported: enabled,
      reset: enabled ? (s) => `\x1B[0m${s}\x1B[0m` : String,
      bold: enabled ? formatter("\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m") : String,
      dim: enabled ? formatter("\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m") : String,
      italic: enabled ? formatter("\x1B[3m", "\x1B[23m") : String,
      underline: enabled ? formatter("\x1B[4m", "\x1B[24m") : String,
      inverse: enabled ? formatter("\x1B[7m", "\x1B[27m") : String,
      hidden: enabled ? formatter("\x1B[8m", "\x1B[28m") : String,
      strikethrough: enabled ? formatter("\x1B[9m", "\x1B[29m") : String,
      black: enabled ? formatter("\x1B[30m", "\x1B[39m") : String,
      red: enabled ? formatter("\x1B[31m", "\x1B[39m") : String,
      green: enabled ? formatter("\x1B[32m", "\x1B[39m") : String,
      yellow: enabled ? formatter("\x1B[33m", "\x1B[39m") : String,
      blue: enabled ? formatter("\x1B[34m", "\x1B[39m") : String,
      magenta: enabled ? formatter("\x1B[35m", "\x1B[39m") : String,
      cyan: enabled ? formatter("\x1B[36m", "\x1B[39m") : String,
      white: enabled ? formatter("\x1B[37m", "\x1B[39m") : String,
      gray: enabled ? formatter("\x1B[90m", "\x1B[39m") : String,
      bgBlack: enabled ? formatter("\x1B[40m", "\x1B[49m") : String,
      bgRed: enabled ? formatter("\x1B[41m", "\x1B[49m") : String,
      bgGreen: enabled ? formatter("\x1B[42m", "\x1B[49m") : String,
      bgYellow: enabled ? formatter("\x1B[43m", "\x1B[49m") : String,
      bgBlue: enabled ? formatter("\x1B[44m", "\x1B[49m") : String,
      bgMagenta: enabled ? formatter("\x1B[45m", "\x1B[49m") : String,
      bgCyan: enabled ? formatter("\x1B[46m", "\x1B[49m") : String,
      bgWhite: enabled ? formatter("\x1B[47m", "\x1B[49m") : String
    });
    picocolors = createColors();
    createColors_1 = createColors;
    picocolors.createColors = createColors_1;
    SINGLE_QUOTE = "'".charCodeAt(0);
    DOUBLE_QUOTE = '"'.charCodeAt(0);
    BACKSLASH = "\\".charCodeAt(0);
    SLASH = "/".charCodeAt(0);
    NEWLINE = "\n".charCodeAt(0);
    SPACE = " ".charCodeAt(0);
    FEED = "\f".charCodeAt(0);
    TAB = "	".charCodeAt(0);
    CR = "\r".charCodeAt(0);
    OPEN_SQUARE = "[".charCodeAt(0);
    CLOSE_SQUARE = "]".charCodeAt(0);
    OPEN_PARENTHESES = "(".charCodeAt(0);
    CLOSE_PARENTHESES = ")".charCodeAt(0);
    OPEN_CURLY = "{".charCodeAt(0);
    CLOSE_CURLY = "}".charCodeAt(0);
    SEMICOLON = ";".charCodeAt(0);
    ASTERISK = "*".charCodeAt(0);
    COLON = ":".charCodeAt(0);
    AT = "@".charCodeAt(0);
    RE_AT_END = /[\t\n\f\r "#'()/;[\\\]{}]/g;
    RE_WORD_END = /[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g;
    RE_BAD_BRACKET = /.[\n"'(/\\]/;
    RE_HEX_ESCAPE = /[\da-f]/i;
    tokenize = function tokenizer(input2, options = {}) {
      let css = input2.css.valueOf();
      let ignore = options.ignoreErrors;
      let code, next, quote, content, escape2;
      let escaped, escapePos, prev, n2, currentToken;
      let length2 = css.length;
      let pos = 0;
      let buffer = [];
      let returned = [];
      function position() {
        return pos;
      }
      function unclosed(what) {
        throw input2.error("Unclosed " + what, pos);
      }
      function endOfFile() {
        return returned.length === 0 && pos >= length2;
      }
      function nextToken(opts) {
        if (returned.length)
          return returned.pop();
        if (pos >= length2)
          return;
        let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;
        code = css.charCodeAt(pos);
        switch (code) {
          case NEWLINE:
          case SPACE:
          case TAB:
          case CR:
          case FEED: {
            next = pos;
            do {
              next += 1;
              code = css.charCodeAt(next);
            } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);
            currentToken = ["space", css.slice(pos, next)];
            pos = next - 1;
            break;
          }
          case OPEN_SQUARE:
          case CLOSE_SQUARE:
          case OPEN_CURLY:
          case CLOSE_CURLY:
          case COLON:
          case SEMICOLON:
          case CLOSE_PARENTHESES: {
            let controlChar = String.fromCharCode(code);
            currentToken = [controlChar, controlChar, pos];
            break;
          }
          case OPEN_PARENTHESES: {
            prev = buffer.length ? buffer.pop()[1] : "";
            n2 = css.charCodeAt(pos + 1);
            if (prev === "url" && n2 !== SINGLE_QUOTE && n2 !== DOUBLE_QUOTE && n2 !== SPACE && n2 !== NEWLINE && n2 !== TAB && n2 !== FEED && n2 !== CR) {
              next = pos;
              do {
                escaped = false;
                next = css.indexOf(")", next + 1);
                if (next === -1) {
                  if (ignore || ignoreUnclosed) {
                    next = pos;
                    break;
                  } else {
                    unclosed("bracket");
                  }
                }
                escapePos = next;
                while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
                  escapePos -= 1;
                  escaped = !escaped;
                }
              } while (escaped);
              currentToken = ["brackets", css.slice(pos, next + 1), pos, next];
              pos = next;
            } else {
              next = css.indexOf(")", pos + 1);
              content = css.slice(pos, next + 1);
              if (next === -1 || RE_BAD_BRACKET.test(content)) {
                currentToken = ["(", "(", pos];
              } else {
                currentToken = ["brackets", content, pos, next];
                pos = next;
              }
            }
            break;
          }
          case SINGLE_QUOTE:
          case DOUBLE_QUOTE: {
            quote = code === SINGLE_QUOTE ? "'" : '"';
            next = pos;
            do {
              escaped = false;
              next = css.indexOf(quote, next + 1);
              if (next === -1) {
                if (ignore || ignoreUnclosed) {
                  next = pos + 1;
                  break;
                } else {
                  unclosed("string");
                }
              }
              escapePos = next;
              while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
                escapePos -= 1;
                escaped = !escaped;
              }
            } while (escaped);
            currentToken = ["string", css.slice(pos, next + 1), pos, next];
            pos = next;
            break;
          }
          case AT: {
            RE_AT_END.lastIndex = pos + 1;
            RE_AT_END.test(css);
            if (RE_AT_END.lastIndex === 0) {
              next = css.length - 1;
            } else {
              next = RE_AT_END.lastIndex - 2;
            }
            currentToken = ["at-word", css.slice(pos, next + 1), pos, next];
            pos = next;
            break;
          }
          case BACKSLASH: {
            next = pos;
            escape2 = true;
            while (css.charCodeAt(next + 1) === BACKSLASH) {
              next += 1;
              escape2 = !escape2;
            }
            code = css.charCodeAt(next + 1);
            if (escape2 && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {
              next += 1;
              if (RE_HEX_ESCAPE.test(css.charAt(next))) {
                while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {
                  next += 1;
                }
                if (css.charCodeAt(next + 1) === SPACE) {
                  next += 1;
                }
              }
            }
            currentToken = ["word", css.slice(pos, next + 1), pos, next];
            pos = next;
            break;
          }
          default: {
            if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {
              next = css.indexOf("*/", pos + 2) + 1;
              if (next === 0) {
                if (ignore || ignoreUnclosed) {
                  next = css.length;
                } else {
                  unclosed("comment");
                }
              }
              currentToken = ["comment", css.slice(pos, next + 1), pos, next];
              pos = next;
            } else {
              RE_WORD_END.lastIndex = pos + 1;
              RE_WORD_END.test(css);
              if (RE_WORD_END.lastIndex === 0) {
                next = css.length - 1;
              } else {
                next = RE_WORD_END.lastIndex - 2;
              }
              currentToken = ["word", css.slice(pos, next + 1), pos, next];
              buffer.push(currentToken);
              pos = next;
            }
            break;
          }
        }
        pos++;
        return currentToken;
      }
      function back(token) {
        returned.push(token);
      }
      return {
        back,
        nextToken,
        endOfFile,
        position
      };
    };
    HIGHLIGHT_THEME = {
      "brackets": picocolors.cyan,
      "at-word": picocolors.cyan,
      "comment": picocolors.gray,
      "string": picocolors.green,
      "class": picocolors.yellow,
      "hash": picocolors.magenta,
      "call": picocolors.cyan,
      "(": picocolors.cyan,
      ")": picocolors.cyan,
      "{": picocolors.yellow,
      "}": picocolors.yellow,
      "[": picocolors.yellow,
      "]": picocolors.yellow,
      ":": picocolors.yellow,
      ";": picocolors.yellow
    };
    terminalHighlight.registerInput = registerInput;
    terminalHighlight_1 = terminalHighlight;
    CssSyntaxError = class extends Error {
      constructor(message, line, column, source, file, plugin2) {
        super(message);
        this.name = "CssSyntaxError";
        this.reason = message;
        if (file) {
          this.file = file;
        }
        if (source) {
          this.source = source;
        }
        if (plugin2) {
          this.plugin = plugin2;
        }
        if (typeof line !== "undefined" && typeof column !== "undefined") {
          if (typeof line === "number") {
            this.line = line;
            this.column = column;
          } else {
            this.line = line.line;
            this.column = line.column;
            this.endLine = column.line;
            this.endColumn = column.column;
          }
        }
        this.setMessage();
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, CssSyntaxError);
        }
      }
      setMessage() {
        this.message = this.plugin ? this.plugin + ": " : "";
        this.message += this.file ? this.file : "<css input>";
        if (typeof this.line !== "undefined") {
          this.message += ":" + this.line + ":" + this.column;
        }
        this.message += ": " + this.reason;
      }
      showSourceCode(color) {
        if (!this.source)
          return "";
        let css = this.source;
        if (color == null)
          color = picocolors.isColorSupported;
        if (terminalHighlight_1) {
          if (color)
            css = terminalHighlight_1(css);
        }
        let lines = css.split(/\r?\n/);
        let start = Math.max(this.line - 3, 0);
        let end = Math.min(this.line + 2, lines.length);
        let maxWidth = String(end).length;
        let mark, aside;
        if (color) {
          let { bold, red, gray } = picocolors.createColors(true);
          mark = (text) => bold(red(text));
          aside = (text) => gray(text);
        } else {
          mark = aside = (str) => str;
        }
        return lines.slice(start, end).map((line, index) => {
          let number = start + 1 + index;
          let gutter = " " + (" " + number).slice(-maxWidth) + " | ";
          if (number === this.line) {
            let spacing = aside(gutter.replace(/\d/g, " ")) + line.slice(0, this.column - 1).replace(/[^\t]/g, " ");
            return mark(">") + aside(gutter) + line + "\n " + spacing + mark("^");
          }
          return " " + aside(gutter) + line;
        }).join("\n");
      }
      toString() {
        let code = this.showSourceCode();
        if (code) {
          code = "\n\n" + code + "\n";
        }
        return this.name + ": " + this.message + code;
      }
    };
    cssSyntaxError = CssSyntaxError;
    CssSyntaxError.default = CssSyntaxError;
    isClean = Symbol("isClean");
    my = Symbol("my");
    symbols = {
      isClean,
      my
    };
    DEFAULT_RAW = {
      colon: ": ",
      indent: "    ",
      beforeDecl: "\n",
      beforeRule: "\n",
      beforeOpen: " ",
      beforeClose: "\n",
      beforeComment: "\n",
      after: "\n",
      emptyBody: "",
      commentLeft: " ",
      commentRight: " ",
      semicolon: false
    };
    Stringifier = class {
      constructor(builder) {
        this.builder = builder;
      }
      stringify(node2, semicolon) {
        if (!this[node2.type]) {
          throw new Error("Unknown AST node type " + node2.type + ". Maybe you need to change PostCSS stringifier.");
        }
        this[node2.type](node2, semicolon);
      }
      document(node2) {
        this.body(node2);
      }
      root(node2) {
        this.body(node2);
        if (node2.raws.after)
          this.builder(node2.raws.after);
      }
      comment(node2) {
        let left = this.raw(node2, "left", "commentLeft");
        let right = this.raw(node2, "right", "commentRight");
        this.builder("/*" + left + node2.text + right + "*/", node2);
      }
      decl(node2, semicolon) {
        let between = this.raw(node2, "between", "colon");
        let string2 = node2.prop + between + this.rawValue(node2, "value");
        if (node2.important) {
          string2 += node2.raws.important || " !important";
        }
        if (semicolon)
          string2 += ";";
        this.builder(string2, node2);
      }
      rule(node2) {
        this.block(node2, this.rawValue(node2, "selector"));
        if (node2.raws.ownSemicolon) {
          this.builder(node2.raws.ownSemicolon, node2, "end");
        }
      }
      atrule(node2, semicolon) {
        let name = "@" + node2.name;
        let params = node2.params ? this.rawValue(node2, "params") : "";
        if (typeof node2.raws.afterName !== "undefined") {
          name += node2.raws.afterName;
        } else if (params) {
          name += " ";
        }
        if (node2.nodes) {
          this.block(node2, name + params);
        } else {
          let end = (node2.raws.between || "") + (semicolon ? ";" : "");
          this.builder(name + params + end, node2);
        }
      }
      body(node2) {
        let last2 = node2.nodes.length - 1;
        while (last2 > 0) {
          if (node2.nodes[last2].type !== "comment")
            break;
          last2 -= 1;
        }
        let semicolon = this.raw(node2, "semicolon");
        for (let i = 0; i < node2.nodes.length; i++) {
          let child = node2.nodes[i];
          let before = this.raw(child, "before");
          if (before)
            this.builder(before);
          this.stringify(child, last2 !== i || semicolon);
        }
      }
      block(node2, start) {
        let between = this.raw(node2, "between", "beforeOpen");
        this.builder(start + between + "{", node2, "start");
        let after;
        if (node2.nodes && node2.nodes.length) {
          this.body(node2);
          after = this.raw(node2, "after");
        } else {
          after = this.raw(node2, "after", "emptyBody");
        }
        if (after)
          this.builder(after);
        this.builder("}", node2, "end");
      }
      raw(node2, own, detect) {
        let value;
        if (!detect)
          detect = own;
        if (own) {
          value = node2.raws[own];
          if (typeof value !== "undefined")
            return value;
        }
        let parent = node2.parent;
        if (detect === "before") {
          if (!parent || parent.type === "root" && parent.first === node2) {
            return "";
          }
          if (parent && parent.type === "document") {
            return "";
          }
        }
        if (!parent)
          return DEFAULT_RAW[detect];
        let root2 = node2.root();
        if (!root2.rawCache)
          root2.rawCache = {};
        if (typeof root2.rawCache[detect] !== "undefined") {
          return root2.rawCache[detect];
        }
        if (detect === "before" || detect === "after") {
          return this.beforeAfter(node2, detect);
        } else {
          let method = "raw" + capitalize$1(detect);
          if (this[method]) {
            value = this[method](root2, node2);
          } else {
            root2.walk((i) => {
              value = i.raws[own];
              if (typeof value !== "undefined")
                return false;
            });
          }
        }
        if (typeof value === "undefined")
          value = DEFAULT_RAW[detect];
        root2.rawCache[detect] = value;
        return value;
      }
      rawSemicolon(root2) {
        let value;
        root2.walk((i) => {
          if (i.nodes && i.nodes.length && i.last.type === "decl") {
            value = i.raws.semicolon;
            if (typeof value !== "undefined")
              return false;
          }
        });
        return value;
      }
      rawEmptyBody(root2) {
        let value;
        root2.walk((i) => {
          if (i.nodes && i.nodes.length === 0) {
            value = i.raws.after;
            if (typeof value !== "undefined")
              return false;
          }
        });
        return value;
      }
      rawIndent(root2) {
        if (root2.raws.indent)
          return root2.raws.indent;
        let value;
        root2.walk((i) => {
          let p = i.parent;
          if (p && p !== root2 && p.parent && p.parent === root2) {
            if (typeof i.raws.before !== "undefined") {
              let parts = i.raws.before.split("\n");
              value = parts[parts.length - 1];
              value = value.replace(/\S/g, "");
              return false;
            }
          }
        });
        return value;
      }
      rawBeforeComment(root2, node2) {
        let value;
        root2.walkComments((i) => {
          if (typeof i.raws.before !== "undefined") {
            value = i.raws.before;
            if (value.includes("\n")) {
              value = value.replace(/[^\n]+$/, "");
            }
            return false;
          }
        });
        if (typeof value === "undefined") {
          value = this.raw(node2, null, "beforeDecl");
        } else if (value) {
          value = value.replace(/\S/g, "");
        }
        return value;
      }
      rawBeforeDecl(root2, node2) {
        let value;
        root2.walkDecls((i) => {
          if (typeof i.raws.before !== "undefined") {
            value = i.raws.before;
            if (value.includes("\n")) {
              value = value.replace(/[^\n]+$/, "");
            }
            return false;
          }
        });
        if (typeof value === "undefined") {
          value = this.raw(node2, null, "beforeRule");
        } else if (value) {
          value = value.replace(/\S/g, "");
        }
        return value;
      }
      rawBeforeRule(root2) {
        let value;
        root2.walk((i) => {
          if (i.nodes && (i.parent !== root2 || root2.first !== i)) {
            if (typeof i.raws.before !== "undefined") {
              value = i.raws.before;
              if (value.includes("\n")) {
                value = value.replace(/[^\n]+$/, "");
              }
              return false;
            }
          }
        });
        if (value)
          value = value.replace(/\S/g, "");
        return value;
      }
      rawBeforeClose(root2) {
        let value;
        root2.walk((i) => {
          if (i.nodes && i.nodes.length > 0) {
            if (typeof i.raws.after !== "undefined") {
              value = i.raws.after;
              if (value.includes("\n")) {
                value = value.replace(/[^\n]+$/, "");
              }
              return false;
            }
          }
        });
        if (value)
          value = value.replace(/\S/g, "");
        return value;
      }
      rawBeforeOpen(root2) {
        let value;
        root2.walk((i) => {
          if (i.type !== "decl") {
            value = i.raws.between;
            if (typeof value !== "undefined")
              return false;
          }
        });
        return value;
      }
      rawColon(root2) {
        let value;
        root2.walkDecls((i) => {
          if (typeof i.raws.between !== "undefined") {
            value = i.raws.between.replace(/[^\s:]/g, "");
            return false;
          }
        });
        return value;
      }
      beforeAfter(node2, detect) {
        let value;
        if (node2.type === "decl") {
          value = this.raw(node2, null, "beforeDecl");
        } else if (node2.type === "comment") {
          value = this.raw(node2, null, "beforeComment");
        } else if (detect === "before") {
          value = this.raw(node2, null, "beforeRule");
        } else {
          value = this.raw(node2, null, "beforeClose");
        }
        let buf = node2.parent;
        let depth = 0;
        while (buf && buf.type !== "root") {
          depth += 1;
          buf = buf.parent;
        }
        if (value.includes("\n")) {
          let indent2 = this.raw(node2, null, "indent");
          if (indent2.length) {
            for (let step = 0; step < depth; step++)
              value += indent2;
          }
        }
        return value;
      }
      rawValue(node2, prop) {
        let value = node2[prop];
        let raw = node2.raws[prop];
        if (raw && raw.value === value) {
          return raw.raw;
        }
        return value;
      }
    };
    stringifier = Stringifier;
    Stringifier.default = Stringifier;
    stringify_1 = stringify$1;
    stringify$1.default = stringify$1;
    ({ isClean: isClean$1, my: my$1 } = symbols);
    Node$1 = class {
      constructor(defaults = {}) {
        this.raws = {};
        this[isClean$1] = false;
        this[my$1] = true;
        for (let name in defaults) {
          if (name === "nodes") {
            this.nodes = [];
            for (let node2 of defaults[name]) {
              if (typeof node2.clone === "function") {
                this.append(node2.clone());
              } else {
                this.append(node2);
              }
            }
          } else {
            this[name] = defaults[name];
          }
        }
      }
      error(message, opts = {}) {
        if (this.source) {
          let { start, end } = this.rangeBy(opts);
          return this.source.input.error(message, { line: start.line, column: start.column }, { line: end.line, column: end.column }, opts);
        }
        return new cssSyntaxError(message);
      }
      warn(result2, text, opts) {
        let data = { node: this };
        for (let i in opts)
          data[i] = opts[i];
        return result2.warn(text, data);
      }
      remove() {
        if (this.parent) {
          this.parent.removeChild(this);
        }
        this.parent = void 0;
        return this;
      }
      toString(stringifier2 = stringify_1) {
        if (stringifier2.stringify)
          stringifier2 = stringifier2.stringify;
        let result2 = "";
        stringifier2(this, (i) => {
          result2 += i;
        });
        return result2;
      }
      assign(overrides = {}) {
        for (let name in overrides) {
          this[name] = overrides[name];
        }
        return this;
      }
      clone(overrides = {}) {
        let cloned = cloneNode(this);
        for (let name in overrides) {
          cloned[name] = overrides[name];
        }
        return cloned;
      }
      cloneBefore(overrides = {}) {
        let cloned = this.clone(overrides);
        this.parent.insertBefore(this, cloned);
        return cloned;
      }
      cloneAfter(overrides = {}) {
        let cloned = this.clone(overrides);
        this.parent.insertAfter(this, cloned);
        return cloned;
      }
      replaceWith(...nodes) {
        if (this.parent) {
          let bookmark = this;
          let foundSelf = false;
          for (let node2 of nodes) {
            if (node2 === this) {
              foundSelf = true;
            } else if (foundSelf) {
              this.parent.insertAfter(bookmark, node2);
              bookmark = node2;
            } else {
              this.parent.insertBefore(bookmark, node2);
            }
          }
          if (!foundSelf) {
            this.remove();
          }
        }
        return this;
      }
      next() {
        if (!this.parent)
          return void 0;
        let index = this.parent.index(this);
        return this.parent.nodes[index + 1];
      }
      prev() {
        if (!this.parent)
          return void 0;
        let index = this.parent.index(this);
        return this.parent.nodes[index - 1];
      }
      before(add2) {
        this.parent.insertBefore(this, add2);
        return this;
      }
      after(add2) {
        this.parent.insertAfter(this, add2);
        return this;
      }
      root() {
        let result2 = this;
        while (result2.parent && result2.parent.type !== "document") {
          result2 = result2.parent;
        }
        return result2;
      }
      raw(prop, defaultType) {
        let str = new stringifier();
        return str.raw(this, prop, defaultType);
      }
      cleanRaws(keepBetween) {
        delete this.raws.before;
        delete this.raws.after;
        if (!keepBetween)
          delete this.raws.between;
      }
      toJSON(_, inputs) {
        let fixed = {};
        let emitInputs = inputs == null;
        inputs = inputs || /* @__PURE__ */ new Map();
        let inputsNextIndex = 0;
        for (let name in this) {
          if (!Object.prototype.hasOwnProperty.call(this, name)) {
            continue;
          }
          if (name === "parent" || name === "proxyCache")
            continue;
          let value = this[name];
          if (Array.isArray(value)) {
            fixed[name] = value.map((i) => {
              if (typeof i === "object" && i.toJSON) {
                return i.toJSON(null, inputs);
              } else {
                return i;
              }
            });
          } else if (typeof value === "object" && value.toJSON) {
            fixed[name] = value.toJSON(null, inputs);
          } else if (name === "source") {
            let inputId = inputs.get(value.input);
            if (inputId == null) {
              inputId = inputsNextIndex;
              inputs.set(value.input, inputsNextIndex);
              inputsNextIndex++;
            }
            fixed[name] = {
              inputId,
              start: value.start,
              end: value.end
            };
          } else {
            fixed[name] = value;
          }
        }
        if (emitInputs) {
          fixed.inputs = [...inputs.keys()].map((input2) => input2.toJSON());
        }
        return fixed;
      }
      positionInside(index) {
        let string2 = this.toString();
        let column = this.source.start.column;
        let line = this.source.start.line;
        for (let i = 0; i < index; i++) {
          if (string2[i] === "\n") {
            column = 1;
            line += 1;
          } else {
            column += 1;
          }
        }
        return { line, column };
      }
      positionBy(opts) {
        let pos = this.source.start;
        if (opts.index) {
          pos = this.positionInside(opts.index);
        } else if (opts.word) {
          let index = this.toString().indexOf(opts.word);
          if (index !== -1)
            pos = this.positionInside(index);
        }
        return pos;
      }
      rangeBy(opts) {
        let start = {
          line: this.source.start.line,
          column: this.source.start.column
        };
        let end = this.source.end ? {
          line: this.source.end.line,
          column: this.source.end.column + 1
        } : {
          line: start.line,
          column: start.column + 1
        };
        if (opts.word) {
          let index = this.toString().indexOf(opts.word);
          if (index !== -1) {
            start = this.positionInside(index);
            end = this.positionInside(index + opts.word.length);
          }
        } else {
          if (opts.start) {
            start = {
              line: opts.start.line,
              column: opts.start.column
            };
          } else if (opts.index) {
            start = this.positionInside(opts.index);
          }
          if (opts.end) {
            end = {
              line: opts.end.line,
              column: opts.end.column
            };
          } else if (opts.endIndex) {
            end = this.positionInside(opts.endIndex);
          } else if (opts.index) {
            end = this.positionInside(opts.index + 1);
          }
        }
        if (end.line < start.line || end.line === start.line && end.column <= start.column) {
          end = { line: start.line, column: start.column + 1 };
        }
        return { start, end };
      }
      getProxyProcessor() {
        return {
          set(node2, prop, value) {
            if (node2[prop] === value)
              return true;
            node2[prop] = value;
            if (prop === "prop" || prop === "value" || prop === "name" || prop === "params" || prop === "important" || prop === "text") {
              node2.markDirty();
            }
            return true;
          },
          get(node2, prop) {
            if (prop === "proxyOf") {
              return node2;
            } else if (prop === "root") {
              return () => node2.root().toProxy();
            } else {
              return node2[prop];
            }
          }
        };
      }
      toProxy() {
        if (!this.proxyCache) {
          this.proxyCache = new Proxy(this, this.getProxyProcessor());
        }
        return this.proxyCache;
      }
      addToError(error2) {
        error2.postcssNode = this;
        if (error2.stack && this.source && /\n\s{4}at /.test(error2.stack)) {
          let s = this.source;
          error2.stack = error2.stack.replace(/\n\s{4}at /, `$&${s.input.from}:${s.start.line}:${s.start.column}$&`);
        }
        return error2;
      }
      markDirty() {
        if (this[isClean$1]) {
          this[isClean$1] = false;
          let next = this;
          while (next = next.parent) {
            next[isClean$1] = false;
          }
        }
      }
      get proxyOf() {
        return this;
      }
    };
    node_1 = Node$1;
    Node$1.default = Node$1;
    Declaration = class extends node_1 {
      constructor(defaults) {
        if (defaults && typeof defaults.value !== "undefined" && typeof defaults.value !== "string") {
          defaults = { ...defaults, value: String(defaults.value) };
        }
        super(defaults);
        this.type = "decl";
      }
      get variable() {
        return this.prop.startsWith("--") || this.prop[0] === "$";
      }
    };
    declaration = Declaration;
    Declaration.default = Declaration;
    intToCharMap$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
    encode$4 = function(number) {
      if (0 <= number && number < intToCharMap$1.length) {
        return intToCharMap$1[number];
      }
      throw new TypeError("Must be between 0 and 63: " + number);
    };
    decode$2 = function(charCode) {
      var bigA = 65;
      var bigZ = 90;
      var littleA = 97;
      var littleZ = 122;
      var zero = 48;
      var nine = 57;
      var plus = 43;
      var slash = 47;
      var littleOffset = 26;
      var numberOffset = 52;
      if (bigA <= charCode && charCode <= bigZ) {
        return charCode - bigA;
      }
      if (littleA <= charCode && charCode <= littleZ) {
        return charCode - littleA + littleOffset;
      }
      if (zero <= charCode && charCode <= nine) {
        return charCode - zero + numberOffset;
      }
      if (charCode == plus) {
        return 62;
      }
      if (charCode == slash) {
        return 63;
      }
      return -1;
    };
    base64$1 = {
      encode: encode$4,
      decode: decode$2
    };
    VLQ_BASE_SHIFT$1 = 5;
    VLQ_BASE$1 = 1 << VLQ_BASE_SHIFT$1;
    VLQ_BASE_MASK$1 = VLQ_BASE$1 - 1;
    VLQ_CONTINUATION_BIT$1 = VLQ_BASE$1;
    encode$5 = function base64VLQ_encode2(aValue) {
      var encoded = "";
      var digit;
      var vlq = toVLQSigned$1(aValue);
      do {
        digit = vlq & VLQ_BASE_MASK$1;
        vlq >>>= VLQ_BASE_SHIFT$1;
        if (vlq > 0) {
          digit |= VLQ_CONTINUATION_BIT$1;
        }
        encoded += base64$1.encode(digit);
      } while (vlq > 0);
      return encoded;
    };
    decode$3 = function base64VLQ_decode2(aStr, aIndex, aOutParam) {
      var strLen = aStr.length;
      var result2 = 0;
      var shift = 0;
      var continuation, digit;
      do {
        if (aIndex >= strLen) {
          throw new Error("Expected more digits in base 64 VLQ value.");
        }
        digit = base64$1.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
          throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        }
        continuation = !!(digit & VLQ_CONTINUATION_BIT$1);
        digit &= VLQ_BASE_MASK$1;
        result2 = result2 + (digit << shift);
        shift += VLQ_BASE_SHIFT$1;
      } while (continuation);
      aOutParam.value = fromVLQSigned$1(result2);
      aOutParam.rest = aIndex;
    };
    base64Vlq$1 = {
      encode: encode$5,
      decode: decode$3
    };
    util$1 = createCommonjsModule(function(module2, exports2) {
      function getArg(aArgs, aName, aDefaultValue) {
        if (aName in aArgs) {
          return aArgs[aName];
        } else if (arguments.length === 3) {
          return aDefaultValue;
        } else {
          throw new Error('"' + aName + '" is a required argument.');
        }
      }
      exports2.getArg = getArg;
      var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
      var dataUrlRegexp = /^data:.+\,.+$/;
      function urlParse2(aUrl) {
        var match = aUrl.match(urlRegexp);
        if (!match) {
          return null;
        }
        return {
          scheme: match[1],
          auth: match[2],
          host: match[3],
          port: match[4],
          path: match[5]
        };
      }
      exports2.urlParse = urlParse2;
      function urlGenerate(aParsedUrl) {
        var url = "";
        if (aParsedUrl.scheme) {
          url += aParsedUrl.scheme + ":";
        }
        url += "//";
        if (aParsedUrl.auth) {
          url += aParsedUrl.auth + "@";
        }
        if (aParsedUrl.host) {
          url += aParsedUrl.host;
        }
        if (aParsedUrl.port) {
          url += ":" + aParsedUrl.port;
        }
        if (aParsedUrl.path) {
          url += aParsedUrl.path;
        }
        return url;
      }
      exports2.urlGenerate = urlGenerate;
      var MAX_CACHED_INPUTS = 32;
      function lruMemoize(f) {
        var cache = [];
        return function(input2) {
          for (var i = 0; i < cache.length; i++) {
            if (cache[i].input === input2) {
              var temp = cache[0];
              cache[0] = cache[i];
              cache[i] = temp;
              return cache[0].result;
            }
          }
          var result2 = f(input2);
          cache.unshift({
            input: input2,
            result: result2
          });
          if (cache.length > MAX_CACHED_INPUTS) {
            cache.pop();
          }
          return result2;
        };
      }
      var normalize2 = lruMemoize(function normalize3(aPath) {
        var path3 = aPath;
        var url = urlParse2(aPath);
        if (url) {
          if (!url.path) {
            return aPath;
          }
          path3 = url.path;
        }
        var isAbsolute2 = exports2.isAbsolute(path3);
        var parts = [];
        var start = 0;
        var i = 0;
        while (true) {
          start = i;
          i = path3.indexOf("/", start);
          if (i === -1) {
            parts.push(path3.slice(start));
            break;
          } else {
            parts.push(path3.slice(start, i));
            while (i < path3.length && path3[i] === "/") {
              i++;
            }
          }
        }
        for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
          part = parts[i];
          if (part === ".") {
            parts.splice(i, 1);
          } else if (part === "..") {
            up++;
          } else if (up > 0) {
            if (part === "") {
              parts.splice(i + 1, up);
              up = 0;
            } else {
              parts.splice(i, 2);
              up--;
            }
          }
        }
        path3 = parts.join("/");
        if (path3 === "") {
          path3 = isAbsolute2 ? "/" : ".";
        }
        if (url) {
          url.path = path3;
          return urlGenerate(url);
        }
        return path3;
      });
      exports2.normalize = normalize2;
      function join2(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = ".";
        }
        if (aPath === "") {
          aPath = ".";
        }
        var aPathUrl = urlParse2(aPath);
        var aRootUrl = urlParse2(aRoot);
        if (aRootUrl) {
          aRoot = aRootUrl.path || "/";
        }
        if (aPathUrl && !aPathUrl.scheme) {
          if (aRootUrl) {
            aPathUrl.scheme = aRootUrl.scheme;
          }
          return urlGenerate(aPathUrl);
        }
        if (aPathUrl || aPath.match(dataUrlRegexp)) {
          return aPath;
        }
        if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
          aRootUrl.host = aPath;
          return urlGenerate(aRootUrl);
        }
        var joined = aPath.charAt(0) === "/" ? aPath : normalize2(aRoot.replace(/\/+$/, "") + "/" + aPath);
        if (aRootUrl) {
          aRootUrl.path = joined;
          return urlGenerate(aRootUrl);
        }
        return joined;
      }
      exports2.join = join2;
      exports2.isAbsolute = function(aPath) {
        return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
      };
      function relative2(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = ".";
        }
        aRoot = aRoot.replace(/\/$/, "");
        var level = 0;
        while (aPath.indexOf(aRoot + "/") !== 0) {
          var index = aRoot.lastIndexOf("/");
          if (index < 0) {
            return aPath;
          }
          aRoot = aRoot.slice(0, index);
          if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
            return aPath;
          }
          ++level;
        }
        return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
      }
      exports2.relative = relative2;
      var supportsNullProto = function() {
        var obj = /* @__PURE__ */ Object.create(null);
        return !("__proto__" in obj);
      }();
      function identity(s) {
        return s;
      }
      function toSetString(aStr) {
        if (isProtoString(aStr)) {
          return "$" + aStr;
        }
        return aStr;
      }
      exports2.toSetString = supportsNullProto ? identity : toSetString;
      function fromSetString(aStr) {
        if (isProtoString(aStr)) {
          return aStr.slice(1);
        }
        return aStr;
      }
      exports2.fromSetString = supportsNullProto ? identity : fromSetString;
      function isProtoString(s) {
        if (!s) {
          return false;
        }
        var length2 = s.length;
        if (length2 < 9) {
          return false;
        }
        if (s.charCodeAt(length2 - 1) !== 95 || s.charCodeAt(length2 - 2) !== 95 || s.charCodeAt(length2 - 3) !== 111 || s.charCodeAt(length2 - 4) !== 116 || s.charCodeAt(length2 - 5) !== 111 || s.charCodeAt(length2 - 6) !== 114 || s.charCodeAt(length2 - 7) !== 112 || s.charCodeAt(length2 - 8) !== 95 || s.charCodeAt(length2 - 9) !== 95) {
          return false;
        }
        for (var i = length2 - 10; i >= 0; i--) {
          if (s.charCodeAt(i) !== 36) {
            return false;
          }
        }
        return true;
      }
      function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
        var cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0 || onlyCompareOriginal) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports2.compareByOriginalPositions = compareByOriginalPositions;
      function compareByOriginalPositionsNoSource(mappingA, mappingB, onlyCompareOriginal) {
        var cmp;
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0 || onlyCompareOriginal) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports2.compareByOriginalPositionsNoSource = compareByOriginalPositionsNoSource;
      function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0 || onlyCompareGenerated) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports2.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
      function compareByGeneratedPositionsDeflatedNoLine(mappingA, mappingB, onlyCompareGenerated) {
        var cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0 || onlyCompareGenerated) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports2.compareByGeneratedPositionsDeflatedNoLine = compareByGeneratedPositionsDeflatedNoLine;
      function strcmp(aStr1, aStr2) {
        if (aStr1 === aStr2) {
          return 0;
        }
        if (aStr1 === null) {
          return 1;
        }
        if (aStr2 === null) {
          return -1;
        }
        if (aStr1 > aStr2) {
          return 1;
        }
        return -1;
      }
      function compareByGeneratedPositionsInflated(mappingA, mappingB) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports2.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
      function parseSourceMapInput(str) {
        return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
      }
      exports2.parseSourceMapInput = parseSourceMapInput;
      function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
        sourceURL = sourceURL || "";
        if (sourceRoot) {
          if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
            sourceRoot += "/";
          }
          sourceURL = sourceRoot + sourceURL;
        }
        if (sourceMapURL) {
          var parsed = urlParse2(sourceMapURL);
          if (!parsed) {
            throw new Error("sourceMapURL could not be parsed");
          }
          if (parsed.path) {
            var index = parsed.path.lastIndexOf("/");
            if (index >= 0) {
              parsed.path = parsed.path.substring(0, index + 1);
            }
          }
          sourceURL = join2(urlGenerate(parsed), sourceURL);
        }
        return normalize2(sourceURL);
      }
      exports2.computeSourceURL = computeSourceURL;
    });
    has$1 = Object.prototype.hasOwnProperty;
    hasNativeMap$1 = typeof Map !== "undefined";
    ArraySet$3.fromArray = function ArraySet_fromArray2(aArray, aAllowDuplicates) {
      var set = new ArraySet$3();
      for (var i = 0, len = aArray.length; i < len; i++) {
        set.add(aArray[i], aAllowDuplicates);
      }
      return set;
    };
    ArraySet$3.prototype.size = function ArraySet_size2() {
      return hasNativeMap$1 ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    };
    ArraySet$3.prototype.add = function ArraySet_add2(aStr, aAllowDuplicates) {
      var sStr = hasNativeMap$1 ? aStr : util$1.toSetString(aStr);
      var isDuplicate = hasNativeMap$1 ? this.has(aStr) : has$1.call(this._set, sStr);
      var idx = this._array.length;
      if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
      }
      if (!isDuplicate) {
        if (hasNativeMap$1) {
          this._set.set(aStr, idx);
        } else {
          this._set[sStr] = idx;
        }
      }
    };
    ArraySet$3.prototype.has = function ArraySet_has2(aStr) {
      if (hasNativeMap$1) {
        return this._set.has(aStr);
      } else {
        var sStr = util$1.toSetString(aStr);
        return has$1.call(this._set, sStr);
      }
    };
    ArraySet$3.prototype.indexOf = function ArraySet_indexOf2(aStr) {
      if (hasNativeMap$1) {
        var idx = this._set.get(aStr);
        if (idx >= 0) {
          return idx;
        }
      } else {
        var sStr = util$1.toSetString(aStr);
        if (has$1.call(this._set, sStr)) {
          return this._set[sStr];
        }
      }
      throw new Error('"' + aStr + '" is not in the set.');
    };
    ArraySet$3.prototype.at = function ArraySet_at2(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
      }
      throw new Error("No element indexed by " + aIdx);
    };
    ArraySet$3.prototype.toArray = function ArraySet_toArray2() {
      return this._array.slice();
    };
    ArraySet_1$1 = ArraySet$3;
    arraySet$1 = {
      ArraySet: ArraySet_1$1
    };
    MappingList$2.prototype.unsortedForEach = function MappingList_forEach2(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };
    MappingList$2.prototype.add = function MappingList_add2(aMapping) {
      if (generatedPositionAfter$1(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
      } else {
        this._sorted = false;
        this._array.push(aMapping);
      }
    };
    MappingList$2.prototype.toArray = function MappingList_toArray2() {
      if (!this._sorted) {
        this._array.sort(util$1.compareByGeneratedPositionsInflated);
        this._sorted = true;
      }
      return this._array;
    };
    MappingList_1$1 = MappingList$2;
    mappingList$1 = {
      MappingList: MappingList_1$1
    };
    ArraySet$4 = arraySet$1.ArraySet;
    MappingList$3 = mappingList$1.MappingList;
    SourceMapGenerator$3.prototype._version = 3;
    SourceMapGenerator$3.fromSourceMap = function SourceMapGenerator_fromSourceMap2(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator$3({
        file: aSourceMapConsumer.file,
        sourceRoot
      });
      aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };
        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util$1.relative(sourceRoot, newMapping.source);
          }
          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };
          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }
        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var sourceRelative = sourceFile;
        if (sourceRoot !== null) {
          sourceRelative = util$1.relative(sourceRoot, sourceFile);
        }
        if (!generator._sources.has(sourceRelative)) {
          generator._sources.add(sourceRelative);
        }
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };
    SourceMapGenerator$3.prototype.addMapping = function SourceMapGenerator_addMapping2(aArgs) {
      var generated = util$1.getArg(aArgs, "generated");
      var original = util$1.getArg(aArgs, "original", null);
      var source = util$1.getArg(aArgs, "source", null);
      var name = util$1.getArg(aArgs, "name", null);
      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }
      if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
          this._sources.add(source);
        }
      }
      if (name != null) {
        name = String(name);
        if (!this._names.has(name)) {
          this._names.add(name);
        }
      }
      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source,
        name
      });
    };
    SourceMapGenerator$3.prototype.setSourceContent = function SourceMapGenerator_setSourceContent2(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util$1.relative(this._sourceRoot, source);
      }
      if (aSourceContent != null) {
        if (!this._sourcesContents) {
          this._sourcesContents = /* @__PURE__ */ Object.create(null);
        }
        this._sourcesContents[util$1.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        delete this._sourcesContents[util$1.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };
    SourceMapGenerator$3.prototype.applySourceMap = function SourceMapGenerator_applySourceMap2(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(`SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`);
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      if (sourceRoot != null) {
        sourceFile = util$1.relative(sourceRoot, sourceFile);
      }
      var newSources = new ArraySet$4();
      var newNames = new ArraySet$4();
      this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util$1.join(aSourceMapPath, mapping.source);
            }
            if (sourceRoot != null) {
              mapping.source = util$1.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }
        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }
        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }
      }, this);
      this._sources = newSources;
      this._names = newNames;
      aSourceMapConsumer.sources.forEach(function(sourceFile2) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile2 = util$1.join(aSourceMapPath, sourceFile2);
          }
          if (sourceRoot != null) {
            sourceFile2 = util$1.relative(sourceRoot, sourceFile2);
          }
          this.setSourceContent(sourceFile2, content);
        }
      }, this);
    };
    SourceMapGenerator$3.prototype._validateMapping = function SourceMapGenerator_validateMapping2(aGenerated, aOriginal, aSource, aName) {
      if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
        throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
      }
      if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
        return;
      } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
        return;
      } else {
        throw new Error("Invalid mapping: " + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };
    SourceMapGenerator$3.prototype._serializeMappings = function SourceMapGenerator_serializeMappings2() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result2 = "";
      var next;
      var mapping;
      var nameIdx;
      var sourceIdx;
      var mappings = this._mappings.toArray();
      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];
        next = "";
        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            next += ";";
            previousGeneratedLine++;
          }
        } else {
          if (i > 0) {
            if (!util$1.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            next += ",";
          }
        }
        next += base64Vlq$1.encode(mapping.generatedColumn - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;
        if (mapping.source != null) {
          sourceIdx = this._sources.indexOf(mapping.source);
          next += base64Vlq$1.encode(sourceIdx - previousSource);
          previousSource = sourceIdx;
          next += base64Vlq$1.encode(mapping.originalLine - 1 - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;
          next += base64Vlq$1.encode(mapping.originalColumn - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;
          if (mapping.name != null) {
            nameIdx = this._names.indexOf(mapping.name);
            next += base64Vlq$1.encode(nameIdx - previousName);
            previousName = nameIdx;
          }
        }
        result2 += next;
      }
      return result2;
    };
    SourceMapGenerator$3.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent2(aSources, aSourceRoot) {
      return aSources.map(function(source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util$1.relative(aSourceRoot, source);
        }
        var key = util$1.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
      }, this);
    };
    SourceMapGenerator$3.prototype.toJSON = function SourceMapGenerator_toJSON2() {
      var map2 = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map2.file = this._file;
      }
      if (this._sourceRoot != null) {
        map2.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map2.sourcesContent = this._generateSourcesContent(map2.sources, map2.sourceRoot);
      }
      return map2;
    };
    SourceMapGenerator$3.prototype.toString = function SourceMapGenerator_toString2() {
      return JSON.stringify(this.toJSON());
    };
    SourceMapGenerator_1$1 = SourceMapGenerator$3;
    sourceMapGenerator$1 = {
      SourceMapGenerator: SourceMapGenerator_1$1
    };
    binarySearch$1 = createCommonjsModule(function(module2, exports2) {
      exports2.GREATEST_LOWER_BOUND = 1;
      exports2.LEAST_UPPER_BOUND = 2;
      function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
        var mid = Math.floor((aHigh - aLow) / 2) + aLow;
        var cmp = aCompare(aNeedle, aHaystack[mid], true);
        if (cmp === 0) {
          return mid;
        } else if (cmp > 0) {
          if (aHigh - mid > 1) {
            return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
          }
          if (aBias == exports2.LEAST_UPPER_BOUND) {
            return aHigh < aHaystack.length ? aHigh : -1;
          } else {
            return mid;
          }
        } else {
          if (mid - aLow > 1) {
            return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
          }
          if (aBias == exports2.LEAST_UPPER_BOUND) {
            return mid;
          } else {
            return aLow < 0 ? -1 : aLow;
          }
        }
      }
      exports2.search = function search(aNeedle, aHaystack, aCompare, aBias) {
        if (aHaystack.length === 0) {
          return -1;
        }
        var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports2.GREATEST_LOWER_BOUND);
        if (index < 0) {
          return -1;
        }
        while (index - 1 >= 0) {
          if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
            break;
          }
          --index;
        }
        return index;
      };
    });
    sortCache = /* @__PURE__ */ new WeakMap();
    quickSort_1$1 = function(ary, comparator, start = 0) {
      let doQuickSort2 = sortCache.get(comparator);
      if (doQuickSort2 === void 0) {
        doQuickSort2 = cloneSort(comparator);
        sortCache.set(comparator, doQuickSort2);
      }
      doQuickSort2(ary, comparator, start, ary.length - 1);
    };
    quickSort$2 = {
      quickSort: quickSort_1$1
    };
    ArraySet$5 = arraySet$1.ArraySet;
    quickSort$3 = quickSort$2.quickSort;
    SourceMapConsumer$2.fromSourceMap = function(aSourceMap, aSourceMapURL) {
      return BasicSourceMapConsumer$1.fromSourceMap(aSourceMap, aSourceMapURL);
    };
    SourceMapConsumer$2.prototype._version = 3;
    SourceMapConsumer$2.prototype.__generatedMappings = null;
    Object.defineProperty(SourceMapConsumer$2.prototype, "_generatedMappings", {
      configurable: true,
      enumerable: true,
      get: function() {
        if (!this.__generatedMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__generatedMappings;
      }
    });
    SourceMapConsumer$2.prototype.__originalMappings = null;
    Object.defineProperty(SourceMapConsumer$2.prototype, "_originalMappings", {
      configurable: true,
      enumerable: true,
      get: function() {
        if (!this.__originalMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__originalMappings;
      }
    });
    SourceMapConsumer$2.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator2(aStr, index) {
      var c = aStr.charAt(index);
      return c === ";" || c === ",";
    };
    SourceMapConsumer$2.prototype._parseMappings = function SourceMapConsumer_parseMappings3(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    };
    SourceMapConsumer$2.GENERATED_ORDER = 1;
    SourceMapConsumer$2.ORIGINAL_ORDER = 2;
    SourceMapConsumer$2.GREATEST_LOWER_BOUND = 1;
    SourceMapConsumer$2.LEAST_UPPER_BOUND = 2;
    SourceMapConsumer$2.prototype.eachMapping = function SourceMapConsumer_eachMapping2(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer$2.GENERATED_ORDER;
      var mappings;
      switch (order) {
        case SourceMapConsumer$2.GENERATED_ORDER:
          mappings = this._generatedMappings;
          break;
        case SourceMapConsumer$2.ORIGINAL_ORDER:
          mappings = this._originalMappings;
          break;
        default:
          throw new Error("Unknown order of iteration.");
      }
      var sourceRoot = this.sourceRoot;
      var boundCallback = aCallback.bind(context);
      var names = this._names;
      var sources = this._sources;
      var sourceMapURL = this._sourceMapURL;
      for (var i = 0, n2 = mappings.length; i < n2; i++) {
        var mapping = mappings[i];
        var source = mapping.source === null ? null : sources.at(mapping.source);
        source = util$1.computeSourceURL(sourceRoot, source, sourceMapURL);
        boundCallback({
          source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : names.at(mapping.name)
        });
      }
    };
    SourceMapConsumer$2.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor2(aArgs) {
      var line = util$1.getArg(aArgs, "line");
      var needle = {
        source: util$1.getArg(aArgs, "source"),
        originalLine: line,
        originalColumn: util$1.getArg(aArgs, "column", 0)
      };
      needle.source = this._findSourceIndex(needle.source);
      if (needle.source < 0) {
        return [];
      }
      var mappings = [];
      var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util$1.compareByOriginalPositions, binarySearch$1.LEAST_UPPER_BOUND);
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (aArgs.column === void 0) {
          var originalLine = mapping.originalLine;
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util$1.getArg(mapping, "generatedLine", null),
              column: util$1.getArg(mapping, "generatedColumn", null),
              lastColumn: util$1.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index];
          }
        } else {
          var originalColumn = mapping.originalColumn;
          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util$1.getArg(mapping, "generatedLine", null),
              column: util$1.getArg(mapping, "generatedColumn", null),
              lastColumn: util$1.getArg(mapping, "lastGeneratedColumn", null)
            });
            mapping = this._originalMappings[++index];
          }
        }
      }
      return mappings;
    };
    SourceMapConsumer_1$1 = SourceMapConsumer$2;
    BasicSourceMapConsumer$1.prototype = Object.create(SourceMapConsumer$2.prototype);
    BasicSourceMapConsumer$1.prototype.consumer = SourceMapConsumer$2;
    BasicSourceMapConsumer$1.prototype._findSourceIndex = function(aSource) {
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util$1.relative(this.sourceRoot, relativeSource);
      }
      if (this._sources.has(relativeSource)) {
        return this._sources.indexOf(relativeSource);
      }
      var i;
      for (i = 0; i < this._absoluteSources.length; ++i) {
        if (this._absoluteSources[i] == aSource) {
          return i;
        }
      }
      return -1;
    };
    BasicSourceMapConsumer$1.fromSourceMap = function SourceMapConsumer_fromSourceMap2(aSourceMap, aSourceMapURL) {
      var smc = Object.create(BasicSourceMapConsumer$1.prototype);
      var names = smc._names = ArraySet$5.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet$5.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
      smc.file = aSourceMap._file;
      smc._sourceMapURL = aSourceMapURL;
      smc._absoluteSources = smc._sources.toArray().map(function(s) {
        return util$1.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
      });
      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];
      for (var i = 0, length2 = generatedMappings.length; i < length2; i++) {
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping$1();
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;
        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;
          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }
          destOriginalMappings.push(destMapping);
        }
        destGeneratedMappings.push(destMapping);
      }
      quickSort$3(smc.__originalMappings, util$1.compareByOriginalPositions);
      return smc;
    };
    BasicSourceMapConsumer$1.prototype._version = 3;
    Object.defineProperty(BasicSourceMapConsumer$1.prototype, "sources", {
      get: function() {
        return this._absoluteSources.slice();
      }
    });
    compareGenerated = util$1.compareByGeneratedPositionsDeflatedNoLine;
    BasicSourceMapConsumer$1.prototype._parseMappings = function SourceMapConsumer_parseMappings4(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length2 = aStr.length;
      var index = 0;
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping, segment, end, value;
      let subarrayStart = 0;
      while (index < length2) {
        if (aStr.charAt(index) === ";") {
          generatedLine++;
          index++;
          previousGeneratedColumn = 0;
          sortGenerated(generatedMappings, subarrayStart);
          subarrayStart = generatedMappings.length;
        } else if (aStr.charAt(index) === ",") {
          index++;
        } else {
          mapping = new Mapping$1();
          mapping.generatedLine = generatedLine;
          for (end = index; end < length2; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          aStr.slice(index, end);
          segment = [];
          while (index < end) {
            base64Vlq$1.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }
          if (segment.length === 2) {
            throw new Error("Found a source, but no line and column");
          }
          if (segment.length === 3) {
            throw new Error("Found a source and line, but no column");
          }
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;
          if (segment.length > 1) {
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            mapping.originalLine += 1;
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;
            if (segment.length > 4) {
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }
          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === "number") {
            let currentSource = mapping.source;
            while (originalMappings.length <= currentSource) {
              originalMappings.push(null);
            }
            if (originalMappings[currentSource] === null) {
              originalMappings[currentSource] = [];
            }
            originalMappings[currentSource].push(mapping);
          }
        }
      }
      sortGenerated(generatedMappings, subarrayStart);
      this.__generatedMappings = generatedMappings;
      for (var i = 0; i < originalMappings.length; i++) {
        if (originalMappings[i] != null) {
          quickSort$3(originalMappings[i], util$1.compareByOriginalPositionsNoSource);
        }
      }
      this.__originalMappings = [].concat(...originalMappings);
    };
    BasicSourceMapConsumer$1.prototype._findMapping = function SourceMapConsumer_findMapping2(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
      if (aNeedle[aLineName] <= 0) {
        throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
      }
      return binarySearch$1.search(aNeedle, aMappings, aComparator, aBias);
    };
    BasicSourceMapConsumer$1.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans2() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];
          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }
        mapping.lastGeneratedColumn = Infinity;
      }
    };
    BasicSourceMapConsumer$1.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor2(aArgs) {
      var needle = {
        generatedLine: util$1.getArg(aArgs, "line"),
        generatedColumn: util$1.getArg(aArgs, "column")
      };
      var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util$1.compareByGeneratedPositionsDeflated, util$1.getArg(aArgs, "bias", SourceMapConsumer$2.GREATEST_LOWER_BOUND));
      if (index >= 0) {
        var mapping = this._generatedMappings[index];
        if (mapping.generatedLine === needle.generatedLine) {
          var source = util$1.getArg(mapping, "source", null);
          if (source !== null) {
            source = this._sources.at(source);
            source = util$1.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
          }
          var name = util$1.getArg(mapping, "name", null);
          if (name !== null) {
            name = this._names.at(name);
          }
          return {
            source,
            line: util$1.getArg(mapping, "originalLine", null),
            column: util$1.getArg(mapping, "originalColumn", null),
            name
          };
        }
      }
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };
    BasicSourceMapConsumer$1.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources2() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
        return sc == null;
      });
    };
    BasicSourceMapConsumer$1.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor2(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }
      var index = this._findSourceIndex(aSource);
      if (index >= 0) {
        return this.sourcesContent[index];
      }
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util$1.relative(this.sourceRoot, relativeSource);
      }
      var url;
      if (this.sourceRoot != null && (url = util$1.urlParse(this.sourceRoot))) {
        var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
        if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
        }
        if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + relativeSource + '" is not in the SourceMap.');
      }
    };
    BasicSourceMapConsumer$1.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor2(aArgs) {
      var source = util$1.getArg(aArgs, "source");
      source = this._findSourceIndex(source);
      if (source < 0) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }
      var needle = {
        source,
        originalLine: util$1.getArg(aArgs, "line"),
        originalColumn: util$1.getArg(aArgs, "column")
      };
      var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util$1.compareByOriginalPositions, util$1.getArg(aArgs, "bias", SourceMapConsumer$2.GREATEST_LOWER_BOUND));
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (mapping.source === needle.source) {
          return {
            line: util$1.getArg(mapping, "generatedLine", null),
            column: util$1.getArg(mapping, "generatedColumn", null),
            lastColumn: util$1.getArg(mapping, "lastGeneratedColumn", null)
          };
        }
      }
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };
    BasicSourceMapConsumer_1$1 = BasicSourceMapConsumer$1;
    IndexedSourceMapConsumer$1.prototype = Object.create(SourceMapConsumer$2.prototype);
    IndexedSourceMapConsumer$1.prototype.constructor = SourceMapConsumer$2;
    IndexedSourceMapConsumer$1.prototype._version = 3;
    Object.defineProperty(IndexedSourceMapConsumer$1.prototype, "sources", {
      get: function() {
        var sources = [];
        for (var i = 0; i < this._sections.length; i++) {
          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
            sources.push(this._sections[i].consumer.sources[j]);
          }
        }
        return sources;
      }
    });
    IndexedSourceMapConsumer$1.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor2(aArgs) {
      var needle = {
        generatedLine: util$1.getArg(aArgs, "line"),
        generatedColumn: util$1.getArg(aArgs, "column")
      };
      var sectionIndex = binarySearch$1.search(needle, this._sections, function(needle2, section2) {
        var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }
        return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
      });
      var section = this._sections[sectionIndex];
      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }
      return section.consumer.originalPositionFor({
        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        bias: aArgs.bias
      });
    };
    IndexedSourceMapConsumer$1.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources2() {
      return this._sections.every(function(s) {
        return s.consumer.hasContentsOfAllSources();
      });
    };
    IndexedSourceMapConsumer$1.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor2(aSource, nullOnMissing) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };
    IndexedSourceMapConsumer$1.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor2(aArgs) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        if (section.consumer._findSourceIndex(util$1.getArg(aArgs, "source")) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
          };
          return ret;
        }
      }
      return {
        line: null,
        column: null
      };
    };
    IndexedSourceMapConsumer$1.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings2(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[j];
          var source = section.consumer._sources.at(mapping.source);
          source = util$1.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
          this._sources.add(source);
          source = this._sources.indexOf(source);
          var name = null;
          if (mapping.name) {
            name = section.consumer._names.at(mapping.name);
            this._names.add(name);
            name = this._names.indexOf(name);
          }
          var adjustedMapping = {
            source,
            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name
          };
          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === "number") {
            this.__originalMappings.push(adjustedMapping);
          }
        }
      }
      quickSort$3(this.__generatedMappings, util$1.compareByGeneratedPositionsDeflated);
      quickSort$3(this.__originalMappings, util$1.compareByOriginalPositions);
    };
    IndexedSourceMapConsumer_1$1 = IndexedSourceMapConsumer$1;
    sourceMapConsumer$1 = {
      SourceMapConsumer: SourceMapConsumer_1$1,
      BasicSourceMapConsumer: BasicSourceMapConsumer_1$1,
      IndexedSourceMapConsumer: IndexedSourceMapConsumer_1$1
    };
    SourceMapGenerator$4 = sourceMapGenerator$1.SourceMapGenerator;
    REGEX_NEWLINE$1 = /(\r?\n)/;
    NEWLINE_CODE$1 = 10;
    isSourceNode$1 = "$$$isSourceNode$$$";
    SourceNode$2.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap2(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      var node2 = new SourceNode$2();
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE$1);
      var remainingLinesIndex = 0;
      var shiftNextLine = function() {
        var lineContents = getNextLine();
        var newLine = getNextLine() || "";
        return lineContents + newLine;
        function getNextLine() {
          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
        }
      };
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;
      var lastMapping = null;
      aSourceMapConsumer.eachMapping(function(mapping) {
        if (lastMapping !== null) {
          if (lastGeneratedLine < mapping.generatedLine) {
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
          } else {
            var nextLine = remainingLines[remainingLinesIndex] || "";
            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            lastMapping = mapping;
            return;
          }
        }
        while (lastGeneratedLine < mapping.generatedLine) {
          node2.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[remainingLinesIndex] || "";
          node2.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      if (remainingLinesIndex < remainingLines.length) {
        if (lastMapping) {
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        node2.add(remainingLines.splice(remainingLinesIndex).join(""));
      }
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util$1.join(aRelativePath, sourceFile);
          }
          node2.setSourceContent(sourceFile, content);
        }
      });
      return node2;
      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === void 0) {
          node2.add(code);
        } else {
          var source = aRelativePath ? util$1.join(aRelativePath, mapping.source) : mapping.source;
          node2.add(new SourceNode$2(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
        }
      }
    };
    SourceNode$2.prototype.add = function SourceNode_add2(aChunk) {
      if (Array.isArray(aChunk)) {
        aChunk.forEach(function(chunk) {
          this.add(chunk);
        }, this);
      } else if (aChunk[isSourceNode$1] || typeof aChunk === "string") {
        if (aChunk) {
          this.children.push(aChunk);
        }
      } else {
        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
      }
      return this;
    };
    SourceNode$2.prototype.prepend = function SourceNode_prepend2(aChunk) {
      if (Array.isArray(aChunk)) {
        for (var i = aChunk.length - 1; i >= 0; i--) {
          this.prepend(aChunk[i]);
        }
      } else if (aChunk[isSourceNode$1] || typeof aChunk === "string") {
        this.children.unshift(aChunk);
      } else {
        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
      }
      return this;
    };
    SourceNode$2.prototype.walk = function SourceNode_walk2(aFn) {
      var chunk;
      for (var i = 0, len = this.children.length; i < len; i++) {
        chunk = this.children[i];
        if (chunk[isSourceNode$1]) {
          chunk.walk(aFn);
        } else {
          if (chunk !== "") {
            aFn(chunk, {
              source: this.source,
              line: this.line,
              column: this.column,
              name: this.name
            });
          }
        }
      }
    };
    SourceNode$2.prototype.join = function SourceNode_join2(aSep) {
      var newChildren;
      var i;
      var len = this.children.length;
      if (len > 0) {
        newChildren = [];
        for (i = 0; i < len - 1; i++) {
          newChildren.push(this.children[i]);
          newChildren.push(aSep);
        }
        newChildren.push(this.children[i]);
        this.children = newChildren;
      }
      return this;
    };
    SourceNode$2.prototype.replaceRight = function SourceNode_replaceRight2(aPattern, aReplacement) {
      var lastChild = this.children[this.children.length - 1];
      if (lastChild[isSourceNode$1]) {
        lastChild.replaceRight(aPattern, aReplacement);
      } else if (typeof lastChild === "string") {
        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
      } else {
        this.children.push("".replace(aPattern, aReplacement));
      }
      return this;
    };
    SourceNode$2.prototype.setSourceContent = function SourceNode_setSourceContent2(aSourceFile, aSourceContent) {
      this.sourceContents[util$1.toSetString(aSourceFile)] = aSourceContent;
    };
    SourceNode$2.prototype.walkSourceContents = function SourceNode_walkSourceContents2(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode$1]) {
          this.children[i].walkSourceContents(aFn);
        }
      }
      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util$1.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };
    SourceNode$2.prototype.toString = function SourceNode_toString2() {
      var str = "";
      this.walk(function(chunk) {
        str += chunk;
      });
      return str;
    };
    SourceNode$2.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap2(aArgs) {
      var generated = {
        code: "",
        line: 1,
        column: 0
      };
      var map2 = new SourceMapGenerator$4(aArgs);
      var sourceMappingActive = false;
      var lastOriginalSource = null;
      var lastOriginalLine = null;
      var lastOriginalColumn = null;
      var lastOriginalName = null;
      this.walk(function(chunk, original) {
        generated.code += chunk;
        if (original.source !== null && original.line !== null && original.column !== null) {
          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
            map2.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
          lastOriginalSource = original.source;
          lastOriginalLine = original.line;
          lastOriginalColumn = original.column;
          lastOriginalName = original.name;
          sourceMappingActive = true;
        } else if (sourceMappingActive) {
          map2.addMapping({
            generated: {
              line: generated.line,
              column: generated.column
            }
          });
          lastOriginalSource = null;
          sourceMappingActive = false;
        }
        for (var idx = 0, length2 = chunk.length; idx < length2; idx++) {
          if (chunk.charCodeAt(idx) === NEWLINE_CODE$1) {
            generated.line++;
            generated.column = 0;
            if (idx + 1 === length2) {
              lastOriginalSource = null;
              sourceMappingActive = false;
            } else if (sourceMappingActive) {
              map2.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
          } else {
            generated.column++;
          }
        }
      });
      this.walkSourceContents(function(sourceFile, sourceContent) {
        map2.setSourceContent(sourceFile, sourceContent);
      });
      return { code: generated.code, map: map2 };
    };
    SourceNode_1$1 = SourceNode$2;
    sourceNode$1 = {
      SourceNode: SourceNode_1$1
    };
    SourceMapGenerator$5 = sourceMapGenerator$1.SourceMapGenerator;
    SourceMapConsumer$3 = sourceMapConsumer$1.SourceMapConsumer;
    SourceNode$3 = sourceNode$1.SourceNode;
    sourceMap$1 = {
      SourceMapGenerator: SourceMapGenerator$5,
      SourceMapConsumer: SourceMapConsumer$3,
      SourceNode: SourceNode$3
    };
    urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
    customAlphabet = (alphabet, size) => {
      return () => {
        let id2 = "";
        let i = size;
        while (i--) {
          id2 += alphabet[Math.random() * alphabet.length | 0];
        }
        return id2;
      };
    };
    nanoid = (size = 21) => {
      let id2 = "";
      let i = size;
      while (i--) {
        id2 += urlAlphabet[Math.random() * 64 | 0];
      }
      return id2;
    };
    nonSecure = { nanoid, customAlphabet };
    ({ SourceMapConsumer: SourceMapConsumer$4, SourceMapGenerator: SourceMapGenerator$6 } = sourceMap$1);
    ({ existsSync, readFileSync } = _fs);
    ({ dirname: dirname$1, join: join$1 } = _path);
    PreviousMap = class {
      constructor(css, opts) {
        if (opts.map === false)
          return;
        this.loadAnnotation(css);
        this.inline = this.startWith(this.annotation, "data:");
        let prev = opts.map ? opts.map.prev : void 0;
        let text = this.loadMap(opts.from, prev);
        if (!this.mapFile && opts.from) {
          this.mapFile = opts.from;
        }
        if (this.mapFile)
          this.root = dirname$1(this.mapFile);
        if (text)
          this.text = text;
      }
      consumer() {
        if (!this.consumerCache) {
          this.consumerCache = new SourceMapConsumer$4(this.text);
        }
        return this.consumerCache;
      }
      withContent() {
        return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);
      }
      startWith(string2, start) {
        if (!string2)
          return false;
        return string2.substr(0, start.length) === start;
      }
      getAnnotationURL(sourceMapString) {
        return sourceMapString.replace(/^\/\*\s*# sourceMappingURL=/, "").trim();
      }
      loadAnnotation(css) {
        let comments = css.match(/\/\*\s*# sourceMappingURL=/gm);
        if (!comments)
          return;
        let start = css.lastIndexOf(comments.pop());
        let end = css.indexOf("*/", start);
        if (start > -1 && end > -1) {
          this.annotation = this.getAnnotationURL(css.substring(start, end));
        }
      }
      decodeInline(text) {
        let baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
        let baseUri = /^data:application\/json;base64,/;
        let charsetUri = /^data:application\/json;charset=utf-?8,/;
        let uri = /^data:application\/json,/;
        if (charsetUri.test(text) || uri.test(text)) {
          return decodeURIComponent(text.substr(RegExp.lastMatch.length));
        }
        if (baseCharsetUri.test(text) || baseUri.test(text)) {
          return fromBase64(text.substr(RegExp.lastMatch.length));
        }
        let encoding = text.match(/data:application\/json;([^,]+),/)[1];
        throw new Error("Unsupported source map encoding " + encoding);
      }
      loadFile(path3) {
        this.root = dirname$1(path3);
        if (existsSync(path3)) {
          this.mapFile = path3;
          return readFileSync(path3, "utf-8").toString().trim();
        }
      }
      loadMap(file, prev) {
        if (prev === false)
          return false;
        if (prev) {
          if (typeof prev === "string") {
            return prev;
          } else if (typeof prev === "function") {
            let prevPath = prev(file);
            if (prevPath) {
              let map2 = this.loadFile(prevPath);
              if (!map2) {
                throw new Error("Unable to load previous source map: " + prevPath.toString());
              }
              return map2;
            }
          } else if (prev instanceof SourceMapConsumer$4) {
            return SourceMapGenerator$6.fromSourceMap(prev).toString();
          } else if (prev instanceof SourceMapGenerator$6) {
            return prev.toString();
          } else if (this.isMap(prev)) {
            return JSON.stringify(prev);
          } else {
            throw new Error("Unsupported previous source map format: " + prev.toString());
          }
        } else if (this.inline) {
          return this.decodeInline(this.annotation);
        } else if (this.annotation) {
          let map2 = this.annotation;
          if (file)
            map2 = join$1(dirname$1(file), map2);
          return this.loadFile(map2);
        }
      }
      isMap(map2) {
        if (typeof map2 !== "object")
          return false;
        return typeof map2.mappings === "string" || typeof map2._mappings === "string" || Array.isArray(map2.sections);
      }
    };
    previousMap = PreviousMap;
    PreviousMap.default = PreviousMap;
    require$$2 = /* @__PURE__ */ getAugmentedNamespace(_polyfillNode_url$1);
    ({ SourceMapConsumer: SourceMapConsumer$5, SourceMapGenerator: SourceMapGenerator$7 } = sourceMap$1);
    ({ fileURLToPath, pathToFileURL } = require$$2);
    ({ resolve: resolve$1, isAbsolute: isAbsolute$1 } = _path);
    ({ nanoid: nanoid$1 } = nonSecure);
    fromOffsetCache = Symbol("fromOffsetCache");
    sourceMapAvailable = Boolean(SourceMapConsumer$5 && SourceMapGenerator$7);
    pathAvailable = Boolean(resolve$1 && isAbsolute$1);
    Input$1 = class {
      constructor(css, opts = {}) {
        if (css === null || typeof css === "undefined" || typeof css === "object" && !css.toString) {
          throw new Error(`PostCSS received ${css} instead of CSS string`);
        }
        this.css = css.toString();
        if (this.css[0] === "\uFEFF" || this.css[0] === "\uFFFE") {
          this.hasBOM = true;
          this.css = this.css.slice(1);
        } else {
          this.hasBOM = false;
        }
        if (opts.from) {
          if (!pathAvailable || /^\w+:\/\//.test(opts.from) || isAbsolute$1(opts.from)) {
            this.file = opts.from;
          } else {
            this.file = resolve$1(opts.from);
          }
        }
        if (pathAvailable && sourceMapAvailable) {
          let map2 = new previousMap(this.css, opts);
          if (map2.text) {
            this.map = map2;
            let file = map2.consumer().file;
            if (!this.file && file)
              this.file = this.mapResolve(file);
          }
        }
        if (!this.file) {
          this.id = "<input css " + nanoid$1(6) + ">";
        }
        if (this.map)
          this.map.file = this.from;
      }
      fromOffset(offset) {
        let lastLine2, lineToIndex;
        if (!this[fromOffsetCache]) {
          let lines = this.css.split("\n");
          lineToIndex = new Array(lines.length);
          let prevIndex = 0;
          for (let i = 0, l = lines.length; i < l; i++) {
            lineToIndex[i] = prevIndex;
            prevIndex += lines[i].length + 1;
          }
          this[fromOffsetCache] = lineToIndex;
        } else {
          lineToIndex = this[fromOffsetCache];
        }
        lastLine2 = lineToIndex[lineToIndex.length - 1];
        let min = 0;
        if (offset >= lastLine2) {
          min = lineToIndex.length - 1;
        } else {
          let max = lineToIndex.length - 2;
          let mid;
          while (min < max) {
            mid = min + (max - min >> 1);
            if (offset < lineToIndex[mid]) {
              max = mid - 1;
            } else if (offset >= lineToIndex[mid + 1]) {
              min = mid + 1;
            } else {
              min = mid;
              break;
            }
          }
        }
        return {
          line: min + 1,
          col: offset - lineToIndex[min] + 1
        };
      }
      error(message, line, column, opts = {}) {
        let result2, endLine, endColumn;
        if (line && typeof line === "object") {
          let start = line;
          let end = column;
          if (typeof line.offset === "number") {
            let pos = this.fromOffset(start.offset);
            line = pos.line;
            column = pos.col;
          } else {
            line = start.line;
            column = start.column;
          }
          if (typeof end.offset === "number") {
            let pos = this.fromOffset(end.offset);
            endLine = pos.line;
            endColumn = pos.col;
          } else {
            endLine = end.line;
            endColumn = end.column;
          }
        } else if (!column) {
          let pos = this.fromOffset(line);
          line = pos.line;
          column = pos.col;
        }
        let origin = this.origin(line, column, endLine, endColumn);
        if (origin) {
          result2 = new cssSyntaxError(message, origin.endLine === void 0 ? origin.line : { line: origin.line, column: origin.column }, origin.endLine === void 0 ? origin.column : { line: origin.endLine, column: origin.endColumn }, origin.source, origin.file, opts.plugin);
        } else {
          result2 = new cssSyntaxError(message, endLine === void 0 ? line : { line, column }, endLine === void 0 ? column : { line: endLine, column: endColumn }, this.css, this.file, opts.plugin);
        }
        result2.input = { line, column, endLine, endColumn, source: this.css };
        if (this.file) {
          if (pathToFileURL) {
            result2.input.url = pathToFileURL(this.file).toString();
          }
          result2.input.file = this.file;
        }
        return result2;
      }
      origin(line, column, endLine, endColumn) {
        if (!this.map)
          return false;
        let consumer = this.map.consumer();
        let from2 = consumer.originalPositionFor({ line, column });
        if (!from2.source)
          return false;
        let to;
        if (typeof endLine === "number") {
          to = consumer.originalPositionFor({ line: endLine, column: endColumn });
        }
        let fromUrl;
        if (isAbsolute$1(from2.source)) {
          fromUrl = pathToFileURL(from2.source);
        } else {
          fromUrl = new URL(from2.source, this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile));
        }
        let result2 = {
          url: fromUrl.toString(),
          line: from2.line,
          column: from2.column,
          endLine: to && to.line,
          endColumn: to && to.column
        };
        if (fromUrl.protocol === "file:") {
          if (fileURLToPath) {
            result2.file = fileURLToPath(fromUrl);
          } else {
            throw new Error(`file: protocol is not available in this PostCSS build`);
          }
        }
        let source = consumer.sourceContentFor(from2.source);
        if (source)
          result2.source = source;
        return result2;
      }
      mapResolve(file) {
        if (/^\w+:\/\//.test(file)) {
          return file;
        }
        return resolve$1(this.map.consumer().sourceRoot || this.map.root || ".", file);
      }
      get from() {
        return this.file || this.id;
      }
      toJSON() {
        let json = {};
        for (let name of ["hasBOM", "css", "file", "id"]) {
          if (this[name] != null) {
            json[name] = this[name];
          }
        }
        if (this.map) {
          json.map = { ...this.map };
          if (json.map.consumerCache) {
            json.map.consumerCache = void 0;
          }
        }
        return json;
      }
    };
    input = Input$1;
    Input$1.default = Input$1;
    if (terminalHighlight_1 && terminalHighlight_1.registerInput) {
      terminalHighlight_1.registerInput(Input$1);
    }
    ({ SourceMapConsumer: SourceMapConsumer$6, SourceMapGenerator: SourceMapGenerator$8 } = sourceMap$1);
    ({ dirname: dirname$2, resolve: resolve$2, relative: relative$1, sep: sep$1 } = _path);
    ({ pathToFileURL: pathToFileURL$1 } = require$$2);
    sourceMapAvailable$1 = Boolean(SourceMapConsumer$6 && SourceMapGenerator$8);
    pathAvailable$1 = Boolean(dirname$2 && resolve$2 && relative$1 && sep$1);
    MapGenerator = class {
      constructor(stringify2, root2, opts, cssString) {
        this.stringify = stringify2;
        this.mapOpts = opts.map || {};
        this.root = root2;
        this.opts = opts;
        this.css = cssString;
      }
      isMap() {
        if (typeof this.opts.map !== "undefined") {
          return !!this.opts.map;
        }
        return this.previous().length > 0;
      }
      previous() {
        if (!this.previousMaps) {
          this.previousMaps = [];
          if (this.root) {
            this.root.walk((node2) => {
              if (node2.source && node2.source.input.map) {
                let map2 = node2.source.input.map;
                if (!this.previousMaps.includes(map2)) {
                  this.previousMaps.push(map2);
                }
              }
            });
          } else {
            let input$1 = new input(this.css, this.opts);
            if (input$1.map)
              this.previousMaps.push(input$1.map);
          }
        }
        return this.previousMaps;
      }
      isInline() {
        if (typeof this.mapOpts.inline !== "undefined") {
          return this.mapOpts.inline;
        }
        let annotation = this.mapOpts.annotation;
        if (typeof annotation !== "undefined" && annotation !== true) {
          return false;
        }
        if (this.previous().length) {
          return this.previous().some((i) => i.inline);
        }
        return true;
      }
      isSourcesContent() {
        if (typeof this.mapOpts.sourcesContent !== "undefined") {
          return this.mapOpts.sourcesContent;
        }
        if (this.previous().length) {
          return this.previous().some((i) => i.withContent());
        }
        return true;
      }
      clearAnnotation() {
        if (this.mapOpts.annotation === false)
          return;
        if (this.root) {
          let node2;
          for (let i = this.root.nodes.length - 1; i >= 0; i--) {
            node2 = this.root.nodes[i];
            if (node2.type !== "comment")
              continue;
            if (node2.text.indexOf("# sourceMappingURL=") === 0) {
              this.root.removeChild(i);
            }
          }
        } else if (this.css) {
          this.css = this.css.replace(/(\n)?\/\*#[\S\s]*?\*\/$/gm, "");
        }
      }
      setSourcesContent() {
        let already = {};
        if (this.root) {
          this.root.walk((node2) => {
            if (node2.source) {
              let from2 = node2.source.input.from;
              if (from2 && !already[from2]) {
                already[from2] = true;
                this.map.setSourceContent(this.toUrl(this.path(from2)), node2.source.input.css);
              }
            }
          });
        } else if (this.css) {
          let from2 = this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>";
          this.map.setSourceContent(from2, this.css);
        }
      }
      applyPrevMaps() {
        for (let prev of this.previous()) {
          let from2 = this.toUrl(this.path(prev.file));
          let root2 = prev.root || dirname$2(prev.file);
          let map2;
          if (this.mapOpts.sourcesContent === false) {
            map2 = new SourceMapConsumer$6(prev.text);
            if (map2.sourcesContent) {
              map2.sourcesContent = map2.sourcesContent.map(() => null);
            }
          } else {
            map2 = prev.consumer();
          }
          this.map.applySourceMap(map2, from2, this.toUrl(this.path(root2)));
        }
      }
      isAnnotation() {
        if (this.isInline()) {
          return true;
        }
        if (typeof this.mapOpts.annotation !== "undefined") {
          return this.mapOpts.annotation;
        }
        if (this.previous().length) {
          return this.previous().some((i) => i.annotation);
        }
        return true;
      }
      toBase64(str) {
        if (Buffer2) {
          return Buffer2.from(str).toString("base64");
        } else {
          return window.btoa(unescape(encodeURIComponent(str)));
        }
      }
      addAnnotation() {
        let content;
        if (this.isInline()) {
          content = "data:application/json;base64," + this.toBase64(this.map.toString());
        } else if (typeof this.mapOpts.annotation === "string") {
          content = this.mapOpts.annotation;
        } else if (typeof this.mapOpts.annotation === "function") {
          content = this.mapOpts.annotation(this.opts.to, this.root);
        } else {
          content = this.outputFile() + ".map";
        }
        let eol = "\n";
        if (this.css.includes("\r\n"))
          eol = "\r\n";
        this.css += eol + "/*# sourceMappingURL=" + content + " */";
      }
      outputFile() {
        if (this.opts.to) {
          return this.path(this.opts.to);
        } else if (this.opts.from) {
          return this.path(this.opts.from);
        } else {
          return "to.css";
        }
      }
      generateMap() {
        if (this.root) {
          this.generateString();
        } else if (this.previous().length === 1) {
          let prev = this.previous()[0].consumer();
          prev.file = this.outputFile();
          this.map = SourceMapGenerator$8.fromSourceMap(prev);
        } else {
          this.map = new SourceMapGenerator$8({ file: this.outputFile() });
          this.map.addMapping({
            source: this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>",
            generated: { line: 1, column: 0 },
            original: { line: 1, column: 0 }
          });
        }
        if (this.isSourcesContent())
          this.setSourcesContent();
        if (this.root && this.previous().length > 0)
          this.applyPrevMaps();
        if (this.isAnnotation())
          this.addAnnotation();
        if (this.isInline()) {
          return [this.css];
        } else {
          return [this.css, this.map];
        }
      }
      path(file) {
        if (file.indexOf("<") === 0)
          return file;
        if (/^\w+:\/\//.test(file))
          return file;
        if (this.mapOpts.absolute)
          return file;
        let from2 = this.opts.to ? dirname$2(this.opts.to) : ".";
        if (typeof this.mapOpts.annotation === "string") {
          from2 = dirname$2(resolve$2(from2, this.mapOpts.annotation));
        }
        file = relative$1(from2, file);
        return file;
      }
      toUrl(path3) {
        if (sep$1 === "\\") {
          path3 = path3.replace(/\\/g, "/");
        }
        return encodeURI(path3).replace(/[#?]/g, encodeURIComponent);
      }
      sourcePath(node2) {
        if (this.mapOpts.from) {
          return this.toUrl(this.mapOpts.from);
        } else if (this.mapOpts.absolute) {
          if (pathToFileURL$1) {
            return pathToFileURL$1(node2.source.input.from).toString();
          } else {
            throw new Error("`map.absolute` option is not available in this PostCSS build");
          }
        } else {
          return this.toUrl(this.path(node2.source.input.from));
        }
      }
      generateString() {
        this.css = "";
        this.map = new SourceMapGenerator$8({ file: this.outputFile() });
        let line = 1;
        let column = 1;
        let noSource = "<no source>";
        let mapping = {
          source: "",
          generated: { line: 0, column: 0 },
          original: { line: 0, column: 0 }
        };
        let lines, last2;
        this.stringify(this.root, (str, node2, type) => {
          this.css += str;
          if (node2 && type !== "end") {
            mapping.generated.line = line;
            mapping.generated.column = column - 1;
            if (node2.source && node2.source.start) {
              mapping.source = this.sourcePath(node2);
              mapping.original.line = node2.source.start.line;
              mapping.original.column = node2.source.start.column - 1;
              this.map.addMapping(mapping);
            } else {
              mapping.source = noSource;
              mapping.original.line = 1;
              mapping.original.column = 0;
              this.map.addMapping(mapping);
            }
          }
          lines = str.match(/\n/g);
          if (lines) {
            line += lines.length;
            last2 = str.lastIndexOf("\n");
            column = str.length - last2;
          } else {
            column += str.length;
          }
          if (node2 && type !== "start") {
            let p = node2.parent || { raws: {} };
            if (node2.type !== "decl" || node2 !== p.last || p.raws.semicolon) {
              if (node2.source && node2.source.end) {
                mapping.source = this.sourcePath(node2);
                mapping.original.line = node2.source.end.line;
                mapping.original.column = node2.source.end.column - 1;
                mapping.generated.line = line;
                mapping.generated.column = column - 2;
                this.map.addMapping(mapping);
              } else {
                mapping.source = noSource;
                mapping.original.line = 1;
                mapping.original.column = 0;
                mapping.generated.line = line;
                mapping.generated.column = column - 1;
                this.map.addMapping(mapping);
              }
            }
          }
        });
      }
      generate() {
        this.clearAnnotation();
        if (pathAvailable$1 && sourceMapAvailable$1 && this.isMap()) {
          return this.generateMap();
        } else {
          let result2 = "";
          this.stringify(this.root, (i) => {
            result2 += i;
          });
          return [result2];
        }
      }
    };
    mapGenerator = MapGenerator;
    Comment = class extends node_1 {
      constructor(defaults) {
        super(defaults);
        this.type = "comment";
      }
    };
    comment = Comment;
    Comment.default = Comment;
    ({ isClean: isClean$2, my: my$2 } = symbols);
    Container = class extends node_1 {
      push(child) {
        child.parent = this;
        this.proxyOf.nodes.push(child);
        return this;
      }
      each(callback) {
        if (!this.proxyOf.nodes)
          return void 0;
        let iterator = this.getIterator();
        let index, result2;
        while (this.indexes[iterator] < this.proxyOf.nodes.length) {
          index = this.indexes[iterator];
          result2 = callback(this.proxyOf.nodes[index], index);
          if (result2 === false)
            break;
          this.indexes[iterator] += 1;
        }
        delete this.indexes[iterator];
        return result2;
      }
      walk(callback) {
        return this.each((child, i) => {
          let result2;
          try {
            result2 = callback(child, i);
          } catch (e) {
            throw child.addToError(e);
          }
          if (result2 !== false && child.walk) {
            result2 = child.walk(callback);
          }
          return result2;
        });
      }
      walkDecls(prop, callback) {
        if (!callback) {
          callback = prop;
          return this.walk((child, i) => {
            if (child.type === "decl") {
              return callback(child, i);
            }
          });
        }
        if (prop instanceof RegExp) {
          return this.walk((child, i) => {
            if (child.type === "decl" && prop.test(child.prop)) {
              return callback(child, i);
            }
          });
        }
        return this.walk((child, i) => {
          if (child.type === "decl" && child.prop === prop) {
            return callback(child, i);
          }
        });
      }
      walkRules(selector2, callback) {
        if (!callback) {
          callback = selector2;
          return this.walk((child, i) => {
            if (child.type === "rule") {
              return callback(child, i);
            }
          });
        }
        if (selector2 instanceof RegExp) {
          return this.walk((child, i) => {
            if (child.type === "rule" && selector2.test(child.selector)) {
              return callback(child, i);
            }
          });
        }
        return this.walk((child, i) => {
          if (child.type === "rule" && child.selector === selector2) {
            return callback(child, i);
          }
        });
      }
      walkAtRules(name, callback) {
        if (!callback) {
          callback = name;
          return this.walk((child, i) => {
            if (child.type === "atrule") {
              return callback(child, i);
            }
          });
        }
        if (name instanceof RegExp) {
          return this.walk((child, i) => {
            if (child.type === "atrule" && name.test(child.name)) {
              return callback(child, i);
            }
          });
        }
        return this.walk((child, i) => {
          if (child.type === "atrule" && child.name === name) {
            return callback(child, i);
          }
        });
      }
      walkComments(callback) {
        return this.walk((child, i) => {
          if (child.type === "comment") {
            return callback(child, i);
          }
        });
      }
      append(...children) {
        for (let child of children) {
          let nodes = this.normalize(child, this.last);
          for (let node2 of nodes)
            this.proxyOf.nodes.push(node2);
        }
        this.markDirty();
        return this;
      }
      prepend(...children) {
        children = children.reverse();
        for (let child of children) {
          let nodes = this.normalize(child, this.first, "prepend").reverse();
          for (let node2 of nodes)
            this.proxyOf.nodes.unshift(node2);
          for (let id2 in this.indexes) {
            this.indexes[id2] = this.indexes[id2] + nodes.length;
          }
        }
        this.markDirty();
        return this;
      }
      cleanRaws(keepBetween) {
        super.cleanRaws(keepBetween);
        if (this.nodes) {
          for (let node2 of this.nodes)
            node2.cleanRaws(keepBetween);
        }
      }
      insertBefore(exist, add2) {
        exist = this.index(exist);
        let type = exist === 0 ? "prepend" : false;
        let nodes = this.normalize(add2, this.proxyOf.nodes[exist], type).reverse();
        for (let node2 of nodes)
          this.proxyOf.nodes.splice(exist, 0, node2);
        let index;
        for (let id2 in this.indexes) {
          index = this.indexes[id2];
          if (exist <= index) {
            this.indexes[id2] = index + nodes.length;
          }
        }
        this.markDirty();
        return this;
      }
      insertAfter(exist, add2) {
        exist = this.index(exist);
        let nodes = this.normalize(add2, this.proxyOf.nodes[exist]).reverse();
        for (let node2 of nodes)
          this.proxyOf.nodes.splice(exist + 1, 0, node2);
        let index;
        for (let id2 in this.indexes) {
          index = this.indexes[id2];
          if (exist < index) {
            this.indexes[id2] = index + nodes.length;
          }
        }
        this.markDirty();
        return this;
      }
      removeChild(child) {
        child = this.index(child);
        this.proxyOf.nodes[child].parent = void 0;
        this.proxyOf.nodes.splice(child, 1);
        let index;
        for (let id2 in this.indexes) {
          index = this.indexes[id2];
          if (index >= child) {
            this.indexes[id2] = index - 1;
          }
        }
        this.markDirty();
        return this;
      }
      removeAll() {
        for (let node2 of this.proxyOf.nodes)
          node2.parent = void 0;
        this.proxyOf.nodes = [];
        this.markDirty();
        return this;
      }
      replaceValues(pattern, opts, callback) {
        if (!callback) {
          callback = opts;
          opts = {};
        }
        this.walkDecls((decl) => {
          if (opts.props && !opts.props.includes(decl.prop))
            return;
          if (opts.fast && !decl.value.includes(opts.fast))
            return;
          decl.value = decl.value.replace(pattern, callback);
        });
        this.markDirty();
        return this;
      }
      every(condition) {
        return this.nodes.every(condition);
      }
      some(condition) {
        return this.nodes.some(condition);
      }
      index(child) {
        if (typeof child === "number")
          return child;
        if (child.proxyOf)
          child = child.proxyOf;
        return this.proxyOf.nodes.indexOf(child);
      }
      get first() {
        if (!this.proxyOf.nodes)
          return void 0;
        return this.proxyOf.nodes[0];
      }
      get last() {
        if (!this.proxyOf.nodes)
          return void 0;
        return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];
      }
      normalize(nodes, sample) {
        if (typeof nodes === "string") {
          nodes = cleanSource(parse$5(nodes).nodes);
        } else if (Array.isArray(nodes)) {
          nodes = nodes.slice(0);
          for (let i of nodes) {
            if (i.parent)
              i.parent.removeChild(i, "ignore");
          }
        } else if (nodes.type === "root" && this.type !== "document") {
          nodes = nodes.nodes.slice(0);
          for (let i of nodes) {
            if (i.parent)
              i.parent.removeChild(i, "ignore");
          }
        } else if (nodes.type) {
          nodes = [nodes];
        } else if (nodes.prop) {
          if (typeof nodes.value === "undefined") {
            throw new Error("Value field is missed in node creation");
          } else if (typeof nodes.value !== "string") {
            nodes.value = String(nodes.value);
          }
          nodes = [new declaration(nodes)];
        } else if (nodes.selector) {
          nodes = [new Rule(nodes)];
        } else if (nodes.name) {
          nodes = [new AtRule(nodes)];
        } else if (nodes.text) {
          nodes = [new comment(nodes)];
        } else {
          throw new Error("Unknown node type in node creation");
        }
        let processed = nodes.map((i) => {
          if (!i[my$2])
            Container.rebuild(i);
          i = i.proxyOf;
          if (i.parent)
            i.parent.removeChild(i);
          if (i[isClean$2])
            markDirtyUp(i);
          if (typeof i.raws.before === "undefined") {
            if (sample && typeof sample.raws.before !== "undefined") {
              i.raws.before = sample.raws.before.replace(/\S/g, "");
            }
          }
          i.parent = this;
          return i;
        });
        return processed;
      }
      getProxyProcessor() {
        return {
          set(node2, prop, value) {
            if (node2[prop] === value)
              return true;
            node2[prop] = value;
            if (prop === "name" || prop === "params" || prop === "selector") {
              node2.markDirty();
            }
            return true;
          },
          get(node2, prop) {
            if (prop === "proxyOf") {
              return node2;
            } else if (!node2[prop]) {
              return node2[prop];
            } else if (prop === "each" || typeof prop === "string" && prop.startsWith("walk")) {
              return (...args) => {
                return node2[prop](...args.map((i) => {
                  if (typeof i === "function") {
                    return (child, index) => i(child.toProxy(), index);
                  } else {
                    return i;
                  }
                }));
              };
            } else if (prop === "every" || prop === "some") {
              return (cb) => {
                return node2[prop]((child, ...other) => cb(child.toProxy(), ...other));
              };
            } else if (prop === "root") {
              return () => node2.root().toProxy();
            } else if (prop === "nodes") {
              return node2.nodes.map((i) => i.toProxy());
            } else if (prop === "first" || prop === "last") {
              return node2[prop].toProxy();
            } else {
              return node2[prop];
            }
          }
        };
      }
      getIterator() {
        if (!this.lastEach)
          this.lastEach = 0;
        if (!this.indexes)
          this.indexes = {};
        this.lastEach += 1;
        let iterator = this.lastEach;
        this.indexes[iterator] = 0;
        return iterator;
      }
    };
    Container.registerParse = (dependant) => {
      parse$5 = dependant;
    };
    Container.registerRule = (dependant) => {
      Rule = dependant;
    };
    Container.registerAtRule = (dependant) => {
      AtRule = dependant;
    };
    container = Container;
    Container.default = Container;
    Container.rebuild = (node2) => {
      if (node2.type === "atrule") {
        Object.setPrototypeOf(node2, AtRule.prototype);
      } else if (node2.type === "rule") {
        Object.setPrototypeOf(node2, Rule.prototype);
      } else if (node2.type === "decl") {
        Object.setPrototypeOf(node2, declaration.prototype);
      } else if (node2.type === "comment") {
        Object.setPrototypeOf(node2, comment.prototype);
      }
      node2[my$2] = true;
      if (node2.nodes) {
        node2.nodes.forEach((child) => {
          Container.rebuild(child);
        });
      }
    };
    Document = class extends container {
      constructor(defaults) {
        super({ type: "document", ...defaults });
        if (!this.nodes) {
          this.nodes = [];
        }
      }
      toResult(opts = {}) {
        let lazy = new LazyResult(new Processor(), this, opts);
        return lazy.stringify();
      }
    };
    Document.registerLazyResult = (dependant) => {
      LazyResult = dependant;
    };
    Document.registerProcessor = (dependant) => {
      Processor = dependant;
    };
    document = Document;
    Document.default = Document;
    printed = {};
    warnOnce$2 = function warnOnce2(message) {
      if (printed[message])
        return;
      printed[message] = true;
      if (typeof console !== "undefined" && console.warn) {
        console.warn(message);
      }
    };
    Warning = class {
      constructor(text, opts = {}) {
        this.type = "warning";
        this.text = text;
        if (opts.node && opts.node.source) {
          let range2 = opts.node.rangeBy(opts);
          this.line = range2.start.line;
          this.column = range2.start.column;
          this.endLine = range2.end.line;
          this.endColumn = range2.end.column;
        }
        for (let opt in opts)
          this[opt] = opts[opt];
      }
      toString() {
        if (this.node) {
          return this.node.error(this.text, {
            plugin: this.plugin,
            index: this.index,
            word: this.word
          }).message;
        }
        if (this.plugin) {
          return this.plugin + ": " + this.text;
        }
        return this.text;
      }
    };
    warning = Warning;
    Warning.default = Warning;
    Result = class {
      constructor(processor2, root2, opts) {
        this.processor = processor2;
        this.messages = [];
        this.root = root2;
        this.opts = opts;
        this.css = void 0;
        this.map = void 0;
      }
      toString() {
        return this.css;
      }
      warn(text, opts = {}) {
        if (!opts.plugin) {
          if (this.lastPlugin && this.lastPlugin.postcssPlugin) {
            opts.plugin = this.lastPlugin.postcssPlugin;
          }
        }
        let warning$1 = new warning(text, opts);
        this.messages.push(warning$1);
        return warning$1;
      }
      warnings() {
        return this.messages.filter((i) => i.type === "warning");
      }
      get content() {
        return this.css;
      }
    };
    result = Result;
    Result.default = Result;
    AtRule$1 = class extends container {
      constructor(defaults) {
        super(defaults);
        this.type = "atrule";
      }
      append(...children) {
        if (!this.proxyOf.nodes)
          this.nodes = [];
        return super.append(...children);
      }
      prepend(...children) {
        if (!this.proxyOf.nodes)
          this.nodes = [];
        return super.prepend(...children);
      }
    };
    atRule = AtRule$1;
    AtRule$1.default = AtRule$1;
    container.registerAtRule(AtRule$1);
    Root = class extends container {
      constructor(defaults) {
        super(defaults);
        this.type = "root";
        if (!this.nodes)
          this.nodes = [];
      }
      removeChild(child, ignore) {
        let index = this.index(child);
        if (!ignore && index === 0 && this.nodes.length > 1) {
          this.nodes[1].raws.before = this.nodes[index].raws.before;
        }
        return super.removeChild(child);
      }
      normalize(child, sample, type) {
        let nodes = super.normalize(child);
        if (sample) {
          if (type === "prepend") {
            if (this.nodes.length > 1) {
              sample.raws.before = this.nodes[1].raws.before;
            } else {
              delete sample.raws.before;
            }
          } else if (this.first !== sample) {
            for (let node2 of nodes) {
              node2.raws.before = sample.raws.before;
            }
          }
        }
        return nodes;
      }
      toResult(opts = {}) {
        let lazy = new LazyResult$1(new Processor$1(), this, opts);
        return lazy.stringify();
      }
    };
    Root.registerLazyResult = (dependant) => {
      LazyResult$1 = dependant;
    };
    Root.registerProcessor = (dependant) => {
      Processor$1 = dependant;
    };
    root = Root;
    Root.default = Root;
    list = {
      split(string2, separators, last2) {
        let array = [];
        let current = "";
        let split2 = false;
        let func = 0;
        let quote = false;
        let escape2 = false;
        for (let letter of string2) {
          if (escape2) {
            escape2 = false;
          } else if (letter === "\\") {
            escape2 = true;
          } else if (quote) {
            if (letter === quote) {
              quote = false;
            }
          } else if (letter === '"' || letter === "'") {
            quote = letter;
          } else if (letter === "(") {
            func += 1;
          } else if (letter === ")") {
            if (func > 0)
              func -= 1;
          } else if (func === 0) {
            if (separators.includes(letter))
              split2 = true;
          }
          if (split2) {
            if (current !== "")
              array.push(current.trim());
            current = "";
            split2 = false;
          } else {
            current += letter;
          }
        }
        if (last2 || current !== "")
          array.push(current.trim());
        return array;
      },
      space(string2) {
        let spaces = [" ", "\n", "	"];
        return list.split(string2, spaces);
      },
      comma(string2) {
        return list.split(string2, [","], true);
      }
    };
    list_1 = list;
    list.default = list;
    Rule$1 = class extends container {
      constructor(defaults) {
        super(defaults);
        this.type = "rule";
        if (!this.nodes)
          this.nodes = [];
      }
      get selectors() {
        return list_1.comma(this.selector);
      }
      set selectors(values) {
        let match = this.selector ? this.selector.match(/,\s*/) : null;
        let sep2 = match ? match[0] : "," + this.raw("between", "beforeOpen");
        this.selector = values.join(sep2);
      }
    };
    rule = Rule$1;
    Rule$1.default = Rule$1;
    container.registerRule(Rule$1);
    Parser$1 = class {
      constructor(input2) {
        this.input = input2;
        this.root = new root();
        this.current = this.root;
        this.spaces = "";
        this.semicolon = false;
        this.customProperty = false;
        this.createTokenizer();
        this.root.source = { input: input2, start: { offset: 0, line: 1, column: 1 } };
      }
      createTokenizer() {
        this.tokenizer = tokenize(this.input);
      }
      parse() {
        let token;
        while (!this.tokenizer.endOfFile()) {
          token = this.tokenizer.nextToken();
          switch (token[0]) {
            case "space":
              this.spaces += token[1];
              break;
            case ";":
              this.freeSemicolon(token);
              break;
            case "}":
              this.end(token);
              break;
            case "comment":
              this.comment(token);
              break;
            case "at-word":
              this.atrule(token);
              break;
            case "{":
              this.emptyRule(token);
              break;
            default:
              this.other(token);
              break;
          }
        }
        this.endFile();
      }
      comment(token) {
        let node2 = new comment();
        this.init(node2, token[2]);
        node2.source.end = this.getPosition(token[3] || token[2]);
        let text = token[1].slice(2, -2);
        if (/^\s*$/.test(text)) {
          node2.text = "";
          node2.raws.left = text;
          node2.raws.right = "";
        } else {
          let match = text.match(/^(\s*)([^]*\S)(\s*)$/);
          node2.text = match[2];
          node2.raws.left = match[1];
          node2.raws.right = match[3];
        }
      }
      emptyRule(token) {
        let node2 = new rule();
        this.init(node2, token[2]);
        node2.selector = "";
        node2.raws.between = "";
        this.current = node2;
      }
      other(start) {
        let end = false;
        let type = null;
        let colon = false;
        let bracket = null;
        let brackets = [];
        let customProperty = start[1].startsWith("--");
        let tokens = [];
        let token = start;
        while (token) {
          type = token[0];
          tokens.push(token);
          if (type === "(" || type === "[") {
            if (!bracket)
              bracket = token;
            brackets.push(type === "(" ? ")" : "]");
          } else if (customProperty && colon && type === "{") {
            if (!bracket)
              bracket = token;
            brackets.push("}");
          } else if (brackets.length === 0) {
            if (type === ";") {
              if (colon) {
                this.decl(tokens, customProperty);
                return;
              } else {
                break;
              }
            } else if (type === "{") {
              this.rule(tokens);
              return;
            } else if (type === "}") {
              this.tokenizer.back(tokens.pop());
              end = true;
              break;
            } else if (type === ":") {
              colon = true;
            }
          } else if (type === brackets[brackets.length - 1]) {
            brackets.pop();
            if (brackets.length === 0)
              bracket = null;
          }
          token = this.tokenizer.nextToken();
        }
        if (this.tokenizer.endOfFile())
          end = true;
        if (brackets.length > 0)
          this.unclosedBracket(bracket);
        if (end && colon) {
          while (tokens.length) {
            token = tokens[tokens.length - 1][0];
            if (token !== "space" && token !== "comment")
              break;
            this.tokenizer.back(tokens.pop());
          }
          this.decl(tokens, customProperty);
        } else {
          this.unknownWord(tokens);
        }
      }
      rule(tokens) {
        tokens.pop();
        let node2 = new rule();
        this.init(node2, tokens[0][2]);
        node2.raws.between = this.spacesAndCommentsFromEnd(tokens);
        this.raw(node2, "selector", tokens);
        this.current = node2;
      }
      decl(tokens, customProperty) {
        let node2 = new declaration();
        this.init(node2, tokens[0][2]);
        let last2 = tokens[tokens.length - 1];
        if (last2[0] === ";") {
          this.semicolon = true;
          tokens.pop();
        }
        node2.source.end = this.getPosition(last2[3] || last2[2]);
        while (tokens[0][0] !== "word") {
          if (tokens.length === 1)
            this.unknownWord(tokens);
          node2.raws.before += tokens.shift()[1];
        }
        node2.source.start = this.getPosition(tokens[0][2]);
        node2.prop = "";
        while (tokens.length) {
          let type = tokens[0][0];
          if (type === ":" || type === "space" || type === "comment") {
            break;
          }
          node2.prop += tokens.shift()[1];
        }
        node2.raws.between = "";
        let token;
        while (tokens.length) {
          token = tokens.shift();
          if (token[0] === ":") {
            node2.raws.between += token[1];
            break;
          } else {
            if (token[0] === "word" && /\w/.test(token[1])) {
              this.unknownWord([token]);
            }
            node2.raws.between += token[1];
          }
        }
        if (node2.prop[0] === "_" || node2.prop[0] === "*") {
          node2.raws.before += node2.prop[0];
          node2.prop = node2.prop.slice(1);
        }
        let firstSpaces = this.spacesAndCommentsFromStart(tokens);
        this.precheckMissedSemicolon(tokens);
        for (let i = tokens.length - 1; i >= 0; i--) {
          token = tokens[i];
          if (token[1].toLowerCase() === "!important") {
            node2.important = true;
            let string2 = this.stringFrom(tokens, i);
            string2 = this.spacesFromEnd(tokens) + string2;
            if (string2 !== " !important")
              node2.raws.important = string2;
            break;
          } else if (token[1].toLowerCase() === "important") {
            let cache = tokens.slice(0);
            let str = "";
            for (let j = i; j > 0; j--) {
              let type = cache[j][0];
              if (str.trim().indexOf("!") === 0 && type !== "space") {
                break;
              }
              str = cache.pop()[1] + str;
            }
            if (str.trim().indexOf("!") === 0) {
              node2.important = true;
              node2.raws.important = str;
              tokens = cache;
            }
          }
          if (token[0] !== "space" && token[0] !== "comment") {
            break;
          }
        }
        let hasWord = tokens.some((i) => i[0] !== "space" && i[0] !== "comment");
        this.raw(node2, "value", tokens);
        if (hasWord) {
          node2.raws.between += firstSpaces;
        } else {
          node2.value = firstSpaces + node2.value;
        }
        if (node2.value.includes(":") && !customProperty) {
          this.checkMissedSemicolon(tokens);
        }
      }
      atrule(token) {
        let node2 = new atRule();
        node2.name = token[1].slice(1);
        if (node2.name === "") {
          this.unnamedAtrule(node2, token);
        }
        this.init(node2, token[2]);
        let type;
        let prev;
        let shift;
        let last2 = false;
        let open = false;
        let params = [];
        let brackets = [];
        while (!this.tokenizer.endOfFile()) {
          token = this.tokenizer.nextToken();
          type = token[0];
          if (type === "(" || type === "[") {
            brackets.push(type === "(" ? ")" : "]");
          } else if (type === "{" && brackets.length > 0) {
            brackets.push("}");
          } else if (type === brackets[brackets.length - 1]) {
            brackets.pop();
          }
          if (brackets.length === 0) {
            if (type === ";") {
              node2.source.end = this.getPosition(token[2]);
              this.semicolon = true;
              break;
            } else if (type === "{") {
              open = true;
              break;
            } else if (type === "}") {
              if (params.length > 0) {
                shift = params.length - 1;
                prev = params[shift];
                while (prev && prev[0] === "space") {
                  prev = params[--shift];
                }
                if (prev) {
                  node2.source.end = this.getPosition(prev[3] || prev[2]);
                }
              }
              this.end(token);
              break;
            } else {
              params.push(token);
            }
          } else {
            params.push(token);
          }
          if (this.tokenizer.endOfFile()) {
            last2 = true;
            break;
          }
        }
        node2.raws.between = this.spacesAndCommentsFromEnd(params);
        if (params.length) {
          node2.raws.afterName = this.spacesAndCommentsFromStart(params);
          this.raw(node2, "params", params);
          if (last2) {
            token = params[params.length - 1];
            node2.source.end = this.getPosition(token[3] || token[2]);
            this.spaces = node2.raws.between;
            node2.raws.between = "";
          }
        } else {
          node2.raws.afterName = "";
          node2.params = "";
        }
        if (open) {
          node2.nodes = [];
          this.current = node2;
        }
      }
      end(token) {
        if (this.current.nodes && this.current.nodes.length) {
          this.current.raws.semicolon = this.semicolon;
        }
        this.semicolon = false;
        this.current.raws.after = (this.current.raws.after || "") + this.spaces;
        this.spaces = "";
        if (this.current.parent) {
          this.current.source.end = this.getPosition(token[2]);
          this.current = this.current.parent;
        } else {
          this.unexpectedClose(token);
        }
      }
      endFile() {
        if (this.current.parent)
          this.unclosedBlock();
        if (this.current.nodes && this.current.nodes.length) {
          this.current.raws.semicolon = this.semicolon;
        }
        this.current.raws.after = (this.current.raws.after || "") + this.spaces;
      }
      freeSemicolon(token) {
        this.spaces += token[1];
        if (this.current.nodes) {
          let prev = this.current.nodes[this.current.nodes.length - 1];
          if (prev && prev.type === "rule" && !prev.raws.ownSemicolon) {
            prev.raws.ownSemicolon = this.spaces;
            this.spaces = "";
          }
        }
      }
      getPosition(offset) {
        let pos = this.input.fromOffset(offset);
        return {
          offset,
          line: pos.line,
          column: pos.col
        };
      }
      init(node2, offset) {
        this.current.push(node2);
        node2.source = {
          start: this.getPosition(offset),
          input: this.input
        };
        node2.raws.before = this.spaces;
        this.spaces = "";
        if (node2.type !== "comment")
          this.semicolon = false;
      }
      raw(node2, prop, tokens) {
        let token, type;
        let length2 = tokens.length;
        let value = "";
        let clean = true;
        let next, prev;
        let pattern = /^([#.|])?(\w)+/i;
        for (let i = 0; i < length2; i += 1) {
          token = tokens[i];
          type = token[0];
          if (type === "comment" && node2.type === "rule") {
            prev = tokens[i - 1];
            next = tokens[i + 1];
            if (prev[0] !== "space" && next[0] !== "space" && pattern.test(prev[1]) && pattern.test(next[1])) {
              value += token[1];
            } else {
              clean = false;
            }
            continue;
          }
          if (type === "comment" || type === "space" && i === length2 - 1) {
            clean = false;
          } else {
            value += token[1];
          }
        }
        if (!clean) {
          let raw = tokens.reduce((all, i) => all + i[1], "");
          node2.raws[prop] = { value, raw };
        }
        node2[prop] = value;
      }
      spacesAndCommentsFromEnd(tokens) {
        let lastTokenType;
        let spaces = "";
        while (tokens.length) {
          lastTokenType = tokens[tokens.length - 1][0];
          if (lastTokenType !== "space" && lastTokenType !== "comment")
            break;
          spaces = tokens.pop()[1] + spaces;
        }
        return spaces;
      }
      spacesAndCommentsFromStart(tokens) {
        let next;
        let spaces = "";
        while (tokens.length) {
          next = tokens[0][0];
          if (next !== "space" && next !== "comment")
            break;
          spaces += tokens.shift()[1];
        }
        return spaces;
      }
      spacesFromEnd(tokens) {
        let lastTokenType;
        let spaces = "";
        while (tokens.length) {
          lastTokenType = tokens[tokens.length - 1][0];
          if (lastTokenType !== "space")
            break;
          spaces = tokens.pop()[1] + spaces;
        }
        return spaces;
      }
      stringFrom(tokens, from2) {
        let result2 = "";
        for (let i = from2; i < tokens.length; i++) {
          result2 += tokens[i][1];
        }
        tokens.splice(from2, tokens.length - from2);
        return result2;
      }
      colon(tokens) {
        let brackets = 0;
        let token, type, prev;
        for (let [i, element] of tokens.entries()) {
          token = element;
          type = token[0];
          if (type === "(") {
            brackets += 1;
          }
          if (type === ")") {
            brackets -= 1;
          }
          if (brackets === 0 && type === ":") {
            if (!prev) {
              this.doubleColon(token);
            } else if (prev[0] === "word" && prev[1] === "progid") {
              continue;
            } else {
              return i;
            }
          }
          prev = token;
        }
        return false;
      }
      unclosedBracket(bracket) {
        throw this.input.error("Unclosed bracket", { offset: bracket[2] }, { offset: bracket[2] + 1 });
      }
      unknownWord(tokens) {
        throw this.input.error("Unknown word", { offset: tokens[0][2] }, { offset: tokens[0][2] + tokens[0][1].length });
      }
      unexpectedClose(token) {
        throw this.input.error("Unexpected }", { offset: token[2] }, { offset: token[2] + 1 });
      }
      unclosedBlock() {
        let pos = this.current.source.start;
        throw this.input.error("Unclosed block", pos.line, pos.column);
      }
      doubleColon(token) {
        throw this.input.error("Double colon", { offset: token[2] }, { offset: token[2] + token[1].length });
      }
      unnamedAtrule(node2, token) {
        throw this.input.error("At-rule without name", { offset: token[2] }, { offset: token[2] + token[1].length });
      }
      precheckMissedSemicolon() {
      }
      checkMissedSemicolon(tokens) {
        let colon = this.colon(tokens);
        if (colon === false)
          return;
        let founded = 0;
        let token;
        for (let j = colon - 1; j >= 0; j--) {
          token = tokens[j];
          if (token[0] !== "space") {
            founded += 1;
            if (founded === 2)
              break;
          }
        }
        throw this.input.error("Missed semicolon", token[0] === "word" ? token[3] + 1 : token[2]);
      }
    };
    parser = Parser$1;
    parse_1$1 = parse$6;
    parse$6.default = parse$6;
    container.registerParse(parse$6);
    ({ isClean: isClean$3, my: my$3 } = symbols);
    TYPE_TO_CLASS_NAME = {
      document: "Document",
      root: "Root",
      atrule: "AtRule",
      rule: "Rule",
      decl: "Declaration",
      comment: "Comment"
    };
    PLUGIN_PROPS = {
      postcssPlugin: true,
      prepare: true,
      Once: true,
      Document: true,
      Root: true,
      Declaration: true,
      Rule: true,
      AtRule: true,
      Comment: true,
      DeclarationExit: true,
      RuleExit: true,
      AtRuleExit: true,
      CommentExit: true,
      RootExit: true,
      DocumentExit: true,
      OnceExit: true
    };
    NOT_VISITORS = {
      postcssPlugin: true,
      prepare: true,
      Once: true
    };
    CHILDREN = 0;
    postcss = {};
    LazyResult$2 = class {
      constructor(processor2, css, opts) {
        this.stringified = false;
        this.processed = false;
        let root2;
        if (typeof css === "object" && css !== null && (css.type === "root" || css.type === "document")) {
          root2 = cleanMarks(css);
        } else if (css instanceof LazyResult$2 || css instanceof result) {
          root2 = cleanMarks(css.root);
          if (css.map) {
            if (typeof opts.map === "undefined")
              opts.map = {};
            if (!opts.map.inline)
              opts.map.inline = false;
            opts.map.prev = css.map;
          }
        } else {
          let parser2 = parse_1$1;
          if (opts.syntax)
            parser2 = opts.syntax.parse;
          if (opts.parser)
            parser2 = opts.parser;
          if (parser2.parse)
            parser2 = parser2.parse;
          try {
            root2 = parser2(css, opts);
          } catch (error2) {
            this.processed = true;
            this.error = error2;
          }
          if (root2 && !root2[my$3]) {
            container.rebuild(root2);
          }
        }
        this.result = new result(processor2, root2, opts);
        this.helpers = { ...postcss, result: this.result, postcss };
        this.plugins = this.processor.plugins.map((plugin2) => {
          if (typeof plugin2 === "object" && plugin2.prepare) {
            return { ...plugin2, ...plugin2.prepare(this.result) };
          } else {
            return plugin2;
          }
        });
      }
      get [Symbol.toStringTag]() {
        return "LazyResult";
      }
      get processor() {
        return this.result.processor;
      }
      get opts() {
        return this.result.opts;
      }
      get css() {
        return this.stringify().css;
      }
      get content() {
        return this.stringify().content;
      }
      get map() {
        return this.stringify().map;
      }
      get root() {
        return this.sync().root;
      }
      get messages() {
        return this.sync().messages;
      }
      warnings() {
        return this.sync().warnings();
      }
      toString() {
        return this.css;
      }
      then(onFulfilled, onRejected) {
        {
          if (!("from" in this.opts)) {
            warnOnce$2("Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning.");
          }
        }
        return this.async().then(onFulfilled, onRejected);
      }
      catch(onRejected) {
        return this.async().catch(onRejected);
      }
      finally(onFinally) {
        return this.async().then(onFinally, onFinally);
      }
      async() {
        if (this.error)
          return Promise.reject(this.error);
        if (this.processed)
          return Promise.resolve(this.result);
        if (!this.processing) {
          this.processing = this.runAsync();
        }
        return this.processing;
      }
      sync() {
        if (this.error)
          throw this.error;
        if (this.processed)
          return this.result;
        this.processed = true;
        if (this.processing) {
          throw this.getAsyncError();
        }
        for (let plugin2 of this.plugins) {
          let promise = this.runOnRoot(plugin2);
          if (isPromise(promise)) {
            throw this.getAsyncError();
          }
        }
        this.prepareVisitors();
        if (this.hasListener) {
          let root2 = this.result.root;
          while (!root2[isClean$3]) {
            root2[isClean$3] = true;
            this.walkSync(root2);
          }
          if (this.listeners.OnceExit) {
            if (root2.type === "document") {
              for (let subRoot of root2.nodes) {
                this.visitSync(this.listeners.OnceExit, subRoot);
              }
            } else {
              this.visitSync(this.listeners.OnceExit, root2);
            }
          }
        }
        return this.result;
      }
      stringify() {
        if (this.error)
          throw this.error;
        if (this.stringified)
          return this.result;
        this.stringified = true;
        this.sync();
        let opts = this.result.opts;
        let str = stringify_1;
        if (opts.syntax)
          str = opts.syntax.stringify;
        if (opts.stringifier)
          str = opts.stringifier;
        if (str.stringify)
          str = str.stringify;
        let map2 = new mapGenerator(str, this.result.root, this.result.opts);
        let data = map2.generate();
        this.result.css = data[0];
        this.result.map = data[1];
        return this.result;
      }
      walkSync(node2) {
        node2[isClean$3] = true;
        let events = getEvents(node2);
        for (let event of events) {
          if (event === CHILDREN) {
            if (node2.nodes) {
              node2.each((child) => {
                if (!child[isClean$3])
                  this.walkSync(child);
              });
            }
          } else {
            let visitors = this.listeners[event];
            if (visitors) {
              if (this.visitSync(visitors, node2.toProxy()))
                return;
            }
          }
        }
      }
      visitSync(visitors, node2) {
        for (let [plugin2, visitor] of visitors) {
          this.result.lastPlugin = plugin2;
          let promise;
          try {
            promise = visitor(node2, this.helpers);
          } catch (e) {
            throw this.handleError(e, node2.proxyOf);
          }
          if (node2.type !== "root" && node2.type !== "document" && !node2.parent) {
            return true;
          }
          if (isPromise(promise)) {
            throw this.getAsyncError();
          }
        }
      }
      runOnRoot(plugin2) {
        this.result.lastPlugin = plugin2;
        try {
          if (typeof plugin2 === "object" && plugin2.Once) {
            if (this.result.root.type === "document") {
              let roots = this.result.root.nodes.map((root2) => plugin2.Once(root2, this.helpers));
              if (isPromise(roots[0])) {
                return Promise.all(roots);
              }
              return roots;
            }
            return plugin2.Once(this.result.root, this.helpers);
          } else if (typeof plugin2 === "function") {
            return plugin2(this.result.root, this.result);
          }
        } catch (error2) {
          throw this.handleError(error2);
        }
      }
      getAsyncError() {
        throw new Error("Use process(css).then(cb) to work with async plugins");
      }
      handleError(error2, node2) {
        let plugin2 = this.result.lastPlugin;
        try {
          if (node2)
            node2.addToError(error2);
          this.error = error2;
          if (error2.name === "CssSyntaxError" && !error2.plugin) {
            error2.plugin = plugin2.postcssPlugin;
            error2.setMessage();
          } else if (plugin2.postcssVersion) {
            if ({}.NODE_ENV !== "production") {
              let pluginName = plugin2.postcssPlugin;
              let pluginVer = plugin2.postcssVersion;
              let runtimeVer = this.result.processor.version;
              let a = pluginVer.split(".");
              let b = runtimeVer.split(".");
              if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {
                console.error("Unknown error from PostCSS plugin. Your current PostCSS version is " + runtimeVer + ", but " + pluginName + " uses " + pluginVer + ". Perhaps this is the source of the error below.");
              }
            }
          }
        } catch (err) {
          if (console && console.error)
            console.error(err);
        }
        return error2;
      }
      async runAsync() {
        this.plugin = 0;
        for (let i = 0; i < this.plugins.length; i++) {
          let plugin2 = this.plugins[i];
          let promise = this.runOnRoot(plugin2);
          if (isPromise(promise)) {
            try {
              await promise;
            } catch (error2) {
              throw this.handleError(error2);
            }
          }
        }
        this.prepareVisitors();
        if (this.hasListener) {
          let root2 = this.result.root;
          while (!root2[isClean$3]) {
            root2[isClean$3] = true;
            let stack = [toStack(root2)];
            while (stack.length > 0) {
              let promise = this.visitTick(stack);
              if (isPromise(promise)) {
                try {
                  await promise;
                } catch (e) {
                  let node2 = stack[stack.length - 1].node;
                  throw this.handleError(e, node2);
                }
              }
            }
          }
          if (this.listeners.OnceExit) {
            for (let [plugin2, visitor] of this.listeners.OnceExit) {
              this.result.lastPlugin = plugin2;
              try {
                if (root2.type === "document") {
                  let roots = root2.nodes.map((subRoot) => visitor(subRoot, this.helpers));
                  await Promise.all(roots);
                } else {
                  await visitor(root2, this.helpers);
                }
              } catch (e) {
                throw this.handleError(e);
              }
            }
          }
        }
        this.processed = true;
        return this.stringify();
      }
      prepareVisitors() {
        this.listeners = {};
        let add2 = (plugin2, type, cb) => {
          if (!this.listeners[type])
            this.listeners[type] = [];
          this.listeners[type].push([plugin2, cb]);
        };
        for (let plugin2 of this.plugins) {
          if (typeof plugin2 === "object") {
            for (let event in plugin2) {
              if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {
                throw new Error(`Unknown event ${event} in ${plugin2.postcssPlugin}. Try to update PostCSS (${this.processor.version} now).`);
              }
              if (!NOT_VISITORS[event]) {
                if (typeof plugin2[event] === "object") {
                  for (let filter2 in plugin2[event]) {
                    if (filter2 === "*") {
                      add2(plugin2, event, plugin2[event][filter2]);
                    } else {
                      add2(plugin2, event + "-" + filter2.toLowerCase(), plugin2[event][filter2]);
                    }
                  }
                } else if (typeof plugin2[event] === "function") {
                  add2(plugin2, event, plugin2[event]);
                }
              }
            }
          }
        }
        this.hasListener = Object.keys(this.listeners).length > 0;
      }
      visitTick(stack) {
        let visit = stack[stack.length - 1];
        let { node: node2, visitors } = visit;
        if (node2.type !== "root" && node2.type !== "document" && !node2.parent) {
          stack.pop();
          return;
        }
        if (visitors.length > 0 && visit.visitorIndex < visitors.length) {
          let [plugin2, visitor] = visitors[visit.visitorIndex];
          visit.visitorIndex += 1;
          if (visit.visitorIndex === visitors.length) {
            visit.visitors = [];
            visit.visitorIndex = 0;
          }
          this.result.lastPlugin = plugin2;
          try {
            return visitor(node2.toProxy(), this.helpers);
          } catch (e) {
            throw this.handleError(e, node2);
          }
        }
        if (visit.iterator !== 0) {
          let iterator = visit.iterator;
          let child;
          while (child = node2.nodes[node2.indexes[iterator]]) {
            node2.indexes[iterator] += 1;
            if (!child[isClean$3]) {
              child[isClean$3] = true;
              stack.push(toStack(child));
              return;
            }
          }
          visit.iterator = 0;
          delete node2.indexes[iterator];
        }
        let events = visit.events;
        while (visit.eventIndex < events.length) {
          let event = events[visit.eventIndex];
          visit.eventIndex += 1;
          if (event === CHILDREN) {
            if (node2.nodes && node2.nodes.length) {
              node2[isClean$3] = true;
              visit.iterator = node2.getIterator();
            }
            return;
          } else if (this.listeners[event]) {
            visit.visitors = this.listeners[event];
            return;
          }
        }
        stack.pop();
      }
    };
    LazyResult$2.registerPostcss = (dependant) => {
      postcss = dependant;
    };
    lazyResult = LazyResult$2;
    LazyResult$2.default = LazyResult$2;
    root.registerLazyResult(LazyResult$2);
    document.registerLazyResult(LazyResult$2);
    NoWorkResult = class {
      constructor(processor2, css, opts) {
        css = css.toString();
        this.stringified = false;
        this._processor = processor2;
        this._css = css;
        this._opts = opts;
        this._map = void 0;
        let root2;
        let str = stringify_1;
        this.result = new result(this._processor, root2, this._opts);
        this.result.css = css;
        let self2 = this;
        Object.defineProperty(this.result, "root", {
          get() {
            return self2.root;
          }
        });
        let map2 = new mapGenerator(str, root2, this._opts, css);
        if (map2.isMap()) {
          let [generatedCSS, generatedMap] = map2.generate();
          if (generatedCSS) {
            this.result.css = generatedCSS;
          }
          if (generatedMap) {
            this.result.map = generatedMap;
          }
        }
      }
      get [Symbol.toStringTag]() {
        return "NoWorkResult";
      }
      get processor() {
        return this.result.processor;
      }
      get opts() {
        return this.result.opts;
      }
      get css() {
        return this.result.css;
      }
      get content() {
        return this.result.css;
      }
      get map() {
        return this.result.map;
      }
      get root() {
        if (this._root) {
          return this._root;
        }
        let root2;
        let parser2 = parse_1$1;
        try {
          root2 = parser2(this._css, this._opts);
        } catch (error2) {
          this.error = error2;
        }
        this._root = root2;
        return root2;
      }
      get messages() {
        return [];
      }
      warnings() {
        return [];
      }
      toString() {
        return this._css;
      }
      then(onFulfilled, onRejected) {
        {
          if (!("from" in this._opts)) {
            warnOnce$2("Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning.");
          }
        }
        return this.async().then(onFulfilled, onRejected);
      }
      catch(onRejected) {
        return this.async().catch(onRejected);
      }
      finally(onFinally) {
        return this.async().then(onFinally, onFinally);
      }
      async() {
        if (this.error)
          return Promise.reject(this.error);
        return Promise.resolve(this.result);
      }
      sync() {
        if (this.error)
          throw this.error;
        return this.result;
      }
    };
    noWorkResult = NoWorkResult;
    NoWorkResult.default = NoWorkResult;
    Processor$2 = class {
      constructor(plugins = []) {
        this.version = "8.4.4";
        this.plugins = this.normalize(plugins);
      }
      use(plugin2) {
        this.plugins = this.plugins.concat(this.normalize([plugin2]));
        return this;
      }
      process(css, opts = {}) {
        if (this.plugins.length === 0 && typeof opts.parser === "undefined" && typeof opts.stringifier === "undefined" && typeof opts.syntax === "undefined") {
          return new noWorkResult(this, css, opts);
        } else {
          return new lazyResult(this, css, opts);
        }
      }
      normalize(plugins) {
        let normalized = [];
        for (let i of plugins) {
          if (i.postcss === true) {
            i = i();
          } else if (i.postcss) {
            i = i.postcss;
          }
          if (typeof i === "object" && Array.isArray(i.plugins)) {
            normalized = normalized.concat(i.plugins);
          } else if (typeof i === "object" && i.postcssPlugin) {
            normalized.push(i);
          } else if (typeof i === "function") {
            normalized.push(i);
          } else if (typeof i === "object" && (i.parse || i.stringify)) {
            {
              throw new Error("PostCSS syntaxes cannot be used as plugins. Instead, please use one of the syntax/parser/stringifier options as outlined in your PostCSS runner documentation.");
            }
          } else {
            throw new Error(i + " is not a PostCSS plugin");
          }
        }
        return normalized;
      }
    };
    processor = Processor$2;
    Processor$2.default = Processor$2;
    root.registerProcessor(Processor$2);
    document.registerProcessor(Processor$2);
    fromJSON_1 = fromJSON;
    fromJSON.default = fromJSON;
    postcss$1.plugin = function plugin(name, initializer) {
      if (console && console.warn) {
        console.warn(name + ": postcss.plugin was deprecated. Migration guide:\nhttps://evilmartians.com/chronicles/postcss-8-plugin-migration");
      }
      function creator(...args) {
        let transformer = initializer(...args);
        transformer.postcssPlugin = name;
        transformer.postcssVersion = new processor().version;
        return transformer;
      }
      let cache;
      Object.defineProperty(creator, "postcss", {
        get() {
          if (!cache)
            cache = creator();
          return cache;
        }
      });
      creator.process = function(css, processOpts, pluginOpts) {
        return postcss$1([creator(pluginOpts)]).process(css, processOpts);
      };
      return creator;
    };
    postcss$1.stringify = stringify_1;
    postcss$1.parse = parse_1$1;
    postcss$1.fromJSON = fromJSON_1;
    postcss$1.list = list_1;
    postcss$1.comment = (defaults) => new comment(defaults);
    postcss$1.atRule = (defaults) => new atRule(defaults);
    postcss$1.decl = (defaults) => new declaration(defaults);
    postcss$1.rule = (defaults) => new rule(defaults);
    postcss$1.root = (defaults) => new root(defaults);
    postcss$1.document = (defaults) => new document(defaults);
    postcss$1.CssSyntaxError = cssSyntaxError;
    postcss$1.Declaration = declaration;
    postcss$1.Container = container;
    postcss$1.Processor = processor;
    postcss$1.Document = document;
    postcss$1.Comment = comment;
    postcss$1.Warning = warning;
    postcss$1.AtRule = atRule;
    postcss$1.Result = result;
    postcss$1.Input = input;
    postcss$1.Rule = rule;
    postcss$1.Root = root;
    postcss$1.Node = node_1;
    lazyResult.registerPostcss(postcss$1);
    postcss_1 = postcss$1;
    postcss$1.default = postcss$1;
    trimPlugin = () => {
      return {
        postcssPlugin: "vue-sfc-trim",
        Once(root2) {
          root2.walk(({ type, raws }) => {
            if (type === "rule" || type === "atrule") {
              if (raws.before)
                raws.before = "\n";
              if ("after" in raws && raws.after)
                raws.after = "\n";
            }
          });
        }
      };
    };
    trimPlugin.postcss = true;
    unesc_1 = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = unesc;
      function gobbleHex(str) {
        var lower = str.toLowerCase();
        var hex = "";
        var spaceTerminated = false;
        for (var i = 0; i < 6 && lower[i] !== void 0; i++) {
          var code = lower.charCodeAt(i);
          var valid = code >= 97 && code <= 102 || code >= 48 && code <= 57;
          spaceTerminated = code === 32;
          if (!valid) {
            break;
          }
          hex += lower[i];
        }
        if (hex.length === 0) {
          return void 0;
        }
        var codePoint = parseInt(hex, 16);
        var isSurrogate = codePoint >= 55296 && codePoint <= 57343;
        if (isSurrogate || codePoint === 0 || codePoint > 1114111) {
          return ["\uFFFD", hex.length + (spaceTerminated ? 1 : 0)];
        }
        return [String.fromCodePoint(codePoint), hex.length + (spaceTerminated ? 1 : 0)];
      }
      var CONTAINS_ESCAPE = /\\/;
      function unesc(str) {
        var needToProcess = CONTAINS_ESCAPE.test(str);
        if (!needToProcess) {
          return str;
        }
        var ret = "";
        for (var i = 0; i < str.length; i++) {
          if (str[i] === "\\") {
            var gobbled = gobbleHex(str.slice(i + 1, i + 7));
            if (gobbled !== void 0) {
              ret += gobbled[0];
              i += gobbled[1];
              continue;
            }
            if (str[i + 1] === "\\") {
              ret += "\\";
              i++;
              continue;
            }
            if (str.length === i + 1) {
              ret += str[i];
            }
            continue;
          }
          ret += str[i];
        }
        return ret;
      }
      module2.exports = exports2.default;
    });
    getProp_1 = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = getProp;
      function getProp(obj) {
        for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          props[_key - 1] = arguments[_key];
        }
        while (props.length > 0) {
          var prop = props.shift();
          if (!obj[prop]) {
            return void 0;
          }
          obj = obj[prop];
        }
        return obj;
      }
      module2.exports = exports2.default;
    });
    ensureObject_1 = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = ensureObject;
      function ensureObject(obj) {
        for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          props[_key - 1] = arguments[_key];
        }
        while (props.length > 0) {
          var prop = props.shift();
          if (!obj[prop]) {
            obj[prop] = {};
          }
          obj = obj[prop];
        }
      }
      module2.exports = exports2.default;
    });
    stripComments_1 = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = stripComments;
      function stripComments(str) {
        var s = "";
        var commentStart = str.indexOf("/*");
        var lastEnd = 0;
        while (commentStart >= 0) {
          s = s + str.slice(lastEnd, commentStart);
          var commentEnd = str.indexOf("*/", commentStart + 2);
          if (commentEnd < 0) {
            return s;
          }
          lastEnd = commentEnd + 2;
          commentStart = str.indexOf("/*", lastEnd);
        }
        s = s + str.slice(lastEnd);
        return s;
      }
      module2.exports = exports2.default;
    });
    util$2 = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2.stripComments = exports2.ensureObject = exports2.getProp = exports2.unesc = void 0;
      var _unesc = _interopRequireDefault(unesc_1);
      exports2.unesc = _unesc["default"];
      var _getProp = _interopRequireDefault(getProp_1);
      exports2.getProp = _getProp["default"];
      var _ensureObject = _interopRequireDefault(ensureObject_1);
      exports2.ensureObject = _ensureObject["default"];
      var _stripComments = _interopRequireDefault(stripComments_1);
      exports2.stripComments = _stripComments["default"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
    });
    node = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      var cloneNode2 = function cloneNode3(obj, parent) {
        if (typeof obj !== "object" || obj === null) {
          return obj;
        }
        var cloned = new obj.constructor();
        for (var i in obj) {
          if (!obj.hasOwnProperty(i)) {
            continue;
          }
          var value = obj[i];
          var type = typeof value;
          if (i === "parent" && type === "object") {
            if (parent) {
              cloned[i] = parent;
            }
          } else if (value instanceof Array) {
            cloned[i] = value.map(function(j) {
              return cloneNode3(j, cloned);
            });
          } else {
            cloned[i] = cloneNode3(value, cloned);
          }
        }
        return cloned;
      };
      var Node2 = /* @__PURE__ */ function() {
        function Node3(opts) {
          if (opts === void 0) {
            opts = {};
          }
          Object.assign(this, opts);
          this.spaces = this.spaces || {};
          this.spaces.before = this.spaces.before || "";
          this.spaces.after = this.spaces.after || "";
        }
        var _proto = Node3.prototype;
        _proto.remove = function remove2() {
          if (this.parent) {
            this.parent.removeChild(this);
          }
          this.parent = void 0;
          return this;
        };
        _proto.replaceWith = function replaceWith() {
          if (this.parent) {
            for (var index in arguments) {
              this.parent.insertBefore(this, arguments[index]);
            }
            this.remove();
          }
          return this;
        };
        _proto.next = function next() {
          return this.parent.at(this.parent.index(this) + 1);
        };
        _proto.prev = function prev() {
          return this.parent.at(this.parent.index(this) - 1);
        };
        _proto.clone = function clone4(overrides) {
          if (overrides === void 0) {
            overrides = {};
          }
          var cloned = cloneNode2(this);
          for (var name in overrides) {
            cloned[name] = overrides[name];
          }
          return cloned;
        };
        _proto.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {
          if (!this.raws) {
            this.raws = {};
          }
          var originalValue = this[name];
          var originalEscaped = this.raws[name];
          this[name] = originalValue + value;
          if (originalEscaped || valueEscaped !== value) {
            this.raws[name] = (originalEscaped || originalValue) + valueEscaped;
          } else {
            delete this.raws[name];
          }
        };
        _proto.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {
          if (!this.raws) {
            this.raws = {};
          }
          this[name] = value;
          this.raws[name] = valueEscaped;
        };
        _proto.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {
          this[name] = value;
          if (this.raws) {
            delete this.raws[name];
          }
        };
        _proto.isAtPosition = function isAtPosition(line, column) {
          if (this.source && this.source.start && this.source.end) {
            if (this.source.start.line > line) {
              return false;
            }
            if (this.source.end.line < line) {
              return false;
            }
            if (this.source.start.line === line && this.source.start.column > column) {
              return false;
            }
            if (this.source.end.line === line && this.source.end.column < column) {
              return false;
            }
            return true;
          }
          return void 0;
        };
        _proto.stringifyProperty = function stringifyProperty(name) {
          return this.raws && this.raws[name] || this[name];
        };
        _proto.valueToString = function valueToString() {
          return String(this.stringifyProperty("value"));
        };
        _proto.toString = function toString6() {
          return [this.rawSpaceBefore, this.valueToString(), this.rawSpaceAfter].join("");
        };
        _createClass(Node3, [{
          key: "rawSpaceBefore",
          get: function get() {
            var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;
            if (rawSpace === void 0) {
              rawSpace = this.spaces && this.spaces.before;
            }
            return rawSpace || "";
          },
          set: function set(raw) {
            (0, util$2.ensureObject)(this, "raws", "spaces");
            this.raws.spaces.before = raw;
          }
        }, {
          key: "rawSpaceAfter",
          get: function get() {
            var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;
            if (rawSpace === void 0) {
              rawSpace = this.spaces.after;
            }
            return rawSpace || "";
          },
          set: function set(raw) {
            (0, util$2.ensureObject)(this, "raws", "spaces");
            this.raws.spaces.after = raw;
          }
        }]);
        return Node3;
      }();
      exports2["default"] = Node2;
      module2.exports = exports2.default;
    });
    types$1 = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2.UNIVERSAL = exports2.ATTRIBUTE = exports2.CLASS = exports2.COMBINATOR = exports2.COMMENT = exports2.ID = exports2.NESTING = exports2.PSEUDO = exports2.ROOT = exports2.SELECTOR = exports2.STRING = exports2.TAG = void 0;
      var TAG = "tag";
      exports2.TAG = TAG;
      var STRING = "string";
      exports2.STRING = STRING;
      var SELECTOR = "selector";
      exports2.SELECTOR = SELECTOR;
      var ROOT = "root";
      exports2.ROOT = ROOT;
      var PSEUDO = "pseudo";
      exports2.PSEUDO = PSEUDO;
      var NESTING = "nesting";
      exports2.NESTING = NESTING;
      var ID = "id";
      exports2.ID = ID;
      var COMMENT = "comment";
      exports2.COMMENT = COMMENT;
      var COMBINATOR = "combinator";
      exports2.COMBINATOR = COMBINATOR;
      var CLASS = "class";
      exports2.CLASS = CLASS;
      var ATTRIBUTE = "attribute";
      exports2.ATTRIBUTE = ATTRIBUTE;
      var UNIVERSAL = "universal";
      exports2.UNIVERSAL = UNIVERSAL;
    });
    container$1 = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _node = _interopRequireDefault(node);
      var types2 = _interopRequireWildcard(types$1);
      function _getRequireWildcardCache() {
        if (typeof WeakMap !== "function")
          return null;
        var cache = /* @__PURE__ */ new WeakMap();
        _getRequireWildcardCache = function _getRequireWildcardCache2() {
          return cache;
        };
        return cache;
      }
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache();
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _createForOfIteratorHelperLoose(o, allowArrayLike) {
        var it;
        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it)
              o = it;
            var i = 0;
            return function() {
              if (i >= o.length)
                return { done: true };
              return { done: false, value: o[i++] };
            };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        it = o[Symbol.iterator]();
        return it.next.bind(it);
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n2 = Object.prototype.toString.call(o).slice(8, -1);
        if (n2 === "Object" && o.constructor)
          n2 = o.constructor.name;
        if (n2 === "Map" || n2 === "Set")
          return Array.from(o);
        if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
          return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var Container2 = /* @__PURE__ */ function(_Node) {
        _inheritsLoose(Container3, _Node);
        function Container3(opts) {
          var _this;
          _this = _Node.call(this, opts) || this;
          if (!_this.nodes) {
            _this.nodes = [];
          }
          return _this;
        }
        var _proto = Container3.prototype;
        _proto.append = function append2(selector2) {
          selector2.parent = this;
          this.nodes.push(selector2);
          return this;
        };
        _proto.prepend = function prepend2(selector2) {
          selector2.parent = this;
          this.nodes.unshift(selector2);
          return this;
        };
        _proto.at = function at(index) {
          return this.nodes[index];
        };
        _proto.index = function index(child) {
          if (typeof child === "number") {
            return child;
          }
          return this.nodes.indexOf(child);
        };
        _proto.removeChild = function removeChild(child) {
          child = this.index(child);
          this.at(child).parent = void 0;
          this.nodes.splice(child, 1);
          var index;
          for (var id2 in this.indexes) {
            index = this.indexes[id2];
            if (index >= child) {
              this.indexes[id2] = index - 1;
            }
          }
          return this;
        };
        _proto.removeAll = function removeAll() {
          for (var _iterator = _createForOfIteratorHelperLoose(this.nodes), _step; !(_step = _iterator()).done; ) {
            var node2 = _step.value;
            node2.parent = void 0;
          }
          this.nodes = [];
          return this;
        };
        _proto.empty = function empty() {
          return this.removeAll();
        };
        _proto.insertAfter = function insertAfter(oldNode, newNode) {
          newNode.parent = this;
          var oldIndex = this.index(oldNode);
          this.nodes.splice(oldIndex + 1, 0, newNode);
          newNode.parent = this;
          var index;
          for (var id2 in this.indexes) {
            index = this.indexes[id2];
            if (oldIndex <= index) {
              this.indexes[id2] = index + 1;
            }
          }
          return this;
        };
        _proto.insertBefore = function insertBefore(oldNode, newNode) {
          newNode.parent = this;
          var oldIndex = this.index(oldNode);
          this.nodes.splice(oldIndex, 0, newNode);
          newNode.parent = this;
          var index;
          for (var id2 in this.indexes) {
            index = this.indexes[id2];
            if (index <= oldIndex) {
              this.indexes[id2] = index + 1;
            }
          }
          return this;
        };
        _proto._findChildAtPosition = function _findChildAtPosition(line, col) {
          var found = void 0;
          this.each(function(node2) {
            if (node2.atPosition) {
              var foundChild = node2.atPosition(line, col);
              if (foundChild) {
                found = foundChild;
                return false;
              }
            } else if (node2.isAtPosition(line, col)) {
              found = node2;
              return false;
            }
          });
          return found;
        };
        _proto.atPosition = function atPosition(line, col) {
          if (this.isAtPosition(line, col)) {
            return this._findChildAtPosition(line, col) || this;
          } else {
            return void 0;
          }
        };
        _proto._inferEndPosition = function _inferEndPosition() {
          if (this.last && this.last.source && this.last.source.end) {
            this.source = this.source || {};
            this.source.end = this.source.end || {};
            Object.assign(this.source.end, this.last.source.end);
          }
        };
        _proto.each = function each(callback) {
          if (!this.lastEach) {
            this.lastEach = 0;
          }
          if (!this.indexes) {
            this.indexes = {};
          }
          this.lastEach++;
          var id2 = this.lastEach;
          this.indexes[id2] = 0;
          if (!this.length) {
            return void 0;
          }
          var index, result2;
          while (this.indexes[id2] < this.length) {
            index = this.indexes[id2];
            result2 = callback(this.at(index), index);
            if (result2 === false) {
              break;
            }
            this.indexes[id2] += 1;
          }
          delete this.indexes[id2];
          if (result2 === false) {
            return false;
          }
        };
        _proto.walk = function walk3(callback) {
          return this.each(function(node2, i) {
            var result2 = callback(node2, i);
            if (result2 !== false && node2.length) {
              result2 = node2.walk(callback);
            }
            if (result2 === false) {
              return false;
            }
          });
        };
        _proto.walkAttributes = function walkAttributes(callback) {
          var _this2 = this;
          return this.walk(function(selector2) {
            if (selector2.type === types2.ATTRIBUTE) {
              return callback.call(_this2, selector2);
            }
          });
        };
        _proto.walkClasses = function walkClasses(callback) {
          var _this3 = this;
          return this.walk(function(selector2) {
            if (selector2.type === types2.CLASS) {
              return callback.call(_this3, selector2);
            }
          });
        };
        _proto.walkCombinators = function walkCombinators(callback) {
          var _this4 = this;
          return this.walk(function(selector2) {
            if (selector2.type === types2.COMBINATOR) {
              return callback.call(_this4, selector2);
            }
          });
        };
        _proto.walkComments = function walkComments(callback) {
          var _this5 = this;
          return this.walk(function(selector2) {
            if (selector2.type === types2.COMMENT) {
              return callback.call(_this5, selector2);
            }
          });
        };
        _proto.walkIds = function walkIds(callback) {
          var _this6 = this;
          return this.walk(function(selector2) {
            if (selector2.type === types2.ID) {
              return callback.call(_this6, selector2);
            }
          });
        };
        _proto.walkNesting = function walkNesting(callback) {
          var _this7 = this;
          return this.walk(function(selector2) {
            if (selector2.type === types2.NESTING) {
              return callback.call(_this7, selector2);
            }
          });
        };
        _proto.walkPseudos = function walkPseudos(callback) {
          var _this8 = this;
          return this.walk(function(selector2) {
            if (selector2.type === types2.PSEUDO) {
              return callback.call(_this8, selector2);
            }
          });
        };
        _proto.walkTags = function walkTags(callback) {
          var _this9 = this;
          return this.walk(function(selector2) {
            if (selector2.type === types2.TAG) {
              return callback.call(_this9, selector2);
            }
          });
        };
        _proto.walkUniversals = function walkUniversals(callback) {
          var _this10 = this;
          return this.walk(function(selector2) {
            if (selector2.type === types2.UNIVERSAL) {
              return callback.call(_this10, selector2);
            }
          });
        };
        _proto.split = function split2(callback) {
          var _this11 = this;
          var current = [];
          return this.reduce(function(memo, node2, index) {
            var split3 = callback.call(_this11, node2);
            current.push(node2);
            if (split3) {
              memo.push(current);
              current = [];
            } else if (index === _this11.length - 1) {
              memo.push(current);
            }
            return memo;
          }, []);
        };
        _proto.map = function map2(callback) {
          return this.nodes.map(callback);
        };
        _proto.reduce = function reduce(callback, memo) {
          return this.nodes.reduce(callback, memo);
        };
        _proto.every = function every(callback) {
          return this.nodes.every(callback);
        };
        _proto.some = function some(callback) {
          return this.nodes.some(callback);
        };
        _proto.filter = function filter2(callback) {
          return this.nodes.filter(callback);
        };
        _proto.sort = function sort(callback) {
          return this.nodes.sort(callback);
        };
        _proto.toString = function toString6() {
          return this.map(String).join("");
        };
        _createClass(Container3, [{
          key: "first",
          get: function get() {
            return this.at(0);
          }
        }, {
          key: "last",
          get: function get() {
            return this.at(this.length - 1);
          }
        }, {
          key: "length",
          get: function get() {
            return this.nodes.length;
          }
        }]);
        return Container3;
      }(_node["default"]);
      exports2["default"] = Container2;
      module2.exports = exports2.default;
    });
    root$1 = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _container = _interopRequireDefault(container$1);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var Root2 = /* @__PURE__ */ function(_Container) {
        _inheritsLoose(Root3, _Container);
        function Root3(opts) {
          var _this;
          _this = _Container.call(this, opts) || this;
          _this.type = types$1.ROOT;
          return _this;
        }
        var _proto = Root3.prototype;
        _proto.toString = function toString6() {
          var str = this.reduce(function(memo, selector2) {
            memo.push(String(selector2));
            return memo;
          }, []).join(",");
          return this.trailingComma ? str + "," : str;
        };
        _proto.error = function error2(message, options) {
          if (this._error) {
            return this._error(message, options);
          } else {
            return new Error(message);
          }
        };
        _createClass(Root3, [{
          key: "errorGenerator",
          set: function set(handler) {
            this._error = handler;
          }
        }]);
        return Root3;
      }(_container["default"]);
      exports2["default"] = Root2;
      module2.exports = exports2.default;
    });
    selector = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _container = _interopRequireDefault(container$1);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var Selector = /* @__PURE__ */ function(_Container) {
        _inheritsLoose(Selector2, _Container);
        function Selector2(opts) {
          var _this;
          _this = _Container.call(this, opts) || this;
          _this.type = types$1.SELECTOR;
          return _this;
        }
        return Selector2;
      }(_container["default"]);
      exports2["default"] = Selector;
      module2.exports = exports2.default;
    });
    object = {};
    hasOwnProperty$3 = object.hasOwnProperty;
    merge = function merge2(options, defaults) {
      if (!options) {
        return defaults;
      }
      var result2 = {};
      for (var key in defaults) {
        result2[key] = hasOwnProperty$3.call(options, key) ? options[key] : defaults[key];
      }
      return result2;
    };
    regexAnySingleEscape = /[ -,\.\/:-@\[-\^`\{-~]/;
    regexSingleEscape = /[ -,\.\/:-@\[\]\^`\{-~]/;
    regexExcessiveSpaces = /(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g;
    cssesc = function cssesc2(string2, options) {
      options = merge(options, cssesc2.options);
      if (options.quotes != "single" && options.quotes != "double") {
        options.quotes = "single";
      }
      var quote = options.quotes == "double" ? '"' : "'";
      var isIdentifier = options.isIdentifier;
      var firstChar = string2.charAt(0);
      var output = "";
      var counter = 0;
      var length2 = string2.length;
      while (counter < length2) {
        var character = string2.charAt(counter++);
        var codePoint = character.charCodeAt();
        var value = void 0;
        if (codePoint < 32 || codePoint > 126) {
          if (codePoint >= 55296 && codePoint <= 56319 && counter < length2) {
            var extra = string2.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              codePoint = ((codePoint & 1023) << 10) + (extra & 1023) + 65536;
            } else {
              counter--;
            }
          }
          value = "\\" + codePoint.toString(16).toUpperCase() + " ";
        } else {
          if (options.escapeEverything) {
            if (regexAnySingleEscape.test(character)) {
              value = "\\" + character;
            } else {
              value = "\\" + codePoint.toString(16).toUpperCase() + " ";
            }
          } else if (/[\t\n\f\r\x0B]/.test(character)) {
            value = "\\" + codePoint.toString(16).toUpperCase() + " ";
          } else if (character == "\\" || !isIdentifier && (character == '"' && quote == character || character == "'" && quote == character) || isIdentifier && regexSingleEscape.test(character)) {
            value = "\\" + character;
          } else {
            value = character;
          }
        }
        output += value;
      }
      if (isIdentifier) {
        if (/^-[-\d]/.test(output)) {
          output = "\\-" + output.slice(1);
        } else if (/\d/.test(firstChar)) {
          output = "\\3" + firstChar + " " + output.slice(1);
        }
      }
      output = output.replace(regexExcessiveSpaces, function($0, $1, $2) {
        if ($1 && $1.length % 2) {
          return $0;
        }
        return ($1 || "") + $2;
      });
      if (!isIdentifier && options.wrap) {
        return quote + output + quote;
      }
      return output;
    };
    cssesc.options = {
      "escapeEverything": false,
      "isIdentifier": false,
      "quotes": "single",
      "wrap": false
    };
    cssesc.version = "3.0.0";
    cssesc_1 = cssesc;
    className = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _cssesc = _interopRequireDefault(cssesc_1);
      var _node = _interopRequireDefault(node);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var ClassName = /* @__PURE__ */ function(_Node) {
        _inheritsLoose(ClassName2, _Node);
        function ClassName2(opts) {
          var _this;
          _this = _Node.call(this, opts) || this;
          _this.type = types$1.CLASS;
          _this._constructed = true;
          return _this;
        }
        var _proto = ClassName2.prototype;
        _proto.valueToString = function valueToString() {
          return "." + _Node.prototype.valueToString.call(this);
        };
        _createClass(ClassName2, [{
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(v) {
            if (this._constructed) {
              var escaped = (0, _cssesc["default"])(v, {
                isIdentifier: true
              });
              if (escaped !== v) {
                (0, util$2.ensureObject)(this, "raws");
                this.raws.value = escaped;
              } else if (this.raws) {
                delete this.raws.value;
              }
            }
            this._value = v;
          }
        }]);
        return ClassName2;
      }(_node["default"]);
      exports2["default"] = ClassName;
      module2.exports = exports2.default;
    });
    comment$1 = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _node = _interopRequireDefault(node);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var Comment2 = /* @__PURE__ */ function(_Node) {
        _inheritsLoose(Comment3, _Node);
        function Comment3(opts) {
          var _this;
          _this = _Node.call(this, opts) || this;
          _this.type = types$1.COMMENT;
          return _this;
        }
        return Comment3;
      }(_node["default"]);
      exports2["default"] = Comment2;
      module2.exports = exports2.default;
    });
    id = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _node = _interopRequireDefault(node);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var ID = /* @__PURE__ */ function(_Node) {
        _inheritsLoose(ID2, _Node);
        function ID2(opts) {
          var _this;
          _this = _Node.call(this, opts) || this;
          _this.type = types$1.ID;
          return _this;
        }
        var _proto = ID2.prototype;
        _proto.valueToString = function valueToString() {
          return "#" + _Node.prototype.valueToString.call(this);
        };
        return ID2;
      }(_node["default"]);
      exports2["default"] = ID;
      module2.exports = exports2.default;
    });
    namespace = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _cssesc = _interopRequireDefault(cssesc_1);
      var _node = _interopRequireDefault(node);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var Namespace = /* @__PURE__ */ function(_Node) {
        _inheritsLoose(Namespace2, _Node);
        function Namespace2() {
          return _Node.apply(this, arguments) || this;
        }
        var _proto = Namespace2.prototype;
        _proto.qualifiedName = function qualifiedName(value) {
          if (this.namespace) {
            return this.namespaceString + "|" + value;
          } else {
            return value;
          }
        };
        _proto.valueToString = function valueToString() {
          return this.qualifiedName(_Node.prototype.valueToString.call(this));
        };
        _createClass(Namespace2, [{
          key: "namespace",
          get: function get() {
            return this._namespace;
          },
          set: function set(namespace2) {
            if (namespace2 === true || namespace2 === "*" || namespace2 === "&") {
              this._namespace = namespace2;
              if (this.raws) {
                delete this.raws.namespace;
              }
              return;
            }
            var escaped = (0, _cssesc["default"])(namespace2, {
              isIdentifier: true
            });
            this._namespace = namespace2;
            if (escaped !== namespace2) {
              (0, util$2.ensureObject)(this, "raws");
              this.raws.namespace = escaped;
            } else if (this.raws) {
              delete this.raws.namespace;
            }
          }
        }, {
          key: "ns",
          get: function get() {
            return this._namespace;
          },
          set: function set(namespace2) {
            this.namespace = namespace2;
          }
        }, {
          key: "namespaceString",
          get: function get() {
            if (this.namespace) {
              var ns = this.stringifyProperty("namespace");
              if (ns === true) {
                return "";
              } else {
                return ns;
              }
            } else {
              return "";
            }
          }
        }]);
        return Namespace2;
      }(_node["default"]);
      exports2["default"] = Namespace;
      module2.exports = exports2.default;
    });
    tag = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _namespace = _interopRequireDefault(namespace);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var Tag = /* @__PURE__ */ function(_Namespace) {
        _inheritsLoose(Tag2, _Namespace);
        function Tag2(opts) {
          var _this;
          _this = _Namespace.call(this, opts) || this;
          _this.type = types$1.TAG;
          return _this;
        }
        return Tag2;
      }(_namespace["default"]);
      exports2["default"] = Tag;
      module2.exports = exports2.default;
    });
    string = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _node = _interopRequireDefault(node);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var String2 = /* @__PURE__ */ function(_Node) {
        _inheritsLoose(String3, _Node);
        function String3(opts) {
          var _this;
          _this = _Node.call(this, opts) || this;
          _this.type = types$1.STRING;
          return _this;
        }
        return String3;
      }(_node["default"]);
      exports2["default"] = String2;
      module2.exports = exports2.default;
    });
    pseudo = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _container = _interopRequireDefault(container$1);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var Pseudo = /* @__PURE__ */ function(_Container) {
        _inheritsLoose(Pseudo2, _Container);
        function Pseudo2(opts) {
          var _this;
          _this = _Container.call(this, opts) || this;
          _this.type = types$1.PSEUDO;
          return _this;
        }
        var _proto = Pseudo2.prototype;
        _proto.toString = function toString6() {
          var params = this.length ? "(" + this.map(String).join(",") + ")" : "";
          return [this.rawSpaceBefore, this.stringifyProperty("value"), params, this.rawSpaceAfter].join("");
        };
        return Pseudo2;
      }(_container["default"]);
      exports2["default"] = Pseudo;
      module2.exports = exports2.default;
    });
    node$1 = require$$0.deprecate;
    attribute = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2.unescapeValue = unescapeValue;
      exports2["default"] = void 0;
      var _cssesc = _interopRequireDefault(cssesc_1);
      var _unesc = _interopRequireDefault(unesc_1);
      var _namespace = _interopRequireDefault(namespace);
      var _CSSESC_QUOTE_OPTIONS;
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var WRAPPED_IN_QUOTES = /^('|")([^]*)\1$/;
      var warnOfDeprecatedValueAssignment = node$1(function() {
      }, "Assigning an attribute a value containing characters that might need to be escaped is deprecated. Call attribute.setValue() instead.");
      var warnOfDeprecatedQuotedAssignment = node$1(function() {
      }, "Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.");
      var warnOfDeprecatedConstructor = node$1(function() {
      }, "Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.");
      function unescapeValue(value) {
        var deprecatedUsage = false;
        var quoteMark = null;
        var unescaped = value;
        var m = unescaped.match(WRAPPED_IN_QUOTES);
        if (m) {
          quoteMark = m[1];
          unescaped = m[2];
        }
        unescaped = (0, _unesc["default"])(unescaped);
        if (unescaped !== value) {
          deprecatedUsage = true;
        }
        return {
          deprecatedUsage,
          unescaped,
          quoteMark
        };
      }
      function handleDeprecatedContructorOpts(opts) {
        if (opts.quoteMark !== void 0) {
          return opts;
        }
        if (opts.value === void 0) {
          return opts;
        }
        warnOfDeprecatedConstructor();
        var _unescapeValue = unescapeValue(opts.value), quoteMark = _unescapeValue.quoteMark, unescaped = _unescapeValue.unescaped;
        if (!opts.raws) {
          opts.raws = {};
        }
        if (opts.raws.value === void 0) {
          opts.raws.value = opts.value;
        }
        opts.value = unescaped;
        opts.quoteMark = quoteMark;
        return opts;
      }
      var Attribute = /* @__PURE__ */ function(_Namespace) {
        _inheritsLoose(Attribute2, _Namespace);
        function Attribute2(opts) {
          var _this;
          if (opts === void 0) {
            opts = {};
          }
          _this = _Namespace.call(this, handleDeprecatedContructorOpts(opts)) || this;
          _this.type = types$1.ATTRIBUTE;
          _this.raws = _this.raws || {};
          Object.defineProperty(_this.raws, "unquoted", {
            get: node$1(function() {
              return _this.value;
            }, "attr.raws.unquoted is deprecated. Call attr.value instead."),
            set: node$1(function() {
              return _this.value;
            }, "Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.")
          });
          _this._constructed = true;
          return _this;
        }
        var _proto = Attribute2.prototype;
        _proto.getQuotedValue = function getQuotedValue(options) {
          if (options === void 0) {
            options = {};
          }
          var quoteMark = this._determineQuoteMark(options);
          var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];
          var escaped = (0, _cssesc["default"])(this._value, cssescopts);
          return escaped;
        };
        _proto._determineQuoteMark = function _determineQuoteMark(options) {
          return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);
        };
        _proto.setValue = function setValue(value, options) {
          if (options === void 0) {
            options = {};
          }
          this._value = value;
          this._quoteMark = this._determineQuoteMark(options);
          this._syncRawValue();
        };
        _proto.smartQuoteMark = function smartQuoteMark(options) {
          var v = this.value;
          var numSingleQuotes = v.replace(/[^']/g, "").length;
          var numDoubleQuotes = v.replace(/[^"]/g, "").length;
          if (numSingleQuotes + numDoubleQuotes === 0) {
            var escaped = (0, _cssesc["default"])(v, {
              isIdentifier: true
            });
            if (escaped === v) {
              return Attribute2.NO_QUOTE;
            } else {
              var pref = this.preferredQuoteMark(options);
              if (pref === Attribute2.NO_QUOTE) {
                var quote = this.quoteMark || options.quoteMark || Attribute2.DOUBLE_QUOTE;
                var opts = CSSESC_QUOTE_OPTIONS[quote];
                var quoteValue = (0, _cssesc["default"])(v, opts);
                if (quoteValue.length < escaped.length) {
                  return quote;
                }
              }
              return pref;
            }
          } else if (numDoubleQuotes === numSingleQuotes) {
            return this.preferredQuoteMark(options);
          } else if (numDoubleQuotes < numSingleQuotes) {
            return Attribute2.DOUBLE_QUOTE;
          } else {
            return Attribute2.SINGLE_QUOTE;
          }
        };
        _proto.preferredQuoteMark = function preferredQuoteMark(options) {
          var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;
          if (quoteMark === void 0) {
            quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;
          }
          if (quoteMark === void 0) {
            quoteMark = Attribute2.DOUBLE_QUOTE;
          }
          return quoteMark;
        };
        _proto._syncRawValue = function _syncRawValue() {
          var rawValue = (0, _cssesc["default"])(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);
          if (rawValue === this._value) {
            if (this.raws) {
              delete this.raws.value;
            }
          } else {
            this.raws.value = rawValue;
          }
        };
        _proto._handleEscapes = function _handleEscapes(prop, value) {
          if (this._constructed) {
            var escaped = (0, _cssesc["default"])(value, {
              isIdentifier: true
            });
            if (escaped !== value) {
              this.raws[prop] = escaped;
            } else {
              delete this.raws[prop];
            }
          }
        };
        _proto._spacesFor = function _spacesFor(name) {
          var attrSpaces = {
            before: "",
            after: ""
          };
          var spaces = this.spaces[name] || {};
          var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};
          return Object.assign(attrSpaces, spaces, rawSpaces);
        };
        _proto._stringFor = function _stringFor(name, spaceName, concat2) {
          if (spaceName === void 0) {
            spaceName = name;
          }
          if (concat2 === void 0) {
            concat2 = defaultAttrConcat;
          }
          var attrSpaces = this._spacesFor(spaceName);
          return concat2(this.stringifyProperty(name), attrSpaces);
        };
        _proto.offsetOf = function offsetOf(name) {
          var count = 1;
          var attributeSpaces = this._spacesFor("attribute");
          count += attributeSpaces.before.length;
          if (name === "namespace" || name === "ns") {
            return this.namespace ? count : -1;
          }
          if (name === "attributeNS") {
            return count;
          }
          count += this.namespaceString.length;
          if (this.namespace) {
            count += 1;
          }
          if (name === "attribute") {
            return count;
          }
          count += this.stringifyProperty("attribute").length;
          count += attributeSpaces.after.length;
          var operatorSpaces = this._spacesFor("operator");
          count += operatorSpaces.before.length;
          var operator = this.stringifyProperty("operator");
          if (name === "operator") {
            return operator ? count : -1;
          }
          count += operator.length;
          count += operatorSpaces.after.length;
          var valueSpaces = this._spacesFor("value");
          count += valueSpaces.before.length;
          var value = this.stringifyProperty("value");
          if (name === "value") {
            return value ? count : -1;
          }
          count += value.length;
          count += valueSpaces.after.length;
          var insensitiveSpaces = this._spacesFor("insensitive");
          count += insensitiveSpaces.before.length;
          if (name === "insensitive") {
            return this.insensitive ? count : -1;
          }
          return -1;
        };
        _proto.toString = function toString6() {
          var _this2 = this;
          var selector2 = [this.rawSpaceBefore, "["];
          selector2.push(this._stringFor("qualifiedAttribute", "attribute"));
          if (this.operator && (this.value || this.value === "")) {
            selector2.push(this._stringFor("operator"));
            selector2.push(this._stringFor("value"));
            selector2.push(this._stringFor("insensitiveFlag", "insensitive", function(attrValue, attrSpaces) {
              if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {
                attrSpaces.before = " ";
              }
              return defaultAttrConcat(attrValue, attrSpaces);
            }));
          }
          selector2.push("]");
          selector2.push(this.rawSpaceAfter);
          return selector2.join("");
        };
        _createClass(Attribute2, [{
          key: "quoted",
          get: function get() {
            var qm = this.quoteMark;
            return qm === "'" || qm === '"';
          },
          set: function set(value) {
            warnOfDeprecatedQuotedAssignment();
          }
        }, {
          key: "quoteMark",
          get: function get() {
            return this._quoteMark;
          },
          set: function set(quoteMark) {
            if (!this._constructed) {
              this._quoteMark = quoteMark;
              return;
            }
            if (this._quoteMark !== quoteMark) {
              this._quoteMark = quoteMark;
              this._syncRawValue();
            }
          }
        }, {
          key: "qualifiedAttribute",
          get: function get() {
            return this.qualifiedName(this.raws.attribute || this.attribute);
          }
        }, {
          key: "insensitiveFlag",
          get: function get() {
            return this.insensitive ? "i" : "";
          }
        }, {
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(v) {
            if (this._constructed) {
              var _unescapeValue2 = unescapeValue(v), deprecatedUsage = _unescapeValue2.deprecatedUsage, unescaped = _unescapeValue2.unescaped, quoteMark = _unescapeValue2.quoteMark;
              if (deprecatedUsage) {
                warnOfDeprecatedValueAssignment();
              }
              if (unescaped === this._value && quoteMark === this._quoteMark) {
                return;
              }
              this._value = unescaped;
              this._quoteMark = quoteMark;
              this._syncRawValue();
            } else {
              this._value = v;
            }
          }
        }, {
          key: "attribute",
          get: function get() {
            return this._attribute;
          },
          set: function set(name) {
            this._handleEscapes("attribute", name);
            this._attribute = name;
          }
        }]);
        return Attribute2;
      }(_namespace["default"]);
      exports2["default"] = Attribute;
      Attribute.NO_QUOTE = null;
      Attribute.SINGLE_QUOTE = "'";
      Attribute.DOUBLE_QUOTE = '"';
      var CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = {
        "'": {
          quotes: "single",
          wrap: true
        },
        '"': {
          quotes: "double",
          wrap: true
        }
      }, _CSSESC_QUOTE_OPTIONS[null] = {
        isIdentifier: true
      }, _CSSESC_QUOTE_OPTIONS);
      function defaultAttrConcat(attrValue, attrSpaces) {
        return "" + attrSpaces.before + attrValue + attrSpaces.after;
      }
    });
    universal = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _namespace = _interopRequireDefault(namespace);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var Universal = /* @__PURE__ */ function(_Namespace) {
        _inheritsLoose(Universal2, _Namespace);
        function Universal2(opts) {
          var _this;
          _this = _Namespace.call(this, opts) || this;
          _this.type = types$1.UNIVERSAL;
          _this.value = "*";
          return _this;
        }
        return Universal2;
      }(_namespace["default"]);
      exports2["default"] = Universal;
      module2.exports = exports2.default;
    });
    combinator = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _node = _interopRequireDefault(node);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var Combinator = /* @__PURE__ */ function(_Node) {
        _inheritsLoose(Combinator2, _Node);
        function Combinator2(opts) {
          var _this;
          _this = _Node.call(this, opts) || this;
          _this.type = types$1.COMBINATOR;
          return _this;
        }
        return Combinator2;
      }(_node["default"]);
      exports2["default"] = Combinator;
      module2.exports = exports2.default;
    });
    nesting = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _node = _interopRequireDefault(node);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var Nesting = /* @__PURE__ */ function(_Node) {
        _inheritsLoose(Nesting2, _Node);
        function Nesting2(opts) {
          var _this;
          _this = _Node.call(this, opts) || this;
          _this.type = types$1.NESTING;
          _this.value = "&";
          return _this;
        }
        return Nesting2;
      }(_node["default"]);
      exports2["default"] = Nesting;
      module2.exports = exports2.default;
    });
    sortAscending_1 = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = sortAscending;
      function sortAscending(list2) {
        return list2.sort(function(a, b) {
          return a - b;
        });
      }
      module2.exports = exports2.default;
    });
    tokenTypes$1 = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2.combinator = exports2.word = exports2.comment = exports2.str = exports2.tab = exports2.newline = exports2.feed = exports2.cr = exports2.backslash = exports2.bang = exports2.slash = exports2.doubleQuote = exports2.singleQuote = exports2.space = exports2.greaterThan = exports2.pipe = exports2.equals = exports2.plus = exports2.caret = exports2.tilde = exports2.dollar = exports2.closeSquare = exports2.openSquare = exports2.closeParenthesis = exports2.openParenthesis = exports2.semicolon = exports2.colon = exports2.comma = exports2.at = exports2.asterisk = exports2.ampersand = void 0;
      var ampersand = 38;
      exports2.ampersand = ampersand;
      var asterisk = 42;
      exports2.asterisk = asterisk;
      var at = 64;
      exports2.at = at;
      var comma = 44;
      exports2.comma = comma;
      var colon = 58;
      exports2.colon = colon;
      var semicolon = 59;
      exports2.semicolon = semicolon;
      var openParenthesis = 40;
      exports2.openParenthesis = openParenthesis;
      var closeParenthesis = 41;
      exports2.closeParenthesis = closeParenthesis;
      var openSquare = 91;
      exports2.openSquare = openSquare;
      var closeSquare = 93;
      exports2.closeSquare = closeSquare;
      var dollar = 36;
      exports2.dollar = dollar;
      var tilde = 126;
      exports2.tilde = tilde;
      var caret = 94;
      exports2.caret = caret;
      var plus = 43;
      exports2.plus = plus;
      var equals2 = 61;
      exports2.equals = equals2;
      var pipe = 124;
      exports2.pipe = pipe;
      var greaterThan = 62;
      exports2.greaterThan = greaterThan;
      var space = 32;
      exports2.space = space;
      var singleQuote = 39;
      exports2.singleQuote = singleQuote;
      var doubleQuote = 34;
      exports2.doubleQuote = doubleQuote;
      var slash = 47;
      exports2.slash = slash;
      var bang = 33;
      exports2.bang = bang;
      var backslash = 92;
      exports2.backslash = backslash;
      var cr = 13;
      exports2.cr = cr;
      var feed = 12;
      exports2.feed = feed;
      var newline = 10;
      exports2.newline = newline;
      var tab = 9;
      exports2.tab = tab;
      var str = singleQuote;
      exports2.str = str;
      var comment2 = -1;
      exports2.comment = comment2;
      var word = -2;
      exports2.word = word;
      var combinator2 = -3;
      exports2.combinator = combinator2;
    });
    tokenize_1 = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = tokenize2;
      exports2.FIELDS = void 0;
      var t = _interopRequireWildcard(tokenTypes$1);
      var _unescapable, _wordDelimiters;
      function _getRequireWildcardCache() {
        if (typeof WeakMap !== "function")
          return null;
        var cache = /* @__PURE__ */ new WeakMap();
        _getRequireWildcardCache = function _getRequireWildcardCache2() {
          return cache;
        };
        return cache;
      }
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache();
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var unescapable = (_unescapable = {}, _unescapable[t.tab] = true, _unescapable[t.newline] = true, _unescapable[t.cr] = true, _unescapable[t.feed] = true, _unescapable);
      var wordDelimiters = (_wordDelimiters = {}, _wordDelimiters[t.space] = true, _wordDelimiters[t.tab] = true, _wordDelimiters[t.newline] = true, _wordDelimiters[t.cr] = true, _wordDelimiters[t.feed] = true, _wordDelimiters[t.ampersand] = true, _wordDelimiters[t.asterisk] = true, _wordDelimiters[t.bang] = true, _wordDelimiters[t.comma] = true, _wordDelimiters[t.colon] = true, _wordDelimiters[t.semicolon] = true, _wordDelimiters[t.openParenthesis] = true, _wordDelimiters[t.closeParenthesis] = true, _wordDelimiters[t.openSquare] = true, _wordDelimiters[t.closeSquare] = true, _wordDelimiters[t.singleQuote] = true, _wordDelimiters[t.doubleQuote] = true, _wordDelimiters[t.plus] = true, _wordDelimiters[t.pipe] = true, _wordDelimiters[t.tilde] = true, _wordDelimiters[t.greaterThan] = true, _wordDelimiters[t.equals] = true, _wordDelimiters[t.dollar] = true, _wordDelimiters[t.caret] = true, _wordDelimiters[t.slash] = true, _wordDelimiters);
      var hex = {};
      var hexChars = "0123456789abcdefABCDEF";
      for (var i = 0; i < hexChars.length; i++) {
        hex[hexChars.charCodeAt(i)] = true;
      }
      function consumeWord(css, start) {
        var next = start;
        var code;
        do {
          code = css.charCodeAt(next);
          if (wordDelimiters[code]) {
            return next - 1;
          } else if (code === t.backslash) {
            next = consumeEscape(css, next) + 1;
          } else {
            next++;
          }
        } while (next < css.length);
        return next - 1;
      }
      function consumeEscape(css, start) {
        var next = start;
        var code = css.charCodeAt(next + 1);
        if (unescapable[code])
          ;
        else if (hex[code]) {
          var hexDigits = 0;
          do {
            next++;
            hexDigits++;
            code = css.charCodeAt(next + 1);
          } while (hex[code] && hexDigits < 6);
          if (hexDigits < 6 && code === t.space) {
            next++;
          }
        } else {
          next++;
        }
        return next;
      }
      var FIELDS = {
        TYPE: 0,
        START_LINE: 1,
        START_COL: 2,
        END_LINE: 3,
        END_COL: 4,
        START_POS: 5,
        END_POS: 6
      };
      exports2.FIELDS = FIELDS;
      function tokenize2(input2) {
        var tokens = [];
        var css = input2.css.valueOf();
        var _css = css, length2 = _css.length;
        var offset = -1;
        var line = 1;
        var start = 0;
        var end = 0;
        var code, content, endColumn, endLine, escaped, escapePos, last2, lines, next, nextLine, nextOffset, quote, tokenType;
        function unclosed(what, fix) {
          if (input2.safe) {
            css += fix;
            next = css.length - 1;
          } else {
            throw input2.error("Unclosed " + what, line, start - offset, start);
          }
        }
        while (start < length2) {
          code = css.charCodeAt(start);
          if (code === t.newline) {
            offset = start;
            line += 1;
          }
          switch (code) {
            case t.space:
            case t.tab:
            case t.newline:
            case t.cr:
            case t.feed:
              next = start;
              do {
                next += 1;
                code = css.charCodeAt(next);
                if (code === t.newline) {
                  offset = next;
                  line += 1;
                }
              } while (code === t.space || code === t.newline || code === t.tab || code === t.cr || code === t.feed);
              tokenType = t.space;
              endLine = line;
              endColumn = next - offset - 1;
              end = next;
              break;
            case t.plus:
            case t.greaterThan:
            case t.tilde:
            case t.pipe:
              next = start;
              do {
                next += 1;
                code = css.charCodeAt(next);
              } while (code === t.plus || code === t.greaterThan || code === t.tilde || code === t.pipe);
              tokenType = t.combinator;
              endLine = line;
              endColumn = start - offset;
              end = next;
              break;
            case t.asterisk:
            case t.ampersand:
            case t.bang:
            case t.comma:
            case t.equals:
            case t.dollar:
            case t.caret:
            case t.openSquare:
            case t.closeSquare:
            case t.colon:
            case t.semicolon:
            case t.openParenthesis:
            case t.closeParenthesis:
              next = start;
              tokenType = code;
              endLine = line;
              endColumn = start - offset;
              end = next + 1;
              break;
            case t.singleQuote:
            case t.doubleQuote:
              quote = code === t.singleQuote ? "'" : '"';
              next = start;
              do {
                escaped = false;
                next = css.indexOf(quote, next + 1);
                if (next === -1) {
                  unclosed("quote", quote);
                }
                escapePos = next;
                while (css.charCodeAt(escapePos - 1) === t.backslash) {
                  escapePos -= 1;
                  escaped = !escaped;
                }
              } while (escaped);
              tokenType = t.str;
              endLine = line;
              endColumn = start - offset;
              end = next + 1;
              break;
            default:
              if (code === t.slash && css.charCodeAt(start + 1) === t.asterisk) {
                next = css.indexOf("*/", start + 2) + 1;
                if (next === 0) {
                  unclosed("comment", "*/");
                }
                content = css.slice(start, next + 1);
                lines = content.split("\n");
                last2 = lines.length - 1;
                if (last2 > 0) {
                  nextLine = line + last2;
                  nextOffset = next - lines[last2].length;
                } else {
                  nextLine = line;
                  nextOffset = offset;
                }
                tokenType = t.comment;
                line = nextLine;
                endLine = nextLine;
                endColumn = next - nextOffset;
              } else if (code === t.slash) {
                next = start;
                tokenType = code;
                endLine = line;
                endColumn = start - offset;
                end = next + 1;
              } else {
                next = consumeWord(css, start);
                tokenType = t.word;
                endLine = line;
                endColumn = next - offset;
              }
              end = next + 1;
              break;
          }
          tokens.push([
            tokenType,
            line,
            start - offset,
            endLine,
            endColumn,
            start,
            end
          ]);
          if (nextOffset) {
            offset = nextOffset;
            nextOffset = null;
          }
          start = end;
        }
        return tokens;
      }
    });
    parser$1 = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _root = _interopRequireDefault(root$1);
      var _selector = _interopRequireDefault(selector);
      var _className = _interopRequireDefault(className);
      var _comment = _interopRequireDefault(comment$1);
      var _id = _interopRequireDefault(id);
      var _tag = _interopRequireDefault(tag);
      var _string = _interopRequireDefault(string);
      var _pseudo = _interopRequireDefault(pseudo);
      var _attribute = _interopRequireWildcard(attribute);
      var _universal = _interopRequireDefault(universal);
      var _combinator = _interopRequireDefault(combinator);
      var _nesting = _interopRequireDefault(nesting);
      var _sortAscending = _interopRequireDefault(sortAscending_1);
      var _tokenize = _interopRequireWildcard(tokenize_1);
      var tokens = _interopRequireWildcard(tokenTypes$1);
      var types2 = _interopRequireWildcard(types$1);
      var _WHITESPACE_TOKENS, _Object$assign;
      function _getRequireWildcardCache() {
        if (typeof WeakMap !== "function")
          return null;
        var cache = /* @__PURE__ */ new WeakMap();
        _getRequireWildcardCache = function _getRequireWildcardCache2() {
          return cache;
        };
        return cache;
      }
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache();
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      var WHITESPACE_TOKENS = (_WHITESPACE_TOKENS = {}, _WHITESPACE_TOKENS[tokens.space] = true, _WHITESPACE_TOKENS[tokens.cr] = true, _WHITESPACE_TOKENS[tokens.feed] = true, _WHITESPACE_TOKENS[tokens.newline] = true, _WHITESPACE_TOKENS[tokens.tab] = true, _WHITESPACE_TOKENS);
      var WHITESPACE_EQUIV_TOKENS = Object.assign({}, WHITESPACE_TOKENS, (_Object$assign = {}, _Object$assign[tokens.comment] = true, _Object$assign));
      function tokenStart(token) {
        return {
          line: token[_tokenize.FIELDS.START_LINE],
          column: token[_tokenize.FIELDS.START_COL]
        };
      }
      function tokenEnd(token) {
        return {
          line: token[_tokenize.FIELDS.END_LINE],
          column: token[_tokenize.FIELDS.END_COL]
        };
      }
      function getSource2(startLine, startColumn, endLine, endColumn) {
        return {
          start: {
            line: startLine,
            column: startColumn
          },
          end: {
            line: endLine,
            column: endColumn
          }
        };
      }
      function getTokenSource(token) {
        return getSource2(token[_tokenize.FIELDS.START_LINE], token[_tokenize.FIELDS.START_COL], token[_tokenize.FIELDS.END_LINE], token[_tokenize.FIELDS.END_COL]);
      }
      function getTokenSourceSpan(startToken, endToken) {
        if (!startToken) {
          return void 0;
        }
        return getSource2(startToken[_tokenize.FIELDS.START_LINE], startToken[_tokenize.FIELDS.START_COL], endToken[_tokenize.FIELDS.END_LINE], endToken[_tokenize.FIELDS.END_COL]);
      }
      function unescapeProp(node2, prop) {
        var value = node2[prop];
        if (typeof value !== "string") {
          return;
        }
        if (value.indexOf("\\") !== -1) {
          (0, util$2.ensureObject)(node2, "raws");
          node2[prop] = (0, util$2.unesc)(value);
          if (node2.raws[prop] === void 0) {
            node2.raws[prop] = value;
          }
        }
        return node2;
      }
      function indexesOf(array, item) {
        var i = -1;
        var indexes = [];
        while ((i = array.indexOf(item, i + 1)) !== -1) {
          indexes.push(i);
        }
        return indexes;
      }
      function uniqs() {
        var list2 = Array.prototype.concat.apply([], arguments);
        return list2.filter(function(item, i) {
          return i === list2.indexOf(item);
        });
      }
      var Parser2 = /* @__PURE__ */ function() {
        function Parser3(rule2, options) {
          if (options === void 0) {
            options = {};
          }
          this.rule = rule2;
          this.options = Object.assign({
            lossy: false,
            safe: false
          }, options);
          this.position = 0;
          this.css = typeof this.rule === "string" ? this.rule : this.rule.selector;
          this.tokens = (0, _tokenize["default"])({
            css: this.css,
            error: this._errorGenerator(),
            safe: this.options.safe
          });
          var rootSource = getTokenSourceSpan(this.tokens[0], this.tokens[this.tokens.length - 1]);
          this.root = new _root["default"]({
            source: rootSource
          });
          this.root.errorGenerator = this._errorGenerator();
          var selector2 = new _selector["default"]({
            source: {
              start: {
                line: 1,
                column: 1
              }
            }
          });
          this.root.append(selector2);
          this.current = selector2;
          this.loop();
        }
        var _proto = Parser3.prototype;
        _proto._errorGenerator = function _errorGenerator() {
          var _this = this;
          return function(message, errorOptions) {
            if (typeof _this.rule === "string") {
              return new Error(message);
            }
            return _this.rule.error(message, errorOptions);
          };
        };
        _proto.attribute = function attribute2() {
          var attr = [];
          var startingToken = this.currToken;
          this.position++;
          while (this.position < this.tokens.length && this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {
            attr.push(this.currToken);
            this.position++;
          }
          if (this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {
            return this.expected("closing square bracket", this.currToken[_tokenize.FIELDS.START_POS]);
          }
          var len = attr.length;
          var node2 = {
            source: getSource2(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),
            sourceIndex: startingToken[_tokenize.FIELDS.START_POS]
          };
          if (len === 1 && !~[tokens.word].indexOf(attr[0][_tokenize.FIELDS.TYPE])) {
            return this.expected("attribute", attr[0][_tokenize.FIELDS.START_POS]);
          }
          var pos = 0;
          var spaceBefore = "";
          var commentBefore = "";
          var lastAdded = null;
          var spaceAfterMeaningfulToken = false;
          while (pos < len) {
            var token = attr[pos];
            var content = this.content(token);
            var next = attr[pos + 1];
            switch (token[_tokenize.FIELDS.TYPE]) {
              case tokens.space:
                spaceAfterMeaningfulToken = true;
                if (this.options.lossy) {
                  break;
                }
                if (lastAdded) {
                  (0, util$2.ensureObject)(node2, "spaces", lastAdded);
                  var prevContent = node2.spaces[lastAdded].after || "";
                  node2.spaces[lastAdded].after = prevContent + content;
                  var existingComment = (0, util$2.getProp)(node2, "raws", "spaces", lastAdded, "after") || null;
                  if (existingComment) {
                    node2.raws.spaces[lastAdded].after = existingComment + content;
                  }
                } else {
                  spaceBefore = spaceBefore + content;
                  commentBefore = commentBefore + content;
                }
                break;
              case tokens.asterisk:
                if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {
                  node2.operator = content;
                  lastAdded = "operator";
                } else if ((!node2.namespace || lastAdded === "namespace" && !spaceAfterMeaningfulToken) && next) {
                  if (spaceBefore) {
                    (0, util$2.ensureObject)(node2, "spaces", "attribute");
                    node2.spaces.attribute.before = spaceBefore;
                    spaceBefore = "";
                  }
                  if (commentBefore) {
                    (0, util$2.ensureObject)(node2, "raws", "spaces", "attribute");
                    node2.raws.spaces.attribute.before = spaceBefore;
                    commentBefore = "";
                  }
                  node2.namespace = (node2.namespace || "") + content;
                  var rawValue = (0, util$2.getProp)(node2, "raws", "namespace") || null;
                  if (rawValue) {
                    node2.raws.namespace += content;
                  }
                  lastAdded = "namespace";
                }
                spaceAfterMeaningfulToken = false;
                break;
              case tokens.dollar:
                if (lastAdded === "value") {
                  var oldRawValue = (0, util$2.getProp)(node2, "raws", "value");
                  node2.value += "$";
                  if (oldRawValue) {
                    node2.raws.value = oldRawValue + "$";
                  }
                  break;
                }
              case tokens.caret:
                if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {
                  node2.operator = content;
                  lastAdded = "operator";
                }
                spaceAfterMeaningfulToken = false;
                break;
              case tokens.combinator:
                if (content === "~" && next[_tokenize.FIELDS.TYPE] === tokens.equals) {
                  node2.operator = content;
                  lastAdded = "operator";
                }
                if (content !== "|") {
                  spaceAfterMeaningfulToken = false;
                  break;
                }
                if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {
                  node2.operator = content;
                  lastAdded = "operator";
                } else if (!node2.namespace && !node2.attribute) {
                  node2.namespace = true;
                }
                spaceAfterMeaningfulToken = false;
                break;
              case tokens.word:
                if (next && this.content(next) === "|" && attr[pos + 2] && attr[pos + 2][_tokenize.FIELDS.TYPE] !== tokens.equals && !node2.operator && !node2.namespace) {
                  node2.namespace = content;
                  lastAdded = "namespace";
                } else if (!node2.attribute || lastAdded === "attribute" && !spaceAfterMeaningfulToken) {
                  if (spaceBefore) {
                    (0, util$2.ensureObject)(node2, "spaces", "attribute");
                    node2.spaces.attribute.before = spaceBefore;
                    spaceBefore = "";
                  }
                  if (commentBefore) {
                    (0, util$2.ensureObject)(node2, "raws", "spaces", "attribute");
                    node2.raws.spaces.attribute.before = commentBefore;
                    commentBefore = "";
                  }
                  node2.attribute = (node2.attribute || "") + content;
                  var _rawValue = (0, util$2.getProp)(node2, "raws", "attribute") || null;
                  if (_rawValue) {
                    node2.raws.attribute += content;
                  }
                  lastAdded = "attribute";
                } else if (!node2.value && node2.value !== "" || lastAdded === "value" && !spaceAfterMeaningfulToken) {
                  var _unescaped = (0, util$2.unesc)(content);
                  var _oldRawValue = (0, util$2.getProp)(node2, "raws", "value") || "";
                  var oldValue = node2.value || "";
                  node2.value = oldValue + _unescaped;
                  node2.quoteMark = null;
                  if (_unescaped !== content || _oldRawValue) {
                    (0, util$2.ensureObject)(node2, "raws");
                    node2.raws.value = (_oldRawValue || oldValue) + content;
                  }
                  lastAdded = "value";
                } else {
                  var insensitive = content === "i" || content === "I";
                  if ((node2.value || node2.value === "") && (node2.quoteMark || spaceAfterMeaningfulToken)) {
                    node2.insensitive = insensitive;
                    if (!insensitive || content === "I") {
                      (0, util$2.ensureObject)(node2, "raws");
                      node2.raws.insensitiveFlag = content;
                    }
                    lastAdded = "insensitive";
                    if (spaceBefore) {
                      (0, util$2.ensureObject)(node2, "spaces", "insensitive");
                      node2.spaces.insensitive.before = spaceBefore;
                      spaceBefore = "";
                    }
                    if (commentBefore) {
                      (0, util$2.ensureObject)(node2, "raws", "spaces", "insensitive");
                      node2.raws.spaces.insensitive.before = commentBefore;
                      commentBefore = "";
                    }
                  } else if (node2.value || node2.value === "") {
                    lastAdded = "value";
                    node2.value += content;
                    if (node2.raws.value) {
                      node2.raws.value += content;
                    }
                  }
                }
                spaceAfterMeaningfulToken = false;
                break;
              case tokens.str:
                if (!node2.attribute || !node2.operator) {
                  return this.error("Expected an attribute followed by an operator preceding the string.", {
                    index: token[_tokenize.FIELDS.START_POS]
                  });
                }
                var _unescapeValue = (0, _attribute.unescapeValue)(content), unescaped = _unescapeValue.unescaped, quoteMark = _unescapeValue.quoteMark;
                node2.value = unescaped;
                node2.quoteMark = quoteMark;
                lastAdded = "value";
                (0, util$2.ensureObject)(node2, "raws");
                node2.raws.value = content;
                spaceAfterMeaningfulToken = false;
                break;
              case tokens.equals:
                if (!node2.attribute) {
                  return this.expected("attribute", token[_tokenize.FIELDS.START_POS], content);
                }
                if (node2.value) {
                  return this.error('Unexpected "=" found; an operator was already defined.', {
                    index: token[_tokenize.FIELDS.START_POS]
                  });
                }
                node2.operator = node2.operator ? node2.operator + content : content;
                lastAdded = "operator";
                spaceAfterMeaningfulToken = false;
                break;
              case tokens.comment:
                if (lastAdded) {
                  if (spaceAfterMeaningfulToken || next && next[_tokenize.FIELDS.TYPE] === tokens.space || lastAdded === "insensitive") {
                    var lastComment = (0, util$2.getProp)(node2, "spaces", lastAdded, "after") || "";
                    var rawLastComment = (0, util$2.getProp)(node2, "raws", "spaces", lastAdded, "after") || lastComment;
                    (0, util$2.ensureObject)(node2, "raws", "spaces", lastAdded);
                    node2.raws.spaces[lastAdded].after = rawLastComment + content;
                  } else {
                    var lastValue = node2[lastAdded] || "";
                    var rawLastValue = (0, util$2.getProp)(node2, "raws", lastAdded) || lastValue;
                    (0, util$2.ensureObject)(node2, "raws");
                    node2.raws[lastAdded] = rawLastValue + content;
                  }
                } else {
                  commentBefore = commentBefore + content;
                }
                break;
              default:
                return this.error('Unexpected "' + content + '" found.', {
                  index: token[_tokenize.FIELDS.START_POS]
                });
            }
            pos++;
          }
          unescapeProp(node2, "attribute");
          unescapeProp(node2, "namespace");
          this.newNode(new _attribute["default"](node2));
          this.position++;
        };
        _proto.parseWhitespaceEquivalentTokens = function parseWhitespaceEquivalentTokens(stopPosition) {
          if (stopPosition < 0) {
            stopPosition = this.tokens.length;
          }
          var startPosition = this.position;
          var nodes = [];
          var space = "";
          var lastComment = void 0;
          do {
            if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {
              if (!this.options.lossy) {
                space += this.content();
              }
            } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.comment) {
              var spaces = {};
              if (space) {
                spaces.before = space;
                space = "";
              }
              lastComment = new _comment["default"]({
                value: this.content(),
                source: getTokenSource(this.currToken),
                sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],
                spaces
              });
              nodes.push(lastComment);
            }
          } while (++this.position < stopPosition);
          if (space) {
            if (lastComment) {
              lastComment.spaces.after = space;
            } else if (!this.options.lossy) {
              var firstToken = this.tokens[startPosition];
              var lastToken = this.tokens[this.position - 1];
              nodes.push(new _string["default"]({
                value: "",
                source: getSource2(firstToken[_tokenize.FIELDS.START_LINE], firstToken[_tokenize.FIELDS.START_COL], lastToken[_tokenize.FIELDS.END_LINE], lastToken[_tokenize.FIELDS.END_COL]),
                sourceIndex: firstToken[_tokenize.FIELDS.START_POS],
                spaces: {
                  before: space,
                  after: ""
                }
              }));
            }
          }
          return nodes;
        };
        _proto.convertWhitespaceNodesToSpace = function convertWhitespaceNodesToSpace(nodes, requiredSpace) {
          var _this2 = this;
          if (requiredSpace === void 0) {
            requiredSpace = false;
          }
          var space = "";
          var rawSpace = "";
          nodes.forEach(function(n2) {
            var spaceBefore = _this2.lossySpace(n2.spaces.before, requiredSpace);
            var rawSpaceBefore = _this2.lossySpace(n2.rawSpaceBefore, requiredSpace);
            space += spaceBefore + _this2.lossySpace(n2.spaces.after, requiredSpace && spaceBefore.length === 0);
            rawSpace += spaceBefore + n2.value + _this2.lossySpace(n2.rawSpaceAfter, requiredSpace && rawSpaceBefore.length === 0);
          });
          if (rawSpace === space) {
            rawSpace = void 0;
          }
          var result2 = {
            space,
            rawSpace
          };
          return result2;
        };
        _proto.isNamedCombinator = function isNamedCombinator(position) {
          if (position === void 0) {
            position = this.position;
          }
          return this.tokens[position + 0] && this.tokens[position + 0][_tokenize.FIELDS.TYPE] === tokens.slash && this.tokens[position + 1] && this.tokens[position + 1][_tokenize.FIELDS.TYPE] === tokens.word && this.tokens[position + 2] && this.tokens[position + 2][_tokenize.FIELDS.TYPE] === tokens.slash;
        };
        _proto.namedCombinator = function namedCombinator() {
          if (this.isNamedCombinator()) {
            var nameRaw = this.content(this.tokens[this.position + 1]);
            var name = (0, util$2.unesc)(nameRaw).toLowerCase();
            var raws = {};
            if (name !== nameRaw) {
              raws.value = "/" + nameRaw + "/";
            }
            var node2 = new _combinator["default"]({
              value: "/" + name + "/",
              source: getSource2(this.currToken[_tokenize.FIELDS.START_LINE], this.currToken[_tokenize.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize.FIELDS.END_COL]),
              sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],
              raws
            });
            this.position = this.position + 3;
            return node2;
          } else {
            this.unexpected();
          }
        };
        _proto.combinator = function combinator2() {
          var _this3 = this;
          if (this.content() === "|") {
            return this.namespace();
          }
          var nextSigTokenPos = this.locateNextMeaningfulToken(this.position);
          if (nextSigTokenPos < 0 || this.tokens[nextSigTokenPos][_tokenize.FIELDS.TYPE] === tokens.comma) {
            var nodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);
            if (nodes.length > 0) {
              var last2 = this.current.last;
              if (last2) {
                var _this$convertWhitespa = this.convertWhitespaceNodesToSpace(nodes), space = _this$convertWhitespa.space, rawSpace = _this$convertWhitespa.rawSpace;
                if (rawSpace !== void 0) {
                  last2.rawSpaceAfter += rawSpace;
                }
                last2.spaces.after += space;
              } else {
                nodes.forEach(function(n2) {
                  return _this3.newNode(n2);
                });
              }
            }
            return;
          }
          var firstToken = this.currToken;
          var spaceOrDescendantSelectorNodes = void 0;
          if (nextSigTokenPos > this.position) {
            spaceOrDescendantSelectorNodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);
          }
          var node2;
          if (this.isNamedCombinator()) {
            node2 = this.namedCombinator();
          } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {
            node2 = new _combinator["default"]({
              value: this.content(),
              source: getTokenSource(this.currToken),
              sourceIndex: this.currToken[_tokenize.FIELDS.START_POS]
            });
            this.position++;
          } else if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]])
            ;
          else if (!spaceOrDescendantSelectorNodes) {
            this.unexpected();
          }
          if (node2) {
            if (spaceOrDescendantSelectorNodes) {
              var _this$convertWhitespa2 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes), _space = _this$convertWhitespa2.space, _rawSpace = _this$convertWhitespa2.rawSpace;
              node2.spaces.before = _space;
              node2.rawSpaceBefore = _rawSpace;
            }
          } else {
            var _this$convertWhitespa3 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes, true), _space2 = _this$convertWhitespa3.space, _rawSpace2 = _this$convertWhitespa3.rawSpace;
            if (!_rawSpace2) {
              _rawSpace2 = _space2;
            }
            var spaces = {};
            var raws = {
              spaces: {}
            };
            if (_space2.endsWith(" ") && _rawSpace2.endsWith(" ")) {
              spaces.before = _space2.slice(0, _space2.length - 1);
              raws.spaces.before = _rawSpace2.slice(0, _rawSpace2.length - 1);
            } else if (_space2.startsWith(" ") && _rawSpace2.startsWith(" ")) {
              spaces.after = _space2.slice(1);
              raws.spaces.after = _rawSpace2.slice(1);
            } else {
              raws.value = _rawSpace2;
            }
            node2 = new _combinator["default"]({
              value: " ",
              source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),
              sourceIndex: firstToken[_tokenize.FIELDS.START_POS],
              spaces,
              raws
            });
          }
          if (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.space) {
            node2.spaces.after = this.optionalSpace(this.content());
            this.position++;
          }
          return this.newNode(node2);
        };
        _proto.comma = function comma() {
          if (this.position === this.tokens.length - 1) {
            this.root.trailingComma = true;
            this.position++;
            return;
          }
          this.current._inferEndPosition();
          var selector2 = new _selector["default"]({
            source: {
              start: tokenStart(this.tokens[this.position + 1])
            }
          });
          this.current.parent.append(selector2);
          this.current = selector2;
          this.position++;
        };
        _proto.comment = function comment2() {
          var current = this.currToken;
          this.newNode(new _comment["default"]({
            value: this.content(),
            source: getTokenSource(current),
            sourceIndex: current[_tokenize.FIELDS.START_POS]
          }));
          this.position++;
        };
        _proto.error = function error2(message, opts) {
          throw this.root.error(message, opts);
        };
        _proto.missingBackslash = function missingBackslash() {
          return this.error("Expected a backslash preceding the semicolon.", {
            index: this.currToken[_tokenize.FIELDS.START_POS]
          });
        };
        _proto.missingParenthesis = function missingParenthesis() {
          return this.expected("opening parenthesis", this.currToken[_tokenize.FIELDS.START_POS]);
        };
        _proto.missingSquareBracket = function missingSquareBracket() {
          return this.expected("opening square bracket", this.currToken[_tokenize.FIELDS.START_POS]);
        };
        _proto.unexpected = function unexpected() {
          return this.error("Unexpected '" + this.content() + "'. Escaping special characters with \\ may help.", this.currToken[_tokenize.FIELDS.START_POS]);
        };
        _proto.namespace = function namespace2() {
          var before = this.prevToken && this.content(this.prevToken) || true;
          if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.word) {
            this.position++;
            return this.word(before);
          } else if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.asterisk) {
            this.position++;
            return this.universal(before);
          }
        };
        _proto.nesting = function nesting2() {
          if (this.nextToken) {
            var nextContent = this.content(this.nextToken);
            if (nextContent === "|") {
              this.position++;
              return;
            }
          }
          var current = this.currToken;
          this.newNode(new _nesting["default"]({
            value: this.content(),
            source: getTokenSource(current),
            sourceIndex: current[_tokenize.FIELDS.START_POS]
          }));
          this.position++;
        };
        _proto.parentheses = function parentheses() {
          var last2 = this.current.last;
          var unbalanced = 1;
          this.position++;
          if (last2 && last2.type === types2.PSEUDO) {
            var selector2 = new _selector["default"]({
              source: {
                start: tokenStart(this.tokens[this.position - 1])
              }
            });
            var cache = this.current;
            last2.append(selector2);
            this.current = selector2;
            while (this.position < this.tokens.length && unbalanced) {
              if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {
                unbalanced++;
              }
              if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {
                unbalanced--;
              }
              if (unbalanced) {
                this.parse();
              } else {
                this.current.source.end = tokenEnd(this.currToken);
                this.current.parent.source.end = tokenEnd(this.currToken);
                this.position++;
              }
            }
            this.current = cache;
          } else {
            var parenStart = this.currToken;
            var parenValue = "(";
            var parenEnd;
            while (this.position < this.tokens.length && unbalanced) {
              if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {
                unbalanced++;
              }
              if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {
                unbalanced--;
              }
              parenEnd = this.currToken;
              parenValue += this.parseParenthesisToken(this.currToken);
              this.position++;
            }
            if (last2) {
              last2.appendToPropertyAndEscape("value", parenValue, parenValue);
            } else {
              this.newNode(new _string["default"]({
                value: parenValue,
                source: getSource2(parenStart[_tokenize.FIELDS.START_LINE], parenStart[_tokenize.FIELDS.START_COL], parenEnd[_tokenize.FIELDS.END_LINE], parenEnd[_tokenize.FIELDS.END_COL]),
                sourceIndex: parenStart[_tokenize.FIELDS.START_POS]
              }));
            }
          }
          if (unbalanced) {
            return this.expected("closing parenthesis", this.currToken[_tokenize.FIELDS.START_POS]);
          }
        };
        _proto.pseudo = function pseudo2() {
          var _this4 = this;
          var pseudoStr = "";
          var startingToken = this.currToken;
          while (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.colon) {
            pseudoStr += this.content();
            this.position++;
          }
          if (!this.currToken) {
            return this.expected(["pseudo-class", "pseudo-element"], this.position - 1);
          }
          if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.word) {
            this.splitWord(false, function(first, length2) {
              pseudoStr += first;
              _this4.newNode(new _pseudo["default"]({
                value: pseudoStr,
                source: getTokenSourceSpan(startingToken, _this4.currToken),
                sourceIndex: startingToken[_tokenize.FIELDS.START_POS]
              }));
              if (length2 > 1 && _this4.nextToken && _this4.nextToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {
                _this4.error("Misplaced parenthesis.", {
                  index: _this4.nextToken[_tokenize.FIELDS.START_POS]
                });
              }
            });
          } else {
            return this.expected(["pseudo-class", "pseudo-element"], this.currToken[_tokenize.FIELDS.START_POS]);
          }
        };
        _proto.space = function space() {
          var content = this.content();
          if (this.position === 0 || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis || this.current.nodes.every(function(node2) {
            return node2.type === "comment";
          })) {
            this.spaces = this.optionalSpace(content);
            this.position++;
          } else if (this.position === this.tokens.length - 1 || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {
            this.current.last.spaces.after = this.optionalSpace(content);
            this.position++;
          } else {
            this.combinator();
          }
        };
        _proto.string = function string2() {
          var current = this.currToken;
          this.newNode(new _string["default"]({
            value: this.content(),
            source: getTokenSource(current),
            sourceIndex: current[_tokenize.FIELDS.START_POS]
          }));
          this.position++;
        };
        _proto.universal = function universal2(namespace2) {
          var nextToken = this.nextToken;
          if (nextToken && this.content(nextToken) === "|") {
            this.position++;
            return this.namespace();
          }
          var current = this.currToken;
          this.newNode(new _universal["default"]({
            value: this.content(),
            source: getTokenSource(current),
            sourceIndex: current[_tokenize.FIELDS.START_POS]
          }), namespace2);
          this.position++;
        };
        _proto.splitWord = function splitWord(namespace2, firstCallback) {
          var _this5 = this;
          var nextToken = this.nextToken;
          var word = this.content();
          while (nextToken && ~[tokens.dollar, tokens.caret, tokens.equals, tokens.word].indexOf(nextToken[_tokenize.FIELDS.TYPE])) {
            this.position++;
            var current = this.content();
            word += current;
            if (current.lastIndexOf("\\") === current.length - 1) {
              var next = this.nextToken;
              if (next && next[_tokenize.FIELDS.TYPE] === tokens.space) {
                word += this.requiredSpace(this.content(next));
                this.position++;
              }
            }
            nextToken = this.nextToken;
          }
          var hasClass = indexesOf(word, ".").filter(function(i) {
            var escapedDot = word[i - 1] === "\\";
            var isKeyframesPercent = /^\d+\.\d+%$/.test(word);
            return !escapedDot && !isKeyframesPercent;
          });
          var hasId = indexesOf(word, "#").filter(function(i) {
            return word[i - 1] !== "\\";
          });
          var interpolations = indexesOf(word, "#{");
          if (interpolations.length) {
            hasId = hasId.filter(function(hashIndex) {
              return !~interpolations.indexOf(hashIndex);
            });
          }
          var indices = (0, _sortAscending["default"])(uniqs([0].concat(hasClass, hasId)));
          indices.forEach(function(ind, i) {
            var index = indices[i + 1] || word.length;
            var value = word.slice(ind, index);
            if (i === 0 && firstCallback) {
              return firstCallback.call(_this5, value, indices.length);
            }
            var node2;
            var current2 = _this5.currToken;
            var sourceIndex = current2[_tokenize.FIELDS.START_POS] + indices[i];
            var source = getSource2(current2[1], current2[2] + ind, current2[3], current2[2] + (index - 1));
            if (~hasClass.indexOf(ind)) {
              var classNameOpts = {
                value: value.slice(1),
                source,
                sourceIndex
              };
              node2 = new _className["default"](unescapeProp(classNameOpts, "value"));
            } else if (~hasId.indexOf(ind)) {
              var idOpts = {
                value: value.slice(1),
                source,
                sourceIndex
              };
              node2 = new _id["default"](unescapeProp(idOpts, "value"));
            } else {
              var tagOpts = {
                value,
                source,
                sourceIndex
              };
              unescapeProp(tagOpts, "value");
              node2 = new _tag["default"](tagOpts);
            }
            _this5.newNode(node2, namespace2);
            namespace2 = null;
          });
          this.position++;
        };
        _proto.word = function word(namespace2) {
          var nextToken = this.nextToken;
          if (nextToken && this.content(nextToken) === "|") {
            this.position++;
            return this.namespace();
          }
          return this.splitWord(namespace2);
        };
        _proto.loop = function loop() {
          while (this.position < this.tokens.length) {
            this.parse(true);
          }
          this.current._inferEndPosition();
          return this.root;
        };
        _proto.parse = function parse2(throwOnParenthesis) {
          switch (this.currToken[_tokenize.FIELDS.TYPE]) {
            case tokens.space:
              this.space();
              break;
            case tokens.comment:
              this.comment();
              break;
            case tokens.openParenthesis:
              this.parentheses();
              break;
            case tokens.closeParenthesis:
              if (throwOnParenthesis) {
                this.missingParenthesis();
              }
              break;
            case tokens.openSquare:
              this.attribute();
              break;
            case tokens.dollar:
            case tokens.caret:
            case tokens.equals:
            case tokens.word:
              this.word();
              break;
            case tokens.colon:
              this.pseudo();
              break;
            case tokens.comma:
              this.comma();
              break;
            case tokens.asterisk:
              this.universal();
              break;
            case tokens.ampersand:
              this.nesting();
              break;
            case tokens.slash:
            case tokens.combinator:
              this.combinator();
              break;
            case tokens.str:
              this.string();
              break;
            case tokens.closeSquare:
              this.missingSquareBracket();
            case tokens.semicolon:
              this.missingBackslash();
            default:
              this.unexpected();
          }
        };
        _proto.expected = function expected(description, index, found) {
          if (Array.isArray(description)) {
            var last2 = description.pop();
            description = description.join(", ") + " or " + last2;
          }
          var an = /^[aeiou]/.test(description[0]) ? "an" : "a";
          if (!found) {
            return this.error("Expected " + an + " " + description + ".", {
              index
            });
          }
          return this.error("Expected " + an + " " + description + ', found "' + found + '" instead.', {
            index
          });
        };
        _proto.requiredSpace = function requiredSpace(space) {
          return this.options.lossy ? " " : space;
        };
        _proto.optionalSpace = function optionalSpace(space) {
          return this.options.lossy ? "" : space;
        };
        _proto.lossySpace = function lossySpace(space, required) {
          if (this.options.lossy) {
            return required ? " " : "";
          } else {
            return space;
          }
        };
        _proto.parseParenthesisToken = function parseParenthesisToken(token) {
          var content = this.content(token);
          if (token[_tokenize.FIELDS.TYPE] === tokens.space) {
            return this.requiredSpace(content);
          } else {
            return content;
          }
        };
        _proto.newNode = function newNode(node2, namespace2) {
          if (namespace2) {
            if (/^ +$/.test(namespace2)) {
              if (!this.options.lossy) {
                this.spaces = (this.spaces || "") + namespace2;
              }
              namespace2 = true;
            }
            node2.namespace = namespace2;
            unescapeProp(node2, "namespace");
          }
          if (this.spaces) {
            node2.spaces.before = this.spaces;
            this.spaces = "";
          }
          return this.current.append(node2);
        };
        _proto.content = function content(token) {
          if (token === void 0) {
            token = this.currToken;
          }
          return this.css.slice(token[_tokenize.FIELDS.START_POS], token[_tokenize.FIELDS.END_POS]);
        };
        _proto.locateNextMeaningfulToken = function locateNextMeaningfulToken(startPosition) {
          if (startPosition === void 0) {
            startPosition = this.position + 1;
          }
          var searchPosition = startPosition;
          while (searchPosition < this.tokens.length) {
            if (WHITESPACE_EQUIV_TOKENS[this.tokens[searchPosition][_tokenize.FIELDS.TYPE]]) {
              searchPosition++;
              continue;
            } else {
              return searchPosition;
            }
          }
          return -1;
        };
        _createClass(Parser3, [{
          key: "currToken",
          get: function get() {
            return this.tokens[this.position];
          }
        }, {
          key: "nextToken",
          get: function get() {
            return this.tokens[this.position + 1];
          }
        }, {
          key: "prevToken",
          get: function get() {
            return this.tokens[this.position - 1];
          }
        }]);
        return Parser3;
      }();
      exports2["default"] = Parser2;
      module2.exports = exports2.default;
    });
    processor$1 = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _parser = _interopRequireDefault(parser$1);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var Processor2 = /* @__PURE__ */ function() {
        function Processor3(func, options) {
          this.func = func || function noop2() {
          };
          this.funcRes = null;
          this.options = options;
        }
        var _proto = Processor3.prototype;
        _proto._shouldUpdateSelector = function _shouldUpdateSelector(rule2, options) {
          if (options === void 0) {
            options = {};
          }
          var merged = Object.assign({}, this.options, options);
          if (merged.updateSelector === false) {
            return false;
          } else {
            return typeof rule2 !== "string";
          }
        };
        _proto._isLossy = function _isLossy(options) {
          if (options === void 0) {
            options = {};
          }
          var merged = Object.assign({}, this.options, options);
          if (merged.lossless === false) {
            return true;
          } else {
            return false;
          }
        };
        _proto._root = function _root(rule2, options) {
          if (options === void 0) {
            options = {};
          }
          var parser2 = new _parser["default"](rule2, this._parseOptions(options));
          return parser2.root;
        };
        _proto._parseOptions = function _parseOptions(options) {
          return {
            lossy: this._isLossy(options)
          };
        };
        _proto._run = function _run(rule2, options) {
          var _this = this;
          if (options === void 0) {
            options = {};
          }
          return new Promise(function(resolve2, reject) {
            try {
              var root2 = _this._root(rule2, options);
              Promise.resolve(_this.func(root2)).then(function(transform2) {
                var string2 = void 0;
                if (_this._shouldUpdateSelector(rule2, options)) {
                  string2 = root2.toString();
                  rule2.selector = string2;
                }
                return {
                  transform: transform2,
                  root: root2,
                  string: string2
                };
              }).then(resolve2, reject);
            } catch (e) {
              reject(e);
              return;
            }
          });
        };
        _proto._runSync = function _runSync(rule2, options) {
          if (options === void 0) {
            options = {};
          }
          var root2 = this._root(rule2, options);
          var transform2 = this.func(root2);
          if (transform2 && typeof transform2.then === "function") {
            throw new Error("Selector processor returned a promise to a synchronous call.");
          }
          var string2 = void 0;
          if (options.updateSelector && typeof rule2 !== "string") {
            string2 = root2.toString();
            rule2.selector = string2;
          }
          return {
            transform: transform2,
            root: root2,
            string: string2
          };
        };
        _proto.ast = function ast(rule2, options) {
          return this._run(rule2, options).then(function(result2) {
            return result2.root;
          });
        };
        _proto.astSync = function astSync(rule2, options) {
          return this._runSync(rule2, options).root;
        };
        _proto.transform = function transform2(rule2, options) {
          return this._run(rule2, options).then(function(result2) {
            return result2.transform;
          });
        };
        _proto.transformSync = function transformSync(rule2, options) {
          return this._runSync(rule2, options).transform;
        };
        _proto.process = function process2(rule2, options) {
          return this._run(rule2, options).then(function(result2) {
            return result2.string || result2.root.toString();
          });
        };
        _proto.processSync = function processSync(rule2, options) {
          var result2 = this._runSync(rule2, options);
          return result2.string || result2.root.toString();
        };
        return Processor3;
      }();
      exports2["default"] = Processor2;
      module2.exports = exports2.default;
    });
    constructors = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2.universal = exports2.tag = exports2.string = exports2.selector = exports2.root = exports2.pseudo = exports2.nesting = exports2.id = exports2.comment = exports2.combinator = exports2.className = exports2.attribute = void 0;
      var _attribute = _interopRequireDefault(attribute);
      var _className = _interopRequireDefault(className);
      var _combinator = _interopRequireDefault(combinator);
      var _comment = _interopRequireDefault(comment$1);
      var _id = _interopRequireDefault(id);
      var _nesting = _interopRequireDefault(nesting);
      var _pseudo = _interopRequireDefault(pseudo);
      var _root = _interopRequireDefault(root$1);
      var _selector = _interopRequireDefault(selector);
      var _string = _interopRequireDefault(string);
      var _tag = _interopRequireDefault(tag);
      var _universal = _interopRequireDefault(universal);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var attribute$1 = function attribute2(opts) {
        return new _attribute["default"](opts);
      };
      exports2.attribute = attribute$1;
      var className$1 = function className2(opts) {
        return new _className["default"](opts);
      };
      exports2.className = className$1;
      var combinator$1 = function combinator2(opts) {
        return new _combinator["default"](opts);
      };
      exports2.combinator = combinator$1;
      var comment2 = function comment3(opts) {
        return new _comment["default"](opts);
      };
      exports2.comment = comment2;
      var id$1 = function id2(opts) {
        return new _id["default"](opts);
      };
      exports2.id = id$1;
      var nesting$1 = function nesting2(opts) {
        return new _nesting["default"](opts);
      };
      exports2.nesting = nesting$1;
      var pseudo$1 = function pseudo2(opts) {
        return new _pseudo["default"](opts);
      };
      exports2.pseudo = pseudo$1;
      var root2 = function root3(opts) {
        return new _root["default"](opts);
      };
      exports2.root = root2;
      var selector$1 = function selector2(opts) {
        return new _selector["default"](opts);
      };
      exports2.selector = selector$1;
      var string$1 = function string2(opts) {
        return new _string["default"](opts);
      };
      exports2.string = string$1;
      var tag$1 = function tag2(opts) {
        return new _tag["default"](opts);
      };
      exports2.tag = tag$1;
      var universal$1 = function universal2(opts) {
        return new _universal["default"](opts);
      };
      exports2.universal = universal$1;
    });
    guards = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2.isNode = isNode;
      exports2.isPseudoElement = isPseudoElement;
      exports2.isPseudoClass = isPseudoClass;
      exports2.isContainer = isContainer;
      exports2.isNamespace = isNamespace;
      exports2.isUniversal = exports2.isTag = exports2.isString = exports2.isSelector = exports2.isRoot = exports2.isPseudo = exports2.isNesting = exports2.isIdentifier = exports2.isComment = exports2.isCombinator = exports2.isClassName = exports2.isAttribute = void 0;
      var _IS_TYPE;
      var IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[types$1.ATTRIBUTE] = true, _IS_TYPE[types$1.CLASS] = true, _IS_TYPE[types$1.COMBINATOR] = true, _IS_TYPE[types$1.COMMENT] = true, _IS_TYPE[types$1.ID] = true, _IS_TYPE[types$1.NESTING] = true, _IS_TYPE[types$1.PSEUDO] = true, _IS_TYPE[types$1.ROOT] = true, _IS_TYPE[types$1.SELECTOR] = true, _IS_TYPE[types$1.STRING] = true, _IS_TYPE[types$1.TAG] = true, _IS_TYPE[types$1.UNIVERSAL] = true, _IS_TYPE);
      function isNode(node2) {
        return typeof node2 === "object" && IS_TYPE[node2.type];
      }
      function isNodeType(type, node2) {
        return isNode(node2) && node2.type === type;
      }
      var isAttribute = isNodeType.bind(null, types$1.ATTRIBUTE);
      exports2.isAttribute = isAttribute;
      var isClassName = isNodeType.bind(null, types$1.CLASS);
      exports2.isClassName = isClassName;
      var isCombinator = isNodeType.bind(null, types$1.COMBINATOR);
      exports2.isCombinator = isCombinator;
      var isComment = isNodeType.bind(null, types$1.COMMENT);
      exports2.isComment = isComment;
      var isIdentifier = isNodeType.bind(null, types$1.ID);
      exports2.isIdentifier = isIdentifier;
      var isNesting = isNodeType.bind(null, types$1.NESTING);
      exports2.isNesting = isNesting;
      var isPseudo = isNodeType.bind(null, types$1.PSEUDO);
      exports2.isPseudo = isPseudo;
      var isRoot = isNodeType.bind(null, types$1.ROOT);
      exports2.isRoot = isRoot;
      var isSelector = isNodeType.bind(null, types$1.SELECTOR);
      exports2.isSelector = isSelector;
      var isString2 = isNodeType.bind(null, types$1.STRING);
      exports2.isString = isString2;
      var isTag = isNodeType.bind(null, types$1.TAG);
      exports2.isTag = isTag;
      var isUniversal = isNodeType.bind(null, types$1.UNIVERSAL);
      exports2.isUniversal = isUniversal;
      function isPseudoElement(node2) {
        return isPseudo(node2) && node2.value && (node2.value.startsWith("::") || node2.value.toLowerCase() === ":before" || node2.value.toLowerCase() === ":after");
      }
      function isPseudoClass(node2) {
        return isPseudo(node2) && !isPseudoElement(node2);
      }
      function isContainer(node2) {
        return !!(isNode(node2) && node2.walk);
      }
      function isNamespace(node2) {
        return isAttribute(node2) || isTag(node2);
      }
    });
    selectors = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      Object.keys(types$1).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (key in exports2 && exports2[key] === types$1[key])
          return;
        exports2[key] = types$1[key];
      });
      Object.keys(constructors).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (key in exports2 && exports2[key] === constructors[key])
          return;
        exports2[key] = constructors[key];
      });
      Object.keys(guards).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (key in exports2 && exports2[key] === guards[key])
          return;
        exports2[key] = guards[key];
      });
    });
    dist = createCommonjsModule(function(module2, exports2) {
      exports2.__esModule = true;
      exports2["default"] = void 0;
      var _processor = _interopRequireDefault(processor$1);
      var selectors$1 = _interopRequireWildcard(selectors);
      function _getRequireWildcardCache() {
        if (typeof WeakMap !== "function")
          return null;
        var cache = /* @__PURE__ */ new WeakMap();
        _getRequireWildcardCache = function _getRequireWildcardCache2() {
          return cache;
        };
        return cache;
      }
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache();
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var parser2 = function parser3(processor2) {
        return new _processor["default"](processor2);
      };
      Object.assign(parser2, selectors$1);
      delete parser2.__esModule;
      var _default = parser2;
      exports2["default"] = _default;
      module2.exports = exports2.default;
    });
    selectorParser = /* @__PURE__ */ getDefaultExportFromCjs(dist);
    animationNameRE = /^(-\w+-)?animation-name$/;
    animationRE = /^(-\w+-)?animation$/;
    scopedPlugin = (id2 = "") => {
      const keyframes = /* @__PURE__ */ Object.create(null);
      const shortId = id2.replace(/^data-v-/, "");
      return {
        postcssPlugin: "vue-sfc-scoped",
        Rule(rule2) {
          processRule(id2, rule2);
        },
        AtRule(node2) {
          if (/-?keyframes$/.test(node2.name) && !node2.params.endsWith(`-${shortId}`)) {
            keyframes[node2.params] = node2.params = node2.params + "-" + shortId;
          }
        },
        OnceExit(root2) {
          if (Object.keys(keyframes).length) {
            root2.walkDecls((decl) => {
              if (animationNameRE.test(decl.prop)) {
                decl.value = decl.value.split(",").map((v) => keyframes[v.trim()] || v.trim()).join(",");
              }
              if (animationRE.test(decl.prop)) {
                decl.value = decl.value.split(",").map((v) => {
                  const vals = v.trim().split(/\s+/);
                  const i = vals.findIndex((val) => keyframes[val]);
                  if (i !== -1) {
                    vals.splice(i, 1, keyframes[vals[i]]);
                    return vals.join(" ");
                  } else {
                    return v;
                  }
                }).join(",");
              }
            });
          }
        }
      };
    };
    processedRules = /* @__PURE__ */ new WeakSet();
    scopedPlugin.postcss = true;
    SourceMapConsumer$7 = sourceMap.SourceMapConsumer;
    SourceMapGenerator$9 = sourceMap.SourceMapGenerator;
    mergeSourceMap = merge$1;
    scss = (source, map2, options, load = require) => {
      const nodeSass = load("sass");
      const finalOptions = Object.assign(Object.assign({}, options), { data: getSource(source, options.filename, options.additionalData), file: options.filename, outFile: options.filename, sourceMap: !!map2 });
      try {
        const result2 = nodeSass.renderSync(finalOptions);
        const dependencies = result2.stats.includedFiles;
        if (map2) {
          return {
            code: result2.css.toString(),
            map: mergeSourceMap(map2, JSON.parse(result2.map.toString())),
            errors: [],
            dependencies
          };
        }
        return { code: result2.css.toString(), errors: [], dependencies };
      } catch (e) {
        return { code: "", errors: [e], dependencies: [] };
      }
    };
    sass = (source, map2, options, load) => scss(source, map2, Object.assign(Object.assign({}, options), { indentedSyntax: true }), load);
    less = (source, map2, options, load = require) => {
      const nodeLess = load("less");
      let result2;
      let error2 = null;
      nodeLess.render(getSource(source, options.filename, options.additionalData), Object.assign(Object.assign({}, options), { syncImport: true }), (err, output) => {
        error2 = err;
        result2 = output;
      });
      if (error2)
        return { code: "", errors: [error2], dependencies: [] };
      const dependencies = result2.imports;
      if (map2) {
        return {
          code: result2.css.toString(),
          map: mergeSourceMap(map2, result2.map),
          errors: [],
          dependencies
        };
      }
      return {
        code: result2.css.toString(),
        errors: [],
        dependencies
      };
    };
    styl = (source, map2, options, load = require) => {
      const nodeStylus = load("stylus");
      try {
        const ref = nodeStylus(source);
        Object.keys(options).forEach((key) => ref.set(key, options[key]));
        if (map2)
          ref.set("sourcemap", { inline: false, comment: false });
        const result2 = ref.render();
        const dependencies = ref.deps();
        if (map2) {
          return {
            code: result2,
            map: mergeSourceMap(map2, ref.sourcemap),
            errors: [],
            dependencies
          };
        }
        return { code: result2, errors: [], dependencies };
      } catch (e) {
        return { code: "", errors: [e], dependencies: [] };
      }
    };
    processors = {
      less,
      sass,
      scss,
      styl,
      stylus: styl
    };
    walk$2 = walk$1;
  }
});

// ../../node_modules/.pnpm/@vue+reactivity@3.2.31/node_modules/@vue/reactivity/dist/reactivity.cjs.prod.js
var require_reactivity_cjs_prod = __commonJS({
  "../../node_modules/.pnpm/@vue+reactivity@3.2.31/node_modules/@vue/reactivity/dist/reactivity.cjs.prod.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var shared = require_shared();
    var activeEffectScope;
    var EffectScope = class {
      constructor(detached = false) {
        this.active = true;
        this.effects = [];
        this.cleanups = [];
        if (!detached && activeEffectScope) {
          this.parent = activeEffectScope;
          this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
        }
      }
      run(fn) {
        if (this.active) {
          try {
            activeEffectScope = this;
            return fn();
          } finally {
            activeEffectScope = this.parent;
          }
        }
      }
      on() {
        activeEffectScope = this;
      }
      off() {
        activeEffectScope = this.parent;
      }
      stop(fromParent) {
        if (this.active) {
          let i, l;
          for (i = 0, l = this.effects.length; i < l; i++) {
            this.effects[i].stop();
          }
          for (i = 0, l = this.cleanups.length; i < l; i++) {
            this.cleanups[i]();
          }
          if (this.scopes) {
            for (i = 0, l = this.scopes.length; i < l; i++) {
              this.scopes[i].stop(true);
            }
          }
          if (this.parent && !fromParent) {
            const last2 = this.parent.scopes.pop();
            if (last2 && last2 !== this) {
              this.parent.scopes[this.index] = last2;
              last2.index = this.index;
            }
          }
          this.active = false;
        }
      }
    };
    function effectScope(detached) {
      return new EffectScope(detached);
    }
    function recordEffectScope(effect2, scope = activeEffectScope) {
      if (scope && scope.active) {
        scope.effects.push(effect2);
      }
    }
    function getCurrentScope() {
      return activeEffectScope;
    }
    function onScopeDispose(fn) {
      if (activeEffectScope) {
        activeEffectScope.cleanups.push(fn);
      }
    }
    var createDep = (effects) => {
      const dep = new Set(effects);
      dep.w = 0;
      dep.n = 0;
      return dep;
    };
    var wasTracked = (dep) => (dep.w & trackOpBit) > 0;
    var newTracked = (dep) => (dep.n & trackOpBit) > 0;
    var initDepMarkers = ({ deps }) => {
      if (deps.length) {
        for (let i = 0; i < deps.length; i++) {
          deps[i].w |= trackOpBit;
        }
      }
    };
    var finalizeDepMarkers = (effect2) => {
      const { deps } = effect2;
      if (deps.length) {
        let ptr = 0;
        for (let i = 0; i < deps.length; i++) {
          const dep = deps[i];
          if (wasTracked(dep) && !newTracked(dep)) {
            dep.delete(effect2);
          } else {
            deps[ptr++] = dep;
          }
          dep.w &= ~trackOpBit;
          dep.n &= ~trackOpBit;
        }
        deps.length = ptr;
      }
    };
    var targetMap = /* @__PURE__ */ new WeakMap();
    var effectTrackDepth = 0;
    var trackOpBit = 1;
    var maxMarkerBits = 30;
    var activeEffect;
    var ITERATE_KEY = Symbol("");
    var MAP_KEY_ITERATE_KEY = Symbol("");
    var ReactiveEffect = class {
      constructor(fn, scheduler2 = null, scope) {
        this.fn = fn;
        this.scheduler = scheduler2;
        this.active = true;
        this.deps = [];
        this.parent = void 0;
        recordEffectScope(this, scope);
      }
      run() {
        if (!this.active) {
          return this.fn();
        }
        let parent = activeEffect;
        let lastShouldTrack = shouldTrack;
        while (parent) {
          if (parent === this) {
            return;
          }
          parent = parent.parent;
        }
        try {
          this.parent = activeEffect;
          activeEffect = this;
          shouldTrack = true;
          trackOpBit = 1 << ++effectTrackDepth;
          if (effectTrackDepth <= maxMarkerBits) {
            initDepMarkers(this);
          } else {
            cleanupEffect(this);
          }
          return this.fn();
        } finally {
          if (effectTrackDepth <= maxMarkerBits) {
            finalizeDepMarkers(this);
          }
          trackOpBit = 1 << --effectTrackDepth;
          activeEffect = this.parent;
          shouldTrack = lastShouldTrack;
          this.parent = void 0;
        }
      }
      stop() {
        if (this.active) {
          cleanupEffect(this);
          if (this.onStop) {
            this.onStop();
          }
          this.active = false;
        }
      }
    };
    function cleanupEffect(effect2) {
      const { deps } = effect2;
      if (deps.length) {
        for (let i = 0; i < deps.length; i++) {
          deps[i].delete(effect2);
        }
        deps.length = 0;
      }
    }
    function effect(fn, options) {
      if (fn.effect) {
        fn = fn.effect.fn;
      }
      const _effect = new ReactiveEffect(fn);
      if (options) {
        shared.extend(_effect, options);
        if (options.scope)
          recordEffectScope(_effect, options.scope);
      }
      if (!options || !options.lazy) {
        _effect.run();
      }
      const runner = _effect.run.bind(_effect);
      runner.effect = _effect;
      return runner;
    }
    function stop(runner) {
      runner.effect.stop();
    }
    var shouldTrack = true;
    var trackStack = [];
    function pauseTracking() {
      trackStack.push(shouldTrack);
      shouldTrack = false;
    }
    function enableTracking() {
      trackStack.push(shouldTrack);
      shouldTrack = true;
    }
    function resetTracking() {
      const last2 = trackStack.pop();
      shouldTrack = last2 === void 0 ? true : last2;
    }
    function track(target, type, key) {
      if (shouldTrack && activeEffect) {
        let depsMap = targetMap.get(target);
        if (!depsMap) {
          targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
        }
        let dep = depsMap.get(key);
        if (!dep) {
          depsMap.set(key, dep = createDep());
        }
        trackEffects(dep);
      }
    }
    function trackEffects(dep, debuggerEventExtraInfo) {
      let shouldTrack2 = false;
      if (effectTrackDepth <= maxMarkerBits) {
        if (!newTracked(dep)) {
          dep.n |= trackOpBit;
          shouldTrack2 = !wasTracked(dep);
        }
      } else {
        shouldTrack2 = !dep.has(activeEffect);
      }
      if (shouldTrack2) {
        dep.add(activeEffect);
        activeEffect.deps.push(dep);
      }
    }
    function trigger(target, type, key, newValue, oldValue, oldTarget) {
      const depsMap = targetMap.get(target);
      if (!depsMap) {
        return;
      }
      let deps = [];
      if (type === "clear") {
        deps = [...depsMap.values()];
      } else if (key === "length" && shared.isArray(target)) {
        depsMap.forEach((dep, key2) => {
          if (key2 === "length" || key2 >= newValue) {
            deps.push(dep);
          }
        });
      } else {
        if (key !== void 0) {
          deps.push(depsMap.get(key));
        }
        switch (type) {
          case "add":
            if (!shared.isArray(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
              if (shared.isMap(target)) {
                deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
              }
            } else if (shared.isIntegerKey(key)) {
              deps.push(depsMap.get("length"));
            }
            break;
          case "delete":
            if (!shared.isArray(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
              if (shared.isMap(target)) {
                deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
              }
            }
            break;
          case "set":
            if (shared.isMap(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
            }
            break;
        }
      }
      if (deps.length === 1) {
        if (deps[0]) {
          {
            triggerEffects(deps[0]);
          }
        }
      } else {
        const effects = [];
        for (const dep of deps) {
          if (dep) {
            effects.push(...dep);
          }
        }
        {
          triggerEffects(createDep(effects));
        }
      }
    }
    function triggerEffects(dep, debuggerEventExtraInfo) {
      for (const effect2 of shared.isArray(dep) ? dep : [...dep]) {
        if (effect2 !== activeEffect || effect2.allowRecurse) {
          if (effect2.scheduler) {
            effect2.scheduler();
          } else {
            effect2.run();
          }
        }
      }
    }
    var isNonTrackableKeys = /* @__PURE__ */ shared.makeMap(`__proto__,__v_isRef,__isVue`);
    var builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(shared.isSymbol));
    var get = /* @__PURE__ */ createGetter();
    var shallowGet = /* @__PURE__ */ createGetter(false, true);
    var readonlyGet = /* @__PURE__ */ createGetter(true);
    var shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);
    var arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
    function createArrayInstrumentations() {
      const instrumentations = {};
      ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
        instrumentations[key] = function(...args) {
          const arr = toRaw(this);
          for (let i = 0, l = this.length; i < l; i++) {
            track(arr, "get", i + "");
          }
          const res = arr[key](...args);
          if (res === -1 || res === false) {
            return arr[key](...args.map(toRaw));
          } else {
            return res;
          }
        };
      });
      ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
        instrumentations[key] = function(...args) {
          pauseTracking();
          const res = toRaw(this)[key].apply(this, args);
          resetTracking();
          return res;
        };
      });
      return instrumentations;
    }
    function createGetter(isReadonly2 = false, shallow = false) {
      return function get2(target, key, receiver) {
        if (key === "__v_isReactive") {
          return !isReadonly2;
        } else if (key === "__v_isReadonly") {
          return isReadonly2;
        } else if (key === "__v_isShallow") {
          return shallow;
        } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
          return target;
        }
        const targetIsArray = shared.isArray(target);
        if (!isReadonly2 && targetIsArray && shared.hasOwn(arrayInstrumentations, key)) {
          return Reflect.get(arrayInstrumentations, key, receiver);
        }
        const res = Reflect.get(target, key, receiver);
        if (shared.isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
          return res;
        }
        if (!isReadonly2) {
          track(target, "get", key);
        }
        if (shallow) {
          return res;
        }
        if (isRef(res)) {
          const shouldUnwrap = !targetIsArray || !shared.isIntegerKey(key);
          return shouldUnwrap ? res.value : res;
        }
        if (shared.isObject(res)) {
          return isReadonly2 ? readonly(res) : reactive(res);
        }
        return res;
      };
    }
    var set = /* @__PURE__ */ createSetter();
    var shallowSet = /* @__PURE__ */ createSetter(true);
    function createSetter(shallow = false) {
      return function set2(target, key, value, receiver) {
        let oldValue = target[key];
        if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) {
          return false;
        }
        if (!shallow && !isReadonly(value)) {
          if (!isShallow(value)) {
            value = toRaw(value);
            oldValue = toRaw(oldValue);
          }
          if (!shared.isArray(target) && isRef(oldValue) && !isRef(value)) {
            oldValue.value = value;
            return true;
          }
        }
        const hadKey = shared.isArray(target) && shared.isIntegerKey(key) ? Number(key) < target.length : shared.hasOwn(target, key);
        const result2 = Reflect.set(target, key, value, receiver);
        if (target === toRaw(receiver)) {
          if (!hadKey) {
            trigger(target, "add", key, value);
          } else if (shared.hasChanged(value, oldValue)) {
            trigger(target, "set", key, value);
          }
        }
        return result2;
      };
    }
    function deleteProperty(target, key) {
      const hadKey = shared.hasOwn(target, key);
      target[key];
      const result2 = Reflect.deleteProperty(target, key);
      if (result2 && hadKey) {
        trigger(target, "delete", key, void 0);
      }
      return result2;
    }
    function has3(target, key) {
      const result2 = Reflect.has(target, key);
      if (!shared.isSymbol(key) || !builtInSymbols.has(key)) {
        track(target, "has", key);
      }
      return result2;
    }
    function ownKeys(target) {
      track(target, "iterate", shared.isArray(target) ? "length" : ITERATE_KEY);
      return Reflect.ownKeys(target);
    }
    var mutableHandlers = {
      get,
      set,
      deleteProperty,
      has: has3,
      ownKeys
    };
    var readonlyHandlers = {
      get: readonlyGet,
      set(target, key) {
        return true;
      },
      deleteProperty(target, key) {
        return true;
      }
    };
    var shallowReactiveHandlers = /* @__PURE__ */ shared.extend({}, mutableHandlers, {
      get: shallowGet,
      set: shallowSet
    });
    var shallowReadonlyHandlers = /* @__PURE__ */ shared.extend({}, readonlyHandlers, {
      get: shallowReadonlyGet
    });
    var toShallow = (value) => value;
    var getProto = (v) => Reflect.getPrototypeOf(v);
    function get$1(target, key, isReadonly2 = false, isShallow2 = false) {
      target = target["__v_raw"];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key);
      if (key !== rawKey) {
        !isReadonly2 && track(rawTarget, "get", key);
      }
      !isReadonly2 && track(rawTarget, "get", rawKey);
      const { has: has4 } = getProto(rawTarget);
      const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
      if (has4.call(rawTarget, key)) {
        return wrap(target.get(key));
      } else if (has4.call(rawTarget, rawKey)) {
        return wrap(target.get(rawKey));
      } else if (target !== rawTarget) {
        target.get(key);
      }
    }
    function has$12(key, isReadonly2 = false) {
      const target = this["__v_raw"];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key);
      if (key !== rawKey) {
        !isReadonly2 && track(rawTarget, "has", key);
      }
      !isReadonly2 && track(rawTarget, "has", rawKey);
      return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
    }
    function size(target, isReadonly2 = false) {
      target = target["__v_raw"];
      !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
      return Reflect.get(target, "size", target);
    }
    function add2(value) {
      value = toRaw(value);
      const target = toRaw(this);
      const proto = getProto(target);
      const hadKey = proto.has.call(target, value);
      if (!hadKey) {
        target.add(value);
        trigger(target, "add", value, value);
      }
      return this;
    }
    function set$1(key, value) {
      value = toRaw(value);
      const target = toRaw(this);
      const { has: has4, get: get2 } = getProto(target);
      let hadKey = has4.call(target, key);
      if (!hadKey) {
        key = toRaw(key);
        hadKey = has4.call(target, key);
      }
      const oldValue = get2.call(target, key);
      target.set(key, value);
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (shared.hasChanged(value, oldValue)) {
        trigger(target, "set", key, value);
      }
      return this;
    }
    function deleteEntry(key) {
      const target = toRaw(this);
      const { has: has4, get: get2 } = getProto(target);
      let hadKey = has4.call(target, key);
      if (!hadKey) {
        key = toRaw(key);
        hadKey = has4.call(target, key);
      }
      get2 ? get2.call(target, key) : void 0;
      const result2 = target.delete(key);
      if (hadKey) {
        trigger(target, "delete", key, void 0);
      }
      return result2;
    }
    function clear() {
      const target = toRaw(this);
      const hadItems = target.size !== 0;
      const result2 = target.clear();
      if (hadItems) {
        trigger(target, "clear", void 0, void 0);
      }
      return result2;
    }
    function createForEach(isReadonly2, isShallow2) {
      return function forEach(callback, thisArg) {
        const observed = this;
        const target = observed["__v_raw"];
        const rawTarget = toRaw(target);
        const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
        !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
        return target.forEach((value, key) => {
          return callback.call(thisArg, wrap(value), wrap(key), observed);
        });
      };
    }
    function createIterableMethod(method, isReadonly2, isShallow2) {
      return function(...args) {
        const target = this["__v_raw"];
        const rawTarget = toRaw(target);
        const targetIsMap = shared.isMap(rawTarget);
        const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
        const isKeyOnly = method === "keys" && targetIsMap;
        const innerIterator = target[method](...args);
        const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
        !isReadonly2 && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
        return {
          next() {
            const { value, done } = innerIterator.next();
            return done ? { value, done } : {
              value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
              done
            };
          },
          [Symbol.iterator]() {
            return this;
          }
        };
      };
    }
    function createReadonlyMethod(type) {
      return function(...args) {
        return type === "delete" ? false : this;
      };
    }
    function createInstrumentations() {
      const mutableInstrumentations2 = {
        get(key) {
          return get$1(this, key);
        },
        get size() {
          return size(this);
        },
        has: has$12,
        add: add2,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, false)
      };
      const shallowInstrumentations2 = {
        get(key) {
          return get$1(this, key, false, true);
        },
        get size() {
          return size(this);
        },
        has: has$12,
        add: add2,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, true)
      };
      const readonlyInstrumentations2 = {
        get(key) {
          return get$1(this, key, true);
        },
        get size() {
          return size(this, true);
        },
        has(key) {
          return has$12.call(this, key, true);
        },
        add: createReadonlyMethod("add"),
        set: createReadonlyMethod("set"),
        delete: createReadonlyMethod("delete"),
        clear: createReadonlyMethod("clear"),
        forEach: createForEach(true, false)
      };
      const shallowReadonlyInstrumentations2 = {
        get(key) {
          return get$1(this, key, true, true);
        },
        get size() {
          return size(this, true);
        },
        has(key) {
          return has$12.call(this, key, true);
        },
        add: createReadonlyMethod("add"),
        set: createReadonlyMethod("set"),
        delete: createReadonlyMethod("delete"),
        clear: createReadonlyMethod("clear"),
        forEach: createForEach(true, true)
      };
      const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
      iteratorMethods.forEach((method) => {
        mutableInstrumentations2[method] = createIterableMethod(method, false, false);
        readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
        shallowInstrumentations2[method] = createIterableMethod(method, false, true);
        shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);
      });
      return [
        mutableInstrumentations2,
        readonlyInstrumentations2,
        shallowInstrumentations2,
        shallowReadonlyInstrumentations2
      ];
    }
    var [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();
    function createInstrumentationGetter(isReadonly2, shallow) {
      const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
      return (target, key, receiver) => {
        if (key === "__v_isReactive") {
          return !isReadonly2;
        } else if (key === "__v_isReadonly") {
          return isReadonly2;
        } else if (key === "__v_raw") {
          return target;
        }
        return Reflect.get(shared.hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
      };
    }
    var mutableCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(false, false)
    };
    var shallowCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(false, true)
    };
    var readonlyCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(true, false)
    };
    var shallowReadonlyCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(true, true)
    };
    var reactiveMap = /* @__PURE__ */ new WeakMap();
    var shallowReactiveMap = /* @__PURE__ */ new WeakMap();
    var readonlyMap = /* @__PURE__ */ new WeakMap();
    var shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
    function targetTypeMap(rawType) {
      switch (rawType) {
        case "Object":
        case "Array":
          return 1;
        case "Map":
        case "Set":
        case "WeakMap":
        case "WeakSet":
          return 2;
        default:
          return 0;
      }
    }
    function getTargetType(value) {
      return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(shared.toRawType(value));
    }
    function reactive(target) {
      if (isReadonly(target)) {
        return target;
      }
      return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
    }
    function shallowReactive(target) {
      return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
    }
    function readonly(target) {
      return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
    }
    function shallowReadonly(target) {
      return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
    }
    function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
      if (!shared.isObject(target)) {
        return target;
      }
      if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
        return target;
      }
      const existingProxy = proxyMap.get(target);
      if (existingProxy) {
        return existingProxy;
      }
      const targetType = getTargetType(target);
      if (targetType === 0) {
        return target;
      }
      const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
      proxyMap.set(target, proxy);
      return proxy;
    }
    function isReactive(value) {
      if (isReadonly(value)) {
        return isReactive(value["__v_raw"]);
      }
      return !!(value && value["__v_isReactive"]);
    }
    function isReadonly(value) {
      return !!(value && value["__v_isReadonly"]);
    }
    function isShallow(value) {
      return !!(value && value["__v_isShallow"]);
    }
    function isProxy(value) {
      return isReactive(value) || isReadonly(value);
    }
    function toRaw(observed) {
      const raw = observed && observed["__v_raw"];
      return raw ? toRaw(raw) : observed;
    }
    function markRaw(value) {
      shared.def(value, "__v_skip", true);
      return value;
    }
    var toReactive = (value) => shared.isObject(value) ? reactive(value) : value;
    var toReadonly = (value) => shared.isObject(value) ? readonly(value) : value;
    function trackRefValue(ref2) {
      if (shouldTrack && activeEffect) {
        ref2 = toRaw(ref2);
        {
          trackEffects(ref2.dep || (ref2.dep = createDep()));
        }
      }
    }
    function triggerRefValue(ref2, newVal) {
      ref2 = toRaw(ref2);
      if (ref2.dep) {
        {
          triggerEffects(ref2.dep);
        }
      }
    }
    function isRef(r) {
      return !!(r && r.__v_isRef === true);
    }
    function ref(value) {
      return createRef(value, false);
    }
    function shallowRef(value) {
      return createRef(value, true);
    }
    function createRef(rawValue, shallow) {
      if (isRef(rawValue)) {
        return rawValue;
      }
      return new RefImpl(rawValue, shallow);
    }
    var RefImpl = class {
      constructor(value, __v_isShallow) {
        this.__v_isShallow = __v_isShallow;
        this.dep = void 0;
        this.__v_isRef = true;
        this._rawValue = __v_isShallow ? value : toRaw(value);
        this._value = __v_isShallow ? value : toReactive(value);
      }
      get value() {
        trackRefValue(this);
        return this._value;
      }
      set value(newVal) {
        newVal = this.__v_isShallow ? newVal : toRaw(newVal);
        if (shared.hasChanged(newVal, this._rawValue)) {
          this._rawValue = newVal;
          this._value = this.__v_isShallow ? newVal : toReactive(newVal);
          triggerRefValue(this);
        }
      }
    };
    function triggerRef(ref2) {
      triggerRefValue(ref2);
    }
    function unref(ref2) {
      return isRef(ref2) ? ref2.value : ref2;
    }
    var shallowUnwrapHandlers = {
      get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
      set: (target, key, value, receiver) => {
        const oldValue = target[key];
        if (isRef(oldValue) && !isRef(value)) {
          oldValue.value = value;
          return true;
        } else {
          return Reflect.set(target, key, value, receiver);
        }
      }
    };
    function proxyRefs(objectWithRefs) {
      return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
    }
    var CustomRefImpl = class {
      constructor(factory) {
        this.dep = void 0;
        this.__v_isRef = true;
        const { get: get2, set: set2 } = factory(() => trackRefValue(this), () => triggerRefValue(this));
        this._get = get2;
        this._set = set2;
      }
      get value() {
        return this._get();
      }
      set value(newVal) {
        this._set(newVal);
      }
    };
    function customRef(factory) {
      return new CustomRefImpl(factory);
    }
    function toRefs(object2) {
      const ret = shared.isArray(object2) ? new Array(object2.length) : {};
      for (const key in object2) {
        ret[key] = toRef(object2, key);
      }
      return ret;
    }
    var ObjectRefImpl = class {
      constructor(_object, _key, _defaultValue) {
        this._object = _object;
        this._key = _key;
        this._defaultValue = _defaultValue;
        this.__v_isRef = true;
      }
      get value() {
        const val = this._object[this._key];
        return val === void 0 ? this._defaultValue : val;
      }
      set value(newVal) {
        this._object[this._key] = newVal;
      }
    };
    function toRef(object2, key, defaultValue) {
      const val = object2[key];
      return isRef(val) ? val : new ObjectRefImpl(object2, key, defaultValue);
    }
    var ComputedRefImpl = class {
      constructor(getter, _setter, isReadonly2, isSSR) {
        this._setter = _setter;
        this.dep = void 0;
        this.__v_isRef = true;
        this._dirty = true;
        this.effect = new ReactiveEffect(getter, () => {
          if (!this._dirty) {
            this._dirty = true;
            triggerRefValue(this);
          }
        });
        this.effect.computed = this;
        this.effect.active = this._cacheable = !isSSR;
        this["__v_isReadonly"] = isReadonly2;
      }
      get value() {
        const self2 = toRaw(this);
        trackRefValue(self2);
        if (self2._dirty || !self2._cacheable) {
          self2._dirty = false;
          self2._value = self2.effect.run();
        }
        return self2._value;
      }
      set value(newValue) {
        this._setter(newValue);
      }
    };
    function computed(getterOrOptions, debugOptions, isSSR = false) {
      let getter;
      let setter;
      const onlyGetter = shared.isFunction(getterOrOptions);
      if (onlyGetter) {
        getter = getterOrOptions;
        setter = shared.NOOP;
      } else {
        getter = getterOrOptions.get;
        setter = getterOrOptions.set;
      }
      const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
      return cRef;
    }
    var _a;
    var tick = Promise.resolve();
    var queue2 = [];
    var queued = false;
    var scheduler = (fn) => {
      queue2.push(fn);
      if (!queued) {
        queued = true;
        tick.then(flush);
      }
    };
    var flush = () => {
      for (let i = 0; i < queue2.length; i++) {
        queue2[i]();
      }
      queue2.length = 0;
      queued = false;
    };
    var DeferredComputedRefImpl = class {
      constructor(getter) {
        this.dep = void 0;
        this._dirty = true;
        this.__v_isRef = true;
        this[_a] = true;
        let compareTarget;
        let hasCompareTarget = false;
        let scheduled = false;
        this.effect = new ReactiveEffect(getter, (computedTrigger) => {
          if (this.dep) {
            if (computedTrigger) {
              compareTarget = this._value;
              hasCompareTarget = true;
            } else if (!scheduled) {
              const valueToCompare = hasCompareTarget ? compareTarget : this._value;
              scheduled = true;
              hasCompareTarget = false;
              scheduler(() => {
                if (this.effect.active && this._get() !== valueToCompare) {
                  triggerRefValue(this);
                }
                scheduled = false;
              });
            }
            for (const e of this.dep) {
              if (e.computed instanceof DeferredComputedRefImpl) {
                e.scheduler(true);
              }
            }
          }
          this._dirty = true;
        });
        this.effect.computed = this;
      }
      _get() {
        if (this._dirty) {
          this._dirty = false;
          return this._value = this.effect.run();
        }
        return this._value;
      }
      get value() {
        trackRefValue(this);
        return toRaw(this)._get();
      }
    };
    _a = "__v_isReadonly";
    function deferredComputed(getter) {
      return new DeferredComputedRefImpl(getter);
    }
    exports2.EffectScope = EffectScope;
    exports2.ITERATE_KEY = ITERATE_KEY;
    exports2.ReactiveEffect = ReactiveEffect;
    exports2.computed = computed;
    exports2.customRef = customRef;
    exports2.deferredComputed = deferredComputed;
    exports2.effect = effect;
    exports2.effectScope = effectScope;
    exports2.enableTracking = enableTracking;
    exports2.getCurrentScope = getCurrentScope;
    exports2.isProxy = isProxy;
    exports2.isReactive = isReactive;
    exports2.isReadonly = isReadonly;
    exports2.isRef = isRef;
    exports2.isShallow = isShallow;
    exports2.markRaw = markRaw;
    exports2.onScopeDispose = onScopeDispose;
    exports2.pauseTracking = pauseTracking;
    exports2.proxyRefs = proxyRefs;
    exports2.reactive = reactive;
    exports2.readonly = readonly;
    exports2.ref = ref;
    exports2.resetTracking = resetTracking;
    exports2.shallowReactive = shallowReactive;
    exports2.shallowReadonly = shallowReadonly;
    exports2.shallowRef = shallowRef;
    exports2.stop = stop;
    exports2.toRaw = toRaw;
    exports2.toRef = toRef;
    exports2.toRefs = toRefs;
    exports2.track = track;
    exports2.trigger = trigger;
    exports2.triggerRef = triggerRef;
    exports2.unref = unref;
  }
});

// ../../node_modules/.pnpm/@vue+reactivity@3.2.31/node_modules/@vue/reactivity/dist/reactivity.cjs.js
var require_reactivity_cjs = __commonJS({
  "../../node_modules/.pnpm/@vue+reactivity@3.2.31/node_modules/@vue/reactivity/dist/reactivity.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var shared = require_shared();
    function warn2(msg, ...args) {
      console.warn(`[Vue warn] ${msg}`, ...args);
    }
    var activeEffectScope;
    var EffectScope = class {
      constructor(detached = false) {
        this.active = true;
        this.effects = [];
        this.cleanups = [];
        if (!detached && activeEffectScope) {
          this.parent = activeEffectScope;
          this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
        }
      }
      run(fn) {
        if (this.active) {
          try {
            activeEffectScope = this;
            return fn();
          } finally {
            activeEffectScope = this.parent;
          }
        } else {
          warn2(`cannot run an inactive effect scope.`);
        }
      }
      on() {
        activeEffectScope = this;
      }
      off() {
        activeEffectScope = this.parent;
      }
      stop(fromParent) {
        if (this.active) {
          let i, l;
          for (i = 0, l = this.effects.length; i < l; i++) {
            this.effects[i].stop();
          }
          for (i = 0, l = this.cleanups.length; i < l; i++) {
            this.cleanups[i]();
          }
          if (this.scopes) {
            for (i = 0, l = this.scopes.length; i < l; i++) {
              this.scopes[i].stop(true);
            }
          }
          if (this.parent && !fromParent) {
            const last2 = this.parent.scopes.pop();
            if (last2 && last2 !== this) {
              this.parent.scopes[this.index] = last2;
              last2.index = this.index;
            }
          }
          this.active = false;
        }
      }
    };
    function effectScope(detached) {
      return new EffectScope(detached);
    }
    function recordEffectScope(effect2, scope = activeEffectScope) {
      if (scope && scope.active) {
        scope.effects.push(effect2);
      }
    }
    function getCurrentScope() {
      return activeEffectScope;
    }
    function onScopeDispose(fn) {
      if (activeEffectScope) {
        activeEffectScope.cleanups.push(fn);
      } else {
        warn2(`onScopeDispose() is called when there is no active effect scope to be associated with.`);
      }
    }
    var createDep = (effects) => {
      const dep = new Set(effects);
      dep.w = 0;
      dep.n = 0;
      return dep;
    };
    var wasTracked = (dep) => (dep.w & trackOpBit) > 0;
    var newTracked = (dep) => (dep.n & trackOpBit) > 0;
    var initDepMarkers = ({ deps }) => {
      if (deps.length) {
        for (let i = 0; i < deps.length; i++) {
          deps[i].w |= trackOpBit;
        }
      }
    };
    var finalizeDepMarkers = (effect2) => {
      const { deps } = effect2;
      if (deps.length) {
        let ptr = 0;
        for (let i = 0; i < deps.length; i++) {
          const dep = deps[i];
          if (wasTracked(dep) && !newTracked(dep)) {
            dep.delete(effect2);
          } else {
            deps[ptr++] = dep;
          }
          dep.w &= ~trackOpBit;
          dep.n &= ~trackOpBit;
        }
        deps.length = ptr;
      }
    };
    var targetMap = /* @__PURE__ */ new WeakMap();
    var effectTrackDepth = 0;
    var trackOpBit = 1;
    var maxMarkerBits = 30;
    var activeEffect;
    var ITERATE_KEY = Symbol("iterate");
    var MAP_KEY_ITERATE_KEY = Symbol("Map key iterate");
    var ReactiveEffect = class {
      constructor(fn, scheduler2 = null, scope) {
        this.fn = fn;
        this.scheduler = scheduler2;
        this.active = true;
        this.deps = [];
        this.parent = void 0;
        recordEffectScope(this, scope);
      }
      run() {
        if (!this.active) {
          return this.fn();
        }
        let parent = activeEffect;
        let lastShouldTrack = shouldTrack;
        while (parent) {
          if (parent === this) {
            return;
          }
          parent = parent.parent;
        }
        try {
          this.parent = activeEffect;
          activeEffect = this;
          shouldTrack = true;
          trackOpBit = 1 << ++effectTrackDepth;
          if (effectTrackDepth <= maxMarkerBits) {
            initDepMarkers(this);
          } else {
            cleanupEffect(this);
          }
          return this.fn();
        } finally {
          if (effectTrackDepth <= maxMarkerBits) {
            finalizeDepMarkers(this);
          }
          trackOpBit = 1 << --effectTrackDepth;
          activeEffect = this.parent;
          shouldTrack = lastShouldTrack;
          this.parent = void 0;
        }
      }
      stop() {
        if (this.active) {
          cleanupEffect(this);
          if (this.onStop) {
            this.onStop();
          }
          this.active = false;
        }
      }
    };
    function cleanupEffect(effect2) {
      const { deps } = effect2;
      if (deps.length) {
        for (let i = 0; i < deps.length; i++) {
          deps[i].delete(effect2);
        }
        deps.length = 0;
      }
    }
    function effect(fn, options) {
      if (fn.effect) {
        fn = fn.effect.fn;
      }
      const _effect = new ReactiveEffect(fn);
      if (options) {
        shared.extend(_effect, options);
        if (options.scope)
          recordEffectScope(_effect, options.scope);
      }
      if (!options || !options.lazy) {
        _effect.run();
      }
      const runner = _effect.run.bind(_effect);
      runner.effect = _effect;
      return runner;
    }
    function stop(runner) {
      runner.effect.stop();
    }
    var shouldTrack = true;
    var trackStack = [];
    function pauseTracking() {
      trackStack.push(shouldTrack);
      shouldTrack = false;
    }
    function enableTracking() {
      trackStack.push(shouldTrack);
      shouldTrack = true;
    }
    function resetTracking() {
      const last2 = trackStack.pop();
      shouldTrack = last2 === void 0 ? true : last2;
    }
    function track(target, type, key) {
      if (shouldTrack && activeEffect) {
        let depsMap = targetMap.get(target);
        if (!depsMap) {
          targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
        }
        let dep = depsMap.get(key);
        if (!dep) {
          depsMap.set(key, dep = createDep());
        }
        const eventInfo = { effect: activeEffect, target, type, key };
        trackEffects(dep, eventInfo);
      }
    }
    function trackEffects(dep, debuggerEventExtraInfo) {
      let shouldTrack2 = false;
      if (effectTrackDepth <= maxMarkerBits) {
        if (!newTracked(dep)) {
          dep.n |= trackOpBit;
          shouldTrack2 = !wasTracked(dep);
        }
      } else {
        shouldTrack2 = !dep.has(activeEffect);
      }
      if (shouldTrack2) {
        dep.add(activeEffect);
        activeEffect.deps.push(dep);
        if (activeEffect.onTrack) {
          activeEffect.onTrack(Object.assign({
            effect: activeEffect
          }, debuggerEventExtraInfo));
        }
      }
    }
    function trigger(target, type, key, newValue, oldValue, oldTarget) {
      const depsMap = targetMap.get(target);
      if (!depsMap) {
        return;
      }
      let deps = [];
      if (type === "clear") {
        deps = [...depsMap.values()];
      } else if (key === "length" && shared.isArray(target)) {
        depsMap.forEach((dep, key2) => {
          if (key2 === "length" || key2 >= newValue) {
            deps.push(dep);
          }
        });
      } else {
        if (key !== void 0) {
          deps.push(depsMap.get(key));
        }
        switch (type) {
          case "add":
            if (!shared.isArray(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
              if (shared.isMap(target)) {
                deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
              }
            } else if (shared.isIntegerKey(key)) {
              deps.push(depsMap.get("length"));
            }
            break;
          case "delete":
            if (!shared.isArray(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
              if (shared.isMap(target)) {
                deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
              }
            }
            break;
          case "set":
            if (shared.isMap(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
            }
            break;
        }
      }
      const eventInfo = { target, type, key, newValue, oldValue, oldTarget };
      if (deps.length === 1) {
        if (deps[0]) {
          {
            triggerEffects(deps[0], eventInfo);
          }
        }
      } else {
        const effects = [];
        for (const dep of deps) {
          if (dep) {
            effects.push(...dep);
          }
        }
        {
          triggerEffects(createDep(effects), eventInfo);
        }
      }
    }
    function triggerEffects(dep, debuggerEventExtraInfo) {
      for (const effect2 of shared.isArray(dep) ? dep : [...dep]) {
        if (effect2 !== activeEffect || effect2.allowRecurse) {
          if (effect2.onTrigger) {
            effect2.onTrigger(shared.extend({ effect: effect2 }, debuggerEventExtraInfo));
          }
          if (effect2.scheduler) {
            effect2.scheduler();
          } else {
            effect2.run();
          }
        }
      }
    }
    var isNonTrackableKeys = /* @__PURE__ */ shared.makeMap(`__proto__,__v_isRef,__isVue`);
    var builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(shared.isSymbol));
    var get = /* @__PURE__ */ createGetter();
    var shallowGet = /* @__PURE__ */ createGetter(false, true);
    var readonlyGet = /* @__PURE__ */ createGetter(true);
    var shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);
    var arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
    function createArrayInstrumentations() {
      const instrumentations = {};
      ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
        instrumentations[key] = function(...args) {
          const arr = toRaw(this);
          for (let i = 0, l = this.length; i < l; i++) {
            track(arr, "get", i + "");
          }
          const res = arr[key](...args);
          if (res === -1 || res === false) {
            return arr[key](...args.map(toRaw));
          } else {
            return res;
          }
        };
      });
      ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
        instrumentations[key] = function(...args) {
          pauseTracking();
          const res = toRaw(this)[key].apply(this, args);
          resetTracking();
          return res;
        };
      });
      return instrumentations;
    }
    function createGetter(isReadonly2 = false, shallow = false) {
      return function get2(target, key, receiver) {
        if (key === "__v_isReactive") {
          return !isReadonly2;
        } else if (key === "__v_isReadonly") {
          return isReadonly2;
        } else if (key === "__v_isShallow") {
          return shallow;
        } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
          return target;
        }
        const targetIsArray = shared.isArray(target);
        if (!isReadonly2 && targetIsArray && shared.hasOwn(arrayInstrumentations, key)) {
          return Reflect.get(arrayInstrumentations, key, receiver);
        }
        const res = Reflect.get(target, key, receiver);
        if (shared.isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
          return res;
        }
        if (!isReadonly2) {
          track(target, "get", key);
        }
        if (shallow) {
          return res;
        }
        if (isRef(res)) {
          const shouldUnwrap = !targetIsArray || !shared.isIntegerKey(key);
          return shouldUnwrap ? res.value : res;
        }
        if (shared.isObject(res)) {
          return isReadonly2 ? readonly(res) : reactive(res);
        }
        return res;
      };
    }
    var set = /* @__PURE__ */ createSetter();
    var shallowSet = /* @__PURE__ */ createSetter(true);
    function createSetter(shallow = false) {
      return function set2(target, key, value, receiver) {
        let oldValue = target[key];
        if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) {
          return false;
        }
        if (!shallow && !isReadonly(value)) {
          if (!isShallow(value)) {
            value = toRaw(value);
            oldValue = toRaw(oldValue);
          }
          if (!shared.isArray(target) && isRef(oldValue) && !isRef(value)) {
            oldValue.value = value;
            return true;
          }
        }
        const hadKey = shared.isArray(target) && shared.isIntegerKey(key) ? Number(key) < target.length : shared.hasOwn(target, key);
        const result2 = Reflect.set(target, key, value, receiver);
        if (target === toRaw(receiver)) {
          if (!hadKey) {
            trigger(target, "add", key, value);
          } else if (shared.hasChanged(value, oldValue)) {
            trigger(target, "set", key, value, oldValue);
          }
        }
        return result2;
      };
    }
    function deleteProperty(target, key) {
      const hadKey = shared.hasOwn(target, key);
      const oldValue = target[key];
      const result2 = Reflect.deleteProperty(target, key);
      if (result2 && hadKey) {
        trigger(target, "delete", key, void 0, oldValue);
      }
      return result2;
    }
    function has3(target, key) {
      const result2 = Reflect.has(target, key);
      if (!shared.isSymbol(key) || !builtInSymbols.has(key)) {
        track(target, "has", key);
      }
      return result2;
    }
    function ownKeys(target) {
      track(target, "iterate", shared.isArray(target) ? "length" : ITERATE_KEY);
      return Reflect.ownKeys(target);
    }
    var mutableHandlers = {
      get,
      set,
      deleteProperty,
      has: has3,
      ownKeys
    };
    var readonlyHandlers = {
      get: readonlyGet,
      set(target, key) {
        {
          console.warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
        }
        return true;
      },
      deleteProperty(target, key) {
        {
          console.warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
        }
        return true;
      }
    };
    var shallowReactiveHandlers = /* @__PURE__ */ shared.extend({}, mutableHandlers, {
      get: shallowGet,
      set: shallowSet
    });
    var shallowReadonlyHandlers = /* @__PURE__ */ shared.extend({}, readonlyHandlers, {
      get: shallowReadonlyGet
    });
    var toShallow = (value) => value;
    var getProto = (v) => Reflect.getPrototypeOf(v);
    function get$1(target, key, isReadonly2 = false, isShallow2 = false) {
      target = target["__v_raw"];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key);
      if (key !== rawKey) {
        !isReadonly2 && track(rawTarget, "get", key);
      }
      !isReadonly2 && track(rawTarget, "get", rawKey);
      const { has: has4 } = getProto(rawTarget);
      const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
      if (has4.call(rawTarget, key)) {
        return wrap(target.get(key));
      } else if (has4.call(rawTarget, rawKey)) {
        return wrap(target.get(rawKey));
      } else if (target !== rawTarget) {
        target.get(key);
      }
    }
    function has$12(key, isReadonly2 = false) {
      const target = this["__v_raw"];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key);
      if (key !== rawKey) {
        !isReadonly2 && track(rawTarget, "has", key);
      }
      !isReadonly2 && track(rawTarget, "has", rawKey);
      return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
    }
    function size(target, isReadonly2 = false) {
      target = target["__v_raw"];
      !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
      return Reflect.get(target, "size", target);
    }
    function add2(value) {
      value = toRaw(value);
      const target = toRaw(this);
      const proto = getProto(target);
      const hadKey = proto.has.call(target, value);
      if (!hadKey) {
        target.add(value);
        trigger(target, "add", value, value);
      }
      return this;
    }
    function set$1(key, value) {
      value = toRaw(value);
      const target = toRaw(this);
      const { has: has4, get: get2 } = getProto(target);
      let hadKey = has4.call(target, key);
      if (!hadKey) {
        key = toRaw(key);
        hadKey = has4.call(target, key);
      } else {
        checkIdentityKeys(target, has4, key);
      }
      const oldValue = get2.call(target, key);
      target.set(key, value);
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (shared.hasChanged(value, oldValue)) {
        trigger(target, "set", key, value, oldValue);
      }
      return this;
    }
    function deleteEntry(key) {
      const target = toRaw(this);
      const { has: has4, get: get2 } = getProto(target);
      let hadKey = has4.call(target, key);
      if (!hadKey) {
        key = toRaw(key);
        hadKey = has4.call(target, key);
      } else {
        checkIdentityKeys(target, has4, key);
      }
      const oldValue = get2 ? get2.call(target, key) : void 0;
      const result2 = target.delete(key);
      if (hadKey) {
        trigger(target, "delete", key, void 0, oldValue);
      }
      return result2;
    }
    function clear() {
      const target = toRaw(this);
      const hadItems = target.size !== 0;
      const oldTarget = shared.isMap(target) ? new Map(target) : new Set(target);
      const result2 = target.clear();
      if (hadItems) {
        trigger(target, "clear", void 0, void 0, oldTarget);
      }
      return result2;
    }
    function createForEach(isReadonly2, isShallow2) {
      return function forEach(callback, thisArg) {
        const observed = this;
        const target = observed["__v_raw"];
        const rawTarget = toRaw(target);
        const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
        !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
        return target.forEach((value, key) => {
          return callback.call(thisArg, wrap(value), wrap(key), observed);
        });
      };
    }
    function createIterableMethod(method, isReadonly2, isShallow2) {
      return function(...args) {
        const target = this["__v_raw"];
        const rawTarget = toRaw(target);
        const targetIsMap = shared.isMap(rawTarget);
        const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
        const isKeyOnly = method === "keys" && targetIsMap;
        const innerIterator = target[method](...args);
        const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
        !isReadonly2 && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
        return {
          next() {
            const { value, done } = innerIterator.next();
            return done ? { value, done } : {
              value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
              done
            };
          },
          [Symbol.iterator]() {
            return this;
          }
        };
      };
    }
    function createReadonlyMethod(type) {
      return function(...args) {
        {
          const key = args[0] ? `on key "${args[0]}" ` : ``;
          console.warn(`${shared.capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));
        }
        return type === "delete" ? false : this;
      };
    }
    function createInstrumentations() {
      const mutableInstrumentations2 = {
        get(key) {
          return get$1(this, key);
        },
        get size() {
          return size(this);
        },
        has: has$12,
        add: add2,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, false)
      };
      const shallowInstrumentations2 = {
        get(key) {
          return get$1(this, key, false, true);
        },
        get size() {
          return size(this);
        },
        has: has$12,
        add: add2,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, true)
      };
      const readonlyInstrumentations2 = {
        get(key) {
          return get$1(this, key, true);
        },
        get size() {
          return size(this, true);
        },
        has(key) {
          return has$12.call(this, key, true);
        },
        add: createReadonlyMethod("add"),
        set: createReadonlyMethod("set"),
        delete: createReadonlyMethod("delete"),
        clear: createReadonlyMethod("clear"),
        forEach: createForEach(true, false)
      };
      const shallowReadonlyInstrumentations2 = {
        get(key) {
          return get$1(this, key, true, true);
        },
        get size() {
          return size(this, true);
        },
        has(key) {
          return has$12.call(this, key, true);
        },
        add: createReadonlyMethod("add"),
        set: createReadonlyMethod("set"),
        delete: createReadonlyMethod("delete"),
        clear: createReadonlyMethod("clear"),
        forEach: createForEach(true, true)
      };
      const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
      iteratorMethods.forEach((method) => {
        mutableInstrumentations2[method] = createIterableMethod(method, false, false);
        readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
        shallowInstrumentations2[method] = createIterableMethod(method, false, true);
        shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);
      });
      return [
        mutableInstrumentations2,
        readonlyInstrumentations2,
        shallowInstrumentations2,
        shallowReadonlyInstrumentations2
      ];
    }
    var [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();
    function createInstrumentationGetter(isReadonly2, shallow) {
      const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
      return (target, key, receiver) => {
        if (key === "__v_isReactive") {
          return !isReadonly2;
        } else if (key === "__v_isReadonly") {
          return isReadonly2;
        } else if (key === "__v_raw") {
          return target;
        }
        return Reflect.get(shared.hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
      };
    }
    var mutableCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(false, false)
    };
    var shallowCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(false, true)
    };
    var readonlyCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(true, false)
    };
    var shallowReadonlyCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(true, true)
    };
    function checkIdentityKeys(target, has4, key) {
      const rawKey = toRaw(key);
      if (rawKey !== key && has4.call(target, rawKey)) {
        const type = shared.toRawType(target);
        console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);
      }
    }
    var reactiveMap = /* @__PURE__ */ new WeakMap();
    var shallowReactiveMap = /* @__PURE__ */ new WeakMap();
    var readonlyMap = /* @__PURE__ */ new WeakMap();
    var shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
    function targetTypeMap(rawType) {
      switch (rawType) {
        case "Object":
        case "Array":
          return 1;
        case "Map":
        case "Set":
        case "WeakMap":
        case "WeakSet":
          return 2;
        default:
          return 0;
      }
    }
    function getTargetType(value) {
      return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(shared.toRawType(value));
    }
    function reactive(target) {
      if (isReadonly(target)) {
        return target;
      }
      return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
    }
    function shallowReactive(target) {
      return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
    }
    function readonly(target) {
      return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
    }
    function shallowReadonly(target) {
      return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
    }
    function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
      if (!shared.isObject(target)) {
        {
          console.warn(`value cannot be made reactive: ${String(target)}`);
        }
        return target;
      }
      if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
        return target;
      }
      const existingProxy = proxyMap.get(target);
      if (existingProxy) {
        return existingProxy;
      }
      const targetType = getTargetType(target);
      if (targetType === 0) {
        return target;
      }
      const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
      proxyMap.set(target, proxy);
      return proxy;
    }
    function isReactive(value) {
      if (isReadonly(value)) {
        return isReactive(value["__v_raw"]);
      }
      return !!(value && value["__v_isReactive"]);
    }
    function isReadonly(value) {
      return !!(value && value["__v_isReadonly"]);
    }
    function isShallow(value) {
      return !!(value && value["__v_isShallow"]);
    }
    function isProxy(value) {
      return isReactive(value) || isReadonly(value);
    }
    function toRaw(observed) {
      const raw = observed && observed["__v_raw"];
      return raw ? toRaw(raw) : observed;
    }
    function markRaw(value) {
      shared.def(value, "__v_skip", true);
      return value;
    }
    var toReactive = (value) => shared.isObject(value) ? reactive(value) : value;
    var toReadonly = (value) => shared.isObject(value) ? readonly(value) : value;
    function trackRefValue(ref2) {
      if (shouldTrack && activeEffect) {
        ref2 = toRaw(ref2);
        {
          trackEffects(ref2.dep || (ref2.dep = createDep()), {
            target: ref2,
            type: "get",
            key: "value"
          });
        }
      }
    }
    function triggerRefValue(ref2, newVal) {
      ref2 = toRaw(ref2);
      if (ref2.dep) {
        {
          triggerEffects(ref2.dep, {
            target: ref2,
            type: "set",
            key: "value",
            newValue: newVal
          });
        }
      }
    }
    function isRef(r) {
      return !!(r && r.__v_isRef === true);
    }
    function ref(value) {
      return createRef(value, false);
    }
    function shallowRef(value) {
      return createRef(value, true);
    }
    function createRef(rawValue, shallow) {
      if (isRef(rawValue)) {
        return rawValue;
      }
      return new RefImpl(rawValue, shallow);
    }
    var RefImpl = class {
      constructor(value, __v_isShallow) {
        this.__v_isShallow = __v_isShallow;
        this.dep = void 0;
        this.__v_isRef = true;
        this._rawValue = __v_isShallow ? value : toRaw(value);
        this._value = __v_isShallow ? value : toReactive(value);
      }
      get value() {
        trackRefValue(this);
        return this._value;
      }
      set value(newVal) {
        newVal = this.__v_isShallow ? newVal : toRaw(newVal);
        if (shared.hasChanged(newVal, this._rawValue)) {
          this._rawValue = newVal;
          this._value = this.__v_isShallow ? newVal : toReactive(newVal);
          triggerRefValue(this, newVal);
        }
      }
    };
    function triggerRef(ref2) {
      triggerRefValue(ref2, ref2.value);
    }
    function unref(ref2) {
      return isRef(ref2) ? ref2.value : ref2;
    }
    var shallowUnwrapHandlers = {
      get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
      set: (target, key, value, receiver) => {
        const oldValue = target[key];
        if (isRef(oldValue) && !isRef(value)) {
          oldValue.value = value;
          return true;
        } else {
          return Reflect.set(target, key, value, receiver);
        }
      }
    };
    function proxyRefs(objectWithRefs) {
      return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
    }
    var CustomRefImpl = class {
      constructor(factory) {
        this.dep = void 0;
        this.__v_isRef = true;
        const { get: get2, set: set2 } = factory(() => trackRefValue(this), () => triggerRefValue(this));
        this._get = get2;
        this._set = set2;
      }
      get value() {
        return this._get();
      }
      set value(newVal) {
        this._set(newVal);
      }
    };
    function customRef(factory) {
      return new CustomRefImpl(factory);
    }
    function toRefs(object2) {
      if (!isProxy(object2)) {
        console.warn(`toRefs() expects a reactive object but received a plain one.`);
      }
      const ret = shared.isArray(object2) ? new Array(object2.length) : {};
      for (const key in object2) {
        ret[key] = toRef(object2, key);
      }
      return ret;
    }
    var ObjectRefImpl = class {
      constructor(_object, _key, _defaultValue) {
        this._object = _object;
        this._key = _key;
        this._defaultValue = _defaultValue;
        this.__v_isRef = true;
      }
      get value() {
        const val = this._object[this._key];
        return val === void 0 ? this._defaultValue : val;
      }
      set value(newVal) {
        this._object[this._key] = newVal;
      }
    };
    function toRef(object2, key, defaultValue) {
      const val = object2[key];
      return isRef(val) ? val : new ObjectRefImpl(object2, key, defaultValue);
    }
    var ComputedRefImpl = class {
      constructor(getter, _setter, isReadonly2, isSSR) {
        this._setter = _setter;
        this.dep = void 0;
        this.__v_isRef = true;
        this._dirty = true;
        this.effect = new ReactiveEffect(getter, () => {
          if (!this._dirty) {
            this._dirty = true;
            triggerRefValue(this);
          }
        });
        this.effect.computed = this;
        this.effect.active = this._cacheable = !isSSR;
        this["__v_isReadonly"] = isReadonly2;
      }
      get value() {
        const self2 = toRaw(this);
        trackRefValue(self2);
        if (self2._dirty || !self2._cacheable) {
          self2._dirty = false;
          self2._value = self2.effect.run();
        }
        return self2._value;
      }
      set value(newValue) {
        this._setter(newValue);
      }
    };
    function computed(getterOrOptions, debugOptions, isSSR = false) {
      let getter;
      let setter;
      const onlyGetter = shared.isFunction(getterOrOptions);
      if (onlyGetter) {
        getter = getterOrOptions;
        setter = () => {
          console.warn("Write operation failed: computed value is readonly");
        };
      } else {
        getter = getterOrOptions.get;
        setter = getterOrOptions.set;
      }
      const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
      if (debugOptions && !isSSR) {
        cRef.effect.onTrack = debugOptions.onTrack;
        cRef.effect.onTrigger = debugOptions.onTrigger;
      }
      return cRef;
    }
    var _a;
    var tick = Promise.resolve();
    var queue2 = [];
    var queued = false;
    var scheduler = (fn) => {
      queue2.push(fn);
      if (!queued) {
        queued = true;
        tick.then(flush);
      }
    };
    var flush = () => {
      for (let i = 0; i < queue2.length; i++) {
        queue2[i]();
      }
      queue2.length = 0;
      queued = false;
    };
    var DeferredComputedRefImpl = class {
      constructor(getter) {
        this.dep = void 0;
        this._dirty = true;
        this.__v_isRef = true;
        this[_a] = true;
        let compareTarget;
        let hasCompareTarget = false;
        let scheduled = false;
        this.effect = new ReactiveEffect(getter, (computedTrigger) => {
          if (this.dep) {
            if (computedTrigger) {
              compareTarget = this._value;
              hasCompareTarget = true;
            } else if (!scheduled) {
              const valueToCompare = hasCompareTarget ? compareTarget : this._value;
              scheduled = true;
              hasCompareTarget = false;
              scheduler(() => {
                if (this.effect.active && this._get() !== valueToCompare) {
                  triggerRefValue(this);
                }
                scheduled = false;
              });
            }
            for (const e of this.dep) {
              if (e.computed instanceof DeferredComputedRefImpl) {
                e.scheduler(true);
              }
            }
          }
          this._dirty = true;
        });
        this.effect.computed = this;
      }
      _get() {
        if (this._dirty) {
          this._dirty = false;
          return this._value = this.effect.run();
        }
        return this._value;
      }
      get value() {
        trackRefValue(this);
        return toRaw(this)._get();
      }
    };
    _a = "__v_isReadonly";
    function deferredComputed(getter) {
      return new DeferredComputedRefImpl(getter);
    }
    exports2.EffectScope = EffectScope;
    exports2.ITERATE_KEY = ITERATE_KEY;
    exports2.ReactiveEffect = ReactiveEffect;
    exports2.computed = computed;
    exports2.customRef = customRef;
    exports2.deferredComputed = deferredComputed;
    exports2.effect = effect;
    exports2.effectScope = effectScope;
    exports2.enableTracking = enableTracking;
    exports2.getCurrentScope = getCurrentScope;
    exports2.isProxy = isProxy;
    exports2.isReactive = isReactive;
    exports2.isReadonly = isReadonly;
    exports2.isRef = isRef;
    exports2.isShallow = isShallow;
    exports2.markRaw = markRaw;
    exports2.onScopeDispose = onScopeDispose;
    exports2.pauseTracking = pauseTracking;
    exports2.proxyRefs = proxyRefs;
    exports2.reactive = reactive;
    exports2.readonly = readonly;
    exports2.ref = ref;
    exports2.resetTracking = resetTracking;
    exports2.shallowReactive = shallowReactive;
    exports2.shallowReadonly = shallowReadonly;
    exports2.shallowRef = shallowRef;
    exports2.stop = stop;
    exports2.toRaw = toRaw;
    exports2.toRef = toRef;
    exports2.toRefs = toRefs;
    exports2.track = track;
    exports2.trigger = trigger;
    exports2.triggerRef = triggerRef;
    exports2.unref = unref;
  }
});

// ../../node_modules/.pnpm/@vue+reactivity@3.2.31/node_modules/@vue/reactivity/index.js
var require_reactivity = __commonJS({
  "../../node_modules/.pnpm/@vue+reactivity@3.2.31/node_modules/@vue/reactivity/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_reactivity_cjs_prod();
    } else {
      module2.exports = require_reactivity_cjs();
    }
  }
});

// ../../packages/vue-typescript/out/use/useSfcCustomBlocks.js
var require_useSfcCustomBlocks = __commonJS({
  "../../packages/vue-typescript/out/use/useSfcCustomBlocks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.useSfcCustomBlocks = void 0;
    var reactivity_1 = require_reactivity();
    var SourceMaps = require_out();
    var sourceMaps_1 = require_sourceMaps();
    function useSfcCustomBlocks(fileName, customBlocks) {
      const files = (0, reactivity_1.computed)(() => {
        const _files = [];
        for (let i = 0; i < customBlocks.value.length; i++) {
          const customBlock = customBlocks.value[i];
          _files.push({
            fileName: fileName + "." + i + "." + customBlock.lang,
            lang: customBlock.lang,
            content: customBlock.content,
            capabilities: {
              diagnostics: true,
              foldingRanges: true,
              formatting: true,
              documentSymbol: true,
              codeActions: true,
              inlayHints: true
            },
            data: void 0,
            isTsHostFile: false
          });
        }
        return _files;
      });
      const embeddeds = (0, reactivity_1.computed)(() => {
        const _embeddeds = [];
        for (let i = 0; i < customBlocks.value.length && i < files.value.length; i++) {
          const file = files.value[i];
          const customBlock = customBlocks.value[i];
          const sourceMap2 = new sourceMaps_1.EmbeddedFileSourceMap();
          sourceMap2.mappings.push({
            data: {
              vueTag: "customBlock",
              vueTagIndex: i,
              capabilities: {
                basic: true,
                references: true,
                definitions: true,
                diagnostic: true,
                rename: true,
                completion: true,
                semanticTokens: true
              }
            },
            mode: SourceMaps.Mode.Offset,
            sourceRange: {
              start: customBlock.startTagEnd,
              end: customBlock.startTagEnd + customBlock.content.length
            },
            mappedRange: {
              start: 0,
              end: customBlock.content.length
            }
          });
          _embeddeds.push({ file, sourceMap: sourceMap2 });
        }
        return _embeddeds;
      });
      return {
        files,
        embeddeds
      };
    }
    exports2.useSfcCustomBlocks = useSfcCustomBlocks;
  }
});

// ../../packages/vue-typescript/out/use/useSfcScript.js
var require_useSfcScript = __commonJS({
  "../../packages/vue-typescript/out/use/useSfcScript.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.useSfcScript = void 0;
    var reactivity_1 = require_reactivity();
    var sourceMaps_1 = require_sourceMaps();
    var SourceMaps = require_out();
    function useSfcScript(fileName, script) {
      const file = (0, reactivity_1.computed)(() => {
        if (script.value) {
          const file2 = {
            fileName: fileName + ".__VLS_script.format." + script.value.lang,
            lang: script.value.lang,
            content: script.value.content,
            capabilities: {
              diagnostics: false,
              foldingRanges: true,
              formatting: true,
              documentSymbol: true,
              codeActions: false,
              inlayHints: false
            },
            data: void 0,
            isTsHostFile: false
          };
          return file2;
        }
      });
      const embedded = (0, reactivity_1.computed)(() => {
        if (script.value && file.value) {
          const sourceMap2 = new sourceMaps_1.EmbeddedFileSourceMap();
          sourceMap2.mappings.push({
            data: {
              vueTag: "script",
              capabilities: {}
            },
            mode: SourceMaps.Mode.Offset,
            sourceRange: {
              start: script.value.startTagEnd,
              end: script.value.startTagEnd + script.value.content.length
            },
            mappedRange: {
              start: 0,
              end: script.value.content.length
            }
          });
          return {
            file: file.value,
            sourceMap: sourceMap2
          };
        }
      });
      return {
        file,
        embedded
      };
    }
    exports2.useSfcScript = useSfcScript;
  }
});

// ../../packages/vue-typescript/out/utils/localTypes.js
var require_localTypes = __commonJS({
  "../../packages/vue-typescript/out/utils/localTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.genConstructorOverloads = exports2.getTypesCode = exports2.typesFileName = exports2.getSlotsPropertyName = exports2.getVueLibraryName = void 0;
    var camelCaseText = [
      "type CamelCase<S extends string> = S extends `${infer First}-${infer Right}`",
      "? Capitalize<Right> extends Right",
      "? `${First}-${CamelCase<Capitalize<Right>>}`",
      ": `${First}${CamelCase<Capitalize<Right>>}`",
      ": S"
    ].join("\n");
    function getVueLibraryName(isVue2) {
      return isVue2 ? "@vue/runtime-dom" : "vue";
    }
    exports2.getVueLibraryName = getVueLibraryName;
    function getSlotsPropertyName(isVue2) {
      return isVue2 ? "$scopedSlots" : "$slots";
    }
    exports2.getSlotsPropertyName = getSlotsPropertyName;
    exports2.typesFileName = "__VLS_types.ts";
    function getTypesCode(isVue2) {
      const libName = getVueLibraryName(isVue2);
      const slots = getSlotsPropertyName(isVue2);
      return `
import * as vue from '${libName}';
import type {
	FunctionalComponent,
	HTMLAttributes,
	VNodeProps,
	AllowedComponentProps,
	EmitsOptions,
	DefineComponent,
	SetupContext,
	ObjectDirective,
	FunctionDirective,
} from '${libName}';

type IsAny<T> = boolean extends (T extends never ? true : false) ? true : false;
type IsFunctionalComponent<T> = T extends (...args: any) => JSX.Element ? true : false;
type IsConstructorComponent<T> = T extends new (...args: any) => JSX.ElementClass ? true : false;
type IsComponent_Loose<T> = IsConstructorComponent<T> extends false ? IsFunctionalComponent<T> extends false ? false : true : true; // allow any type
type IsComponent_Strict<T> = IsConstructorComponent<T> extends true ? true : IsFunctionalComponent<T> extends true ? true : false; // don't allow any type
type ComponentKeys<T> = keyof { [K in keyof T as IsComponent_Loose<T[K]> extends true ? K : never]: any };
export type PickNotAny<A, B> = IsAny<A> extends true ? B : A;
type AnyArray<T = any> = T[] | readonly T[];
type ForableSource<T> = [
	T extends { [Symbol.iterator](): IterableIterator<infer T1> } ? T1 : T[keyof T], // item
	typeof Symbol.iterator extends keyof T ? number : T extends T ? keyof T : never, // key
	typeof Symbol.iterator extends keyof T ? undefined : number, // index
][];
${camelCaseText};

export type GlobalComponents =
	PickNotAny<import('vue').GlobalComponents, {}>
	& PickNotAny<import('@vue/runtime-dom').GlobalComponents, {}>
	& Pick<typeof vue,
		'Transition'
		| 'TransitionGroup'
		| 'KeepAlive'
		| 'Suspense'
		| 'Teleport'
	>;

export declare function getVforSourceType<T>(source: T): ForableSource<NonNullable<T extends number ? number[] : T extends string ? string[] : T>>;
export declare function getNameOption<T>(t?: T): T extends { name: infer N } ? N : undefined;
export declare function directiveFunction<T>(dir: T):
	T extends ObjectDirective<infer E, infer V> ? undefined extends V ? (value?: V) => void : (value: V) => void
	: T extends FunctionDirective<infer E, infer V> ? undefined extends V ? (value?: V) => void : (value: V) => void
	: T;

export type HasScriptSlotsType<T> = T extends new (...args: any) => { ${slots}?: infer _ } ? true : false;
export type DefaultSlots<C> = HasScriptSlotsType<C> extends true ? {} : Record<string, any>;
export type SlotsComponent<T> = T extends new (...args: any) => { ${slots}?: infer S } ? T : new (...args: any) => { ${slots}: {} };
export type ScriptSlots<T> = T extends { ${slots}?: infer S }
	? { [K in keyof S]-?: S[K] extends ((obj: infer O) => any) | undefined ? O : S[K] }
	: {};

export type GetComponentName<T, K extends string> = K extends keyof T ? IsAny<T[K]> extends false ? K : GetComponentName_CamelCase<T, CamelCase<K>> : GetComponentName_CamelCase<T, CamelCase<K>>;
export type GetComponentName_CamelCase<T, K extends string> = K extends keyof T ? IsAny<T[K]> extends false ? K : GetComponentName_CapitalCase<T, Capitalize<K>> : GetComponentName_CapitalCase<T, Capitalize<K>>;
export type GetComponentName_CapitalCase<T, K> = K extends keyof T ? K : never;

export type FillingEventArg_ParametersLength<E extends (...args: any) => any> = IsAny<Parameters<E>> extends true ? -1 : Parameters<E>['length'];
export type FillingEventArg<E> = E extends (...args: any) => any ? FillingEventArg_ParametersLength<E> extends 0 ? ($event?: undefined) => ReturnType<E> : E : E;
export type GetProperty<T, K, N = any> = K extends keyof T ? T[K] : N;
export type ComponentContext<T> = T extends new (...args: any) => any ? InstanceType<T> : T extends (...args: any) => any ? ReturnType<T> : T;
export type OptionsProps<T> = T extends { props: infer R } ? R : {};
export type SelectComponent<T1, T2> = T1 extends (new (...args: any) => any) ? T1 : T1 extends ((...args: any) => any) ? T1 : T2;

export type ExtractEmit2<T> =
	T extends FunctionalComponent<infer _, infer E> ? SetupContext<E>['emit']
	: T extends new (...args: any) => { $emit: infer Emit } ? Emit
	: unknown;
export type ReturnVoid<T> = T extends (...payload: infer P) => any ? (...payload: P) => void : (...args: any) => void;
export type EmitEvent2<F, E> =
	F extends {
		(event: E, ...payload: infer P): infer R
	} ? (...payload: P) => void
	: F extends {
		(event: E, ...payload: infer P): infer R
		(...args: any): any
	} ? (...payload: P) => void
	: F extends {
		(event: E, ...payload: infer P): infer R
		(...args: any): any
		(...args: any): any
	} ? (...payload: P) => void
	: F extends {
		(event: E, ...payload: infer P): infer R
		(...args: any): any
		(...args: any): any
		(...args: any): any
	} ? (...payload: P) => void
	: unknown | '[Type Warning] Volar could not infer $emit event more than 4 overloads without DefineComponent. see https://github.com/johnsoncodehk/volar/issues/60';
export type EmitEvent<T, E> =
	T extends DefineComponent<infer _, any, any, any, any, any, any, infer E2> ? EmitEvent_3<E2, E>
	: T extends FunctionalComponent<infer _, infer E2> ? EmitEvent_3<E2, E>
	: T extends FunctionalComponent<infer _, infer E> ? EmitEvent2<SetupContext<E>['emit'], E>
	: unknown;
export type EmitEvent_3<E2, E> =
	EmitsOptions extends E2 ? unknown
	: E2 extends AnyArray<infer K> ? (E extends K ? (...args: any) => void : unknown) // emits: ['event-1', 'event-2']
	: E extends keyof E2 ? ReturnVoid<E2[E]> // emits: { 'event-1': () => true, 'event-2': () => true }
	: unknown
export type FirstFunction<F0 = void, F1 = void, F2 = void, F3 = void> =
	NonNullable<F0> extends (Function | AnyArray<Function>) ? F0 :
	NonNullable<F1> extends (Function | AnyArray<Function>) ? F1 :
	NonNullable<F2> extends (Function | AnyArray<Function>) ? F2 :
	NonNullable<F3> extends (Function | AnyArray<Function>) ? F3 :
	unknown;
export type GlobalAttrsBase = VNodeProps & AllowedComponentProps;
export type GlobalAttrs = GlobalAttrsBase & HTMLAttributes;
export type PickComponents<T> = ComponentKeys<T> extends keyof T ? Pick<T, ComponentKeys<T>> : T;
export type ConvertInvalidComponents<T> = { [K in keyof T]: IsComponent_Strict<T[K]> extends true ? T[K] : any };
export type SelfComponent<N, C> = string extends N ? {} : N extends string ? { [P in N]: C } : {};
`;
    }
    exports2.getTypesCode = getTypesCode;
    function genConstructorOverloads(name = "ConstructorOverloads", nums) {
      let code = `type ${name}<T> =
`;
      if (nums === void 0) {
        for (let i = 8; i >= 1; i--) {
          gen(i);
        }
      } else {
        gen(nums);
      }
      code += `// 0
`;
      code += `{};
`;
      return code;
      function gen(i) {
        code += `// ${i}
`;
        code += `T extends {
`;
        for (let j = 1; j <= i; j++) {
          code += `(event: infer E${j}, ...payload: infer P${j}): void;
`;
        }
        code += `} ? (
`;
        for (let j = 1; j <= i; j++) {
          if (j > 1)
            code += "& ";
          code += `(E${j} extends string ? { [K${j} in E${j}]: (...payload: P${j}) => void } : {})
`;
        }
        code += `) :
`;
      }
    }
    exports2.genConstructorOverloads = genConstructorOverloads;
  }
});

// ../../packages/vue-typescript/out/use/useSfcScriptGen.js
var require_useSfcScriptGen = __commonJS({
  "../../packages/vue-typescript/out/use/useSfcScriptGen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.useSfcScriptGen = void 0;
    var reactivity_1 = require_reactivity();
    var sourceMaps_1 = require_sourceMaps();
    var script_1 = require_script();
    var localTypes_1 = require_localTypes();
    function useSfcScriptGen(lsType, fileName, vueFileContent, lang, script, scriptSetup, scriptRanges, scriptSetupRanges, htmlGen, sfcStyles, compilerOptions, getCssVBindRanges) {
      const codeGen = (0, reactivity_1.computed)(() => {
        var _a, _b;
        return (0, script_1.generate)(lsType, fileName, (_a = script.value) !== null && _a !== void 0 ? _a : void 0, (_b = scriptSetup.value) !== null && _b !== void 0 ? _b : void 0, scriptRanges.value, scriptSetupRanges.value, () => htmlGen.value, () => {
          const bindTexts = [];
          for (const style of sfcStyles.value) {
            const binds = getCssVBindRanges(style);
            for (const cssBind of binds) {
              const bindText = style.content.substring(cssBind.start, cssBind.end);
              bindTexts.push(bindText);
            }
          }
          return bindTexts;
        }, (0, localTypes_1.getVueLibraryName)(compilerOptions.experimentalCompatMode === 2), !!compilerOptions.experimentalShamefullySupportOptionsApi);
      });
      const file = (0, reactivity_1.computed)(() => {
        var _a, _b, _c;
        if (lsType === "script") {
          const file2 = {
            fileName: fileName + "." + lang.value,
            lang: lang.value,
            content: codeGen.value.codeGen.getText(),
            capabilities: {
              diagnostics: !((_a = script.value) === null || _a === void 0 ? void 0 : _a.src),
              foldingRanges: false,
              formatting: false,
              documentSymbol: false,
              codeActions: !((_b = script.value) === null || _b === void 0 ? void 0 : _b.src),
              inlayHints: !((_c = script.value) === null || _c === void 0 ? void 0 : _c.src)
            },
            data: void 0,
            isTsHostFile: true
          };
          return file2;
        } else if (script.value || scriptSetup.value) {
          const file2 = {
            fileName: fileName + ".__VLS_script." + lang.value,
            lang: lang.value,
            content: codeGen.value.codeGen.getText(),
            capabilities: {
              diagnostics: false,
              foldingRanges: false,
              formatting: false,
              documentSymbol: false,
              codeActions: false,
              inlayHints: false
            },
            data: void 0,
            isTsHostFile: true
          };
          return file2;
        }
      });
      const embedded = (0, reactivity_1.computed)(() => {
        if (file.value) {
          return {
            sourceMap: new sourceMaps_1.EmbeddedFileSourceMap(codeGen.value.codeGen.getMappings(parseMappingSourceRange)),
            file: file.value
          };
        }
      });
      const teleport = (0, reactivity_1.computed)(() => {
        const teleport2 = new sourceMaps_1.Teleport();
        for (const mapping of codeGen.value.teleports) {
          teleport2.mappings.push(mapping);
        }
        return teleport2;
      });
      return {
        lang,
        file,
        embedded,
        teleport
      };
      function parseMappingSourceRange(data, sourceRange) {
        var _a;
        if (data.vueTag === "scriptSrc" && ((_a = script.value) === null || _a === void 0 ? void 0 : _a.src)) {
          const vueStart = vueFileContent.value.substring(0, script.value.startTagEnd).lastIndexOf(script.value.src);
          const vueEnd = vueStart + script.value.src.length;
          return {
            start: vueStart - 1,
            end: vueEnd + 1
          };
        } else if (data.vueTag === "script" && script.value) {
          return {
            start: script.value.startTagEnd + sourceRange.start,
            end: script.value.startTagEnd + sourceRange.end
          };
        } else if (data.vueTag === "scriptSetup" && scriptSetup.value) {
          return {
            start: scriptSetup.value.startTagEnd + sourceRange.start,
            end: scriptSetup.value.startTagEnd + sourceRange.end
          };
        } else {
          return sourceRange;
        }
      }
    }
    exports2.useSfcScriptGen = useSfcScriptGen;
  }
});

// ../../packages/vue-typescript/out/use/useSfcStyles.js
var require_useSfcStyles = __commonJS({
  "../../packages/vue-typescript/out/use/useSfcStyles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.useSfcStyles = void 0;
    var reactivity_1 = require_reactivity();
    var SourceMaps = require_out();
    var sourceMaps_1 = require_sourceMaps();
    function useSfcStyles(fileName, styles) {
      const files = (0, reactivity_1.computed)(() => {
        const _files = [];
        for (let i = 0; i < styles.value.length; i++) {
          const style = styles.value[i];
          _files.push({
            fileName: fileName + "." + i + "." + style.lang,
            lang: style.lang,
            content: style.content,
            capabilities: {
              diagnostics: true,
              foldingRanges: true,
              formatting: true,
              documentSymbol: true,
              codeActions: true,
              inlayHints: true
            },
            data: {
              module: style.module,
              scoped: style.scoped
            },
            isTsHostFile: false
          });
        }
        return _files;
      });
      const embeddeds = (0, reactivity_1.computed)(() => {
        const _embeddeds = [];
        for (let i = 0; i < styles.value.length && i < files.value.length; i++) {
          const file = files.value[i];
          const style = styles.value[i];
          const sourceMap2 = new sourceMaps_1.EmbeddedFileSourceMap();
          sourceMap2.mappings.push({
            data: {
              vueTag: "style",
              vueTagIndex: i,
              capabilities: {
                basic: true,
                references: true,
                definitions: true,
                diagnostic: true,
                rename: true,
                completion: true,
                semanticTokens: true
              }
            },
            mode: SourceMaps.Mode.Offset,
            sourceRange: {
              start: style.startTagEnd,
              end: style.startTagEnd + style.content.length
            },
            mappedRange: {
              start: 0,
              end: style.content.length
            }
          });
          _embeddeds.push({ file, sourceMap: sourceMap2 });
        }
        return _embeddeds;
      });
      return {
        files,
        embeddeds
      };
    }
    exports2.useSfcStyles = useSfcStyles;
  }
});

// ../../packages/vue-typescript/out/use/useSfcTemplate.js
var require_useSfcTemplate = __commonJS({
  "../../packages/vue-typescript/out/use/useSfcTemplate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.useSfcTemplate = void 0;
    var reactivity_1 = require_reactivity();
    var sourceMaps_1 = require_sourceMaps();
    var SourceMaps = require_out();
    function useSfcTemplate(fileName, template) {
      const file = (0, reactivity_1.computed)(() => {
        if (template.value) {
          const file2 = {
            fileName: fileName + "." + template.value.lang,
            lang: template.value.lang,
            content: template.value.content,
            capabilities: {
              diagnostics: true,
              foldingRanges: true,
              formatting: true,
              documentSymbol: true,
              codeActions: true,
              inlayHints: true
            },
            data: void 0,
            isTsHostFile: false
          };
          return file2;
        }
      });
      const embedded = (0, reactivity_1.computed)(() => {
        if (template.value && file.value) {
          const sourceMap2 = new sourceMaps_1.EmbeddedFileSourceMap();
          sourceMap2.mappings.push({
            data: {
              vueTag: "template",
              capabilities: {
                basic: true,
                references: true,
                definitions: true,
                diagnostic: true,
                rename: true,
                completion: true,
                semanticTokens: true
              }
            },
            mode: SourceMaps.Mode.Offset,
            sourceRange: {
              start: template.value.startTagEnd,
              end: template.value.startTagEnd + template.value.content.length
            },
            mappedRange: {
              start: 0,
              end: template.value.content.length
            }
          });
          return {
            file: file.value,
            sourceMap: sourceMap2
          };
        }
      });
      return {
        file,
        embedded
      };
    }
    exports2.useSfcTemplate = useSfcTemplate;
  }
});

// ../../packages/vue-code-gen/out/transform.js
var require_transform = __commonJS({
  "../../packages/vue-code-gen/out/transform.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.colletVars = exports2.walkInterpolationFragment = void 0;
    var shared_1 = require_shared();
    function walkInterpolationFragment(ts, code, cb, localVars, identifiers) {
      let ctxVars = [];
      const ast = ts.createSourceFile("/foo.ts", code, ts.ScriptTarget.ESNext);
      const varCb = (id2, isShorthand) => {
        if (!!localVars[id2.text] || (0, shared_1.isGloballyWhitelisted)(id2.text) || id2.text === "require") {
        } else {
          ctxVars.push({
            text: id2.text,
            isShorthand,
            offset: id2.getStart(ast)
          });
          identifiers.add(id2.text);
        }
      };
      ast.forEachChild((node2) => walkIdentifiers2(ts, node2, varCb, localVars));
      ctxVars = ctxVars.sort((a, b) => a.offset - b.offset);
      let lastCtxAccess;
      if (ctxVars.length) {
        if (ctxVars[0].isShorthand) {
          cb(code.substring(0, ctxVars[0].offset + ctxVars[0].text.length), 0);
          cb(": ", void 0);
        } else {
          cb(code.substring(0, ctxVars[0].offset), 0);
        }
        for (let i = 0; i < ctxVars.length - 1; i++) {
          writeCtxAccess(ctxVars[i].text.length);
          if (ctxVars[i + 1].isShorthand) {
            cb(code.substring(ctxVars[i].offset, ctxVars[i + 1].offset + ctxVars[i + 1].text.length), ctxVars[i].offset, lastCtxAccess);
            cb(": ", void 0);
          } else {
            cb(code.substring(ctxVars[i].offset, ctxVars[i + 1].offset), ctxVars[i].offset, lastCtxAccess);
          }
          lastCtxAccess = void 0;
        }
        writeCtxAccess(ctxVars[ctxVars.length - 1].text.length);
        cb(code.substring(ctxVars[ctxVars.length - 1].offset), ctxVars[ctxVars.length - 1].offset, lastCtxAccess);
        lastCtxAccess = void 0;
      } else {
        cb(code, 0);
      }
      function writeCtxAccess(varLength) {
        cb("__VLS_ctx.", void 0);
        lastCtxAccess = {
          ctxText: "__VLS_ctx.",
          varLength
        };
      }
    }
    exports2.walkInterpolationFragment = walkInterpolationFragment;
    function walkIdentifiers2(ts, node2, cb, localVars) {
      var _a, _b;
      const blockVars = [];
      if (ts.isIdentifier(node2)) {
        cb(node2, false);
      } else if (ts.isShorthandPropertyAssignment(node2)) {
        cb(node2.name, true);
      } else if (ts.isPropertyAccessExpression(node2)) {
        walkIdentifiers2(ts, node2.expression, cb, localVars);
      } else if (ts.isVariableDeclaration(node2)) {
        colletVars(ts, node2.name, blockVars);
        for (const varName of blockVars)
          localVars[varName] = ((_a = localVars[varName]) !== null && _a !== void 0 ? _a : 0) + 1;
        if (node2.initializer)
          walkIdentifiers2(ts, node2.initializer, cb, localVars);
      } else if (ts.isArrowFunction(node2)) {
        const functionArgs = [];
        for (const param of node2.parameters)
          colletVars(ts, param.name, functionArgs);
        for (const varName of functionArgs)
          localVars[varName] = ((_b = localVars[varName]) !== null && _b !== void 0 ? _b : 0) + 1;
        walkIdentifiers2(ts, node2.body, cb, localVars);
        for (const varName of functionArgs)
          localVars[varName]--;
      } else if (ts.isObjectLiteralExpression(node2)) {
        for (const prop of node2.properties) {
          if (ts.isPropertyAssignment(prop)) {
            if (ts.isComputedPropertyName(prop.name)) {
              walkIdentifiers2(ts, prop.name.expression, cb, localVars);
            }
            walkIdentifiers2(ts, prop.initializer, cb, localVars);
          } else if (ts.isShorthandPropertyAssignment(prop)) {
            walkIdentifiers2(ts, prop, cb, localVars);
          } else if (ts.isSpreadAssignment(prop)) {
            walkIdentifiers2(ts, prop.expression, cb, localVars);
          }
        }
      } else if (ts.isTypeReferenceNode(node2)) {
      } else {
        node2.forEachChild((node3) => walkIdentifiers2(ts, node3, cb, localVars));
      }
      for (const varName of blockVars)
        localVars[varName]--;
    }
    function colletVars(ts, node2, result2) {
      if (ts.isIdentifier(node2)) {
        result2.push(node2.text);
      } else if (ts.isObjectBindingPattern(node2)) {
        for (const el of node2.elements) {
          colletVars(ts, el.name, result2);
        }
      } else if (ts.isArrayBindingPattern(node2)) {
        for (const el of node2.elements) {
          if (ts.isBindingElement(el)) {
            colletVars(ts, el.name, result2);
          }
        }
      } else {
        node2.forEachChild((node3) => colletVars(ts, node3, result2));
      }
    }
    exports2.colletVars = colletVars;
  }
});

// ../../packages/vue-code-gen/out/generators/template.js
var require_template = __commonJS({
  "../../packages/vue-code-gen/out/generators/template.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getPatchForSlotNode = exports2.generate = exports2.transformContext = void 0;
    var SourceMaps = require_out();
    var code_gen_1 = require_out2();
    var shared_1 = require_shared();
    var CompilerDOM2 = require_compiler_dom();
    var CompilerCore = require_compiler_core();
    var transform_1 = require_transform();
    var capabilitiesSet = {
      all: { basic: true, diagnostic: true, references: true, definitions: true, rename: true, completion: true, semanticTokens: true },
      noDiagnostic: { basic: true, references: true, definitions: true, rename: true, completion: true, semanticTokens: true },
      diagnosticOnly: { diagnostic: true, completion: true },
      tagHover: { basic: true },
      event: { basic: true, diagnostic: true },
      tagReference: { references: true, definitions: true, rename: { in: false, out: true } },
      attr: { basic: true, diagnostic: true, references: true, definitions: true, rename: true },
      attrReference: { references: true, definitions: true, rename: true },
      scopedClassName: { references: true, definitions: true, rename: true, completion: true },
      slotName: { basic: true, diagnostic: true, references: true, definitions: true, completion: true },
      slotNameExport: { basic: true, diagnostic: true, references: true, definitions: true },
      refAttr: { references: true, definitions: true, rename: true }
    };
    var formatBrackets = {
      empty: ["", ""],
      round: ["(", ")"],
      curly: ["({ __VLS_foo:", "})"],
      square: ["[", "]"]
    };
    var validTsVar = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;
    exports2.transformContext = {
      onError: () => {
      },
      helperString: (str) => str.toString(),
      replaceNode: (node2) => {
      },
      cacheHandlers: false,
      prefixIdentifiers: false,
      scopes: {
        vFor: 0,
        vOnce: 0,
        vPre: 0,
        vSlot: 0
      },
      expressionPlugins: ["typescript"]
    };
    function generate2(ts, sourceLang, templateAst, isVue2, cssScopedClasses = [], htmlToTemplate, isScriptSetup, searchTexts) {
      const tsCodeGen = new code_gen_1.CodeGen();
      const tsFormatCodeGen = new code_gen_1.CodeGen();
      const cssCodeGen = new code_gen_1.CodeGen();
      const attrNames = /* @__PURE__ */ new Set();
      const slots = /* @__PURE__ */ new Map();
      const slotExps = /* @__PURE__ */ new Map();
      const cssScopedClassesSet = new Set(cssScopedClasses);
      const tags = {};
      const tagResolves = {};
      const localVars = {};
      const identifiers = /* @__PURE__ */ new Set();
      const scopedClasses = [];
      tsFormatCodeGen.addText("export { };\n");
      let elementIndex = 0;
      for (const childNode of templateAst.children) {
        collectTags(childNode);
      }
      for (const tagName in tags) {
        const tag2 = tags[tagName];
        const tagRanges = tag2.offsets.map((offset) => ({ start: offset, end: offset + tagName.length }));
        const isNamespacedTag = tagName.indexOf(".") >= 0;
        const var_correctTagName = `__VLS_${elementIndex++}`;
        const var_rawComponent = `__VLS_${elementIndex++}`;
        const var_slotsComponent = `__VLS_${elementIndex++}`;
        const var_emit = `__VLS_${elementIndex++}`;
        const var_slots = `__VLS_${elementIndex++}`;
        if (isNamespacedTag) {
          for (let i = 0; i < tagRanges.length; i++) {
            const tagRange = tagRanges[i];
            if (i === 0) {
              tsCodeGen.addText(`declare const ${var_rawComponent}: typeof `);
            } else {
              tsCodeGen.addText(`declare const __VLS_${elementIndex++}: typeof `);
            }
            writeCode(tagName, tagRange, SourceMaps.Mode.Offset, {
              vueTag: "template",
              capabilities: capabilitiesSet.all
            });
            tsCodeGen.addText(`;
`);
          }
        } else {
          tsCodeGen.addText(`declare const ${var_correctTagName}: __VLS_types.GetComponentName<typeof __VLS_rawComponents, '${tagName}'>;
`);
          tsCodeGen.addText(`declare const ${var_rawComponent}: __VLS_types.GetProperty<typeof __VLS_rawComponents, typeof ${var_correctTagName}, any>;
`);
        }
        tsCodeGen.addText(`declare const ${var_slotsComponent}: __VLS_types.SlotsComponent<typeof ${var_rawComponent}>;
`);
        tsCodeGen.addText(`declare const ${var_emit}: __VLS_types.ExtractEmit2<typeof ${var_rawComponent}>;
`);
        tsCodeGen.addText(`declare const ${var_slots}: __VLS_types.DefaultSlots<typeof ${var_rawComponent}>;
`);
        const name1 = tagName;
        const name2 = (0, shared_1.camelize)(tagName);
        const name3 = name2[0].toUpperCase() + name2.slice(1);
        const componentNames = /* @__PURE__ */ new Set([name1, name2, name3]);
        if (!isNamespacedTag) {
          for (const tagRange of tagRanges) {
            tsCodeGen.addText(`// @ts-ignore
`);
            tsCodeGen.addText(`({ `);
            writeObjectProperty2(tagName, [tagRange], {
              vueTag: "template",
              capabilities: capabilitiesSet.tagHover
            });
            tsCodeGen.addText(`: {} as `);
            tsCodeGen.addText(`__VLS_types.PickNotAny<`.repeat(componentNames.size - 1));
            const names = [...componentNames];
            for (let i = 0; i < names.length; i++) {
              if (i > 0) {
                tsCodeGen.addText(", ");
              }
              tsCodeGen.addText(`typeof __VLS_rawComponents`);
              writePropertyAccess2(names[i], [tagRange], {
                vueTag: "template",
                capabilities: capabilitiesSet.tagReference,
                normalizeNewName: tagName === names[i] ? void 0 : unHyphenatComponentName,
                applyNewName: keepHyphenateName
              });
              if (i > 0) {
                tsCodeGen.addText(">");
              }
            }
            tsCodeGen.addText(` });
`);
          }
        }
        tsCodeGen.addText("/* Completion: Emits */\n");
        for (const name of componentNames) {
          tsCodeGen.addText("// @ts-ignore\n");
          tsCodeGen.addText(`${var_emit}('${searchTexts.getEmitCompletion(name)}');
`);
        }
        tsCodeGen.addText("/* Completion: Props */\n");
        for (const name of componentNames) {
          tsCodeGen.addText("// @ts-ignore\n");
          tsCodeGen.addText(`(<${var_rawComponent} ${searchTexts.getPropsCompletion(name)}/>);
`);
        }
        tagResolves[tagName] = {
          rawComponent: var_rawComponent,
          slotsComponent: var_slotsComponent,
          emit: var_emit,
          slots: var_slots,
          offsets: tag2.offsets.map((offset) => {
            var _a;
            return (_a = htmlToTemplate(offset, offset)) === null || _a === void 0 ? void 0 : _a.start;
          }).filter(notEmpty)
        };
      }
      for (const childNode of templateAst.children) {
        tsCodeGen.addText(`{
`);
        visitNode(childNode, void 0);
        tsCodeGen.addText(`}
`);
      }
      tsCodeGen.addText(`if (typeof __VLS_styleScopedClasses === 'object' && !Array.isArray(__VLS_styleScopedClasses)) {
`);
      for (const { className: className2, offset } of scopedClasses) {
        tsCodeGen.addText(`__VLS_styleScopedClasses[`);
        writeCodeWithQuotes(className2, {
          start: offset,
          end: offset + className2.length
        }, {
          vueTag: "template",
          capabilities: Object.assign(Object.assign({}, capabilitiesSet.scopedClassName), { displayWithLink: cssScopedClassesSet.has(className2) })
        });
        tsCodeGen.addText(`];
`);
      }
      tsCodeGen.addText("}\n");
      tsCodeGen.addText(`declare var __VLS_slots:
`);
      for (const [exp, slot] of slotExps) {
        tsCodeGen.addText(`Record<NonNullable<typeof ${exp}>, typeof ${slot.varName}> &
`);
      }
      tsCodeGen.addText(`{
`);
      for (const [name, slot] of slots) {
        writeObjectProperty(name, slot.loc, SourceMaps.Mode.Expand, {
          vueTag: "template",
          capabilities: capabilitiesSet.slotNameExport
        });
        tsCodeGen.addText(`: typeof ${slot.varName},
`);
      }
      tsCodeGen.addText(`};
`);
      return {
        codeGen: tsCodeGen,
        formatCodeGen: tsFormatCodeGen,
        cssCodeGen,
        tagNames: tagResolves,
        attrNames,
        identifiers
      };
      function collectTags(node2) {
        var _a;
        if (node2.type === 1) {
          let addProp = function(propName, argName, offset) {
            if (!resolvedTag.props[propName]) {
              resolvedTag.props[propName] = {
                argName,
                offsets: []
              };
            }
            resolvedTag.props[propName].offsets.push(offset);
          }, addEvent = function(eventName, offset) {
            if (!resolvedTag.events[eventName]) {
              resolvedTag.events[eventName] = {
                offsets: []
              };
            }
            resolvedTag.events[eventName].offsets.push(offset);
          };
          const patchForNode = getPatchForSlotNode(node2);
          if (patchForNode) {
            collectTags(patchForNode);
            return;
          }
          if (!tags[node2.tag]) {
            tags[node2.tag] = {
              offsets: [],
              props: {},
              events: {}
            };
          }
          const resolvedTag = tags[node2.tag];
          resolvedTag.offsets.push(node2.loc.start.offset + node2.loc.source.indexOf(node2.tag));
          if (!node2.isSelfClosing && sourceLang === "html") {
            resolvedTag.offsets.push(node2.loc.start.offset + node2.loc.source.lastIndexOf(node2.tag));
          }
          for (const prop of node2.props) {
            if (prop.type === 7 && ((_a = prop.arg) === null || _a === void 0 ? void 0 : _a.type) === 4 && prop.arg.isStatic) {
              let propName = prop.arg.constType === 3 ? prop.arg.content : prop.arg.loc.source;
              if (prop.modifiers.some((m) => m === "prop" || m === "attr")) {
                propName = propName.substring(1);
              }
              if (prop.name === "bind" || prop.name === "model") {
                addProp(propName, propName, prop.arg.loc.start.offset);
              } else if (prop.name === "on") {
                addEvent(propName, prop.arg.loc.start.offset);
              }
            } else if (prop.type === 7 && !prop.arg && prop.name === "model") {
              addProp(getModelValuePropName(node2, isVue2), "v-model", prop.loc.start.offset);
            } else if (prop.type === 6) {
              addProp(prop.name, prop.name, prop.loc.start.offset);
            }
          }
          for (const childNode of node2.children) {
            collectTags(childNode);
          }
        } else if (node2.type === 9) {
          for (let i = 0; i < node2.branches.length; i++) {
            const branch = node2.branches[i];
            for (const childNode of branch.children) {
              collectTags(childNode);
            }
          }
        } else if (node2.type === 11) {
          for (const childNode of node2.children) {
            collectTags(childNode);
          }
        }
      }
      function visitNode(node2, parentEl) {
        var _a, _b, _c, _d;
        if (node2.type === 1) {
          visitElementNode(node2, parentEl);
        } else if (node2.type === 12) {
          visitNode(node2.content, parentEl);
        } else if (node2.type === 8) {
          for (const childNode of node2.children) {
            if (typeof childNode === "object") {
              visitNode(childNode, parentEl);
            }
          }
        } else if (node2.type === 5) {
          const context = node2.loc.source.substring(2, node2.loc.source.length - 2);
          let start = node2.loc.start.offset + 2;
          tsCodeGen.addText(`(`);
          writeInterpolation(context, start, {
            vueTag: "template",
            capabilities: capabilitiesSet.all
          }, "", "");
          writeFormatCode(context, start, formatBrackets.curly);
          tsCodeGen.addText(`);
`);
        } else if (node2.type === 9) {
          for (let i = 0; i < node2.branches.length; i++) {
            const branch = node2.branches[i];
            if (i === 0)
              tsCodeGen.addText("if");
            else if (branch.condition)
              tsCodeGen.addText("else if");
            else
              tsCodeGen.addText("else");
            if (((_a = branch.condition) === null || _a === void 0 ? void 0 : _a.type) === 4) {
              tsCodeGen.addText(` `);
              writeInterpolation(branch.condition.content, branch.condition.loc.start.offset, {
                vueTag: "template",
                capabilities: capabilitiesSet.all
              }, "(", ")");
              writeFormatCode(branch.condition.content, branch.condition.loc.start.offset, formatBrackets.round);
            }
            tsCodeGen.addText(` {
`);
            for (const childNode of branch.children) {
              visitNode(childNode, parentEl);
            }
            tsCodeGen.addText("}\n");
          }
        } else if (node2.type === 11) {
          const { source, value, key, index } = node2.parseResult;
          const leftExpressionRange = value ? { start: ((_b = value !== null && value !== void 0 ? value : key) !== null && _b !== void 0 ? _b : index).loc.start.offset, end: ((_c = index !== null && index !== void 0 ? index : key) !== null && _c !== void 0 ? _c : value).loc.end.offset } : void 0;
          const leftExpressionText = leftExpressionRange ? node2.loc.source.substring(leftExpressionRange.start - node2.loc.start.offset, leftExpressionRange.end - node2.loc.start.offset) : void 0;
          const forBlockVars = [];
          tsCodeGen.addText(`for (const [`);
          if (leftExpressionRange && leftExpressionText) {
            const collentAst = ts.createSourceFile("/foo.ts", `const [${leftExpressionText}]`, ts.ScriptTarget.ESNext);
            (0, transform_1.colletVars)(ts, collentAst, forBlockVars);
            for (const varName of forBlockVars)
              localVars[varName] = ((_d = localVars[varName]) !== null && _d !== void 0 ? _d : 0) + 1;
            writeCode(leftExpressionText, leftExpressionRange, SourceMaps.Mode.Offset, {
              vueTag: "template",
              capabilities: capabilitiesSet.all
            });
            writeFormatCode(leftExpressionText, leftExpressionRange.start, formatBrackets.square);
          }
          tsCodeGen.addText(`] of __VLS_types.getVforSourceType`);
          if (source.type === 4) {
            writeInterpolation(source.content, source.loc.start.offset, {
              vueTag: "template",
              capabilities: capabilitiesSet.all
            }, "(", ")");
            writeFormatCode(source.content, source.loc.start.offset, formatBrackets.round);
          }
          tsCodeGen.addText(`) {
`);
          for (const childNode of node2.children) {
            visitNode(childNode, parentEl);
          }
          tsCodeGen.addText("}\n");
          for (const varName of forBlockVars)
            localVars[varName]--;
        } else if (node2.type === 2) {
        } else if (node2.type === 3) {
        } else {
          tsCodeGen.addText(`// Unprocessed node type: ${node2.type} json: ${JSON.stringify(node2.loc)}
`);
        }
      }
      ;
      function visitElementNode(node2, parentEl) {
        var _a;
        const patchForNode = getPatchForSlotNode(node2);
        if (patchForNode) {
          visitNode(patchForNode, parentEl);
          return;
        }
        if (node2.tag !== "template") {
          parentEl = node2;
        }
        tsCodeGen.addText(`{
`);
        {
          const tagText = (0, shared_1.isHTMLTag)(node2.tag) || (0, shared_1.isSVGTag)(node2.tag) ? node2.tag : tagResolves[node2.tag].rawComponent;
          const fullTagStart = tsCodeGen.getText().length;
          tsCodeGen.addText(`<`);
          writeCode(tagText, {
            start: node2.loc.start.offset + node2.loc.source.indexOf(node2.tag),
            end: node2.loc.start.offset + node2.loc.source.indexOf(node2.tag) + node2.tag.length
          }, SourceMaps.Mode.Totally, {
            vueTag: "template",
            capabilities: capabilitiesSet.diagnosticOnly
          });
          tsCodeGen.addText(` `);
          const { hasRemainStyleOrClass } = writeProps(node2, false, "props");
          tsCodeGen.addText(`/>`);
          let startTagEnd;
          if (node2.loc.source.endsWith("/>")) {
            startTagEnd = node2.loc.end.offset;
          } else if (node2.children.length) {
            startTagEnd = node2.loc.start.offset + node2.loc.source.substring(0, node2.children[0].loc.start.offset - node2.loc.start.offset).lastIndexOf(">") + 1;
          } else {
            startTagEnd = node2.loc.start.offset + node2.loc.source.substring(0, node2.loc.source.lastIndexOf("</")).lastIndexOf(">") + 1;
          }
          addMapping(tsCodeGen, {
            sourceRange: {
              start: node2.loc.start.offset,
              end: startTagEnd
            },
            mappedRange: {
              start: fullTagStart,
              end: tsCodeGen.getText().length
            },
            mode: SourceMaps.Mode.Totally,
            data: {
              vueTag: "template",
              capabilities: capabilitiesSet.diagnosticOnly
            }
          });
          tsCodeGen.addText(`
`);
          if (hasRemainStyleOrClass) {
            tsCodeGen.addText(`<${tagText} `);
            writeProps(node2, true, "props");
            tsCodeGen.addText(`/>
`);
          }
          let slotBlockVars;
          writeInlineCss(node2);
          if (parentEl) {
            slotBlockVars = [];
            writeImportSlots(node2, parentEl, slotBlockVars);
            for (const varName of slotBlockVars)
              localVars[varName] = ((_a = localVars[varName]) !== null && _a !== void 0 ? _a : 0) + 1;
          }
          writeDirectives(node2);
          writeElReferences(node2);
          if (cssScopedClasses.length)
            writeClassScopeds(node2);
          writeEvents(node2);
          writeSlots(node2);
          for (const childNode of node2.children) {
            visitNode(childNode, parentEl);
          }
          if (slotBlockVars) {
            for (const varName of slotBlockVars)
              localVars[varName]--;
          }
        }
        tsCodeGen.addText(`}
`);
        function writeEvents(node3) {
          var _a2, _b;
          const varComponentInstance = `__VLS_${elementIndex++}`;
          let writedInstance = false;
          for (const prop of node3.props) {
            let appendExpressionNode = function(prop2, jsChildNode) {
              var _a3;
              if (((_a3 = prop2.exp) === null || _a3 === void 0 ? void 0 : _a3.type) === 4) {
                if (jsChildNode.type === 4) {
                  writeInterpolation(prop2.exp.content, prop2.exp.loc.start.offset, {
                    vueTag: "template",
                    capabilities: capabilitiesSet.all
                  }, "(", ")");
                  writeFormatCode(prop2.exp.content, prop2.exp.loc.start.offset, formatBrackets.round);
                } else if (jsChildNode.type === 8) {
                  const _exp = prop2.exp;
                  const expIndex = jsChildNode.children.findIndex((child) => typeof child === "object" && child.type === 4 && child.content === _exp.content);
                  const expNode = jsChildNode.children[expIndex];
                  const prefix2 = jsChildNode.children.filter((child, i) => typeof child === "string" && i < expIndex).map((child) => child).join("");
                  const suffix = jsChildNode.children.filter((child, i) => typeof child === "string" && i > expIndex).map((child) => child).join("");
                  writeInterpolation(expNode.content, expNode.loc.start.offset, {
                    vueTag: "template",
                    capabilities: capabilitiesSet.all
                  }, prefix2, suffix);
                  writeFormatCode(expNode.content, expNode.loc.start.offset, formatBrackets.round);
                }
              } else {
                tsCodeGen.addText(`undefined`);
              }
            };
            if (prop.type === 7 && prop.name === "on" && ((_a2 = prop.arg) === null || _a2 === void 0 ? void 0 : _a2.type) === 4) {
              const transformResult = CompilerDOM2.transformOn(prop, node3, exports2.transformContext);
              for (const prop_2 of transformResult.props) {
                tryWriteInstance();
                const varInstanceProps = `__VLS_${elementIndex++}`;
                tsCodeGen.addText(`type ${varInstanceProps} = typeof ${varComponentInstance} extends { $props: infer Props } ? Props & Omit<__VLS_types.GlobalAttrs, keyof Props> & Record<string, unknown> : typeof ${tagResolves[node3.tag].rawComponent} & Record<string, unknown>;
`);
                tsCodeGen.addText(`const __VLS_${elementIndex++}: {
`);
                tsCodeGen.addText(`'${prop.arg.loc.source}': __VLS_types.FillingEventArg<
`);
                {
                  tsCodeGen.addText(`__VLS_types.FirstFunction<
`);
                  {
                    tsCodeGen.addText(`__VLS_types.EmitEvent<typeof ${tagResolves[node3.tag].rawComponent}, '${prop.arg.loc.source}'>,
`);
                    {
                      const key_2 = (0, shared_1.camelize)("on-" + prop.arg.loc.source);
                      const key_3 = "on" + prop.arg.loc.source[0].toUpperCase() + prop.arg.loc.source.substring(1);
                      tsCodeGen.addText(`${varInstanceProps}[`);
                      writeCodeWithQuotes(key_2, [{ start: prop.arg.loc.start.offset, end: prop.arg.loc.end.offset }], {
                        vueTag: "template",
                        capabilities: capabilitiesSet.attrReference,
                        normalizeNewName(newName) {
                          return (0, shared_1.camelize)("on-" + newName);
                        },
                        applyNewName(oldName, newName) {
                          const hName = (0, shared_1.hyphenate)(newName);
                          if ((0, shared_1.hyphenate)(newName).startsWith("on-")) {
                            return (0, shared_1.camelize)(hName.slice("on-".length));
                          }
                          return newName;
                        }
                      });
                      tsCodeGen.addText(`],
`);
                      if (key_3 !== key_2) {
                        tsCodeGen.addText(`${varInstanceProps}[`);
                        writeCodeWithQuotes(key_3, [{ start: prop.arg.loc.start.offset, end: prop.arg.loc.end.offset }], {
                          vueTag: "template",
                          capabilities: capabilitiesSet.attrReference,
                          normalizeNewName(newName) {
                            return "on" + newName[0].toUpperCase() + newName.substring(1);
                          },
                          applyNewName(oldName, newName) {
                            const hName = (0, shared_1.hyphenate)(newName);
                            if ((0, shared_1.hyphenate)(newName).startsWith("on-")) {
                              return (0, shared_1.camelize)(hName.slice("on-".length));
                            }
                            return newName;
                          }
                        });
                        tsCodeGen.addText(`],
`);
                      }
                    }
                    tsCodeGen.addText(`typeof ${varComponentInstance} extends { $emit: infer Emit } ? __VLS_types.EmitEvent2<Emit, '${prop.arg.loc.source}'> : unknown,
`);
                  }
                  tsCodeGen.addText(`>
`);
                }
                tsCodeGen.addText(`>
`);
                tsCodeGen.addText(`} = {
`);
                {
                  writeObjectProperty(prop.arg.loc.source, {
                    start: prop.arg.loc.start.offset,
                    end: prop.arg.loc.end.offset
                  }, SourceMaps.Mode.Offset, {
                    vueTag: "template",
                    capabilities: capabilitiesSet.event
                  });
                  tsCodeGen.addText(`: `);
                  appendExpressionNode(prop, prop_2.value);
                }
                tsCodeGen.addText(`};
`);
              }
            } else if (prop.type === 7 && prop.name === "on" && ((_b = prop.exp) === null || _b === void 0 ? void 0 : _b.type) === 4) {
              writeInterpolation(prop.exp.content, prop.exp.loc.start.offset, {
                vueTag: "template",
                capabilities: capabilitiesSet.all
              }, "$event => {(", ")}");
              writeFormatCode(prop.exp.content, prop.exp.loc.start.offset, formatBrackets.round);
              tsCodeGen.addText(`;
`);
            }
          }
          function tryWriteInstance() {
            if (writedInstance)
              return;
            tsCodeGen.addText(`const ${varComponentInstance} = new ${tagResolves[node3.tag].rawComponent}({ `);
            writeProps(node3, false, "slots");
            tsCodeGen.addText(`});
`);
            writedInstance = true;
          }
        }
      }
      function writeProps(node2, forRemainStyleOrClass, mode) {
        var _a, _b, _c, _d, _e;
        let styleCount = 0;
        let classCount = 0;
        for (const prop of node2.props) {
          if (prop.type === 7 && (prop.name === "bind" || prop.name === "model") && (prop.name === "model" || ((_a = prop.arg) === null || _a === void 0 ? void 0 : _a.type) === 4) && (!prop.exp || prop.exp.type === 4)) {
            const isStatic = !prop.arg || prop.arg.type === 4 && prop.arg.isStatic;
            let propName_1 = ((_b = prop.arg) === null || _b === void 0 ? void 0 : _b.type) === 4 ? prop.arg.constType === 3 ? prop.arg.content : prop.arg.loc.source : getModelValuePropName(node2, isVue2);
            if (prop.modifiers.some((m) => m === "prop" || m === "attr")) {
              propName_1 = propName_1.substring(1);
            }
            const propName_2 = !isStatic ? propName_1 : (0, shared_1.hyphenate)(propName_1) === propName_1 ? (0, shared_1.camelize)(propName_1) : propName_1;
            if (forRemainStyleOrClass && propName_2 !== "style" && propName_2 !== "class")
              continue;
            if (propName_2 === "style" || propName_2 === "class") {
              const index = propName_2 === "style" ? styleCount++ : classCount++;
              if (index >= 1 !== forRemainStyleOrClass)
                continue;
            }
            if (((_c = prop.arg) === null || _c === void 0 ? void 0 : _c.type) === 4) {
              attrNames.add(prop.arg.content);
            }
            writePropStart(isStatic);
            const diagStart = tsCodeGen.getText().length;
            if (!prop.arg) {
              writePropName(propName_1, isStatic, {
                start: prop.loc.start.offset,
                end: prop.loc.start.offset + "v-model".length
              }, {
                vueTag: "template",
                capabilities: getCaps(capabilitiesSet.attr)
              });
            } else if (((_d = prop.exp) === null || _d === void 0 ? void 0 : _d.constType) === 3) {
              writePropName(propName_2, isStatic, {
                start: prop.arg.loc.start.offset,
                end: prop.arg.loc.start.offset + propName_1.length
              }, {
                vueTag: "template",
                capabilities: getCaps(capabilitiesSet.attr),
                normalizeNewName: shared_1.camelize,
                applyNewName: keepHyphenateName
              });
            } else {
              writePropName(propName_2, isStatic, {
                start: prop.arg.loc.start.offset,
                end: prop.arg.loc.end.offset
              }, {
                vueTag: "template",
                capabilities: getCaps(capabilitiesSet.attr),
                normalizeNewName: shared_1.camelize,
                applyNewName: keepHyphenateName
              });
            }
            writePropValuePrefix(isStatic);
            if (prop.exp && !(prop.exp.constType === 3)) {
              writeInterpolation(prop.exp.loc.source, prop.exp.loc.start.offset, {
                vueTag: "template",
                capabilities: getCaps(capabilitiesSet.all)
              }, "(", ")");
              const fb = getFormatBrackets(formatBrackets.round);
              if (fb) {
                writeFormatCode(prop.exp.loc.source, prop.exp.loc.start.offset, fb);
              }
            } else {
              tsCodeGen.addText("undefined");
            }
            writePropValueSuffix(isStatic);
            addMapping(tsCodeGen, {
              sourceRange: {
                start: prop.loc.start.offset,
                end: prop.loc.end.offset
              },
              mappedRange: {
                start: diagStart,
                end: tsCodeGen.getText().length
              },
              mode: SourceMaps.Mode.Totally,
              data: {
                vueTag: "template",
                capabilities: getCaps(capabilitiesSet.diagnosticOnly)
              }
            });
            writePropEnd(isStatic);
            if (prop.arg && propName_1 !== propName_2) {
              writePropStart(isStatic);
              writePropName(propName_1, isStatic, {
                start: prop.arg.loc.start.offset,
                end: prop.arg.loc.end.offset
              }, {
                vueTag: "template",
                capabilities: getCaps(capabilitiesSet.attr),
                normalizeNewName: shared_1.camelize,
                applyNewName: keepHyphenateName
              });
              writePropValuePrefix(isStatic);
              if (prop.exp) {
                writeInterpolation(prop.exp.loc.source, void 0, void 0, "(", ")");
              } else {
                tsCodeGen.addText("undefined");
              }
              writePropValueSuffix(isStatic);
              writePropEnd(isStatic);
            }
          } else if (prop.type === 6) {
            const propName = (0, shared_1.hyphenate)(prop.name) === prop.name ? (0, shared_1.camelize)(prop.name) : prop.name;
            const propName2 = prop.name;
            if (forRemainStyleOrClass && propName !== "style" && propName !== "class")
              continue;
            if (propName === "style" || propName === "class") {
              const index = propName === "style" ? styleCount++ : classCount++;
              if (index >= 1 !== forRemainStyleOrClass)
                continue;
            }
            attrNames.add(prop.name);
            writePropStart(true);
            const diagStart = tsCodeGen.getText().length;
            writePropName(propName, true, {
              start: prop.loc.start.offset,
              end: prop.loc.start.offset + propName2.length
            }, {
              vueTag: "template",
              capabilities: getCaps(capabilitiesSet.attr),
              normalizeNewName: shared_1.camelize,
              applyNewName: keepHyphenateName
            });
            writePropValuePrefix(true);
            if (prop.value) {
              writeAttrValue(prop.value);
            } else {
              tsCodeGen.addText("true");
            }
            writePropValueSuffix(true);
            writePropEnd(true);
            const diagEnd = tsCodeGen.getText().length;
            addMapping(tsCodeGen, {
              sourceRange: {
                start: prop.loc.start.offset,
                end: prop.loc.end.offset
              },
              mappedRange: {
                start: diagStart,
                end: diagEnd
              },
              mode: SourceMaps.Mode.Totally,
              data: {
                vueTag: "template",
                capabilities: getCaps(capabilitiesSet.diagnosticOnly)
              }
            });
            if (propName2 !== propName) {
              writePropStart(true);
              writePropName(propName2, true, {
                start: prop.loc.start.offset,
                end: prop.loc.start.offset + propName2.length
              }, {
                vueTag: "template",
                capabilities: getCaps(capabilitiesSet.attr),
                normalizeNewName: shared_1.camelize,
                applyNewName: keepHyphenateName
              });
              writePropValuePrefix(true);
              if (prop.value) {
                writeAttrValue(prop.value);
              } else {
                tsCodeGen.addText("true");
              }
              writePropValueSuffix(true);
              writePropEnd(true);
            }
          } else if (prop.type === 7 && prop.name === "bind" && !prop.arg && ((_e = prop.exp) === null || _e === void 0 ? void 0 : _e.type) === 4) {
            if (forRemainStyleOrClass) {
              continue;
            }
            if (mode === "props")
              tsCodeGen.addText("{...");
            else
              tsCodeGen.addText("...");
            writeInterpolation(prop.exp.content, prop.exp.loc.start.offset, {
              vueTag: "template",
              capabilities: getCaps(capabilitiesSet.all)
            }, "(", ")");
            const fb = getFormatBrackets(formatBrackets.round);
            if (fb) {
              writeFormatCode(prop.exp.content, prop.exp.loc.start.offset, fb);
            }
            if (mode === "props")
              tsCodeGen.addText("} ");
            else
              tsCodeGen.addText(", ");
          } else {
            if (forRemainStyleOrClass) {
              continue;
            }
          }
        }
        return { hasRemainStyleOrClass: styleCount >= 2 || classCount >= 2 };
        function writePropName(name, isStatic, sourceRange, data) {
          if (mode === "props" && isStatic) {
            writeCode(name, sourceRange, SourceMaps.Mode.Offset, data);
          } else {
            writeObjectProperty(name, sourceRange, SourceMaps.Mode.Offset, data);
          }
        }
        function writePropValuePrefix(isStatic) {
          if (mode === "props" && isStatic) {
            tsCodeGen.addText("={");
          } else {
            tsCodeGen.addText(": (");
          }
        }
        function writePropValueSuffix(isStatic) {
          if (mode === "props" && isStatic) {
            tsCodeGen.addText("}");
          } else {
            tsCodeGen.addText(")");
          }
        }
        function writePropStart(isStatic) {
          if (mode === "props" && !isStatic) {
            tsCodeGen.addText("{...{");
          }
        }
        function writePropEnd(isStatic) {
          if (mode === "props" && isStatic) {
            tsCodeGen.addText(" ");
          } else if (mode === "props" && !isStatic) {
            tsCodeGen.addText("}} ");
          } else {
            tsCodeGen.addText(", ");
          }
        }
        function getCaps(caps) {
          if (mode === "props") {
            return caps;
          } else {
            return {
              references: caps.references,
              rename: caps.rename
            };
          }
        }
        function getFormatBrackets(b) {
          if (mode === "props") {
            return b;
          } else {
            return void 0;
          }
        }
        function writeAttrValue(attrNode) {
          tsCodeGen.addText('"');
          let start = attrNode.loc.start.offset;
          let end = attrNode.loc.end.offset;
          if (end - start > attrNode.content.length) {
            start++;
            end--;
          }
          writeCode(toUnicode(attrNode.content), { start, end }, SourceMaps.Mode.Offset, {
            vueTag: "template",
            capabilities: getCaps(capabilitiesSet.all)
          });
          tsCodeGen.addText('"');
        }
      }
      function writeInlineCss(node2) {
        var _a, _b, _c;
        for (const prop of node2.props) {
          if (prop.type === 7 && prop.name === "bind" && ((_a = prop.arg) === null || _a === void 0 ? void 0 : _a.type) === 4 && ((_b = prop.exp) === null || _b === void 0 ? void 0 : _b.type) === 4 && prop.arg.content === "style" && prop.exp.constType === 3) {
            const endCrt = prop.arg.loc.source[prop.arg.loc.source.length - 1];
            const start = prop.arg.loc.source.indexOf(endCrt) + 1;
            const end = prop.arg.loc.source.lastIndexOf(endCrt);
            const content = prop.arg.loc.source.substring(start, end);
            const sourceRange = {
              start: prop.arg.loc.start.offset + start,
              end: prop.arg.loc.start.offset + end
            };
            const newStart = (_c = htmlToTemplate(sourceRange.start, sourceRange.end)) === null || _c === void 0 ? void 0 : _c.start;
            if (newStart === void 0)
              continue;
            const offset = newStart - sourceRange.start;
            sourceRange.start += offset;
            sourceRange.end += offset;
            cssCodeGen.addText(`${node2.tag} { `);
            cssCodeGen.addCode(content, sourceRange, SourceMaps.Mode.Offset, {
              vueTag: "template",
              capabilities: {
                basic: true,
                references: true,
                definitions: true,
                diagnostic: true,
                rename: true,
                completion: true,
                semanticTokens: true
              }
            });
            cssCodeGen.addText(` }
`);
          }
        }
      }
      function writeImportSlots(node2, parentEl, slotBlockVars) {
        var _a, _b;
        for (const prop of node2.props) {
          if (prop.type === 7 && prop.name === "slot") {
            const varComponentInstance = `__VLS_${elementIndex++}`;
            const varSlots = `__VLS_${elementIndex++}`;
            tsCodeGen.addText(`const ${varComponentInstance} = new ${tagResolves[parentEl.tag].slotsComponent}({ `);
            writeProps(parentEl, false, "slots");
            tsCodeGen.addText(`});
`);
            tsCodeGen.addText(`declare const ${varSlots}: typeof ${tagResolves[parentEl.tag].slots} & __VLS_types.ScriptSlots<typeof ${varComponentInstance}>;
`);
            if (((_a = prop.exp) === null || _a === void 0 ? void 0 : _a.type) === 4) {
              tsCodeGen.addText(`const `);
              const collentAst = ts.createSourceFile("/foo.ts", `const ${prop.exp.content}`, ts.ScriptTarget.ESNext);
              (0, transform_1.colletVars)(ts, collentAst, slotBlockVars);
              writeCode(prop.exp.content, {
                start: prop.exp.loc.start.offset,
                end: prop.exp.loc.end.offset
              }, SourceMaps.Mode.Offset, {
                vueTag: "template",
                capabilities: capabilitiesSet.all
              });
              writeFormatCode(prop.exp.content, prop.exp.loc.start.offset, formatBrackets.round);
              tsCodeGen.addText(` = `);
            }
            let slotName = "default";
            let isStatic = true;
            if (((_b = prop.arg) === null || _b === void 0 ? void 0 : _b.type) === 4 && prop.arg.content !== "") {
              isStatic = prop.arg.isStatic;
              slotName = prop.arg.content;
            }
            const diagStart = tsCodeGen.getText().length;
            tsCodeGen.addText(varSlots);
            const argRange = prop.arg ? {
              start: prop.arg.loc.start.offset,
              end: prop.arg.loc.end.offset
            } : {
              start: prop.loc.start.offset,
              end: prop.loc.start.offset + prop.loc.source.split("=")[0].length
            };
            if (isStatic) {
              writePropertyAccess(slotName, argRange, {
                vueTag: "template",
                capabilities: capabilitiesSet.slotName
              }, false);
            } else {
              tsCodeGen.addText(`[`);
              writeInterpolation(slotName, argRange.start + 1, {
                vueTag: "template",
                capabilities: capabilitiesSet.all
              }, "", "");
              tsCodeGen.addText(`]`);
            }
            const diagEnd = tsCodeGen.getText().length;
            addMapping(tsCodeGen, {
              mappedRange: {
                start: diagStart,
                end: diagEnd
              },
              sourceRange: argRange,
              mode: SourceMaps.Mode.Totally,
              data: {
                vueTag: "template",
                capabilities: capabilitiesSet.diagnosticOnly
              }
            });
            tsCodeGen.addText(`;
`);
          }
        }
      }
      function writeDirectives(node2) {
        var _a;
        for (const prop of node2.props) {
          if (prop.type === 7 && prop.name !== "slot" && prop.name !== "on" && prop.name !== "model" && prop.name !== "bind") {
            const diagStart = tsCodeGen.getText().length;
            tsCodeGen.addText(`__VLS_types.directiveFunction(__VLS_ctx.`);
            writeCode((0, shared_1.camelize)("v-" + prop.name), {
              start: prop.loc.start.offset,
              end: prop.loc.start.offset + "v-".length + prop.name.length
            }, SourceMaps.Mode.Offset, {
              vueTag: "template",
              capabilities: capabilitiesSet.noDiagnostic,
              normalizeNewName: shared_1.camelize,
              applyNewName: keepHyphenateName
            });
            identifiers.add((0, shared_1.camelize)("v-" + prop.name));
            tsCodeGen.addText(`)(`);
            if (((_a = prop.exp) === null || _a === void 0 ? void 0 : _a.type) === 4) {
              writeInterpolation(prop.exp.content, prop.exp.loc.start.offset, {
                vueTag: "template",
                capabilities: capabilitiesSet.all
              }, "(", ")");
              writeFormatCode(prop.exp.content, prop.exp.loc.start.offset, formatBrackets.round);
            }
            tsCodeGen.addText(`)`);
            addMapping(tsCodeGen, {
              sourceRange: {
                start: prop.loc.start.offset,
                end: prop.loc.end.offset
              },
              mappedRange: {
                start: diagStart,
                end: tsCodeGen.getText().length
              },
              mode: SourceMaps.Mode.Totally,
              data: {
                vueTag: "template",
                capabilities: capabilitiesSet.diagnosticOnly
              }
            });
            tsCodeGen.addText(`;
`);
          }
        }
      }
      function writeElReferences(node2) {
        for (const prop of node2.props) {
          if (prop.type === 6 && prop.name === "ref" && prop.value) {
            tsCodeGen.addText(`// @ts-ignore
`);
            writeInterpolation(prop.value.content, prop.value.loc.start.offset + 1, {
              vueTag: "template",
              capabilities: capabilitiesSet.refAttr
            }, "(", ")");
            tsCodeGen.addText(`;
`);
          }
        }
      }
      function writeClassScopeds(node2) {
        var _a, _b;
        for (const prop of node2.props) {
          if (prop.type === 6 && prop.name === "class" && prop.value) {
            let startOffset = prop.value.loc.start.offset;
            let tempClassName = "";
            for (const char of prop.value.loc.source + " ") {
              if (char.trim() === "" || char === '"' || char === "'") {
                if (tempClassName !== "") {
                  scopedClasses.push({ className: tempClassName, offset: startOffset });
                  startOffset += tempClassName.length;
                  tempClassName = "";
                }
                startOffset += char.length;
              } else {
                tempClassName += char;
              }
            }
          } else if (prop.type === 7 && ((_a = prop.arg) === null || _a === void 0 ? void 0 : _a.type) === 4 && ((_b = prop.exp) === null || _b === void 0 ? void 0 : _b.type) === 4 && prop.arg.content === "class") {
            tsCodeGen.addText(`__VLS_styleScopedClasses = (`);
            writeCode(prop.exp.content, {
              start: prop.exp.loc.start.offset,
              end: prop.exp.loc.end.offset
            }, SourceMaps.Mode.Offset, {
              vueTag: "template",
              capabilities: capabilitiesSet.scopedClassName
            });
            tsCodeGen.addText(`);
`);
          }
        }
      }
      function writeSlots(node2) {
        var _a, _b, _c;
        if (node2.tag !== "slot")
          return;
        const varDefaultBind = `__VLS_${elementIndex++}`;
        const varBinds = `__VLS_${elementIndex++}`;
        const varSlot = `__VLS_${elementIndex++}`;
        const slotName = getSlotName();
        const slotNameExp = getSlotNameExp();
        let hasDefaultBind = false;
        for (const prop of node2.props) {
          if (prop.type === 7 && !prop.arg && ((_a = prop.exp) === null || _a === void 0 ? void 0 : _a.type) === 4) {
            hasDefaultBind = true;
            tsCodeGen.addText(`const ${varDefaultBind} = `);
            writeInterpolation(prop.exp.content, prop.exp.loc.start.offset, {
              vueTag: "template",
              capabilities: capabilitiesSet.attrReference
            }, "(", ")");
            tsCodeGen.addText(`;
`);
            break;
          }
        }
        tsCodeGen.addText(`const ${varBinds} = {
`);
        for (const prop of node2.props) {
          if (prop.type === 7 && ((_b = prop.arg) === null || _b === void 0 ? void 0 : _b.type) === 4 && ((_c = prop.exp) === null || _c === void 0 ? void 0 : _c.type) === 4 && prop.arg.content !== "name") {
            writeObjectProperty(prop.arg.content, {
              start: prop.arg.loc.start.offset,
              end: prop.arg.loc.end.offset
            }, SourceMaps.Mode.Offset, {
              vueTag: "template",
              normalizeNewName: shared_1.camelize,
              applyNewName: keepHyphenateName,
              capabilities: capabilitiesSet.attrReference
            });
            tsCodeGen.addText(`: `);
            writeInterpolation(prop.exp.content, prop.exp.loc.start.offset, {
              vueTag: "template",
              capabilities: capabilitiesSet.attrReference
            }, "(", ")");
            tsCodeGen.addText(`,
`);
          } else if (prop.type === 6 && prop.name !== "name") {
            const propValue = prop.value !== void 0 ? `"${toUnicode(prop.value.content)}"` : "true";
            writeObjectProperty(prop.name, {
              start: prop.loc.start.offset,
              end: prop.loc.start.offset + prop.name.length
            }, SourceMaps.Mode.Offset, {
              vueTag: "template",
              normalizeNewName: shared_1.camelize,
              applyNewName: keepHyphenateName,
              capabilities: capabilitiesSet.attr
            });
            tsCodeGen.addText(`: (`);
            tsCodeGen.addText(propValue);
            tsCodeGen.addText(`),
`);
          }
        }
        tsCodeGen.addText(`};
`);
        if (hasDefaultBind) {
          tsCodeGen.addText(`var ${varSlot}!: typeof ${varDefaultBind} & typeof ${varBinds};
`);
        } else {
          tsCodeGen.addText(`var ${varSlot}!: typeof ${varBinds};
`);
        }
        if (slotNameExp) {
          const varSlotExp = `__VLS_${elementIndex++}`;
          const varSlotExp2 = `__VLS_${elementIndex++}`;
          tsCodeGen.addText(`const ${varSlotExp} = ${slotNameExp};
`);
          tsCodeGen.addText(`var ${varSlotExp2}!: typeof ${varSlotExp};
`);
          slotExps.set(varSlotExp2, {
            varName: varSlot,
            loc: {
              start: node2.loc.start.offset + node2.loc.source.indexOf(node2.tag),
              end: node2.loc.start.offset + node2.loc.source.indexOf(node2.tag) + node2.tag.length
            }
          });
        } else {
          slots.set(slotName, {
            varName: varSlot,
            loc: {
              start: node2.loc.start.offset + node2.loc.source.indexOf(node2.tag),
              end: node2.loc.start.offset + node2.loc.source.indexOf(node2.tag) + node2.tag.length
            }
          });
        }
        function getSlotName() {
          for (const prop2 of node2.props) {
            if (prop2.name === "name" && prop2.type === 6 && prop2.value) {
              if (prop2.value.content) {
                return prop2.value.content;
              }
            }
          }
          return "default";
        }
        function getSlotNameExp() {
          var _a2, _b2;
          for (const prop2 of node2.props) {
            if (prop2.type === 7 && prop2.name === "bind" && ((_a2 = prop2.arg) === null || _a2 === void 0 ? void 0 : _a2.type) === 4 && prop2.arg.content === "name") {
              if (((_b2 = prop2.exp) === null || _b2 === void 0 ? void 0 : _b2.type) === 4) {
                return prop2.exp.content;
              } else {
                return `'default'`;
              }
            }
          }
        }
      }
      function writeObjectProperty2(mapCode, sourceRanges, data) {
        const sourceRange = sourceRanges[0];
        const mode = writeObjectProperty(mapCode, sourceRange, SourceMaps.Mode.Offset, data);
        for (let i = 1; i < sourceRanges.length; i++) {
          const sourceRange2 = sourceRanges[i];
          if (mode === 1) {
            addMapping(tsCodeGen, {
              sourceRange: sourceRange2,
              mappedRange: {
                start: tsCodeGen.getText().length - mapCode.length,
                end: tsCodeGen.getText().length
              },
              mode: SourceMaps.Mode.Offset,
              data
            });
          } else if (mode === 2) {
            addMapping(tsCodeGen, {
              sourceRange: sourceRange2,
              mappedRange: {
                start: tsCodeGen.getText().length - `'${mapCode}'`.length,
                end: tsCodeGen.getText().length - `'`.length
              },
              mode: SourceMaps.Mode.Offset,
              additional: [
                {
                  sourceRange: sourceRange2,
                  mappedRange: {
                    start: tsCodeGen.getText().length - `'${mapCode}'`.length,
                    end: tsCodeGen.getText().length
                  },
                  mode: SourceMaps.Mode.Totally
                }
              ],
              data
            });
          }
        }
      }
      function writeObjectProperty(mapCode, sourceRange, mapMode, data) {
        if (validTsVar.test(mapCode)) {
          writeCode(mapCode, sourceRange, mapMode, data);
          return 1;
        } else if (mapCode.startsWith("[") && mapCode.endsWith("]")) {
          writeInterpolation(mapCode, sourceRange.start, data, "", "");
          return 1;
        } else {
          writeCodeWithQuotes(mapCode, sourceRange, data);
          return 2;
        }
      }
      function writePropertyAccess2(mapCode, sourceRanges, data) {
        const sourceRange = sourceRanges[0];
        const mode = writePropertyAccess(mapCode, sourceRange, data);
        for (let i = 1; i < sourceRanges.length; i++) {
          const sourceRange2 = sourceRanges[i];
          if (mode === 1 || mode === 2) {
            addMapping(tsCodeGen, {
              sourceRange: sourceRange2,
              mappedRange: {
                start: tsCodeGen.getText().length - mapCode.length,
                end: tsCodeGen.getText().length
              },
              mode: sourceRange2.end - sourceRange2.start === mapCode.length ? SourceMaps.Mode.Offset : SourceMaps.Mode.Expand,
              data
            });
          } else if (mode === 3) {
            addMapping(tsCodeGen, {
              sourceRange: sourceRange2,
              mappedRange: {
                start: tsCodeGen.getText().length - `['${mapCode}']`.length,
                end: tsCodeGen.getText().length - `']`.length
              },
              mode: SourceMaps.Mode.Offset,
              additional: [
                {
                  sourceRange: sourceRange2,
                  mappedRange: {
                    start: tsCodeGen.getText().length - `'${mapCode}']`.length,
                    end: tsCodeGen.getText().length - `]`.length
                  },
                  mode: SourceMaps.Mode.Totally
                }
              ],
              data
            });
          }
        }
      }
      function writePropertyAccess(mapCode, sourceRange, data, checkValid = true) {
        if (checkValid && validTsVar.test(mapCode)) {
          tsCodeGen.addText(`.`);
          if (sourceRange.end - sourceRange.start === mapCode.length) {
            writeCode(mapCode, sourceRange, SourceMaps.Mode.Offset, data);
          } else {
            writeCode(mapCode, sourceRange, SourceMaps.Mode.Expand, data);
          }
          return 1;
        } else if (mapCode.startsWith("[") && mapCode.endsWith("]")) {
          writeCode(mapCode, sourceRange, SourceMaps.Mode.Offset, data);
          return 2;
        } else {
          tsCodeGen.addText(`[`);
          writeCodeWithQuotes(mapCode, sourceRange, data);
          tsCodeGen.addText(`]`);
          return 3;
        }
      }
      function writeCodeWithQuotes(mapCode, sourceRanges, data) {
        const addText = `'${mapCode}'`;
        for (const sourceRange of "length" in sourceRanges ? sourceRanges : [sourceRanges]) {
          addMapping(tsCodeGen, {
            sourceRange,
            mappedRange: {
              start: tsCodeGen.getText().length + 1,
              end: tsCodeGen.getText().length + addText.length - 1
            },
            mode: SourceMaps.Mode.Offset,
            additional: [
              {
                sourceRange,
                mappedRange: {
                  start: tsCodeGen.getText().length,
                  end: tsCodeGen.getText().length + addText.length
                },
                mode: SourceMaps.Mode.Totally
              }
            ],
            data
          });
        }
        tsCodeGen.addText(addText);
      }
      function writeInterpolation(mapCode, sourceOffset, data, prefix2, suffix) {
        (0, transform_1.walkInterpolationFragment)(ts, prefix2 + mapCode + suffix, (frag, fragOffset, lastCtxAccess) => {
          if (fragOffset === void 0) {
            tsCodeGen.addText(frag);
          } else {
            fragOffset -= prefix2.length;
            let addSubfix = "";
            const overLength = fragOffset + frag.length - mapCode.length;
            if (overLength > 0) {
              addSubfix = frag.substring(frag.length - overLength);
              frag = frag.substring(0, frag.length - overLength);
            }
            if (fragOffset < 0) {
              tsCodeGen.addText(frag.substring(0, -fragOffset));
              frag = frag.substring(-fragOffset);
              fragOffset = 0;
            }
            if (sourceOffset !== void 0 && data !== void 0) {
              if (lastCtxAccess && data.capabilities.diagnostic) {
                tsCodeGen.addMapping2({
                  data: {
                    vueTag: data.vueTag,
                    capabilities: {
                      diagnostic: true
                    }
                  },
                  mode: SourceMaps.Mode.Totally,
                  sourceRange: {
                    start: sourceOffset + fragOffset,
                    end: sourceOffset + fragOffset + lastCtxAccess.varLength
                  },
                  mappedRange: {
                    start: tsCodeGen.getText().length - lastCtxAccess.ctxText.length,
                    end: tsCodeGen.getText().length + lastCtxAccess.varLength
                  }
                });
              }
              writeCode(frag, {
                start: sourceOffset + fragOffset,
                end: sourceOffset + fragOffset + frag.length
              }, SourceMaps.Mode.Offset, data);
            } else {
              tsCodeGen.addText(frag);
            }
            tsCodeGen.addText(addSubfix);
          }
        }, localVars, identifiers);
      }
      function writeFormatCode(mapCode, sourceOffset, formatWrapper) {
        tsFormatCodeGen.addText(formatWrapper[0]);
        const targetRange = tsFormatCodeGen.addText(mapCode);
        addMapping(tsFormatCodeGen, {
          mappedRange: targetRange,
          sourceRange: {
            start: sourceOffset,
            end: sourceOffset + mapCode.length
          },
          mode: SourceMaps.Mode.Offset,
          data: {
            vueTag: "template",
            capabilities: {}
          }
        });
        tsFormatCodeGen.addText(formatWrapper[1]);
        tsFormatCodeGen.addText(`
;
`);
      }
      function writeCode(mapCode, sourceRange, mode, data) {
        const targetRange = tsCodeGen.addText(mapCode);
        addMapping(tsCodeGen, {
          sourceRange,
          mappedRange: targetRange,
          mode,
          data
        });
      }
      function addMapping(gen, mapping) {
        var _a, _b;
        const newMapping = Object.assign({}, mapping);
        const templateStart = (_a = htmlToTemplate(mapping.sourceRange.start, mapping.sourceRange.end)) === null || _a === void 0 ? void 0 : _a.start;
        if (templateStart === void 0)
          return;
        const offset = templateStart - mapping.sourceRange.start;
        newMapping.sourceRange = {
          start: mapping.sourceRange.start + offset,
          end: mapping.sourceRange.end + offset
        };
        if (mapping.additional) {
          newMapping.additional = [];
          for (const other of mapping.additional) {
            let otherTemplateStart = (_b = htmlToTemplate(other.sourceRange.start, other.sourceRange.end)) === null || _b === void 0 ? void 0 : _b.start;
            if (otherTemplateStart === void 0)
              continue;
            const otherOffset = otherTemplateStart - other.sourceRange.start;
            newMapping.additional.push(Object.assign(Object.assign({}, other), { sourceRange: {
              start: other.sourceRange.start + otherOffset,
              end: other.sourceRange.end + otherOffset
            } }));
          }
        }
        gen.addMapping2(newMapping);
      }
    }
    exports2.generate = generate2;
    function toUnicode(str) {
      return str.split("").map((value) => {
        var temp = value.charCodeAt(0).toString(16).padStart(4, "0");
        if (temp.length > 2) {
          return "\\u" + temp;
        }
        return value;
      }).join("");
    }
    function unHyphenatComponentName(newName) {
      return (0, shared_1.camelize)("-" + newName);
    }
    function keepHyphenateName(oldName, newName) {
      if (oldName === (0, shared_1.hyphenate)(oldName)) {
        return (0, shared_1.hyphenate)(newName);
      }
      return newName;
    }
    function getModelValuePropName(node2, isVue2) {
      var _a;
      const tag2 = node2.tag;
      const typeAttr = node2.props.find((prop) => prop.type === 6 && prop.name === "type");
      const type = (_a = typeAttr === null || typeAttr === void 0 ? void 0 : typeAttr.value) === null || _a === void 0 ? void 0 : _a.content;
      if (tag2 === "input" && type === "checkbox")
        return "checked";
      if (tag2 === "input" && type === "radio")
        return "__VLS_radioBinding";
      if (tag2 === "input" || tag2 === "textarea" || tag2 === "select" || isVue2)
        return "value";
      return "modelValue";
    }
    function getPatchForSlotNode(node2) {
      const forDirective = node2.props.find((prop) => prop.type === 7 && prop.name === "for");
      if (forDirective) {
        let forNode;
        CompilerCore.processFor(node2, forDirective, exports2.transformContext, (_forNode) => {
          forNode = Object.assign({}, _forNode);
          return void 0;
        });
        if (forNode) {
          forNode.children = [Object.assign(Object.assign({}, node2), { props: node2.props.filter((prop) => prop !== forDirective) })];
          return forNode;
        }
      }
    }
    exports2.getPatchForSlotNode = getPatchForSlotNode;
    function notEmpty(value) {
      return value !== null && value !== void 0;
    }
  }
});

// ../../packages/vue-typescript/out/use/useSfcTemplateScript.js
var require_useSfcTemplateScript = __commonJS({
  "../../packages/vue-typescript/out/use/useSfcTemplateScript.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.useSfcTemplateScript = void 0;
    var code_gen_1 = require_out2();
    var templateGen = require_template();
    var reactivity_1 = require_reactivity();
    var sourceMaps_1 = require_sourceMaps();
    var string_1 = require_string();
    var SourceMaps = require_out();
    var path3 = require("path");
    var transform_1 = require_transform();
    var localTypes_1 = require_localTypes();
    function useSfcTemplateScript(ts, fileName, template, script, scriptSetup, scriptSetupRanges, styles, styleFiles, styleEmbeddeds, templateData, sfcTemplateCompileResult, sfcStyles, scriptLang, compilerOptions, baseCssModuleType, getCssVBindRanges, getCssClasses, isVue2, disableTemplateScript) {
      const baseFileName = path3.basename(fileName);
      const cssModuleClasses = (0, reactivity_1.computed)(() => styleFiles.value.reduce((obj, style) => {
        if (style.data.module) {
          const classes = getCssClasses(style);
          obj[style.data.module] = { [style.fileName]: classes };
        }
        return obj;
      }, {}));
      const cssScopedClasses = (0, reactivity_1.computed)(() => {
        var _a;
        const obj = {};
        const setting = (_a = compilerOptions.experimentalResolveStyleCssClasses) !== null && _a !== void 0 ? _a : "scoped";
        for (const style of styleFiles.value) {
          if (setting === "scoped" && style.data.scoped || setting === "always") {
            const classes = getCssClasses(style);
            obj[style.fileName] = classes;
          }
        }
        return obj;
      });
      const templateCodeGens = (0, reactivity_1.computed)(() => {
        var _a;
        if (!templateData.value)
          return;
        if (!((_a = sfcTemplateCompileResult.value) === null || _a === void 0 ? void 0 : _a.ast))
          return;
        return templateGen.generate(ts, templateData.value.lang, sfcTemplateCompileResult.value.ast, compilerOptions.experimentalCompatMode === 2, Object.values(cssScopedClasses.value).map((map2) => Object.keys(map2)).flat(), templateData.value.htmlToTemplate, !!scriptSetup.value, {
          getEmitCompletion: string_1.SearchTexts.EmitCompletion,
          getPropsCompletion: string_1.SearchTexts.PropsCompletion
        });
      });
      const data = (0, reactivity_1.computed)(() => {
        const codeGen = new code_gen_1.CodeGen();
        codeGen.addText(`import * as __VLS_types from './__VLS_types';
`);
        if (script.value || scriptSetup.value) {
          codeGen.addText(`import { __VLS_options, __VLS_name } from './${baseFileName}.__VLS_script';
`);
          codeGen.addText(`import __VLS_component from './${baseFileName}.__VLS_script';
`);
        } else {
          codeGen.addText(`var __VLS_name = undefined;
`);
          codeGen.addText(`var __VLS_options = {};
`);
          codeGen.addText(`var __VLS_component = (await import('${(0, localTypes_1.getVueLibraryName)(isVue2)}')).defineComponent({});
`);
        }
        writeImportTypes();
        codeGen.addText(`declare var __VLS_ctx: InstanceType<typeof __VLS_component> & {
`);
        const cssModuleMappingsArr = [];
        for (const moduleName in cssModuleClasses.value) {
          const moduleClasses = cssModuleClasses.value[moduleName];
          codeGen.addText(`${moduleName}: ${baseCssModuleType} & {
`);
          cssModuleMappingsArr.push(writeCssClassProperties(moduleClasses, true, "string", false));
          codeGen.addText("};\n");
        }
        codeGen.addText(`};
`);
        codeGen.addText(`declare var __VLS_vmUnwrap: typeof __VLS_options & { components: { } };
`);
        codeGen.addText("/* Components */\n");
        codeGen.addText("declare var __VLS_otherComponents: NonNullable<typeof __VLS_component extends { components: infer C } ? C : {}> & __VLS_types.GlobalComponents & typeof __VLS_vmUnwrap.components & __VLS_types.PickComponents<typeof __VLS_ctx>;\n");
        codeGen.addText("declare var __VLS_ownComponent: __VLS_types.SelfComponent<typeof __VLS_name, typeof __VLS_component>;\n");
        codeGen.addText("declare var __VLS_allComponents: typeof __VLS_otherComponents & Omit<typeof __VLS_ownComponent, keyof typeof __VLS_otherComponents>;\n");
        codeGen.addText("declare var __VLS_rawComponents: __VLS_types.ConvertInvalidComponents<typeof __VLS_allComponents> & JSX.IntrinsicElements;\n");
        codeGen.addText(`__VLS_allComponents.${string_1.SearchTexts.Components};
`);
        codeGen.addText(`({} as __VLS_types.GlobalAttrs).${string_1.SearchTexts.GlobalAttrs};
`);
        codeGen.addText("/* Style Scoped */\n");
        codeGen.addText("type __VLS_StyleScopedClasses = {\n");
        const cssScopedMappings = writeCssClassProperties(cssScopedClasses.value, true, "boolean", true);
        codeGen.addText("};\n");
        codeGen.addText("declare var __VLS_styleScopedClasses: __VLS_StyleScopedClasses | keyof __VLS_StyleScopedClasses | (keyof __VLS_StyleScopedClasses)[];\n");
        codeGen.addText(`/* CSS variable injection */
`);
        writeCssVars();
        if (templateCodeGens.value) {
          (0, code_gen_1.mergeCodeGen)(codeGen, templateCodeGens.value.codeGen);
        }
        codeGen.addText(`export default __VLS_slots;
`);
        return {
          codeGen,
          cssModuleMappingsArr,
          cssScopedMappings
        };
        function writeImportTypes() {
          const bindingsArr = [];
          if (scriptSetupRanges.value && scriptSetup.value) {
            bindingsArr.push({
              typeBindings: scriptSetupRanges.value.typeBindings,
              content: scriptSetup.value.content
            });
          }
          codeGen.addText("import {\n");
          for (const bindings of bindingsArr) {
            for (const typeBinding of bindings.typeBindings) {
              const text = bindings.content.substring(typeBinding.start, typeBinding.end);
              codeGen.addText(`__VLS_types_${text} as ${text},
`);
            }
          }
          codeGen.addText(`} from './${baseFileName}.__VLS_script';
`);
        }
        function writeCssClassProperties(data2, patchRename, propertyType, optional) {
          const mappings = /* @__PURE__ */ new Map();
          for (const uri in data2) {
            const classes = data2[uri];
            if (!mappings.has(uri)) {
              mappings.set(uri, []);
            }
            for (const className2 in classes) {
              const ranges = classes[className2];
              mappings.get(uri).push({
                tsRange: {
                  start: codeGen.getText().length + 1,
                  end: codeGen.getText().length + 1 + className2.length
                },
                cssRanges: ranges,
                mode: SourceMaps.Mode.Offset,
                patchRename
              });
              mappings.get(uri).push({
                tsRange: {
                  start: codeGen.getText().length,
                  end: codeGen.getText().length + className2.length + 2
                },
                cssRanges: ranges,
                mode: SourceMaps.Mode.Totally,
                patchRename
              });
              codeGen.addText(`'${className2}'${optional ? "?" : ""}: ${propertyType},
`);
            }
          }
          return mappings;
        }
        function writeCssVars() {
          const emptyLocalVars = {};
          const identifiers = /* @__PURE__ */ new Set();
          for (let i = 0; i < sfcStyles.value.length; i++) {
            const style = sfcStyles.value[i];
            const binds = getCssVBindRanges(style);
            for (const cssBind of binds) {
              const bindText = style.content.substring(cssBind.start, cssBind.end);
              (0, transform_1.walkInterpolationFragment)(ts, bindText, (frag, fragOffset, lastCtxAccess) => {
                if (fragOffset === void 0) {
                  codeGen.addText(frag);
                } else {
                  if (lastCtxAccess) {
                    codeGen.addMapping2({
                      data: {
                        vueTag: "style",
                        vueTagIndex: i,
                        capabilities: {
                          diagnostic: true
                        }
                      },
                      mode: SourceMaps.Mode.Totally,
                      sourceRange: {
                        start: cssBind.start + fragOffset,
                        end: cssBind.start + fragOffset + lastCtxAccess.varLength
                      },
                      mappedRange: {
                        start: codeGen.getText().length - lastCtxAccess.ctxText.length,
                        end: codeGen.getText().length + lastCtxAccess.varLength
                      }
                    });
                  }
                  codeGen.addCode(frag, {
                    start: cssBind.start + fragOffset,
                    end: cssBind.start + fragOffset + frag.length
                  }, SourceMaps.Mode.Offset, {
                    vueTag: "style",
                    vueTagIndex: i,
                    capabilities: {
                      basic: true,
                      references: true,
                      definitions: true,
                      diagnostic: true,
                      rename: true,
                      completion: true,
                      semanticTokens: true
                    }
                  });
                }
              }, emptyLocalVars, identifiers);
              codeGen.addText(";\n");
            }
          }
        }
      });
      const embedded = (0, reactivity_1.computed)(() => {
        var _a, _b;
        if (!disableTemplateScript && file.value) {
          const sourceMap2 = new SourceMaps.SourceMapBase(data.value.codeGen.getMappings(parseMappingSourceRange));
          for (const [fileName2, mappings] of [
            ...data.value.cssModuleMappingsArr.flatMap((m) => [...m]),
            ...data.value.cssScopedMappings
          ]) {
            const cssSourceMap = (_a = styleEmbeddeds.value.find((embedded2) => embedded2.file.fileName === fileName2)) === null || _a === void 0 ? void 0 : _a.sourceMap;
            if (!cssSourceMap)
              continue;
            for (const mapped of mappings) {
              const tsRange = mapped.tsRange;
              for (const cssRange of mapped.cssRanges) {
                const vueRange = (_b = cssSourceMap.getSourceRange(cssRange.start, cssRange.end)) === null || _b === void 0 ? void 0 : _b[0];
                if (!vueRange)
                  continue;
                sourceMap2.mappings.push({
                  data: {
                    vueTag: "style",
                    capabilities: {
                      references: true,
                      rename: true,
                      referencesCodeLens: mapped.mode === SourceMaps.Mode.Totally
                    },
                    normalizeNewName: mapped.patchRename ? beforeCssRename : void 0,
                    applyNewName: mapped.patchRename ? doCssRename : void 0
                  },
                  mode: mapped.mode,
                  sourceRange: vueRange,
                  mappedRange: tsRange
                });
              }
            }
          }
          return {
            file: file.value,
            sourceMap: sourceMap2
          };
        }
      });
      const formatEmbedded = (0, reactivity_1.computed)(() => {
        if (templateCodeGens.value && formatFile.value) {
          const sourceMap2 = new sourceMaps_1.EmbeddedFileSourceMap(templateCodeGens.value.formatCodeGen.getMappings(parseMappingSourceRange));
          return {
            file: formatFile.value,
            sourceMap: sourceMap2
          };
        }
      });
      const inlineCssFile = (0, reactivity_1.computed)(() => {
        if (templateCodeGens.value) {
          const file2 = {
            fileName: fileName + ".template.css",
            lang: "css",
            content: templateCodeGens.value.cssCodeGen.getText(),
            capabilities: {
              diagnostics: false,
              foldingRanges: false,
              formatting: false,
              codeActions: false,
              documentSymbol: false,
              inlayHints: false
            },
            data: void 0,
            isTsHostFile: false
          };
          return file2;
        }
      });
      const inlineCssEmbedded = (0, reactivity_1.computed)(() => {
        if (templateCodeGens.value && inlineCssFile.value) {
          const sourceMap2 = new sourceMaps_1.EmbeddedFileSourceMap(templateCodeGens.value.cssCodeGen.getMappings(parseMappingSourceRange));
          return {
            file: inlineCssFile.value,
            sourceMap: sourceMap2
          };
        }
      });
      const file = (0, reactivity_1.computed)(() => {
        if (data.value) {
          const lang = scriptLang.value === "js" ? "jsx" : scriptLang.value === "ts" ? "tsx" : scriptLang.value;
          const embeddedFile = {
            fileName: fileName + ".__VLS_template." + lang,
            lang,
            content: data.value.codeGen.getText(),
            capabilities: {
              diagnostics: true,
              foldingRanges: false,
              formatting: false,
              documentSymbol: false,
              codeActions: false,
              inlayHints: true
            },
            data: void 0,
            isTsHostFile: true
          };
          return embeddedFile;
        }
      });
      const formatFile = (0, reactivity_1.computed)(() => {
        if (templateCodeGens.value) {
          const lang = scriptLang.value === "js" ? "jsx" : scriptLang.value === "ts" ? "tsx" : scriptLang.value;
          const embeddedFile = {
            fileName: fileName + ".__VLS_template.format." + lang,
            lang,
            content: templateCodeGens.value.formatCodeGen.getText(),
            capabilities: {
              diagnostics: false,
              foldingRanges: false,
              formatting: true,
              documentSymbol: true,
              codeActions: false,
              inlayHints: false
            },
            data: void 0,
            isTsHostFile: false
          };
          return embeddedFile;
        }
      });
      return {
        templateCodeGens,
        embedded,
        file,
        formatFile,
        formatEmbedded,
        inlineCssFile,
        inlineCssEmbedded
      };
      function parseMappingSourceRange(data2, range2) {
        var _a, _b;
        if ((data2 === null || data2 === void 0 ? void 0 : data2.vueTag) === "style" && (data2 === null || data2 === void 0 ? void 0 : data2.vueTagIndex) !== void 0) {
          return {
            start: styles.value[data2.vueTagIndex].startTagEnd + range2.start,
            end: styles.value[data2.vueTagIndex].startTagEnd + range2.end
          };
        }
        const templateOffset = (_b = (_a = template.value) === null || _a === void 0 ? void 0 : _a.startTagEnd) !== null && _b !== void 0 ? _b : 0;
        return {
          start: templateOffset + range2.start,
          end: templateOffset + range2.end
        };
      }
    }
    exports2.useSfcTemplateScript = useSfcTemplateScript;
    function beforeCssRename(newName) {
      return newName.startsWith(".") ? newName.slice(1) : newName;
    }
    function doCssRename(oldName, newName) {
      return "." + newName;
    }
  }
});

// ../../packages/vue-typescript/out/utils/parseCssVars.js
var require_parseCssVars = __commonJS({
  "../../packages/vue-typescript/out/utils/parseCssVars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseCssVars = void 0;
    function* parseCssVars2(styleContent) {
      var _a, _b;
      const reg = /\bv-bind\(\s*(?:'([^']+)'|"([^"]+)"|([^'"][^)]*))\s*\)/g;
      const matchs = styleContent.matchAll(reg);
      for (const match of matchs) {
        if (match.index !== void 0) {
          const matchText = (_b = (_a = match[1]) !== null && _a !== void 0 ? _a : match[2]) !== null && _b !== void 0 ? _b : match[3];
          if (matchText !== void 0) {
            const offset = match.index + styleContent.slice(match.index).indexOf(matchText);
            yield { start: offset, end: offset + matchText.length };
          }
        }
      }
    }
    exports2.parseCssVars = parseCssVars2;
  }
});

// ../../packages/vue-typescript/out/utils/untrack.js
var require_untrack = __commonJS({
  "../../packages/vue-typescript/out/utils/untrack.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.untrack = void 0;
    var reactivity_1 = require_reactivity();
    function untrack(source) {
      return (...args) => {
        (0, reactivity_1.pauseTracking)();
        const result2 = source(...args);
        (0, reactivity_1.resetTracking)();
        return result2;
      };
    }
    exports2.untrack = untrack;
  }
});

// ../../packages/vue-typescript/out/vueFile.js
var require_vueFile = __commonJS({
  "../../packages/vue-typescript/out/vueFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createVueFile = void 0;
    var vue_code_gen_1 = require_out3();
    var refSugarRanges_1 = require_refSugarRanges();
    var scriptRanges_1 = require_scriptRanges();
    var scriptSetupRanges_1 = require_scriptSetupRanges();
    var compiler_sfc_1 = (init_compiler_sfc_esm_browser(), __toCommonJS(compiler_sfc_esm_browser_exports));
    var reactivity_1 = require_reactivity();
    var useSfcCustomBlocks_1 = require_useSfcCustomBlocks();
    var useSfcScript_1 = require_useSfcScript();
    var useSfcScriptGen_1 = require_useSfcScriptGen();
    var useSfcStyles_1 = require_useSfcStyles();
    var useSfcTemplate_1 = require_useSfcTemplate();
    var useSfcTemplateScript_1 = require_useSfcTemplateScript();
    var parseCssVars_1 = require_parseCssVars();
    var string_1 = require_string();
    var untrack_1 = require_untrack();
    function createVueFile(fileName, _content, _version, plugins, compilerOptions, ts, baseCssModuleType, getCssClasses, tsLs, tsHost) {
      const content = (0, reactivity_1.ref)("");
      const version2 = (0, reactivity_1.ref)("");
      const sfc = (0, reactivity_1.reactive)({
        template: null,
        script: null,
        scriptSetup: null,
        styles: [],
        customBlocks: []
      });
      const lastUpdated = {
        template: false,
        script: false,
        scriptSetup: false
      };
      let templateScriptData = {
        projectVersion: void 0,
        components: [],
        componentItems: []
      };
      const cssVars = /* @__PURE__ */ new WeakMap();
      const parsedSfc = (0, reactivity_1.computed)(() => (0, compiler_sfc_1.parse)(content.value, { sourceMap: false, ignoreEmpty: false }));
      const sfcStyles = (0, useSfcStyles_1.useSfcStyles)(fileName, (0, reactivity_1.computed)(() => sfc.styles));
      const sfcCustomBlocks = (0, useSfcCustomBlocks_1.useSfcCustomBlocks)(fileName, (0, reactivity_1.computed)(() => sfc.customBlocks));
      const sfcTemplate = (0, useSfcTemplate_1.useSfcTemplate)(fileName, (0, reactivity_1.computed)(() => sfc.template));
      const sfcTemplateCompiled = (0, reactivity_1.computed)(() => {
        var _a;
        if (sfc.template) {
          for (const plugin2 of plugins) {
            const compiledHtml = (_a = plugin2.compileTemplate) === null || _a === void 0 ? void 0 : _a.call(plugin2, sfc.template.content, sfc.template.lang);
            if (compiledHtml) {
              return {
                lang: sfc.template.lang,
                htmlText: compiledHtml.html,
                htmlToTemplate: compiledHtml.mapping
              };
            }
            ;
          }
        }
      });
      const sfcTemplateCompileResult = (0, reactivity_1.computed)(() => {
        var _a;
        if (sfcTemplateCompiled.value) {
          return (0, vue_code_gen_1.compileSFCTemplate)(sfcTemplateCompiled.value.htmlText, compilerOptions.experimentalTemplateCompilerOptions, (_a = compilerOptions.experimentalCompatMode) !== null && _a !== void 0 ? _a : 3);
        }
      });
      const scriptAst = (0, reactivity_1.computed)(() => {
        if (sfc.script) {
          return ts.createSourceFile(fileName + "." + sfc.script.lang, sfc.script.content, ts.ScriptTarget.Latest);
        }
      });
      const scriptSetupAst = (0, reactivity_1.computed)(() => {
        if (sfc.scriptSetup) {
          return ts.createSourceFile(fileName + "." + sfc.scriptSetup.lang, sfc.scriptSetup.content, ts.ScriptTarget.Latest);
        }
      });
      const sfcScript = (0, useSfcScript_1.useSfcScript)(fileName, (0, reactivity_1.computed)(() => sfc.script));
      const sfcScriptSetup = (0, useSfcScript_1.useSfcScript)(fileName, (0, reactivity_1.computed)(() => sfc.scriptSetup));
      const scriptRanges = (0, reactivity_1.computed)(() => scriptAst.value ? (0, scriptRanges_1.parseScriptRanges)(ts, scriptAst.value, !!sfc.scriptSetup, false, false) : void 0);
      const scriptSetupRanges = (0, reactivity_1.computed)(() => scriptSetupAst.value ? (0, scriptSetupRanges_1.parseScriptSetupRanges)(ts, scriptSetupAst.value) : void 0);
      const scriptLang = (0, reactivity_1.computed)(() => {
        return !sfc.script && !sfc.scriptSetup ? "ts" : sfc.scriptSetup && sfc.scriptSetup.lang !== "js" ? sfc.scriptSetup.lang : sfc.script && sfc.script.lang !== "js" ? sfc.script.lang : "js";
      });
      const sfcTemplateScript = (0, useSfcTemplateScript_1.useSfcTemplateScript)(ts, fileName, (0, reactivity_1.computed)(() => sfc.template), (0, reactivity_1.computed)(() => sfc.script), (0, reactivity_1.computed)(() => sfc.scriptSetup), (0, reactivity_1.computed)(() => scriptSetupRanges.value), (0, reactivity_1.computed)(() => sfc.styles), sfcStyles.files, sfcStyles.embeddeds, sfcTemplateCompiled, sfcTemplateCompileResult, sfcStyles.files, scriptLang, compilerOptions, baseCssModuleType, getCssVBindRanges, getCssClasses, compilerOptions.experimentalCompatMode === 2, !!compilerOptions.experimentalDisableTemplateSupport || !((tsHost === null || tsHost === void 0 ? void 0 : tsHost.getCompilationSettings().jsx) === ts.JsxEmit.Preserve));
      const sfcScriptForTemplateLs = (0, useSfcScriptGen_1.useSfcScriptGen)("template", fileName, content, scriptLang, (0, reactivity_1.computed)(() => sfc.script), (0, reactivity_1.computed)(() => sfc.scriptSetup), (0, reactivity_1.computed)(() => scriptRanges.value), (0, reactivity_1.computed)(() => scriptSetupRanges.value), sfcTemplateScript.templateCodeGens, (0, reactivity_1.computed)(() => sfcStyles.files.value), compilerOptions, getCssVBindRanges);
      const sfcScriptForScriptLs = (0, useSfcScriptGen_1.useSfcScriptGen)("script", fileName, content, scriptLang, (0, reactivity_1.computed)(() => sfc.script), (0, reactivity_1.computed)(() => sfc.scriptSetup), (0, reactivity_1.computed)(() => scriptRanges.value), (0, reactivity_1.computed)(() => scriptSetupRanges.value), sfcTemplateScript.templateCodeGens, (0, reactivity_1.computed)(() => sfcStyles.files.value), compilerOptions, getCssVBindRanges);
      const sfcRefSugarRanges = (0, reactivity_1.computed)(() => scriptSetupAst.value ? {
        refs: (0, refSugarRanges_1.parseRefSugarDeclarationRanges)(ts, scriptSetupAst.value, ["$ref", "$computed", "$shallowRef", "$fromRefs"]),
        raws: (0, refSugarRanges_1.parseRefSugarCallRanges)(ts, scriptSetupAst.value, ["$raw", "$fromRefs"])
      } : void 0);
      const teleports = (0, reactivity_1.computed)(() => {
        const _all = [];
        if (sfcScriptForTemplateLs.file.value && sfcScriptForTemplateLs.teleport.value) {
          _all.push({
            file: sfcScriptForTemplateLs.file.value,
            teleport: sfcScriptForTemplateLs.teleport.value
          });
        }
        return _all;
      });
      const embeddeds = (0, reactivity_1.computed)(() => {
        const embeddeds2 = [];
        embeddeds2.push({
          self: sfcTemplate.embedded.value,
          embeddeds: [
            {
              self: sfcTemplateScript.embedded.value,
              inheritParentIndent: true,
              embeddeds: []
            },
            {
              self: sfcTemplateScript.formatEmbedded.value,
              inheritParentIndent: true,
              embeddeds: []
            },
            {
              self: sfcTemplateScript.inlineCssEmbedded.value,
              inheritParentIndent: true,
              embeddeds: []
            }
          ]
        });
        embeddeds2.push({
          self: sfcScript.embedded.value,
          embeddeds: []
        });
        embeddeds2.push({
          self: sfcScriptSetup.embedded.value,
          embeddeds: []
        });
        embeddeds2.push({
          self: sfcScriptForScriptLs.embedded.value,
          embeddeds: []
        });
        embeddeds2.push({
          self: sfcScriptForTemplateLs.embedded.value,
          embeddeds: []
        });
        for (const style of sfcStyles.embeddeds.value) {
          embeddeds2.push({
            self: style,
            embeddeds: []
          });
        }
        for (const customBlock of sfcCustomBlocks.embeddeds.value) {
          embeddeds2.push({
            self: customBlock,
            embeddeds: []
          });
        }
        return embeddeds2;
      });
      const allEmbeddeds = (0, reactivity_1.computed)(() => {
        const all = [];
        visitEmbedded(embeddeds.value, (embedded) => all.push(embedded));
        return all;
        function visitEmbedded(embeddeds2, cb) {
          for (const embedded of embeddeds2) {
            visitEmbedded(embedded.embeddeds, cb);
            if (embedded.self) {
              cb(embedded.self);
            }
          }
        }
      });
      update(_content, _version);
      return {
        fileName,
        getContent: (0, untrack_1.untrack)(() => content.value),
        getSfcTemplateLanguageCompiled: (0, untrack_1.untrack)(() => sfcTemplateCompiled.value),
        getSfcVueTemplateCompiled: (0, untrack_1.untrack)(() => sfcTemplateCompileResult.value),
        getVersion: (0, untrack_1.untrack)(() => version2.value),
        getTemplateTagNames: (0, untrack_1.untrack)(() => {
          var _a;
          return (_a = sfcTemplateScript.templateCodeGens.value) === null || _a === void 0 ? void 0 : _a.tagNames;
        }),
        getTemplateAttrNames: (0, untrack_1.untrack)(() => {
          var _a;
          return (_a = sfcTemplateScript.templateCodeGens.value) === null || _a === void 0 ? void 0 : _a.attrNames;
        }),
        update: (0, untrack_1.untrack)(update),
        getTemplateData: (0, untrack_1.untrack)(getTemplateData),
        getScriptTsFile: (0, untrack_1.untrack)(() => sfcScriptForScriptLs.file.value),
        getEmbeddedTemplate: (0, untrack_1.untrack)(() => sfcTemplate.embedded.value),
        getDescriptor: (0, untrack_1.untrack)(() => (0, reactivity_1.unref)(sfc)),
        getScriptAst: (0, untrack_1.untrack)(() => scriptAst.value),
        getScriptSetupAst: (0, untrack_1.untrack)(() => scriptSetupAst.value),
        getTemplateFormattingScript: (0, untrack_1.untrack)(() => sfcTemplateScript.formatEmbedded.value),
        getSfcRefSugarRanges: (0, untrack_1.untrack)(() => sfcRefSugarRanges.value),
        getEmbeddeds: (0, untrack_1.untrack)(() => embeddeds.value),
        getAllEmbeddeds: (0, untrack_1.untrack)(() => allEmbeddeds.value),
        getLastUpdated: (0, untrack_1.untrack)(() => (0, reactivity_1.unref)(lastUpdated)),
        getScriptSetupRanges: (0, untrack_1.untrack)(() => scriptSetupRanges.value),
        getSfcTemplateDocument: (0, untrack_1.untrack)(() => sfcTemplate.file.value),
        isJsxMissing: () => !compilerOptions.experimentalDisableTemplateSupport && !((tsHost === null || tsHost === void 0 ? void 0 : tsHost.getCompilationSettings().jsx) === ts.JsxEmit.Preserve),
        refs: {
          content,
          allEmbeddeds,
          teleports,
          sfcTemplateScript,
          sfcScriptForScriptLs
        }
      };
      function update(newContent, newVersion) {
        var _a, _b;
        const scriptLang_1 = sfcScriptForScriptLs.file.value.lang;
        const scriptText_1 = sfcScriptForScriptLs.file.value.content;
        const templateScriptContent = (_a = sfcTemplateScript.file.value) === null || _a === void 0 ? void 0 : _a.content;
        content.value = newContent;
        version2.value = newVersion;
        updateTemplate(parsedSfc.value.descriptor.template);
        updateScript(parsedSfc.value.descriptor.script);
        updateScriptSetup(parsedSfc.value.descriptor.scriptSetup);
        updateStyles(parsedSfc.value.descriptor.styles);
        updateCustomBlocks(parsedSfc.value.descriptor.customBlocks);
        const scriptLang_2 = sfcScriptForScriptLs.file.value.lang;
        const scriptText_2 = sfcScriptForScriptLs.file.value.content;
        const templateScriptContent_2 = (_b = sfcTemplateScript.file.value) === null || _b === void 0 ? void 0 : _b.content;
        return {
          scriptUpdated: scriptLang_1 !== scriptLang_2 || scriptText_1 !== scriptText_2 || templateScriptContent !== templateScriptContent_2
        };
        function updateTemplate(block) {
          var _a2, _b2, _c;
          const newData = block ? {
            start: newContent.substring(0, block.loc.start.offset).lastIndexOf("<"),
            end: block.loc.end.offset + newContent.substring(block.loc.end.offset).indexOf(">") + 1,
            startTagEnd: block.loc.start.offset,
            endTagStart: block.loc.end.offset,
            content: block.content,
            lang: (_a2 = block.lang) !== null && _a2 !== void 0 ? _a2 : "html"
          } : null;
          lastUpdated.template = ((_b2 = sfc.template) === null || _b2 === void 0 ? void 0 : _b2.lang) !== (newData === null || newData === void 0 ? void 0 : newData.lang) || ((_c = sfc.template) === null || _c === void 0 ? void 0 : _c.content) !== (newData === null || newData === void 0 ? void 0 : newData.content);
          if (sfc.template && newData) {
            updateBlock(sfc.template, newData);
          } else {
            sfc.template = newData;
          }
        }
        function updateScript(block) {
          var _a2, _b2, _c;
          const newData = block ? {
            start: newContent.substring(0, block.loc.start.offset).lastIndexOf("<"),
            end: block.loc.end.offset + newContent.substring(block.loc.end.offset).indexOf(">") + 1,
            startTagEnd: block.loc.start.offset,
            endTagStart: block.loc.end.offset,
            content: block.content,
            lang: getValidScriptSyntax((_a2 = block.lang) !== null && _a2 !== void 0 ? _a2 : "js"),
            src: block.src
          } : null;
          lastUpdated.script = ((_b2 = sfc.script) === null || _b2 === void 0 ? void 0 : _b2.lang) !== (newData === null || newData === void 0 ? void 0 : newData.lang) || ((_c = sfc.script) === null || _c === void 0 ? void 0 : _c.content) !== (newData === null || newData === void 0 ? void 0 : newData.content);
          if (sfc.script && newData) {
            updateBlock(sfc.script, newData);
          } else {
            sfc.script = newData;
          }
        }
        function updateScriptSetup(block) {
          var _a2, _b2, _c;
          const newData = block ? {
            start: newContent.substring(0, block.loc.start.offset).lastIndexOf("<"),
            end: block.loc.end.offset + newContent.substring(block.loc.end.offset).indexOf(">") + 1,
            startTagEnd: block.loc.start.offset,
            endTagStart: block.loc.end.offset,
            content: block.content,
            lang: getValidScriptSyntax((_a2 = block.lang) !== null && _a2 !== void 0 ? _a2 : "js")
          } : null;
          lastUpdated.scriptSetup = ((_b2 = sfc.scriptSetup) === null || _b2 === void 0 ? void 0 : _b2.lang) !== (newData === null || newData === void 0 ? void 0 : newData.lang) || ((_c = sfc.scriptSetup) === null || _c === void 0 ? void 0 : _c.content) !== (newData === null || newData === void 0 ? void 0 : newData.content);
          if (sfc.scriptSetup && newData) {
            updateBlock(sfc.scriptSetup, newData);
          } else {
            sfc.scriptSetup = newData;
          }
        }
        function updateStyles(blocks) {
          var _a2;
          for (let i = 0; i < blocks.length; i++) {
            const block = blocks[i];
            const newData = {
              start: newContent.substring(0, block.loc.start.offset).lastIndexOf("<"),
              end: block.loc.end.offset + newContent.substring(block.loc.end.offset).indexOf(">") + 1,
              startTagEnd: block.loc.start.offset,
              endTagStart: block.loc.end.offset,
              content: block.content,
              lang: (_a2 = block.lang) !== null && _a2 !== void 0 ? _a2 : "css",
              module: typeof block.module === "string" ? block.module : block.module ? "$style" : void 0,
              scoped: !!block.scoped
            };
            if (sfc.styles.length > i) {
              updateBlock(sfc.styles[i], newData);
            } else {
              sfc.styles.push(newData);
            }
          }
          while (sfc.styles.length > blocks.length) {
            sfc.styles.pop();
          }
        }
        function updateCustomBlocks(blocks) {
          var _a2;
          for (let i = 0; i < blocks.length; i++) {
            const block = blocks[i];
            const newData = {
              start: newContent.substring(0, block.loc.start.offset).lastIndexOf("<"),
              end: block.loc.end.offset + newContent.substring(block.loc.end.offset).indexOf(">") + 1,
              startTagEnd: block.loc.start.offset,
              endTagStart: block.loc.end.offset,
              content: block.content,
              lang: (_a2 = block.lang) !== null && _a2 !== void 0 ? _a2 : "txt",
              type: block.type
            };
            if (sfc.customBlocks.length > i) {
              updateBlock(sfc.customBlocks[i], newData);
            } else {
              sfc.customBlocks.push(newData);
            }
          }
          while (sfc.customBlocks.length > blocks.length) {
            sfc.customBlocks.pop();
          }
        }
        function updateBlock(oldBlock, newBlock) {
          for (let key in newBlock) {
            oldBlock[key] = newBlock[key];
          }
        }
      }
      function getTemplateData() {
        var _a, _b, _c, _d;
        if (!tsHost)
          return templateScriptData;
        if (!tsLs)
          return templateScriptData;
        const newVersion = (_a = tsHost.getProjectVersion) === null || _a === void 0 ? void 0 : _a.call(tsHost);
        if (templateScriptData.projectVersion === newVersion) {
          return templateScriptData;
        }
        templateScriptData.projectVersion = newVersion;
        const options = {
          includeCompletionsWithInsertText: true
        };
        const file = sfcTemplateScript.file.value;
        const hasFile = file && file.content.indexOf(string_1.SearchTexts.Components) >= 0 && !!((_b = tsLs.getProgram()) === null || _b === void 0 ? void 0 : _b.getSourceFile(file.fileName));
        let components = hasFile ? (_d = (_c = tsLs.getCompletionsAtPosition(file.fileName, file.content.indexOf(string_1.SearchTexts.Components), options)) === null || _c === void 0 ? void 0 : _c.entries.filter((entry) => entry.kind !== ts.ScriptElementKind.warning)) !== null && _d !== void 0 ? _d : [] : [];
        components = components.filter((entry) => {
          return entry.name.indexOf("$") === -1 && !entry.name.startsWith("_");
        });
        const componentNames = components.map((entry) => entry.name);
        templateScriptData = {
          projectVersion: newVersion,
          components: componentNames,
          componentItems: components
        };
        return templateScriptData;
      }
      function getCssVBindRanges(embeddedFile) {
        let binds = cssVars.get(embeddedFile);
        if (!binds) {
          binds = [...(0, parseCssVars_1.parseCssVars)(embeddedFile.content)];
          cssVars.set(embeddedFile, binds);
        }
        return binds;
      }
    }
    exports2.createVueFile = createVueFile;
    var validScriptSyntaxs = ["js", "jsx", "ts", "tsx"];
    function getValidScriptSyntax(syntax) {
      if (validScriptSyntaxs.includes(syntax)) {
        return syntax;
      }
      return "js";
    }
  }
});

// ../../packages/vue-typescript/out/vueFiles.js
var require_vueFiles = __commonJS({
  "../../packages/vue-typescript/out/vueFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createVueFiles = void 0;
    var reactivity_1 = require_reactivity();
    var path3 = require("path");
    var localTypes = require_localTypes();
    var untrack_1 = require_untrack();
    function createVueFiles() {
      const vueFiles = (0, reactivity_1.shallowReactive)({});
      const all = (0, reactivity_1.computed)(() => Object.values(vueFiles));
      const fileNames = (0, reactivity_1.computed)(() => all.value.map((sourceFile) => sourceFile.fileName));
      const embeddedDocumentsMap = (0, reactivity_1.computed)(() => {
        const map2 = /* @__PURE__ */ new WeakMap();
        for (const sourceFile of all.value) {
          for (const embedded of sourceFile.refs.allEmbeddeds.value) {
            map2.set(embedded.file, sourceFile);
          }
        }
        return map2;
      });
      const sourceMapsByFileName = (0, reactivity_1.computed)(() => {
        const map2 = /* @__PURE__ */ new Map();
        for (const sourceFile of all.value) {
          for (const embedded of sourceFile.refs.allEmbeddeds.value) {
            map2.set(embedded.file.fileName.toLowerCase(), { vueFile: sourceFile, embedded });
          }
        }
        return map2;
      });
      const teleports = (0, reactivity_1.computed)(() => {
        const map2 = /* @__PURE__ */ new Map();
        for (const key in vueFiles) {
          const sourceFile = vueFiles[key];
          for (const { file, teleport } of sourceFile.refs.teleports.value) {
            map2.set(file.fileName.toLowerCase(), teleport);
          }
        }
        return map2;
      });
      const dirs = (0, reactivity_1.computed)(() => [...new Set(fileNames.value.map(path3.dirname))]);
      return {
        get: (0, untrack_1.untrack)((fileName) => vueFiles[fileName.toLowerCase()]),
        delete: (0, untrack_1.untrack)((fileName) => delete vueFiles[fileName.toLowerCase()]),
        has: (0, untrack_1.untrack)((fileName) => !!vueFiles[fileName.toLowerCase()]),
        set: (0, untrack_1.untrack)((fileName, vueFile) => vueFiles[fileName.toLowerCase()] = vueFile),
        getFileNames: (0, untrack_1.untrack)(() => fileNames.value),
        getDirs: (0, untrack_1.untrack)(() => dirs.value),
        getAll: (0, untrack_1.untrack)(() => all.value),
        getTeleport: (0, untrack_1.untrack)((fileName) => teleports.value.get(fileName.toLowerCase())),
        getEmbeddeds: (0, untrack_1.untrack)(function* () {
          for (const sourceMap2 of sourceMapsByFileName.value) {
            yield sourceMap2[1];
          }
        }),
        fromEmbeddedLocation: (0, untrack_1.untrack)(function* (fileName, start, end, filter2, sourceMapFilter) {
          if (fileName.endsWith(`/${localTypes.typesFileName}`))
            return;
          if (end === void 0)
            end = start;
          const mapped = sourceMapsByFileName.value.get(fileName.toLowerCase());
          if (mapped) {
            if (sourceMapFilter && !sourceMapFilter(mapped.embedded.sourceMap))
              return;
            for (const vueRange of mapped.embedded.sourceMap.getSourceRanges(start, end, filter2)) {
              yield {
                fileName: mapped.vueFile.fileName,
                range: vueRange[0],
                mapped,
                data: vueRange[1]
              };
            }
          } else {
            yield {
              fileName,
              range: {
                start,
                end
              }
            };
          }
        }),
        fromEmbeddedFile: (0, untrack_1.untrack)(function(file) {
          return embeddedDocumentsMap.value.get(file);
        }),
        fromEmbeddedFileName: (0, untrack_1.untrack)(function(fileName) {
          return sourceMapsByFileName.value.get(fileName.toLowerCase());
        })
      };
    }
    exports2.createVueFiles = createVueFiles;
  }
});

// ../../packages/vue-typescript/out/types.js
var require_types2 = __commonJS({
  "../../packages/vue-typescript/out/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../packages/vue-typescript/out/plugins/html.js
var require_html = __commonJS({
  "../../packages/vue-typescript/out/plugins/html.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function default_1() {
      return {
        compileTemplate(template, lang) {
          if (lang === "html") {
            return {
              html: template,
              mapping: (htmlStart, htmlEnd) => ({ start: htmlStart, end: htmlEnd })
            };
          }
        }
      };
    }
    exports2.default = default_1;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-textdocument@1.0.4/node_modules/vscode-languageserver-textdocument/lib/esm/main.js
var main_exports = {};
__export(main_exports, {
  TextDocument: () => TextDocument
});
function mergeSort(data, compare3) {
  if (data.length <= 1) {
    return data;
  }
  const p = data.length / 2 | 0;
  const left = data.slice(0, p);
  const right = data.slice(p);
  mergeSort(left, compare3);
  mergeSort(right, compare3);
  let leftIdx = 0;
  let rightIdx = 0;
  let i = 0;
  while (leftIdx < left.length && rightIdx < right.length) {
    let ret = compare3(left[leftIdx], right[rightIdx]);
    if (ret <= 0) {
      data[i++] = left[leftIdx++];
    } else {
      data[i++] = right[rightIdx++];
    }
  }
  while (leftIdx < left.length) {
    data[i++] = left[leftIdx++];
  }
  while (rightIdx < right.length) {
    data[i++] = right[rightIdx++];
  }
  return data;
}
function computeLineOffsets(text, isAtLineStart, textOffset = 0) {
  const result2 = isAtLineStart ? [textOffset] : [];
  for (let i = 0; i < text.length; i++) {
    let ch = text.charCodeAt(i);
    if (ch === 13 || ch === 10) {
      if (ch === 13 && i + 1 < text.length && text.charCodeAt(i + 1) === 10) {
        i++;
      }
      result2.push(textOffset + i + 1);
    }
  }
  return result2;
}
function getWellformedRange(range2) {
  const start = range2.start;
  const end = range2.end;
  if (start.line > end.line || start.line === end.line && start.character > end.character) {
    return { start: end, end: start };
  }
  return range2;
}
function getWellformedEdit(textEdit) {
  const range2 = getWellformedRange(textEdit.range);
  if (range2 !== textEdit.range) {
    return { newText: textEdit.newText, range: range2 };
  }
  return textEdit;
}
var FullTextDocument, TextDocument;
var init_main = __esm({
  "../../node_modules/.pnpm/vscode-languageserver-textdocument@1.0.4/node_modules/vscode-languageserver-textdocument/lib/esm/main.js"() {
    "use strict";
    FullTextDocument = class {
      constructor(uri, languageId, version2, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version2;
        this._content = content;
        this._lineOffsets = void 0;
      }
      get uri() {
        return this._uri;
      }
      get languageId() {
        return this._languageId;
      }
      get version() {
        return this._version;
      }
      getText(range2) {
        if (range2) {
          const start = this.offsetAt(range2.start);
          const end = this.offsetAt(range2.end);
          return this._content.substring(start, end);
        }
        return this._content;
      }
      update(changes, version2) {
        for (let change of changes) {
          if (FullTextDocument.isIncremental(change)) {
            const range2 = getWellformedRange(change.range);
            const startOffset = this.offsetAt(range2.start);
            const endOffset = this.offsetAt(range2.end);
            this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
            const startLine = Math.max(range2.start.line, 0);
            const endLine = Math.max(range2.end.line, 0);
            let lineOffsets = this._lineOffsets;
            const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
            if (endLine - startLine === addedLineOffsets.length) {
              for (let i = 0, len = addedLineOffsets.length; i < len; i++) {
                lineOffsets[i + startLine + 1] = addedLineOffsets[i];
              }
            } else {
              if (addedLineOffsets.length < 1e4) {
                lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);
              } else {
                this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
              }
            }
            const diff = change.text.length - (endOffset - startOffset);
            if (diff !== 0) {
              for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {
                lineOffsets[i] = lineOffsets[i] + diff;
              }
            }
          } else if (FullTextDocument.isFull(change)) {
            this._content = change.text;
            this._lineOffsets = void 0;
          } else {
            throw new Error("Unknown change event received");
          }
        }
        this._version = version2;
      }
      getLineOffsets() {
        if (this._lineOffsets === void 0) {
          this._lineOffsets = computeLineOffsets(this._content, true);
        }
        return this._lineOffsets;
      }
      positionAt(offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        let lineOffsets = this.getLineOffsets();
        let low = 0, high = lineOffsets.length;
        if (high === 0) {
          return { line: 0, character: offset };
        }
        while (low < high) {
          let mid = Math.floor((low + high) / 2);
          if (lineOffsets[mid] > offset) {
            high = mid;
          } else {
            low = mid + 1;
          }
        }
        let line = low - 1;
        return { line, character: offset - lineOffsets[line] };
      }
      offsetAt(position) {
        let lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
          return this._content.length;
        } else if (position.line < 0) {
          return 0;
        }
        let lineOffset = lineOffsets[position.line];
        let nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
      }
      get lineCount() {
        return this.getLineOffsets().length;
      }
      static isIncremental(event) {
        let candidate = event;
        return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
      }
      static isFull(event) {
        let candidate = event;
        return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
      }
    };
    (function(TextDocument3) {
      function create(uri, languageId, version2, content) {
        return new FullTextDocument(uri, languageId, version2, content);
      }
      TextDocument3.create = create;
      function update(document2, changes, version2) {
        if (document2 instanceof FullTextDocument) {
          document2.update(changes, version2);
          return document2;
        } else {
          throw new Error("TextDocument.update: document must be created by TextDocument.create");
        }
      }
      TextDocument3.update = update;
      function applyEdits(document2, edits) {
        let text = document2.getText();
        let sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {
          let diff = a.range.start.line - b.range.start.line;
          if (diff === 0) {
            return a.range.start.character - b.range.start.character;
          }
          return diff;
        });
        let lastModifiedOffset = 0;
        const spans = [];
        for (const e of sortedEdits) {
          let startOffset = document2.offsetAt(e.range.start);
          if (startOffset < lastModifiedOffset) {
            throw new Error("Overlapping edit");
          } else if (startOffset > lastModifiedOffset) {
            spans.push(text.substring(lastModifiedOffset, startOffset));
          }
          if (e.newText.length) {
            spans.push(e.newText);
          }
          lastModifiedOffset = document2.offsetAt(e.range.end);
        }
        spans.push(text.substr(lastModifiedOffset));
        return spans.join("");
      }
      TextDocument3.applyEdits = applyEdits;
    })(TextDocument || (TextDocument = {}));
  }
});

// ../../packages/shared/out/common.js
var require_common = __commonJS({
  "../../packages/shared/out/common.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLineText = exports2.getOverlapRange2 = exports2.getOverlapRange = exports2.getWordRange = exports2.isInsideRange = exports2.notEmpty = exports2.languageIdToSyntax = exports2.syntaxToLanguageId = exports2.sleep = void 0;
    function sleep2(ms) {
      return new Promise((resolve2) => setTimeout(resolve2, ms));
    }
    exports2.sleep = sleep2;
    function syntaxToLanguageId(syntax) {
      switch (syntax) {
        case "js":
          return "javascript";
        case "ts":
          return "typescript";
        case "jsx":
          return "javascriptreact";
        case "tsx":
          return "typescriptreact";
        case "pug":
          return "jade";
      }
      return syntax;
    }
    exports2.syntaxToLanguageId = syntaxToLanguageId;
    function languageIdToSyntax(languageId) {
      switch (languageId) {
        case "javascript":
          return "js";
        case "typescript":
          return "ts";
        case "javascriptreact":
          return "jsx";
        case "typescriptreact":
          return "tsx";
        case "jade":
          return "pug";
      }
      return languageId;
    }
    exports2.languageIdToSyntax = languageIdToSyntax;
    function notEmpty(value) {
      return value !== null && value !== void 0;
    }
    exports2.notEmpty = notEmpty;
    function isInsideRange(parent, child) {
      if (child.start.line < parent.start.line)
        return false;
      if (child.end.line > parent.end.line)
        return false;
      if (child.start.line === parent.start.line && child.start.character < parent.start.character)
        return false;
      if (child.end.line === parent.end.line && child.end.character > parent.end.character)
        return false;
      return true;
    }
    exports2.isInsideRange = isInsideRange;
    function getWordRange(wordPattern, position, document2) {
      const lineStart = {
        line: position.line,
        character: 0
      };
      const lineEnd = {
        line: position.line + 1,
        character: 0
      };
      const offset = document2.offsetAt(position);
      const lineStartOffset = document2.offsetAt(lineStart);
      const lineText = document2.getText({ start: lineStart, end: lineEnd });
      for (const match of lineText.matchAll(wordPattern)) {
        if (match.index === void 0)
          continue;
        const matchStart = match.index + lineStartOffset;
        const matchEnd = matchStart + match[0].length;
        if (offset >= matchStart && offset <= matchEnd) {
          return {
            start: document2.positionAt(matchStart),
            end: document2.positionAt(matchEnd)
          };
        }
      }
      return void 0;
    }
    exports2.getWordRange = getWordRange;
    function getOverlapRange(range1, range2) {
      const start = {
        line: Math.max(range1.start.line, range2.start.line),
        character: range1.start.line === range2.start.line ? Math.max(range1.start.character, range2.start.character) : range1.start.line > range2.start.line ? range1.start.character : range2.start.character
      };
      const end = {
        line: Math.min(range1.end.line, range2.end.line),
        character: range1.end.line === range2.end.line ? Math.min(range1.end.character, range2.end.character) : range1.end.line < range2.end.line ? range1.end.character : range2.end.character
      };
      if (start.line > end.line || start.line === end.line && start.character > end.character)
        return void 0;
      return {
        start,
        end
      };
    }
    exports2.getOverlapRange = getOverlapRange;
    function getOverlapRange2(range1, range2) {
      const start = Math.max(range1.start, range2.start);
      const end = Math.min(range1.end, range2.end);
      if (start > end)
        return void 0;
      return {
        start,
        end
      };
    }
    exports2.getOverlapRange2 = getOverlapRange2;
    function getLineText(document2, line) {
      const text = document2.getText({
        start: { line, character: 0 },
        end: { line: line + 1, character: 0 }
      });
      return text.slice(0, -1);
    }
    exports2.getLineText = getLineText;
  }
});

// ../../packages/shared/out/ts.js
var require_ts = __commonJS({
  "../../packages/shared/out/ts.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTsCompletions = void 0;
    function getTsCompletions(ts) {
      return ts.Completions;
    }
    exports2.getTsCompletions = getTsCompletions;
  }
});

// ../../node_modules/.pnpm/vscode-uri@3.0.3/node_modules/vscode-uri/lib/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  URI: () => URI,
  Utils: () => Utils
});
var LIB, URI, Utils;
var init_esm = __esm({
  "../../node_modules/.pnpm/vscode-uri@3.0.3/node_modules/vscode-uri/lib/esm/index.js"() {
    LIB = (() => {
      "use strict";
      var t = { 470: (t2) => {
        function e2(t3) {
          if (typeof t3 != "string")
            throw new TypeError("Path must be a string. Received " + JSON.stringify(t3));
        }
        function r2(t3, e3) {
          for (var r3, n3 = "", o = 0, i = -1, a = 0, h = 0; h <= t3.length; ++h) {
            if (h < t3.length)
              r3 = t3.charCodeAt(h);
            else {
              if (r3 === 47)
                break;
              r3 = 47;
            }
            if (r3 === 47) {
              if (i === h - 1 || a === 1)
                ;
              else if (i !== h - 1 && a === 2) {
                if (n3.length < 2 || o !== 2 || n3.charCodeAt(n3.length - 1) !== 46 || n3.charCodeAt(n3.length - 2) !== 46) {
                  if (n3.length > 2) {
                    var s = n3.lastIndexOf("/");
                    if (s !== n3.length - 1) {
                      s === -1 ? (n3 = "", o = 0) : o = (n3 = n3.slice(0, s)).length - 1 - n3.lastIndexOf("/"), i = h, a = 0;
                      continue;
                    }
                  } else if (n3.length === 2 || n3.length === 1) {
                    n3 = "", o = 0, i = h, a = 0;
                    continue;
                  }
                }
                e3 && (n3.length > 0 ? n3 += "/.." : n3 = "..", o = 2);
              } else
                n3.length > 0 ? n3 += "/" + t3.slice(i + 1, h) : n3 = t3.slice(i + 1, h), o = h - i - 1;
              i = h, a = 0;
            } else
              r3 === 46 && a !== -1 ? ++a : a = -1;
          }
          return n3;
        }
        var n2 = { resolve: function() {
          for (var t3, n3 = "", o = false, i = arguments.length - 1; i >= -1 && !o; i--) {
            var a;
            i >= 0 ? a = arguments[i] : (t3 === void 0 && (t3 = process.cwd()), a = t3), e2(a), a.length !== 0 && (n3 = a + "/" + n3, o = a.charCodeAt(0) === 47);
          }
          return n3 = r2(n3, !o), o ? n3.length > 0 ? "/" + n3 : "/" : n3.length > 0 ? n3 : ".";
        }, normalize: function(t3) {
          if (e2(t3), t3.length === 0)
            return ".";
          var n3 = t3.charCodeAt(0) === 47, o = t3.charCodeAt(t3.length - 1) === 47;
          return (t3 = r2(t3, !n3)).length !== 0 || n3 || (t3 = "."), t3.length > 0 && o && (t3 += "/"), n3 ? "/" + t3 : t3;
        }, isAbsolute: function(t3) {
          return e2(t3), t3.length > 0 && t3.charCodeAt(0) === 47;
        }, join: function() {
          if (arguments.length === 0)
            return ".";
          for (var t3, r3 = 0; r3 < arguments.length; ++r3) {
            var o = arguments[r3];
            e2(o), o.length > 0 && (t3 === void 0 ? t3 = o : t3 += "/" + o);
          }
          return t3 === void 0 ? "." : n2.normalize(t3);
        }, relative: function(t3, r3) {
          if (e2(t3), e2(r3), t3 === r3)
            return "";
          if ((t3 = n2.resolve(t3)) === (r3 = n2.resolve(r3)))
            return "";
          for (var o = 1; o < t3.length && t3.charCodeAt(o) === 47; ++o)
            ;
          for (var i = t3.length, a = i - o, h = 1; h < r3.length && r3.charCodeAt(h) === 47; ++h)
            ;
          for (var s = r3.length - h, c = a < s ? a : s, f = -1, u = 0; u <= c; ++u) {
            if (u === c) {
              if (s > c) {
                if (r3.charCodeAt(h + u) === 47)
                  return r3.slice(h + u + 1);
                if (u === 0)
                  return r3.slice(h + u);
              } else
                a > c && (t3.charCodeAt(o + u) === 47 ? f = u : u === 0 && (f = 0));
              break;
            }
            var l = t3.charCodeAt(o + u);
            if (l !== r3.charCodeAt(h + u))
              break;
            l === 47 && (f = u);
          }
          var p = "";
          for (u = o + f + 1; u <= i; ++u)
            u !== i && t3.charCodeAt(u) !== 47 || (p.length === 0 ? p += ".." : p += "/..");
          return p.length > 0 ? p + r3.slice(h + f) : (h += f, r3.charCodeAt(h) === 47 && ++h, r3.slice(h));
        }, _makeLong: function(t3) {
          return t3;
        }, dirname: function(t3) {
          if (e2(t3), t3.length === 0)
            return ".";
          for (var r3 = t3.charCodeAt(0), n3 = r3 === 47, o = -1, i = true, a = t3.length - 1; a >= 1; --a)
            if ((r3 = t3.charCodeAt(a)) === 47) {
              if (!i) {
                o = a;
                break;
              }
            } else
              i = false;
          return o === -1 ? n3 ? "/" : "." : n3 && o === 1 ? "//" : t3.slice(0, o);
        }, basename: function(t3, r3) {
          if (r3 !== void 0 && typeof r3 != "string")
            throw new TypeError('"ext" argument must be a string');
          e2(t3);
          var n3, o = 0, i = -1, a = true;
          if (r3 !== void 0 && r3.length > 0 && r3.length <= t3.length) {
            if (r3.length === t3.length && r3 === t3)
              return "";
            var h = r3.length - 1, s = -1;
            for (n3 = t3.length - 1; n3 >= 0; --n3) {
              var c = t3.charCodeAt(n3);
              if (c === 47) {
                if (!a) {
                  o = n3 + 1;
                  break;
                }
              } else
                s === -1 && (a = false, s = n3 + 1), h >= 0 && (c === r3.charCodeAt(h) ? --h == -1 && (i = n3) : (h = -1, i = s));
            }
            return o === i ? i = s : i === -1 && (i = t3.length), t3.slice(o, i);
          }
          for (n3 = t3.length - 1; n3 >= 0; --n3)
            if (t3.charCodeAt(n3) === 47) {
              if (!a) {
                o = n3 + 1;
                break;
              }
            } else
              i === -1 && (a = false, i = n3 + 1);
          return i === -1 ? "" : t3.slice(o, i);
        }, extname: function(t3) {
          e2(t3);
          for (var r3 = -1, n3 = 0, o = -1, i = true, a = 0, h = t3.length - 1; h >= 0; --h) {
            var s = t3.charCodeAt(h);
            if (s !== 47)
              o === -1 && (i = false, o = h + 1), s === 46 ? r3 === -1 ? r3 = h : a !== 1 && (a = 1) : r3 !== -1 && (a = -1);
            else if (!i) {
              n3 = h + 1;
              break;
            }
          }
          return r3 === -1 || o === -1 || a === 0 || a === 1 && r3 === o - 1 && r3 === n3 + 1 ? "" : t3.slice(r3, o);
        }, format: function(t3) {
          if (t3 === null || typeof t3 != "object")
            throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof t3);
          return function(t4, e3) {
            var r3 = e3.dir || e3.root, n3 = e3.base || (e3.name || "") + (e3.ext || "");
            return r3 ? r3 === e3.root ? r3 + n3 : r3 + "/" + n3 : n3;
          }(0, t3);
        }, parse: function(t3) {
          e2(t3);
          var r3 = { root: "", dir: "", base: "", ext: "", name: "" };
          if (t3.length === 0)
            return r3;
          var n3, o = t3.charCodeAt(0), i = o === 47;
          i ? (r3.root = "/", n3 = 1) : n3 = 0;
          for (var a = -1, h = 0, s = -1, c = true, f = t3.length - 1, u = 0; f >= n3; --f)
            if ((o = t3.charCodeAt(f)) !== 47)
              s === -1 && (c = false, s = f + 1), o === 46 ? a === -1 ? a = f : u !== 1 && (u = 1) : a !== -1 && (u = -1);
            else if (!c) {
              h = f + 1;
              break;
            }
          return a === -1 || s === -1 || u === 0 || u === 1 && a === s - 1 && a === h + 1 ? s !== -1 && (r3.base = r3.name = h === 0 && i ? t3.slice(1, s) : t3.slice(h, s)) : (h === 0 && i ? (r3.name = t3.slice(1, a), r3.base = t3.slice(1, s)) : (r3.name = t3.slice(h, a), r3.base = t3.slice(h, s)), r3.ext = t3.slice(a, s)), h > 0 ? r3.dir = t3.slice(0, h - 1) : i && (r3.dir = "/"), r3;
        }, sep: "/", delimiter: ":", win32: null, posix: null };
        n2.posix = n2, t2.exports = n2;
      }, 447: (t2, e2, r2) => {
        var n2;
        if (r2.r(e2), r2.d(e2, { URI: () => d, Utils: () => P }), typeof process == "object")
          n2 = process.platform === "win32";
        else if (typeof navigator == "object") {
          var o = navigator.userAgent;
          n2 = o.indexOf("Windows") >= 0;
        }
        var i, a, h = (i = function(t3, e3) {
          return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
            t4.__proto__ = e4;
          } || function(t4, e4) {
            for (var r3 in e4)
              Object.prototype.hasOwnProperty.call(e4, r3) && (t4[r3] = e4[r3]);
          })(t3, e3);
        }, function(t3, e3) {
          if (typeof e3 != "function" && e3 !== null)
            throw new TypeError("Class extends value " + String(e3) + " is not a constructor or null");
          function r3() {
            this.constructor = t3;
          }
          i(t3, e3), t3.prototype = e3 === null ? Object.create(e3) : (r3.prototype = e3.prototype, new r3());
        }), s = /^\w[\w\d+.-]*$/, c = /^\//, f = /^\/\//;
        function u(t3, e3) {
          if (!t3.scheme && e3)
            throw new Error('[UriError]: Scheme is missing: {scheme: "", authority: "'.concat(t3.authority, '", path: "').concat(t3.path, '", query: "').concat(t3.query, '", fragment: "').concat(t3.fragment, '"}'));
          if (t3.scheme && !s.test(t3.scheme))
            throw new Error("[UriError]: Scheme contains illegal characters.");
          if (t3.path) {
            if (t3.authority) {
              if (!c.test(t3.path))
                throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
            } else if (f.test(t3.path))
              throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
          }
        }
        var l = "", p = "/", g = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/, d = function() {
          function t3(t4, e3, r3, n3, o2, i2) {
            i2 === void 0 && (i2 = false), typeof t4 == "object" ? (this.scheme = t4.scheme || l, this.authority = t4.authority || l, this.path = t4.path || l, this.query = t4.query || l, this.fragment = t4.fragment || l) : (this.scheme = function(t5, e4) {
              return t5 || e4 ? t5 : "file";
            }(t4, i2), this.authority = e3 || l, this.path = function(t5, e4) {
              switch (t5) {
                case "https":
                case "http":
                case "file":
                  e4 ? e4[0] !== p && (e4 = p + e4) : e4 = p;
              }
              return e4;
            }(this.scheme, r3 || l), this.query = n3 || l, this.fragment = o2 || l, u(this, i2));
          }
          return t3.isUri = function(e3) {
            return e3 instanceof t3 || !!e3 && typeof e3.authority == "string" && typeof e3.fragment == "string" && typeof e3.path == "string" && typeof e3.query == "string" && typeof e3.scheme == "string" && typeof e3.fsPath == "string" && typeof e3.with == "function" && typeof e3.toString == "function";
          }, Object.defineProperty(t3.prototype, "fsPath", { get: function() {
            return A(this, false);
          }, enumerable: false, configurable: true }), t3.prototype.with = function(t4) {
            if (!t4)
              return this;
            var e3 = t4.scheme, r3 = t4.authority, n3 = t4.path, o2 = t4.query, i2 = t4.fragment;
            return e3 === void 0 ? e3 = this.scheme : e3 === null && (e3 = l), r3 === void 0 ? r3 = this.authority : r3 === null && (r3 = l), n3 === void 0 ? n3 = this.path : n3 === null && (n3 = l), o2 === void 0 ? o2 = this.query : o2 === null && (o2 = l), i2 === void 0 ? i2 = this.fragment : i2 === null && (i2 = l), e3 === this.scheme && r3 === this.authority && n3 === this.path && o2 === this.query && i2 === this.fragment ? this : new y(e3, r3, n3, o2, i2);
          }, t3.parse = function(t4, e3) {
            e3 === void 0 && (e3 = false);
            var r3 = g.exec(t4);
            return r3 ? new y(r3[2] || l, O(r3[4] || l), O(r3[5] || l), O(r3[7] || l), O(r3[9] || l), e3) : new y(l, l, l, l, l);
          }, t3.file = function(t4) {
            var e3 = l;
            if (n2 && (t4 = t4.replace(/\\/g, p)), t4[0] === p && t4[1] === p) {
              var r3 = t4.indexOf(p, 2);
              r3 === -1 ? (e3 = t4.substring(2), t4 = p) : (e3 = t4.substring(2, r3), t4 = t4.substring(r3) || p);
            }
            return new y("file", e3, t4, l, l);
          }, t3.from = function(t4) {
            var e3 = new y(t4.scheme, t4.authority, t4.path, t4.query, t4.fragment);
            return u(e3, true), e3;
          }, t3.prototype.toString = function(t4) {
            return t4 === void 0 && (t4 = false), w(this, t4);
          }, t3.prototype.toJSON = function() {
            return this;
          }, t3.revive = function(e3) {
            if (e3) {
              if (e3 instanceof t3)
                return e3;
              var r3 = new y(e3);
              return r3._formatted = e3.external, r3._fsPath = e3._sep === v ? e3.fsPath : null, r3;
            }
            return e3;
          }, t3;
        }(), v = n2 ? 1 : void 0, y = function(t3) {
          function e3() {
            var e4 = t3 !== null && t3.apply(this, arguments) || this;
            return e4._formatted = null, e4._fsPath = null, e4;
          }
          return h(e3, t3), Object.defineProperty(e3.prototype, "fsPath", { get: function() {
            return this._fsPath || (this._fsPath = A(this, false)), this._fsPath;
          }, enumerable: false, configurable: true }), e3.prototype.toString = function(t4) {
            return t4 === void 0 && (t4 = false), t4 ? w(this, true) : (this._formatted || (this._formatted = w(this, false)), this._formatted);
          }, e3.prototype.toJSON = function() {
            var t4 = { $mid: 1 };
            return this._fsPath && (t4.fsPath = this._fsPath, t4._sep = v), this._formatted && (t4.external = this._formatted), this.path && (t4.path = this.path), this.scheme && (t4.scheme = this.scheme), this.authority && (t4.authority = this.authority), this.query && (t4.query = this.query), this.fragment && (t4.fragment = this.fragment), t4;
          }, e3;
        }(d), m = ((a = {})[58] = "%3A", a[47] = "%2F", a[63] = "%3F", a[35] = "%23", a[91] = "%5B", a[93] = "%5D", a[64] = "%40", a[33] = "%21", a[36] = "%24", a[38] = "%26", a[39] = "%27", a[40] = "%28", a[41] = "%29", a[42] = "%2A", a[43] = "%2B", a[44] = "%2C", a[59] = "%3B", a[61] = "%3D", a[32] = "%20", a);
        function b(t3, e3) {
          for (var r3 = void 0, n3 = -1, o2 = 0; o2 < t3.length; o2++) {
            var i2 = t3.charCodeAt(o2);
            if (i2 >= 97 && i2 <= 122 || i2 >= 65 && i2 <= 90 || i2 >= 48 && i2 <= 57 || i2 === 45 || i2 === 46 || i2 === 95 || i2 === 126 || e3 && i2 === 47)
              n3 !== -1 && (r3 += encodeURIComponent(t3.substring(n3, o2)), n3 = -1), r3 !== void 0 && (r3 += t3.charAt(o2));
            else {
              r3 === void 0 && (r3 = t3.substr(0, o2));
              var a2 = m[i2];
              a2 !== void 0 ? (n3 !== -1 && (r3 += encodeURIComponent(t3.substring(n3, o2)), n3 = -1), r3 += a2) : n3 === -1 && (n3 = o2);
            }
          }
          return n3 !== -1 && (r3 += encodeURIComponent(t3.substring(n3))), r3 !== void 0 ? r3 : t3;
        }
        function C(t3) {
          for (var e3 = void 0, r3 = 0; r3 < t3.length; r3++) {
            var n3 = t3.charCodeAt(r3);
            n3 === 35 || n3 === 63 ? (e3 === void 0 && (e3 = t3.substr(0, r3)), e3 += m[n3]) : e3 !== void 0 && (e3 += t3[r3]);
          }
          return e3 !== void 0 ? e3 : t3;
        }
        function A(t3, e3) {
          var r3;
          return r3 = t3.authority && t3.path.length > 1 && t3.scheme === "file" ? "//".concat(t3.authority).concat(t3.path) : t3.path.charCodeAt(0) === 47 && (t3.path.charCodeAt(1) >= 65 && t3.path.charCodeAt(1) <= 90 || t3.path.charCodeAt(1) >= 97 && t3.path.charCodeAt(1) <= 122) && t3.path.charCodeAt(2) === 58 ? e3 ? t3.path.substr(1) : t3.path[1].toLowerCase() + t3.path.substr(2) : t3.path, n2 && (r3 = r3.replace(/\//g, "\\")), r3;
        }
        function w(t3, e3) {
          var r3 = e3 ? C : b, n3 = "", o2 = t3.scheme, i2 = t3.authority, a2 = t3.path, h2 = t3.query, s2 = t3.fragment;
          if (o2 && (n3 += o2, n3 += ":"), (i2 || o2 === "file") && (n3 += p, n3 += p), i2) {
            var c2 = i2.indexOf("@");
            if (c2 !== -1) {
              var f2 = i2.substr(0, c2);
              i2 = i2.substr(c2 + 1), (c2 = f2.indexOf(":")) === -1 ? n3 += r3(f2, false) : (n3 += r3(f2.substr(0, c2), false), n3 += ":", n3 += r3(f2.substr(c2 + 1), false)), n3 += "@";
            }
            (c2 = (i2 = i2.toLowerCase()).indexOf(":")) === -1 ? n3 += r3(i2, false) : (n3 += r3(i2.substr(0, c2), false), n3 += i2.substr(c2));
          }
          if (a2) {
            if (a2.length >= 3 && a2.charCodeAt(0) === 47 && a2.charCodeAt(2) === 58)
              (u2 = a2.charCodeAt(1)) >= 65 && u2 <= 90 && (a2 = "/".concat(String.fromCharCode(u2 + 32), ":").concat(a2.substr(3)));
            else if (a2.length >= 2 && a2.charCodeAt(1) === 58) {
              var u2;
              (u2 = a2.charCodeAt(0)) >= 65 && u2 <= 90 && (a2 = "".concat(String.fromCharCode(u2 + 32), ":").concat(a2.substr(2)));
            }
            n3 += r3(a2, true);
          }
          return h2 && (n3 += "?", n3 += r3(h2, false)), s2 && (n3 += "#", n3 += e3 ? s2 : b(s2, false)), n3;
        }
        function x(t3) {
          try {
            return decodeURIComponent(t3);
          } catch (e3) {
            return t3.length > 3 ? t3.substr(0, 3) + x(t3.substr(3)) : t3;
          }
        }
        var _ = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
        function O(t3) {
          return t3.match(_) ? t3.replace(_, function(t4) {
            return x(t4);
          }) : t3;
        }
        var P, j = r2(470), U = function(t3, e3, r3) {
          if (r3 || arguments.length === 2)
            for (var n3, o2 = 0, i2 = e3.length; o2 < i2; o2++)
              !n3 && o2 in e3 || (n3 || (n3 = Array.prototype.slice.call(e3, 0, o2)), n3[o2] = e3[o2]);
          return t3.concat(n3 || Array.prototype.slice.call(e3));
        }, I = j.posix || j;
        !function(t3) {
          t3.joinPath = function(t4) {
            for (var e3 = [], r3 = 1; r3 < arguments.length; r3++)
              e3[r3 - 1] = arguments[r3];
            return t4.with({ path: I.join.apply(I, U([t4.path], e3, false)) });
          }, t3.resolvePath = function(t4) {
            for (var e3 = [], r3 = 1; r3 < arguments.length; r3++)
              e3[r3 - 1] = arguments[r3];
            var n3 = t4.path || "/";
            return t4.with({ path: I.resolve.apply(I, U([n3], e3, false)) });
          }, t3.dirname = function(t4) {
            var e3 = I.dirname(t4.path);
            return e3.length === 1 && e3.charCodeAt(0) === 46 ? t4 : t4.with({ path: e3 });
          }, t3.basename = function(t4) {
            return I.basename(t4.path);
          }, t3.extname = function(t4) {
            return I.extname(t4.path);
          };
        }(P || (P = {}));
      } }, e = {};
      function r(n2) {
        if (e[n2])
          return e[n2].exports;
        var o = e[n2] = { exports: {} };
        return t[n2](o, o.exports, r), o.exports;
      }
      return r.d = (t2, e2) => {
        for (var n2 in e2)
          r.o(e2, n2) && !r.o(t2, n2) && Object.defineProperty(t2, n2, { enumerable: true, get: e2[n2] });
      }, r.o = (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), r.r = (t2) => {
        typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
      }, r(447);
    })();
    ({ URI, Utils } = LIB);
  }
});

// ../../node_modules/.pnpm/upath@2.0.1/node_modules/upath/build/code/upath.js
var require_upath = __commonJS({
  "../../node_modules/.pnpm/upath@2.0.1/node_modules/upath/build/code/upath.js"(exports2) {
    var VERSION = "2.0.1";
    var extraFn;
    var extraFunctions;
    var isFunction2;
    var isString2;
    var isValidExt;
    var name;
    var path3;
    var propName;
    var propValue;
    var toUnix;
    var upath;
    var slice3 = [].slice;
    var indexOf2 = [].indexOf || function(item) {
      for (var i = 0, l = this.length; i < l; i++) {
        if (i in this && this[i] === item)
          return i;
      }
      return -1;
    };
    var hasProp = {}.hasOwnProperty;
    path3 = require("path");
    isFunction2 = function(val) {
      return typeof val === "function";
    };
    isString2 = function(val) {
      return typeof val === "string" || !!val && typeof val === "object" && Object.prototype.toString.call(val) === "[object String]";
    };
    upath = exports2;
    upath.VERSION = typeof VERSION !== "undefined" && VERSION !== null ? VERSION : "NO-VERSION";
    toUnix = function(p) {
      p = p.replace(/\\/g, "/");
      p = p.replace(/(?<!^)\/+/g, "/");
      return p;
    };
    for (propName in path3) {
      propValue = path3[propName];
      if (isFunction2(propValue)) {
        upath[propName] = function(propName2) {
          return function() {
            var args, result2;
            args = 1 <= arguments.length ? slice3.call(arguments, 0) : [];
            args = args.map(function(p) {
              if (isString2(p)) {
                return toUnix(p);
              } else {
                return p;
              }
            });
            result2 = path3[propName2].apply(path3, args);
            if (isString2(result2)) {
              return toUnix(result2);
            } else {
              return result2;
            }
          };
        }(propName);
      } else {
        upath[propName] = propValue;
      }
    }
    upath.sep = "/";
    extraFunctions = {
      toUnix,
      normalizeSafe: function(p) {
        var result2;
        p = toUnix(p);
        result2 = upath.normalize(p);
        if (p.startsWith("./") && !result2.startsWith("./") && !result2.startsWith("..")) {
          result2 = "./" + result2;
        } else if (p.startsWith("//") && !result2.startsWith("//")) {
          if (p.startsWith("//./")) {
            result2 = "//." + result2;
          } else {
            result2 = "/" + result2;
          }
        }
        return result2;
      },
      normalizeTrim: function(p) {
        p = upath.normalizeSafe(p);
        if (p.endsWith("/")) {
          return p.slice(0, +(p.length - 2) + 1 || 9e9);
        } else {
          return p;
        }
      },
      joinSafe: function() {
        var p, p0, result2;
        p = 1 <= arguments.length ? slice3.call(arguments, 0) : [];
        result2 = upath.join.apply(null, p);
        if (p.length > 0) {
          p0 = toUnix(p[0]);
          if (p0.startsWith("./") && !result2.startsWith("./") && !result2.startsWith("..")) {
            result2 = "./" + result2;
          } else if (p0.startsWith("//") && !result2.startsWith("//")) {
            if (p0.startsWith("//./")) {
              result2 = "//." + result2;
            } else {
              result2 = "/" + result2;
            }
          }
        }
        return result2;
      },
      addExt: function(file, ext) {
        if (!ext) {
          return file;
        } else {
          if (ext[0] !== ".") {
            ext = "." + ext;
          }
          return file + (file.endsWith(ext) ? "" : ext);
        }
      },
      trimExt: function(filename, ignoreExts, maxSize) {
        var oldExt;
        if (maxSize == null) {
          maxSize = 7;
        }
        oldExt = upath.extname(filename);
        if (isValidExt(oldExt, ignoreExts, maxSize)) {
          return filename.slice(0, +(filename.length - oldExt.length - 1) + 1 || 9e9);
        } else {
          return filename;
        }
      },
      removeExt: function(filename, ext) {
        if (!ext) {
          return filename;
        } else {
          ext = ext[0] === "." ? ext : "." + ext;
          if (upath.extname(filename) === ext) {
            return upath.trimExt(filename, [], ext.length);
          } else {
            return filename;
          }
        }
      },
      changeExt: function(filename, ext, ignoreExts, maxSize) {
        if (maxSize == null) {
          maxSize = 7;
        }
        return upath.trimExt(filename, ignoreExts, maxSize) + (!ext ? "" : ext[0] === "." ? ext : "." + ext);
      },
      defaultExt: function(filename, ext, ignoreExts, maxSize) {
        var oldExt;
        if (maxSize == null) {
          maxSize = 7;
        }
        oldExt = upath.extname(filename);
        if (isValidExt(oldExt, ignoreExts, maxSize)) {
          return filename;
        } else {
          return upath.addExt(filename, ext);
        }
      }
    };
    isValidExt = function(ext, ignoreExts, maxSize) {
      if (ignoreExts == null) {
        ignoreExts = [];
      }
      return ext && ext.length <= maxSize && indexOf2.call(ignoreExts.map(function(e) {
        return (e && e[0] !== "." ? "." : "") + e;
      }), ext) < 0;
    };
    for (name in extraFunctions) {
      if (!hasProp.call(extraFunctions, name))
        continue;
      extraFn = extraFunctions[name];
      if (upath[name] !== void 0) {
        throw new Error("path." + name + " already exists.");
      } else {
        upath[name] = extraFn;
      }
    }
  }
});

// ../../packages/shared/out/path.js
var require_path = __commonJS({
  "../../packages/shared/out/path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isFileInDir = exports2.normalizeUri = exports2.normalizeFileName = exports2.fsPathToUri = exports2.uriToFsPath = void 0;
    var vscode_uri_1 = (init_esm(), __toCommonJS(esm_exports));
    var upath = require_upath();
    function uriToFsPath(uri) {
      return upath.toUnix(vscode_uri_1.URI.parse(uri).fsPath);
    }
    exports2.uriToFsPath = uriToFsPath;
    function fsPathToUri(fsPath) {
      return vscode_uri_1.URI.file(fsPath).toString();
    }
    exports2.fsPathToUri = fsPathToUri;
    function normalizeFileName(fsPath) {
      return upath.toUnix(vscode_uri_1.URI.file(fsPath).fsPath);
    }
    exports2.normalizeFileName = normalizeFileName;
    function normalizeUri(uri) {
      return vscode_uri_1.URI.parse(uri).toString();
    }
    exports2.normalizeUri = normalizeUri;
    function isFileInDir(fileName, dir) {
      const relative2 = upath.relative(dir, fileName);
      return relative2 && !relative2.startsWith("..") && !upath.isAbsolute(relative2);
    }
    exports2.isFileInDir = isFileInDir;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/ral.js
var require_ral = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/ral.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _ral;
    function RAL() {
      if (_ral === void 0) {
        throw new Error(`No runtime abstraction layer installed`);
      }
      return _ral;
    }
    (function(RAL2) {
      function install(ral) {
        if (ral === void 0) {
          throw new Error(`No runtime abstraction layer provided`);
        }
        _ral = ral;
      }
      RAL2.install = install;
    })(RAL || (RAL = {}));
    exports2.default = RAL;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/disposable.js
var require_disposable = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/disposable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Disposable = void 0;
    var Disposable;
    (function(Disposable2) {
      function create(func) {
        return {
          dispose: func
        };
      }
      Disposable2.create = create;
    })(Disposable = exports2.Disposable || (exports2.Disposable = {}));
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/messageBuffer.js
var require_messageBuffer = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/messageBuffer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AbstractMessageBuffer = void 0;
    var CR2 = 13;
    var LF = 10;
    var CRLF = "\r\n";
    var AbstractMessageBuffer = class {
      constructor(encoding = "utf-8") {
        this._encoding = encoding;
        this._chunks = [];
        this._totalLength = 0;
      }
      get encoding() {
        return this._encoding;
      }
      append(chunk) {
        const toAppend = typeof chunk === "string" ? this.fromString(chunk, this._encoding) : chunk;
        this._chunks.push(toAppend);
        this._totalLength += toAppend.byteLength;
      }
      tryReadHeaders() {
        if (this._chunks.length === 0) {
          return void 0;
        }
        let state = 0;
        let chunkIndex = 0;
        let offset = 0;
        let chunkBytesRead = 0;
        row:
          while (chunkIndex < this._chunks.length) {
            const chunk = this._chunks[chunkIndex];
            offset = 0;
            column:
              while (offset < chunk.length) {
                const value = chunk[offset];
                switch (value) {
                  case CR2:
                    switch (state) {
                      case 0:
                        state = 1;
                        break;
                      case 2:
                        state = 3;
                        break;
                      default:
                        state = 0;
                    }
                    break;
                  case LF:
                    switch (state) {
                      case 1:
                        state = 2;
                        break;
                      case 3:
                        state = 4;
                        offset++;
                        break row;
                      default:
                        state = 0;
                    }
                    break;
                  default:
                    state = 0;
                }
                offset++;
              }
            chunkBytesRead += chunk.byteLength;
            chunkIndex++;
          }
        if (state !== 4) {
          return void 0;
        }
        const buffer = this._read(chunkBytesRead + offset);
        const result2 = /* @__PURE__ */ new Map();
        const headers = this.toString(buffer, "ascii").split(CRLF);
        if (headers.length < 2) {
          return result2;
        }
        for (let i = 0; i < headers.length - 2; i++) {
          const header = headers[i];
          const index = header.indexOf(":");
          if (index === -1) {
            throw new Error("Message header must separate key and value using :");
          }
          const key = header.substr(0, index);
          const value = header.substr(index + 1).trim();
          result2.set(key, value);
        }
        return result2;
      }
      tryReadBody(length2) {
        if (this._totalLength < length2) {
          return void 0;
        }
        return this._read(length2);
      }
      get numberOfBytes() {
        return this._totalLength;
      }
      _read(byteCount) {
        if (byteCount === 0) {
          return this.emptyBuffer();
        }
        if (byteCount > this._totalLength) {
          throw new Error(`Cannot read so many bytes!`);
        }
        if (this._chunks[0].byteLength === byteCount) {
          const chunk = this._chunks[0];
          this._chunks.shift();
          this._totalLength -= byteCount;
          return this.asNative(chunk);
        }
        if (this._chunks[0].byteLength > byteCount) {
          const chunk = this._chunks[0];
          const result3 = this.asNative(chunk, byteCount);
          this._chunks[0] = chunk.slice(byteCount);
          this._totalLength -= byteCount;
          return result3;
        }
        const result2 = this.allocNative(byteCount);
        let resultOffset = 0;
        let chunkIndex = 0;
        while (byteCount > 0) {
          const chunk = this._chunks[chunkIndex];
          if (chunk.byteLength > byteCount) {
            const chunkPart = chunk.slice(0, byteCount);
            result2.set(chunkPart, resultOffset);
            resultOffset += byteCount;
            this._chunks[chunkIndex] = chunk.slice(byteCount);
            this._totalLength -= byteCount;
            byteCount -= byteCount;
          } else {
            result2.set(chunk, resultOffset);
            resultOffset += chunk.byteLength;
            this._chunks.shift();
            this._totalLength -= chunk.byteLength;
            byteCount -= chunk.byteLength;
          }
        }
        return result2;
      }
    };
    exports2.AbstractMessageBuffer = AbstractMessageBuffer;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/node/ril.js
var require_ril = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/node/ril.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var ral_1 = require_ral();
    var util_1 = require("util");
    var disposable_1 = require_disposable();
    var messageBuffer_1 = require_messageBuffer();
    var MessageBuffer = class extends messageBuffer_1.AbstractMessageBuffer {
      constructor(encoding = "utf-8") {
        super(encoding);
      }
      emptyBuffer() {
        return MessageBuffer.emptyBuffer;
      }
      fromString(value, encoding) {
        return Buffer.from(value, encoding);
      }
      toString(value, encoding) {
        if (value instanceof Buffer) {
          return value.toString(encoding);
        } else {
          return new util_1.TextDecoder(encoding).decode(value);
        }
      }
      asNative(buffer, length2) {
        if (length2 === void 0) {
          return buffer instanceof Buffer ? buffer : Buffer.from(buffer);
        } else {
          return buffer instanceof Buffer ? buffer.slice(0, length2) : Buffer.from(buffer, 0, length2);
        }
      }
      allocNative(length2) {
        return Buffer.allocUnsafe(length2);
      }
    };
    MessageBuffer.emptyBuffer = Buffer.allocUnsafe(0);
    var ReadableStreamWrapper = class {
      constructor(stream) {
        this.stream = stream;
      }
      onClose(listener) {
        this.stream.on("close", listener);
        return disposable_1.Disposable.create(() => this.stream.off("close", listener));
      }
      onError(listener) {
        this.stream.on("error", listener);
        return disposable_1.Disposable.create(() => this.stream.off("error", listener));
      }
      onEnd(listener) {
        this.stream.on("end", listener);
        return disposable_1.Disposable.create(() => this.stream.off("end", listener));
      }
      onData(listener) {
        this.stream.on("data", listener);
        return disposable_1.Disposable.create(() => this.stream.off("data", listener));
      }
    };
    var WritableStreamWrapper = class {
      constructor(stream) {
        this.stream = stream;
      }
      onClose(listener) {
        this.stream.on("close", listener);
        return disposable_1.Disposable.create(() => this.stream.off("close", listener));
      }
      onError(listener) {
        this.stream.on("error", listener);
        return disposable_1.Disposable.create(() => this.stream.off("error", listener));
      }
      onEnd(listener) {
        this.stream.on("end", listener);
        return disposable_1.Disposable.create(() => this.stream.off("end", listener));
      }
      write(data, encoding) {
        return new Promise((resolve2, reject) => {
          const callback = (error2) => {
            if (error2 === void 0 || error2 === null) {
              resolve2();
            } else {
              reject(error2);
            }
          };
          if (typeof data === "string") {
            this.stream.write(data, encoding, callback);
          } else {
            this.stream.write(data, callback);
          }
        });
      }
      end() {
        this.stream.end();
      }
    };
    var _ril = Object.freeze({
      messageBuffer: Object.freeze({
        create: (encoding) => new MessageBuffer(encoding)
      }),
      applicationJson: Object.freeze({
        encoder: Object.freeze({
          name: "application/json",
          encode: (msg, options) => {
            try {
              return Promise.resolve(Buffer.from(JSON.stringify(msg, void 0, 0), options.charset));
            } catch (err) {
              return Promise.reject(err);
            }
          }
        }),
        decoder: Object.freeze({
          name: "application/json",
          decode: (buffer, options) => {
            try {
              if (buffer instanceof Buffer) {
                return Promise.resolve(JSON.parse(buffer.toString(options.charset)));
              } else {
                return Promise.resolve(JSON.parse(new util_1.TextDecoder(options.charset).decode(buffer)));
              }
            } catch (err) {
              return Promise.reject(err);
            }
          }
        })
      }),
      stream: Object.freeze({
        asReadableStream: (stream) => new ReadableStreamWrapper(stream),
        asWritableStream: (stream) => new WritableStreamWrapper(stream)
      }),
      console,
      timer: Object.freeze({
        setTimeout(callback, ms, ...args) {
          const handle = setTimeout(callback, ms, ...args);
          return { dispose: () => clearTimeout(handle) };
        },
        setImmediate(callback, ...args) {
          const handle = setImmediate(callback, ...args);
          return { dispose: () => clearImmediate(handle) };
        },
        setInterval(callback, ms, ...args) {
          const handle = setInterval(callback, ms, ...args);
          return { dispose: () => clearInterval(handle) };
        }
      })
    });
    function RIL() {
      return _ril;
    }
    (function(RIL2) {
      function install() {
        ral_1.default.install(_ril);
      }
      RIL2.install = install;
    })(RIL || (RIL = {}));
    exports2.default = RIL;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/is.js
var require_is = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/is.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringArray = exports2.array = exports2.func = exports2.error = exports2.number = exports2.string = exports2.boolean = void 0;
    function boolean(value) {
      return value === true || value === false;
    }
    exports2.boolean = boolean;
    function string2(value) {
      return typeof value === "string" || value instanceof String;
    }
    exports2.string = string2;
    function number(value) {
      return typeof value === "number" || value instanceof Number;
    }
    exports2.number = number;
    function error2(value) {
      return value instanceof Error;
    }
    exports2.error = error2;
    function func(value) {
      return typeof value === "function";
    }
    exports2.func = func;
    function array(value) {
      return Array.isArray(value);
    }
    exports2.array = array;
    function stringArray(value) {
      return array(value) && value.every((elem) => string2(elem));
    }
    exports2.stringArray = stringArray;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/messages.js
var require_messages = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/messages.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Message = exports2.NotificationType9 = exports2.NotificationType8 = exports2.NotificationType7 = exports2.NotificationType6 = exports2.NotificationType5 = exports2.NotificationType4 = exports2.NotificationType3 = exports2.NotificationType2 = exports2.NotificationType1 = exports2.NotificationType0 = exports2.NotificationType = exports2.RequestType9 = exports2.RequestType8 = exports2.RequestType7 = exports2.RequestType6 = exports2.RequestType5 = exports2.RequestType4 = exports2.RequestType3 = exports2.RequestType2 = exports2.RequestType1 = exports2.RequestType = exports2.RequestType0 = exports2.AbstractMessageSignature = exports2.ParameterStructures = exports2.ResponseError = exports2.ErrorCodes = void 0;
    var is = require_is();
    var ErrorCodes2;
    (function(ErrorCodes3) {
      ErrorCodes3.ParseError = -32700;
      ErrorCodes3.InvalidRequest = -32600;
      ErrorCodes3.MethodNotFound = -32601;
      ErrorCodes3.InvalidParams = -32602;
      ErrorCodes3.InternalError = -32603;
      ErrorCodes3.jsonrpcReservedErrorRangeStart = -32099;
      ErrorCodes3.serverErrorStart = ErrorCodes3.jsonrpcReservedErrorRangeStart;
      ErrorCodes3.MessageWriteError = -32099;
      ErrorCodes3.MessageReadError = -32098;
      ErrorCodes3.ServerNotInitialized = -32002;
      ErrorCodes3.UnknownErrorCode = -32001;
      ErrorCodes3.jsonrpcReservedErrorRangeEnd = -32e3;
      ErrorCodes3.serverErrorEnd = ErrorCodes3.jsonrpcReservedErrorRangeEnd;
    })(ErrorCodes2 = exports2.ErrorCodes || (exports2.ErrorCodes = {}));
    var ResponseError = class extends Error {
      constructor(code, message, data) {
        super(message);
        this.code = is.number(code) ? code : ErrorCodes2.UnknownErrorCode;
        this.data = data;
        Object.setPrototypeOf(this, ResponseError.prototype);
      }
      toJson() {
        const result2 = {
          code: this.code,
          message: this.message
        };
        if (this.data !== void 0) {
          result2.data = this.data;
        }
        return result2;
      }
    };
    exports2.ResponseError = ResponseError;
    var ParameterStructures = class {
      constructor(kind) {
        this.kind = kind;
      }
      static is(value) {
        return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;
      }
      toString() {
        return this.kind;
      }
    };
    exports2.ParameterStructures = ParameterStructures;
    ParameterStructures.auto = new ParameterStructures("auto");
    ParameterStructures.byPosition = new ParameterStructures("byPosition");
    ParameterStructures.byName = new ParameterStructures("byName");
    var AbstractMessageSignature = class {
      constructor(method, numberOfParams) {
        this.method = method;
        this.numberOfParams = numberOfParams;
      }
      get parameterStructures() {
        return ParameterStructures.auto;
      }
    };
    exports2.AbstractMessageSignature = AbstractMessageSignature;
    var RequestType0 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 0);
      }
    };
    exports2.RequestType0 = RequestType0;
    var RequestType = class extends AbstractMessageSignature {
      constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
      }
      get parameterStructures() {
        return this._parameterStructures;
      }
    };
    exports2.RequestType = RequestType;
    var RequestType1 = class extends AbstractMessageSignature {
      constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
      }
      get parameterStructures() {
        return this._parameterStructures;
      }
    };
    exports2.RequestType1 = RequestType1;
    var RequestType2 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 2);
      }
    };
    exports2.RequestType2 = RequestType2;
    var RequestType3 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 3);
      }
    };
    exports2.RequestType3 = RequestType3;
    var RequestType4 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 4);
      }
    };
    exports2.RequestType4 = RequestType4;
    var RequestType5 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 5);
      }
    };
    exports2.RequestType5 = RequestType5;
    var RequestType6 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 6);
      }
    };
    exports2.RequestType6 = RequestType6;
    var RequestType7 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 7);
      }
    };
    exports2.RequestType7 = RequestType7;
    var RequestType8 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 8);
      }
    };
    exports2.RequestType8 = RequestType8;
    var RequestType9 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 9);
      }
    };
    exports2.RequestType9 = RequestType9;
    var NotificationType = class extends AbstractMessageSignature {
      constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
      }
      get parameterStructures() {
        return this._parameterStructures;
      }
    };
    exports2.NotificationType = NotificationType;
    var NotificationType0 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 0);
      }
    };
    exports2.NotificationType0 = NotificationType0;
    var NotificationType1 = class extends AbstractMessageSignature {
      constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
      }
      get parameterStructures() {
        return this._parameterStructures;
      }
    };
    exports2.NotificationType1 = NotificationType1;
    var NotificationType2 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 2);
      }
    };
    exports2.NotificationType2 = NotificationType2;
    var NotificationType3 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 3);
      }
    };
    exports2.NotificationType3 = NotificationType3;
    var NotificationType4 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 4);
      }
    };
    exports2.NotificationType4 = NotificationType4;
    var NotificationType5 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 5);
      }
    };
    exports2.NotificationType5 = NotificationType5;
    var NotificationType6 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 6);
      }
    };
    exports2.NotificationType6 = NotificationType6;
    var NotificationType7 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 7);
      }
    };
    exports2.NotificationType7 = NotificationType7;
    var NotificationType8 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 8);
      }
    };
    exports2.NotificationType8 = NotificationType8;
    var NotificationType9 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 9);
      }
    };
    exports2.NotificationType9 = NotificationType9;
    var Message;
    (function(Message2) {
      function isRequest(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
      }
      Message2.isRequest = isRequest;
      function isNotification(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && message.id === void 0;
      }
      Message2.isNotification = isNotification;
      function isResponse(message) {
        const candidate = message;
        return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
      }
      Message2.isResponse = isResponse;
    })(Message = exports2.Message || (exports2.Message = {}));
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/linkedMap.js
var require_linkedMap = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/linkedMap.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LRUCache = exports2.LinkedMap = exports2.Touch = void 0;
    var Touch;
    (function(Touch2) {
      Touch2.None = 0;
      Touch2.First = 1;
      Touch2.AsOld = Touch2.First;
      Touch2.Last = 2;
      Touch2.AsNew = Touch2.Last;
    })(Touch = exports2.Touch || (exports2.Touch = {}));
    var LinkedMap = class {
      constructor() {
        this[_a] = "LinkedMap";
        this._map = /* @__PURE__ */ new Map();
        this._head = void 0;
        this._tail = void 0;
        this._size = 0;
        this._state = 0;
      }
      clear() {
        this._map.clear();
        this._head = void 0;
        this._tail = void 0;
        this._size = 0;
        this._state++;
      }
      isEmpty() {
        return !this._head && !this._tail;
      }
      get size() {
        return this._size;
      }
      get first() {
        return this._head?.value;
      }
      get last() {
        return this._tail?.value;
      }
      has(key) {
        return this._map.has(key);
      }
      get(key, touch = Touch.None) {
        const item = this._map.get(key);
        if (!item) {
          return void 0;
        }
        if (touch !== Touch.None) {
          this.touch(item, touch);
        }
        return item.value;
      }
      set(key, value, touch = Touch.None) {
        let item = this._map.get(key);
        if (item) {
          item.value = value;
          if (touch !== Touch.None) {
            this.touch(item, touch);
          }
        } else {
          item = { key, value, next: void 0, previous: void 0 };
          switch (touch) {
            case Touch.None:
              this.addItemLast(item);
              break;
            case Touch.First:
              this.addItemFirst(item);
              break;
            case Touch.Last:
              this.addItemLast(item);
              break;
            default:
              this.addItemLast(item);
              break;
          }
          this._map.set(key, item);
          this._size++;
        }
        return this;
      }
      delete(key) {
        return !!this.remove(key);
      }
      remove(key) {
        const item = this._map.get(key);
        if (!item) {
          return void 0;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return item.value;
      }
      shift() {
        if (!this._head && !this._tail) {
          return void 0;
        }
        if (!this._head || !this._tail) {
          throw new Error("Invalid list");
        }
        const item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
      }
      forEach(callbackfn, thisArg) {
        const state = this._state;
        let current = this._head;
        while (current) {
          if (thisArg) {
            callbackfn.bind(thisArg)(current.value, current.key, this);
          } else {
            callbackfn(current.value, current.key, this);
          }
          if (this._state !== state) {
            throw new Error(`LinkedMap got modified during iteration.`);
          }
          current = current.next;
        }
      }
      keys() {
        const state = this._state;
        let current = this._head;
        const iterator = {
          [Symbol.iterator]: () => {
            return iterator;
          },
          next: () => {
            if (this._state !== state) {
              throw new Error(`LinkedMap got modified during iteration.`);
            }
            if (current) {
              const result2 = { value: current.key, done: false };
              current = current.next;
              return result2;
            } else {
              return { value: void 0, done: true };
            }
          }
        };
        return iterator;
      }
      values() {
        const state = this._state;
        let current = this._head;
        const iterator = {
          [Symbol.iterator]: () => {
            return iterator;
          },
          next: () => {
            if (this._state !== state) {
              throw new Error(`LinkedMap got modified during iteration.`);
            }
            if (current) {
              const result2 = { value: current.value, done: false };
              current = current.next;
              return result2;
            } else {
              return { value: void 0, done: true };
            }
          }
        };
        return iterator;
      }
      entries() {
        const state = this._state;
        let current = this._head;
        const iterator = {
          [Symbol.iterator]: () => {
            return iterator;
          },
          next: () => {
            if (this._state !== state) {
              throw new Error(`LinkedMap got modified during iteration.`);
            }
            if (current) {
              const result2 = { value: [current.key, current.value], done: false };
              current = current.next;
              return result2;
            } else {
              return { value: void 0, done: true };
            }
          }
        };
        return iterator;
      }
      [(_a = Symbol.toStringTag, Symbol.iterator)]() {
        return this.entries();
      }
      trimOld(newSize) {
        if (newSize >= this.size) {
          return;
        }
        if (newSize === 0) {
          this.clear();
          return;
        }
        let current = this._head;
        let currentSize = this.size;
        while (current && currentSize > newSize) {
          this._map.delete(current.key);
          current = current.next;
          currentSize--;
        }
        this._head = current;
        this._size = currentSize;
        if (current) {
          current.previous = void 0;
        }
        this._state++;
      }
      addItemFirst(item) {
        if (!this._head && !this._tail) {
          this._tail = item;
        } else if (!this._head) {
          throw new Error("Invalid list");
        } else {
          item.next = this._head;
          this._head.previous = item;
        }
        this._head = item;
        this._state++;
      }
      addItemLast(item) {
        if (!this._head && !this._tail) {
          this._head = item;
        } else if (!this._tail) {
          throw new Error("Invalid list");
        } else {
          item.previous = this._tail;
          this._tail.next = item;
        }
        this._tail = item;
        this._state++;
      }
      removeItem(item) {
        if (item === this._head && item === this._tail) {
          this._head = void 0;
          this._tail = void 0;
        } else if (item === this._head) {
          if (!item.next) {
            throw new Error("Invalid list");
          }
          item.next.previous = void 0;
          this._head = item.next;
        } else if (item === this._tail) {
          if (!item.previous) {
            throw new Error("Invalid list");
          }
          item.previous.next = void 0;
          this._tail = item.previous;
        } else {
          const next = item.next;
          const previous = item.previous;
          if (!next || !previous) {
            throw new Error("Invalid list");
          }
          next.previous = previous;
          previous.next = next;
        }
        item.next = void 0;
        item.previous = void 0;
        this._state++;
      }
      touch(item, touch) {
        if (!this._head || !this._tail) {
          throw new Error("Invalid list");
        }
        if (touch !== Touch.First && touch !== Touch.Last) {
          return;
        }
        if (touch === Touch.First) {
          if (item === this._head) {
            return;
          }
          const next = item.next;
          const previous = item.previous;
          if (item === this._tail) {
            previous.next = void 0;
            this._tail = previous;
          } else {
            next.previous = previous;
            previous.next = next;
          }
          item.previous = void 0;
          item.next = this._head;
          this._head.previous = item;
          this._head = item;
          this._state++;
        } else if (touch === Touch.Last) {
          if (item === this._tail) {
            return;
          }
          const next = item.next;
          const previous = item.previous;
          if (item === this._head) {
            next.previous = void 0;
            this._head = next;
          } else {
            next.previous = previous;
            previous.next = next;
          }
          item.next = void 0;
          item.previous = this._tail;
          this._tail.next = item;
          this._tail = item;
          this._state++;
        }
      }
      toJSON() {
        const data = [];
        this.forEach((value, key) => {
          data.push([key, value]);
        });
        return data;
      }
      fromJSON(data) {
        this.clear();
        for (const [key, value] of data) {
          this.set(key, value);
        }
      }
    };
    exports2.LinkedMap = LinkedMap;
    var LRUCache = class extends LinkedMap {
      constructor(limit, ratio = 1) {
        super();
        this._limit = limit;
        this._ratio = Math.min(Math.max(0, ratio), 1);
      }
      get limit() {
        return this._limit;
      }
      set limit(limit) {
        this._limit = limit;
        this.checkTrim();
      }
      get ratio() {
        return this._ratio;
      }
      set ratio(ratio) {
        this._ratio = Math.min(Math.max(0, ratio), 1);
        this.checkTrim();
      }
      get(key, touch = Touch.AsNew) {
        return super.get(key, touch);
      }
      peek(key) {
        return super.get(key, Touch.None);
      }
      set(key, value) {
        super.set(key, value, Touch.Last);
        this.checkTrim();
        return this;
      }
      checkTrim() {
        if (this.size > this._limit) {
          this.trimOld(Math.round(this._limit * this._ratio));
        }
      }
    };
    exports2.LRUCache = LRUCache;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/events.js
var require_events = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/events.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Emitter = exports2.Event = void 0;
    var ral_1 = require_ral();
    var Event;
    (function(Event2) {
      const _disposable = { dispose() {
      } };
      Event2.None = function() {
        return _disposable;
      };
    })(Event = exports2.Event || (exports2.Event = {}));
    var CallbackList = class {
      add(callback, context = null, bucket) {
        if (!this._callbacks) {
          this._callbacks = [];
          this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
          bucket.push({ dispose: () => this.remove(callback, context) });
        }
      }
      remove(callback, context = null) {
        if (!this._callbacks) {
          return;
        }
        let foundCallbackWithDifferentContext = false;
        for (let i = 0, len = this._callbacks.length; i < len; i++) {
          if (this._callbacks[i] === callback) {
            if (this._contexts[i] === context) {
              this._callbacks.splice(i, 1);
              this._contexts.splice(i, 1);
              return;
            } else {
              foundCallbackWithDifferentContext = true;
            }
          }
        }
        if (foundCallbackWithDifferentContext) {
          throw new Error("When adding a listener with a context, you should remove it with the same context");
        }
      }
      invoke(...args) {
        if (!this._callbacks) {
          return [];
        }
        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
        for (let i = 0, len = callbacks.length; i < len; i++) {
          try {
            ret.push(callbacks[i].apply(contexts[i], args));
          } catch (e) {
            (0, ral_1.default)().console.error(e);
          }
        }
        return ret;
      }
      isEmpty() {
        return !this._callbacks || this._callbacks.length === 0;
      }
      dispose() {
        this._callbacks = void 0;
        this._contexts = void 0;
      }
    };
    var Emitter = class {
      constructor(_options) {
        this._options = _options;
      }
      get event() {
        if (!this._event) {
          this._event = (listener, thisArgs, disposables) => {
            if (!this._callbacks) {
              this._callbacks = new CallbackList();
            }
            if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
              this._options.onFirstListenerAdd(this);
            }
            this._callbacks.add(listener, thisArgs);
            const result2 = {
              dispose: () => {
                if (!this._callbacks) {
                  return;
                }
                this._callbacks.remove(listener, thisArgs);
                result2.dispose = Emitter._noop;
                if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                  this._options.onLastListenerRemove(this);
                }
              }
            };
            if (Array.isArray(disposables)) {
              disposables.push(result2);
            }
            return result2;
          };
        }
        return this._event;
      }
      fire(event) {
        if (this._callbacks) {
          this._callbacks.invoke.call(this._callbacks, event);
        }
      }
      dispose() {
        if (this._callbacks) {
          this._callbacks.dispose();
          this._callbacks = void 0;
        }
      }
    };
    exports2.Emitter = Emitter;
    Emitter._noop = function() {
    };
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/cancellation.js
var require_cancellation = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/cancellation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CancellationTokenSource = exports2.CancellationToken = void 0;
    var ral_1 = require_ral();
    var Is2 = require_is();
    var events_1 = require_events();
    var CancellationToken;
    (function(CancellationToken2) {
      CancellationToken2.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: events_1.Event.None
      });
      CancellationToken2.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: events_1.Event.None
      });
      function is(value) {
        const candidate = value;
        return candidate && (candidate === CancellationToken2.None || candidate === CancellationToken2.Cancelled || Is2.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested);
      }
      CancellationToken2.is = is;
    })(CancellationToken = exports2.CancellationToken || (exports2.CancellationToken = {}));
    var shortcutEvent = Object.freeze(function(callback, context) {
      const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
      return { dispose() {
        handle.dispose();
      } };
    });
    var MutableToken = class {
      constructor() {
        this._isCancelled = false;
      }
      cancel() {
        if (!this._isCancelled) {
          this._isCancelled = true;
          if (this._emitter) {
            this._emitter.fire(void 0);
            this.dispose();
          }
        }
      }
      get isCancellationRequested() {
        return this._isCancelled;
      }
      get onCancellationRequested() {
        if (this._isCancelled) {
          return shortcutEvent;
        }
        if (!this._emitter) {
          this._emitter = new events_1.Emitter();
        }
        return this._emitter.event;
      }
      dispose() {
        if (this._emitter) {
          this._emitter.dispose();
          this._emitter = void 0;
        }
      }
    };
    var CancellationTokenSource = class {
      get token() {
        if (!this._token) {
          this._token = new MutableToken();
        }
        return this._token;
      }
      cancel() {
        if (!this._token) {
          this._token = CancellationToken.Cancelled;
        } else {
          this._token.cancel();
        }
      }
      dispose() {
        if (!this._token) {
          this._token = CancellationToken.None;
        } else if (this._token instanceof MutableToken) {
          this._token.dispose();
        }
      }
    };
    exports2.CancellationTokenSource = CancellationTokenSource;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/messageReader.js
var require_messageReader = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/messageReader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ReadableStreamMessageReader = exports2.AbstractMessageReader = exports2.MessageReader = void 0;
    var ral_1 = require_ral();
    var Is2 = require_is();
    var events_1 = require_events();
    var MessageReader;
    (function(MessageReader2) {
      function is(value) {
        let candidate = value;
        return candidate && Is2.func(candidate.listen) && Is2.func(candidate.dispose) && Is2.func(candidate.onError) && Is2.func(candidate.onClose) && Is2.func(candidate.onPartialMessage);
      }
      MessageReader2.is = is;
    })(MessageReader = exports2.MessageReader || (exports2.MessageReader = {}));
    var AbstractMessageReader = class {
      constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
        this.partialMessageEmitter = new events_1.Emitter();
      }
      dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
      }
      get onError() {
        return this.errorEmitter.event;
      }
      fireError(error2) {
        this.errorEmitter.fire(this.asError(error2));
      }
      get onClose() {
        return this.closeEmitter.event;
      }
      fireClose() {
        this.closeEmitter.fire(void 0);
      }
      get onPartialMessage() {
        return this.partialMessageEmitter.event;
      }
      firePartialMessage(info) {
        this.partialMessageEmitter.fire(info);
      }
      asError(error2) {
        if (error2 instanceof Error) {
          return error2;
        } else {
          return new Error(`Reader received error. Reason: ${Is2.string(error2.message) ? error2.message : "unknown"}`);
        }
      }
    };
    exports2.AbstractMessageReader = AbstractMessageReader;
    var ResolvedMessageReaderOptions;
    (function(ResolvedMessageReaderOptions2) {
      function fromOptions(options) {
        let charset;
        let result2;
        let contentDecoder;
        const contentDecoders = /* @__PURE__ */ new Map();
        let contentTypeDecoder;
        const contentTypeDecoders = /* @__PURE__ */ new Map();
        if (options === void 0 || typeof options === "string") {
          charset = options ?? "utf-8";
        } else {
          charset = options.charset ?? "utf-8";
          if (options.contentDecoder !== void 0) {
            contentDecoder = options.contentDecoder;
            contentDecoders.set(contentDecoder.name, contentDecoder);
          }
          if (options.contentDecoders !== void 0) {
            for (const decoder of options.contentDecoders) {
              contentDecoders.set(decoder.name, decoder);
            }
          }
          if (options.contentTypeDecoder !== void 0) {
            contentTypeDecoder = options.contentTypeDecoder;
            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
          }
          if (options.contentTypeDecoders !== void 0) {
            for (const decoder of options.contentTypeDecoders) {
              contentTypeDecoders.set(decoder.name, decoder);
            }
          }
        }
        if (contentTypeDecoder === void 0) {
          contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;
          contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
        }
        return { charset, contentDecoder, contentDecoders, contentTypeDecoder, contentTypeDecoders };
      }
      ResolvedMessageReaderOptions2.fromOptions = fromOptions;
    })(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
    var ReadableStreamMessageReader = class extends AbstractMessageReader {
      constructor(readable, options) {
        super();
        this.readable = readable;
        this.options = ResolvedMessageReaderOptions.fromOptions(options);
        this.buffer = (0, ral_1.default)().messageBuffer.create(this.options.charset);
        this._partialMessageTimeout = 1e4;
        this.nextMessageLength = -1;
        this.messageToken = 0;
      }
      set partialMessageTimeout(timeout) {
        this._partialMessageTimeout = timeout;
      }
      get partialMessageTimeout() {
        return this._partialMessageTimeout;
      }
      listen(callback) {
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.partialMessageTimer = void 0;
        this.callback = callback;
        const result2 = this.readable.onData((data) => {
          this.onData(data);
        });
        this.readable.onError((error2) => this.fireError(error2));
        this.readable.onClose(() => this.fireClose());
        return result2;
      }
      onData(data) {
        this.buffer.append(data);
        while (true) {
          if (this.nextMessageLength === -1) {
            const headers = this.buffer.tryReadHeaders();
            if (!headers) {
              return;
            }
            const contentLength = headers.get("Content-Length");
            if (!contentLength) {
              throw new Error("Header must provide a Content-Length property.");
            }
            const length2 = parseInt(contentLength);
            if (isNaN(length2)) {
              throw new Error("Content-Length value must be a number.");
            }
            this.nextMessageLength = length2;
          }
          const body = this.buffer.tryReadBody(this.nextMessageLength);
          if (body === void 0) {
            this.setPartialMessageTimer();
            return;
          }
          this.clearPartialMessageTimer();
          this.nextMessageLength = -1;
          let p;
          if (this.options.contentDecoder !== void 0) {
            p = this.options.contentDecoder.decode(body);
          } else {
            p = Promise.resolve(body);
          }
          p.then((value) => {
            this.options.contentTypeDecoder.decode(value, this.options).then((msg) => {
              this.callback(msg);
            }, (error2) => {
              this.fireError(error2);
            });
          }, (error2) => {
            this.fireError(error2);
          });
        }
      }
      clearPartialMessageTimer() {
        if (this.partialMessageTimer) {
          this.partialMessageTimer.dispose();
          this.partialMessageTimer = void 0;
        }
      }
      setPartialMessageTimer() {
        this.clearPartialMessageTimer();
        if (this._partialMessageTimeout <= 0) {
          return;
        }
        this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout((token, timeout) => {
          this.partialMessageTimer = void 0;
          if (token === this.messageToken) {
            this.firePartialMessage({ messageToken: token, waitingTime: timeout });
            this.setPartialMessageTimer();
          }
        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
      }
    };
    exports2.ReadableStreamMessageReader = ReadableStreamMessageReader;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/semaphore.js
var require_semaphore = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/semaphore.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Semaphore = void 0;
    var ral_1 = require_ral();
    var Semaphore = class {
      constructor(capacity = 1) {
        if (capacity <= 0) {
          throw new Error("Capacity must be greater than 0");
        }
        this._capacity = capacity;
        this._active = 0;
        this._waiting = [];
      }
      lock(thunk) {
        return new Promise((resolve2, reject) => {
          this._waiting.push({ thunk, resolve: resolve2, reject });
          this.runNext();
        });
      }
      get active() {
        return this._active;
      }
      runNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
          return;
        }
        (0, ral_1.default)().timer.setImmediate(() => this.doRunNext());
      }
      doRunNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
          return;
        }
        const next = this._waiting.shift();
        this._active++;
        if (this._active > this._capacity) {
          throw new Error(`To many thunks active`);
        }
        try {
          const result2 = next.thunk();
          if (result2 instanceof Promise) {
            result2.then((value) => {
              this._active--;
              next.resolve(value);
              this.runNext();
            }, (err) => {
              this._active--;
              next.reject(err);
              this.runNext();
            });
          } else {
            this._active--;
            next.resolve(result2);
            this.runNext();
          }
        } catch (err) {
          this._active--;
          next.reject(err);
          this.runNext();
        }
      }
    };
    exports2.Semaphore = Semaphore;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/messageWriter.js
var require_messageWriter = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/messageWriter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WriteableStreamMessageWriter = exports2.AbstractMessageWriter = exports2.MessageWriter = void 0;
    var ral_1 = require_ral();
    var Is2 = require_is();
    var semaphore_1 = require_semaphore();
    var events_1 = require_events();
    var ContentLength = "Content-Length: ";
    var CRLF = "\r\n";
    var MessageWriter;
    (function(MessageWriter2) {
      function is(value) {
        let candidate = value;
        return candidate && Is2.func(candidate.dispose) && Is2.func(candidate.onClose) && Is2.func(candidate.onError) && Is2.func(candidate.write);
      }
      MessageWriter2.is = is;
    })(MessageWriter = exports2.MessageWriter || (exports2.MessageWriter = {}));
    var AbstractMessageWriter = class {
      constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
      }
      dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
      }
      get onError() {
        return this.errorEmitter.event;
      }
      fireError(error2, message, count) {
        this.errorEmitter.fire([this.asError(error2), message, count]);
      }
      get onClose() {
        return this.closeEmitter.event;
      }
      fireClose() {
        this.closeEmitter.fire(void 0);
      }
      asError(error2) {
        if (error2 instanceof Error) {
          return error2;
        } else {
          return new Error(`Writer received error. Reason: ${Is2.string(error2.message) ? error2.message : "unknown"}`);
        }
      }
    };
    exports2.AbstractMessageWriter = AbstractMessageWriter;
    var ResolvedMessageWriterOptions;
    (function(ResolvedMessageWriterOptions2) {
      function fromOptions(options) {
        if (options === void 0 || typeof options === "string") {
          return { charset: options ?? "utf-8", contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder };
        } else {
          return { charset: options.charset ?? "utf-8", contentEncoder: options.contentEncoder, contentTypeEncoder: options.contentTypeEncoder ?? (0, ral_1.default)().applicationJson.encoder };
        }
      }
      ResolvedMessageWriterOptions2.fromOptions = fromOptions;
    })(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
    var WriteableStreamMessageWriter = class extends AbstractMessageWriter {
      constructor(writable, options) {
        super();
        this.writable = writable;
        this.options = ResolvedMessageWriterOptions.fromOptions(options);
        this.errorCount = 0;
        this.writeSemaphore = new semaphore_1.Semaphore(1);
        this.writable.onError((error2) => this.fireError(error2));
        this.writable.onClose(() => this.fireClose());
      }
      async write(msg) {
        return this.writeSemaphore.lock(async () => {
          const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer) => {
            if (this.options.contentEncoder !== void 0) {
              return this.options.contentEncoder.encode(buffer);
            } else {
              return buffer;
            }
          });
          return payload.then((buffer) => {
            const headers = [];
            headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
            headers.push(CRLF);
            return this.doWrite(msg, headers, buffer);
          }, (error2) => {
            this.fireError(error2);
            throw error2;
          });
        });
      }
      async doWrite(msg, headers, data) {
        try {
          await this.writable.write(headers.join(""), "ascii");
          return this.writable.write(data);
        } catch (error2) {
          this.handleError(error2, msg);
          return Promise.reject(error2);
        }
      }
      handleError(error2, msg) {
        this.errorCount++;
        this.fireError(error2, msg, this.errorCount);
      }
      end() {
        this.writable.end();
      }
    };
    exports2.WriteableStreamMessageWriter = WriteableStreamMessageWriter;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/connection.js
var require_connection = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/connection.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createMessageConnection = exports2.ConnectionOptions = exports2.CancellationStrategy = exports2.CancellationSenderStrategy = exports2.CancellationReceiverStrategy = exports2.ConnectionStrategy = exports2.ConnectionError = exports2.ConnectionErrors = exports2.LogTraceNotification = exports2.SetTraceNotification = exports2.TraceFormat = exports2.Trace = exports2.NullLogger = exports2.ProgressType = exports2.ProgressToken = void 0;
    var ral_1 = require_ral();
    var Is2 = require_is();
    var messages_1 = require_messages();
    var linkedMap_1 = require_linkedMap();
    var events_1 = require_events();
    var cancellation_1 = require_cancellation();
    var CancelNotification;
    (function(CancelNotification2) {
      CancelNotification2.type = new messages_1.NotificationType("$/cancelRequest");
    })(CancelNotification || (CancelNotification = {}));
    var ProgressToken;
    (function(ProgressToken2) {
      function is(value) {
        return typeof value === "string" || typeof value === "number";
      }
      ProgressToken2.is = is;
    })(ProgressToken = exports2.ProgressToken || (exports2.ProgressToken = {}));
    var ProgressNotification;
    (function(ProgressNotification2) {
      ProgressNotification2.type = new messages_1.NotificationType("$/progress");
    })(ProgressNotification || (ProgressNotification = {}));
    var ProgressType = class {
      constructor() {
      }
    };
    exports2.ProgressType = ProgressType;
    var StarRequestHandler;
    (function(StarRequestHandler2) {
      function is(value) {
        return Is2.func(value);
      }
      StarRequestHandler2.is = is;
    })(StarRequestHandler || (StarRequestHandler = {}));
    exports2.NullLogger = Object.freeze({
      error: () => {
      },
      warn: () => {
      },
      info: () => {
      },
      log: () => {
      }
    });
    var Trace;
    (function(Trace2) {
      Trace2[Trace2["Off"] = 0] = "Off";
      Trace2[Trace2["Messages"] = 1] = "Messages";
      Trace2[Trace2["Compact"] = 2] = "Compact";
      Trace2[Trace2["Verbose"] = 3] = "Verbose";
    })(Trace = exports2.Trace || (exports2.Trace = {}));
    (function(Trace2) {
      function fromString2(value) {
        if (!Is2.string(value)) {
          return Trace2.Off;
        }
        value = value.toLowerCase();
        switch (value) {
          case "off":
            return Trace2.Off;
          case "messages":
            return Trace2.Messages;
          case "compact":
            return Trace2.Compact;
          case "verbose":
            return Trace2.Verbose;
          default:
            return Trace2.Off;
        }
      }
      Trace2.fromString = fromString2;
      function toString6(value) {
        switch (value) {
          case Trace2.Off:
            return "off";
          case Trace2.Messages:
            return "messages";
          case Trace2.Compact:
            return "compact";
          case Trace2.Verbose:
            return "verbose";
          default:
            return "off";
        }
      }
      Trace2.toString = toString6;
    })(Trace = exports2.Trace || (exports2.Trace = {}));
    var TraceFormat;
    (function(TraceFormat2) {
      TraceFormat2["Text"] = "text";
      TraceFormat2["JSON"] = "json";
    })(TraceFormat = exports2.TraceFormat || (exports2.TraceFormat = {}));
    (function(TraceFormat2) {
      function fromString2(value) {
        if (!Is2.string(value)) {
          return TraceFormat2.Text;
        }
        value = value.toLowerCase();
        if (value === "json") {
          return TraceFormat2.JSON;
        } else {
          return TraceFormat2.Text;
        }
      }
      TraceFormat2.fromString = fromString2;
    })(TraceFormat = exports2.TraceFormat || (exports2.TraceFormat = {}));
    var SetTraceNotification;
    (function(SetTraceNotification2) {
      SetTraceNotification2.type = new messages_1.NotificationType("$/setTrace");
    })(SetTraceNotification = exports2.SetTraceNotification || (exports2.SetTraceNotification = {}));
    var LogTraceNotification;
    (function(LogTraceNotification2) {
      LogTraceNotification2.type = new messages_1.NotificationType("$/logTrace");
    })(LogTraceNotification = exports2.LogTraceNotification || (exports2.LogTraceNotification = {}));
    var ConnectionErrors;
    (function(ConnectionErrors2) {
      ConnectionErrors2[ConnectionErrors2["Closed"] = 1] = "Closed";
      ConnectionErrors2[ConnectionErrors2["Disposed"] = 2] = "Disposed";
      ConnectionErrors2[ConnectionErrors2["AlreadyListening"] = 3] = "AlreadyListening";
    })(ConnectionErrors = exports2.ConnectionErrors || (exports2.ConnectionErrors = {}));
    var ConnectionError = class extends Error {
      constructor(code, message) {
        super(message);
        this.code = code;
        Object.setPrototypeOf(this, ConnectionError.prototype);
      }
    };
    exports2.ConnectionError = ConnectionError;
    var ConnectionStrategy;
    (function(ConnectionStrategy2) {
      function is(value) {
        const candidate = value;
        return candidate && Is2.func(candidate.cancelUndispatched);
      }
      ConnectionStrategy2.is = is;
    })(ConnectionStrategy = exports2.ConnectionStrategy || (exports2.ConnectionStrategy = {}));
    var CancellationReceiverStrategy;
    (function(CancellationReceiverStrategy2) {
      CancellationReceiverStrategy2.Message = Object.freeze({
        createCancellationTokenSource(_) {
          return new cancellation_1.CancellationTokenSource();
        }
      });
      function is(value) {
        const candidate = value;
        return candidate && Is2.func(candidate.createCancellationTokenSource);
      }
      CancellationReceiverStrategy2.is = is;
    })(CancellationReceiverStrategy = exports2.CancellationReceiverStrategy || (exports2.CancellationReceiverStrategy = {}));
    var CancellationSenderStrategy;
    (function(CancellationSenderStrategy2) {
      CancellationSenderStrategy2.Message = Object.freeze({
        sendCancellation(conn, id2) {
          return conn.sendNotification(CancelNotification.type, { id: id2 });
        },
        cleanup(_) {
        }
      });
      function is(value) {
        const candidate = value;
        return candidate && Is2.func(candidate.sendCancellation) && Is2.func(candidate.cleanup);
      }
      CancellationSenderStrategy2.is = is;
    })(CancellationSenderStrategy = exports2.CancellationSenderStrategy || (exports2.CancellationSenderStrategy = {}));
    var CancellationStrategy;
    (function(CancellationStrategy2) {
      CancellationStrategy2.Message = Object.freeze({
        receiver: CancellationReceiverStrategy.Message,
        sender: CancellationSenderStrategy.Message
      });
      function is(value) {
        const candidate = value;
        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
      }
      CancellationStrategy2.is = is;
    })(CancellationStrategy = exports2.CancellationStrategy || (exports2.CancellationStrategy = {}));
    var ConnectionOptions;
    (function(ConnectionOptions2) {
      function is(value) {
        const candidate = value;
        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy));
      }
      ConnectionOptions2.is = is;
    })(ConnectionOptions = exports2.ConnectionOptions || (exports2.ConnectionOptions = {}));
    var ConnectionState;
    (function(ConnectionState2) {
      ConnectionState2[ConnectionState2["New"] = 1] = "New";
      ConnectionState2[ConnectionState2["Listening"] = 2] = "Listening";
      ConnectionState2[ConnectionState2["Closed"] = 3] = "Closed";
      ConnectionState2[ConnectionState2["Disposed"] = 4] = "Disposed";
    })(ConnectionState || (ConnectionState = {}));
    function createMessageConnection(messageReader, messageWriter, _logger, options) {
      const logger = _logger !== void 0 ? _logger : exports2.NullLogger;
      let sequenceNumber = 0;
      let notificationSequenceNumber = 0;
      let unknownResponseSequenceNumber = 0;
      const version2 = "2.0";
      let starRequestHandler = void 0;
      const requestHandlers = /* @__PURE__ */ new Map();
      let starNotificationHandler = void 0;
      const notificationHandlers = /* @__PURE__ */ new Map();
      const progressHandlers = /* @__PURE__ */ new Map();
      let timer;
      let messageQueue = new linkedMap_1.LinkedMap();
      let responsePromises = /* @__PURE__ */ new Map();
      let knownCanceledRequests = /* @__PURE__ */ new Set();
      let requestTokens = /* @__PURE__ */ new Map();
      let trace = Trace.Off;
      let traceFormat = TraceFormat.Text;
      let tracer;
      let state = ConnectionState.New;
      const errorEmitter = new events_1.Emitter();
      const closeEmitter = new events_1.Emitter();
      const unhandledNotificationEmitter = new events_1.Emitter();
      const unhandledProgressEmitter = new events_1.Emitter();
      const disposeEmitter = new events_1.Emitter();
      const cancellationStrategy = options && options.cancellationStrategy ? options.cancellationStrategy : CancellationStrategy.Message;
      function createRequestQueueKey(id2) {
        if (id2 === null) {
          throw new Error(`Can't send requests with id null since the response can't be correlated.`);
        }
        return "req-" + id2.toString();
      }
      function createResponseQueueKey(id2) {
        if (id2 === null) {
          return "res-unknown-" + (++unknownResponseSequenceNumber).toString();
        } else {
          return "res-" + id2.toString();
        }
      }
      function createNotificationQueueKey() {
        return "not-" + (++notificationSequenceNumber).toString();
      }
      function addMessageToQueue(queue2, message) {
        if (messages_1.Message.isRequest(message)) {
          queue2.set(createRequestQueueKey(message.id), message);
        } else if (messages_1.Message.isResponse(message)) {
          queue2.set(createResponseQueueKey(message.id), message);
        } else {
          queue2.set(createNotificationQueueKey(), message);
        }
      }
      function cancelUndispatched(_message) {
        return void 0;
      }
      function isListening() {
        return state === ConnectionState.Listening;
      }
      function isClosed() {
        return state === ConnectionState.Closed;
      }
      function isDisposed() {
        return state === ConnectionState.Disposed;
      }
      function closeHandler() {
        if (state === ConnectionState.New || state === ConnectionState.Listening) {
          state = ConnectionState.Closed;
          closeEmitter.fire(void 0);
        }
      }
      function readErrorHandler(error2) {
        errorEmitter.fire([error2, void 0, void 0]);
      }
      function writeErrorHandler(data) {
        errorEmitter.fire(data);
      }
      messageReader.onClose(closeHandler);
      messageReader.onError(readErrorHandler);
      messageWriter.onClose(closeHandler);
      messageWriter.onError(writeErrorHandler);
      function triggerMessageQueue() {
        if (timer || messageQueue.size === 0) {
          return;
        }
        timer = (0, ral_1.default)().timer.setImmediate(() => {
          timer = void 0;
          processMessageQueue();
        });
      }
      function processMessageQueue() {
        if (messageQueue.size === 0) {
          return;
        }
        const message = messageQueue.shift();
        try {
          if (messages_1.Message.isRequest(message)) {
            handleRequest(message);
          } else if (messages_1.Message.isNotification(message)) {
            handleNotification(message);
          } else if (messages_1.Message.isResponse(message)) {
            handleResponse(message);
          } else {
            handleInvalidMessage(message);
          }
        } finally {
          triggerMessageQueue();
        }
      }
      const callback = (message) => {
        try {
          if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {
            const cancelId = message.params.id;
            const key = createRequestQueueKey(cancelId);
            const toCancel = messageQueue.get(key);
            if (messages_1.Message.isRequest(toCancel)) {
              const strategy = options?.connectionStrategy;
              const response = strategy && strategy.cancelUndispatched ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
              if (response && (response.error !== void 0 || response.result !== void 0)) {
                messageQueue.delete(key);
                requestTokens.delete(cancelId);
                response.id = toCancel.id;
                traceSendingResponse(response, message.method, Date.now());
                messageWriter.write(response).catch(() => logger.error(`Sending response for canceled message failed.`));
                return;
              }
            }
            const cancellationToken = requestTokens.get(cancelId);
            if (cancellationToken !== void 0) {
              cancellationToken.cancel();
              traceReceivedNotification(message);
              return;
            } else {
              knownCanceledRequests.add(cancelId);
            }
          }
          addMessageToQueue(messageQueue, message);
        } finally {
          triggerMessageQueue();
        }
      };
      function handleRequest(requestMessage) {
        if (isDisposed()) {
          return;
        }
        function reply(resultOrError, method, startTime3) {
          const message = {
            jsonrpc: version2,
            id: requestMessage.id
          };
          if (resultOrError instanceof messages_1.ResponseError) {
            message.error = resultOrError.toJson();
          } else {
            message.result = resultOrError === void 0 ? null : resultOrError;
          }
          traceSendingResponse(message, method, startTime3);
          messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replyError(error2, method, startTime3) {
          const message = {
            jsonrpc: version2,
            id: requestMessage.id,
            error: error2.toJson()
          };
          traceSendingResponse(message, method, startTime3);
          messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replySuccess(result2, method, startTime3) {
          if (result2 === void 0) {
            result2 = null;
          }
          const message = {
            jsonrpc: version2,
            id: requestMessage.id,
            result: result2
          };
          traceSendingResponse(message, method, startTime3);
          messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        traceReceivedRequest(requestMessage);
        const element = requestHandlers.get(requestMessage.method);
        let type;
        let requestHandler;
        if (element) {
          type = element.type;
          requestHandler = element.handler;
        }
        const startTime2 = Date.now();
        if (requestHandler || starRequestHandler) {
          const tokenKey = requestMessage.id ?? String(Date.now());
          const cancellationSource = cancellationStrategy.receiver.createCancellationTokenSource(tokenKey);
          if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {
            cancellationSource.cancel();
          }
          if (requestMessage.id !== null) {
            requestTokens.set(tokenKey, cancellationSource);
          }
          try {
            let handlerResult;
            if (requestHandler) {
              if (requestMessage.params === void 0) {
                if (type !== void 0 && type.numberOfParams !== 0) {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but received none.`), requestMessage.method, startTime2);
                  return;
                }
                handlerResult = requestHandler(cancellationSource.token);
              } else if (Array.isArray(requestMessage.params)) {
                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byName) {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime2);
                  return;
                }
                handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
              } else {
                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime2);
                  return;
                }
                handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
              }
            } else if (starRequestHandler) {
              handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
            }
            const promise = handlerResult;
            if (!handlerResult) {
              requestTokens.delete(tokenKey);
              replySuccess(handlerResult, requestMessage.method, startTime2);
            } else if (promise.then) {
              promise.then((resultOrError) => {
                requestTokens.delete(tokenKey);
                reply(resultOrError, requestMessage.method, startTime2);
              }, (error2) => {
                requestTokens.delete(tokenKey);
                if (error2 instanceof messages_1.ResponseError) {
                  replyError(error2, requestMessage.method, startTime2);
                } else if (error2 && Is2.string(error2.message)) {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error2.message}`), requestMessage.method, startTime2);
                } else {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime2);
                }
              });
            } else {
              requestTokens.delete(tokenKey);
              reply(handlerResult, requestMessage.method, startTime2);
            }
          } catch (error2) {
            requestTokens.delete(tokenKey);
            if (error2 instanceof messages_1.ResponseError) {
              reply(error2, requestMessage.method, startTime2);
            } else if (error2 && Is2.string(error2.message)) {
              replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error2.message}`), requestMessage.method, startTime2);
            } else {
              replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime2);
            }
          }
        } else {
          replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime2);
        }
      }
      function handleResponse(responseMessage) {
        if (isDisposed()) {
          return;
        }
        if (responseMessage.id === null) {
          if (responseMessage.error) {
            logger.error(`Received response message without id: Error is: 
${JSON.stringify(responseMessage.error, void 0, 4)}`);
          } else {
            logger.error(`Received response message without id. No further error information provided.`);
          }
        } else {
          const key = responseMessage.id;
          const responsePromise = responsePromises.get(key);
          traceReceivedResponse(responseMessage, responsePromise);
          if (responsePromise !== void 0) {
            responsePromises.delete(key);
            try {
              if (responseMessage.error) {
                const error2 = responseMessage.error;
                responsePromise.reject(new messages_1.ResponseError(error2.code, error2.message, error2.data));
              } else if (responseMessage.result !== void 0) {
                responsePromise.resolve(responseMessage.result);
              } else {
                throw new Error("Should never happen.");
              }
            } catch (error2) {
              if (error2.message) {
                logger.error(`Response handler '${responsePromise.method}' failed with message: ${error2.message}`);
              } else {
                logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
              }
            }
          }
        }
      }
      function handleNotification(message) {
        if (isDisposed()) {
          return;
        }
        let type = void 0;
        let notificationHandler;
        if (message.method === CancelNotification.type.method) {
          const cancelId = message.params.id;
          knownCanceledRequests.delete(cancelId);
          traceReceivedNotification(message);
          return;
        } else {
          const element = notificationHandlers.get(message.method);
          if (element) {
            notificationHandler = element.handler;
            type = element.type;
          }
        }
        if (notificationHandler || starNotificationHandler) {
          try {
            traceReceivedNotification(message);
            if (notificationHandler) {
              if (message.params === void 0) {
                if (type !== void 0) {
                  if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                    logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received none.`);
                  }
                }
                notificationHandler();
              } else if (Array.isArray(message.params)) {
                const params = message.params;
                if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {
                  notificationHandler({ token: params[0], value: params[1] });
                } else {
                  if (type !== void 0) {
                    if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                      logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                    }
                    if (type.numberOfParams !== message.params.length) {
                      logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${params.length} arguments`);
                    }
                  }
                  notificationHandler(...params);
                }
              } else {
                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                  logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                }
                notificationHandler(message.params);
              }
            } else if (starNotificationHandler) {
              starNotificationHandler(message.method, message.params);
            }
          } catch (error2) {
            if (error2.message) {
              logger.error(`Notification handler '${message.method}' failed with message: ${error2.message}`);
            } else {
              logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
            }
          }
        } else {
          unhandledNotificationEmitter.fire(message);
        }
      }
      function handleInvalidMessage(message) {
        if (!message) {
          logger.error("Received empty message.");
          return;
        }
        logger.error(`Received message which is neither a response nor a notification message:
${JSON.stringify(message, null, 4)}`);
        const responseMessage = message;
        if (Is2.string(responseMessage.id) || Is2.number(responseMessage.id)) {
          const key = responseMessage.id;
          const responseHandler = responsePromises.get(key);
          if (responseHandler) {
            responseHandler.reject(new Error("The received response has neither a result nor an error property."));
          }
        }
      }
      function stringifyTrace(params) {
        if (params === void 0 || params === null) {
          return void 0;
        }
        switch (trace) {
          case Trace.Verbose:
            return JSON.stringify(params, null, 4);
          case Trace.Compact:
            return JSON.stringify(params);
          default:
            return void 0;
        }
      }
      function traceSendingRequest(message) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
            data = `Params: ${stringifyTrace(message.params)}

`;
          }
          tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
        } else {
          logLSPMessage("send-request", message);
        }
      }
      function traceSendingNotification(message) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if (trace === Trace.Verbose || trace === Trace.Compact) {
            if (message.params) {
              data = `Params: ${stringifyTrace(message.params)}

`;
            } else {
              data = "No parameters provided.\n\n";
            }
          }
          tracer.log(`Sending notification '${message.method}'.`, data);
        } else {
          logLSPMessage("send-notification", message);
        }
      }
      function traceSendingResponse(message, method, startTime2) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if (trace === Trace.Verbose || trace === Trace.Compact) {
            if (message.error && message.error.data) {
              data = `Error data: ${stringifyTrace(message.error.data)}

`;
            } else {
              if (message.result) {
                data = `Result: ${stringifyTrace(message.result)}

`;
              } else if (message.error === void 0) {
                data = "No result returned.\n\n";
              }
            }
          }
          tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime2}ms`, data);
        } else {
          logLSPMessage("send-response", message);
        }
      }
      function traceReceivedRequest(message) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
            data = `Params: ${stringifyTrace(message.params)}

`;
          }
          tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
        } else {
          logLSPMessage("receive-request", message);
        }
      }
      function traceReceivedNotification(message) {
        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if (trace === Trace.Verbose || trace === Trace.Compact) {
            if (message.params) {
              data = `Params: ${stringifyTrace(message.params)}

`;
            } else {
              data = "No parameters provided.\n\n";
            }
          }
          tracer.log(`Received notification '${message.method}'.`, data);
        } else {
          logLSPMessage("receive-notification", message);
        }
      }
      function traceReceivedResponse(message, responsePromise) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if (trace === Trace.Verbose || trace === Trace.Compact) {
            if (message.error && message.error.data) {
              data = `Error data: ${stringifyTrace(message.error.data)}

`;
            } else {
              if (message.result) {
                data = `Result: ${stringifyTrace(message.result)}

`;
              } else if (message.error === void 0) {
                data = "No result returned.\n\n";
              }
            }
          }
          if (responsePromise) {
            const error2 = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : "";
            tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error2}`, data);
          } else {
            tracer.log(`Received response ${message.id} without active response promise.`, data);
          }
        } else {
          logLSPMessage("receive-response", message);
        }
      }
      function logLSPMessage(type, message) {
        if (!tracer || trace === Trace.Off) {
          return;
        }
        const lspMessage = {
          isLSPMessage: true,
          type,
          message,
          timestamp: Date.now()
        };
        tracer.log(lspMessage);
      }
      function throwIfClosedOrDisposed() {
        if (isClosed()) {
          throw new ConnectionError(ConnectionErrors.Closed, "Connection is closed.");
        }
        if (isDisposed()) {
          throw new ConnectionError(ConnectionErrors.Disposed, "Connection is disposed.");
        }
      }
      function throwIfListening() {
        if (isListening()) {
          throw new ConnectionError(ConnectionErrors.AlreadyListening, "Connection is already listening");
        }
      }
      function throwIfNotListening() {
        if (!isListening()) {
          throw new Error("Call listen() first.");
        }
      }
      function undefinedToNull(param) {
        if (param === void 0) {
          return null;
        } else {
          return param;
        }
      }
      function nullToUndefined(param) {
        if (param === null) {
          return void 0;
        } else {
          return param;
        }
      }
      function isNamedParam(param) {
        return param !== void 0 && param !== null && !Array.isArray(param) && typeof param === "object";
      }
      function computeSingleParam(parameterStructures, param) {
        switch (parameterStructures) {
          case messages_1.ParameterStructures.auto:
            if (isNamedParam(param)) {
              return nullToUndefined(param);
            } else {
              return [undefinedToNull(param)];
            }
          case messages_1.ParameterStructures.byName:
            if (!isNamedParam(param)) {
              throw new Error(`Received parameters by name but param is not an object literal.`);
            }
            return nullToUndefined(param);
          case messages_1.ParameterStructures.byPosition:
            return [undefinedToNull(param)];
          default:
            throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
        }
      }
      function computeMessageParams(type, params) {
        let result2;
        const numberOfParams = type.numberOfParams;
        switch (numberOfParams) {
          case 0:
            result2 = void 0;
            break;
          case 1:
            result2 = computeSingleParam(type.parameterStructures, params[0]);
            break;
          default:
            result2 = [];
            for (let i = 0; i < params.length && i < numberOfParams; i++) {
              result2.push(undefinedToNull(params[i]));
            }
            if (params.length < numberOfParams) {
              for (let i = params.length; i < numberOfParams; i++) {
                result2.push(null);
              }
            }
            break;
        }
        return result2;
      }
      const connection = {
        sendNotification: (type, ...args) => {
          throwIfClosedOrDisposed();
          let method;
          let messageParams;
          if (Is2.string(type)) {
            method = type;
            const first = args[0];
            let paramStart = 0;
            let parameterStructures = messages_1.ParameterStructures.auto;
            if (messages_1.ParameterStructures.is(first)) {
              paramStart = 1;
              parameterStructures = first;
            }
            let paramEnd = args.length;
            const numberOfParams = paramEnd - paramStart;
            switch (numberOfParams) {
              case 0:
                messageParams = void 0;
                break;
              case 1:
                messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                break;
              default:
                if (parameterStructures === messages_1.ParameterStructures.byName) {
                  throw new Error(`Received ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                }
                messageParams = args.slice(paramStart, paramEnd).map((value) => undefinedToNull(value));
                break;
            }
          } else {
            const params = args;
            method = type.method;
            messageParams = computeMessageParams(type, params);
          }
          const notificationMessage = {
            jsonrpc: version2,
            method,
            params: messageParams
          };
          traceSendingNotification(notificationMessage);
          return messageWriter.write(notificationMessage).catch(() => logger.error(`Sending notification failed.`));
        },
        onNotification: (type, handler) => {
          throwIfClosedOrDisposed();
          let method;
          if (Is2.func(type)) {
            starNotificationHandler = type;
          } else if (handler) {
            if (Is2.string(type)) {
              method = type;
              notificationHandlers.set(type, { type: void 0, handler });
            } else {
              method = type.method;
              notificationHandlers.set(type.method, { type, handler });
            }
          }
          return {
            dispose: () => {
              if (method !== void 0) {
                notificationHandlers.delete(method);
              } else {
                starNotificationHandler = void 0;
              }
            }
          };
        },
        onProgress: (_type, token, handler) => {
          if (progressHandlers.has(token)) {
            throw new Error(`Progress handler for token ${token} already registered`);
          }
          progressHandlers.set(token, handler);
          return {
            dispose: () => {
              progressHandlers.delete(token);
            }
          };
        },
        sendProgress: (_type, token, value) => {
          return connection.sendNotification(ProgressNotification.type, { token, value });
        },
        onUnhandledProgress: unhandledProgressEmitter.event,
        sendRequest: (type, ...args) => {
          throwIfClosedOrDisposed();
          throwIfNotListening();
          let method;
          let messageParams;
          let token = void 0;
          if (Is2.string(type)) {
            method = type;
            const first = args[0];
            const last2 = args[args.length - 1];
            let paramStart = 0;
            let parameterStructures = messages_1.ParameterStructures.auto;
            if (messages_1.ParameterStructures.is(first)) {
              paramStart = 1;
              parameterStructures = first;
            }
            let paramEnd = args.length;
            if (cancellation_1.CancellationToken.is(last2)) {
              paramEnd = paramEnd - 1;
              token = last2;
            }
            const numberOfParams = paramEnd - paramStart;
            switch (numberOfParams) {
              case 0:
                messageParams = void 0;
                break;
              case 1:
                messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                break;
              default:
                if (parameterStructures === messages_1.ParameterStructures.byName) {
                  throw new Error(`Received ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                }
                messageParams = args.slice(paramStart, paramEnd).map((value) => undefinedToNull(value));
                break;
            }
          } else {
            const params = args;
            method = type.method;
            messageParams = computeMessageParams(type, params);
            const numberOfParams = type.numberOfParams;
            token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : void 0;
          }
          const id2 = sequenceNumber++;
          let disposable;
          if (token) {
            disposable = token.onCancellationRequested(() => {
              const p = cancellationStrategy.sender.sendCancellation(connection, id2);
              if (p === void 0) {
                logger.log(`Received no promise from cancellation strategy when cancelling id ${id2}`);
                return Promise.resolve();
              } else {
                return p.catch(() => {
                  logger.log(`Sending cancellation messages for id ${id2} failed`);
                });
              }
            });
          }
          const result2 = new Promise((resolve2, reject) => {
            const requestMessage = {
              jsonrpc: version2,
              id: id2,
              method,
              params: messageParams
            };
            const resolveWithCleanup = (r) => {
              resolve2(r);
              cancellationStrategy.sender.cleanup(id2);
              disposable?.dispose();
            };
            const rejectWithCleanup = (r) => {
              reject(r);
              cancellationStrategy.sender.cleanup(id2);
              disposable?.dispose();
            };
            let responsePromise = { method, timerStart: Date.now(), resolve: resolveWithCleanup, reject: rejectWithCleanup };
            traceSendingRequest(requestMessage);
            try {
              messageWriter.write(requestMessage).catch(() => logger.error(`Sending request failed.`));
            } catch (e) {
              responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, e.message ? e.message : "Unknown reason"));
              responsePromise = null;
            }
            if (responsePromise) {
              responsePromises.set(id2, responsePromise);
            }
          });
          return result2;
        },
        onRequest: (type, handler) => {
          throwIfClosedOrDisposed();
          let method = null;
          if (StarRequestHandler.is(type)) {
            method = void 0;
            starRequestHandler = type;
          } else if (Is2.string(type)) {
            method = null;
            if (handler !== void 0) {
              method = type;
              requestHandlers.set(type, { handler, type: void 0 });
            }
          } else {
            if (handler !== void 0) {
              method = type.method;
              requestHandlers.set(type.method, { type, handler });
            }
          }
          return {
            dispose: () => {
              if (method === null) {
                return;
              }
              if (method !== void 0) {
                requestHandlers.delete(method);
              } else {
                starRequestHandler = void 0;
              }
            }
          };
        },
        trace: (_value, _tracer, sendNotificationOrTraceOptions) => {
          let _sendNotification = false;
          let _traceFormat = TraceFormat.Text;
          if (sendNotificationOrTraceOptions !== void 0) {
            if (Is2.boolean(sendNotificationOrTraceOptions)) {
              _sendNotification = sendNotificationOrTraceOptions;
            } else {
              _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
              _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
            }
          }
          trace = _value;
          traceFormat = _traceFormat;
          if (trace === Trace.Off) {
            tracer = void 0;
          } else {
            tracer = _tracer;
          }
          if (_sendNotification && !isClosed() && !isDisposed()) {
            connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) }).catch(() => {
              logger.error(`Sending trace notification failed`);
            });
          }
        },
        onError: errorEmitter.event,
        onClose: closeEmitter.event,
        onUnhandledNotification: unhandledNotificationEmitter.event,
        onDispose: disposeEmitter.event,
        end: () => {
          messageWriter.end();
        },
        dispose: () => {
          if (isDisposed()) {
            return;
          }
          state = ConnectionState.Disposed;
          disposeEmitter.fire(void 0);
          const error2 = new Error("Connection got disposed.");
          for (const promise of responsePromises.values()) {
            promise.reject(error2);
          }
          responsePromises = /* @__PURE__ */ new Map();
          requestTokens = /* @__PURE__ */ new Map();
          knownCanceledRequests = /* @__PURE__ */ new Set();
          messageQueue = new linkedMap_1.LinkedMap();
          if (Is2.func(messageWriter.dispose)) {
            messageWriter.dispose();
          }
          if (Is2.func(messageReader.dispose)) {
            messageReader.dispose();
          }
        },
        listen: () => {
          throwIfClosedOrDisposed();
          throwIfListening();
          state = ConnectionState.Listening;
          messageReader.listen(callback);
        },
        inspect: () => {
          (0, ral_1.default)().console.log("inspect");
        }
      };
      connection.onNotification(LogTraceNotification.type, (params) => {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        const verbose = trace === Trace.Verbose || trace === Trace.Compact;
        tracer.log(params.message, verbose ? params.verbose : void 0);
      });
      connection.onNotification(ProgressNotification.type, (params) => {
        const handler = progressHandlers.get(params.token);
        if (handler) {
          handler(params.value);
        } else {
          unhandledProgressEmitter.fire(params);
        }
      });
      return connection;
    }
    exports2.createMessageConnection = createMessageConnection;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/api.js
var require_api = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/common/api.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SetTraceNotification = exports2.TraceFormat = exports2.Trace = exports2.ProgressType = exports2.ProgressToken = exports2.createMessageConnection = exports2.NullLogger = exports2.ConnectionOptions = exports2.ConnectionStrategy = exports2.WriteableStreamMessageWriter = exports2.AbstractMessageWriter = exports2.MessageWriter = exports2.ReadableStreamMessageReader = exports2.AbstractMessageReader = exports2.MessageReader = exports2.CancellationToken = exports2.CancellationTokenSource = exports2.Emitter = exports2.Event = exports2.Disposable = exports2.LRUCache = exports2.Touch = exports2.LinkedMap = exports2.ParameterStructures = exports2.NotificationType9 = exports2.NotificationType8 = exports2.NotificationType7 = exports2.NotificationType6 = exports2.NotificationType5 = exports2.NotificationType4 = exports2.NotificationType3 = exports2.NotificationType2 = exports2.NotificationType1 = exports2.NotificationType0 = exports2.NotificationType = exports2.ErrorCodes = exports2.ResponseError = exports2.RequestType9 = exports2.RequestType8 = exports2.RequestType7 = exports2.RequestType6 = exports2.RequestType5 = exports2.RequestType4 = exports2.RequestType3 = exports2.RequestType2 = exports2.RequestType1 = exports2.RequestType0 = exports2.RequestType = exports2.Message = exports2.RAL = void 0;
    exports2.CancellationStrategy = exports2.CancellationSenderStrategy = exports2.CancellationReceiverStrategy = exports2.ConnectionError = exports2.ConnectionErrors = exports2.LogTraceNotification = void 0;
    var messages_1 = require_messages();
    Object.defineProperty(exports2, "Message", { enumerable: true, get: function() {
      return messages_1.Message;
    } });
    Object.defineProperty(exports2, "RequestType", { enumerable: true, get: function() {
      return messages_1.RequestType;
    } });
    Object.defineProperty(exports2, "RequestType0", { enumerable: true, get: function() {
      return messages_1.RequestType0;
    } });
    Object.defineProperty(exports2, "RequestType1", { enumerable: true, get: function() {
      return messages_1.RequestType1;
    } });
    Object.defineProperty(exports2, "RequestType2", { enumerable: true, get: function() {
      return messages_1.RequestType2;
    } });
    Object.defineProperty(exports2, "RequestType3", { enumerable: true, get: function() {
      return messages_1.RequestType3;
    } });
    Object.defineProperty(exports2, "RequestType4", { enumerable: true, get: function() {
      return messages_1.RequestType4;
    } });
    Object.defineProperty(exports2, "RequestType5", { enumerable: true, get: function() {
      return messages_1.RequestType5;
    } });
    Object.defineProperty(exports2, "RequestType6", { enumerable: true, get: function() {
      return messages_1.RequestType6;
    } });
    Object.defineProperty(exports2, "RequestType7", { enumerable: true, get: function() {
      return messages_1.RequestType7;
    } });
    Object.defineProperty(exports2, "RequestType8", { enumerable: true, get: function() {
      return messages_1.RequestType8;
    } });
    Object.defineProperty(exports2, "RequestType9", { enumerable: true, get: function() {
      return messages_1.RequestType9;
    } });
    Object.defineProperty(exports2, "ResponseError", { enumerable: true, get: function() {
      return messages_1.ResponseError;
    } });
    Object.defineProperty(exports2, "ErrorCodes", { enumerable: true, get: function() {
      return messages_1.ErrorCodes;
    } });
    Object.defineProperty(exports2, "NotificationType", { enumerable: true, get: function() {
      return messages_1.NotificationType;
    } });
    Object.defineProperty(exports2, "NotificationType0", { enumerable: true, get: function() {
      return messages_1.NotificationType0;
    } });
    Object.defineProperty(exports2, "NotificationType1", { enumerable: true, get: function() {
      return messages_1.NotificationType1;
    } });
    Object.defineProperty(exports2, "NotificationType2", { enumerable: true, get: function() {
      return messages_1.NotificationType2;
    } });
    Object.defineProperty(exports2, "NotificationType3", { enumerable: true, get: function() {
      return messages_1.NotificationType3;
    } });
    Object.defineProperty(exports2, "NotificationType4", { enumerable: true, get: function() {
      return messages_1.NotificationType4;
    } });
    Object.defineProperty(exports2, "NotificationType5", { enumerable: true, get: function() {
      return messages_1.NotificationType5;
    } });
    Object.defineProperty(exports2, "NotificationType6", { enumerable: true, get: function() {
      return messages_1.NotificationType6;
    } });
    Object.defineProperty(exports2, "NotificationType7", { enumerable: true, get: function() {
      return messages_1.NotificationType7;
    } });
    Object.defineProperty(exports2, "NotificationType8", { enumerable: true, get: function() {
      return messages_1.NotificationType8;
    } });
    Object.defineProperty(exports2, "NotificationType9", { enumerable: true, get: function() {
      return messages_1.NotificationType9;
    } });
    Object.defineProperty(exports2, "ParameterStructures", { enumerable: true, get: function() {
      return messages_1.ParameterStructures;
    } });
    var linkedMap_1 = require_linkedMap();
    Object.defineProperty(exports2, "LinkedMap", { enumerable: true, get: function() {
      return linkedMap_1.LinkedMap;
    } });
    Object.defineProperty(exports2, "LRUCache", { enumerable: true, get: function() {
      return linkedMap_1.LRUCache;
    } });
    Object.defineProperty(exports2, "Touch", { enumerable: true, get: function() {
      return linkedMap_1.Touch;
    } });
    var disposable_1 = require_disposable();
    Object.defineProperty(exports2, "Disposable", { enumerable: true, get: function() {
      return disposable_1.Disposable;
    } });
    var events_1 = require_events();
    Object.defineProperty(exports2, "Event", { enumerable: true, get: function() {
      return events_1.Event;
    } });
    Object.defineProperty(exports2, "Emitter", { enumerable: true, get: function() {
      return events_1.Emitter;
    } });
    var cancellation_1 = require_cancellation();
    Object.defineProperty(exports2, "CancellationTokenSource", { enumerable: true, get: function() {
      return cancellation_1.CancellationTokenSource;
    } });
    Object.defineProperty(exports2, "CancellationToken", { enumerable: true, get: function() {
      return cancellation_1.CancellationToken;
    } });
    var messageReader_1 = require_messageReader();
    Object.defineProperty(exports2, "MessageReader", { enumerable: true, get: function() {
      return messageReader_1.MessageReader;
    } });
    Object.defineProperty(exports2, "AbstractMessageReader", { enumerable: true, get: function() {
      return messageReader_1.AbstractMessageReader;
    } });
    Object.defineProperty(exports2, "ReadableStreamMessageReader", { enumerable: true, get: function() {
      return messageReader_1.ReadableStreamMessageReader;
    } });
    var messageWriter_1 = require_messageWriter();
    Object.defineProperty(exports2, "MessageWriter", { enumerable: true, get: function() {
      return messageWriter_1.MessageWriter;
    } });
    Object.defineProperty(exports2, "AbstractMessageWriter", { enumerable: true, get: function() {
      return messageWriter_1.AbstractMessageWriter;
    } });
    Object.defineProperty(exports2, "WriteableStreamMessageWriter", { enumerable: true, get: function() {
      return messageWriter_1.WriteableStreamMessageWriter;
    } });
    var connection_1 = require_connection();
    Object.defineProperty(exports2, "ConnectionStrategy", { enumerable: true, get: function() {
      return connection_1.ConnectionStrategy;
    } });
    Object.defineProperty(exports2, "ConnectionOptions", { enumerable: true, get: function() {
      return connection_1.ConnectionOptions;
    } });
    Object.defineProperty(exports2, "NullLogger", { enumerable: true, get: function() {
      return connection_1.NullLogger;
    } });
    Object.defineProperty(exports2, "createMessageConnection", { enumerable: true, get: function() {
      return connection_1.createMessageConnection;
    } });
    Object.defineProperty(exports2, "ProgressToken", { enumerable: true, get: function() {
      return connection_1.ProgressToken;
    } });
    Object.defineProperty(exports2, "ProgressType", { enumerable: true, get: function() {
      return connection_1.ProgressType;
    } });
    Object.defineProperty(exports2, "Trace", { enumerable: true, get: function() {
      return connection_1.Trace;
    } });
    Object.defineProperty(exports2, "TraceFormat", { enumerable: true, get: function() {
      return connection_1.TraceFormat;
    } });
    Object.defineProperty(exports2, "SetTraceNotification", { enumerable: true, get: function() {
      return connection_1.SetTraceNotification;
    } });
    Object.defineProperty(exports2, "LogTraceNotification", { enumerable: true, get: function() {
      return connection_1.LogTraceNotification;
    } });
    Object.defineProperty(exports2, "ConnectionErrors", { enumerable: true, get: function() {
      return connection_1.ConnectionErrors;
    } });
    Object.defineProperty(exports2, "ConnectionError", { enumerable: true, get: function() {
      return connection_1.ConnectionError;
    } });
    Object.defineProperty(exports2, "CancellationReceiverStrategy", { enumerable: true, get: function() {
      return connection_1.CancellationReceiverStrategy;
    } });
    Object.defineProperty(exports2, "CancellationSenderStrategy", { enumerable: true, get: function() {
      return connection_1.CancellationSenderStrategy;
    } });
    Object.defineProperty(exports2, "CancellationStrategy", { enumerable: true, get: function() {
      return connection_1.CancellationStrategy;
    } });
    var ral_1 = require_ral();
    exports2.RAL = ral_1.default;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/node/main.js
var require_main = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/lib/node/main.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createMessageConnection = exports2.createServerSocketTransport = exports2.createClientSocketTransport = exports2.createServerPipeTransport = exports2.createClientPipeTransport = exports2.generateRandomPipeName = exports2.StreamMessageWriter = exports2.StreamMessageReader = exports2.SocketMessageWriter = exports2.SocketMessageReader = exports2.IPCMessageWriter = exports2.IPCMessageReader = void 0;
    var ril_1 = require_ril();
    ril_1.default.install();
    var api_1 = require_api();
    var path3 = require("path");
    var os = require("os");
    var crypto_1 = require("crypto");
    var net_1 = require("net");
    __exportStar(require_api(), exports2);
    var IPCMessageReader = class extends api_1.AbstractMessageReader {
      constructor(process2) {
        super();
        this.process = process2;
        let eventEmitter = this.process;
        eventEmitter.on("error", (error2) => this.fireError(error2));
        eventEmitter.on("close", () => this.fireClose());
      }
      listen(callback) {
        this.process.on("message", callback);
        return api_1.Disposable.create(() => this.process.off("message", callback));
      }
    };
    exports2.IPCMessageReader = IPCMessageReader;
    var IPCMessageWriter = class extends api_1.AbstractMessageWriter {
      constructor(process2) {
        super();
        this.process = process2;
        this.errorCount = 0;
        let eventEmitter = this.process;
        eventEmitter.on("error", (error2) => this.fireError(error2));
        eventEmitter.on("close", () => this.fireClose);
      }
      write(msg) {
        try {
          if (typeof this.process.send === "function") {
            this.process.send(msg, void 0, void 0, (error2) => {
              if (error2) {
                this.errorCount++;
                this.handleError(error2, msg);
              } else {
                this.errorCount = 0;
              }
            });
          }
          return Promise.resolve();
        } catch (error2) {
          this.handleError(error2, msg);
          return Promise.reject(error2);
        }
      }
      handleError(error2, msg) {
        this.errorCount++;
        this.fireError(error2, msg, this.errorCount);
      }
      end() {
      }
    };
    exports2.IPCMessageWriter = IPCMessageWriter;
    var SocketMessageReader = class extends api_1.ReadableStreamMessageReader {
      constructor(socket, encoding = "utf-8") {
        super((0, ril_1.default)().stream.asReadableStream(socket), encoding);
      }
    };
    exports2.SocketMessageReader = SocketMessageReader;
    var SocketMessageWriter = class extends api_1.WriteableStreamMessageWriter {
      constructor(socket, options) {
        super((0, ril_1.default)().stream.asWritableStream(socket), options);
        this.socket = socket;
      }
      dispose() {
        super.dispose();
        this.socket.destroy();
      }
    };
    exports2.SocketMessageWriter = SocketMessageWriter;
    var StreamMessageReader = class extends api_1.ReadableStreamMessageReader {
      constructor(readble, encoding) {
        super((0, ril_1.default)().stream.asReadableStream(readble), encoding);
      }
    };
    exports2.StreamMessageReader = StreamMessageReader;
    var StreamMessageWriter = class extends api_1.WriteableStreamMessageWriter {
      constructor(writable, options) {
        super((0, ril_1.default)().stream.asWritableStream(writable), options);
      }
    };
    exports2.StreamMessageWriter = StreamMessageWriter;
    var XDG_RUNTIME_DIR = process.env["XDG_RUNTIME_DIR"];
    var safeIpcPathLengths = /* @__PURE__ */ new Map([
      ["linux", 107],
      ["darwin", 103]
    ]);
    function generateRandomPipeName() {
      const randomSuffix = (0, crypto_1.randomBytes)(21).toString("hex");
      if (process.platform === "win32") {
        return `\\\\.\\pipe\\vscode-jsonrpc-${randomSuffix}-sock`;
      }
      let result2;
      if (XDG_RUNTIME_DIR) {
        result2 = path3.join(XDG_RUNTIME_DIR, `vscode-ipc-${randomSuffix}.sock`);
      } else {
        result2 = path3.join(os.tmpdir(), `vscode-${randomSuffix}.sock`);
      }
      const limit = safeIpcPathLengths.get(process.platform);
      if (limit !== void 0 && result2.length >= limit) {
        (0, ril_1.default)().console.warn(`WARNING: IPC handle "${result2}" is longer than ${limit} characters.`);
      }
      return result2;
    }
    exports2.generateRandomPipeName = generateRandomPipeName;
    function createClientPipeTransport(pipeName, encoding = "utf-8") {
      let connectResolve;
      const connected = new Promise((resolve2, _reject) => {
        connectResolve = resolve2;
      });
      return new Promise((resolve2, reject) => {
        let server = (0, net_1.createServer)((socket) => {
          server.close();
          connectResolve([
            new SocketMessageReader(socket, encoding),
            new SocketMessageWriter(socket, encoding)
          ]);
        });
        server.on("error", reject);
        server.listen(pipeName, () => {
          server.removeListener("error", reject);
          resolve2({
            onConnected: () => {
              return connected;
            }
          });
        });
      });
    }
    exports2.createClientPipeTransport = createClientPipeTransport;
    function createServerPipeTransport(pipeName, encoding = "utf-8") {
      const socket = (0, net_1.createConnection)(pipeName);
      return [
        new SocketMessageReader(socket, encoding),
        new SocketMessageWriter(socket, encoding)
      ];
    }
    exports2.createServerPipeTransport = createServerPipeTransport;
    function createClientSocketTransport(port, encoding = "utf-8") {
      let connectResolve;
      const connected = new Promise((resolve2, _reject) => {
        connectResolve = resolve2;
      });
      return new Promise((resolve2, reject) => {
        const server = (0, net_1.createServer)((socket) => {
          server.close();
          connectResolve([
            new SocketMessageReader(socket, encoding),
            new SocketMessageWriter(socket, encoding)
          ]);
        });
        server.on("error", reject);
        server.listen(port, "127.0.0.1", () => {
          server.removeListener("error", reject);
          resolve2({
            onConnected: () => {
              return connected;
            }
          });
        });
      });
    }
    exports2.createClientSocketTransport = createClientSocketTransport;
    function createServerSocketTransport(port, encoding = "utf-8") {
      const socket = (0, net_1.createConnection)(port, "127.0.0.1");
      return [
        new SocketMessageReader(socket, encoding),
        new SocketMessageWriter(socket, encoding)
      ];
    }
    exports2.createServerSocketTransport = createServerSocketTransport;
    function isReadableStream(value) {
      const candidate = value;
      return candidate.read !== void 0 && candidate.addListener !== void 0;
    }
    function isWritableStream(value) {
      const candidate = value;
      return candidate.write !== void 0 && candidate.addListener !== void 0;
    }
    function createMessageConnection(input2, output, logger, options) {
      if (!logger) {
        logger = api_1.NullLogger;
      }
      const reader = isReadableStream(input2) ? new StreamMessageReader(input2) : input2;
      const writer = isWritableStream(output) ? new StreamMessageWriter(output) : output;
      if (api_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
      }
      return (0, api_1.createMessageConnection)(reader, writer, logger, options);
    }
    exports2.createMessageConnection = createMessageConnection;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/node.js
var require_node = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.0.0-next.7/node_modules/vscode-jsonrpc/node.js"(exports2, module2) {
    "use strict";
    module2.exports = require_main();
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-types@3.17.0-next.9/node_modules/vscode-languageserver-types/lib/esm/main.js
var main_exports2 = {};
__export(main_exports2, {
  AnnotatedTextEdit: () => AnnotatedTextEdit,
  ChangeAnnotation: () => ChangeAnnotation,
  ChangeAnnotationIdentifier: () => ChangeAnnotationIdentifier,
  CodeAction: () => CodeAction,
  CodeActionContext: () => CodeActionContext,
  CodeActionKind: () => CodeActionKind,
  CodeActionTriggerKind: () => CodeActionTriggerKind,
  CodeDescription: () => CodeDescription,
  CodeLens: () => CodeLens,
  Color: () => Color,
  ColorInformation: () => ColorInformation,
  ColorPresentation: () => ColorPresentation,
  Command: () => Command,
  CompletionItem: () => CompletionItem,
  CompletionItemKind: () => CompletionItemKind,
  CompletionItemLabelDetails: () => CompletionItemLabelDetails,
  CompletionItemTag: () => CompletionItemTag,
  CompletionList: () => CompletionList,
  CreateFile: () => CreateFile,
  DeleteFile: () => DeleteFile,
  Diagnostic: () => Diagnostic,
  DiagnosticRelatedInformation: () => DiagnosticRelatedInformation,
  DiagnosticSeverity: () => DiagnosticSeverity,
  DiagnosticTag: () => DiagnosticTag,
  DocumentHighlight: () => DocumentHighlight,
  DocumentHighlightKind: () => DocumentHighlightKind,
  DocumentLink: () => DocumentLink,
  DocumentSymbol: () => DocumentSymbol,
  DocumentUri: () => DocumentUri,
  EOL: () => EOL,
  FoldingRange: () => FoldingRange,
  FoldingRangeKind: () => FoldingRangeKind,
  FormattingOptions: () => FormattingOptions,
  Hover: () => Hover,
  InlayHint: () => InlayHint,
  InlayHintKind: () => InlayHintKind,
  InlayHintLabelPart: () => InlayHintLabelPart,
  InlineValueContext: () => InlineValueContext,
  InlineValueEvaluatableExpression: () => InlineValueEvaluatableExpression,
  InlineValueText: () => InlineValueText,
  InlineValueVariableLookup: () => InlineValueVariableLookup,
  InsertReplaceEdit: () => InsertReplaceEdit,
  InsertTextFormat: () => InsertTextFormat,
  InsertTextMode: () => InsertTextMode,
  Location: () => Location,
  LocationLink: () => LocationLink,
  MarkedString: () => MarkedString,
  MarkupContent: () => MarkupContent,
  MarkupKind: () => MarkupKind,
  OptionalVersionedTextDocumentIdentifier: () => OptionalVersionedTextDocumentIdentifier,
  ParameterInformation: () => ParameterInformation,
  Position: () => Position2,
  Range: () => Range,
  RenameFile: () => RenameFile,
  SelectionRange: () => SelectionRange,
  SemanticTokenModifiers: () => SemanticTokenModifiers,
  SemanticTokenTypes: () => SemanticTokenTypes,
  SemanticTokens: () => SemanticTokens,
  SignatureInformation: () => SignatureInformation,
  SymbolInformation: () => SymbolInformation,
  SymbolKind: () => SymbolKind,
  SymbolTag: () => SymbolTag,
  TextDocument: () => TextDocument2,
  TextDocumentEdit: () => TextDocumentEdit,
  TextDocumentIdentifier: () => TextDocumentIdentifier,
  TextDocumentItem: () => TextDocumentItem,
  TextEdit: () => TextEdit,
  URI: () => URI2,
  VersionedTextDocumentIdentifier: () => VersionedTextDocumentIdentifier,
  WorkspaceChange: () => WorkspaceChange,
  WorkspaceEdit: () => WorkspaceEdit,
  WorkspaceSymbol: () => WorkspaceSymbol,
  integer: () => integer,
  uinteger: () => uinteger
});
var DocumentUri, URI2, integer, uinteger, Position2, Range, Location, LocationLink, Color, ColorInformation, ColorPresentation, FoldingRangeKind, FoldingRange, DiagnosticRelatedInformation, DiagnosticSeverity, DiagnosticTag, CodeDescription, Diagnostic, Command, TextEdit, ChangeAnnotation, ChangeAnnotationIdentifier, AnnotatedTextEdit, TextDocumentEdit, CreateFile, RenameFile, DeleteFile, WorkspaceEdit, TextEditChangeImpl, ChangeAnnotations, WorkspaceChange, TextDocumentIdentifier, VersionedTextDocumentIdentifier, OptionalVersionedTextDocumentIdentifier, TextDocumentItem, MarkupKind, MarkupContent, CompletionItemKind, InsertTextFormat, CompletionItemTag, InsertReplaceEdit, InsertTextMode, CompletionItemLabelDetails, CompletionItem, CompletionList, MarkedString, Hover, ParameterInformation, SignatureInformation, DocumentHighlightKind, DocumentHighlight, SymbolKind, SymbolTag, SymbolInformation, WorkspaceSymbol, DocumentSymbol, CodeActionKind, CodeActionTriggerKind, CodeActionContext, CodeAction, CodeLens, FormattingOptions, DocumentLink, SelectionRange, SemanticTokenTypes, SemanticTokenModifiers, SemanticTokens, InlineValueText, InlineValueVariableLookup, InlineValueEvaluatableExpression, InlineValueContext, InlayHintKind, InlayHintLabelPart, InlayHint, EOL, TextDocument2, FullTextDocument2, Is;
var init_main2 = __esm({
  "../../node_modules/.pnpm/vscode-languageserver-types@3.17.0-next.9/node_modules/vscode-languageserver-types/lib/esm/main.js"() {
    "use strict";
    (function(DocumentUri2) {
      function is(value) {
        return typeof value === "string";
      }
      DocumentUri2.is = is;
    })(DocumentUri || (DocumentUri = {}));
    (function(URI3) {
      function is(value) {
        return typeof value === "string";
      }
      URI3.is = is;
    })(URI2 || (URI2 = {}));
    (function(integer2) {
      integer2.MIN_VALUE = -2147483648;
      integer2.MAX_VALUE = 2147483647;
      function is(value) {
        return typeof value === "number" && integer2.MIN_VALUE <= value && value <= integer2.MAX_VALUE;
      }
      integer2.is = is;
    })(integer || (integer = {}));
    (function(uinteger2) {
      uinteger2.MIN_VALUE = 0;
      uinteger2.MAX_VALUE = 2147483647;
      function is(value) {
        return typeof value === "number" && uinteger2.MIN_VALUE <= value && value <= uinteger2.MAX_VALUE;
      }
      uinteger2.is = is;
    })(uinteger || (uinteger = {}));
    (function(Position3) {
      function create(line, character) {
        if (line === Number.MAX_VALUE) {
          line = uinteger.MAX_VALUE;
        }
        if (character === Number.MAX_VALUE) {
          character = uinteger.MAX_VALUE;
        }
        return { line, character };
      }
      Position3.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
      }
      Position3.is = is;
    })(Position2 || (Position2 = {}));
    (function(Range2) {
      function create(one, two, three, four) {
        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
          return { start: Position2.create(one, two), end: Position2.create(three, four) };
        } else if (Position2.is(one) && Position2.is(two)) {
          return { start: one, end: two };
        } else {
          throw new Error("Range#create called with invalid arguments[".concat(one, ", ").concat(two, ", ").concat(three, ", ").concat(four, "]"));
        }
      }
      Range2.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position2.is(candidate.start) && Position2.is(candidate.end);
      }
      Range2.is = is;
    })(Range || (Range = {}));
    (function(Location2) {
      function create(uri, range2) {
        return { uri, range: range2 };
      }
      Location2.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
      }
      Location2.is = is;
    })(Location || (Location = {}));
    (function(LocationLink2) {
      function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };
      }
      LocationLink2.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri) && Range.is(candidate.targetSelectionRange) && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
      }
      LocationLink2.is = is;
    })(LocationLink || (LocationLink = {}));
    (function(Color2) {
      function create(red, green, blue, alpha) {
        return {
          red,
          green,
          blue,
          alpha
        };
      }
      Color2.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1) && Is.numberRange(candidate.green, 0, 1) && Is.numberRange(candidate.blue, 0, 1) && Is.numberRange(candidate.alpha, 0, 1);
      }
      Color2.is = is;
    })(Color || (Color = {}));
    (function(ColorInformation2) {
      function create(range2, color) {
        return {
          range: range2,
          color
        };
      }
      ColorInformation2.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
      }
      ColorInformation2.is = is;
    })(ColorInformation || (ColorInformation = {}));
    (function(ColorPresentation2) {
      function create(label, textEdit, additionalTextEdits) {
        return {
          label,
          textEdit,
          additionalTextEdits
        };
      }
      ColorPresentation2.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
      }
      ColorPresentation2.is = is;
    })(ColorPresentation || (ColorPresentation = {}));
    (function(FoldingRangeKind2) {
      FoldingRangeKind2["Comment"] = "comment";
      FoldingRangeKind2["Imports"] = "imports";
      FoldingRangeKind2["Region"] = "region";
    })(FoldingRangeKind || (FoldingRangeKind = {}));
    (function(FoldingRange2) {
      function create(startLine, endLine, startCharacter, endCharacter, kind) {
        var result2 = {
          startLine,
          endLine
        };
        if (Is.defined(startCharacter)) {
          result2.startCharacter = startCharacter;
        }
        if (Is.defined(endCharacter)) {
          result2.endCharacter = endCharacter;
        }
        if (Is.defined(kind)) {
          result2.kind = kind;
        }
        return result2;
      }
      FoldingRange2.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
      }
      FoldingRange2.is = is;
    })(FoldingRange || (FoldingRange = {}));
    (function(DiagnosticRelatedInformation2) {
      function create(location, message) {
        return {
          location,
          message
        };
      }
      DiagnosticRelatedInformation2.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
      }
      DiagnosticRelatedInformation2.is = is;
    })(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
    (function(DiagnosticSeverity2) {
      DiagnosticSeverity2.Error = 1;
      DiagnosticSeverity2.Warning = 2;
      DiagnosticSeverity2.Information = 3;
      DiagnosticSeverity2.Hint = 4;
    })(DiagnosticSeverity || (DiagnosticSeverity = {}));
    (function(DiagnosticTag2) {
      DiagnosticTag2.Unnecessary = 1;
      DiagnosticTag2.Deprecated = 2;
    })(DiagnosticTag || (DiagnosticTag = {}));
    (function(CodeDescription2) {
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.href);
      }
      CodeDescription2.is = is;
    })(CodeDescription || (CodeDescription = {}));
    (function(Diagnostic2) {
      function create(range2, message, severity, code, source, relatedInformation) {
        var result2 = { range: range2, message };
        if (Is.defined(severity)) {
          result2.severity = severity;
        }
        if (Is.defined(code)) {
          result2.code = code;
        }
        if (Is.defined(source)) {
          result2.source = source;
        }
        if (Is.defined(relatedInformation)) {
          result2.relatedInformation = relatedInformation;
        }
        return result2;
      }
      Diagnostic2.create = create;
      function is(value) {
        var _a;
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.undefined(candidate.codeDescription) || Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
      }
      Diagnostic2.is = is;
    })(Diagnostic || (Diagnostic = {}));
    (function(Command2) {
      function create(title2, command) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
        }
        var result2 = { title: title2, command };
        if (Is.defined(args) && args.length > 0) {
          result2.arguments = args;
        }
        return result2;
      }
      Command2.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
      }
      Command2.is = is;
    })(Command || (Command = {}));
    (function(TextEdit2) {
      function replace(range2, newText) {
        return { range: range2, newText };
      }
      TextEdit2.replace = replace;
      function insert2(position, newText) {
        return { range: { start: position, end: position }, newText };
      }
      TextEdit2.insert = insert2;
      function del(range2) {
        return { range: range2, newText: "" };
      }
      TextEdit2.del = del;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range.is(candidate.range);
      }
      TextEdit2.is = is;
    })(TextEdit || (TextEdit = {}));
    (function(ChangeAnnotation2) {
      function create(label, needsConfirmation, description) {
        var result2 = { label };
        if (needsConfirmation !== void 0) {
          result2.needsConfirmation = needsConfirmation;
        }
        if (description !== void 0) {
          result2.description = description;
        }
        return result2;
      }
      ChangeAnnotation2.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
      }
      ChangeAnnotation2.is = is;
    })(ChangeAnnotation || (ChangeAnnotation = {}));
    (function(ChangeAnnotationIdentifier2) {
      function is(value) {
        var candidate = value;
        return Is.string(candidate);
      }
      ChangeAnnotationIdentifier2.is = is;
    })(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
    (function(AnnotatedTextEdit2) {
      function replace(range2, newText, annotation) {
        return { range: range2, newText, annotationId: annotation };
      }
      AnnotatedTextEdit2.replace = replace;
      function insert2(position, newText, annotation) {
        return { range: { start: position, end: position }, newText, annotationId: annotation };
      }
      AnnotatedTextEdit2.insert = insert2;
      function del(range2, annotation) {
        return { range: range2, newText: "", annotationId: annotation };
      }
      AnnotatedTextEdit2.del = del;
      function is(value) {
        var candidate = value;
        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
      }
      AnnotatedTextEdit2.is = is;
    })(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
    (function(TextDocumentEdit2) {
      function create(textDocument, edits) {
        return { textDocument, edits };
      }
      TextDocumentEdit2.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);
      }
      TextDocumentEdit2.is = is;
    })(TextDocumentEdit || (TextDocumentEdit = {}));
    (function(CreateFile2) {
      function create(uri, options, annotation) {
        var result2 = {
          kind: "create",
          uri
        };
        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
          result2.options = options;
        }
        if (annotation !== void 0) {
          result2.annotationId = annotation;
        }
        return result2;
      }
      CreateFile2.create = create;
      function is(value) {
        var candidate = value;
        return candidate && candidate.kind === "create" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
      }
      CreateFile2.is = is;
    })(CreateFile || (CreateFile = {}));
    (function(RenameFile2) {
      function create(oldUri, newUri, options, annotation) {
        var result2 = {
          kind: "rename",
          oldUri,
          newUri
        };
        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
          result2.options = options;
        }
        if (annotation !== void 0) {
          result2.annotationId = annotation;
        }
        return result2;
      }
      RenameFile2.create = create;
      function is(value) {
        var candidate = value;
        return candidate && candidate.kind === "rename" && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
      }
      RenameFile2.is = is;
    })(RenameFile || (RenameFile = {}));
    (function(DeleteFile2) {
      function create(uri, options, annotation) {
        var result2 = {
          kind: "delete",
          uri
        };
        if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {
          result2.options = options;
        }
        if (annotation !== void 0) {
          result2.annotationId = annotation;
        }
        return result2;
      }
      DeleteFile2.create = create;
      function is(value) {
        var candidate = value;
        return candidate && candidate.kind === "delete" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
      }
      DeleteFile2.is = is;
    })(DeleteFile || (DeleteFile = {}));
    (function(WorkspaceEdit2) {
      function is(value) {
        var candidate = value;
        return candidate && (candidate.changes !== void 0 || candidate.documentChanges !== void 0) && (candidate.documentChanges === void 0 || candidate.documentChanges.every(function(change) {
          if (Is.string(change.kind)) {
            return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
          } else {
            return TextDocumentEdit.is(change);
          }
        }));
      }
      WorkspaceEdit2.is = is;
    })(WorkspaceEdit || (WorkspaceEdit = {}));
    TextEditChangeImpl = function() {
      function TextEditChangeImpl2(edits, changeAnnotations) {
        this.edits = edits;
        this.changeAnnotations = changeAnnotations;
      }
      TextEditChangeImpl2.prototype.insert = function(position, newText, annotation) {
        var edit2;
        var id2;
        if (annotation === void 0) {
          edit2 = TextEdit.insert(position, newText);
        } else if (ChangeAnnotationIdentifier.is(annotation)) {
          id2 = annotation;
          edit2 = AnnotatedTextEdit.insert(position, newText, annotation);
        } else {
          this.assertChangeAnnotations(this.changeAnnotations);
          id2 = this.changeAnnotations.manage(annotation);
          edit2 = AnnotatedTextEdit.insert(position, newText, id2);
        }
        this.edits.push(edit2);
        if (id2 !== void 0) {
          return id2;
        }
      };
      TextEditChangeImpl2.prototype.replace = function(range2, newText, annotation) {
        var edit2;
        var id2;
        if (annotation === void 0) {
          edit2 = TextEdit.replace(range2, newText);
        } else if (ChangeAnnotationIdentifier.is(annotation)) {
          id2 = annotation;
          edit2 = AnnotatedTextEdit.replace(range2, newText, annotation);
        } else {
          this.assertChangeAnnotations(this.changeAnnotations);
          id2 = this.changeAnnotations.manage(annotation);
          edit2 = AnnotatedTextEdit.replace(range2, newText, id2);
        }
        this.edits.push(edit2);
        if (id2 !== void 0) {
          return id2;
        }
      };
      TextEditChangeImpl2.prototype.delete = function(range2, annotation) {
        var edit2;
        var id2;
        if (annotation === void 0) {
          edit2 = TextEdit.del(range2);
        } else if (ChangeAnnotationIdentifier.is(annotation)) {
          id2 = annotation;
          edit2 = AnnotatedTextEdit.del(range2, annotation);
        } else {
          this.assertChangeAnnotations(this.changeAnnotations);
          id2 = this.changeAnnotations.manage(annotation);
          edit2 = AnnotatedTextEdit.del(range2, id2);
        }
        this.edits.push(edit2);
        if (id2 !== void 0) {
          return id2;
        }
      };
      TextEditChangeImpl2.prototype.add = function(edit2) {
        this.edits.push(edit2);
      };
      TextEditChangeImpl2.prototype.all = function() {
        return this.edits;
      };
      TextEditChangeImpl2.prototype.clear = function() {
        this.edits.splice(0, this.edits.length);
      };
      TextEditChangeImpl2.prototype.assertChangeAnnotations = function(value) {
        if (value === void 0) {
          throw new Error("Text edit change is not configured to manage change annotations.");
        }
      };
      return TextEditChangeImpl2;
    }();
    ChangeAnnotations = function() {
      function ChangeAnnotations2(annotations) {
        this._annotations = annotations === void 0 ? /* @__PURE__ */ Object.create(null) : annotations;
        this._counter = 0;
        this._size = 0;
      }
      ChangeAnnotations2.prototype.all = function() {
        return this._annotations;
      };
      Object.defineProperty(ChangeAnnotations2.prototype, "size", {
        get: function() {
          return this._size;
        },
        enumerable: false,
        configurable: true
      });
      ChangeAnnotations2.prototype.manage = function(idOrAnnotation, annotation) {
        var id2;
        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
          id2 = idOrAnnotation;
        } else {
          id2 = this.nextId();
          annotation = idOrAnnotation;
        }
        if (this._annotations[id2] !== void 0) {
          throw new Error("Id ".concat(id2, " is already in use."));
        }
        if (annotation === void 0) {
          throw new Error("No annotation provided for id ".concat(id2));
        }
        this._annotations[id2] = annotation;
        this._size++;
        return id2;
      };
      ChangeAnnotations2.prototype.nextId = function() {
        this._counter++;
        return this._counter.toString();
      };
      return ChangeAnnotations2;
    }();
    WorkspaceChange = function() {
      function WorkspaceChange2(workspaceEdit) {
        var _this = this;
        this._textEditChanges = /* @__PURE__ */ Object.create(null);
        if (workspaceEdit !== void 0) {
          this._workspaceEdit = workspaceEdit;
          if (workspaceEdit.documentChanges) {
            this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
            workspaceEdit.changeAnnotations = this._changeAnnotations.all();
            workspaceEdit.documentChanges.forEach(function(change) {
              if (TextDocumentEdit.is(change)) {
                var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);
                _this._textEditChanges[change.textDocument.uri] = textEditChange;
              }
            });
          } else if (workspaceEdit.changes) {
            Object.keys(workspaceEdit.changes).forEach(function(key) {
              var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
              _this._textEditChanges[key] = textEditChange;
            });
          }
        } else {
          this._workspaceEdit = {};
        }
      }
      Object.defineProperty(WorkspaceChange2.prototype, "edit", {
        get: function() {
          this.initDocumentChanges();
          if (this._changeAnnotations !== void 0) {
            if (this._changeAnnotations.size === 0) {
              this._workspaceEdit.changeAnnotations = void 0;
            } else {
              this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
            }
          }
          return this._workspaceEdit;
        },
        enumerable: false,
        configurable: true
      });
      WorkspaceChange2.prototype.getTextEditChange = function(key) {
        if (OptionalVersionedTextDocumentIdentifier.is(key)) {
          this.initDocumentChanges();
          if (this._workspaceEdit.documentChanges === void 0) {
            throw new Error("Workspace edit is not configured for document changes.");
          }
          var textDocument = { uri: key.uri, version: key.version };
          var result2 = this._textEditChanges[textDocument.uri];
          if (!result2) {
            var edits = [];
            var textDocumentEdit = {
              textDocument,
              edits
            };
            this._workspaceEdit.documentChanges.push(textDocumentEdit);
            result2 = new TextEditChangeImpl(edits, this._changeAnnotations);
            this._textEditChanges[textDocument.uri] = result2;
          }
          return result2;
        } else {
          this.initChanges();
          if (this._workspaceEdit.changes === void 0) {
            throw new Error("Workspace edit is not configured for normal text edit changes.");
          }
          var result2 = this._textEditChanges[key];
          if (!result2) {
            var edits = [];
            this._workspaceEdit.changes[key] = edits;
            result2 = new TextEditChangeImpl(edits);
            this._textEditChanges[key] = result2;
          }
          return result2;
        }
      };
      WorkspaceChange2.prototype.initDocumentChanges = function() {
        if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
          this._changeAnnotations = new ChangeAnnotations();
          this._workspaceEdit.documentChanges = [];
          this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
        }
      };
      WorkspaceChange2.prototype.initChanges = function() {
        if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
          this._workspaceEdit.changes = /* @__PURE__ */ Object.create(null);
        }
      };
      WorkspaceChange2.prototype.createFile = function(uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === void 0) {
          throw new Error("Workspace edit is not configured for document changes.");
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
          annotation = optionsOrAnnotation;
        } else {
          options = optionsOrAnnotation;
        }
        var operation;
        var id2;
        if (annotation === void 0) {
          operation = CreateFile.create(uri, options);
        } else {
          id2 = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
          operation = CreateFile.create(uri, options, id2);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id2 !== void 0) {
          return id2;
        }
      };
      WorkspaceChange2.prototype.renameFile = function(oldUri, newUri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === void 0) {
          throw new Error("Workspace edit is not configured for document changes.");
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
          annotation = optionsOrAnnotation;
        } else {
          options = optionsOrAnnotation;
        }
        var operation;
        var id2;
        if (annotation === void 0) {
          operation = RenameFile.create(oldUri, newUri, options);
        } else {
          id2 = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
          operation = RenameFile.create(oldUri, newUri, options, id2);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id2 !== void 0) {
          return id2;
        }
      };
      WorkspaceChange2.prototype.deleteFile = function(uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === void 0) {
          throw new Error("Workspace edit is not configured for document changes.");
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
          annotation = optionsOrAnnotation;
        } else {
          options = optionsOrAnnotation;
        }
        var operation;
        var id2;
        if (annotation === void 0) {
          operation = DeleteFile.create(uri, options);
        } else {
          id2 = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
          operation = DeleteFile.create(uri, options, id2);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id2 !== void 0) {
          return id2;
        }
      };
      return WorkspaceChange2;
    }();
    (function(TextDocumentIdentifier2) {
      function create(uri) {
        return { uri };
      }
      TextDocumentIdentifier2.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri);
      }
      TextDocumentIdentifier2.is = is;
    })(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
    (function(VersionedTextDocumentIdentifier2) {
      function create(uri, version2) {
        return { uri, version: version2 };
      }
      VersionedTextDocumentIdentifier2.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
      }
      VersionedTextDocumentIdentifier2.is = is;
    })(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
    (function(OptionalVersionedTextDocumentIdentifier2) {
      function create(uri, version2) {
        return { uri, version: version2 };
      }
      OptionalVersionedTextDocumentIdentifier2.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
      }
      OptionalVersionedTextDocumentIdentifier2.is = is;
    })(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
    (function(TextDocumentItem2) {
      function create(uri, languageId, version2, text) {
        return { uri, languageId, version: version2, text };
      }
      TextDocumentItem2.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
      }
      TextDocumentItem2.is = is;
    })(TextDocumentItem || (TextDocumentItem = {}));
    (function(MarkupKind2) {
      MarkupKind2.PlainText = "plaintext";
      MarkupKind2.Markdown = "markdown";
    })(MarkupKind || (MarkupKind = {}));
    (function(MarkupKind2) {
      function is(value) {
        var candidate = value;
        return candidate === MarkupKind2.PlainText || candidate === MarkupKind2.Markdown;
      }
      MarkupKind2.is = is;
    })(MarkupKind || (MarkupKind = {}));
    (function(MarkupContent2) {
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
      }
      MarkupContent2.is = is;
    })(MarkupContent || (MarkupContent = {}));
    (function(CompletionItemKind2) {
      CompletionItemKind2.Text = 1;
      CompletionItemKind2.Method = 2;
      CompletionItemKind2.Function = 3;
      CompletionItemKind2.Constructor = 4;
      CompletionItemKind2.Field = 5;
      CompletionItemKind2.Variable = 6;
      CompletionItemKind2.Class = 7;
      CompletionItemKind2.Interface = 8;
      CompletionItemKind2.Module = 9;
      CompletionItemKind2.Property = 10;
      CompletionItemKind2.Unit = 11;
      CompletionItemKind2.Value = 12;
      CompletionItemKind2.Enum = 13;
      CompletionItemKind2.Keyword = 14;
      CompletionItemKind2.Snippet = 15;
      CompletionItemKind2.Color = 16;
      CompletionItemKind2.File = 17;
      CompletionItemKind2.Reference = 18;
      CompletionItemKind2.Folder = 19;
      CompletionItemKind2.EnumMember = 20;
      CompletionItemKind2.Constant = 21;
      CompletionItemKind2.Struct = 22;
      CompletionItemKind2.Event = 23;
      CompletionItemKind2.Operator = 24;
      CompletionItemKind2.TypeParameter = 25;
    })(CompletionItemKind || (CompletionItemKind = {}));
    (function(InsertTextFormat2) {
      InsertTextFormat2.PlainText = 1;
      InsertTextFormat2.Snippet = 2;
    })(InsertTextFormat || (InsertTextFormat = {}));
    (function(CompletionItemTag2) {
      CompletionItemTag2.Deprecated = 1;
    })(CompletionItemTag || (CompletionItemTag = {}));
    (function(InsertReplaceEdit2) {
      function create(newText, insert2, replace) {
        return { newText, insert: insert2, replace };
      }
      InsertReplaceEdit2.create = create;
      function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
      }
      InsertReplaceEdit2.is = is;
    })(InsertReplaceEdit || (InsertReplaceEdit = {}));
    (function(InsertTextMode2) {
      InsertTextMode2.asIs = 1;
      InsertTextMode2.adjustIndentation = 2;
    })(InsertTextMode || (InsertTextMode = {}));
    (function(CompletionItemLabelDetails2) {
      function is(value) {
        var candidate = value;
        return candidate && (Is.string(candidate.detail) || candidate.detail === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
      }
      CompletionItemLabelDetails2.is = is;
    })(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
    (function(CompletionItem2) {
      function create(label) {
        return { label };
      }
      CompletionItem2.create = create;
    })(CompletionItem || (CompletionItem = {}));
    (function(CompletionList2) {
      function create(items, isIncomplete) {
        return { items: items ? items : [], isIncomplete: !!isIncomplete };
      }
      CompletionList2.create = create;
    })(CompletionList || (CompletionList = {}));
    (function(MarkedString2) {
      function fromPlainText(plainText) {
        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
      }
      MarkedString2.fromPlainText = fromPlainText;
      function is(value) {
        var candidate = value;
        return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);
      }
      MarkedString2.is = is;
    })(MarkedString || (MarkedString = {}));
    (function(Hover2) {
      function is(value) {
        var candidate = value;
        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) || MarkedString.is(candidate.contents) || Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));
      }
      Hover2.is = is;
    })(Hover || (Hover = {}));
    (function(ParameterInformation2) {
      function create(label, documentation) {
        return documentation ? { label, documentation } : { label };
      }
      ParameterInformation2.create = create;
    })(ParameterInformation || (ParameterInformation = {}));
    (function(SignatureInformation2) {
      function create(label, documentation) {
        var parameters = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          parameters[_i - 2] = arguments[_i];
        }
        var result2 = { label };
        if (Is.defined(documentation)) {
          result2.documentation = documentation;
        }
        if (Is.defined(parameters)) {
          result2.parameters = parameters;
        } else {
          result2.parameters = [];
        }
        return result2;
      }
      SignatureInformation2.create = create;
    })(SignatureInformation || (SignatureInformation = {}));
    (function(DocumentHighlightKind2) {
      DocumentHighlightKind2.Text = 1;
      DocumentHighlightKind2.Read = 2;
      DocumentHighlightKind2.Write = 3;
    })(DocumentHighlightKind || (DocumentHighlightKind = {}));
    (function(DocumentHighlight2) {
      function create(range2, kind) {
        var result2 = { range: range2 };
        if (Is.number(kind)) {
          result2.kind = kind;
        }
        return result2;
      }
      DocumentHighlight2.create = create;
    })(DocumentHighlight || (DocumentHighlight = {}));
    (function(SymbolKind2) {
      SymbolKind2.File = 1;
      SymbolKind2.Module = 2;
      SymbolKind2.Namespace = 3;
      SymbolKind2.Package = 4;
      SymbolKind2.Class = 5;
      SymbolKind2.Method = 6;
      SymbolKind2.Property = 7;
      SymbolKind2.Field = 8;
      SymbolKind2.Constructor = 9;
      SymbolKind2.Enum = 10;
      SymbolKind2.Interface = 11;
      SymbolKind2.Function = 12;
      SymbolKind2.Variable = 13;
      SymbolKind2.Constant = 14;
      SymbolKind2.String = 15;
      SymbolKind2.Number = 16;
      SymbolKind2.Boolean = 17;
      SymbolKind2.Array = 18;
      SymbolKind2.Object = 19;
      SymbolKind2.Key = 20;
      SymbolKind2.Null = 21;
      SymbolKind2.EnumMember = 22;
      SymbolKind2.Struct = 23;
      SymbolKind2.Event = 24;
      SymbolKind2.Operator = 25;
      SymbolKind2.TypeParameter = 26;
    })(SymbolKind || (SymbolKind = {}));
    (function(SymbolTag2) {
      SymbolTag2.Deprecated = 1;
    })(SymbolTag || (SymbolTag = {}));
    (function(SymbolInformation2) {
      function create(name, kind, range2, uri, containerName) {
        var result2 = {
          name,
          kind,
          location: { uri, range: range2 }
        };
        if (containerName) {
          result2.containerName = containerName;
        }
        return result2;
      }
      SymbolInformation2.create = create;
    })(SymbolInformation || (SymbolInformation = {}));
    (function(WorkspaceSymbol2) {
      function create(name, kind, uri, range2) {
        return range2 !== void 0 ? { name, kind, location: { uri, range: range2 } } : { name, kind, location: { uri } };
      }
      WorkspaceSymbol2.create = create;
    })(WorkspaceSymbol || (WorkspaceSymbol = {}));
    (function(DocumentSymbol2) {
      function create(name, detail, kind, range2, selectionRange, children) {
        var result2 = {
          name,
          detail,
          kind,
          range: range2,
          selectionRange
        };
        if (children !== void 0) {
          result2.children = children;
        }
        return result2;
      }
      DocumentSymbol2.create = create;
      function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range.is(candidate.range) && Range.is(candidate.selectionRange) && (candidate.detail === void 0 || Is.string(candidate.detail)) && (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) && (candidate.children === void 0 || Array.isArray(candidate.children)) && (candidate.tags === void 0 || Array.isArray(candidate.tags));
      }
      DocumentSymbol2.is = is;
    })(DocumentSymbol || (DocumentSymbol = {}));
    (function(CodeActionKind2) {
      CodeActionKind2.Empty = "";
      CodeActionKind2.QuickFix = "quickfix";
      CodeActionKind2.Refactor = "refactor";
      CodeActionKind2.RefactorExtract = "refactor.extract";
      CodeActionKind2.RefactorInline = "refactor.inline";
      CodeActionKind2.RefactorRewrite = "refactor.rewrite";
      CodeActionKind2.Source = "source";
      CodeActionKind2.SourceOrganizeImports = "source.organizeImports";
      CodeActionKind2.SourceFixAll = "source.fixAll";
    })(CodeActionKind || (CodeActionKind = {}));
    (function(CodeActionTriggerKind2) {
      CodeActionTriggerKind2.Invoked = 1;
      CodeActionTriggerKind2.Automatic = 2;
    })(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
    (function(CodeActionContext2) {
      function create(diagnostics, only, triggerKind) {
        var result2 = { diagnostics };
        if (only !== void 0 && only !== null) {
          result2.only = only;
        }
        if (triggerKind !== void 0 && triggerKind !== null) {
          result2.triggerKind = triggerKind;
        }
        return result2;
      }
      CodeActionContext2.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string)) && (candidate.triggerKind === void 0 || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
      }
      CodeActionContext2.is = is;
    })(CodeActionContext || (CodeActionContext = {}));
    (function(CodeAction2) {
      function create(title2, kindOrCommandOrEdit, kind) {
        var result2 = { title: title2 };
        var checkKind = true;
        if (typeof kindOrCommandOrEdit === "string") {
          checkKind = false;
          result2.kind = kindOrCommandOrEdit;
        } else if (Command.is(kindOrCommandOrEdit)) {
          result2.command = kindOrCommandOrEdit;
        } else {
          result2.edit = kindOrCommandOrEdit;
        }
        if (checkKind && kind !== void 0) {
          result2.kind = kind;
        }
        return result2;
      }
      CodeAction2.create = create;
      function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.title) && (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) && (candidate.kind === void 0 || Is.string(candidate.kind)) && (candidate.edit !== void 0 || candidate.command !== void 0) && (candidate.command === void 0 || Command.is(candidate.command)) && (candidate.isPreferred === void 0 || Is.boolean(candidate.isPreferred)) && (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));
      }
      CodeAction2.is = is;
    })(CodeAction || (CodeAction = {}));
    (function(CodeLens2) {
      function create(range2, data) {
        var result2 = { range: range2 };
        if (Is.defined(data)) {
          result2.data = data;
        }
        return result2;
      }
      CodeLens2.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
      }
      CodeLens2.is = is;
    })(CodeLens || (CodeLens = {}));
    (function(FormattingOptions2) {
      function create(tabSize, insertSpaces) {
        return { tabSize, insertSpaces };
      }
      FormattingOptions2.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
      }
      FormattingOptions2.is = is;
    })(FormattingOptions || (FormattingOptions = {}));
    (function(DocumentLink2) {
      function create(range2, target, data) {
        return { range: range2, target, data };
      }
      DocumentLink2.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
      }
      DocumentLink2.is = is;
    })(DocumentLink || (DocumentLink = {}));
    (function(SelectionRange2) {
      function create(range2, parent) {
        return { range: range2, parent };
      }
      SelectionRange2.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === void 0 || SelectionRange2.is(candidate.parent));
      }
      SelectionRange2.is = is;
    })(SelectionRange || (SelectionRange = {}));
    (function(SemanticTokenTypes2) {
      SemanticTokenTypes2["namespace"] = "namespace";
      SemanticTokenTypes2["type"] = "type";
      SemanticTokenTypes2["class"] = "class";
      SemanticTokenTypes2["enum"] = "enum";
      SemanticTokenTypes2["interface"] = "interface";
      SemanticTokenTypes2["struct"] = "struct";
      SemanticTokenTypes2["typeParameter"] = "typeParameter";
      SemanticTokenTypes2["parameter"] = "parameter";
      SemanticTokenTypes2["variable"] = "variable";
      SemanticTokenTypes2["property"] = "property";
      SemanticTokenTypes2["enumMember"] = "enumMember";
      SemanticTokenTypes2["event"] = "event";
      SemanticTokenTypes2["function"] = "function";
      SemanticTokenTypes2["method"] = "method";
      SemanticTokenTypes2["macro"] = "macro";
      SemanticTokenTypes2["keyword"] = "keyword";
      SemanticTokenTypes2["modifier"] = "modifier";
      SemanticTokenTypes2["comment"] = "comment";
      SemanticTokenTypes2["string"] = "string";
      SemanticTokenTypes2["number"] = "number";
      SemanticTokenTypes2["regexp"] = "regexp";
      SemanticTokenTypes2["operator"] = "operator";
      SemanticTokenTypes2["decorator"] = "decorator";
    })(SemanticTokenTypes || (SemanticTokenTypes = {}));
    (function(SemanticTokenModifiers2) {
      SemanticTokenModifiers2["declaration"] = "declaration";
      SemanticTokenModifiers2["definition"] = "definition";
      SemanticTokenModifiers2["readonly"] = "readonly";
      SemanticTokenModifiers2["static"] = "static";
      SemanticTokenModifiers2["deprecated"] = "deprecated";
      SemanticTokenModifiers2["abstract"] = "abstract";
      SemanticTokenModifiers2["async"] = "async";
      SemanticTokenModifiers2["modification"] = "modification";
      SemanticTokenModifiers2["documentation"] = "documentation";
      SemanticTokenModifiers2["defaultLibrary"] = "defaultLibrary";
    })(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
    (function(SemanticTokens2) {
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && (candidate.resultId === void 0 || typeof candidate.resultId === "string") && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === "number");
      }
      SemanticTokens2.is = is;
    })(SemanticTokens || (SemanticTokens = {}));
    (function(InlineValueText2) {
      function create(range2, text) {
        return { range: range2, text };
      }
      InlineValueText2.create = create;
      function is(value) {
        var candidate = value;
        return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
      }
      InlineValueText2.is = is;
    })(InlineValueText || (InlineValueText = {}));
    (function(InlineValueVariableLookup2) {
      function create(range2, variableName, caseSensitiveLookup) {
        return { range: range2, variableName, caseSensitiveLookup };
      }
      InlineValueVariableLookup2.create = create;
      function is(value) {
        var candidate = value;
        return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup) && (Is.string(candidate.variableName) || candidate.variableName === void 0);
      }
      InlineValueVariableLookup2.is = is;
    })(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
    (function(InlineValueEvaluatableExpression2) {
      function create(range2, expression) {
        return { range: range2, expression };
      }
      InlineValueEvaluatableExpression2.create = create;
      function is(value) {
        var candidate = value;
        return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && (Is.string(candidate.expression) || candidate.expression === void 0);
      }
      InlineValueEvaluatableExpression2.is = is;
    })(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
    (function(InlineValueContext2) {
      function create(frameId, stoppedLocation) {
        return { frameId, stoppedLocation };
      }
      InlineValueContext2.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(value.stoppedLocation);
      }
      InlineValueContext2.is = is;
    })(InlineValueContext || (InlineValueContext = {}));
    (function(InlayHintKind2) {
      InlayHintKind2.Type = 1;
      InlayHintKind2.Parameter = 2;
      function is(value) {
        return value === 1 || value === 2;
      }
      InlayHintKind2.is = is;
    })(InlayHintKind || (InlayHintKind = {}));
    (function(InlayHintLabelPart2) {
      function create(value) {
        return { value };
      }
      InlayHintLabelPart2.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.location === void 0 || Location.is(candidate.location)) && (candidate.command === void 0 || Command.is(candidate.command));
      }
      InlayHintLabelPart2.is = is;
    })(InlayHintLabelPart || (InlayHintLabelPart = {}));
    (function(InlayHint2) {
      function create(position, label, kind) {
        var result2 = { position, label };
        if (kind !== void 0) {
          result2.kind = kind;
        }
        return result2;
      }
      InlayHint2.create = create;
      function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position2.is(candidate.position) && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is)) && (candidate.kind === void 0 || InlayHintKind.is(candidate.kind)) && candidate.textEdits === void 0 || Is.typedArray(candidate.textEdits, TextEdit.is) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.paddingLeft === void 0 || Is.boolean(candidate.paddingLeft)) && (candidate.paddingRight === void 0 || Is.boolean(candidate.paddingRight));
      }
      InlayHint2.is = is;
    })(InlayHint || (InlayHint = {}));
    EOL = ["\n", "\r\n", "\r"];
    (function(TextDocument3) {
      function create(uri, languageId, version2, content) {
        return new FullTextDocument2(uri, languageId, version2, content);
      }
      TextDocument3.create = create;
      function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
      }
      TextDocument3.is = is;
      function applyEdits(document2, edits) {
        var text = document2.getText();
        var sortedEdits = mergeSort2(edits, function(a, b) {
          var diff = a.range.start.line - b.range.start.line;
          if (diff === 0) {
            return a.range.start.character - b.range.start.character;
          }
          return diff;
        });
        var lastModifiedOffset = text.length;
        for (var i = sortedEdits.length - 1; i >= 0; i--) {
          var e = sortedEdits[i];
          var startOffset = document2.offsetAt(e.range.start);
          var endOffset = document2.offsetAt(e.range.end);
          if (endOffset <= lastModifiedOffset) {
            text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
          } else {
            throw new Error("Overlapping edit");
          }
          lastModifiedOffset = startOffset;
        }
        return text;
      }
      TextDocument3.applyEdits = applyEdits;
      function mergeSort2(data, compare3) {
        if (data.length <= 1) {
          return data;
        }
        var p = data.length / 2 | 0;
        var left = data.slice(0, p);
        var right = data.slice(p);
        mergeSort2(left, compare3);
        mergeSort2(right, compare3);
        var leftIdx = 0;
        var rightIdx = 0;
        var i = 0;
        while (leftIdx < left.length && rightIdx < right.length) {
          var ret = compare3(left[leftIdx], right[rightIdx]);
          if (ret <= 0) {
            data[i++] = left[leftIdx++];
          } else {
            data[i++] = right[rightIdx++];
          }
        }
        while (leftIdx < left.length) {
          data[i++] = left[leftIdx++];
        }
        while (rightIdx < right.length) {
          data[i++] = right[rightIdx++];
        }
        return data;
      }
    })(TextDocument2 || (TextDocument2 = {}));
    FullTextDocument2 = function() {
      function FullTextDocument3(uri, languageId, version2, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version2;
        this._content = content;
        this._lineOffsets = void 0;
      }
      Object.defineProperty(FullTextDocument3.prototype, "uri", {
        get: function() {
          return this._uri;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FullTextDocument3.prototype, "languageId", {
        get: function() {
          return this._languageId;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FullTextDocument3.prototype, "version", {
        get: function() {
          return this._version;
        },
        enumerable: false,
        configurable: true
      });
      FullTextDocument3.prototype.getText = function(range2) {
        if (range2) {
          var start = this.offsetAt(range2.start);
          var end = this.offsetAt(range2.end);
          return this._content.substring(start, end);
        }
        return this._content;
      };
      FullTextDocument3.prototype.update = function(event, version2) {
        this._content = event.text;
        this._version = version2;
        this._lineOffsets = void 0;
      };
      FullTextDocument3.prototype.getLineOffsets = function() {
        if (this._lineOffsets === void 0) {
          var lineOffsets = [];
          var text = this._content;
          var isLineStart = true;
          for (var i = 0; i < text.length; i++) {
            if (isLineStart) {
              lineOffsets.push(i);
              isLineStart = false;
            }
            var ch = text.charAt(i);
            isLineStart = ch === "\r" || ch === "\n";
            if (ch === "\r" && i + 1 < text.length && text.charAt(i + 1) === "\n") {
              i++;
            }
          }
          if (isLineStart && text.length > 0) {
            lineOffsets.push(text.length);
          }
          this._lineOffsets = lineOffsets;
        }
        return this._lineOffsets;
      };
      FullTextDocument3.prototype.positionAt = function(offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0, high = lineOffsets.length;
        if (high === 0) {
          return Position2.create(0, offset);
        }
        while (low < high) {
          var mid = Math.floor((low + high) / 2);
          if (lineOffsets[mid] > offset) {
            high = mid;
          } else {
            low = mid + 1;
          }
        }
        var line = low - 1;
        return Position2.create(line, offset - lineOffsets[line]);
      };
      FullTextDocument3.prototype.offsetAt = function(position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
          return this._content.length;
        } else if (position.line < 0) {
          return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
      };
      Object.defineProperty(FullTextDocument3.prototype, "lineCount", {
        get: function() {
          return this.getLineOffsets().length;
        },
        enumerable: false,
        configurable: true
      });
      return FullTextDocument3;
    }();
    (function(Is2) {
      var toString6 = Object.prototype.toString;
      function defined(value) {
        return typeof value !== "undefined";
      }
      Is2.defined = defined;
      function undefined2(value) {
        return typeof value === "undefined";
      }
      Is2.undefined = undefined2;
      function boolean(value) {
        return value === true || value === false;
      }
      Is2.boolean = boolean;
      function string2(value) {
        return toString6.call(value) === "[object String]";
      }
      Is2.string = string2;
      function number(value) {
        return toString6.call(value) === "[object Number]";
      }
      Is2.number = number;
      function numberRange(value, min, max) {
        return toString6.call(value) === "[object Number]" && min <= value && value <= max;
      }
      Is2.numberRange = numberRange;
      function integer2(value) {
        return toString6.call(value) === "[object Number]" && -2147483648 <= value && value <= 2147483647;
      }
      Is2.integer = integer2;
      function uinteger2(value) {
        return toString6.call(value) === "[object Number]" && 0 <= value && value <= 2147483647;
      }
      Is2.uinteger = uinteger2;
      function func(value) {
        return toString6.call(value) === "[object Function]";
      }
      Is2.func = func;
      function objectLiteral(value) {
        return value !== null && typeof value === "object";
      }
      Is2.objectLiteral = objectLiteral;
      function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
      }
      Is2.typedArray = typedArray;
    })(Is || (Is = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/messages.js
var require_messages2 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/messages.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProtocolNotificationType = exports2.ProtocolNotificationType0 = exports2.ProtocolRequestType = exports2.ProtocolRequestType0 = exports2.RegistrationType = void 0;
    var vscode_jsonrpc_1 = require_main();
    var RegistrationType = class {
      constructor(method) {
        this.method = method;
      }
    };
    exports2.RegistrationType = RegistrationType;
    var ProtocolRequestType0 = class extends vscode_jsonrpc_1.RequestType0 {
      constructor(method) {
        super(method);
      }
    };
    exports2.ProtocolRequestType0 = ProtocolRequestType0;
    var ProtocolRequestType = class extends vscode_jsonrpc_1.RequestType {
      constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
      }
    };
    exports2.ProtocolRequestType = ProtocolRequestType;
    var ProtocolNotificationType0 = class extends vscode_jsonrpc_1.NotificationType0 {
      constructor(method) {
        super(method);
      }
    };
    exports2.ProtocolNotificationType0 = ProtocolNotificationType0;
    var ProtocolNotificationType = class extends vscode_jsonrpc_1.NotificationType {
      constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
      }
    };
    exports2.ProtocolNotificationType = ProtocolNotificationType;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/utils/is.js
var require_is2 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/utils/is.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.objectLiteral = exports2.typedArray = exports2.stringArray = exports2.array = exports2.func = exports2.error = exports2.number = exports2.string = exports2.boolean = void 0;
    function boolean(value) {
      return value === true || value === false;
    }
    exports2.boolean = boolean;
    function string2(value) {
      return typeof value === "string" || value instanceof String;
    }
    exports2.string = string2;
    function number(value) {
      return typeof value === "number" || value instanceof Number;
    }
    exports2.number = number;
    function error2(value) {
      return value instanceof Error;
    }
    exports2.error = error2;
    function func(value) {
      return typeof value === "function";
    }
    exports2.func = func;
    function array(value) {
      return Array.isArray(value);
    }
    exports2.array = array;
    function stringArray(value) {
      return array(value) && value.every((elem) => string2(elem));
    }
    exports2.stringArray = stringArray;
    function typedArray(value, check) {
      return Array.isArray(value) && value.every(check);
    }
    exports2.typedArray = typedArray;
    function objectLiteral(value) {
      return value !== null && typeof value === "object";
    }
    exports2.objectLiteral = objectLiteral;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js
var require_protocol_implementation = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ImplementationRequest = void 0;
    var messages_1 = require_messages2();
    var ImplementationRequest;
    (function(ImplementationRequest2) {
      ImplementationRequest2.method = "textDocument/implementation";
      ImplementationRequest2.type = new messages_1.ProtocolRequestType(ImplementationRequest2.method);
    })(ImplementationRequest = exports2.ImplementationRequest || (exports2.ImplementationRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js
var require_protocol_typeDefinition = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TypeDefinitionRequest = void 0;
    var messages_1 = require_messages2();
    var TypeDefinitionRequest;
    (function(TypeDefinitionRequest2) {
      TypeDefinitionRequest2.method = "textDocument/typeDefinition";
      TypeDefinitionRequest2.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest2.method);
    })(TypeDefinitionRequest = exports2.TypeDefinitionRequest || (exports2.TypeDefinitionRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolder.js
var require_protocol_workspaceFolder = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DidChangeWorkspaceFoldersNotification = exports2.WorkspaceFoldersRequest = void 0;
    var messages_1 = require_messages2();
    var WorkspaceFoldersRequest;
    (function(WorkspaceFoldersRequest2) {
      WorkspaceFoldersRequest2.type = new messages_1.ProtocolRequestType0("workspace/workspaceFolders");
    })(WorkspaceFoldersRequest = exports2.WorkspaceFoldersRequest || (exports2.WorkspaceFoldersRequest = {}));
    var DidChangeWorkspaceFoldersNotification;
    (function(DidChangeWorkspaceFoldersNotification2) {
      DidChangeWorkspaceFoldersNotification2.type = new messages_1.ProtocolNotificationType("workspace/didChangeWorkspaceFolders");
    })(DidChangeWorkspaceFoldersNotification = exports2.DidChangeWorkspaceFoldersNotification || (exports2.DidChangeWorkspaceFoldersNotification = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js
var require_protocol_configuration = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConfigurationRequest = void 0;
    var messages_1 = require_messages2();
    var ConfigurationRequest;
    (function(ConfigurationRequest2) {
      ConfigurationRequest2.type = new messages_1.ProtocolRequestType("workspace/configuration");
    })(ConfigurationRequest = exports2.ConfigurationRequest || (exports2.ConfigurationRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js
var require_protocol_colorProvider = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ColorPresentationRequest = exports2.DocumentColorRequest = void 0;
    var messages_1 = require_messages2();
    var DocumentColorRequest;
    (function(DocumentColorRequest2) {
      DocumentColorRequest2.method = "textDocument/documentColor";
      DocumentColorRequest2.type = new messages_1.ProtocolRequestType(DocumentColorRequest2.method);
    })(DocumentColorRequest = exports2.DocumentColorRequest || (exports2.DocumentColorRequest = {}));
    var ColorPresentationRequest;
    (function(ColorPresentationRequest2) {
      ColorPresentationRequest2.type = new messages_1.ProtocolRequestType("textDocument/colorPresentation");
    })(ColorPresentationRequest = exports2.ColorPresentationRequest || (exports2.ColorPresentationRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js
var require_protocol_foldingRange = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FoldingRangeRequest = exports2.FoldingRangeKind = void 0;
    var messages_1 = require_messages2();
    var FoldingRangeKind2;
    (function(FoldingRangeKind3) {
      FoldingRangeKind3["Comment"] = "comment";
      FoldingRangeKind3["Imports"] = "imports";
      FoldingRangeKind3["Region"] = "region";
    })(FoldingRangeKind2 = exports2.FoldingRangeKind || (exports2.FoldingRangeKind = {}));
    var FoldingRangeRequest;
    (function(FoldingRangeRequest2) {
      FoldingRangeRequest2.method = "textDocument/foldingRange";
      FoldingRangeRequest2.type = new messages_1.ProtocolRequestType(FoldingRangeRequest2.method);
    })(FoldingRangeRequest = exports2.FoldingRangeRequest || (exports2.FoldingRangeRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js
var require_protocol_declaration = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeclarationRequest = void 0;
    var messages_1 = require_messages2();
    var DeclarationRequest;
    (function(DeclarationRequest2) {
      DeclarationRequest2.method = "textDocument/declaration";
      DeclarationRequest2.type = new messages_1.ProtocolRequestType(DeclarationRequest2.method);
    })(DeclarationRequest = exports2.DeclarationRequest || (exports2.DeclarationRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js
var require_protocol_selectionRange = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SelectionRangeRequest = void 0;
    var messages_1 = require_messages2();
    var SelectionRangeRequest;
    (function(SelectionRangeRequest2) {
      SelectionRangeRequest2.method = "textDocument/selectionRange";
      SelectionRangeRequest2.type = new messages_1.ProtocolRequestType(SelectionRangeRequest2.method);
    })(SelectionRangeRequest = exports2.SelectionRangeRequest || (exports2.SelectionRangeRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js
var require_protocol_progress = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkDoneProgressCancelNotification = exports2.WorkDoneProgressCreateRequest = exports2.WorkDoneProgress = void 0;
    var vscode_jsonrpc_1 = require_main();
    var messages_1 = require_messages2();
    var WorkDoneProgress;
    (function(WorkDoneProgress2) {
      WorkDoneProgress2.type = new vscode_jsonrpc_1.ProgressType();
      function is(value) {
        return value === WorkDoneProgress2.type;
      }
      WorkDoneProgress2.is = is;
    })(WorkDoneProgress = exports2.WorkDoneProgress || (exports2.WorkDoneProgress = {}));
    var WorkDoneProgressCreateRequest;
    (function(WorkDoneProgressCreateRequest2) {
      WorkDoneProgressCreateRequest2.type = new messages_1.ProtocolRequestType("window/workDoneProgress/create");
    })(WorkDoneProgressCreateRequest = exports2.WorkDoneProgressCreateRequest || (exports2.WorkDoneProgressCreateRequest = {}));
    var WorkDoneProgressCancelNotification;
    (function(WorkDoneProgressCancelNotification2) {
      WorkDoneProgressCancelNotification2.type = new messages_1.ProtocolNotificationType("window/workDoneProgress/cancel");
    })(WorkDoneProgressCancelNotification = exports2.WorkDoneProgressCancelNotification || (exports2.WorkDoneProgressCancelNotification = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js
var require_protocol_callHierarchy = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CallHierarchyOutgoingCallsRequest = exports2.CallHierarchyIncomingCallsRequest = exports2.CallHierarchyPrepareRequest = void 0;
    var messages_1 = require_messages2();
    var CallHierarchyPrepareRequest;
    (function(CallHierarchyPrepareRequest2) {
      CallHierarchyPrepareRequest2.method = "textDocument/prepareCallHierarchy";
      CallHierarchyPrepareRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest2.method);
    })(CallHierarchyPrepareRequest = exports2.CallHierarchyPrepareRequest || (exports2.CallHierarchyPrepareRequest = {}));
    var CallHierarchyIncomingCallsRequest;
    (function(CallHierarchyIncomingCallsRequest2) {
      CallHierarchyIncomingCallsRequest2.method = "callHierarchy/incomingCalls";
      CallHierarchyIncomingCallsRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest2.method);
    })(CallHierarchyIncomingCallsRequest = exports2.CallHierarchyIncomingCallsRequest || (exports2.CallHierarchyIncomingCallsRequest = {}));
    var CallHierarchyOutgoingCallsRequest;
    (function(CallHierarchyOutgoingCallsRequest2) {
      CallHierarchyOutgoingCallsRequest2.method = "callHierarchy/outgoingCalls";
      CallHierarchyOutgoingCallsRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest2.method);
    })(CallHierarchyOutgoingCallsRequest = exports2.CallHierarchyOutgoingCallsRequest || (exports2.CallHierarchyOutgoingCallsRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js
var require_protocol_semanticTokens = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SemanticTokensRefreshRequest = exports2.SemanticTokensRangeRequest = exports2.SemanticTokensDeltaRequest = exports2.SemanticTokensRequest = exports2.SemanticTokensRegistrationType = exports2.TokenFormat = void 0;
    var messages_1 = require_messages2();
    var TokenFormat;
    (function(TokenFormat2) {
      TokenFormat2.Relative = "relative";
    })(TokenFormat = exports2.TokenFormat || (exports2.TokenFormat = {}));
    var SemanticTokensRegistrationType;
    (function(SemanticTokensRegistrationType2) {
      SemanticTokensRegistrationType2.method = "textDocument/semanticTokens";
      SemanticTokensRegistrationType2.type = new messages_1.RegistrationType(SemanticTokensRegistrationType2.method);
    })(SemanticTokensRegistrationType = exports2.SemanticTokensRegistrationType || (exports2.SemanticTokensRegistrationType = {}));
    var SemanticTokensRequest;
    (function(SemanticTokensRequest2) {
      SemanticTokensRequest2.method = "textDocument/semanticTokens/full";
      SemanticTokensRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensRequest2.method);
    })(SemanticTokensRequest = exports2.SemanticTokensRequest || (exports2.SemanticTokensRequest = {}));
    var SemanticTokensDeltaRequest;
    (function(SemanticTokensDeltaRequest2) {
      SemanticTokensDeltaRequest2.method = "textDocument/semanticTokens/full/delta";
      SemanticTokensDeltaRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest2.method);
    })(SemanticTokensDeltaRequest = exports2.SemanticTokensDeltaRequest || (exports2.SemanticTokensDeltaRequest = {}));
    var SemanticTokensRangeRequest;
    (function(SemanticTokensRangeRequest2) {
      SemanticTokensRangeRequest2.method = "textDocument/semanticTokens/range";
      SemanticTokensRangeRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest2.method);
    })(SemanticTokensRangeRequest = exports2.SemanticTokensRangeRequest || (exports2.SemanticTokensRangeRequest = {}));
    var SemanticTokensRefreshRequest;
    (function(SemanticTokensRefreshRequest2) {
      SemanticTokensRefreshRequest2.method = `workspace/semanticTokens/refresh`;
      SemanticTokensRefreshRequest2.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest2.method);
    })(SemanticTokensRefreshRequest = exports2.SemanticTokensRefreshRequest || (exports2.SemanticTokensRefreshRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js
var require_protocol_showDocument = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ShowDocumentRequest = void 0;
    var messages_1 = require_messages2();
    var ShowDocumentRequest;
    (function(ShowDocumentRequest2) {
      ShowDocumentRequest2.method = "window/showDocument";
      ShowDocumentRequest2.type = new messages_1.ProtocolRequestType(ShowDocumentRequest2.method);
    })(ShowDocumentRequest = exports2.ShowDocumentRequest || (exports2.ShowDocumentRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js
var require_protocol_linkedEditingRange = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LinkedEditingRangeRequest = void 0;
    var messages_1 = require_messages2();
    var LinkedEditingRangeRequest;
    (function(LinkedEditingRangeRequest2) {
      LinkedEditingRangeRequest2.method = "textDocument/linkedEditingRange";
      LinkedEditingRangeRequest2.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest2.method);
    })(LinkedEditingRangeRequest = exports2.LinkedEditingRangeRequest || (exports2.LinkedEditingRangeRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js
var require_protocol_fileOperations = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WillDeleteFilesRequest = exports2.DidDeleteFilesNotification = exports2.DidRenameFilesNotification = exports2.WillRenameFilesRequest = exports2.DidCreateFilesNotification = exports2.WillCreateFilesRequest = exports2.FileOperationPatternKind = void 0;
    var messages_1 = require_messages2();
    var FileOperationPatternKind;
    (function(FileOperationPatternKind2) {
      FileOperationPatternKind2.file = "file";
      FileOperationPatternKind2.folder = "folder";
    })(FileOperationPatternKind = exports2.FileOperationPatternKind || (exports2.FileOperationPatternKind = {}));
    var WillCreateFilesRequest;
    (function(WillCreateFilesRequest2) {
      WillCreateFilesRequest2.method = "workspace/willCreateFiles";
      WillCreateFilesRequest2.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest2.method);
    })(WillCreateFilesRequest = exports2.WillCreateFilesRequest || (exports2.WillCreateFilesRequest = {}));
    var DidCreateFilesNotification;
    (function(DidCreateFilesNotification2) {
      DidCreateFilesNotification2.method = "workspace/didCreateFiles";
      DidCreateFilesNotification2.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification2.method);
    })(DidCreateFilesNotification = exports2.DidCreateFilesNotification || (exports2.DidCreateFilesNotification = {}));
    var WillRenameFilesRequest;
    (function(WillRenameFilesRequest2) {
      WillRenameFilesRequest2.method = "workspace/willRenameFiles";
      WillRenameFilesRequest2.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest2.method);
    })(WillRenameFilesRequest = exports2.WillRenameFilesRequest || (exports2.WillRenameFilesRequest = {}));
    var DidRenameFilesNotification;
    (function(DidRenameFilesNotification2) {
      DidRenameFilesNotification2.method = "workspace/didRenameFiles";
      DidRenameFilesNotification2.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification2.method);
    })(DidRenameFilesNotification = exports2.DidRenameFilesNotification || (exports2.DidRenameFilesNotification = {}));
    var DidDeleteFilesNotification;
    (function(DidDeleteFilesNotification2) {
      DidDeleteFilesNotification2.method = "workspace/didDeleteFiles";
      DidDeleteFilesNotification2.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification2.method);
    })(DidDeleteFilesNotification = exports2.DidDeleteFilesNotification || (exports2.DidDeleteFilesNotification = {}));
    var WillDeleteFilesRequest;
    (function(WillDeleteFilesRequest2) {
      WillDeleteFilesRequest2.method = "workspace/willDeleteFiles";
      WillDeleteFilesRequest2.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest2.method);
    })(WillDeleteFilesRequest = exports2.WillDeleteFilesRequest || (exports2.WillDeleteFilesRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js
var require_protocol_moniker = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MonikerRequest = exports2.MonikerKind = exports2.UniquenessLevel = void 0;
    var messages_1 = require_messages2();
    var UniquenessLevel;
    (function(UniquenessLevel2) {
      UniquenessLevel2["document"] = "document";
      UniquenessLevel2["project"] = "project";
      UniquenessLevel2["group"] = "group";
      UniquenessLevel2["scheme"] = "scheme";
      UniquenessLevel2["global"] = "global";
    })(UniquenessLevel = exports2.UniquenessLevel || (exports2.UniquenessLevel = {}));
    var MonikerKind;
    (function(MonikerKind2) {
      MonikerKind2["import"] = "import";
      MonikerKind2["export"] = "export";
      MonikerKind2["local"] = "local";
    })(MonikerKind = exports2.MonikerKind || (exports2.MonikerKind = {}));
    var MonikerRequest;
    (function(MonikerRequest2) {
      MonikerRequest2.method = "textDocument/moniker";
      MonikerRequest2.type = new messages_1.ProtocolRequestType(MonikerRequest2.method);
    })(MonikerRequest = exports2.MonikerRequest || (exports2.MonikerRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.typeHierarchy.js
var require_protocol_typeHierarchy = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.typeHierarchy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TypeHierarchySubtypesRequest = exports2.TypeHierarchySupertypesRequest = exports2.TypeHierarchyPrepareRequest = void 0;
    var messages_1 = require_messages2();
    var TypeHierarchyPrepareRequest;
    (function(TypeHierarchyPrepareRequest2) {
      TypeHierarchyPrepareRequest2.method = "textDocument/prepareTypeHierarchy";
      TypeHierarchyPrepareRequest2.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest2.method);
    })(TypeHierarchyPrepareRequest = exports2.TypeHierarchyPrepareRequest || (exports2.TypeHierarchyPrepareRequest = {}));
    var TypeHierarchySupertypesRequest;
    (function(TypeHierarchySupertypesRequest2) {
      TypeHierarchySupertypesRequest2.method = "typeHierarchy/supertypes";
      TypeHierarchySupertypesRequest2.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest2.method);
    })(TypeHierarchySupertypesRequest = exports2.TypeHierarchySupertypesRequest || (exports2.TypeHierarchySupertypesRequest = {}));
    var TypeHierarchySubtypesRequest;
    (function(TypeHierarchySubtypesRequest2) {
      TypeHierarchySubtypesRequest2.method = "typeHierarchy/subtypes";
      TypeHierarchySubtypesRequest2.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest2.method);
    })(TypeHierarchySubtypesRequest = exports2.TypeHierarchySubtypesRequest || (exports2.TypeHierarchySubtypesRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineValue.js
var require_protocol_inlineValue = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InlineValueRefreshRequest = exports2.InlineValueRequest = void 0;
    var messages_1 = require_messages2();
    var InlineValueRequest;
    (function(InlineValueRequest2) {
      InlineValueRequest2.method = "textDocument/inlineValue";
      InlineValueRequest2.type = new messages_1.ProtocolRequestType(InlineValueRequest2.method);
    })(InlineValueRequest = exports2.InlineValueRequest || (exports2.InlineValueRequest = {}));
    var InlineValueRefreshRequest;
    (function(InlineValueRefreshRequest2) {
      InlineValueRefreshRequest2.method = `workspace/inlineValue/refresh`;
      InlineValueRefreshRequest2.type = new messages_1.ProtocolRequestType0(InlineValueRefreshRequest2.method);
    })(InlineValueRefreshRequest = exports2.InlineValueRefreshRequest || (exports2.InlineValueRefreshRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.inlayHint.js
var require_protocol_inlayHint = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.inlayHint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InlayHintRefreshRequest = exports2.InlayHintResolveRequest = exports2.InlayHintRequest = void 0;
    var messages_1 = require_messages2();
    var InlayHintRequest;
    (function(InlayHintRequest2) {
      InlayHintRequest2.method = "textDocument/inlayHint";
      InlayHintRequest2.type = new messages_1.ProtocolRequestType(InlayHintRequest2.method);
    })(InlayHintRequest = exports2.InlayHintRequest || (exports2.InlayHintRequest = {}));
    var InlayHintResolveRequest;
    (function(InlayHintResolveRequest2) {
      InlayHintResolveRequest2.method = "inlayHint/resolve";
      InlayHintResolveRequest2.type = new messages_1.ProtocolRequestType(InlayHintResolveRequest2.method);
    })(InlayHintResolveRequest = exports2.InlayHintResolveRequest || (exports2.InlayHintResolveRequest = {}));
    var InlayHintRefreshRequest;
    (function(InlayHintRefreshRequest2) {
      InlayHintRefreshRequest2.method = `workspace/inlayHint/refresh`;
      InlayHintRefreshRequest2.type = new messages_1.ProtocolRequestType0(InlayHintRefreshRequest2.method);
    })(InlayHintRefreshRequest = exports2.InlayHintRefreshRequest || (exports2.InlayHintRefreshRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.js
var require_protocol = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/protocol.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CodeLensRequest = exports2.WorkspaceSymbolResolveRequest = exports2.WorkspaceSymbolRequest = exports2.CodeActionResolveRequest = exports2.CodeActionRequest = exports2.DocumentSymbolRequest = exports2.DocumentHighlightRequest = exports2.ReferencesRequest = exports2.DefinitionRequest = exports2.SignatureHelpRequest = exports2.SignatureHelpTriggerKind = exports2.HoverRequest = exports2.CompletionResolveRequest = exports2.CompletionRequest = exports2.CompletionTriggerKind = exports2.PublishDiagnosticsNotification = exports2.WatchKind = exports2.FileChangeType = exports2.DidChangeWatchedFilesNotification = exports2.WillSaveTextDocumentWaitUntilRequest = exports2.WillSaveTextDocumentNotification = exports2.TextDocumentSaveReason = exports2.DidSaveTextDocumentNotification = exports2.DidCloseTextDocumentNotification = exports2.DidChangeTextDocumentNotification = exports2.TextDocumentContentChangeEvent = exports2.DidOpenTextDocumentNotification = exports2.TextDocumentSyncKind = exports2.TelemetryEventNotification = exports2.LogMessageNotification = exports2.ShowMessageRequest = exports2.ShowMessageNotification = exports2.MessageType = exports2.DidChangeConfigurationNotification = exports2.ExitNotification = exports2.ShutdownRequest = exports2.InitializedNotification = exports2.InitializeError = exports2.InitializeRequest = exports2.WorkDoneProgressOptions = exports2.TextDocumentRegistrationOptions = exports2.StaticRegistrationOptions = exports2.FailureHandlingKind = exports2.ResourceOperationKind = exports2.UnregistrationRequest = exports2.RegistrationRequest = exports2.DocumentSelector = exports2.NotebookCellTextDocumentFilter = exports2.NotebookDocumentFilter = exports2.TextDocumentFilter = void 0;
    exports2.InlineValueRequest = exports2.TypeHierarchySupertypesRequest = exports2.TypeHierarchySubtypesRequest = exports2.TypeHierarchyPrepareRequest = exports2.MonikerRequest = exports2.MonikerKind = exports2.UniquenessLevel = exports2.WillDeleteFilesRequest = exports2.DidDeleteFilesNotification = exports2.WillRenameFilesRequest = exports2.DidRenameFilesNotification = exports2.WillCreateFilesRequest = exports2.DidCreateFilesNotification = exports2.FileOperationPatternKind = exports2.LinkedEditingRangeRequest = exports2.ShowDocumentRequest = exports2.SemanticTokensRegistrationType = exports2.SemanticTokensRefreshRequest = exports2.SemanticTokensRangeRequest = exports2.SemanticTokensDeltaRequest = exports2.SemanticTokensRequest = exports2.TokenFormat = exports2.CallHierarchyPrepareRequest = exports2.CallHierarchyOutgoingCallsRequest = exports2.CallHierarchyIncomingCallsRequest = exports2.WorkDoneProgressCancelNotification = exports2.WorkDoneProgressCreateRequest = exports2.WorkDoneProgress = exports2.SelectionRangeRequest = exports2.DeclarationRequest = exports2.FoldingRangeRequest = exports2.ColorPresentationRequest = exports2.DocumentColorRequest = exports2.ConfigurationRequest = exports2.DidChangeWorkspaceFoldersNotification = exports2.WorkspaceFoldersRequest = exports2.TypeDefinitionRequest = exports2.ImplementationRequest = exports2.ApplyWorkspaceEditRequest = exports2.ExecuteCommandRequest = exports2.PrepareRenameRequest = exports2.RenameRequest = exports2.PrepareSupportDefaultBehavior = exports2.DocumentOnTypeFormattingRequest = exports2.DocumentRangeFormattingRequest = exports2.DocumentFormattingRequest = exports2.DocumentLinkResolveRequest = exports2.DocumentLinkRequest = exports2.CodeLensRefreshRequest = exports2.CodeLensResolveRequest = void 0;
    exports2.InlayHintRefreshRequest = exports2.InlayHintResolveRequest = exports2.InlayHintRequest = exports2.InlineValueRefreshRequest = void 0;
    var messages_1 = require_messages2();
    var Is2 = require_is2();
    var protocol_implementation_1 = require_protocol_implementation();
    Object.defineProperty(exports2, "ImplementationRequest", { enumerable: true, get: function() {
      return protocol_implementation_1.ImplementationRequest;
    } });
    var protocol_typeDefinition_1 = require_protocol_typeDefinition();
    Object.defineProperty(exports2, "TypeDefinitionRequest", { enumerable: true, get: function() {
      return protocol_typeDefinition_1.TypeDefinitionRequest;
    } });
    var protocol_workspaceFolder_1 = require_protocol_workspaceFolder();
    Object.defineProperty(exports2, "WorkspaceFoldersRequest", { enumerable: true, get: function() {
      return protocol_workspaceFolder_1.WorkspaceFoldersRequest;
    } });
    Object.defineProperty(exports2, "DidChangeWorkspaceFoldersNotification", { enumerable: true, get: function() {
      return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification;
    } });
    var protocol_configuration_1 = require_protocol_configuration();
    Object.defineProperty(exports2, "ConfigurationRequest", { enumerable: true, get: function() {
      return protocol_configuration_1.ConfigurationRequest;
    } });
    var protocol_colorProvider_1 = require_protocol_colorProvider();
    Object.defineProperty(exports2, "DocumentColorRequest", { enumerable: true, get: function() {
      return protocol_colorProvider_1.DocumentColorRequest;
    } });
    Object.defineProperty(exports2, "ColorPresentationRequest", { enumerable: true, get: function() {
      return protocol_colorProvider_1.ColorPresentationRequest;
    } });
    var protocol_foldingRange_1 = require_protocol_foldingRange();
    Object.defineProperty(exports2, "FoldingRangeRequest", { enumerable: true, get: function() {
      return protocol_foldingRange_1.FoldingRangeRequest;
    } });
    var protocol_declaration_1 = require_protocol_declaration();
    Object.defineProperty(exports2, "DeclarationRequest", { enumerable: true, get: function() {
      return protocol_declaration_1.DeclarationRequest;
    } });
    var protocol_selectionRange_1 = require_protocol_selectionRange();
    Object.defineProperty(exports2, "SelectionRangeRequest", { enumerable: true, get: function() {
      return protocol_selectionRange_1.SelectionRangeRequest;
    } });
    var protocol_progress_1 = require_protocol_progress();
    Object.defineProperty(exports2, "WorkDoneProgress", { enumerable: true, get: function() {
      return protocol_progress_1.WorkDoneProgress;
    } });
    Object.defineProperty(exports2, "WorkDoneProgressCreateRequest", { enumerable: true, get: function() {
      return protocol_progress_1.WorkDoneProgressCreateRequest;
    } });
    Object.defineProperty(exports2, "WorkDoneProgressCancelNotification", { enumerable: true, get: function() {
      return protocol_progress_1.WorkDoneProgressCancelNotification;
    } });
    var protocol_callHierarchy_1 = require_protocol_callHierarchy();
    Object.defineProperty(exports2, "CallHierarchyIncomingCallsRequest", { enumerable: true, get: function() {
      return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest;
    } });
    Object.defineProperty(exports2, "CallHierarchyOutgoingCallsRequest", { enumerable: true, get: function() {
      return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest;
    } });
    Object.defineProperty(exports2, "CallHierarchyPrepareRequest", { enumerable: true, get: function() {
      return protocol_callHierarchy_1.CallHierarchyPrepareRequest;
    } });
    var protocol_semanticTokens_1 = require_protocol_semanticTokens();
    Object.defineProperty(exports2, "TokenFormat", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.TokenFormat;
    } });
    Object.defineProperty(exports2, "SemanticTokensRequest", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensRequest;
    } });
    Object.defineProperty(exports2, "SemanticTokensDeltaRequest", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensDeltaRequest;
    } });
    Object.defineProperty(exports2, "SemanticTokensRangeRequest", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensRangeRequest;
    } });
    Object.defineProperty(exports2, "SemanticTokensRefreshRequest", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensRefreshRequest;
    } });
    Object.defineProperty(exports2, "SemanticTokensRegistrationType", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensRegistrationType;
    } });
    var protocol_showDocument_1 = require_protocol_showDocument();
    Object.defineProperty(exports2, "ShowDocumentRequest", { enumerable: true, get: function() {
      return protocol_showDocument_1.ShowDocumentRequest;
    } });
    var protocol_linkedEditingRange_1 = require_protocol_linkedEditingRange();
    Object.defineProperty(exports2, "LinkedEditingRangeRequest", { enumerable: true, get: function() {
      return protocol_linkedEditingRange_1.LinkedEditingRangeRequest;
    } });
    var protocol_fileOperations_1 = require_protocol_fileOperations();
    Object.defineProperty(exports2, "FileOperationPatternKind", { enumerable: true, get: function() {
      return protocol_fileOperations_1.FileOperationPatternKind;
    } });
    Object.defineProperty(exports2, "DidCreateFilesNotification", { enumerable: true, get: function() {
      return protocol_fileOperations_1.DidCreateFilesNotification;
    } });
    Object.defineProperty(exports2, "WillCreateFilesRequest", { enumerable: true, get: function() {
      return protocol_fileOperations_1.WillCreateFilesRequest;
    } });
    Object.defineProperty(exports2, "DidRenameFilesNotification", { enumerable: true, get: function() {
      return protocol_fileOperations_1.DidRenameFilesNotification;
    } });
    Object.defineProperty(exports2, "WillRenameFilesRequest", { enumerable: true, get: function() {
      return protocol_fileOperations_1.WillRenameFilesRequest;
    } });
    Object.defineProperty(exports2, "DidDeleteFilesNotification", { enumerable: true, get: function() {
      return protocol_fileOperations_1.DidDeleteFilesNotification;
    } });
    Object.defineProperty(exports2, "WillDeleteFilesRequest", { enumerable: true, get: function() {
      return protocol_fileOperations_1.WillDeleteFilesRequest;
    } });
    var protocol_moniker_1 = require_protocol_moniker();
    Object.defineProperty(exports2, "UniquenessLevel", { enumerable: true, get: function() {
      return protocol_moniker_1.UniquenessLevel;
    } });
    Object.defineProperty(exports2, "MonikerKind", { enumerable: true, get: function() {
      return protocol_moniker_1.MonikerKind;
    } });
    Object.defineProperty(exports2, "MonikerRequest", { enumerable: true, get: function() {
      return protocol_moniker_1.MonikerRequest;
    } });
    var protocol_typeHierarchy_1 = require_protocol_typeHierarchy();
    Object.defineProperty(exports2, "TypeHierarchyPrepareRequest", { enumerable: true, get: function() {
      return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest;
    } });
    Object.defineProperty(exports2, "TypeHierarchySubtypesRequest", { enumerable: true, get: function() {
      return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest;
    } });
    Object.defineProperty(exports2, "TypeHierarchySupertypesRequest", { enumerable: true, get: function() {
      return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest;
    } });
    var protocol_inlineValue_1 = require_protocol_inlineValue();
    Object.defineProperty(exports2, "InlineValueRequest", { enumerable: true, get: function() {
      return protocol_inlineValue_1.InlineValueRequest;
    } });
    Object.defineProperty(exports2, "InlineValueRefreshRequest", { enumerable: true, get: function() {
      return protocol_inlineValue_1.InlineValueRefreshRequest;
    } });
    var protocol_inlayHint_1 = require_protocol_inlayHint();
    Object.defineProperty(exports2, "InlayHintRequest", { enumerable: true, get: function() {
      return protocol_inlayHint_1.InlayHintRequest;
    } });
    Object.defineProperty(exports2, "InlayHintResolveRequest", { enumerable: true, get: function() {
      return protocol_inlayHint_1.InlayHintResolveRequest;
    } });
    Object.defineProperty(exports2, "InlayHintRefreshRequest", { enumerable: true, get: function() {
      return protocol_inlayHint_1.InlayHintRefreshRequest;
    } });
    var TextDocumentFilter;
    (function(TextDocumentFilter2) {
      function is(value) {
        const candidate = value;
        return Is2.string(candidate.language) || Is2.string(candidate.scheme) || Is2.string(candidate.pattern);
      }
      TextDocumentFilter2.is = is;
    })(TextDocumentFilter = exports2.TextDocumentFilter || (exports2.TextDocumentFilter = {}));
    var NotebookDocumentFilter;
    (function(NotebookDocumentFilter2) {
      function is(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && (Is2.string(candidate.notebookType) || Is2.string(candidate.scheme) || Is2.string(candidate.pattern));
      }
      NotebookDocumentFilter2.is = is;
    })(NotebookDocumentFilter = exports2.NotebookDocumentFilter || (exports2.NotebookDocumentFilter = {}));
    var NotebookCellTextDocumentFilter;
    (function(NotebookCellTextDocumentFilter2) {
      function is(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && (Is2.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook)) && (candidate.language === void 0 || Is2.string(candidate.language));
      }
      NotebookCellTextDocumentFilter2.is = is;
    })(NotebookCellTextDocumentFilter = exports2.NotebookCellTextDocumentFilter || (exports2.NotebookCellTextDocumentFilter = {}));
    var DocumentSelector;
    (function(DocumentSelector2) {
      function is(value) {
        if (!Array.isArray(value)) {
          return false;
        }
        for (let elem of value) {
          if (!Is2.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {
            return false;
          }
        }
        return true;
      }
      DocumentSelector2.is = is;
    })(DocumentSelector = exports2.DocumentSelector || (exports2.DocumentSelector = {}));
    var RegistrationRequest;
    (function(RegistrationRequest2) {
      RegistrationRequest2.type = new messages_1.ProtocolRequestType("client/registerCapability");
    })(RegistrationRequest = exports2.RegistrationRequest || (exports2.RegistrationRequest = {}));
    var UnregistrationRequest;
    (function(UnregistrationRequest2) {
      UnregistrationRequest2.type = new messages_1.ProtocolRequestType("client/unregisterCapability");
    })(UnregistrationRequest = exports2.UnregistrationRequest || (exports2.UnregistrationRequest = {}));
    var ResourceOperationKind;
    (function(ResourceOperationKind2) {
      ResourceOperationKind2.Create = "create";
      ResourceOperationKind2.Rename = "rename";
      ResourceOperationKind2.Delete = "delete";
    })(ResourceOperationKind = exports2.ResourceOperationKind || (exports2.ResourceOperationKind = {}));
    var FailureHandlingKind;
    (function(FailureHandlingKind2) {
      FailureHandlingKind2.Abort = "abort";
      FailureHandlingKind2.Transactional = "transactional";
      FailureHandlingKind2.TextOnlyTransactional = "textOnlyTransactional";
      FailureHandlingKind2.Undo = "undo";
    })(FailureHandlingKind = exports2.FailureHandlingKind || (exports2.FailureHandlingKind = {}));
    var StaticRegistrationOptions;
    (function(StaticRegistrationOptions2) {
      function hasId(value) {
        const candidate = value;
        return candidate && Is2.string(candidate.id) && candidate.id.length > 0;
      }
      StaticRegistrationOptions2.hasId = hasId;
    })(StaticRegistrationOptions = exports2.StaticRegistrationOptions || (exports2.StaticRegistrationOptions = {}));
    var TextDocumentRegistrationOptions;
    (function(TextDocumentRegistrationOptions2) {
      function is(value) {
        const candidate = value;
        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
      }
      TextDocumentRegistrationOptions2.is = is;
    })(TextDocumentRegistrationOptions = exports2.TextDocumentRegistrationOptions || (exports2.TextDocumentRegistrationOptions = {}));
    var WorkDoneProgressOptions;
    (function(WorkDoneProgressOptions2) {
      function is(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && (candidate.workDoneProgress === void 0 || Is2.boolean(candidate.workDoneProgress));
      }
      WorkDoneProgressOptions2.is = is;
      function hasWorkDoneProgress(value) {
        const candidate = value;
        return candidate && Is2.boolean(candidate.workDoneProgress);
      }
      WorkDoneProgressOptions2.hasWorkDoneProgress = hasWorkDoneProgress;
    })(WorkDoneProgressOptions = exports2.WorkDoneProgressOptions || (exports2.WorkDoneProgressOptions = {}));
    var InitializeRequest;
    (function(InitializeRequest2) {
      InitializeRequest2.type = new messages_1.ProtocolRequestType("initialize");
    })(InitializeRequest = exports2.InitializeRequest || (exports2.InitializeRequest = {}));
    var InitializeError;
    (function(InitializeError2) {
      InitializeError2.unknownProtocolVersion = 1;
    })(InitializeError = exports2.InitializeError || (exports2.InitializeError = {}));
    var InitializedNotification;
    (function(InitializedNotification2) {
      InitializedNotification2.type = new messages_1.ProtocolNotificationType("initialized");
    })(InitializedNotification = exports2.InitializedNotification || (exports2.InitializedNotification = {}));
    var ShutdownRequest;
    (function(ShutdownRequest2) {
      ShutdownRequest2.type = new messages_1.ProtocolRequestType0("shutdown");
    })(ShutdownRequest = exports2.ShutdownRequest || (exports2.ShutdownRequest = {}));
    var ExitNotification;
    (function(ExitNotification2) {
      ExitNotification2.type = new messages_1.ProtocolNotificationType0("exit");
    })(ExitNotification = exports2.ExitNotification || (exports2.ExitNotification = {}));
    var DidChangeConfigurationNotification;
    (function(DidChangeConfigurationNotification2) {
      DidChangeConfigurationNotification2.type = new messages_1.ProtocolNotificationType("workspace/didChangeConfiguration");
    })(DidChangeConfigurationNotification = exports2.DidChangeConfigurationNotification || (exports2.DidChangeConfigurationNotification = {}));
    var MessageType;
    (function(MessageType2) {
      MessageType2.Error = 1;
      MessageType2.Warning = 2;
      MessageType2.Info = 3;
      MessageType2.Log = 4;
    })(MessageType = exports2.MessageType || (exports2.MessageType = {}));
    var ShowMessageNotification;
    (function(ShowMessageNotification2) {
      ShowMessageNotification2.type = new messages_1.ProtocolNotificationType("window/showMessage");
    })(ShowMessageNotification = exports2.ShowMessageNotification || (exports2.ShowMessageNotification = {}));
    var ShowMessageRequest;
    (function(ShowMessageRequest2) {
      ShowMessageRequest2.type = new messages_1.ProtocolRequestType("window/showMessageRequest");
    })(ShowMessageRequest = exports2.ShowMessageRequest || (exports2.ShowMessageRequest = {}));
    var LogMessageNotification;
    (function(LogMessageNotification2) {
      LogMessageNotification2.type = new messages_1.ProtocolNotificationType("window/logMessage");
    })(LogMessageNotification = exports2.LogMessageNotification || (exports2.LogMessageNotification = {}));
    var TelemetryEventNotification;
    (function(TelemetryEventNotification2) {
      TelemetryEventNotification2.type = new messages_1.ProtocolNotificationType("telemetry/event");
    })(TelemetryEventNotification = exports2.TelemetryEventNotification || (exports2.TelemetryEventNotification = {}));
    var TextDocumentSyncKind;
    (function(TextDocumentSyncKind2) {
      TextDocumentSyncKind2.None = 0;
      TextDocumentSyncKind2.Full = 1;
      TextDocumentSyncKind2.Incremental = 2;
    })(TextDocumentSyncKind = exports2.TextDocumentSyncKind || (exports2.TextDocumentSyncKind = {}));
    var DidOpenTextDocumentNotification;
    (function(DidOpenTextDocumentNotification2) {
      DidOpenTextDocumentNotification2.method = "textDocument/didOpen";
      DidOpenTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification2.method);
    })(DidOpenTextDocumentNotification = exports2.DidOpenTextDocumentNotification || (exports2.DidOpenTextDocumentNotification = {}));
    var TextDocumentContentChangeEvent;
    (function(TextDocumentContentChangeEvent2) {
      function isIncremental(event) {
        let candidate = event;
        return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
      }
      TextDocumentContentChangeEvent2.isIncremental = isIncremental;
      function isFull(event) {
        let candidate = event;
        return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
      }
      TextDocumentContentChangeEvent2.isFull = isFull;
    })(TextDocumentContentChangeEvent = exports2.TextDocumentContentChangeEvent || (exports2.TextDocumentContentChangeEvent = {}));
    var DidChangeTextDocumentNotification;
    (function(DidChangeTextDocumentNotification2) {
      DidChangeTextDocumentNotification2.method = "textDocument/didChange";
      DidChangeTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification2.method);
    })(DidChangeTextDocumentNotification = exports2.DidChangeTextDocumentNotification || (exports2.DidChangeTextDocumentNotification = {}));
    var DidCloseTextDocumentNotification;
    (function(DidCloseTextDocumentNotification2) {
      DidCloseTextDocumentNotification2.method = "textDocument/didClose";
      DidCloseTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification2.method);
    })(DidCloseTextDocumentNotification = exports2.DidCloseTextDocumentNotification || (exports2.DidCloseTextDocumentNotification = {}));
    var DidSaveTextDocumentNotification;
    (function(DidSaveTextDocumentNotification2) {
      DidSaveTextDocumentNotification2.method = "textDocument/didSave";
      DidSaveTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification2.method);
    })(DidSaveTextDocumentNotification = exports2.DidSaveTextDocumentNotification || (exports2.DidSaveTextDocumentNotification = {}));
    var TextDocumentSaveReason;
    (function(TextDocumentSaveReason2) {
      TextDocumentSaveReason2.Manual = 1;
      TextDocumentSaveReason2.AfterDelay = 2;
      TextDocumentSaveReason2.FocusOut = 3;
    })(TextDocumentSaveReason = exports2.TextDocumentSaveReason || (exports2.TextDocumentSaveReason = {}));
    var WillSaveTextDocumentNotification;
    (function(WillSaveTextDocumentNotification2) {
      WillSaveTextDocumentNotification2.method = "textDocument/willSave";
      WillSaveTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification2.method);
    })(WillSaveTextDocumentNotification = exports2.WillSaveTextDocumentNotification || (exports2.WillSaveTextDocumentNotification = {}));
    var WillSaveTextDocumentWaitUntilRequest;
    (function(WillSaveTextDocumentWaitUntilRequest2) {
      WillSaveTextDocumentWaitUntilRequest2.method = "textDocument/willSaveWaitUntil";
      WillSaveTextDocumentWaitUntilRequest2.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest2.method);
    })(WillSaveTextDocumentWaitUntilRequest = exports2.WillSaveTextDocumentWaitUntilRequest || (exports2.WillSaveTextDocumentWaitUntilRequest = {}));
    var DidChangeWatchedFilesNotification;
    (function(DidChangeWatchedFilesNotification2) {
      DidChangeWatchedFilesNotification2.type = new messages_1.ProtocolNotificationType("workspace/didChangeWatchedFiles");
    })(DidChangeWatchedFilesNotification = exports2.DidChangeWatchedFilesNotification || (exports2.DidChangeWatchedFilesNotification = {}));
    var FileChangeType;
    (function(FileChangeType2) {
      FileChangeType2.Created = 1;
      FileChangeType2.Changed = 2;
      FileChangeType2.Deleted = 3;
    })(FileChangeType = exports2.FileChangeType || (exports2.FileChangeType = {}));
    var WatchKind;
    (function(WatchKind2) {
      WatchKind2.Create = 1;
      WatchKind2.Change = 2;
      WatchKind2.Delete = 4;
    })(WatchKind = exports2.WatchKind || (exports2.WatchKind = {}));
    var PublishDiagnosticsNotification;
    (function(PublishDiagnosticsNotification2) {
      PublishDiagnosticsNotification2.type = new messages_1.ProtocolNotificationType("textDocument/publishDiagnostics");
    })(PublishDiagnosticsNotification = exports2.PublishDiagnosticsNotification || (exports2.PublishDiagnosticsNotification = {}));
    var CompletionTriggerKind;
    (function(CompletionTriggerKind2) {
      CompletionTriggerKind2.Invoked = 1;
      CompletionTriggerKind2.TriggerCharacter = 2;
      CompletionTriggerKind2.TriggerForIncompleteCompletions = 3;
    })(CompletionTriggerKind = exports2.CompletionTriggerKind || (exports2.CompletionTriggerKind = {}));
    var CompletionRequest;
    (function(CompletionRequest2) {
      CompletionRequest2.method = "textDocument/completion";
      CompletionRequest2.type = new messages_1.ProtocolRequestType(CompletionRequest2.method);
    })(CompletionRequest = exports2.CompletionRequest || (exports2.CompletionRequest = {}));
    var CompletionResolveRequest;
    (function(CompletionResolveRequest2) {
      CompletionResolveRequest2.method = "completionItem/resolve";
      CompletionResolveRequest2.type = new messages_1.ProtocolRequestType(CompletionResolveRequest2.method);
    })(CompletionResolveRequest = exports2.CompletionResolveRequest || (exports2.CompletionResolveRequest = {}));
    var HoverRequest;
    (function(HoverRequest2) {
      HoverRequest2.method = "textDocument/hover";
      HoverRequest2.type = new messages_1.ProtocolRequestType(HoverRequest2.method);
    })(HoverRequest = exports2.HoverRequest || (exports2.HoverRequest = {}));
    var SignatureHelpTriggerKind;
    (function(SignatureHelpTriggerKind2) {
      SignatureHelpTriggerKind2.Invoked = 1;
      SignatureHelpTriggerKind2.TriggerCharacter = 2;
      SignatureHelpTriggerKind2.ContentChange = 3;
    })(SignatureHelpTriggerKind = exports2.SignatureHelpTriggerKind || (exports2.SignatureHelpTriggerKind = {}));
    var SignatureHelpRequest;
    (function(SignatureHelpRequest2) {
      SignatureHelpRequest2.method = "textDocument/signatureHelp";
      SignatureHelpRequest2.type = new messages_1.ProtocolRequestType(SignatureHelpRequest2.method);
    })(SignatureHelpRequest = exports2.SignatureHelpRequest || (exports2.SignatureHelpRequest = {}));
    var DefinitionRequest;
    (function(DefinitionRequest2) {
      DefinitionRequest2.method = "textDocument/definition";
      DefinitionRequest2.type = new messages_1.ProtocolRequestType(DefinitionRequest2.method);
    })(DefinitionRequest = exports2.DefinitionRequest || (exports2.DefinitionRequest = {}));
    var ReferencesRequest;
    (function(ReferencesRequest2) {
      ReferencesRequest2.method = "textDocument/references";
      ReferencesRequest2.type = new messages_1.ProtocolRequestType(ReferencesRequest2.method);
    })(ReferencesRequest = exports2.ReferencesRequest || (exports2.ReferencesRequest = {}));
    var DocumentHighlightRequest;
    (function(DocumentHighlightRequest2) {
      DocumentHighlightRequest2.method = "textDocument/documentHighlight";
      DocumentHighlightRequest2.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest2.method);
    })(DocumentHighlightRequest = exports2.DocumentHighlightRequest || (exports2.DocumentHighlightRequest = {}));
    var DocumentSymbolRequest;
    (function(DocumentSymbolRequest2) {
      DocumentSymbolRequest2.method = "textDocument/documentSymbol";
      DocumentSymbolRequest2.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest2.method);
    })(DocumentSymbolRequest = exports2.DocumentSymbolRequest || (exports2.DocumentSymbolRequest = {}));
    var CodeActionRequest;
    (function(CodeActionRequest2) {
      CodeActionRequest2.method = "textDocument/codeAction";
      CodeActionRequest2.type = new messages_1.ProtocolRequestType(CodeActionRequest2.method);
    })(CodeActionRequest = exports2.CodeActionRequest || (exports2.CodeActionRequest = {}));
    var CodeActionResolveRequest;
    (function(CodeActionResolveRequest2) {
      CodeActionResolveRequest2.method = "codeAction/resolve";
      CodeActionResolveRequest2.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest2.method);
    })(CodeActionResolveRequest = exports2.CodeActionResolveRequest || (exports2.CodeActionResolveRequest = {}));
    var WorkspaceSymbolRequest;
    (function(WorkspaceSymbolRequest2) {
      WorkspaceSymbolRequest2.method = "workspace/symbol";
      WorkspaceSymbolRequest2.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest2.method);
    })(WorkspaceSymbolRequest = exports2.WorkspaceSymbolRequest || (exports2.WorkspaceSymbolRequest = {}));
    var WorkspaceSymbolResolveRequest;
    (function(WorkspaceSymbolResolveRequest2) {
      WorkspaceSymbolResolveRequest2.method = "workspaceSymbol/resolve";
      WorkspaceSymbolResolveRequest2.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest2.method);
    })(WorkspaceSymbolResolveRequest = exports2.WorkspaceSymbolResolveRequest || (exports2.WorkspaceSymbolResolveRequest = {}));
    var CodeLensRequest;
    (function(CodeLensRequest2) {
      CodeLensRequest2.method = "textDocument/codeLens";
      CodeLensRequest2.type = new messages_1.ProtocolRequestType(CodeLensRequest2.method);
    })(CodeLensRequest = exports2.CodeLensRequest || (exports2.CodeLensRequest = {}));
    var CodeLensResolveRequest;
    (function(CodeLensResolveRequest2) {
      CodeLensResolveRequest2.method = "codeLens/resolve";
      CodeLensResolveRequest2.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest2.method);
    })(CodeLensResolveRequest = exports2.CodeLensResolveRequest || (exports2.CodeLensResolveRequest = {}));
    var CodeLensRefreshRequest;
    (function(CodeLensRefreshRequest2) {
      CodeLensRefreshRequest2.method = `workspace/codeLens/refresh`;
      CodeLensRefreshRequest2.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest2.method);
    })(CodeLensRefreshRequest = exports2.CodeLensRefreshRequest || (exports2.CodeLensRefreshRequest = {}));
    var DocumentLinkRequest;
    (function(DocumentLinkRequest2) {
      DocumentLinkRequest2.method = "textDocument/documentLink";
      DocumentLinkRequest2.type = new messages_1.ProtocolRequestType(DocumentLinkRequest2.method);
    })(DocumentLinkRequest = exports2.DocumentLinkRequest || (exports2.DocumentLinkRequest = {}));
    var DocumentLinkResolveRequest;
    (function(DocumentLinkResolveRequest2) {
      DocumentLinkResolveRequest2.method = "documentLink/resolve";
      DocumentLinkResolveRequest2.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest2.method);
    })(DocumentLinkResolveRequest = exports2.DocumentLinkResolveRequest || (exports2.DocumentLinkResolveRequest = {}));
    var DocumentFormattingRequest;
    (function(DocumentFormattingRequest2) {
      DocumentFormattingRequest2.method = "textDocument/formatting";
      DocumentFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest2.method);
    })(DocumentFormattingRequest = exports2.DocumentFormattingRequest || (exports2.DocumentFormattingRequest = {}));
    var DocumentRangeFormattingRequest;
    (function(DocumentRangeFormattingRequest2) {
      DocumentRangeFormattingRequest2.method = "textDocument/rangeFormatting";
      DocumentRangeFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest2.method);
    })(DocumentRangeFormattingRequest = exports2.DocumentRangeFormattingRequest || (exports2.DocumentRangeFormattingRequest = {}));
    var DocumentOnTypeFormattingRequest;
    (function(DocumentOnTypeFormattingRequest2) {
      DocumentOnTypeFormattingRequest2.method = "textDocument/onTypeFormatting";
      DocumentOnTypeFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest2.method);
    })(DocumentOnTypeFormattingRequest = exports2.DocumentOnTypeFormattingRequest || (exports2.DocumentOnTypeFormattingRequest = {}));
    var PrepareSupportDefaultBehavior;
    (function(PrepareSupportDefaultBehavior2) {
      PrepareSupportDefaultBehavior2.Identifier = 1;
    })(PrepareSupportDefaultBehavior = exports2.PrepareSupportDefaultBehavior || (exports2.PrepareSupportDefaultBehavior = {}));
    var RenameRequest;
    (function(RenameRequest2) {
      RenameRequest2.method = "textDocument/rename";
      RenameRequest2.type = new messages_1.ProtocolRequestType(RenameRequest2.method);
    })(RenameRequest = exports2.RenameRequest || (exports2.RenameRequest = {}));
    var PrepareRenameRequest;
    (function(PrepareRenameRequest2) {
      PrepareRenameRequest2.method = "textDocument/prepareRename";
      PrepareRenameRequest2.type = new messages_1.ProtocolRequestType(PrepareRenameRequest2.method);
    })(PrepareRenameRequest = exports2.PrepareRenameRequest || (exports2.PrepareRenameRequest = {}));
    var ExecuteCommandRequest;
    (function(ExecuteCommandRequest2) {
      ExecuteCommandRequest2.type = new messages_1.ProtocolRequestType("workspace/executeCommand");
    })(ExecuteCommandRequest = exports2.ExecuteCommandRequest || (exports2.ExecuteCommandRequest = {}));
    var ApplyWorkspaceEditRequest;
    (function(ApplyWorkspaceEditRequest2) {
      ApplyWorkspaceEditRequest2.type = new messages_1.ProtocolRequestType("workspace/applyEdit");
    })(ApplyWorkspaceEditRequest = exports2.ApplyWorkspaceEditRequest || (exports2.ApplyWorkspaceEditRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/connection.js
var require_connection2 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/connection.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createProtocolConnection = void 0;
    var vscode_jsonrpc_1 = require_main();
    function createProtocolConnection(input2, output, logger, options) {
      if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
      }
      return (0, vscode_jsonrpc_1.createMessageConnection)(input2, output, logger, options);
    }
    exports2.createProtocolConnection = createProtocolConnection;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/proposed.diagnostic.js
var require_proposed_diagnostic = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/proposed.diagnostic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DiagnosticRefreshRequest = exports2.WorkspaceDiagnosticRequest = exports2.DocumentDiagnosticRequest = exports2.DocumentDiagnosticReportKind = exports2.DiagnosticServerCancellationData = void 0;
    var vscode_jsonrpc_1 = require_main();
    var Is2 = require_is2();
    var messages_1 = require_messages2();
    var DiagnosticServerCancellationData;
    (function(DiagnosticServerCancellationData2) {
      function is(value) {
        const candidate = value;
        return candidate && Is2.boolean(candidate.retriggerRequest);
      }
      DiagnosticServerCancellationData2.is = is;
    })(DiagnosticServerCancellationData = exports2.DiagnosticServerCancellationData || (exports2.DiagnosticServerCancellationData = {}));
    var DocumentDiagnosticReportKind;
    (function(DocumentDiagnosticReportKind2) {
      DocumentDiagnosticReportKind2["full"] = "full";
      DocumentDiagnosticReportKind2["unChanged"] = "unChanged";
    })(DocumentDiagnosticReportKind = exports2.DocumentDiagnosticReportKind || (exports2.DocumentDiagnosticReportKind = {}));
    var DocumentDiagnosticRequest;
    (function(DocumentDiagnosticRequest2) {
      DocumentDiagnosticRequest2.method = "textDocument/diagnostic";
      DocumentDiagnosticRequest2.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest2.method);
      DocumentDiagnosticRequest2.partialResult = new vscode_jsonrpc_1.ProgressType();
    })(DocumentDiagnosticRequest = exports2.DocumentDiagnosticRequest || (exports2.DocumentDiagnosticRequest = {}));
    var WorkspaceDiagnosticRequest;
    (function(WorkspaceDiagnosticRequest2) {
      WorkspaceDiagnosticRequest2.method = "workspace/diagnostic";
      WorkspaceDiagnosticRequest2.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest2.method);
      WorkspaceDiagnosticRequest2.partialResult = new vscode_jsonrpc_1.ProgressType();
    })(WorkspaceDiagnosticRequest = exports2.WorkspaceDiagnosticRequest || (exports2.WorkspaceDiagnosticRequest = {}));
    var DiagnosticRefreshRequest;
    (function(DiagnosticRefreshRequest2) {
      DiagnosticRefreshRequest2.method = `workspace/diagnostic/refresh`;
      DiagnosticRefreshRequest2.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest2.method);
    })(DiagnosticRefreshRequest = exports2.DiagnosticRefreshRequest || (exports2.DiagnosticRefreshRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/proposed.notebook.js
var require_proposed_notebook = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/proposed.notebook.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DidCloseNotebookDocumentNotification = exports2.DidSaveNotebookDocumentNotification = exports2.DidChangeNotebookDocumentNotification = exports2.NotebookCellArrayChange = exports2.DidOpenNotebookDocumentNotification = exports2.NotebookDocumentSyncRegistrationType = exports2.NotebookDocument = exports2.NotebookCell = exports2.ExecutionSummary = exports2.NotebookCellKind = void 0;
    var vscode_languageserver_types_1 = (init_main2(), __toCommonJS(main_exports2));
    var Is2 = require_is2();
    var messages_1 = require_messages2();
    var NotebookCellKind;
    (function(NotebookCellKind2) {
      NotebookCellKind2.Markup = 1;
      NotebookCellKind2.Code = 2;
      function is(value) {
        return value === 1 || value === 2;
      }
      NotebookCellKind2.is = is;
    })(NotebookCellKind = exports2.NotebookCellKind || (exports2.NotebookCellKind = {}));
    var ExecutionSummary;
    (function(ExecutionSummary2) {
      function create(executionOrder, success) {
        const result2 = { executionOrder };
        if (success === true || success === false) {
          result2.success = success;
        }
        return result2;
      }
      ExecutionSummary2.create = create;
      function is(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === void 0 || Is2.boolean(candidate.success));
      }
      ExecutionSummary2.is = is;
      function equals2(one, other) {
        if (one === other) {
          return true;
        }
        if (one === null || one === void 0 || other === null || other === void 0) {
          return false;
        }
        return one.executionOrder === other.executionOrder && one.success === other.success;
      }
      ExecutionSummary2.equals = equals2;
    })(ExecutionSummary = exports2.ExecutionSummary || (exports2.ExecutionSummary = {}));
    var NotebookCell;
    (function(NotebookCell2) {
      function create(kind, document2) {
        return { kind, document: document2 };
      }
      NotebookCell2.create = create;
      function is(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) && (candidate.metadata === void 0 || Is2.objectLiteral(candidate.metadata));
      }
      NotebookCell2.is = is;
      function diff(one, two) {
        const result2 = /* @__PURE__ */ new Set();
        if (one.document !== two.document) {
          result2.add("document");
        }
        if (one.kind !== two.kind) {
          result2.add("kind");
        }
        if (one.executionSummary !== two.executionSummary) {
          result2.add("executionSummary");
        }
        if ((one.metadata !== void 0 || two.metadata !== void 0) && !equalsMetadata(one.metadata, two.metadata)) {
          result2.add("metadata");
        }
        if ((one.executionSummary !== void 0 || two.executionSummary !== void 0) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {
          result2.add("executionSummary");
        }
        return result2;
      }
      NotebookCell2.diff = diff;
      function equalsMetadata(one, other) {
        if (one === other) {
          return true;
        }
        if (one === null || one === void 0 || other === null || other === void 0) {
          return false;
        }
        if (typeof one !== typeof other) {
          return false;
        }
        if (typeof one !== "object") {
          return false;
        }
        const oneArray = Array.isArray(one);
        const otherArray = Array.isArray(other);
        if (oneArray !== otherArray) {
          return false;
        }
        if (oneArray && otherArray) {
          if (one.length !== other.length) {
            return false;
          }
          for (let i = 0; i < one.length; i++) {
            if (!equalsMetadata(one[i], other[i])) {
              return false;
            }
          }
        }
        if (Is2.objectLiteral(one) && Is2.objectLiteral(other)) {
          const oneKeys = Object.keys(one);
          const otherKeys = Object.keys(other);
          if (oneKeys.length !== otherKeys.length) {
            return false;
          }
          oneKeys.sort();
          otherKeys.sort();
          if (!equalsMetadata(oneKeys, otherKeys)) {
            return false;
          }
          for (let i = 0; i < oneKeys.length; i++) {
            const prop = oneKeys[i];
            if (!equalsMetadata(one[prop], other[prop])) {
              return false;
            }
          }
        }
        return true;
      }
    })(NotebookCell = exports2.NotebookCell || (exports2.NotebookCell = {}));
    var NotebookDocument;
    (function(NotebookDocument2) {
      function create(uri, notebookType, version2, cells) {
        return { uri, notebookType, version: version2, cells };
      }
      NotebookDocument2.create = create;
      function is(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && Is2.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is2.typedArray(candidate.cells, NotebookCell.is);
      }
      NotebookDocument2.is = is;
    })(NotebookDocument = exports2.NotebookDocument || (exports2.NotebookDocument = {}));
    var NotebookDocumentSyncRegistrationType;
    (function(NotebookDocumentSyncRegistrationType2) {
      NotebookDocumentSyncRegistrationType2.method = "notebookDocument/sync";
      NotebookDocumentSyncRegistrationType2.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType2.method);
    })(NotebookDocumentSyncRegistrationType = exports2.NotebookDocumentSyncRegistrationType || (exports2.NotebookDocumentSyncRegistrationType = {}));
    var DidOpenNotebookDocumentNotification;
    (function(DidOpenNotebookDocumentNotification2) {
      DidOpenNotebookDocumentNotification2.method = "notebookDocument/didOpen";
      DidOpenNotebookDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification2.method);
    })(DidOpenNotebookDocumentNotification = exports2.DidOpenNotebookDocumentNotification || (exports2.DidOpenNotebookDocumentNotification = {}));
    var NotebookCellArrayChange;
    (function(NotebookCellArrayChange2) {
      function is(value) {
        const candidate = value;
        return Is2.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === void 0 || Is2.typedArray(candidate.cells, NotebookCell.is));
      }
      NotebookCellArrayChange2.is = is;
      function create(start, deleteCount, cells) {
        const result2 = { start, deleteCount };
        if (cells !== void 0) {
          result2.cells = cells;
        }
        return result2;
      }
      NotebookCellArrayChange2.create = create;
    })(NotebookCellArrayChange = exports2.NotebookCellArrayChange || (exports2.NotebookCellArrayChange = {}));
    var DidChangeNotebookDocumentNotification;
    (function(DidChangeNotebookDocumentNotification2) {
      DidChangeNotebookDocumentNotification2.method = "notebookDocument/didChange";
      DidChangeNotebookDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification2.method);
    })(DidChangeNotebookDocumentNotification = exports2.DidChangeNotebookDocumentNotification || (exports2.DidChangeNotebookDocumentNotification = {}));
    var DidSaveNotebookDocumentNotification;
    (function(DidSaveNotebookDocumentNotification2) {
      DidSaveNotebookDocumentNotification2.method = "notebookDocument/didSave";
      DidSaveNotebookDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification2.method);
    })(DidSaveNotebookDocumentNotification = exports2.DidSaveNotebookDocumentNotification || (exports2.DidSaveNotebookDocumentNotification = {}));
    var DidCloseNotebookDocumentNotification;
    (function(DidCloseNotebookDocumentNotification2) {
      DidCloseNotebookDocumentNotification2.method = "notebookDocument/didClose";
      DidCloseNotebookDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification2.method);
    })(DidCloseNotebookDocumentNotification = exports2.DidCloseNotebookDocumentNotification || (exports2.DidCloseNotebookDocumentNotification = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/api.js
var require_api2 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/common/api.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Proposed = exports2.LSPErrorCodes = exports2.createProtocolConnection = void 0;
    __exportStar(require_main(), exports2);
    __exportStar((init_main2(), __toCommonJS(main_exports2)), exports2);
    __exportStar(require_messages2(), exports2);
    __exportStar(require_protocol(), exports2);
    var connection_1 = require_connection2();
    Object.defineProperty(exports2, "createProtocolConnection", { enumerable: true, get: function() {
      return connection_1.createProtocolConnection;
    } });
    var LSPErrorCodes;
    (function(LSPErrorCodes2) {
      LSPErrorCodes2.lspReservedErrorRangeStart = -32899;
      LSPErrorCodes2.RequestFailed = -32803;
      LSPErrorCodes2.ServerCancelled = -32802;
      LSPErrorCodes2.ContentModified = -32801;
      LSPErrorCodes2.RequestCancelled = -32800;
      LSPErrorCodes2.lspReservedErrorRangeEnd = -32800;
    })(LSPErrorCodes = exports2.LSPErrorCodes || (exports2.LSPErrorCodes = {}));
    var diag = require_proposed_diagnostic();
    var nb = require_proposed_notebook();
    var Proposed;
    (function(Proposed2) {
      Proposed2.DiagnosticServerCancellationData = diag.DiagnosticServerCancellationData;
      Proposed2.DocumentDiagnosticReportKind = diag.DocumentDiagnosticReportKind;
      Proposed2.DocumentDiagnosticRequest = diag.DocumentDiagnosticRequest;
      Proposed2.WorkspaceDiagnosticRequest = diag.WorkspaceDiagnosticRequest;
      Proposed2.DiagnosticRefreshRequest = diag.DiagnosticRefreshRequest;
      Proposed2.NotebookCellKind = nb.NotebookCellKind;
      Proposed2.NotebookCell = nb.NotebookCell;
      Proposed2.NotebookDocument = nb.NotebookDocument;
      Proposed2.NotebookDocumentSyncRegistrationType = nb.NotebookDocumentSyncRegistrationType;
      Proposed2.DidOpenNotebookDocumentNotification = nb.DidOpenNotebookDocumentNotification;
      Proposed2.DidChangeNotebookDocumentNotification = nb.DidChangeNotebookDocumentNotification;
      Proposed2.DidSaveNotebookDocumentNotification = nb.DidSaveNotebookDocumentNotification;
      Proposed2.DidCloseNotebookDocumentNotification = nb.DidCloseNotebookDocumentNotification;
    })(Proposed = exports2.Proposed || (exports2.Proposed = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/node/main.js
var require_main2 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.0-next.16/node_modules/vscode-languageserver-protocol/lib/node/main.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createProtocolConnection = void 0;
    var node_12 = require_node();
    __exportStar(require_node(), exports2);
    __exportStar(require_api2(), exports2);
    function createProtocolConnection(input2, output, logger, options) {
      return (0, node_12.createMessageConnection)(input2, output, logger, options);
    }
    exports2.createProtocolConnection = createProtocolConnection;
  }
});

// ../../packages/shared/out/requests.js
var require_requests = __commonJS({
  "../../packages/shared/out/requests.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DetectDocumentNameCasesRequest = exports2.WriteVirtualFilesNotification = exports2.VerifyAllScriptsNotification = exports2.AutoInsertRequest = exports2.D3Request = exports2.GetMatchTsConfigRequest = exports2.InitDoneRequest = exports2.GetEditorSelectionRequest = exports2.GetDocumentPrintWidthRequest = exports2.GetDocumentNameCasesRequest = exports2.ShowReferencesNotification = exports2.GetDocumentVersionRequest = exports2.GetDocumentContentRequest = void 0;
    var vscode = require_main2();
    var GetDocumentContentRequest;
    (function(GetDocumentContentRequest2) {
      GetDocumentContentRequest2.type = new vscode.RequestType("vscode/content");
    })(GetDocumentContentRequest = exports2.GetDocumentContentRequest || (exports2.GetDocumentContentRequest = {}));
    var GetDocumentVersionRequest;
    (function(GetDocumentVersionRequest2) {
      GetDocumentVersionRequest2.type = new vscode.RequestType("vue/docVersion");
    })(GetDocumentVersionRequest = exports2.GetDocumentVersionRequest || (exports2.GetDocumentVersionRequest = {}));
    var ShowReferencesNotification;
    (function(ShowReferencesNotification2) {
      ShowReferencesNotification2.type = new vscode.NotificationType("vue.findReferences");
    })(ShowReferencesNotification = exports2.ShowReferencesNotification || (exports2.ShowReferencesNotification = {}));
    var GetDocumentNameCasesRequest;
    (function(GetDocumentNameCasesRequest2) {
      GetDocumentNameCasesRequest2.type = new vscode.RequestType("volar/getAttrNameCaseClient");
    })(GetDocumentNameCasesRequest = exports2.GetDocumentNameCasesRequest || (exports2.GetDocumentNameCasesRequest = {}));
    var GetDocumentPrintWidthRequest;
    (function(GetDocumentPrintWidthRequest2) {
      GetDocumentPrintWidthRequest2.type = new vscode.RequestType("vue/getDocumentWordWrapColumn");
    })(GetDocumentPrintWidthRequest = exports2.GetDocumentPrintWidthRequest || (exports2.GetDocumentPrintWidthRequest = {}));
    var GetEditorSelectionRequest;
    (function(GetEditorSelectionRequest2) {
      GetEditorSelectionRequest2.type = new vscode.RequestType0("vue/activeSelection");
    })(GetEditorSelectionRequest = exports2.GetEditorSelectionRequest || (exports2.GetEditorSelectionRequest = {}));
    var InitDoneRequest;
    (function(InitDoneRequest2) {
      InitDoneRequest2.type = new vscode.RequestType0("volar/init");
    })(InitDoneRequest = exports2.InitDoneRequest || (exports2.InitDoneRequest = {}));
    var GetMatchTsConfigRequest;
    (function(GetMatchTsConfigRequest2) {
      GetMatchTsConfigRequest2.type = new vscode.RequestType("volar/tsconfig");
    })(GetMatchTsConfigRequest = exports2.GetMatchTsConfigRequest || (exports2.GetMatchTsConfigRequest = {}));
    var D3Request;
    (function(D3Request2) {
      D3Request2.type = new vscode.RequestType("volar/d3");
    })(D3Request = exports2.D3Request || (exports2.D3Request = {}));
    var AutoInsertRequest;
    (function(AutoInsertRequest2) {
      AutoInsertRequest2.type = new vscode.RequestType("vue/autoInsert");
    })(AutoInsertRequest = exports2.AutoInsertRequest || (exports2.AutoInsertRequest = {}));
    var VerifyAllScriptsNotification;
    (function(VerifyAllScriptsNotification2) {
      VerifyAllScriptsNotification2.type = new vscode.NotificationType0("volar.action.verifyAllScripts");
    })(VerifyAllScriptsNotification = exports2.VerifyAllScriptsNotification || (exports2.VerifyAllScriptsNotification = {}));
    var WriteVirtualFilesNotification;
    (function(WriteVirtualFilesNotification2) {
      WriteVirtualFilesNotification2.type = new vscode.NotificationType0("volar.action.writeVirtualFiles");
    })(WriteVirtualFilesNotification = exports2.WriteVirtualFilesNotification || (exports2.WriteVirtualFilesNotification = {}));
    var DetectDocumentNameCasesRequest;
    (function(DetectDocumentNameCasesRequest2) {
      DetectDocumentNameCasesRequest2.type = new vscode.RequestType("volar/getTagNameCaseServer");
    })(DetectDocumentNameCasesRequest = exports2.DetectDocumentNameCasesRequest || (exports2.DetectDocumentNameCasesRequest = {}));
  }
});

// ../../packages/shared/out/types.js
var require_types3 = __commonJS({
  "../../packages/shared/out/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../packages/shared/out/uriMap.js
var require_uriMap = __commonJS({
  "../../packages/shared/out/uriMap.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createPathMap = void 0;
    var vscode_uri_1 = (init_esm(), __toCommonJS(esm_exports));
    var path_1 = require_path();
    function createPathMap(map2 = /* @__PURE__ */ new Map()) {
      const uriToUriKeys = {};
      const fsPathToUriKeys = {};
      return {
        clear,
        values,
        uriDelete,
        uriGet,
        uriHas,
        uriSet,
        fsPathDelete,
        fsPathGet,
        fsPathHas,
        fsPathSet
      };
      function getUriByUri(uri) {
        if (uriToUriKeys[uri] === void 0)
          uriToUriKeys[uri] = normalizeUri(uri).toLowerCase();
        return uriToUriKeys[uri];
      }
      function getUriByFsPath(fsPath) {
        if (fsPathToUriKeys[fsPath] === void 0)
          fsPathToUriKeys[fsPath] = (0, path_1.fsPathToUri)(fsPath).toLowerCase();
        return fsPathToUriKeys[fsPath];
      }
      function clear() {
        return map2.clear();
      }
      function values() {
        return map2.values();
      }
      function uriDelete(_uri) {
        return map2.delete(getUriByUri(_uri));
      }
      function uriGet(_uri) {
        return map2.get(getUriByUri(_uri));
      }
      function uriHas(_uri) {
        return map2.has(getUriByUri(_uri));
      }
      function uriSet(_uri, item) {
        return map2.set(getUriByUri(_uri), item);
      }
      function fsPathDelete(_fsPath) {
        return map2.delete(getUriByFsPath(_fsPath));
      }
      function fsPathGet(_fsPath) {
        return map2.get(getUriByFsPath(_fsPath));
      }
      function fsPathHas(_fsPath) {
        return map2.has(getUriByFsPath(_fsPath));
      }
      function fsPathSet(_fsPath, item) {
        return map2.set(getUriByFsPath(_fsPath), item);
      }
    }
    exports2.createPathMap = createPathMap;
    function normalizeUri(uri) {
      try {
        return vscode_uri_1.URI.parse(uri).toString();
      } catch (_a) {
        return "";
      }
    }
  }
});

// ../../packages/shared/out/browser.js
var require_browser = __commonJS({
  "../../packages/shared/out/browser.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_common(), exports2);
    __exportStar(require_ts(), exports2);
    __exportStar(require_path(), exports2);
    __exportStar(require_requests(), exports2);
    __exportStar(require_types3(), exports2);
    __exportStar(require_uriMap(), exports2);
    __exportStar(require_browser(), exports2);
  }
});

// ../../packages/shared/out/ts_node.js
var require_ts_node = __commonJS({
  "../../packages/shared/out/ts_node.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTypeScriptVersion = exports2.getVscodeTypescriptLocalizedPath = exports2.getVscodeTypescriptPath = exports2.findTypescriptLocalizedPathInLib = exports2.findTypescriptModulePathInLib = exports2.getWorkspaceTypescriptLocalizedPath = exports2.getWorkspaceTypescriptPath = void 0;
    var fs = require("fs");
    var path3 = require_upath();
    function getWorkspaceTypescriptPath(tsdk, workspaceFolderFsPaths) {
      if (path3.isAbsolute(tsdk)) {
        const tsPath = findTypescriptModulePathInLib(tsdk);
        if (tsPath) {
          return tsPath;
        }
      } else {
        for (const folder of workspaceFolderFsPaths) {
          const tsPath = findTypescriptModulePathInLib(path3.join(folder, tsdk));
          if (tsPath) {
            return tsPath;
          }
        }
      }
    }
    exports2.getWorkspaceTypescriptPath = getWorkspaceTypescriptPath;
    function getWorkspaceTypescriptLocalizedPath(tsdk, lang, workspaceFolderFsPaths) {
      if (path3.isAbsolute(tsdk)) {
        const tsPath = findTypescriptLocalizedPathInLib(tsdk, lang);
        if (tsPath) {
          return tsPath;
        }
      } else {
        for (const folder of workspaceFolderFsPaths) {
          const tsPath = findTypescriptLocalizedPathInLib(path3.join(folder, tsdk), lang);
          if (tsPath) {
            return tsPath;
          }
        }
      }
    }
    exports2.getWorkspaceTypescriptLocalizedPath = getWorkspaceTypescriptLocalizedPath;
    function findTypescriptModulePathInLib(lib) {
      const tsserverlibrary = path3.join(lib, "tsserverlibrary.js");
      const typescript2 = path3.join(lib, "typescript.js");
      const tsserver = path3.join(lib, "tsserver.js");
      if (fs.existsSync(tsserverlibrary)) {
        return tsserverlibrary;
      }
      if (fs.existsSync(typescript2)) {
        return typescript2;
      }
      if (fs.existsSync(tsserver)) {
        return tsserver;
      }
    }
    exports2.findTypescriptModulePathInLib = findTypescriptModulePathInLib;
    function findTypescriptLocalizedPathInLib(lib, lang) {
      const localized = path3.join(lib, lang, "diagnosticMessages.generated.json");
      if (fs.existsSync(localized)) {
        return localized;
      }
    }
    exports2.findTypescriptLocalizedPathInLib = findTypescriptLocalizedPathInLib;
    function getVscodeTypescriptPath(appRoot) {
      return path3.join(appRoot, "extensions", "node_modules", "typescript", "lib", "typescript.js");
    }
    exports2.getVscodeTypescriptPath = getVscodeTypescriptPath;
    function getVscodeTypescriptLocalizedPath(appRoot, lang) {
      const tsPath = path3.join(appRoot, "extensions", "node_modules", "typescript", "lib", lang, "diagnosticMessages.generated.json");
      if (fs.existsSync(tsPath)) {
        return tsPath;
      }
    }
    exports2.getVscodeTypescriptLocalizedPath = getVscodeTypescriptLocalizedPath;
    function getTypeScriptVersion(serverPath) {
      if (!fs.existsSync(serverPath)) {
        return void 0;
      }
      const p = serverPath.split(path3.sep);
      if (p.length <= 2) {
        return void 0;
      }
      const p2 = p.slice(0, -2);
      const modulePath = p2.join(path3.sep);
      let fileName = path3.join(modulePath, "package.json");
      if (!fs.existsSync(fileName)) {
        if (path3.basename(modulePath) === "built") {
          fileName = path3.join(modulePath, "..", "package.json");
        }
      }
      if (!fs.existsSync(fileName)) {
        return void 0;
      }
      const contents = fs.readFileSync(fileName).toString();
      let desc = null;
      try {
        desc = JSON.parse(contents);
      } catch (err) {
        return void 0;
      }
      if (!desc || !desc.version) {
        return void 0;
      }
      return desc.version;
    }
    exports2.getTypeScriptVersion = getTypeScriptVersion;
  }
});

// ../../packages/shared/out/http.js
var require_http = __commonJS({
  "../../packages/shared/out/http.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P || (P = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result2) {
          result2.done ? resolve2(result2.value) : adopt(result2.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLocalHostAvaliablePort = exports2.isLocalHostPortUsing = void 0;
    var http = require("http");
    function isLocalHostPortUsing(port) {
      return new Promise((resolve2) => {
        http.get(`http://localhost:${port}/`, {
          headers: {
            accept: "*/*"
          }
        }, (res) => {
          resolve2(res.statusCode === 200);
        }).on("error", () => resolve2(false)).end();
      });
    }
    exports2.isLocalHostPortUsing = isLocalHostPortUsing;
    function getLocalHostAvaliablePort(port) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (yield isLocalHostPortUsing(port)) {
          port++;
        }
        return port;
      });
    }
    exports2.getLocalHostAvaliablePort = getLocalHostAvaliablePort;
  }
});

// ../../packages/shared/out/node.js
var require_node2 = __commonJS({
  "../../packages/shared/out/node.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_browser(), exports2);
    __exportStar(require_ts_node(), exports2);
    __exportStar(require_http(), exports2);
  }
});

// ../../node_modules/.pnpm/acorn@7.4.1/node_modules/acorn/dist/acorn.js
var require_acorn = __commonJS({
  "../../node_modules/.pnpm/acorn@7.4.1/node_modules/acorn/dist/acorn.js"(exports2, module2) {
    (function(global3, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? factory(exports2) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global3 = global3 || self, factory(global3.acorn = {}));
    })(exports2, function(exports3) {
      "use strict";
      var reservedWords2 = {
        3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
        5: "class enum extends super const export import",
        6: "enum",
        strict: "implements interface let package private protected public static yield",
        strictBind: "eval arguments"
      };
      var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
      var keywords2 = {
        5: ecma5AndLessKeywords,
        "5module": ecma5AndLessKeywords + " export import",
        6: ecma5AndLessKeywords + " const class extends export import super"
      };
      var keywordRelationalOperator2 = /^in(stanceof)?$/;
      var nonASCIIidentifierStartChars2 = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
      var nonASCIIidentifierChars2 = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
      var nonASCIIidentifierStart2 = new RegExp("[" + nonASCIIidentifierStartChars2 + "]");
      var nonASCIIidentifier2 = new RegExp("[" + nonASCIIidentifierStartChars2 + nonASCIIidentifierChars2 + "]");
      nonASCIIidentifierStartChars2 = nonASCIIidentifierChars2 = null;
      var astralIdentifierStartCodes2 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
      var astralIdentifierCodes2 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
      function isInAstralSet2(code, set) {
        var pos = 65536;
        for (var i = 0; i < set.length; i += 2) {
          pos += set[i];
          if (pos > code) {
            return false;
          }
          pos += set[i + 1];
          if (pos >= code) {
            return true;
          }
        }
      }
      function isIdentifierStart2(code, astral) {
        if (code < 65) {
          return code === 36;
        }
        if (code < 91) {
          return true;
        }
        if (code < 97) {
          return code === 95;
        }
        if (code < 123) {
          return true;
        }
        if (code <= 65535) {
          return code >= 170 && nonASCIIidentifierStart2.test(String.fromCharCode(code));
        }
        if (astral === false) {
          return false;
        }
        return isInAstralSet2(code, astralIdentifierStartCodes2);
      }
      function isIdentifierChar2(code, astral) {
        if (code < 48) {
          return code === 36;
        }
        if (code < 58) {
          return true;
        }
        if (code < 65) {
          return false;
        }
        if (code < 91) {
          return true;
        }
        if (code < 97) {
          return code === 95;
        }
        if (code < 123) {
          return true;
        }
        if (code <= 65535) {
          return code >= 170 && nonASCIIidentifier2.test(String.fromCharCode(code));
        }
        if (astral === false) {
          return false;
        }
        return isInAstralSet2(code, astralIdentifierStartCodes2) || isInAstralSet2(code, astralIdentifierCodes2);
      }
      var TokenType = function TokenType2(label, conf) {
        if (conf === void 0)
          conf = {};
        this.label = label;
        this.keyword = conf.keyword;
        this.beforeExpr = !!conf.beforeExpr;
        this.startsExpr = !!conf.startsExpr;
        this.isLoop = !!conf.isLoop;
        this.isAssign = !!conf.isAssign;
        this.prefix = !!conf.prefix;
        this.postfix = !!conf.postfix;
        this.binop = conf.binop || null;
        this.updateContext = null;
      };
      function binop(name, prec) {
        return new TokenType(name, { beforeExpr: true, binop: prec });
      }
      var beforeExpr2 = { beforeExpr: true }, startsExpr2 = { startsExpr: true };
      var keywords$12 = {};
      function kw(name, options) {
        if (options === void 0)
          options = {};
        options.keyword = name;
        return keywords$12[name] = new TokenType(name, options);
      }
      var types2 = {
        num: new TokenType("num", startsExpr2),
        regexp: new TokenType("regexp", startsExpr2),
        string: new TokenType("string", startsExpr2),
        name: new TokenType("name", startsExpr2),
        eof: new TokenType("eof"),
        bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
        bracketR: new TokenType("]"),
        braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
        braceR: new TokenType("}"),
        parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
        parenR: new TokenType(")"),
        comma: new TokenType(",", beforeExpr2),
        semi: new TokenType(";", beforeExpr2),
        colon: new TokenType(":", beforeExpr2),
        dot: new TokenType("."),
        question: new TokenType("?", beforeExpr2),
        questionDot: new TokenType("?."),
        arrow: new TokenType("=>", beforeExpr2),
        template: new TokenType("template"),
        invalidTemplate: new TokenType("invalidTemplate"),
        ellipsis: new TokenType("...", beforeExpr2),
        backQuote: new TokenType("`", startsExpr2),
        dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
        eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
        assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
        incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
        prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }),
        logicalOR: binop("||", 1),
        logicalAND: binop("&&", 2),
        bitwiseOR: binop("|", 3),
        bitwiseXOR: binop("^", 4),
        bitwiseAND: binop("&", 5),
        equality: binop("==/!=/===/!==", 6),
        relational: binop("</>/<=/>=", 7),
        bitShift: binop("<</>>/>>>", 8),
        plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
        modulo: binop("%", 10),
        star: binop("*", 10),
        slash: binop("/", 10),
        starstar: new TokenType("**", { beforeExpr: true }),
        coalesce: binop("??", 1),
        _break: kw("break"),
        _case: kw("case", beforeExpr2),
        _catch: kw("catch"),
        _continue: kw("continue"),
        _debugger: kw("debugger"),
        _default: kw("default", beforeExpr2),
        _do: kw("do", { isLoop: true, beforeExpr: true }),
        _else: kw("else", beforeExpr2),
        _finally: kw("finally"),
        _for: kw("for", { isLoop: true }),
        _function: kw("function", startsExpr2),
        _if: kw("if"),
        _return: kw("return", beforeExpr2),
        _switch: kw("switch"),
        _throw: kw("throw", beforeExpr2),
        _try: kw("try"),
        _var: kw("var"),
        _const: kw("const"),
        _while: kw("while", { isLoop: true }),
        _with: kw("with"),
        _new: kw("new", { beforeExpr: true, startsExpr: true }),
        _this: kw("this", startsExpr2),
        _super: kw("super", startsExpr2),
        _class: kw("class", startsExpr2),
        _extends: kw("extends", beforeExpr2),
        _export: kw("export"),
        _import: kw("import", startsExpr2),
        _null: kw("null", startsExpr2),
        _true: kw("true", startsExpr2),
        _false: kw("false", startsExpr2),
        _in: kw("in", { beforeExpr: true, binop: 7 }),
        _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }),
        _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
        _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }),
        _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true })
      };
      var lineBreak2 = /\r\n?|\n|\u2028|\u2029/;
      var lineBreakG2 = new RegExp(lineBreak2.source, "g");
      function isNewLine2(code, ecma2019String) {
        return code === 10 || code === 13 || !ecma2019String && (code === 8232 || code === 8233);
      }
      var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
      var skipWhiteSpace2 = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
      var ref = Object.prototype;
      var hasOwnProperty2 = ref.hasOwnProperty;
      var toString6 = ref.toString;
      function has3(obj, propName) {
        return hasOwnProperty2.call(obj, propName);
      }
      var isArray2 = Array.isArray || function(obj) {
        return toString6.call(obj) === "[object Array]";
      };
      function wordsRegexp(words) {
        return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
      }
      var Position3 = function Position4(line, col) {
        this.line = line;
        this.column = col;
      };
      Position3.prototype.offset = function offset(n2) {
        return new Position3(this.line, this.column + n2);
      };
      var SourceLocation2 = function SourceLocation3(p, start, end) {
        this.start = start;
        this.end = end;
        if (p.sourceFile !== null) {
          this.source = p.sourceFile;
        }
      };
      function getLineInfo2(input2, offset) {
        for (var line = 1, cur = 0; ; ) {
          lineBreakG2.lastIndex = cur;
          var match = lineBreakG2.exec(input2);
          if (match && match.index < offset) {
            ++line;
            cur = match.index + match[0].length;
          } else {
            return new Position3(line, offset - cur);
          }
        }
      }
      var defaultOptions2 = {
        ecmaVersion: 10,
        sourceType: "script",
        onInsertedSemicolon: null,
        onTrailingComma: null,
        allowReserved: null,
        allowReturnOutsideFunction: false,
        allowImportExportEverywhere: false,
        allowAwaitOutsideFunction: false,
        allowHashBang: false,
        locations: false,
        onToken: null,
        onComment: null,
        ranges: false,
        program: null,
        sourceFile: null,
        directSourceFile: null,
        preserveParens: false
      };
      function getOptions2(opts) {
        var options = {};
        for (var opt in defaultOptions2) {
          options[opt] = opts && has3(opts, opt) ? opts[opt] : defaultOptions2[opt];
        }
        if (options.ecmaVersion >= 2015) {
          options.ecmaVersion -= 2009;
        }
        if (options.allowReserved == null) {
          options.allowReserved = options.ecmaVersion < 5;
        }
        if (isArray2(options.onToken)) {
          var tokens = options.onToken;
          options.onToken = function(token) {
            return tokens.push(token);
          };
        }
        if (isArray2(options.onComment)) {
          options.onComment = pushComment(options, options.onComment);
        }
        return options;
      }
      function pushComment(options, array) {
        return function(block, text, start, end, startLoc, endLoc) {
          var comment2 = {
            type: block ? "Block" : "Line",
            value: text,
            start,
            end
          };
          if (options.locations) {
            comment2.loc = new SourceLocation2(this, startLoc, endLoc);
          }
          if (options.ranges) {
            comment2.range = [start, end];
          }
          array.push(comment2);
        };
      }
      var SCOPE_TOP = 1, SCOPE_FUNCTION2 = 2, SCOPE_VAR2 = SCOPE_TOP | SCOPE_FUNCTION2, SCOPE_ASYNC = 4, SCOPE_GENERATOR = 8, SCOPE_ARROW2 = 16, SCOPE_SIMPLE_CATCH2 = 32, SCOPE_SUPER2 = 64, SCOPE_DIRECT_SUPER2 = 128;
      function functionFlags2(async, generator) {
        return SCOPE_FUNCTION2 | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
      }
      var BIND_NONE2 = 0, BIND_VAR2 = 1, BIND_LEXICAL2 = 2, BIND_FUNCTION2 = 3, BIND_SIMPLE_CATCH = 4, BIND_OUTSIDE2 = 5;
      var Parser2 = function Parser3(options, input2, startPos) {
        this.options = options = getOptions2(options);
        this.sourceFile = options.sourceFile;
        this.keywords = wordsRegexp(keywords2[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
        var reserved = "";
        if (options.allowReserved !== true) {
          for (var v = options.ecmaVersion; ; v--) {
            if (reserved = reservedWords2[v]) {
              break;
            }
          }
          if (options.sourceType === "module") {
            reserved += " await";
          }
        }
        this.reservedWords = wordsRegexp(reserved);
        var reservedStrict = (reserved ? reserved + " " : "") + reservedWords2.strict;
        this.reservedWordsStrict = wordsRegexp(reservedStrict);
        this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords2.strictBind);
        this.input = String(input2);
        this.containsEsc = false;
        if (startPos) {
          this.pos = startPos;
          this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
          this.curLine = this.input.slice(0, this.lineStart).split(lineBreak2).length;
        } else {
          this.pos = this.lineStart = 0;
          this.curLine = 1;
        }
        this.type = types2.eof;
        this.value = null;
        this.start = this.end = this.pos;
        this.startLoc = this.endLoc = this.curPosition();
        this.lastTokEndLoc = this.lastTokStartLoc = null;
        this.lastTokStart = this.lastTokEnd = this.pos;
        this.context = this.initialContext();
        this.exprAllowed = true;
        this.inModule = options.sourceType === "module";
        this.strict = this.inModule || this.strictDirective(this.pos);
        this.potentialArrowAt = -1;
        this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
        this.labels = [];
        this.undefinedExports = {};
        if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
          this.skipLineComment(2);
        }
        this.scopeStack = [];
        this.enterScope(SCOPE_TOP);
        this.regexpState = null;
      };
      var prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true } };
      Parser2.prototype.parse = function parse3() {
        var node2 = this.options.program || this.startNode();
        this.nextToken();
        return this.parseTopLevel(node2);
      };
      prototypeAccessors.inFunction.get = function() {
        return (this.currentVarScope().flags & SCOPE_FUNCTION2) > 0;
      };
      prototypeAccessors.inGenerator.get = function() {
        return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;
      };
      prototypeAccessors.inAsync.get = function() {
        return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;
      };
      prototypeAccessors.allowSuper.get = function() {
        return (this.currentThisScope().flags & SCOPE_SUPER2) > 0;
      };
      prototypeAccessors.allowDirectSuper.get = function() {
        return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER2) > 0;
      };
      prototypeAccessors.treatFunctionsAsVar.get = function() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
      };
      Parser2.prototype.inNonArrowFunction = function inNonArrowFunction() {
        return (this.currentThisScope().flags & SCOPE_FUNCTION2) > 0;
      };
      Parser2.extend = function extend2() {
        var plugins = [], len = arguments.length;
        while (len--)
          plugins[len] = arguments[len];
        var cls = this;
        for (var i = 0; i < plugins.length; i++) {
          cls = plugins[i](cls);
        }
        return cls;
      };
      Parser2.parse = function parse3(input2, options) {
        return new this(options, input2).parse();
      };
      Parser2.parseExpressionAt = function parseExpressionAt2(input2, pos, options) {
        var parser2 = new this(options, input2, pos);
        parser2.nextToken();
        return parser2.parseExpression();
      };
      Parser2.tokenizer = function tokenizer3(input2, options) {
        return new this(options, input2);
      };
      Object.defineProperties(Parser2.prototype, prototypeAccessors);
      var pp = Parser2.prototype;
      var literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
      pp.strictDirective = function(start) {
        for (; ; ) {
          skipWhiteSpace2.lastIndex = start;
          start += skipWhiteSpace2.exec(this.input)[0].length;
          var match = literal.exec(this.input.slice(start));
          if (!match) {
            return false;
          }
          if ((match[1] || match[2]) === "use strict") {
            skipWhiteSpace2.lastIndex = start + match[0].length;
            var spaceAfter = skipWhiteSpace2.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
            var next = this.input.charAt(end);
            return next === ";" || next === "}" || lineBreak2.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "=");
          }
          start += match[0].length;
          skipWhiteSpace2.lastIndex = start;
          start += skipWhiteSpace2.exec(this.input)[0].length;
          if (this.input[start] === ";") {
            start++;
          }
        }
      };
      pp.eat = function(type) {
        if (this.type === type) {
          this.next();
          return true;
        } else {
          return false;
        }
      };
      pp.isContextual = function(name) {
        return this.type === types2.name && this.value === name && !this.containsEsc;
      };
      pp.eatContextual = function(name) {
        if (!this.isContextual(name)) {
          return false;
        }
        this.next();
        return true;
      };
      pp.expectContextual = function(name) {
        if (!this.eatContextual(name)) {
          this.unexpected();
        }
      };
      pp.canInsertSemicolon = function() {
        return this.type === types2.eof || this.type === types2.braceR || lineBreak2.test(this.input.slice(this.lastTokEnd, this.start));
      };
      pp.insertSemicolon = function() {
        if (this.canInsertSemicolon()) {
          if (this.options.onInsertedSemicolon) {
            this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
          }
          return true;
        }
      };
      pp.semicolon = function() {
        if (!this.eat(types2.semi) && !this.insertSemicolon()) {
          this.unexpected();
        }
      };
      pp.afterTrailingComma = function(tokType, notNext) {
        if (this.type === tokType) {
          if (this.options.onTrailingComma) {
            this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
          }
          if (!notNext) {
            this.next();
          }
          return true;
        }
      };
      pp.expect = function(type) {
        this.eat(type) || this.unexpected();
      };
      pp.unexpected = function(pos) {
        this.raise(pos != null ? pos : this.start, "Unexpected token");
      };
      function DestructuringErrors() {
        this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
      }
      pp.checkPatternErrors = function(refDestructuringErrors, isAssign2) {
        if (!refDestructuringErrors) {
          return;
        }
        if (refDestructuringErrors.trailingComma > -1) {
          this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
        }
        var parens = isAssign2 ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
        if (parens > -1) {
          this.raiseRecoverable(parens, "Parenthesized pattern");
        }
      };
      pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
        if (!refDestructuringErrors) {
          return false;
        }
        var shorthandAssign = refDestructuringErrors.shorthandAssign;
        var doubleProto = refDestructuringErrors.doubleProto;
        if (!andThrow) {
          return shorthandAssign >= 0 || doubleProto >= 0;
        }
        if (shorthandAssign >= 0) {
          this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
        }
        if (doubleProto >= 0) {
          this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
        }
      };
      pp.checkYieldAwaitInDefaultParams = function() {
        if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
          this.raise(this.yieldPos, "Yield expression cannot be a default value");
        }
        if (this.awaitPos) {
          this.raise(this.awaitPos, "Await expression cannot be a default value");
        }
      };
      pp.isSimpleAssignTarget = function(expr) {
        if (expr.type === "ParenthesizedExpression") {
          return this.isSimpleAssignTarget(expr.expression);
        }
        return expr.type === "Identifier" || expr.type === "MemberExpression";
      };
      var pp$1 = Parser2.prototype;
      pp$1.parseTopLevel = function(node2) {
        var exports4 = {};
        if (!node2.body) {
          node2.body = [];
        }
        while (this.type !== types2.eof) {
          var stmt = this.parseStatement(null, true, exports4);
          node2.body.push(stmt);
        }
        if (this.inModule) {
          for (var i = 0, list2 = Object.keys(this.undefinedExports); i < list2.length; i += 1) {
            var name = list2[i];
            this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
          }
        }
        this.adaptDirectivePrologue(node2.body);
        this.next();
        node2.sourceType = this.options.sourceType;
        return this.finishNode(node2, "Program");
      };
      var loopLabel2 = { kind: "loop" }, switchLabel2 = { kind: "switch" };
      pp$1.isLet = function(context) {
        if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
          return false;
        }
        skipWhiteSpace2.lastIndex = this.pos;
        var skip = skipWhiteSpace2.exec(this.input);
        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
        if (nextCh === 91) {
          return true;
        }
        if (context) {
          return false;
        }
        if (nextCh === 123) {
          return true;
        }
        if (isIdentifierStart2(nextCh, true)) {
          var pos = next + 1;
          while (isIdentifierChar2(this.input.charCodeAt(pos), true)) {
            ++pos;
          }
          var ident = this.input.slice(next, pos);
          if (!keywordRelationalOperator2.test(ident)) {
            return true;
          }
        }
        return false;
      };
      pp$1.isAsyncFunction = function() {
        if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
          return false;
        }
        skipWhiteSpace2.lastIndex = this.pos;
        var skip = skipWhiteSpace2.exec(this.input);
        var next = this.pos + skip[0].length;
        return !lineBreak2.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !isIdentifierChar2(this.input.charAt(next + 8)));
      };
      pp$1.parseStatement = function(context, topLevel, exports4) {
        var starttype = this.type, node2 = this.startNode(), kind;
        if (this.isLet(context)) {
          starttype = types2._var;
          kind = "let";
        }
        switch (starttype) {
          case types2._break:
          case types2._continue:
            return this.parseBreakContinueStatement(node2, starttype.keyword);
          case types2._debugger:
            return this.parseDebuggerStatement(node2);
          case types2._do:
            return this.parseDoStatement(node2);
          case types2._for:
            return this.parseForStatement(node2);
          case types2._function:
            if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) {
              this.unexpected();
            }
            return this.parseFunctionStatement(node2, false, !context);
          case types2._class:
            if (context) {
              this.unexpected();
            }
            return this.parseClass(node2, true);
          case types2._if:
            return this.parseIfStatement(node2);
          case types2._return:
            return this.parseReturnStatement(node2);
          case types2._switch:
            return this.parseSwitchStatement(node2);
          case types2._throw:
            return this.parseThrowStatement(node2);
          case types2._try:
            return this.parseTryStatement(node2);
          case types2._const:
          case types2._var:
            kind = kind || this.value;
            if (context && kind !== "var") {
              this.unexpected();
            }
            return this.parseVarStatement(node2, kind);
          case types2._while:
            return this.parseWhileStatement(node2);
          case types2._with:
            return this.parseWithStatement(node2);
          case types2.braceL:
            return this.parseBlock(true, node2);
          case types2.semi:
            return this.parseEmptyStatement(node2);
          case types2._export:
          case types2._import:
            if (this.options.ecmaVersion > 10 && starttype === types2._import) {
              skipWhiteSpace2.lastIndex = this.pos;
              var skip = skipWhiteSpace2.exec(this.input);
              var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
              if (nextCh === 40 || nextCh === 46) {
                return this.parseExpressionStatement(node2, this.parseExpression());
              }
            }
            if (!this.options.allowImportExportEverywhere) {
              if (!topLevel) {
                this.raise(this.start, "'import' and 'export' may only appear at the top level");
              }
              if (!this.inModule) {
                this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
              }
            }
            return starttype === types2._import ? this.parseImport(node2) : this.parseExport(node2, exports4);
          default:
            if (this.isAsyncFunction()) {
              if (context) {
                this.unexpected();
              }
              this.next();
              return this.parseFunctionStatement(node2, true, !context);
            }
            var maybeName = this.value, expr = this.parseExpression();
            if (starttype === types2.name && expr.type === "Identifier" && this.eat(types2.colon)) {
              return this.parseLabeledStatement(node2, maybeName, expr, context);
            } else {
              return this.parseExpressionStatement(node2, expr);
            }
        }
      };
      pp$1.parseBreakContinueStatement = function(node2, keyword) {
        var isBreak = keyword === "break";
        this.next();
        if (this.eat(types2.semi) || this.insertSemicolon()) {
          node2.label = null;
        } else if (this.type !== types2.name) {
          this.unexpected();
        } else {
          node2.label = this.parseIdent();
          this.semicolon();
        }
        var i = 0;
        for (; i < this.labels.length; ++i) {
          var lab = this.labels[i];
          if (node2.label == null || lab.name === node2.label.name) {
            if (lab.kind != null && (isBreak || lab.kind === "loop")) {
              break;
            }
            if (node2.label && isBreak) {
              break;
            }
          }
        }
        if (i === this.labels.length) {
          this.raise(node2.start, "Unsyntactic " + keyword);
        }
        return this.finishNode(node2, isBreak ? "BreakStatement" : "ContinueStatement");
      };
      pp$1.parseDebuggerStatement = function(node2) {
        this.next();
        this.semicolon();
        return this.finishNode(node2, "DebuggerStatement");
      };
      pp$1.parseDoStatement = function(node2) {
        this.next();
        this.labels.push(loopLabel2);
        node2.body = this.parseStatement("do");
        this.labels.pop();
        this.expect(types2._while);
        node2.test = this.parseParenExpression();
        if (this.options.ecmaVersion >= 6) {
          this.eat(types2.semi);
        } else {
          this.semicolon();
        }
        return this.finishNode(node2, "DoWhileStatement");
      };
      pp$1.parseForStatement = function(node2) {
        this.next();
        var awaitAt = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
        this.labels.push(loopLabel2);
        this.enterScope(0);
        this.expect(types2.parenL);
        if (this.type === types2.semi) {
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node2, null);
        }
        var isLet = this.isLet();
        if (this.type === types2._var || this.type === types2._const || isLet) {
          var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
          this.next();
          this.parseVar(init$1, true, kind);
          this.finishNode(init$1, "VariableDeclaration");
          if ((this.type === types2._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
            if (this.options.ecmaVersion >= 9) {
              if (this.type === types2._in) {
                if (awaitAt > -1) {
                  this.unexpected(awaitAt);
                }
              } else {
                node2.await = awaitAt > -1;
              }
            }
            return this.parseForIn(node2, init$1);
          }
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node2, init$1);
        }
        var refDestructuringErrors = new DestructuringErrors();
        var init3 = this.parseExpression(true, refDestructuringErrors);
        if (this.type === types2._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
          if (this.options.ecmaVersion >= 9) {
            if (this.type === types2._in) {
              if (awaitAt > -1) {
                this.unexpected(awaitAt);
              }
            } else {
              node2.await = awaitAt > -1;
            }
          }
          this.toAssignable(init3, false, refDestructuringErrors);
          this.checkLVal(init3);
          return this.parseForIn(node2, init3);
        } else {
          this.checkExpressionErrors(refDestructuringErrors, true);
        }
        if (awaitAt > -1) {
          this.unexpected(awaitAt);
        }
        return this.parseFor(node2, init3);
      };
      pp$1.parseFunctionStatement = function(node2, isAsync, declarationPosition) {
        this.next();
        return this.parseFunction(node2, FUNC_STATEMENT2 | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT2), false, isAsync);
      };
      pp$1.parseIfStatement = function(node2) {
        this.next();
        node2.test = this.parseParenExpression();
        node2.consequent = this.parseStatement("if");
        node2.alternate = this.eat(types2._else) ? this.parseStatement("if") : null;
        return this.finishNode(node2, "IfStatement");
      };
      pp$1.parseReturnStatement = function(node2) {
        if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
          this.raise(this.start, "'return' outside of function");
        }
        this.next();
        if (this.eat(types2.semi) || this.insertSemicolon()) {
          node2.argument = null;
        } else {
          node2.argument = this.parseExpression();
          this.semicolon();
        }
        return this.finishNode(node2, "ReturnStatement");
      };
      pp$1.parseSwitchStatement = function(node2) {
        this.next();
        node2.discriminant = this.parseParenExpression();
        node2.cases = [];
        this.expect(types2.braceL);
        this.labels.push(switchLabel2);
        this.enterScope(0);
        var cur;
        for (var sawDefault = false; this.type !== types2.braceR; ) {
          if (this.type === types2._case || this.type === types2._default) {
            var isCase = this.type === types2._case;
            if (cur) {
              this.finishNode(cur, "SwitchCase");
            }
            node2.cases.push(cur = this.startNode());
            cur.consequent = [];
            this.next();
            if (isCase) {
              cur.test = this.parseExpression();
            } else {
              if (sawDefault) {
                this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
              }
              sawDefault = true;
              cur.test = null;
            }
            this.expect(types2.colon);
          } else {
            if (!cur) {
              this.unexpected();
            }
            cur.consequent.push(this.parseStatement(null));
          }
        }
        this.exitScope();
        if (cur) {
          this.finishNode(cur, "SwitchCase");
        }
        this.next();
        this.labels.pop();
        return this.finishNode(node2, "SwitchStatement");
      };
      pp$1.parseThrowStatement = function(node2) {
        this.next();
        if (lineBreak2.test(this.input.slice(this.lastTokEnd, this.start))) {
          this.raise(this.lastTokEnd, "Illegal newline after throw");
        }
        node2.argument = this.parseExpression();
        this.semicolon();
        return this.finishNode(node2, "ThrowStatement");
      };
      var empty = [];
      pp$1.parseTryStatement = function(node2) {
        this.next();
        node2.block = this.parseBlock();
        node2.handler = null;
        if (this.type === types2._catch) {
          var clause = this.startNode();
          this.next();
          if (this.eat(types2.parenL)) {
            clause.param = this.parseBindingAtom();
            var simple = clause.param.type === "Identifier";
            this.enterScope(simple ? SCOPE_SIMPLE_CATCH2 : 0);
            this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL2);
            this.expect(types2.parenR);
          } else {
            if (this.options.ecmaVersion < 10) {
              this.unexpected();
            }
            clause.param = null;
            this.enterScope(0);
          }
          clause.body = this.parseBlock(false);
          this.exitScope();
          node2.handler = this.finishNode(clause, "CatchClause");
        }
        node2.finalizer = this.eat(types2._finally) ? this.parseBlock() : null;
        if (!node2.handler && !node2.finalizer) {
          this.raise(node2.start, "Missing catch or finally clause");
        }
        return this.finishNode(node2, "TryStatement");
      };
      pp$1.parseVarStatement = function(node2, kind) {
        this.next();
        this.parseVar(node2, false, kind);
        this.semicolon();
        return this.finishNode(node2, "VariableDeclaration");
      };
      pp$1.parseWhileStatement = function(node2) {
        this.next();
        node2.test = this.parseParenExpression();
        this.labels.push(loopLabel2);
        node2.body = this.parseStatement("while");
        this.labels.pop();
        return this.finishNode(node2, "WhileStatement");
      };
      pp$1.parseWithStatement = function(node2) {
        if (this.strict) {
          this.raise(this.start, "'with' in strict mode");
        }
        this.next();
        node2.object = this.parseParenExpression();
        node2.body = this.parseStatement("with");
        return this.finishNode(node2, "WithStatement");
      };
      pp$1.parseEmptyStatement = function(node2) {
        this.next();
        return this.finishNode(node2, "EmptyStatement");
      };
      pp$1.parseLabeledStatement = function(node2, maybeName, expr, context) {
        for (var i$1 = 0, list2 = this.labels; i$1 < list2.length; i$1 += 1) {
          var label = list2[i$1];
          if (label.name === maybeName) {
            this.raise(expr.start, "Label '" + maybeName + "' is already declared");
          }
        }
        var kind = this.type.isLoop ? "loop" : this.type === types2._switch ? "switch" : null;
        for (var i = this.labels.length - 1; i >= 0; i--) {
          var label$1 = this.labels[i];
          if (label$1.statementStart === node2.start) {
            label$1.statementStart = this.start;
            label$1.kind = kind;
          } else {
            break;
          }
        }
        this.labels.push({ name: maybeName, kind, statementStart: this.start });
        node2.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
        this.labels.pop();
        node2.label = expr;
        return this.finishNode(node2, "LabeledStatement");
      };
      pp$1.parseExpressionStatement = function(node2, expr) {
        node2.expression = expr;
        this.semicolon();
        return this.finishNode(node2, "ExpressionStatement");
      };
      pp$1.parseBlock = function(createNewLexicalScope, node2, exitStrict) {
        if (createNewLexicalScope === void 0)
          createNewLexicalScope = true;
        if (node2 === void 0)
          node2 = this.startNode();
        node2.body = [];
        this.expect(types2.braceL);
        if (createNewLexicalScope) {
          this.enterScope(0);
        }
        while (this.type !== types2.braceR) {
          var stmt = this.parseStatement(null);
          node2.body.push(stmt);
        }
        if (exitStrict) {
          this.strict = false;
        }
        this.next();
        if (createNewLexicalScope) {
          this.exitScope();
        }
        return this.finishNode(node2, "BlockStatement");
      };
      pp$1.parseFor = function(node2, init3) {
        node2.init = init3;
        this.expect(types2.semi);
        node2.test = this.type === types2.semi ? null : this.parseExpression();
        this.expect(types2.semi);
        node2.update = this.type === types2.parenR ? null : this.parseExpression();
        this.expect(types2.parenR);
        node2.body = this.parseStatement("for");
        this.exitScope();
        this.labels.pop();
        return this.finishNode(node2, "ForStatement");
      };
      pp$1.parseForIn = function(node2, init3) {
        var isForIn = this.type === types2._in;
        this.next();
        if (init3.type === "VariableDeclaration" && init3.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init3.kind !== "var" || init3.declarations[0].id.type !== "Identifier")) {
          this.raise(init3.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer");
        } else if (init3.type === "AssignmentPattern") {
          this.raise(init3.start, "Invalid left-hand side in for-loop");
        }
        node2.left = init3;
        node2.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
        this.expect(types2.parenR);
        node2.body = this.parseStatement("for");
        this.exitScope();
        this.labels.pop();
        return this.finishNode(node2, isForIn ? "ForInStatement" : "ForOfStatement");
      };
      pp$1.parseVar = function(node2, isFor, kind) {
        node2.declarations = [];
        node2.kind = kind;
        for (; ; ) {
          var decl = this.startNode();
          this.parseVarId(decl, kind);
          if (this.eat(types2.eq)) {
            decl.init = this.parseMaybeAssign(isFor);
          } else if (kind === "const" && !(this.type === types2._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
            this.unexpected();
          } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types2._in || this.isContextual("of")))) {
            this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
          } else {
            decl.init = null;
          }
          node2.declarations.push(this.finishNode(decl, "VariableDeclarator"));
          if (!this.eat(types2.comma)) {
            break;
          }
        }
        return node2;
      };
      pp$1.parseVarId = function(decl, kind) {
        decl.id = this.parseBindingAtom();
        this.checkLVal(decl.id, kind === "var" ? BIND_VAR2 : BIND_LEXICAL2, false);
      };
      var FUNC_STATEMENT2 = 1, FUNC_HANGING_STATEMENT2 = 2, FUNC_NULLABLE_ID2 = 4;
      pp$1.parseFunction = function(node2, statement, allowExpressionBody, isAsync) {
        this.initFunction(node2);
        if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
          if (this.type === types2.star && statement & FUNC_HANGING_STATEMENT2) {
            this.unexpected();
          }
          node2.generator = this.eat(types2.star);
        }
        if (this.options.ecmaVersion >= 8) {
          node2.async = !!isAsync;
        }
        if (statement & FUNC_STATEMENT2) {
          node2.id = statement & FUNC_NULLABLE_ID2 && this.type !== types2.name ? null : this.parseIdent();
          if (node2.id && !(statement & FUNC_HANGING_STATEMENT2)) {
            this.checkLVal(node2.id, this.strict || node2.generator || node2.async ? this.treatFunctionsAsVar ? BIND_VAR2 : BIND_LEXICAL2 : BIND_FUNCTION2);
          }
        }
        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        this.enterScope(functionFlags2(node2.async, node2.generator));
        if (!(statement & FUNC_STATEMENT2)) {
          node2.id = this.type === types2.name ? this.parseIdent() : null;
        }
        this.parseFunctionParams(node2);
        this.parseFunctionBody(node2, allowExpressionBody, false);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node2, statement & FUNC_STATEMENT2 ? "FunctionDeclaration" : "FunctionExpression");
      };
      pp$1.parseFunctionParams = function(node2) {
        this.expect(types2.parenL);
        node2.params = this.parseBindingList(types2.parenR, false, this.options.ecmaVersion >= 8);
        this.checkYieldAwaitInDefaultParams();
      };
      pp$1.parseClass = function(node2, isStatement) {
        this.next();
        var oldStrict = this.strict;
        this.strict = true;
        this.parseClassId(node2, isStatement);
        this.parseClassSuper(node2);
        var classBody = this.startNode();
        var hadConstructor = false;
        classBody.body = [];
        this.expect(types2.braceL);
        while (this.type !== types2.braceR) {
          var element = this.parseClassElement(node2.superClass !== null);
          if (element) {
            classBody.body.push(element);
            if (element.type === "MethodDefinition" && element.kind === "constructor") {
              if (hadConstructor) {
                this.raise(element.start, "Duplicate constructor in the same class");
              }
              hadConstructor = true;
            }
          }
        }
        this.strict = oldStrict;
        this.next();
        node2.body = this.finishNode(classBody, "ClassBody");
        return this.finishNode(node2, isStatement ? "ClassDeclaration" : "ClassExpression");
      };
      pp$1.parseClassElement = function(constructorAllowsSuper) {
        var this$1 = this;
        if (this.eat(types2.semi)) {
          return null;
        }
        var method = this.startNode();
        var tryContextual = function(k, noLineBreak) {
          if (noLineBreak === void 0)
            noLineBreak = false;
          var start = this$1.start, startLoc = this$1.startLoc;
          if (!this$1.eatContextual(k)) {
            return false;
          }
          if (this$1.type !== types2.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) {
            return true;
          }
          if (method.key) {
            this$1.unexpected();
          }
          method.computed = false;
          method.key = this$1.startNodeAt(start, startLoc);
          method.key.name = k;
          this$1.finishNode(method.key, "Identifier");
          return false;
        };
        method.kind = "method";
        method.static = tryContextual("static");
        var isGenerator = this.eat(types2.star);
        var isAsync = false;
        if (!isGenerator) {
          if (this.options.ecmaVersion >= 8 && tryContextual("async", true)) {
            isAsync = true;
            isGenerator = this.options.ecmaVersion >= 9 && this.eat(types2.star);
          } else if (tryContextual("get")) {
            method.kind = "get";
          } else if (tryContextual("set")) {
            method.kind = "set";
          }
        }
        if (!method.key) {
          this.parsePropertyName(method);
        }
        var key = method.key;
        var allowsDirectSuper = false;
        if (!method.computed && !method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
          if (method.kind !== "method") {
            this.raise(key.start, "Constructor can't have get/set modifier");
          }
          if (isGenerator) {
            this.raise(key.start, "Constructor can't be a generator");
          }
          if (isAsync) {
            this.raise(key.start, "Constructor can't be an async method");
          }
          method.kind = "constructor";
          allowsDirectSuper = constructorAllowsSuper;
        } else if (method.static && key.type === "Identifier" && key.name === "prototype") {
          this.raise(key.start, "Classes may not have a static property named prototype");
        }
        this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);
        if (method.kind === "get" && method.value.params.length !== 0) {
          this.raiseRecoverable(method.value.start, "getter should have no params");
        }
        if (method.kind === "set" && method.value.params.length !== 1) {
          this.raiseRecoverable(method.value.start, "setter should have exactly one param");
        }
        if (method.kind === "set" && method.value.params[0].type === "RestElement") {
          this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params");
        }
        return method;
      };
      pp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
        method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
        return this.finishNode(method, "MethodDefinition");
      };
      pp$1.parseClassId = function(node2, isStatement) {
        if (this.type === types2.name) {
          node2.id = this.parseIdent();
          if (isStatement) {
            this.checkLVal(node2.id, BIND_LEXICAL2, false);
          }
        } else {
          if (isStatement === true) {
            this.unexpected();
          }
          node2.id = null;
        }
      };
      pp$1.parseClassSuper = function(node2) {
        node2.superClass = this.eat(types2._extends) ? this.parseExprSubscripts() : null;
      };
      pp$1.parseExport = function(node2, exports4) {
        this.next();
        if (this.eat(types2.star)) {
          if (this.options.ecmaVersion >= 11) {
            if (this.eatContextual("as")) {
              node2.exported = this.parseIdent(true);
              this.checkExport(exports4, node2.exported.name, this.lastTokStart);
            } else {
              node2.exported = null;
            }
          }
          this.expectContextual("from");
          if (this.type !== types2.string) {
            this.unexpected();
          }
          node2.source = this.parseExprAtom();
          this.semicolon();
          return this.finishNode(node2, "ExportAllDeclaration");
        }
        if (this.eat(types2._default)) {
          this.checkExport(exports4, "default", this.lastTokStart);
          var isAsync;
          if (this.type === types2._function || (isAsync = this.isAsyncFunction())) {
            var fNode = this.startNode();
            this.next();
            if (isAsync) {
              this.next();
            }
            node2.declaration = this.parseFunction(fNode, FUNC_STATEMENT2 | FUNC_NULLABLE_ID2, false, isAsync);
          } else if (this.type === types2._class) {
            var cNode = this.startNode();
            node2.declaration = this.parseClass(cNode, "nullableID");
          } else {
            node2.declaration = this.parseMaybeAssign();
            this.semicolon();
          }
          return this.finishNode(node2, "ExportDefaultDeclaration");
        }
        if (this.shouldParseExportStatement()) {
          node2.declaration = this.parseStatement(null);
          if (node2.declaration.type === "VariableDeclaration") {
            this.checkVariableExport(exports4, node2.declaration.declarations);
          } else {
            this.checkExport(exports4, node2.declaration.id.name, node2.declaration.id.start);
          }
          node2.specifiers = [];
          node2.source = null;
        } else {
          node2.declaration = null;
          node2.specifiers = this.parseExportSpecifiers(exports4);
          if (this.eatContextual("from")) {
            if (this.type !== types2.string) {
              this.unexpected();
            }
            node2.source = this.parseExprAtom();
          } else {
            for (var i = 0, list2 = node2.specifiers; i < list2.length; i += 1) {
              var spec = list2[i];
              this.checkUnreserved(spec.local);
              this.checkLocalExport(spec.local);
            }
            node2.source = null;
          }
          this.semicolon();
        }
        return this.finishNode(node2, "ExportNamedDeclaration");
      };
      pp$1.checkExport = function(exports4, name, pos) {
        if (!exports4) {
          return;
        }
        if (has3(exports4, name)) {
          this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
        }
        exports4[name] = true;
      };
      pp$1.checkPatternExport = function(exports4, pat) {
        var type = pat.type;
        if (type === "Identifier") {
          this.checkExport(exports4, pat.name, pat.start);
        } else if (type === "ObjectPattern") {
          for (var i = 0, list2 = pat.properties; i < list2.length; i += 1) {
            var prop = list2[i];
            this.checkPatternExport(exports4, prop);
          }
        } else if (type === "ArrayPattern") {
          for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
            var elt = list$1[i$1];
            if (elt) {
              this.checkPatternExport(exports4, elt);
            }
          }
        } else if (type === "Property") {
          this.checkPatternExport(exports4, pat.value);
        } else if (type === "AssignmentPattern") {
          this.checkPatternExport(exports4, pat.left);
        } else if (type === "RestElement") {
          this.checkPatternExport(exports4, pat.argument);
        } else if (type === "ParenthesizedExpression") {
          this.checkPatternExport(exports4, pat.expression);
        }
      };
      pp$1.checkVariableExport = function(exports4, decls) {
        if (!exports4) {
          return;
        }
        for (var i = 0, list2 = decls; i < list2.length; i += 1) {
          var decl = list2[i];
          this.checkPatternExport(exports4, decl.id);
        }
      };
      pp$1.shouldParseExportStatement = function() {
        return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
      };
      pp$1.parseExportSpecifiers = function(exports4) {
        var nodes = [], first = true;
        this.expect(types2.braceL);
        while (!this.eat(types2.braceR)) {
          if (!first) {
            this.expect(types2.comma);
            if (this.afterTrailingComma(types2.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          var node2 = this.startNode();
          node2.local = this.parseIdent(true);
          node2.exported = this.eatContextual("as") ? this.parseIdent(true) : node2.local;
          this.checkExport(exports4, node2.exported.name, node2.exported.start);
          nodes.push(this.finishNode(node2, "ExportSpecifier"));
        }
        return nodes;
      };
      pp$1.parseImport = function(node2) {
        this.next();
        if (this.type === types2.string) {
          node2.specifiers = empty;
          node2.source = this.parseExprAtom();
        } else {
          node2.specifiers = this.parseImportSpecifiers();
          this.expectContextual("from");
          node2.source = this.type === types2.string ? this.parseExprAtom() : this.unexpected();
        }
        this.semicolon();
        return this.finishNode(node2, "ImportDeclaration");
      };
      pp$1.parseImportSpecifiers = function() {
        var nodes = [], first = true;
        if (this.type === types2.name) {
          var node2 = this.startNode();
          node2.local = this.parseIdent();
          this.checkLVal(node2.local, BIND_LEXICAL2);
          nodes.push(this.finishNode(node2, "ImportDefaultSpecifier"));
          if (!this.eat(types2.comma)) {
            return nodes;
          }
        }
        if (this.type === types2.star) {
          var node$12 = this.startNode();
          this.next();
          this.expectContextual("as");
          node$12.local = this.parseIdent();
          this.checkLVal(node$12.local, BIND_LEXICAL2);
          nodes.push(this.finishNode(node$12, "ImportNamespaceSpecifier"));
          return nodes;
        }
        this.expect(types2.braceL);
        while (!this.eat(types2.braceR)) {
          if (!first) {
            this.expect(types2.comma);
            if (this.afterTrailingComma(types2.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          var node$2 = this.startNode();
          node$2.imported = this.parseIdent(true);
          if (this.eatContextual("as")) {
            node$2.local = this.parseIdent();
          } else {
            this.checkUnreserved(node$2.imported);
            node$2.local = node$2.imported;
          }
          this.checkLVal(node$2.local, BIND_LEXICAL2);
          nodes.push(this.finishNode(node$2, "ImportSpecifier"));
        }
        return nodes;
      };
      pp$1.adaptDirectivePrologue = function(statements) {
        for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
          statements[i].directive = statements[i].expression.raw.slice(1, -1);
        }
      };
      pp$1.isDirectiveCandidate = function(statement) {
        return statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && (this.input[statement.start] === '"' || this.input[statement.start] === "'");
      };
      var pp$2 = Parser2.prototype;
      pp$2.toAssignable = function(node2, isBinding, refDestructuringErrors) {
        if (this.options.ecmaVersion >= 6 && node2) {
          switch (node2.type) {
            case "Identifier":
              if (this.inAsync && node2.name === "await") {
                this.raise(node2.start, "Cannot use 'await' as identifier inside an async function");
              }
              break;
            case "ObjectPattern":
            case "ArrayPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node2.type = "ObjectPattern";
              if (refDestructuringErrors) {
                this.checkPatternErrors(refDestructuringErrors, true);
              }
              for (var i = 0, list2 = node2.properties; i < list2.length; i += 1) {
                var prop = list2[i];
                this.toAssignable(prop, isBinding);
                if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
                  this.raise(prop.argument.start, "Unexpected token");
                }
              }
              break;
            case "Property":
              if (node2.kind !== "init") {
                this.raise(node2.key.start, "Object pattern can't contain getter or setter");
              }
              this.toAssignable(node2.value, isBinding);
              break;
            case "ArrayExpression":
              node2.type = "ArrayPattern";
              if (refDestructuringErrors) {
                this.checkPatternErrors(refDestructuringErrors, true);
              }
              this.toAssignableList(node2.elements, isBinding);
              break;
            case "SpreadElement":
              node2.type = "RestElement";
              this.toAssignable(node2.argument, isBinding);
              if (node2.argument.type === "AssignmentPattern") {
                this.raise(node2.argument.start, "Rest elements cannot have a default value");
              }
              break;
            case "AssignmentExpression":
              if (node2.operator !== "=") {
                this.raise(node2.left.end, "Only '=' operator can be used for specifying default value.");
              }
              node2.type = "AssignmentPattern";
              delete node2.operator;
              this.toAssignable(node2.left, isBinding);
            case "AssignmentPattern":
              break;
            case "ParenthesizedExpression":
              this.toAssignable(node2.expression, isBinding, refDestructuringErrors);
              break;
            case "ChainExpression":
              this.raiseRecoverable(node2.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              if (!isBinding) {
                break;
              }
            default:
              this.raise(node2.start, "Assigning to rvalue");
          }
        } else if (refDestructuringErrors) {
          this.checkPatternErrors(refDestructuringErrors, true);
        }
        return node2;
      };
      pp$2.toAssignableList = function(exprList, isBinding) {
        var end = exprList.length;
        for (var i = 0; i < end; i++) {
          var elt = exprList[i];
          if (elt) {
            this.toAssignable(elt, isBinding);
          }
        }
        if (end) {
          var last2 = exprList[end - 1];
          if (this.options.ecmaVersion === 6 && isBinding && last2 && last2.type === "RestElement" && last2.argument.type !== "Identifier") {
            this.unexpected(last2.argument.start);
          }
        }
        return exprList;
      };
      pp$2.parseSpread = function(refDestructuringErrors) {
        var node2 = this.startNode();
        this.next();
        node2.argument = this.parseMaybeAssign(false, refDestructuringErrors);
        return this.finishNode(node2, "SpreadElement");
      };
      pp$2.parseRestBinding = function() {
        var node2 = this.startNode();
        this.next();
        if (this.options.ecmaVersion === 6 && this.type !== types2.name) {
          this.unexpected();
        }
        node2.argument = this.parseBindingAtom();
        return this.finishNode(node2, "RestElement");
      };
      pp$2.parseBindingAtom = function() {
        if (this.options.ecmaVersion >= 6) {
          switch (this.type) {
            case types2.bracketL:
              var node2 = this.startNode();
              this.next();
              node2.elements = this.parseBindingList(types2.bracketR, true, true);
              return this.finishNode(node2, "ArrayPattern");
            case types2.braceL:
              return this.parseObj(true);
          }
        }
        return this.parseIdent();
      };
      pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
        var elts = [], first = true;
        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(types2.comma);
          }
          if (allowEmpty && this.type === types2.comma) {
            elts.push(null);
          } else if (allowTrailingComma && this.afterTrailingComma(close)) {
            break;
          } else if (this.type === types2.ellipsis) {
            var rest = this.parseRestBinding();
            this.parseBindingListItem(rest);
            elts.push(rest);
            if (this.type === types2.comma) {
              this.raise(this.start, "Comma is not permitted after the rest element");
            }
            this.expect(close);
            break;
          } else {
            var elem = this.parseMaybeDefault(this.start, this.startLoc);
            this.parseBindingListItem(elem);
            elts.push(elem);
          }
        }
        return elts;
      };
      pp$2.parseBindingListItem = function(param) {
        return param;
      };
      pp$2.parseMaybeDefault = function(startPos, startLoc, left) {
        left = left || this.parseBindingAtom();
        if (this.options.ecmaVersion < 6 || !this.eat(types2.eq)) {
          return left;
        }
        var node2 = this.startNodeAt(startPos, startLoc);
        node2.left = left;
        node2.right = this.parseMaybeAssign();
        return this.finishNode(node2, "AssignmentPattern");
      };
      pp$2.checkLVal = function(expr, bindingType, checkClashes) {
        if (bindingType === void 0)
          bindingType = BIND_NONE2;
        switch (expr.type) {
          case "Identifier":
            if (bindingType === BIND_LEXICAL2 && expr.name === "let") {
              this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
            }
            if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
              this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
            }
            if (checkClashes) {
              if (has3(checkClashes, expr.name)) {
                this.raiseRecoverable(expr.start, "Argument name clash");
              }
              checkClashes[expr.name] = true;
            }
            if (bindingType !== BIND_NONE2 && bindingType !== BIND_OUTSIDE2) {
              this.declareName(expr.name, bindingType, expr.start);
            }
            break;
          case "ChainExpression":
            this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
            break;
          case "MemberExpression":
            if (bindingType) {
              this.raiseRecoverable(expr.start, "Binding member expression");
            }
            break;
          case "ObjectPattern":
            for (var i = 0, list2 = expr.properties; i < list2.length; i += 1) {
              var prop = list2[i];
              this.checkLVal(prop, bindingType, checkClashes);
            }
            break;
          case "Property":
            this.checkLVal(expr.value, bindingType, checkClashes);
            break;
          case "ArrayPattern":
            for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
              var elem = list$1[i$1];
              if (elem) {
                this.checkLVal(elem, bindingType, checkClashes);
              }
            }
            break;
          case "AssignmentPattern":
            this.checkLVal(expr.left, bindingType, checkClashes);
            break;
          case "RestElement":
            this.checkLVal(expr.argument, bindingType, checkClashes);
            break;
          case "ParenthesizedExpression":
            this.checkLVal(expr.expression, bindingType, checkClashes);
            break;
          default:
            this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
        }
      };
      var pp$3 = Parser2.prototype;
      pp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {
        if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
          return;
        }
        if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
          return;
        }
        var key = prop.key;
        var name;
        switch (key.type) {
          case "Identifier":
            name = key.name;
            break;
          case "Literal":
            name = String(key.value);
            break;
          default:
            return;
        }
        var kind = prop.kind;
        if (this.options.ecmaVersion >= 6) {
          if (name === "__proto__" && kind === "init") {
            if (propHash.proto) {
              if (refDestructuringErrors) {
                if (refDestructuringErrors.doubleProto < 0) {
                  refDestructuringErrors.doubleProto = key.start;
                }
              } else {
                this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
              }
            }
            propHash.proto = true;
          }
          return;
        }
        name = "$" + name;
        var other = propHash[name];
        if (other) {
          var redefinition;
          if (kind === "init") {
            redefinition = this.strict && other.init || other.get || other.set;
          } else {
            redefinition = other.init || other[kind];
          }
          if (redefinition) {
            this.raiseRecoverable(key.start, "Redefinition of property");
          }
        } else {
          other = propHash[name] = {
            init: false,
            get: false,
            set: false
          };
        }
        other[kind] = true;
      };
      pp$3.parseExpression = function(noIn, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
        if (this.type === types2.comma) {
          var node2 = this.startNodeAt(startPos, startLoc);
          node2.expressions = [expr];
          while (this.eat(types2.comma)) {
            node2.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));
          }
          return this.finishNode(node2, "SequenceExpression");
        }
        return expr;
      };
      pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {
        if (this.isContextual("yield")) {
          if (this.inGenerator) {
            return this.parseYield(noIn);
          } else {
            this.exprAllowed = false;
          }
        }
        var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;
        if (refDestructuringErrors) {
          oldParenAssign = refDestructuringErrors.parenthesizedAssign;
          oldTrailingComma = refDestructuringErrors.trailingComma;
          refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
        } else {
          refDestructuringErrors = new DestructuringErrors();
          ownDestructuringErrors = true;
        }
        var startPos = this.start, startLoc = this.startLoc;
        if (this.type === types2.parenL || this.type === types2.name) {
          this.potentialArrowAt = this.start;
        }
        var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
        if (afterLeftParse) {
          left = afterLeftParse.call(this, left, startPos, startLoc);
        }
        if (this.type.isAssign) {
          var node2 = this.startNodeAt(startPos, startLoc);
          node2.operator = this.value;
          node2.left = this.type === types2.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;
          if (!ownDestructuringErrors) {
            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
          }
          if (refDestructuringErrors.shorthandAssign >= node2.left.start) {
            refDestructuringErrors.shorthandAssign = -1;
          }
          this.checkLVal(left);
          this.next();
          node2.right = this.parseMaybeAssign(noIn);
          return this.finishNode(node2, "AssignmentExpression");
        } else {
          if (ownDestructuringErrors) {
            this.checkExpressionErrors(refDestructuringErrors, true);
          }
        }
        if (oldParenAssign > -1) {
          refDestructuringErrors.parenthesizedAssign = oldParenAssign;
        }
        if (oldTrailingComma > -1) {
          refDestructuringErrors.trailingComma = oldTrailingComma;
        }
        return left;
      };
      pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseExprOps(noIn, refDestructuringErrors);
        if (this.checkExpressionErrors(refDestructuringErrors)) {
          return expr;
        }
        if (this.eat(types2.question)) {
          var node2 = this.startNodeAt(startPos, startLoc);
          node2.test = expr;
          node2.consequent = this.parseMaybeAssign();
          this.expect(types2.colon);
          node2.alternate = this.parseMaybeAssign(noIn);
          return this.finishNode(node2, "ConditionalExpression");
        }
        return expr;
      };
      pp$3.parseExprOps = function(noIn, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseMaybeUnary(refDestructuringErrors, false);
        if (this.checkExpressionErrors(refDestructuringErrors)) {
          return expr;
        }
        return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);
      };
      pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {
        var prec = this.type.binop;
        if (prec != null && (!noIn || this.type !== types2._in)) {
          if (prec > minPrec) {
            var logical = this.type === types2.logicalOR || this.type === types2.logicalAND;
            var coalesce = this.type === types2.coalesce;
            if (coalesce) {
              prec = types2.logicalAND.binop;
            }
            var op = this.value;
            this.next();
            var startPos = this.start, startLoc = this.startLoc;
            var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
            var node2 = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
            if (logical && this.type === types2.coalesce || coalesce && (this.type === types2.logicalOR || this.type === types2.logicalAND)) {
              this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
            }
            return this.parseExprOp(node2, leftStartPos, leftStartLoc, minPrec, noIn);
          }
        }
        return left;
      };
      pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {
        var node2 = this.startNodeAt(startPos, startLoc);
        node2.left = left;
        node2.operator = op;
        node2.right = right;
        return this.finishNode(node2, logical ? "LogicalExpression" : "BinaryExpression");
      };
      pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {
        var startPos = this.start, startLoc = this.startLoc, expr;
        if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {
          expr = this.parseAwait();
          sawUnary = true;
        } else if (this.type.prefix) {
          var node2 = this.startNode(), update = this.type === types2.incDec;
          node2.operator = this.value;
          node2.prefix = true;
          this.next();
          node2.argument = this.parseMaybeUnary(null, true);
          this.checkExpressionErrors(refDestructuringErrors, true);
          if (update) {
            this.checkLVal(node2.argument);
          } else if (this.strict && node2.operator === "delete" && node2.argument.type === "Identifier") {
            this.raiseRecoverable(node2.start, "Deleting local variable in strict mode");
          } else {
            sawUnary = true;
          }
          expr = this.finishNode(node2, update ? "UpdateExpression" : "UnaryExpression");
        } else {
          expr = this.parseExprSubscripts(refDestructuringErrors);
          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }
          while (this.type.postfix && !this.canInsertSemicolon()) {
            var node$12 = this.startNodeAt(startPos, startLoc);
            node$12.operator = this.value;
            node$12.prefix = false;
            node$12.argument = expr;
            this.checkLVal(expr);
            this.next();
            expr = this.finishNode(node$12, "UpdateExpression");
          }
        }
        if (!sawUnary && this.eat(types2.starstar)) {
          return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false);
        } else {
          return expr;
        }
      };
      pp$3.parseExprSubscripts = function(refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseExprAtom(refDestructuringErrors);
        if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")") {
          return expr;
        }
        var result2 = this.parseSubscripts(expr, startPos, startLoc);
        if (refDestructuringErrors && result2.type === "MemberExpression") {
          if (refDestructuringErrors.parenthesizedAssign >= result2.start) {
            refDestructuringErrors.parenthesizedAssign = -1;
          }
          if (refDestructuringErrors.parenthesizedBind >= result2.start) {
            refDestructuringErrors.parenthesizedBind = -1;
          }
        }
        return result2;
      };
      pp$3.parseSubscripts = function(base2, startPos, startLoc, noCalls) {
        var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base2.type === "Identifier" && base2.name === "async" && this.lastTokEnd === base2.end && !this.canInsertSemicolon() && base2.end - base2.start === 5 && this.potentialArrowAt === base2.start;
        var optionalChained = false;
        while (true) {
          var element = this.parseSubscript(base2, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained);
          if (element.optional) {
            optionalChained = true;
          }
          if (element === base2 || element.type === "ArrowFunctionExpression") {
            if (optionalChained) {
              var chainNode = this.startNodeAt(startPos, startLoc);
              chainNode.expression = element;
              element = this.finishNode(chainNode, "ChainExpression");
            }
            return element;
          }
          base2 = element;
        }
      };
      pp$3.parseSubscript = function(base2, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained) {
        var optionalSupported = this.options.ecmaVersion >= 11;
        var optional = optionalSupported && this.eat(types2.questionDot);
        if (noCalls && optional) {
          this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
        }
        var computed = this.eat(types2.bracketL);
        if (computed || optional && this.type !== types2.parenL && this.type !== types2.backQuote || this.eat(types2.dot)) {
          var node2 = this.startNodeAt(startPos, startLoc);
          node2.object = base2;
          node2.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== "never");
          node2.computed = !!computed;
          if (computed) {
            this.expect(types2.bracketR);
          }
          if (optionalSupported) {
            node2.optional = optional;
          }
          base2 = this.finishNode(node2, "MemberExpression");
        } else if (!noCalls && this.eat(types2.parenL)) {
          var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          var exprList = this.parseExprList(types2.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
          if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types2.arrow)) {
            this.checkPatternErrors(refDestructuringErrors, false);
            this.checkYieldAwaitInDefaultParams();
            if (this.awaitIdentPos > 0) {
              this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
            }
            this.yieldPos = oldYieldPos;
            this.awaitPos = oldAwaitPos;
            this.awaitIdentPos = oldAwaitIdentPos;
            return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true);
          }
          this.checkExpressionErrors(refDestructuringErrors, true);
          this.yieldPos = oldYieldPos || this.yieldPos;
          this.awaitPos = oldAwaitPos || this.awaitPos;
          this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
          var node$12 = this.startNodeAt(startPos, startLoc);
          node$12.callee = base2;
          node$12.arguments = exprList;
          if (optionalSupported) {
            node$12.optional = optional;
          }
          base2 = this.finishNode(node$12, "CallExpression");
        } else if (this.type === types2.backQuote) {
          if (optional || optionalChained) {
            this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
          }
          var node$2 = this.startNodeAt(startPos, startLoc);
          node$2.tag = base2;
          node$2.quasi = this.parseTemplate({ isTagged: true });
          base2 = this.finishNode(node$2, "TaggedTemplateExpression");
        }
        return base2;
      };
      pp$3.parseExprAtom = function(refDestructuringErrors) {
        if (this.type === types2.slash) {
          this.readRegexp();
        }
        var node2, canBeArrow = this.potentialArrowAt === this.start;
        switch (this.type) {
          case types2._super:
            if (!this.allowSuper) {
              this.raise(this.start, "'super' keyword outside a method");
            }
            node2 = this.startNode();
            this.next();
            if (this.type === types2.parenL && !this.allowDirectSuper) {
              this.raise(node2.start, "super() call outside constructor of a subclass");
            }
            if (this.type !== types2.dot && this.type !== types2.bracketL && this.type !== types2.parenL) {
              this.unexpected();
            }
            return this.finishNode(node2, "Super");
          case types2._this:
            node2 = this.startNode();
            this.next();
            return this.finishNode(node2, "ThisExpression");
          case types2.name:
            var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
            var id2 = this.parseIdent(false);
            if (this.options.ecmaVersion >= 8 && !containsEsc && id2.name === "async" && !this.canInsertSemicolon() && this.eat(types2._function)) {
              return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true);
            }
            if (canBeArrow && !this.canInsertSemicolon()) {
              if (this.eat(types2.arrow)) {
                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id2], false);
              }
              if (this.options.ecmaVersion >= 8 && id2.name === "async" && this.type === types2.name && !containsEsc) {
                id2 = this.parseIdent(false);
                if (this.canInsertSemicolon() || !this.eat(types2.arrow)) {
                  this.unexpected();
                }
                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id2], true);
              }
            }
            return id2;
          case types2.regexp:
            var value = this.value;
            node2 = this.parseLiteral(value.value);
            node2.regex = { pattern: value.pattern, flags: value.flags };
            return node2;
          case types2.num:
          case types2.string:
            return this.parseLiteral(this.value);
          case types2._null:
          case types2._true:
          case types2._false:
            node2 = this.startNode();
            node2.value = this.type === types2._null ? null : this.type === types2._true;
            node2.raw = this.type.keyword;
            this.next();
            return this.finishNode(node2, "Literal");
          case types2.parenL:
            var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);
            if (refDestructuringErrors) {
              if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
                refDestructuringErrors.parenthesizedAssign = start;
              }
              if (refDestructuringErrors.parenthesizedBind < 0) {
                refDestructuringErrors.parenthesizedBind = start;
              }
            }
            return expr;
          case types2.bracketL:
            node2 = this.startNode();
            this.next();
            node2.elements = this.parseExprList(types2.bracketR, true, true, refDestructuringErrors);
            return this.finishNode(node2, "ArrayExpression");
          case types2.braceL:
            return this.parseObj(false, refDestructuringErrors);
          case types2._function:
            node2 = this.startNode();
            this.next();
            return this.parseFunction(node2, 0);
          case types2._class:
            return this.parseClass(this.startNode(), false);
          case types2._new:
            return this.parseNew();
          case types2.backQuote:
            return this.parseTemplate();
          case types2._import:
            if (this.options.ecmaVersion >= 11) {
              return this.parseExprImport();
            } else {
              return this.unexpected();
            }
          default:
            this.unexpected();
        }
      };
      pp$3.parseExprImport = function() {
        var node2 = this.startNode();
        if (this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword import");
        }
        var meta = this.parseIdent(true);
        switch (this.type) {
          case types2.parenL:
            return this.parseDynamicImport(node2);
          case types2.dot:
            node2.meta = meta;
            return this.parseImportMeta(node2);
          default:
            this.unexpected();
        }
      };
      pp$3.parseDynamicImport = function(node2) {
        this.next();
        node2.source = this.parseMaybeAssign();
        if (!this.eat(types2.parenR)) {
          var errorPos = this.start;
          if (this.eat(types2.comma) && this.eat(types2.parenR)) {
            this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
          } else {
            this.unexpected(errorPos);
          }
        }
        return this.finishNode(node2, "ImportExpression");
      };
      pp$3.parseImportMeta = function(node2) {
        this.next();
        var containsEsc = this.containsEsc;
        node2.property = this.parseIdent(true);
        if (node2.property.name !== "meta") {
          this.raiseRecoverable(node2.property.start, "The only valid meta property for import is 'import.meta'");
        }
        if (containsEsc) {
          this.raiseRecoverable(node2.start, "'import.meta' must not contain escaped characters");
        }
        if (this.options.sourceType !== "module") {
          this.raiseRecoverable(node2.start, "Cannot use 'import.meta' outside a module");
        }
        return this.finishNode(node2, "MetaProperty");
      };
      pp$3.parseLiteral = function(value) {
        var node2 = this.startNode();
        node2.value = value;
        node2.raw = this.input.slice(this.start, this.end);
        if (node2.raw.charCodeAt(node2.raw.length - 1) === 110) {
          node2.bigint = node2.raw.slice(0, -1).replace(/_/g, "");
        }
        this.next();
        return this.finishNode(node2, "Literal");
      };
      pp$3.parseParenExpression = function() {
        this.expect(types2.parenL);
        var val = this.parseExpression();
        this.expect(types2.parenR);
        return val;
      };
      pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {
        var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
        if (this.options.ecmaVersion >= 6) {
          this.next();
          var innerStartPos = this.start, innerStartLoc = this.startLoc;
          var exprList = [], first = true, lastIsComma = false;
          var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
          this.yieldPos = 0;
          this.awaitPos = 0;
          while (this.type !== types2.parenR) {
            first ? first = false : this.expect(types2.comma);
            if (allowTrailingComma && this.afterTrailingComma(types2.parenR, true)) {
              lastIsComma = true;
              break;
            } else if (this.type === types2.ellipsis) {
              spreadStart = this.start;
              exprList.push(this.parseParenItem(this.parseRestBinding()));
              if (this.type === types2.comma) {
                this.raise(this.start, "Comma is not permitted after the rest element");
              }
              break;
            } else {
              exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
            }
          }
          var innerEndPos = this.start, innerEndLoc = this.startLoc;
          this.expect(types2.parenR);
          if (canBeArrow && !this.canInsertSemicolon() && this.eat(types2.arrow)) {
            this.checkPatternErrors(refDestructuringErrors, false);
            this.checkYieldAwaitInDefaultParams();
            this.yieldPos = oldYieldPos;
            this.awaitPos = oldAwaitPos;
            return this.parseParenArrowList(startPos, startLoc, exprList);
          }
          if (!exprList.length || lastIsComma) {
            this.unexpected(this.lastTokStart);
          }
          if (spreadStart) {
            this.unexpected(spreadStart);
          }
          this.checkExpressionErrors(refDestructuringErrors, true);
          this.yieldPos = oldYieldPos || this.yieldPos;
          this.awaitPos = oldAwaitPos || this.awaitPos;
          if (exprList.length > 1) {
            val = this.startNodeAt(innerStartPos, innerStartLoc);
            val.expressions = exprList;
            this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
          } else {
            val = exprList[0];
          }
        } else {
          val = this.parseParenExpression();
        }
        if (this.options.preserveParens) {
          var par = this.startNodeAt(startPos, startLoc);
          par.expression = val;
          return this.finishNode(par, "ParenthesizedExpression");
        } else {
          return val;
        }
      };
      pp$3.parseParenItem = function(item) {
        return item;
      };
      pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
      };
      var empty$1 = [];
      pp$3.parseNew = function() {
        if (this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword new");
        }
        var node2 = this.startNode();
        var meta = this.parseIdent(true);
        if (this.options.ecmaVersion >= 6 && this.eat(types2.dot)) {
          node2.meta = meta;
          var containsEsc = this.containsEsc;
          node2.property = this.parseIdent(true);
          if (node2.property.name !== "target") {
            this.raiseRecoverable(node2.property.start, "The only valid meta property for new is 'new.target'");
          }
          if (containsEsc) {
            this.raiseRecoverable(node2.start, "'new.target' must not contain escaped characters");
          }
          if (!this.inNonArrowFunction()) {
            this.raiseRecoverable(node2.start, "'new.target' can only be used in functions");
          }
          return this.finishNode(node2, "MetaProperty");
        }
        var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types2._import;
        node2.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
        if (isImport && node2.callee.type === "ImportExpression") {
          this.raise(startPos, "Cannot use new with import()");
        }
        if (this.eat(types2.parenL)) {
          node2.arguments = this.parseExprList(types2.parenR, this.options.ecmaVersion >= 8, false);
        } else {
          node2.arguments = empty$1;
        }
        return this.finishNode(node2, "NewExpression");
      };
      pp$3.parseTemplateElement = function(ref2) {
        var isTagged = ref2.isTagged;
        var elem = this.startNode();
        if (this.type === types2.invalidTemplate) {
          if (!isTagged) {
            this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
          }
          elem.value = {
            raw: this.value,
            cooked: null
          };
        } else {
          elem.value = {
            raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
            cooked: this.value
          };
        }
        this.next();
        elem.tail = this.type === types2.backQuote;
        return this.finishNode(elem, "TemplateElement");
      };
      pp$3.parseTemplate = function(ref2) {
        if (ref2 === void 0)
          ref2 = {};
        var isTagged = ref2.isTagged;
        if (isTagged === void 0)
          isTagged = false;
        var node2 = this.startNode();
        this.next();
        node2.expressions = [];
        var curElt = this.parseTemplateElement({ isTagged });
        node2.quasis = [curElt];
        while (!curElt.tail) {
          if (this.type === types2.eof) {
            this.raise(this.pos, "Unterminated template literal");
          }
          this.expect(types2.dollarBraceL);
          node2.expressions.push(this.parseExpression());
          this.expect(types2.braceR);
          node2.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
        }
        this.next();
        return this.finishNode(node2, "TemplateLiteral");
      };
      pp$3.isAsyncProp = function(prop) {
        return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types2.name || this.type === types2.num || this.type === types2.string || this.type === types2.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types2.star) && !lineBreak2.test(this.input.slice(this.lastTokEnd, this.start));
      };
      pp$3.parseObj = function(isPattern, refDestructuringErrors) {
        var node2 = this.startNode(), first = true, propHash = {};
        node2.properties = [];
        this.next();
        while (!this.eat(types2.braceR)) {
          if (!first) {
            this.expect(types2.comma);
            if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types2.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          var prop = this.parseProperty(isPattern, refDestructuringErrors);
          if (!isPattern) {
            this.checkPropClash(prop, propHash, refDestructuringErrors);
          }
          node2.properties.push(prop);
        }
        return this.finishNode(node2, isPattern ? "ObjectPattern" : "ObjectExpression");
      };
      pp$3.parseProperty = function(isPattern, refDestructuringErrors) {
        var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
        if (this.options.ecmaVersion >= 9 && this.eat(types2.ellipsis)) {
          if (isPattern) {
            prop.argument = this.parseIdent(false);
            if (this.type === types2.comma) {
              this.raise(this.start, "Comma is not permitted after the rest element");
            }
            return this.finishNode(prop, "RestElement");
          }
          if (this.type === types2.parenL && refDestructuringErrors) {
            if (refDestructuringErrors.parenthesizedAssign < 0) {
              refDestructuringErrors.parenthesizedAssign = this.start;
            }
            if (refDestructuringErrors.parenthesizedBind < 0) {
              refDestructuringErrors.parenthesizedBind = this.start;
            }
          }
          prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
          if (this.type === types2.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
            refDestructuringErrors.trailingComma = this.start;
          }
          return this.finishNode(prop, "SpreadElement");
        }
        if (this.options.ecmaVersion >= 6) {
          prop.method = false;
          prop.shorthand = false;
          if (isPattern || refDestructuringErrors) {
            startPos = this.start;
            startLoc = this.startLoc;
          }
          if (!isPattern) {
            isGenerator = this.eat(types2.star);
          }
        }
        var containsEsc = this.containsEsc;
        this.parsePropertyName(prop);
        if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
          isAsync = true;
          isGenerator = this.options.ecmaVersion >= 9 && this.eat(types2.star);
          this.parsePropertyName(prop, refDestructuringErrors);
        } else {
          isAsync = false;
        }
        this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
        return this.finishNode(prop, "Property");
      };
      pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
        if ((isGenerator || isAsync) && this.type === types2.colon) {
          this.unexpected();
        }
        if (this.eat(types2.colon)) {
          prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
          prop.kind = "init";
        } else if (this.options.ecmaVersion >= 6 && this.type === types2.parenL) {
          if (isPattern) {
            this.unexpected();
          }
          prop.kind = "init";
          prop.method = true;
          prop.value = this.parseMethod(isGenerator, isAsync);
        } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && (this.type !== types2.comma && this.type !== types2.braceR && this.type !== types2.eq)) {
          if (isGenerator || isAsync) {
            this.unexpected();
          }
          prop.kind = prop.key.name;
          this.parsePropertyName(prop);
          prop.value = this.parseMethod(false);
          var paramCount = prop.kind === "get" ? 0 : 1;
          if (prop.value.params.length !== paramCount) {
            var start = prop.value.start;
            if (prop.kind === "get") {
              this.raiseRecoverable(start, "getter should have no params");
            } else {
              this.raiseRecoverable(start, "setter should have exactly one param");
            }
          } else {
            if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
              this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
            }
          }
        } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
          if (isGenerator || isAsync) {
            this.unexpected();
          }
          this.checkUnreserved(prop.key);
          if (prop.key.name === "await" && !this.awaitIdentPos) {
            this.awaitIdentPos = startPos;
          }
          prop.kind = "init";
          if (isPattern) {
            prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
          } else if (this.type === types2.eq && refDestructuringErrors) {
            if (refDestructuringErrors.shorthandAssign < 0) {
              refDestructuringErrors.shorthandAssign = this.start;
            }
            prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
          } else {
            prop.value = prop.key;
          }
          prop.shorthand = true;
        } else {
          this.unexpected();
        }
      };
      pp$3.parsePropertyName = function(prop) {
        if (this.options.ecmaVersion >= 6) {
          if (this.eat(types2.bracketL)) {
            prop.computed = true;
            prop.key = this.parseMaybeAssign();
            this.expect(types2.bracketR);
            return prop.key;
          } else {
            prop.computed = false;
          }
        }
        return prop.key = this.type === types2.num || this.type === types2.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
      };
      pp$3.initFunction = function(node2) {
        node2.id = null;
        if (this.options.ecmaVersion >= 6) {
          node2.generator = node2.expression = false;
        }
        if (this.options.ecmaVersion >= 8) {
          node2.async = false;
        }
      };
      pp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
        var node2 = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.initFunction(node2);
        if (this.options.ecmaVersion >= 6) {
          node2.generator = isGenerator;
        }
        if (this.options.ecmaVersion >= 8) {
          node2.async = !!isAsync;
        }
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        this.enterScope(functionFlags2(isAsync, node2.generator) | SCOPE_SUPER2 | (allowDirectSuper ? SCOPE_DIRECT_SUPER2 : 0));
        this.expect(types2.parenL);
        node2.params = this.parseBindingList(types2.parenR, false, this.options.ecmaVersion >= 8);
        this.checkYieldAwaitInDefaultParams();
        this.parseFunctionBody(node2, false, true);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node2, "FunctionExpression");
      };
      pp$3.parseArrowExpression = function(node2, params, isAsync) {
        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.enterScope(functionFlags2(isAsync, false) | SCOPE_ARROW2);
        this.initFunction(node2);
        if (this.options.ecmaVersion >= 8) {
          node2.async = !!isAsync;
        }
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        node2.params = this.toAssignableList(params, true);
        this.parseFunctionBody(node2, true, false);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node2, "ArrowFunctionExpression");
      };
      pp$3.parseFunctionBody = function(node2, isArrowFunction, isMethod) {
        var isExpression = isArrowFunction && this.type !== types2.braceL;
        var oldStrict = this.strict, useStrict = false;
        if (isExpression) {
          node2.body = this.parseMaybeAssign();
          node2.expression = true;
          this.checkParams(node2, false);
        } else {
          var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node2.params);
          if (!oldStrict || nonSimple) {
            useStrict = this.strictDirective(this.end);
            if (useStrict && nonSimple) {
              this.raiseRecoverable(node2.start, "Illegal 'use strict' directive in function with non-simple parameter list");
            }
          }
          var oldLabels = this.labels;
          this.labels = [];
          if (useStrict) {
            this.strict = true;
          }
          this.checkParams(node2, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node2.params));
          if (this.strict && node2.id) {
            this.checkLVal(node2.id, BIND_OUTSIDE2);
          }
          node2.body = this.parseBlock(false, void 0, useStrict && !oldStrict);
          node2.expression = false;
          this.adaptDirectivePrologue(node2.body.body);
          this.labels = oldLabels;
        }
        this.exitScope();
      };
      pp$3.isSimpleParamList = function(params) {
        for (var i = 0, list2 = params; i < list2.length; i += 1) {
          var param = list2[i];
          if (param.type !== "Identifier") {
            return false;
          }
        }
        return true;
      };
      pp$3.checkParams = function(node2, allowDuplicates) {
        var nameHash = {};
        for (var i = 0, list2 = node2.params; i < list2.length; i += 1) {
          var param = list2[i];
          this.checkLVal(param, BIND_VAR2, allowDuplicates ? null : nameHash);
        }
      };
      pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
        var elts = [], first = true;
        while (!this.eat(close)) {
          if (!first) {
            this.expect(types2.comma);
            if (allowTrailingComma && this.afterTrailingComma(close)) {
              break;
            }
          } else {
            first = false;
          }
          var elt = void 0;
          if (allowEmpty && this.type === types2.comma) {
            elt = null;
          } else if (this.type === types2.ellipsis) {
            elt = this.parseSpread(refDestructuringErrors);
            if (refDestructuringErrors && this.type === types2.comma && refDestructuringErrors.trailingComma < 0) {
              refDestructuringErrors.trailingComma = this.start;
            }
          } else {
            elt = this.parseMaybeAssign(false, refDestructuringErrors);
          }
          elts.push(elt);
        }
        return elts;
      };
      pp$3.checkUnreserved = function(ref2) {
        var start = ref2.start;
        var end = ref2.end;
        var name = ref2.name;
        if (this.inGenerator && name === "yield") {
          this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
        }
        if (this.inAsync && name === "await") {
          this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
        }
        if (this.keywords.test(name)) {
          this.raise(start, "Unexpected keyword '" + name + "'");
        }
        if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) {
          return;
        }
        var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
        if (re.test(name)) {
          if (!this.inAsync && name === "await") {
            this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
          }
          this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
        }
      };
      pp$3.parseIdent = function(liberal, isBinding) {
        var node2 = this.startNode();
        if (this.type === types2.name) {
          node2.name = this.value;
        } else if (this.type.keyword) {
          node2.name = this.type.keyword;
          if ((node2.name === "class" || node2.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
            this.context.pop();
          }
        } else {
          this.unexpected();
        }
        this.next(!!liberal);
        this.finishNode(node2, "Identifier");
        if (!liberal) {
          this.checkUnreserved(node2);
          if (node2.name === "await" && !this.awaitIdentPos) {
            this.awaitIdentPos = node2.start;
          }
        }
        return node2;
      };
      pp$3.parseYield = function(noIn) {
        if (!this.yieldPos) {
          this.yieldPos = this.start;
        }
        var node2 = this.startNode();
        this.next();
        if (this.type === types2.semi || this.canInsertSemicolon() || this.type !== types2.star && !this.type.startsExpr) {
          node2.delegate = false;
          node2.argument = null;
        } else {
          node2.delegate = this.eat(types2.star);
          node2.argument = this.parseMaybeAssign(noIn);
        }
        return this.finishNode(node2, "YieldExpression");
      };
      pp$3.parseAwait = function() {
        if (!this.awaitPos) {
          this.awaitPos = this.start;
        }
        var node2 = this.startNode();
        this.next();
        node2.argument = this.parseMaybeUnary(null, false);
        return this.finishNode(node2, "AwaitExpression");
      };
      var pp$4 = Parser2.prototype;
      pp$4.raise = function(pos, message) {
        var loc = getLineInfo2(this.input, pos);
        message += " (" + loc.line + ":" + loc.column + ")";
        var err = new SyntaxError(message);
        err.pos = pos;
        err.loc = loc;
        err.raisedAt = this.pos;
        throw err;
      };
      pp$4.raiseRecoverable = pp$4.raise;
      pp$4.curPosition = function() {
        if (this.options.locations) {
          return new Position3(this.curLine, this.pos - this.lineStart);
        }
      };
      var pp$5 = Parser2.prototype;
      var Scope2 = function Scope3(flags) {
        this.flags = flags;
        this.var = [];
        this.lexical = [];
        this.functions = [];
      };
      pp$5.enterScope = function(flags) {
        this.scopeStack.push(new Scope2(flags));
      };
      pp$5.exitScope = function() {
        this.scopeStack.pop();
      };
      pp$5.treatFunctionsAsVarInScope = function(scope) {
        return scope.flags & SCOPE_FUNCTION2 || !this.inModule && scope.flags & SCOPE_TOP;
      };
      pp$5.declareName = function(name, bindingType, pos) {
        var redeclared = false;
        if (bindingType === BIND_LEXICAL2) {
          var scope = this.currentScope();
          redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
          scope.lexical.push(name);
          if (this.inModule && scope.flags & SCOPE_TOP) {
            delete this.undefinedExports[name];
          }
        } else if (bindingType === BIND_SIMPLE_CATCH) {
          var scope$1 = this.currentScope();
          scope$1.lexical.push(name);
        } else if (bindingType === BIND_FUNCTION2) {
          var scope$2 = this.currentScope();
          if (this.treatFunctionsAsVar) {
            redeclared = scope$2.lexical.indexOf(name) > -1;
          } else {
            redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;
          }
          scope$2.functions.push(name);
        } else {
          for (var i = this.scopeStack.length - 1; i >= 0; --i) {
            var scope$3 = this.scopeStack[i];
            if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH2 && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
              redeclared = true;
              break;
            }
            scope$3.var.push(name);
            if (this.inModule && scope$3.flags & SCOPE_TOP) {
              delete this.undefinedExports[name];
            }
            if (scope$3.flags & SCOPE_VAR2) {
              break;
            }
          }
        }
        if (redeclared) {
          this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
        }
      };
      pp$5.checkLocalExport = function(id2) {
        if (this.scopeStack[0].lexical.indexOf(id2.name) === -1 && this.scopeStack[0].var.indexOf(id2.name) === -1) {
          this.undefinedExports[id2.name] = id2;
        }
      };
      pp$5.currentScope = function() {
        return this.scopeStack[this.scopeStack.length - 1];
      };
      pp$5.currentVarScope = function() {
        for (var i = this.scopeStack.length - 1; ; i--) {
          var scope = this.scopeStack[i];
          if (scope.flags & SCOPE_VAR2) {
            return scope;
          }
        }
      };
      pp$5.currentThisScope = function() {
        for (var i = this.scopeStack.length - 1; ; i--) {
          var scope = this.scopeStack[i];
          if (scope.flags & SCOPE_VAR2 && !(scope.flags & SCOPE_ARROW2)) {
            return scope;
          }
        }
      };
      var Node2 = function Node3(parser2, pos, loc) {
        this.type = "";
        this.start = pos;
        this.end = 0;
        if (parser2.options.locations) {
          this.loc = new SourceLocation2(parser2, loc);
        }
        if (parser2.options.directSourceFile) {
          this.sourceFile = parser2.options.directSourceFile;
        }
        if (parser2.options.ranges) {
          this.range = [pos, 0];
        }
      };
      var pp$6 = Parser2.prototype;
      pp$6.startNode = function() {
        return new Node2(this, this.start, this.startLoc);
      };
      pp$6.startNodeAt = function(pos, loc) {
        return new Node2(this, pos, loc);
      };
      function finishNodeAt(node2, type, pos, loc) {
        node2.type = type;
        node2.end = pos;
        if (this.options.locations) {
          node2.loc.end = loc;
        }
        if (this.options.ranges) {
          node2.range[1] = pos;
        }
        return node2;
      }
      pp$6.finishNode = function(node2, type) {
        return finishNodeAt.call(this, node2, type, this.lastTokEnd, this.lastTokEndLoc);
      };
      pp$6.finishNodeAt = function(node2, type, pos, loc) {
        return finishNodeAt.call(this, node2, type, pos, loc);
      };
      var TokContext2 = function TokContext3(token, isExpr, preserveSpace, override, generator) {
        this.token = token;
        this.isExpr = !!isExpr;
        this.preserveSpace = !!preserveSpace;
        this.override = override;
        this.generator = !!generator;
      };
      var types$12 = {
        b_stat: new TokContext2("{", false),
        b_expr: new TokContext2("{", true),
        b_tmpl: new TokContext2("${", false),
        p_stat: new TokContext2("(", false),
        p_expr: new TokContext2("(", true),
        q_tmpl: new TokContext2("`", true, true, function(p) {
          return p.tryReadTemplateToken();
        }),
        f_stat: new TokContext2("function", false),
        f_expr: new TokContext2("function", true),
        f_expr_gen: new TokContext2("function", true, false, null, true),
        f_gen: new TokContext2("function", false, false, null, true)
      };
      var pp$7 = Parser2.prototype;
      pp$7.initialContext = function() {
        return [types$12.b_stat];
      };
      pp$7.braceIsBlock = function(prevType) {
        var parent = this.curContext();
        if (parent === types$12.f_expr || parent === types$12.f_stat) {
          return true;
        }
        if (prevType === types2.colon && (parent === types$12.b_stat || parent === types$12.b_expr)) {
          return !parent.isExpr;
        }
        if (prevType === types2._return || prevType === types2.name && this.exprAllowed) {
          return lineBreak2.test(this.input.slice(this.lastTokEnd, this.start));
        }
        if (prevType === types2._else || prevType === types2.semi || prevType === types2.eof || prevType === types2.parenR || prevType === types2.arrow) {
          return true;
        }
        if (prevType === types2.braceL) {
          return parent === types$12.b_stat;
        }
        if (prevType === types2._var || prevType === types2._const || prevType === types2.name) {
          return false;
        }
        return !this.exprAllowed;
      };
      pp$7.inGeneratorContext = function() {
        for (var i = this.context.length - 1; i >= 1; i--) {
          var context = this.context[i];
          if (context.token === "function") {
            return context.generator;
          }
        }
        return false;
      };
      pp$7.updateContext = function(prevType) {
        var update, type = this.type;
        if (type.keyword && prevType === types2.dot) {
          this.exprAllowed = false;
        } else if (update = type.updateContext) {
          update.call(this, prevType);
        } else {
          this.exprAllowed = type.beforeExpr;
        }
      };
      types2.parenR.updateContext = types2.braceR.updateContext = function() {
        if (this.context.length === 1) {
          this.exprAllowed = true;
          return;
        }
        var out = this.context.pop();
        if (out === types$12.b_stat && this.curContext().token === "function") {
          out = this.context.pop();
        }
        this.exprAllowed = !out.isExpr;
      };
      types2.braceL.updateContext = function(prevType) {
        this.context.push(this.braceIsBlock(prevType) ? types$12.b_stat : types$12.b_expr);
        this.exprAllowed = true;
      };
      types2.dollarBraceL.updateContext = function() {
        this.context.push(types$12.b_tmpl);
        this.exprAllowed = true;
      };
      types2.parenL.updateContext = function(prevType) {
        var statementParens = prevType === types2._if || prevType === types2._for || prevType === types2._with || prevType === types2._while;
        this.context.push(statementParens ? types$12.p_stat : types$12.p_expr);
        this.exprAllowed = true;
      };
      types2.incDec.updateContext = function() {
      };
      types2._function.updateContext = types2._class.updateContext = function(prevType) {
        if (prevType.beforeExpr && prevType !== types2.semi && prevType !== types2._else && !(prevType === types2._return && lineBreak2.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types2.colon || prevType === types2.braceL) && this.curContext() === types$12.b_stat)) {
          this.context.push(types$12.f_expr);
        } else {
          this.context.push(types$12.f_stat);
        }
        this.exprAllowed = false;
      };
      types2.backQuote.updateContext = function() {
        if (this.curContext() === types$12.q_tmpl) {
          this.context.pop();
        } else {
          this.context.push(types$12.q_tmpl);
        }
        this.exprAllowed = false;
      };
      types2.star.updateContext = function(prevType) {
        if (prevType === types2._function) {
          var index = this.context.length - 1;
          if (this.context[index] === types$12.f_expr) {
            this.context[index] = types$12.f_expr_gen;
          } else {
            this.context[index] = types$12.f_gen;
          }
        }
        this.exprAllowed = true;
      };
      types2.name.updateContext = function(prevType) {
        var allowed = false;
        if (this.options.ecmaVersion >= 6 && prevType !== types2.dot) {
          if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
            allowed = true;
          }
        }
        this.exprAllowed = allowed;
      };
      var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
      var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
      var ecma11BinaryProperties = ecma10BinaryProperties;
      var unicodeBinaryProperties = {
        9: ecma9BinaryProperties,
        10: ecma10BinaryProperties,
        11: ecma11BinaryProperties
      };
      var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
      var ecma9ScriptValues = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
      var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
      var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
      var unicodeScriptValues = {
        9: ecma9ScriptValues,
        10: ecma10ScriptValues,
        11: ecma11ScriptValues
      };
      var data = {};
      function buildUnicodeData(ecmaVersion) {
        var d = data[ecmaVersion] = {
          binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
          nonBinary: {
            General_Category: wordsRegexp(unicodeGeneralCategoryValues),
            Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
          }
        };
        d.nonBinary.Script_Extensions = d.nonBinary.Script;
        d.nonBinary.gc = d.nonBinary.General_Category;
        d.nonBinary.sc = d.nonBinary.Script;
        d.nonBinary.scx = d.nonBinary.Script_Extensions;
      }
      buildUnicodeData(9);
      buildUnicodeData(10);
      buildUnicodeData(11);
      var pp$8 = Parser2.prototype;
      var RegExpValidationState = function RegExpValidationState2(parser2) {
        this.parser = parser2;
        this.validFlags = "gim" + (parser2.options.ecmaVersion >= 6 ? "uy" : "") + (parser2.options.ecmaVersion >= 9 ? "s" : "");
        this.unicodeProperties = data[parser2.options.ecmaVersion >= 11 ? 11 : parser2.options.ecmaVersion];
        this.source = "";
        this.flags = "";
        this.start = 0;
        this.switchU = false;
        this.switchN = false;
        this.pos = 0;
        this.lastIntValue = 0;
        this.lastStringValue = "";
        this.lastAssertionIsQuantifiable = false;
        this.numCapturingParens = 0;
        this.maxBackReference = 0;
        this.groupNames = [];
        this.backReferenceNames = [];
      };
      RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
        var unicode = flags.indexOf("u") !== -1;
        this.start = start | 0;
        this.source = pattern + "";
        this.flags = flags;
        this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
        this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
      };
      RegExpValidationState.prototype.raise = function raise(message) {
        this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
      };
      RegExpValidationState.prototype.at = function at(i, forceU) {
        if (forceU === void 0)
          forceU = false;
        var s = this.source;
        var l = s.length;
        if (i >= l) {
          return -1;
        }
        var c = s.charCodeAt(i);
        if (!(forceU || this.switchU) || c <= 55295 || c >= 57344 || i + 1 >= l) {
          return c;
        }
        var next = s.charCodeAt(i + 1);
        return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
      };
      RegExpValidationState.prototype.nextIndex = function nextIndex(i, forceU) {
        if (forceU === void 0)
          forceU = false;
        var s = this.source;
        var l = s.length;
        if (i >= l) {
          return l;
        }
        var c = s.charCodeAt(i), next;
        if (!(forceU || this.switchU) || c <= 55295 || c >= 57344 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 56320 || next > 57343) {
          return i + 1;
        }
        return i + 2;
      };
      RegExpValidationState.prototype.current = function current(forceU) {
        if (forceU === void 0)
          forceU = false;
        return this.at(this.pos, forceU);
      };
      RegExpValidationState.prototype.lookahead = function lookahead(forceU) {
        if (forceU === void 0)
          forceU = false;
        return this.at(this.nextIndex(this.pos, forceU), forceU);
      };
      RegExpValidationState.prototype.advance = function advance2(forceU) {
        if (forceU === void 0)
          forceU = false;
        this.pos = this.nextIndex(this.pos, forceU);
      };
      RegExpValidationState.prototype.eat = function eat(ch, forceU) {
        if (forceU === void 0)
          forceU = false;
        if (this.current(forceU) === ch) {
          this.advance(forceU);
          return true;
        }
        return false;
      };
      function codePointToString(ch) {
        if (ch <= 65535) {
          return String.fromCharCode(ch);
        }
        ch -= 65536;
        return String.fromCharCode((ch >> 10) + 55296, (ch & 1023) + 56320);
      }
      pp$8.validateRegExpFlags = function(state) {
        var validFlags = state.validFlags;
        var flags = state.flags;
        for (var i = 0; i < flags.length; i++) {
          var flag = flags.charAt(i);
          if (validFlags.indexOf(flag) === -1) {
            this.raise(state.start, "Invalid regular expression flag");
          }
          if (flags.indexOf(flag, i + 1) > -1) {
            this.raise(state.start, "Duplicate regular expression flag");
          }
        }
      };
      pp$8.validateRegExpPattern = function(state) {
        this.regexp_pattern(state);
        if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
          state.switchN = true;
          this.regexp_pattern(state);
        }
      };
      pp$8.regexp_pattern = function(state) {
        state.pos = 0;
        state.lastIntValue = 0;
        state.lastStringValue = "";
        state.lastAssertionIsQuantifiable = false;
        state.numCapturingParens = 0;
        state.maxBackReference = 0;
        state.groupNames.length = 0;
        state.backReferenceNames.length = 0;
        this.regexp_disjunction(state);
        if (state.pos !== state.source.length) {
          if (state.eat(41)) {
            state.raise("Unmatched ')'");
          }
          if (state.eat(93) || state.eat(125)) {
            state.raise("Lone quantifier brackets");
          }
        }
        if (state.maxBackReference > state.numCapturingParens) {
          state.raise("Invalid escape");
        }
        for (var i = 0, list2 = state.backReferenceNames; i < list2.length; i += 1) {
          var name = list2[i];
          if (state.groupNames.indexOf(name) === -1) {
            state.raise("Invalid named capture referenced");
          }
        }
      };
      pp$8.regexp_disjunction = function(state) {
        this.regexp_alternative(state);
        while (state.eat(124)) {
          this.regexp_alternative(state);
        }
        if (this.regexp_eatQuantifier(state, true)) {
          state.raise("Nothing to repeat");
        }
        if (state.eat(123)) {
          state.raise("Lone quantifier brackets");
        }
      };
      pp$8.regexp_alternative = function(state) {
        while (state.pos < state.source.length && this.regexp_eatTerm(state)) {
        }
      };
      pp$8.regexp_eatTerm = function(state) {
        if (this.regexp_eatAssertion(state)) {
          if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
            if (state.switchU) {
              state.raise("Invalid quantifier");
            }
          }
          return true;
        }
        if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
          this.regexp_eatQuantifier(state);
          return true;
        }
        return false;
      };
      pp$8.regexp_eatAssertion = function(state) {
        var start = state.pos;
        state.lastAssertionIsQuantifiable = false;
        if (state.eat(94) || state.eat(36)) {
          return true;
        }
        if (state.eat(92)) {
          if (state.eat(66) || state.eat(98)) {
            return true;
          }
          state.pos = start;
        }
        if (state.eat(40) && state.eat(63)) {
          var lookbehind = false;
          if (this.options.ecmaVersion >= 9) {
            lookbehind = state.eat(60);
          }
          if (state.eat(61) || state.eat(33)) {
            this.regexp_disjunction(state);
            if (!state.eat(41)) {
              state.raise("Unterminated group");
            }
            state.lastAssertionIsQuantifiable = !lookbehind;
            return true;
          }
        }
        state.pos = start;
        return false;
      };
      pp$8.regexp_eatQuantifier = function(state, noError) {
        if (noError === void 0)
          noError = false;
        if (this.regexp_eatQuantifierPrefix(state, noError)) {
          state.eat(63);
          return true;
        }
        return false;
      };
      pp$8.regexp_eatQuantifierPrefix = function(state, noError) {
        return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
      };
      pp$8.regexp_eatBracedQuantifier = function(state, noError) {
        var start = state.pos;
        if (state.eat(123)) {
          var min = 0, max = -1;
          if (this.regexp_eatDecimalDigits(state)) {
            min = state.lastIntValue;
            if (state.eat(44) && this.regexp_eatDecimalDigits(state)) {
              max = state.lastIntValue;
            }
            if (state.eat(125)) {
              if (max !== -1 && max < min && !noError) {
                state.raise("numbers out of order in {} quantifier");
              }
              return true;
            }
          }
          if (state.switchU && !noError) {
            state.raise("Incomplete quantifier");
          }
          state.pos = start;
        }
        return false;
      };
      pp$8.regexp_eatAtom = function(state) {
        return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
      };
      pp$8.regexp_eatReverseSolidusAtomEscape = function(state) {
        var start = state.pos;
        if (state.eat(92)) {
          if (this.regexp_eatAtomEscape(state)) {
            return true;
          }
          state.pos = start;
        }
        return false;
      };
      pp$8.regexp_eatUncapturingGroup = function(state) {
        var start = state.pos;
        if (state.eat(40)) {
          if (state.eat(63) && state.eat(58)) {
            this.regexp_disjunction(state);
            if (state.eat(41)) {
              return true;
            }
            state.raise("Unterminated group");
          }
          state.pos = start;
        }
        return false;
      };
      pp$8.regexp_eatCapturingGroup = function(state) {
        if (state.eat(40)) {
          if (this.options.ecmaVersion >= 9) {
            this.regexp_groupSpecifier(state);
          } else if (state.current() === 63) {
            state.raise("Invalid group");
          }
          this.regexp_disjunction(state);
          if (state.eat(41)) {
            state.numCapturingParens += 1;
            return true;
          }
          state.raise("Unterminated group");
        }
        return false;
      };
      pp$8.regexp_eatExtendedAtom = function(state) {
        return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
      };
      pp$8.regexp_eatInvalidBracedQuantifier = function(state) {
        if (this.regexp_eatBracedQuantifier(state, true)) {
          state.raise("Nothing to repeat");
        }
        return false;
      };
      pp$8.regexp_eatSyntaxCharacter = function(state) {
        var ch = state.current();
        if (isSyntaxCharacter(ch)) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      function isSyntaxCharacter(ch) {
        return ch === 36 || ch >= 40 && ch <= 43 || ch === 46 || ch === 63 || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
      }
      pp$8.regexp_eatPatternCharacters = function(state) {
        var start = state.pos;
        var ch = 0;
        while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
          state.advance();
        }
        return state.pos !== start;
      };
      pp$8.regexp_eatExtendedPatternCharacter = function(state) {
        var ch = state.current();
        if (ch !== -1 && ch !== 36 && !(ch >= 40 && ch <= 43) && ch !== 46 && ch !== 63 && ch !== 91 && ch !== 94 && ch !== 124) {
          state.advance();
          return true;
        }
        return false;
      };
      pp$8.regexp_groupSpecifier = function(state) {
        if (state.eat(63)) {
          if (this.regexp_eatGroupName(state)) {
            if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
              state.raise("Duplicate capture group name");
            }
            state.groupNames.push(state.lastStringValue);
            return;
          }
          state.raise("Invalid group");
        }
      };
      pp$8.regexp_eatGroupName = function(state) {
        state.lastStringValue = "";
        if (state.eat(60)) {
          if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62)) {
            return true;
          }
          state.raise("Invalid capture group name");
        }
        return false;
      };
      pp$8.regexp_eatRegExpIdentifierName = function(state) {
        state.lastStringValue = "";
        if (this.regexp_eatRegExpIdentifierStart(state)) {
          state.lastStringValue += codePointToString(state.lastIntValue);
          while (this.regexp_eatRegExpIdentifierPart(state)) {
            state.lastStringValue += codePointToString(state.lastIntValue);
          }
          return true;
        }
        return false;
      };
      pp$8.regexp_eatRegExpIdentifierStart = function(state) {
        var start = state.pos;
        var forceU = this.options.ecmaVersion >= 11;
        var ch = state.current(forceU);
        state.advance(forceU);
        if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
          ch = state.lastIntValue;
        }
        if (isRegExpIdentifierStart(ch)) {
          state.lastIntValue = ch;
          return true;
        }
        state.pos = start;
        return false;
      };
      function isRegExpIdentifierStart(ch) {
        return isIdentifierStart2(ch, true) || ch === 36 || ch === 95;
      }
      pp$8.regexp_eatRegExpIdentifierPart = function(state) {
        var start = state.pos;
        var forceU = this.options.ecmaVersion >= 11;
        var ch = state.current(forceU);
        state.advance(forceU);
        if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
          ch = state.lastIntValue;
        }
        if (isRegExpIdentifierPart(ch)) {
          state.lastIntValue = ch;
          return true;
        }
        state.pos = start;
        return false;
      };
      function isRegExpIdentifierPart(ch) {
        return isIdentifierChar2(ch, true) || ch === 36 || ch === 95 || ch === 8204 || ch === 8205;
      }
      pp$8.regexp_eatAtomEscape = function(state) {
        if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
          return true;
        }
        if (state.switchU) {
          if (state.current() === 99) {
            state.raise("Invalid unicode escape");
          }
          state.raise("Invalid escape");
        }
        return false;
      };
      pp$8.regexp_eatBackReference = function(state) {
        var start = state.pos;
        if (this.regexp_eatDecimalEscape(state)) {
          var n2 = state.lastIntValue;
          if (state.switchU) {
            if (n2 > state.maxBackReference) {
              state.maxBackReference = n2;
            }
            return true;
          }
          if (n2 <= state.numCapturingParens) {
            return true;
          }
          state.pos = start;
        }
        return false;
      };
      pp$8.regexp_eatKGroupName = function(state) {
        if (state.eat(107)) {
          if (this.regexp_eatGroupName(state)) {
            state.backReferenceNames.push(state.lastStringValue);
            return true;
          }
          state.raise("Invalid named reference");
        }
        return false;
      };
      pp$8.regexp_eatCharacterEscape = function(state) {
        return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
      };
      pp$8.regexp_eatCControlLetter = function(state) {
        var start = state.pos;
        if (state.eat(99)) {
          if (this.regexp_eatControlLetter(state)) {
            return true;
          }
          state.pos = start;
        }
        return false;
      };
      pp$8.regexp_eatZero = function(state) {
        if (state.current() === 48 && !isDecimalDigit(state.lookahead())) {
          state.lastIntValue = 0;
          state.advance();
          return true;
        }
        return false;
      };
      pp$8.regexp_eatControlEscape = function(state) {
        var ch = state.current();
        if (ch === 116) {
          state.lastIntValue = 9;
          state.advance();
          return true;
        }
        if (ch === 110) {
          state.lastIntValue = 10;
          state.advance();
          return true;
        }
        if (ch === 118) {
          state.lastIntValue = 11;
          state.advance();
          return true;
        }
        if (ch === 102) {
          state.lastIntValue = 12;
          state.advance();
          return true;
        }
        if (ch === 114) {
          state.lastIntValue = 13;
          state.advance();
          return true;
        }
        return false;
      };
      pp$8.regexp_eatControlLetter = function(state) {
        var ch = state.current();
        if (isControlLetter(ch)) {
          state.lastIntValue = ch % 32;
          state.advance();
          return true;
        }
        return false;
      };
      function isControlLetter(ch) {
        return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
      }
      pp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
        if (forceU === void 0)
          forceU = false;
        var start = state.pos;
        var switchU = forceU || state.switchU;
        if (state.eat(117)) {
          if (this.regexp_eatFixedHexDigits(state, 4)) {
            var lead = state.lastIntValue;
            if (switchU && lead >= 55296 && lead <= 56319) {
              var leadSurrogateEnd = state.pos;
              if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
                var trail = state.lastIntValue;
                if (trail >= 56320 && trail <= 57343) {
                  state.lastIntValue = (lead - 55296) * 1024 + (trail - 56320) + 65536;
                  return true;
                }
              }
              state.pos = leadSurrogateEnd;
              state.lastIntValue = lead;
            }
            return true;
          }
          if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && isValidUnicode(state.lastIntValue)) {
            return true;
          }
          if (switchU) {
            state.raise("Invalid unicode escape");
          }
          state.pos = start;
        }
        return false;
      };
      function isValidUnicode(ch) {
        return ch >= 0 && ch <= 1114111;
      }
      pp$8.regexp_eatIdentityEscape = function(state) {
        if (state.switchU) {
          if (this.regexp_eatSyntaxCharacter(state)) {
            return true;
          }
          if (state.eat(47)) {
            state.lastIntValue = 47;
            return true;
          }
          return false;
        }
        var ch = state.current();
        if (ch !== 99 && (!state.switchN || ch !== 107)) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      pp$8.regexp_eatDecimalEscape = function(state) {
        state.lastIntValue = 0;
        var ch = state.current();
        if (ch >= 49 && ch <= 57) {
          do {
            state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
            state.advance();
          } while ((ch = state.current()) >= 48 && ch <= 57);
          return true;
        }
        return false;
      };
      pp$8.regexp_eatCharacterClassEscape = function(state) {
        var ch = state.current();
        if (isCharacterClassEscape(ch)) {
          state.lastIntValue = -1;
          state.advance();
          return true;
        }
        if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 80 || ch === 112)) {
          state.lastIntValue = -1;
          state.advance();
          if (state.eat(123) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(125)) {
            return true;
          }
          state.raise("Invalid property name");
        }
        return false;
      };
      function isCharacterClassEscape(ch) {
        return ch === 100 || ch === 68 || ch === 115 || ch === 83 || ch === 119 || ch === 87;
      }
      pp$8.regexp_eatUnicodePropertyValueExpression = function(state) {
        var start = state.pos;
        if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
          var name = state.lastStringValue;
          if (this.regexp_eatUnicodePropertyValue(state)) {
            var value = state.lastStringValue;
            this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
            return true;
          }
        }
        state.pos = start;
        if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
          var nameOrValue = state.lastStringValue;
          this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
          return true;
        }
        return false;
      };
      pp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
        if (!has3(state.unicodeProperties.nonBinary, name)) {
          state.raise("Invalid property name");
        }
        if (!state.unicodeProperties.nonBinary[name].test(value)) {
          state.raise("Invalid property value");
        }
      };
      pp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
        if (!state.unicodeProperties.binary.test(nameOrValue)) {
          state.raise("Invalid property name");
        }
      };
      pp$8.regexp_eatUnicodePropertyName = function(state) {
        var ch = 0;
        state.lastStringValue = "";
        while (isUnicodePropertyNameCharacter(ch = state.current())) {
          state.lastStringValue += codePointToString(ch);
          state.advance();
        }
        return state.lastStringValue !== "";
      };
      function isUnicodePropertyNameCharacter(ch) {
        return isControlLetter(ch) || ch === 95;
      }
      pp$8.regexp_eatUnicodePropertyValue = function(state) {
        var ch = 0;
        state.lastStringValue = "";
        while (isUnicodePropertyValueCharacter(ch = state.current())) {
          state.lastStringValue += codePointToString(ch);
          state.advance();
        }
        return state.lastStringValue !== "";
      };
      function isUnicodePropertyValueCharacter(ch) {
        return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
      }
      pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
        return this.regexp_eatUnicodePropertyValue(state);
      };
      pp$8.regexp_eatCharacterClass = function(state) {
        if (state.eat(91)) {
          state.eat(94);
          this.regexp_classRanges(state);
          if (state.eat(93)) {
            return true;
          }
          state.raise("Unterminated character class");
        }
        return false;
      };
      pp$8.regexp_classRanges = function(state) {
        while (this.regexp_eatClassAtom(state)) {
          var left = state.lastIntValue;
          if (state.eat(45) && this.regexp_eatClassAtom(state)) {
            var right = state.lastIntValue;
            if (state.switchU && (left === -1 || right === -1)) {
              state.raise("Invalid character class");
            }
            if (left !== -1 && right !== -1 && left > right) {
              state.raise("Range out of order in character class");
            }
          }
        }
      };
      pp$8.regexp_eatClassAtom = function(state) {
        var start = state.pos;
        if (state.eat(92)) {
          if (this.regexp_eatClassEscape(state)) {
            return true;
          }
          if (state.switchU) {
            var ch$1 = state.current();
            if (ch$1 === 99 || isOctalDigit(ch$1)) {
              state.raise("Invalid class escape");
            }
            state.raise("Invalid escape");
          }
          state.pos = start;
        }
        var ch = state.current();
        if (ch !== 93) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      pp$8.regexp_eatClassEscape = function(state) {
        var start = state.pos;
        if (state.eat(98)) {
          state.lastIntValue = 8;
          return true;
        }
        if (state.switchU && state.eat(45)) {
          state.lastIntValue = 45;
          return true;
        }
        if (!state.switchU && state.eat(99)) {
          if (this.regexp_eatClassControlLetter(state)) {
            return true;
          }
          state.pos = start;
        }
        return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
      };
      pp$8.regexp_eatClassControlLetter = function(state) {
        var ch = state.current();
        if (isDecimalDigit(ch) || ch === 95) {
          state.lastIntValue = ch % 32;
          state.advance();
          return true;
        }
        return false;
      };
      pp$8.regexp_eatHexEscapeSequence = function(state) {
        var start = state.pos;
        if (state.eat(120)) {
          if (this.regexp_eatFixedHexDigits(state, 2)) {
            return true;
          }
          if (state.switchU) {
            state.raise("Invalid escape");
          }
          state.pos = start;
        }
        return false;
      };
      pp$8.regexp_eatDecimalDigits = function(state) {
        var start = state.pos;
        var ch = 0;
        state.lastIntValue = 0;
        while (isDecimalDigit(ch = state.current())) {
          state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
          state.advance();
        }
        return state.pos !== start;
      };
      function isDecimalDigit(ch) {
        return ch >= 48 && ch <= 57;
      }
      pp$8.regexp_eatHexDigits = function(state) {
        var start = state.pos;
        var ch = 0;
        state.lastIntValue = 0;
        while (isHexDigit(ch = state.current())) {
          state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
          state.advance();
        }
        return state.pos !== start;
      };
      function isHexDigit(ch) {
        return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
      }
      function hexToInt(ch) {
        if (ch >= 65 && ch <= 70) {
          return 10 + (ch - 65);
        }
        if (ch >= 97 && ch <= 102) {
          return 10 + (ch - 97);
        }
        return ch - 48;
      }
      pp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {
        if (this.regexp_eatOctalDigit(state)) {
          var n1 = state.lastIntValue;
          if (this.regexp_eatOctalDigit(state)) {
            var n2 = state.lastIntValue;
            if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
              state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
            } else {
              state.lastIntValue = n1 * 8 + n2;
            }
          } else {
            state.lastIntValue = n1;
          }
          return true;
        }
        return false;
      };
      pp$8.regexp_eatOctalDigit = function(state) {
        var ch = state.current();
        if (isOctalDigit(ch)) {
          state.lastIntValue = ch - 48;
          state.advance();
          return true;
        }
        state.lastIntValue = 0;
        return false;
      };
      function isOctalDigit(ch) {
        return ch >= 48 && ch <= 55;
      }
      pp$8.regexp_eatFixedHexDigits = function(state, length2) {
        var start = state.pos;
        state.lastIntValue = 0;
        for (var i = 0; i < length2; ++i) {
          var ch = state.current();
          if (!isHexDigit(ch)) {
            state.pos = start;
            return false;
          }
          state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
          state.advance();
        }
        return true;
      };
      var Token2 = function Token3(p) {
        this.type = p.type;
        this.value = p.value;
        this.start = p.start;
        this.end = p.end;
        if (p.options.locations) {
          this.loc = new SourceLocation2(p, p.startLoc, p.endLoc);
        }
        if (p.options.ranges) {
          this.range = [p.start, p.end];
        }
      };
      var pp$9 = Parser2.prototype;
      pp$9.next = function(ignoreEscapeSequenceInKeyword) {
        if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword);
        }
        if (this.options.onToken) {
          this.options.onToken(new Token2(this));
        }
        this.lastTokEnd = this.end;
        this.lastTokStart = this.start;
        this.lastTokEndLoc = this.endLoc;
        this.lastTokStartLoc = this.startLoc;
        this.nextToken();
      };
      pp$9.getToken = function() {
        this.next();
        return new Token2(this);
      };
      if (typeof Symbol !== "undefined") {
        pp$9[Symbol.iterator] = function() {
          var this$1 = this;
          return {
            next: function() {
              var token = this$1.getToken();
              return {
                done: token.type === types2.eof,
                value: token
              };
            }
          };
        };
      }
      pp$9.curContext = function() {
        return this.context[this.context.length - 1];
      };
      pp$9.nextToken = function() {
        var curContext = this.curContext();
        if (!curContext || !curContext.preserveSpace) {
          this.skipSpace();
        }
        this.start = this.pos;
        if (this.options.locations) {
          this.startLoc = this.curPosition();
        }
        if (this.pos >= this.input.length) {
          return this.finishToken(types2.eof);
        }
        if (curContext.override) {
          return curContext.override(this);
        } else {
          this.readToken(this.fullCharCodeAtPos());
        }
      };
      pp$9.readToken = function(code) {
        if (isIdentifierStart2(code, this.options.ecmaVersion >= 6) || code === 92) {
          return this.readWord();
        }
        return this.getTokenFromCode(code);
      };
      pp$9.fullCharCodeAtPos = function() {
        var code = this.input.charCodeAt(this.pos);
        if (code <= 55295 || code >= 57344) {
          return code;
        }
        var next = this.input.charCodeAt(this.pos + 1);
        return (code << 10) + next - 56613888;
      };
      pp$9.skipBlockComment = function() {
        var startLoc = this.options.onComment && this.curPosition();
        var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
        if (end === -1) {
          this.raise(this.pos - 2, "Unterminated comment");
        }
        this.pos = end + 2;
        if (this.options.locations) {
          lineBreakG2.lastIndex = start;
          var match;
          while ((match = lineBreakG2.exec(this.input)) && match.index < this.pos) {
            ++this.curLine;
            this.lineStart = match.index + match[0].length;
          }
        }
        if (this.options.onComment) {
          this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
        }
      };
      pp$9.skipLineComment = function(startSkip) {
        var start = this.pos;
        var startLoc = this.options.onComment && this.curPosition();
        var ch = this.input.charCodeAt(this.pos += startSkip);
        while (this.pos < this.input.length && !isNewLine2(ch)) {
          ch = this.input.charCodeAt(++this.pos);
        }
        if (this.options.onComment) {
          this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
        }
      };
      pp$9.skipSpace = function() {
        loop:
          while (this.pos < this.input.length) {
            var ch = this.input.charCodeAt(this.pos);
            switch (ch) {
              case 32:
              case 160:
                ++this.pos;
                break;
              case 13:
                if (this.input.charCodeAt(this.pos + 1) === 10) {
                  ++this.pos;
                }
              case 10:
              case 8232:
              case 8233:
                ++this.pos;
                if (this.options.locations) {
                  ++this.curLine;
                  this.lineStart = this.pos;
                }
                break;
              case 47:
                switch (this.input.charCodeAt(this.pos + 1)) {
                  case 42:
                    this.skipBlockComment();
                    break;
                  case 47:
                    this.skipLineComment(2);
                    break;
                  default:
                    break loop;
                }
                break;
              default:
                if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                  ++this.pos;
                } else {
                  break loop;
                }
            }
          }
      };
      pp$9.finishToken = function(type, val) {
        this.end = this.pos;
        if (this.options.locations) {
          this.endLoc = this.curPosition();
        }
        var prevType = this.type;
        this.type = type;
        this.value = val;
        this.updateContext(prevType);
      };
      pp$9.readToken_dot = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next >= 48 && next <= 57) {
          return this.readNumber(true);
        }
        var next2 = this.input.charCodeAt(this.pos + 2);
        if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
          this.pos += 3;
          return this.finishToken(types2.ellipsis);
        } else {
          ++this.pos;
          return this.finishToken(types2.dot);
        }
      };
      pp$9.readToken_slash = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (this.exprAllowed) {
          ++this.pos;
          return this.readRegexp();
        }
        if (next === 61) {
          return this.finishOp(types2.assign, 2);
        }
        return this.finishOp(types2.slash, 1);
      };
      pp$9.readToken_mult_modulo_exp = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        var size = 1;
        var tokentype = code === 42 ? types2.star : types2.modulo;
        if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
          ++size;
          tokentype = types2.starstar;
          next = this.input.charCodeAt(this.pos + 2);
        }
        if (next === 61) {
          return this.finishOp(types2.assign, size + 1);
        }
        return this.finishOp(tokentype, size);
      };
      pp$9.readToken_pipe_amp = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === code) {
          if (this.options.ecmaVersion >= 12) {
            var next2 = this.input.charCodeAt(this.pos + 2);
            if (next2 === 61) {
              return this.finishOp(types2.assign, 3);
            }
          }
          return this.finishOp(code === 124 ? types2.logicalOR : types2.logicalAND, 2);
        }
        if (next === 61) {
          return this.finishOp(types2.assign, 2);
        }
        return this.finishOp(code === 124 ? types2.bitwiseOR : types2.bitwiseAND, 1);
      };
      pp$9.readToken_caret = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 61) {
          return this.finishOp(types2.assign, 2);
        }
        return this.finishOp(types2.bitwiseXOR, 1);
      };
      pp$9.readToken_plus_min = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === code) {
          if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak2.test(this.input.slice(this.lastTokEnd, this.pos)))) {
            this.skipLineComment(3);
            this.skipSpace();
            return this.nextToken();
          }
          return this.finishOp(types2.incDec, 2);
        }
        if (next === 61) {
          return this.finishOp(types2.assign, 2);
        }
        return this.finishOp(types2.plusMin, 1);
      };
      pp$9.readToken_lt_gt = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        var size = 1;
        if (next === code) {
          size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
          if (this.input.charCodeAt(this.pos + size) === 61) {
            return this.finishOp(types2.assign, size + 1);
          }
          return this.finishOp(types2.bitShift, size);
        }
        if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
          this.skipLineComment(4);
          this.skipSpace();
          return this.nextToken();
        }
        if (next === 61) {
          size = 2;
        }
        return this.finishOp(types2.relational, size);
      };
      pp$9.readToken_eq_excl = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 61) {
          return this.finishOp(types2.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
        }
        if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
          this.pos += 2;
          return this.finishToken(types2.arrow);
        }
        return this.finishOp(code === 61 ? types2.eq : types2.prefix, 1);
      };
      pp$9.readToken_question = function() {
        var ecmaVersion = this.options.ecmaVersion;
        if (ecmaVersion >= 11) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === 46) {
            var next2 = this.input.charCodeAt(this.pos + 2);
            if (next2 < 48 || next2 > 57) {
              return this.finishOp(types2.questionDot, 2);
            }
          }
          if (next === 63) {
            if (ecmaVersion >= 12) {
              var next2$1 = this.input.charCodeAt(this.pos + 2);
              if (next2$1 === 61) {
                return this.finishOp(types2.assign, 3);
              }
            }
            return this.finishOp(types2.coalesce, 2);
          }
        }
        return this.finishOp(types2.question, 1);
      };
      pp$9.getTokenFromCode = function(code) {
        switch (code) {
          case 46:
            return this.readToken_dot();
          case 40:
            ++this.pos;
            return this.finishToken(types2.parenL);
          case 41:
            ++this.pos;
            return this.finishToken(types2.parenR);
          case 59:
            ++this.pos;
            return this.finishToken(types2.semi);
          case 44:
            ++this.pos;
            return this.finishToken(types2.comma);
          case 91:
            ++this.pos;
            return this.finishToken(types2.bracketL);
          case 93:
            ++this.pos;
            return this.finishToken(types2.bracketR);
          case 123:
            ++this.pos;
            return this.finishToken(types2.braceL);
          case 125:
            ++this.pos;
            return this.finishToken(types2.braceR);
          case 58:
            ++this.pos;
            return this.finishToken(types2.colon);
          case 96:
            if (this.options.ecmaVersion < 6) {
              break;
            }
            ++this.pos;
            return this.finishToken(types2.backQuote);
          case 48:
            var next = this.input.charCodeAt(this.pos + 1);
            if (next === 120 || next === 88) {
              return this.readRadixNumber(16);
            }
            if (this.options.ecmaVersion >= 6) {
              if (next === 111 || next === 79) {
                return this.readRadixNumber(8);
              }
              if (next === 98 || next === 66) {
                return this.readRadixNumber(2);
              }
            }
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            return this.readNumber(false);
          case 34:
          case 39:
            return this.readString(code);
          case 47:
            return this.readToken_slash();
          case 37:
          case 42:
            return this.readToken_mult_modulo_exp(code);
          case 124:
          case 38:
            return this.readToken_pipe_amp(code);
          case 94:
            return this.readToken_caret();
          case 43:
          case 45:
            return this.readToken_plus_min(code);
          case 60:
          case 62:
            return this.readToken_lt_gt(code);
          case 61:
          case 33:
            return this.readToken_eq_excl(code);
          case 63:
            return this.readToken_question();
          case 126:
            return this.finishOp(types2.prefix, 1);
        }
        this.raise(this.pos, "Unexpected character '" + codePointToString$1(code) + "'");
      };
      pp$9.finishOp = function(type, size) {
        var str = this.input.slice(this.pos, this.pos + size);
        this.pos += size;
        return this.finishToken(type, str);
      };
      pp$9.readRegexp = function() {
        var escaped, inClass, start = this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(start, "Unterminated regular expression");
          }
          var ch = this.input.charAt(this.pos);
          if (lineBreak2.test(ch)) {
            this.raise(start, "Unterminated regular expression");
          }
          if (!escaped) {
            if (ch === "[") {
              inClass = true;
            } else if (ch === "]" && inClass) {
              inClass = false;
            } else if (ch === "/" && !inClass) {
              break;
            }
            escaped = ch === "\\";
          } else {
            escaped = false;
          }
          ++this.pos;
        }
        var pattern = this.input.slice(start, this.pos);
        ++this.pos;
        var flagsStart = this.pos;
        var flags = this.readWord1();
        if (this.containsEsc) {
          this.unexpected(flagsStart);
        }
        var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
        state.reset(start, pattern, flags);
        this.validateRegExpFlags(state);
        this.validateRegExpPattern(state);
        var value = null;
        try {
          value = new RegExp(pattern, flags);
        } catch (e) {
        }
        return this.finishToken(types2.regexp, { pattern, flags, value });
      };
      pp$9.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
        var allowSeparators = this.options.ecmaVersion >= 12 && len === void 0;
        var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;
        var start = this.pos, total = 0, lastCode = 0;
        for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {
          var code = this.input.charCodeAt(this.pos), val = void 0;
          if (allowSeparators && code === 95) {
            if (isLegacyOctalNumericLiteral) {
              this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals");
            }
            if (lastCode === 95) {
              this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore");
            }
            if (i === 0) {
              this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits");
            }
            lastCode = code;
            continue;
          }
          if (code >= 97) {
            val = code - 97 + 10;
          } else if (code >= 65) {
            val = code - 65 + 10;
          } else if (code >= 48 && code <= 57) {
            val = code - 48;
          } else {
            val = Infinity;
          }
          if (val >= radix) {
            break;
          }
          lastCode = code;
          total = total * radix + val;
        }
        if (allowSeparators && lastCode === 95) {
          this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits");
        }
        if (this.pos === start || len != null && this.pos - start !== len) {
          return null;
        }
        return total;
      };
      function stringToNumber(str, isLegacyOctalNumericLiteral) {
        if (isLegacyOctalNumericLiteral) {
          return parseInt(str, 8);
        }
        return parseFloat(str.replace(/_/g, ""));
      }
      function stringToBigInt(str) {
        if (typeof BigInt !== "function") {
          return null;
        }
        return BigInt(str.replace(/_/g, ""));
      }
      pp$9.readRadixNumber = function(radix) {
        var start = this.pos;
        this.pos += 2;
        var val = this.readInt(radix);
        if (val == null) {
          this.raise(this.start + 2, "Expected number in radix " + radix);
        }
        if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
          val = stringToBigInt(this.input.slice(start, this.pos));
          ++this.pos;
        } else if (isIdentifierStart2(this.fullCharCodeAtPos())) {
          this.raise(this.pos, "Identifier directly after number");
        }
        return this.finishToken(types2.num, val);
      };
      pp$9.readNumber = function(startsWithDot) {
        var start = this.pos;
        if (!startsWithDot && this.readInt(10, void 0, true) === null) {
          this.raise(start, "Invalid number");
        }
        var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
        if (octal && this.strict) {
          this.raise(start, "Invalid number");
        }
        var next = this.input.charCodeAt(this.pos);
        if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
          var val$1 = stringToBigInt(this.input.slice(start, this.pos));
          ++this.pos;
          if (isIdentifierStart2(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number");
          }
          return this.finishToken(types2.num, val$1);
        }
        if (octal && /[89]/.test(this.input.slice(start, this.pos))) {
          octal = false;
        }
        if (next === 46 && !octal) {
          ++this.pos;
          this.readInt(10);
          next = this.input.charCodeAt(this.pos);
        }
        if ((next === 69 || next === 101) && !octal) {
          next = this.input.charCodeAt(++this.pos);
          if (next === 43 || next === 45) {
            ++this.pos;
          }
          if (this.readInt(10) === null) {
            this.raise(start, "Invalid number");
          }
        }
        if (isIdentifierStart2(this.fullCharCodeAtPos())) {
          this.raise(this.pos, "Identifier directly after number");
        }
        var val = stringToNumber(this.input.slice(start, this.pos), octal);
        return this.finishToken(types2.num, val);
      };
      pp$9.readCodePoint = function() {
        var ch = this.input.charCodeAt(this.pos), code;
        if (ch === 123) {
          if (this.options.ecmaVersion < 6) {
            this.unexpected();
          }
          var codePos = ++this.pos;
          code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
          ++this.pos;
          if (code > 1114111) {
            this.invalidStringToken(codePos, "Code point out of bounds");
          }
        } else {
          code = this.readHexChar(4);
        }
        return code;
      };
      function codePointToString$1(code) {
        if (code <= 65535) {
          return String.fromCharCode(code);
        }
        code -= 65536;
        return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
      }
      pp$9.readString = function(quote) {
        var out = "", chunkStart = ++this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(this.start, "Unterminated string constant");
          }
          var ch = this.input.charCodeAt(this.pos);
          if (ch === quote) {
            break;
          }
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.pos);
            out += this.readEscapedChar(false);
            chunkStart = this.pos;
          } else {
            if (isNewLine2(ch, this.options.ecmaVersion >= 10)) {
              this.raise(this.start, "Unterminated string constant");
            }
            ++this.pos;
          }
        }
        out += this.input.slice(chunkStart, this.pos++);
        return this.finishToken(types2.string, out);
      };
      var INVALID_TEMPLATE_ESCAPE_ERROR = {};
      pp$9.tryReadTemplateToken = function() {
        this.inTemplateElement = true;
        try {
          this.readTmplToken();
        } catch (err) {
          if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
            this.readInvalidTemplateToken();
          } else {
            throw err;
          }
        }
        this.inTemplateElement = false;
      };
      pp$9.invalidStringToken = function(position, message) {
        if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
          throw INVALID_TEMPLATE_ESCAPE_ERROR;
        } else {
          this.raise(position, message);
        }
      };
      pp$9.readTmplToken = function() {
        var out = "", chunkStart = this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(this.start, "Unterminated template");
          }
          var ch = this.input.charCodeAt(this.pos);
          if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
            if (this.pos === this.start && (this.type === types2.template || this.type === types2.invalidTemplate)) {
              if (ch === 36) {
                this.pos += 2;
                return this.finishToken(types2.dollarBraceL);
              } else {
                ++this.pos;
                return this.finishToken(types2.backQuote);
              }
            }
            out += this.input.slice(chunkStart, this.pos);
            return this.finishToken(types2.template, out);
          }
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.pos);
            out += this.readEscapedChar(true);
            chunkStart = this.pos;
          } else if (isNewLine2(ch)) {
            out += this.input.slice(chunkStart, this.pos);
            ++this.pos;
            switch (ch) {
              case 13:
                if (this.input.charCodeAt(this.pos) === 10) {
                  ++this.pos;
                }
              case 10:
                out += "\n";
                break;
              default:
                out += String.fromCharCode(ch);
                break;
            }
            if (this.options.locations) {
              ++this.curLine;
              this.lineStart = this.pos;
            }
            chunkStart = this.pos;
          } else {
            ++this.pos;
          }
        }
      };
      pp$9.readInvalidTemplateToken = function() {
        for (; this.pos < this.input.length; this.pos++) {
          switch (this.input[this.pos]) {
            case "\\":
              ++this.pos;
              break;
            case "$":
              if (this.input[this.pos + 1] !== "{") {
                break;
              }
            case "`":
              return this.finishToken(types2.invalidTemplate, this.input.slice(this.start, this.pos));
          }
        }
        this.raise(this.start, "Unterminated template");
      };
      pp$9.readEscapedChar = function(inTemplate) {
        var ch = this.input.charCodeAt(++this.pos);
        ++this.pos;
        switch (ch) {
          case 110:
            return "\n";
          case 114:
            return "\r";
          case 120:
            return String.fromCharCode(this.readHexChar(2));
          case 117:
            return codePointToString$1(this.readCodePoint());
          case 116:
            return "	";
          case 98:
            return "\b";
          case 118:
            return "\v";
          case 102:
            return "\f";
          case 13:
            if (this.input.charCodeAt(this.pos) === 10) {
              ++this.pos;
            }
          case 10:
            if (this.options.locations) {
              this.lineStart = this.pos;
              ++this.curLine;
            }
            return "";
          case 56:
          case 57:
            if (inTemplate) {
              var codePos = this.pos - 1;
              this.invalidStringToken(codePos, "Invalid escape sequence in template string");
              return null;
            }
          default:
            if (ch >= 48 && ch <= 55) {
              var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
              var octal = parseInt(octalStr, 8);
              if (octal > 255) {
                octalStr = octalStr.slice(0, -1);
                octal = parseInt(octalStr, 8);
              }
              this.pos += octalStr.length - 1;
              ch = this.input.charCodeAt(this.pos);
              if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
                this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode");
              }
              return String.fromCharCode(octal);
            }
            if (isNewLine2(ch)) {
              return "";
            }
            return String.fromCharCode(ch);
        }
      };
      pp$9.readHexChar = function(len) {
        var codePos = this.pos;
        var n2 = this.readInt(16, len);
        if (n2 === null) {
          this.invalidStringToken(codePos, "Bad character escape sequence");
        }
        return n2;
      };
      pp$9.readWord1 = function() {
        this.containsEsc = false;
        var word = "", first = true, chunkStart = this.pos;
        var astral = this.options.ecmaVersion >= 6;
        while (this.pos < this.input.length) {
          var ch = this.fullCharCodeAtPos();
          if (isIdentifierChar2(ch, astral)) {
            this.pos += ch <= 65535 ? 1 : 2;
          } else if (ch === 92) {
            this.containsEsc = true;
            word += this.input.slice(chunkStart, this.pos);
            var escStart = this.pos;
            if (this.input.charCodeAt(++this.pos) !== 117) {
              this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
            }
            ++this.pos;
            var esc = this.readCodePoint();
            if (!(first ? isIdentifierStart2 : isIdentifierChar2)(esc, astral)) {
              this.invalidStringToken(escStart, "Invalid Unicode escape");
            }
            word += codePointToString$1(esc);
            chunkStart = this.pos;
          } else {
            break;
          }
          first = false;
        }
        return word + this.input.slice(chunkStart, this.pos);
      };
      pp$9.readWord = function() {
        var word = this.readWord1();
        var type = types2.name;
        if (this.keywords.test(word)) {
          type = keywords$12[word];
        }
        return this.finishToken(type, word);
      };
      var version2 = "7.4.1";
      Parser2.acorn = {
        Parser: Parser2,
        version: version2,
        defaultOptions: defaultOptions2,
        Position: Position3,
        SourceLocation: SourceLocation2,
        getLineInfo: getLineInfo2,
        Node: Node2,
        TokenType,
        tokTypes: types2,
        keywordTypes: keywords$12,
        TokContext: TokContext2,
        tokContexts: types$12,
        isIdentifierChar: isIdentifierChar2,
        isIdentifierStart: isIdentifierStart2,
        Token: Token2,
        isNewLine: isNewLine2,
        lineBreak: lineBreak2,
        lineBreakG: lineBreakG2,
        nonASCIIwhitespace
      };
      function parse2(input2, options) {
        return Parser2.parse(input2, options);
      }
      function parseExpressionAt(input2, pos, options) {
        return Parser2.parseExpressionAt(input2, pos, options);
      }
      function tokenizer2(input2, options) {
        return Parser2.tokenizer(input2, options);
      }
      exports3.Node = Node2;
      exports3.Parser = Parser2;
      exports3.Position = Position3;
      exports3.SourceLocation = SourceLocation2;
      exports3.TokContext = TokContext2;
      exports3.Token = Token2;
      exports3.TokenType = TokenType;
      exports3.defaultOptions = defaultOptions2;
      exports3.getLineInfo = getLineInfo2;
      exports3.isIdentifierChar = isIdentifierChar2;
      exports3.isIdentifierStart = isIdentifierStart2;
      exports3.isNewLine = isNewLine2;
      exports3.keywordTypes = keywords$12;
      exports3.lineBreak = lineBreak2;
      exports3.lineBreakG = lineBreakG2;
      exports3.nonASCIIwhitespace = nonASCIIwhitespace;
      exports3.parse = parse2;
      exports3.parseExpressionAt = parseExpressionAt;
      exports3.tokContexts = types$12;
      exports3.tokTypes = types2;
      exports3.tokenizer = tokenizer2;
      exports3.version = version2;
      Object.defineProperty(exports3, "__esModule", { value: true });
    });
  }
});

// ../../node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "../../node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js"(exports2, module2) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from2;
      var to = toObject(target);
      var symbols2;
      for (var s = 1; s < arguments.length; s++) {
        from2 = Object(arguments[s]);
        for (var key in from2) {
          if (hasOwnProperty2.call(from2, key)) {
            to[key] = from2[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols2 = getOwnPropertySymbols(from2);
          for (var i = 0; i < symbols2.length; i++) {
            if (propIsEnumerable.call(from2, symbols2[i])) {
              to[symbols2[i]] = from2[symbols2[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// ../../node_modules/.pnpm/is-expression@4.0.0/node_modules/is-expression/index.js
var require_is_expression = __commonJS({
  "../../node_modules/.pnpm/is-expression@4.0.0/node_modules/is-expression/index.js"(exports2, module2) {
    "use strict";
    var acorn = require_acorn();
    var objectAssign = require_object_assign();
    module2.exports = isExpression;
    var DEFAULT_OPTIONS = {
      throw: false,
      strict: false,
      lineComment: false
    };
    function isExpression(src, options) {
      options = objectAssign({}, DEFAULT_OPTIONS, options);
      try {
        var parser2 = new acorn.Parser(options, src, 0);
        if (options.strict) {
          parser2.strict = true;
        }
        if (!options.lineComment) {
          parser2.skipLineComment = function(startSkip) {
            this.raise(this.pos, "Line comments not allowed in an expression");
          };
        }
        parser2.nextToken();
        parser2.parseExpression();
        if (parser2.type !== acorn.tokTypes.eof) {
          parser2.unexpected();
        }
      } catch (ex) {
        if (!options.throw) {
          return false;
        }
        throw ex;
      }
      return true;
    }
  }
});

// ../../node_modules/.pnpm/has-symbols@1.0.2/node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "../../node_modules/.pnpm/has-symbols@1.0.2/node_modules/has-symbols/shams.js"(exports2, module2) {
    "use strict";
    module2.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// ../../node_modules/.pnpm/has-symbols@1.0.2/node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "../../node_modules/.pnpm/has-symbols@1.0.2/node_modules/has-symbols/index.js"(exports2, module2) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module2.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// ../../node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "../../node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/implementation.js"(exports2, module2) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var slice3 = Array.prototype.slice;
    var toStr = Object.prototype.toString;
    var funcType = "[object Function]";
    module2.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slice3.call(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result2 = target.apply(this, args.concat(slice3.call(arguments)));
          if (Object(result2) === result2) {
            return result2;
          }
          return this;
        } else {
          return target.apply(that, args.concat(slice3.call(arguments)));
        }
      };
      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs.push("$" + i);
      }
      bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// ../../node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "../../node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/index.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation();
    module2.exports = Function.prototype.bind || implementation;
  }
});

// ../../node_modules/.pnpm/has@1.0.3/node_modules/has/src/index.js
var require_src = __commonJS({
  "../../node_modules/.pnpm/has@1.0.3/node_modules/has/src/index.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    module2.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
  }
});

// ../../node_modules/.pnpm/get-intrinsic@1.1.1/node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "../../node_modules/.pnpm/get-intrinsic@1.1.1/node_modules/get-intrinsic/index.js"(exports2, module2) {
    "use strict";
    var undefined2;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getProto = Object.getPrototypeOf || function(x) {
      return x.__proto__;
    };
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": Error,
      "%eval%": eval,
      "%EvalError%": EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": RangeError,
      "%ReferenceError%": ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn2 = require_src();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string2) {
      var first = $strSlice(string2, 0, 1);
      var last2 = $strSlice(string2, -1);
      if (first === "%" && last2 !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last2 === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result2 = [];
      $replace(string2, rePropName, function(match, number, quote, subString) {
        result2[result2.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result2;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn2(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn2(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module2.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last2 = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last2 === '"' || last2 === "'" || last2 === "`")) && first !== last2) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn2(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn2(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// ../../node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "../../node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/index.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var $max = GetIntrinsic("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = null;
      }
    }
    module2.exports = function callBind(originalFunction) {
      var func = $reflectApply(bind, $call, arguments);
      if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) {
          $defineProperty(func, "length", { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) });
        }
      }
      return func;
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  }
});

// ../../node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "../../node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/callBound.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module2.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// ../../node_modules/.pnpm/has-tostringtag@1.0.0/node_modules/has-tostringtag/shams.js
var require_shams2 = __commonJS({
  "../../node_modules/.pnpm/has-tostringtag@1.0.0/node_modules/has-tostringtag/shams.js"(exports2, module2) {
    "use strict";
    var hasSymbols = require_shams();
    module2.exports = function hasToStringTagShams() {
      return hasSymbols() && !!Symbol.toStringTag;
    };
  }
});

// ../../node_modules/.pnpm/is-regex@1.1.4/node_modules/is-regex/index.js
var require_is_regex = __commonJS({
  "../../node_modules/.pnpm/is-regex@1.1.4/node_modules/is-regex/index.js"(exports2, module2) {
    "use strict";
    var callBound = require_callBound();
    var hasToStringTag = require_shams2()();
    var has3;
    var $exec;
    var isRegexMarker;
    var badStringifier;
    if (hasToStringTag) {
      has3 = callBound("Object.prototype.hasOwnProperty");
      $exec = callBound("RegExp.prototype.exec");
      isRegexMarker = {};
      throwRegexMarker = function() {
        throw isRegexMarker;
      };
      badStringifier = {
        toString: throwRegexMarker,
        valueOf: throwRegexMarker
      };
      if (typeof Symbol.toPrimitive === "symbol") {
        badStringifier[Symbol.toPrimitive] = throwRegexMarker;
      }
    }
    var throwRegexMarker;
    var $toString = callBound("Object.prototype.toString");
    var gOPD = Object.getOwnPropertyDescriptor;
    var regexClass = "[object RegExp]";
    module2.exports = hasToStringTag ? function isRegex(value) {
      if (!value || typeof value !== "object") {
        return false;
      }
      var descriptor = gOPD(value, "lastIndex");
      var hasLastIndexDataProperty = descriptor && has3(descriptor, "value");
      if (!hasLastIndexDataProperty) {
        return false;
      }
      try {
        $exec(value, badStringifier);
      } catch (e) {
        return e === isRegexMarker;
      }
    } : function isRegex(value) {
      if (!value || typeof value !== "object" && typeof value !== "function") {
        return false;
      }
      return $toString(value) === regexClass;
    };
  }
});

// ../../node_modules/.pnpm/character-parser@2.2.0/node_modules/character-parser/index.js
var require_character_parser = __commonJS({
  "../../node_modules/.pnpm/character-parser@2.2.0/node_modules/character-parser/index.js"(exports2, module2) {
    "use strict";
    var objIsRegex = require_is_regex();
    exports2 = module2.exports = parse2;
    var TOKEN_TYPES = exports2.TOKEN_TYPES = {
      LINE_COMMENT: "//",
      BLOCK_COMMENT: "/**/",
      SINGLE_QUOTE: "'",
      DOUBLE_QUOTE: '"',
      TEMPLATE_QUOTE: "`",
      REGEXP: "//g"
    };
    var BRACKETS = exports2.BRACKETS = {
      "(": ")",
      "{": "}",
      "[": "]"
    };
    var BRACKETS_REVERSED = {
      ")": "(",
      "}": "{",
      "]": "["
    };
    exports2.parse = parse2;
    function parse2(src, state, options) {
      options = options || {};
      state = state || exports2.defaultState();
      var start = options.start || 0;
      var end = options.end || src.length;
      var index = start;
      while (index < end) {
        try {
          parseChar(src[index], state);
        } catch (ex) {
          ex.index = index;
          throw ex;
        }
        index++;
      }
      return state;
    }
    exports2.parseUntil = parseUntil;
    function parseUntil(src, delimiter2, options) {
      options = options || {};
      var start = options.start || 0;
      var index = start;
      var state = exports2.defaultState();
      while (index < src.length) {
        if ((options.ignoreNesting || !state.isNesting(options)) && matches(src, delimiter2, index)) {
          var end = index;
          return {
            start,
            end,
            src: src.substring(start, end)
          };
        }
        try {
          parseChar(src[index], state);
        } catch (ex) {
          ex.index = index;
          throw ex;
        }
        index++;
      }
      var err = new Error("The end of the string was reached with no closing bracket found.");
      err.code = "CHARACTER_PARSER:END_OF_STRING_REACHED";
      err.index = index;
      throw err;
    }
    exports2.parseChar = parseChar;
    function parseChar(character, state) {
      if (character.length !== 1) {
        var err = new Error("Character must be a string of length 1");
        err.name = "InvalidArgumentError";
        err.code = "CHARACTER_PARSER:CHAR_LENGTH_NOT_ONE";
        throw err;
      }
      state = state || exports2.defaultState();
      state.src += character;
      var wasComment = state.isComment();
      var lastChar2 = state.history ? state.history[0] : "";
      if (state.regexpStart) {
        if (character === "/" || character == "*") {
          state.stack.pop();
        }
        state.regexpStart = false;
      }
      switch (state.current()) {
        case TOKEN_TYPES.LINE_COMMENT:
          if (character === "\n") {
            state.stack.pop();
          }
          break;
        case TOKEN_TYPES.BLOCK_COMMENT:
          if (state.lastChar === "*" && character === "/") {
            state.stack.pop();
          }
          break;
        case TOKEN_TYPES.SINGLE_QUOTE:
          if (character === "'" && !state.escaped) {
            state.stack.pop();
          } else if (character === "\\" && !state.escaped) {
            state.escaped = true;
          } else {
            state.escaped = false;
          }
          break;
        case TOKEN_TYPES.DOUBLE_QUOTE:
          if (character === '"' && !state.escaped) {
            state.stack.pop();
          } else if (character === "\\" && !state.escaped) {
            state.escaped = true;
          } else {
            state.escaped = false;
          }
          break;
        case TOKEN_TYPES.TEMPLATE_QUOTE:
          if (character === "`" && !state.escaped) {
            state.stack.pop();
            state.hasDollar = false;
          } else if (character === "\\" && !state.escaped) {
            state.escaped = true;
            state.hasDollar = false;
          } else if (character === "$" && !state.escaped) {
            state.hasDollar = true;
          } else if (character === "{" && state.hasDollar) {
            state.stack.push(BRACKETS[character]);
          } else {
            state.escaped = false;
            state.hasDollar = false;
          }
          break;
        case TOKEN_TYPES.REGEXP:
          if (character === "/" && !state.escaped) {
            state.stack.pop();
          } else if (character === "\\" && !state.escaped) {
            state.escaped = true;
          } else {
            state.escaped = false;
          }
          break;
        default:
          if (character in BRACKETS) {
            state.stack.push(BRACKETS[character]);
          } else if (character in BRACKETS_REVERSED) {
            if (state.current() !== character) {
              var err = new SyntaxError("Mismatched Bracket: " + character);
              err.code = "CHARACTER_PARSER:MISMATCHED_BRACKET";
              throw err;
            }
            ;
            state.stack.pop();
          } else if (lastChar2 === "/" && character === "/") {
            state.history = state.history.substr(1);
            state.stack.push(TOKEN_TYPES.LINE_COMMENT);
          } else if (lastChar2 === "/" && character === "*") {
            state.history = state.history.substr(1);
            state.stack.push(TOKEN_TYPES.BLOCK_COMMENT);
          } else if (character === "/" && isRegexp(state.history)) {
            state.stack.push(TOKEN_TYPES.REGEXP);
            state.regexpStart = true;
          } else if (character === "'") {
            state.stack.push(TOKEN_TYPES.SINGLE_QUOTE);
          } else if (character === '"') {
            state.stack.push(TOKEN_TYPES.DOUBLE_QUOTE);
          } else if (character === "`") {
            state.stack.push(TOKEN_TYPES.TEMPLATE_QUOTE);
          }
          break;
      }
      if (!state.isComment() && !wasComment) {
        state.history = character + state.history;
      }
      state.lastChar = character;
      return state;
    }
    exports2.defaultState = function() {
      return new State2();
    };
    function State2() {
      this.stack = [];
      this.regexpStart = false;
      this.escaped = false;
      this.hasDollar = false;
      this.src = "";
      this.history = "";
      this.lastChar = "";
    }
    State2.prototype.current = function() {
      return this.stack[this.stack.length - 1];
    };
    State2.prototype.isString = function() {
      return this.current() === TOKEN_TYPES.SINGLE_QUOTE || this.current() === TOKEN_TYPES.DOUBLE_QUOTE || this.current() === TOKEN_TYPES.TEMPLATE_QUOTE;
    };
    State2.prototype.isComment = function() {
      return this.current() === TOKEN_TYPES.LINE_COMMENT || this.current() === TOKEN_TYPES.BLOCK_COMMENT;
    };
    State2.prototype.isNesting = function(opts) {
      if (opts && opts.ignoreLineComment && this.stack.length === 1 && this.stack[0] === TOKEN_TYPES.LINE_COMMENT) {
        return false;
      }
      return !!this.stack.length;
    };
    function matches(str, matcher, i) {
      if (objIsRegex(matcher)) {
        return matcher.test(str.substr(i || 0));
      } else {
        return str.substr(i || 0, matcher.length) === matcher;
      }
    }
    exports2.isPunctuator = isPunctuator;
    function isPunctuator(c) {
      if (!c)
        return true;
      var code = c.charCodeAt(0);
      switch (code) {
        case 46:
        case 40:
        case 41:
        case 59:
        case 44:
        case 123:
        case 125:
        case 91:
        case 93:
        case 58:
        case 63:
        case 126:
        case 37:
        case 38:
        case 42:
        case 43:
        case 45:
        case 47:
        case 60:
        case 62:
        case 94:
        case 124:
        case 33:
        case 61:
          return true;
        default:
          return false;
      }
    }
    exports2.isKeyword = isKeyword2;
    function isKeyword2(id2) {
      return id2 === "if" || id2 === "in" || id2 === "do" || id2 === "var" || id2 === "for" || id2 === "new" || id2 === "try" || id2 === "let" || id2 === "this" || id2 === "else" || id2 === "case" || id2 === "void" || id2 === "with" || id2 === "enum" || id2 === "while" || id2 === "break" || id2 === "catch" || id2 === "throw" || id2 === "const" || id2 === "yield" || id2 === "class" || id2 === "super" || id2 === "return" || id2 === "typeof" || id2 === "delete" || id2 === "switch" || id2 === "export" || id2 === "import" || id2 === "default" || id2 === "finally" || id2 === "extends" || id2 === "function" || id2 === "continue" || id2 === "debugger" || id2 === "package" || id2 === "private" || id2 === "interface" || id2 === "instanceof" || id2 === "implements" || id2 === "protected" || id2 === "public" || id2 === "static";
    }
    function isRegexp(history) {
      history = history.replace(/^\s*/, "");
      if (history[0] === ")")
        return false;
      if (history[0] === "}")
        return true;
      if (isPunctuator(history[0]))
        return true;
      if (/^\w+\b/.test(history) && isKeyword2(/^\w+\b/.exec(history)[0].split("").reverse().join("")))
        return true;
      return false;
    }
  }
});

// ../../node_modules/.pnpm/pug-error@2.0.0/node_modules/pug-error/index.js
var require_pug_error = __commonJS({
  "../../node_modules/.pnpm/pug-error@2.0.0/node_modules/pug-error/index.js"(exports2, module2) {
    "use strict";
    module2.exports = makeError;
    function makeError(code, message, options) {
      var line = options.line;
      var column = options.column;
      var filename = options.filename;
      var src = options.src;
      var fullMessage;
      var location = line + (column ? ":" + column : "");
      if (src && line >= 1 && line <= src.split("\n").length) {
        var lines = src.split("\n");
        var start = Math.max(line - 3, 0);
        var end = Math.min(lines.length, line + 3);
        var context = lines.slice(start, end).map(function(text, i) {
          var curr = i + start + 1;
          var preamble = (curr == line ? "  > " : "    ") + curr + "| ";
          var out = preamble + text;
          if (curr === line && column > 0) {
            out += "\n";
            out += Array(preamble.length + column).join("-") + "^";
          }
          return out;
        }).join("\n");
        fullMessage = (filename || "Pug") + ":" + location + "\n" + context + "\n\n" + message;
      } else {
        fullMessage = (filename || "Pug") + ":" + location + "\n\n" + message;
      }
      var err = new Error(fullMessage);
      err.code = "PUG:" + code;
      err.msg = message;
      err.line = line;
      err.column = column;
      err.filename = filename;
      err.src = src;
      err.toJSON = function() {
        return {
          code: this.code,
          msg: this.msg,
          line: this.line,
          column: this.column,
          filename: this.filename
        };
      };
      return err;
    }
  }
});

// ../../node_modules/.pnpm/pug-lexer@5.0.1/node_modules/pug-lexer/index.js
var require_pug_lexer = __commonJS({
  "../../node_modules/.pnpm/pug-lexer@5.0.1/node_modules/pug-lexer/index.js"(exports2, module2) {
    "use strict";
    var assert2 = require("assert");
    var isExpression = require_is_expression();
    var characterParser = require_character_parser();
    var error2 = require_pug_error();
    module2.exports = lex;
    module2.exports.Lexer = Lexer;
    function lex(str, options) {
      var lexer = new Lexer(str, options);
      return JSON.parse(JSON.stringify(lexer.getTokens()));
    }
    function Lexer(str, options) {
      options = options || {};
      if (typeof str !== "string") {
        throw new Error('Expected source code to be a string but got "' + typeof str + '"');
      }
      if (typeof options !== "object") {
        throw new Error('Expected "options" to be an object but got "' + typeof options + '"');
      }
      str = str.replace(/^\uFEFF/, "");
      this.input = str.replace(/\r\n|\r/g, "\n");
      this.originalInput = this.input;
      this.filename = options.filename;
      this.interpolated = options.interpolated || false;
      this.lineno = options.startingLine || 1;
      this.colno = options.startingColumn || 1;
      this.plugins = options.plugins || [];
      this.indentStack = [0];
      this.indentRe = null;
      this.interpolationAllowed = true;
      this.whitespaceRe = /[ \n\t]/;
      this.tokens = [];
      this.ended = false;
    }
    Lexer.prototype = {
      constructor: Lexer,
      error: function(code, message) {
        var err = error2(code, message, {
          line: this.lineno,
          column: this.colno,
          filename: this.filename,
          src: this.originalInput
        });
        throw err;
      },
      assert: function(value, message) {
        if (!value)
          this.error("ASSERT_FAILED", message);
      },
      isExpression: function(exp) {
        return isExpression(exp, {
          throw: true
        });
      },
      assertExpression: function(exp, noThrow) {
        try {
          this.callLexerFunction("isExpression", exp);
          return true;
        } catch (ex) {
          if (noThrow)
            return false;
          if (!ex.loc)
            throw ex;
          this.incrementLine(ex.loc.line - 1);
          this.incrementColumn(ex.loc.column);
          var msg = "Syntax Error: " + ex.message.replace(/ \([0-9]+:[0-9]+\)$/, "");
          this.error("SYNTAX_ERROR", msg);
        }
      },
      assertNestingCorrect: function(exp) {
        var res = characterParser(exp);
        if (res.isNesting()) {
          this.error("INCORRECT_NESTING", "Nesting must match on expression `" + exp + "`");
        }
      },
      tok: function(type, val) {
        var res = {
          type,
          loc: {
            start: {
              line: this.lineno,
              column: this.colno
            },
            filename: this.filename
          }
        };
        if (val !== void 0)
          res.val = val;
        return res;
      },
      tokEnd: function(tok) {
        tok.loc.end = {
          line: this.lineno,
          column: this.colno
        };
        return tok;
      },
      incrementLine: function(increment) {
        this.lineno += increment;
        if (increment)
          this.colno = 1;
      },
      incrementColumn: function(increment) {
        this.colno += increment;
      },
      consume: function(len) {
        this.input = this.input.substr(len);
      },
      scan: function(regexp, type) {
        var captures;
        if (captures = regexp.exec(this.input)) {
          var len = captures[0].length;
          var val = captures[1];
          var diff = len - (val ? val.length : 0);
          var tok = this.tok(type, val);
          this.consume(len);
          this.incrementColumn(diff);
          return tok;
        }
      },
      scanEndOfLine: function(regexp, type) {
        var captures;
        if (captures = regexp.exec(this.input)) {
          var whitespaceLength = 0;
          var whitespace;
          var tok;
          if (whitespace = /^([ ]+)([^ ]*)/.exec(captures[0])) {
            whitespaceLength = whitespace[1].length;
            this.incrementColumn(whitespaceLength);
          }
          var newInput = this.input.substr(captures[0].length);
          if (newInput[0] === ":") {
            this.input = newInput;
            tok = this.tok(type, captures[1]);
            this.incrementColumn(captures[0].length - whitespaceLength);
            return tok;
          }
          if (/^[ \t]*(\n|$)/.test(newInput)) {
            this.input = newInput.substr(/^[ \t]*/.exec(newInput)[0].length);
            tok = this.tok(type, captures[1]);
            this.incrementColumn(captures[0].length - whitespaceLength);
            return tok;
          }
        }
      },
      bracketExpression: function(skip) {
        skip = skip || 0;
        var start = this.input[skip];
        assert2(start === "(" || start === "{" || start === "[", 'The start character should be "(", "{" or "["');
        var end = characterParser.BRACKETS[start];
        var range2;
        try {
          range2 = characterParser.parseUntil(this.input, end, { start: skip + 1 });
        } catch (ex) {
          if (ex.index !== void 0) {
            var idx = ex.index;
            var tmp = this.input.substr(skip).indexOf("\n");
            var nextNewline = tmp + skip;
            var ptr = 0;
            while (idx > nextNewline && tmp !== -1) {
              this.incrementLine(1);
              idx -= nextNewline + 1;
              ptr += nextNewline + 1;
              tmp = nextNewline = this.input.substr(ptr).indexOf("\n");
            }
            this.incrementColumn(idx);
          }
          if (ex.code === "CHARACTER_PARSER:END_OF_STRING_REACHED") {
            this.error("NO_END_BRACKET", "The end of the string reached with no closing bracket " + end + " found.");
          } else if (ex.code === "CHARACTER_PARSER:MISMATCHED_BRACKET") {
            this.error("BRACKET_MISMATCH", ex.message);
          }
          throw ex;
        }
        return range2;
      },
      scanIndentation: function() {
        var captures, re;
        if (this.indentRe) {
          captures = this.indentRe.exec(this.input);
        } else {
          re = /^\n(\t*) */;
          captures = re.exec(this.input);
          if (captures && !captures[1].length) {
            re = /^\n( *)/;
            captures = re.exec(this.input);
          }
          if (captures && captures[1].length)
            this.indentRe = re;
        }
        return captures;
      },
      eos: function() {
        if (this.input.length)
          return;
        if (this.interpolated) {
          this.error("NO_END_BRACKET", "End of line was reached with no closing bracket for interpolation.");
        }
        for (var i = 0; this.indentStack[i]; i++) {
          this.tokens.push(this.tokEnd(this.tok("outdent")));
        }
        this.tokens.push(this.tokEnd(this.tok("eos")));
        this.ended = true;
        return true;
      },
      blank: function() {
        var captures;
        if (captures = /^\n[ \t]*\n/.exec(this.input)) {
          this.consume(captures[0].length - 1);
          this.incrementLine(1);
          return true;
        }
      },
      comment: function() {
        var captures;
        if (captures = /^\/\/(-)?([^\n]*)/.exec(this.input)) {
          this.consume(captures[0].length);
          var tok = this.tok("comment", captures[2]);
          tok.buffer = captures[1] != "-";
          this.interpolationAllowed = tok.buffer;
          this.tokens.push(tok);
          this.incrementColumn(captures[0].length);
          this.tokEnd(tok);
          this.callLexerFunction("pipelessText");
          return true;
        }
      },
      interpolation: function() {
        if (/^#\{/.test(this.input)) {
          var match = this.bracketExpression(1);
          this.consume(match.end + 1);
          var tok = this.tok("interpolation", match.src);
          this.tokens.push(tok);
          this.incrementColumn(2);
          this.assertExpression(match.src);
          var splitted = match.src.split("\n");
          var lines = splitted.length - 1;
          this.incrementLine(lines);
          this.incrementColumn(splitted[lines].length + 1);
          this.tokEnd(tok);
          return true;
        }
      },
      tag: function() {
        var captures;
        if (captures = /^(\w(?:[-:\w]*\w)?)/.exec(this.input)) {
          var tok, name = captures[1], len = captures[0].length;
          this.consume(len);
          tok = this.tok("tag", name);
          this.tokens.push(tok);
          this.incrementColumn(len);
          this.tokEnd(tok);
          return true;
        }
      },
      filter: function(opts) {
        var tok = this.scan(/^:([\w\-]+)/, "filter");
        var inInclude = opts && opts.inInclude;
        if (tok) {
          this.tokens.push(tok);
          this.incrementColumn(tok.val.length);
          this.tokEnd(tok);
          this.callLexerFunction("attrs");
          if (!inInclude) {
            this.interpolationAllowed = false;
            this.callLexerFunction("pipelessText");
          }
          return true;
        }
      },
      doctype: function() {
        var node2 = this.scanEndOfLine(/^doctype *([^\n]*)/, "doctype");
        if (node2) {
          this.tokens.push(this.tokEnd(node2));
          return true;
        }
      },
      id: function() {
        var tok = this.scan(/^#([\w-]+)/, "id");
        if (tok) {
          this.tokens.push(tok);
          this.incrementColumn(tok.val.length);
          this.tokEnd(tok);
          return true;
        }
        if (/^#/.test(this.input)) {
          this.error("INVALID_ID", '"' + /.[^ \t\(\#\.\:]*/.exec(this.input.substr(1))[0] + '" is not a valid ID.');
        }
      },
      className: function() {
        var tok = this.scan(/^\.([_a-z0-9\-]*[_a-z][_a-z0-9\-]*)/i, "class");
        if (tok) {
          this.tokens.push(tok);
          this.incrementColumn(tok.val.length);
          this.tokEnd(tok);
          return true;
        }
        if (/^\.[_a-z0-9\-]+/i.test(this.input)) {
          this.error("INVALID_CLASS_NAME", "Class names must contain at least one letter or underscore.");
        }
        if (/^\./.test(this.input)) {
          this.error("INVALID_CLASS_NAME", '"' + /.[^ \t\(\#\.\:]*/.exec(this.input.substr(1))[0] + '" is not a valid class name.  Class names can only contain "_", "-", a-z and 0-9, and must contain at least one of "_", or a-z');
        }
      },
      endInterpolation: function() {
        if (this.interpolated && this.input[0] === "]") {
          this.input = this.input.substr(1);
          this.ended = true;
          return true;
        }
      },
      addText: function(type, value, prefix2, escaped) {
        var tok;
        if (value + prefix2 === "")
          return;
        prefix2 = prefix2 || "";
        escaped = escaped || 0;
        var indexOfEnd = this.interpolated ? value.indexOf("]") : -1;
        var indexOfStart = this.interpolationAllowed ? value.indexOf("#[") : -1;
        var indexOfEscaped = this.interpolationAllowed ? value.indexOf("\\#[") : -1;
        var matchOfStringInterp = /(\\)?([#!]){((?:.|\n)*)$/.exec(value);
        var indexOfStringInterp = this.interpolationAllowed && matchOfStringInterp ? matchOfStringInterp.index : Infinity;
        if (indexOfEnd === -1)
          indexOfEnd = Infinity;
        if (indexOfStart === -1)
          indexOfStart = Infinity;
        if (indexOfEscaped === -1)
          indexOfEscaped = Infinity;
        if (indexOfEscaped !== Infinity && indexOfEscaped < indexOfEnd && indexOfEscaped < indexOfStart && indexOfEscaped < indexOfStringInterp) {
          prefix2 = prefix2 + value.substring(0, indexOfEscaped) + "#[";
          return this.addText(type, value.substring(indexOfEscaped + 3), prefix2, escaped + 1);
        }
        if (indexOfStart !== Infinity && indexOfStart < indexOfEnd && indexOfStart < indexOfEscaped && indexOfStart < indexOfStringInterp) {
          tok = this.tok(type, prefix2 + value.substring(0, indexOfStart));
          this.incrementColumn(prefix2.length + indexOfStart + escaped);
          this.tokens.push(this.tokEnd(tok));
          tok = this.tok("start-pug-interpolation");
          this.incrementColumn(2);
          this.tokens.push(this.tokEnd(tok));
          var child = new this.constructor(value.substr(indexOfStart + 2), {
            filename: this.filename,
            interpolated: true,
            startingLine: this.lineno,
            startingColumn: this.colno,
            plugins: this.plugins
          });
          var interpolated;
          try {
            interpolated = child.getTokens();
          } catch (ex) {
            if (ex.code && /^PUG:/.test(ex.code)) {
              this.colno = ex.column;
              this.error(ex.code.substr(4), ex.msg);
            }
            throw ex;
          }
          this.colno = child.colno;
          this.tokens = this.tokens.concat(interpolated);
          tok = this.tok("end-pug-interpolation");
          this.incrementColumn(1);
          this.tokens.push(this.tokEnd(tok));
          this.addText(type, child.input);
          return;
        }
        if (indexOfEnd !== Infinity && indexOfEnd < indexOfStart && indexOfEnd < indexOfEscaped && indexOfEnd < indexOfStringInterp) {
          if (prefix2 + value.substring(0, indexOfEnd)) {
            this.addText(type, value.substring(0, indexOfEnd), prefix2);
          }
          this.ended = true;
          this.input = value.substr(value.indexOf("]") + 1) + this.input;
          return;
        }
        if (indexOfStringInterp !== Infinity) {
          if (matchOfStringInterp[1]) {
            prefix2 = prefix2 + value.substring(0, indexOfStringInterp) + matchOfStringInterp[2] + "{";
            return this.addText(type, value.substring(indexOfStringInterp + 3), prefix2, escaped + 1);
          }
          var before = value.substr(0, indexOfStringInterp);
          if (prefix2 || before) {
            before = prefix2 + before;
            tok = this.tok(type, before);
            this.incrementColumn(before.length + escaped);
            this.tokens.push(this.tokEnd(tok));
          }
          var rest = matchOfStringInterp[3];
          var range2;
          tok = this.tok("interpolated-code");
          this.incrementColumn(2);
          try {
            range2 = characterParser.parseUntil(rest, "}");
          } catch (ex) {
            if (ex.index !== void 0) {
              this.incrementColumn(ex.index);
            }
            if (ex.code === "CHARACTER_PARSER:END_OF_STRING_REACHED") {
              this.error("NO_END_BRACKET", "End of line was reached with no closing bracket for interpolation.");
            } else if (ex.code === "CHARACTER_PARSER:MISMATCHED_BRACKET") {
              this.error("BRACKET_MISMATCH", ex.message);
            } else {
              throw ex;
            }
          }
          tok.mustEscape = matchOfStringInterp[2] === "#";
          tok.buffer = true;
          tok.val = range2.src;
          this.assertExpression(range2.src);
          if (range2.end + 1 < rest.length) {
            rest = rest.substr(range2.end + 1);
            this.incrementColumn(range2.end + 1);
            this.tokens.push(this.tokEnd(tok));
            this.addText(type, rest);
          } else {
            this.incrementColumn(rest.length);
            this.tokens.push(this.tokEnd(tok));
          }
          return;
        }
        value = prefix2 + value;
        tok = this.tok(type, value);
        this.incrementColumn(value.length + escaped);
        this.tokens.push(this.tokEnd(tok));
      },
      text: function() {
        var tok = this.scan(/^(?:\| ?| )([^\n]+)/, "text") || this.scan(/^( )/, "text") || this.scan(/^\|( ?)/, "text");
        if (tok) {
          this.addText("text", tok.val);
          return true;
        }
      },
      textHtml: function() {
        var tok = this.scan(/^(<[^\n]*)/, "text-html");
        if (tok) {
          this.addText("text-html", tok.val);
          return true;
        }
      },
      dot: function() {
        var tok;
        if (tok = this.scanEndOfLine(/^\./, "dot")) {
          this.tokens.push(this.tokEnd(tok));
          this.callLexerFunction("pipelessText");
          return true;
        }
      },
      extends: function() {
        var tok = this.scan(/^extends?(?= |$|\n)/, "extends");
        if (tok) {
          this.tokens.push(this.tokEnd(tok));
          if (!this.callLexerFunction("path")) {
            this.error("NO_EXTENDS_PATH", "missing path for extends");
          }
          return true;
        }
        if (this.scan(/^extends?\b/)) {
          this.error("MALFORMED_EXTENDS", "malformed extends");
        }
      },
      prepend: function() {
        var captures;
        if (captures = /^(?:block +)?prepend +([^\n]+)/.exec(this.input)) {
          var name = captures[1].trim();
          var comment2 = "";
          if (name.indexOf("//") !== -1) {
            comment2 = "//" + name.split("//").slice(1).join("//");
            name = name.split("//")[0].trim();
          }
          if (!name)
            return;
          var tok = this.tok("block", name);
          var len = captures[0].length - comment2.length;
          while (this.whitespaceRe.test(this.input.charAt(len - 1)))
            len--;
          this.incrementColumn(len);
          tok.mode = "prepend";
          this.tokens.push(this.tokEnd(tok));
          this.consume(captures[0].length - comment2.length);
          this.incrementColumn(captures[0].length - comment2.length - len);
          return true;
        }
      },
      append: function() {
        var captures;
        if (captures = /^(?:block +)?append +([^\n]+)/.exec(this.input)) {
          var name = captures[1].trim();
          var comment2 = "";
          if (name.indexOf("//") !== -1) {
            comment2 = "//" + name.split("//").slice(1).join("//");
            name = name.split("//")[0].trim();
          }
          if (!name)
            return;
          var tok = this.tok("block", name);
          var len = captures[0].length - comment2.length;
          while (this.whitespaceRe.test(this.input.charAt(len - 1)))
            len--;
          this.incrementColumn(len);
          tok.mode = "append";
          this.tokens.push(this.tokEnd(tok));
          this.consume(captures[0].length - comment2.length);
          this.incrementColumn(captures[0].length - comment2.length - len);
          return true;
        }
      },
      block: function() {
        var captures;
        if (captures = /^block +([^\n]+)/.exec(this.input)) {
          var name = captures[1].trim();
          var comment2 = "";
          if (name.indexOf("//") !== -1) {
            comment2 = "//" + name.split("//").slice(1).join("//");
            name = name.split("//")[0].trim();
          }
          if (!name)
            return;
          var tok = this.tok("block", name);
          var len = captures[0].length - comment2.length;
          while (this.whitespaceRe.test(this.input.charAt(len - 1)))
            len--;
          this.incrementColumn(len);
          tok.mode = "replace";
          this.tokens.push(this.tokEnd(tok));
          this.consume(captures[0].length - comment2.length);
          this.incrementColumn(captures[0].length - comment2.length - len);
          return true;
        }
      },
      mixinBlock: function() {
        var tok;
        if (tok = this.scanEndOfLine(/^block/, "mixin-block")) {
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      yield: function() {
        var tok = this.scanEndOfLine(/^yield/, "yield");
        if (tok) {
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      include: function() {
        var tok = this.scan(/^include(?=:| |$|\n)/, "include");
        if (tok) {
          this.tokens.push(this.tokEnd(tok));
          while (this.callLexerFunction("filter", { inInclude: true }))
            ;
          if (!this.callLexerFunction("path")) {
            if (/^[^ \n]+/.test(this.input)) {
              this.fail();
            } else {
              this.error("NO_INCLUDE_PATH", "missing path for include");
            }
          }
          return true;
        }
        if (this.scan(/^include\b/)) {
          this.error("MALFORMED_INCLUDE", "malformed include");
        }
      },
      path: function() {
        var tok = this.scanEndOfLine(/^ ([^\n]+)/, "path");
        if (tok && (tok.val = tok.val.trim())) {
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      case: function() {
        var tok = this.scanEndOfLine(/^case +([^\n]+)/, "case");
        if (tok) {
          this.incrementColumn(-tok.val.length);
          this.assertExpression(tok.val);
          this.incrementColumn(tok.val.length);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
        if (this.scan(/^case\b/)) {
          this.error("NO_CASE_EXPRESSION", "missing expression for case");
        }
      },
      when: function() {
        var tok = this.scanEndOfLine(/^when +([^:\n]+)/, "when");
        if (tok) {
          var parser2 = characterParser(tok.val);
          while (parser2.isNesting() || parser2.isString()) {
            var rest = /:([^:\n]+)/.exec(this.input);
            if (!rest)
              break;
            tok.val += rest[0];
            this.consume(rest[0].length);
            this.incrementColumn(rest[0].length);
            parser2 = characterParser(tok.val);
          }
          this.incrementColumn(-tok.val.length);
          this.assertExpression(tok.val);
          this.incrementColumn(tok.val.length);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
        if (this.scan(/^when\b/)) {
          this.error("NO_WHEN_EXPRESSION", "missing expression for when");
        }
      },
      default: function() {
        var tok = this.scanEndOfLine(/^default/, "default");
        if (tok) {
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
        if (this.scan(/^default\b/)) {
          this.error("DEFAULT_WITH_EXPRESSION", "default should not have an expression");
        }
      },
      call: function() {
        var tok, captures, increment;
        if (captures = /^\+(\s*)(([-\w]+)|(#\{))/.exec(this.input)) {
          if (captures[3]) {
            increment = captures[0].length;
            this.consume(increment);
            tok = this.tok("call", captures[3]);
          } else {
            var match = this.bracketExpression(2 + captures[1].length);
            increment = match.end + 1;
            this.consume(increment);
            this.assertExpression(match.src);
            tok = this.tok("call", "#{" + match.src + "}");
          }
          this.incrementColumn(increment);
          tok.args = null;
          if (captures = /^ *\(/.exec(this.input)) {
            var range2 = this.bracketExpression(captures[0].length - 1);
            if (!/^\s*[-\w]+ *=/.test(range2.src)) {
              this.incrementColumn(1);
              this.consume(range2.end + 1);
              tok.args = range2.src;
              this.assertExpression("[" + tok.args + "]");
              for (var i = 0; i <= tok.args.length; i++) {
                if (tok.args[i] === "\n") {
                  this.incrementLine(1);
                } else {
                  this.incrementColumn(1);
                }
              }
            }
          }
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      mixin: function() {
        var captures;
        if (captures = /^mixin +([-\w]+)(?: *\((.*)\))? */.exec(this.input)) {
          this.consume(captures[0].length);
          var tok = this.tok("mixin", captures[1]);
          tok.args = captures[2] || null;
          this.incrementColumn(captures[0].length);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      conditional: function() {
        var captures;
        if (captures = /^(if|unless|else if|else)\b([^\n]*)/.exec(this.input)) {
          this.consume(captures[0].length);
          var type = captures[1].replace(/ /g, "-");
          var js = captures[2] && captures[2].trim();
          var tok = this.tok(type, js);
          this.incrementColumn(captures[0].length - js.length);
          switch (type) {
            case "if":
            case "else-if":
              this.assertExpression(js);
              break;
            case "unless":
              this.assertExpression(js);
              tok.val = "!(" + js + ")";
              tok.type = "if";
              break;
            case "else":
              if (js) {
                this.error("ELSE_CONDITION", "`else` cannot have a condition, perhaps you meant `else if`");
              }
              break;
          }
          this.incrementColumn(js.length);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      while: function() {
        var captures, tok;
        if (captures = /^while +([^\n]+)/.exec(this.input)) {
          this.consume(captures[0].length);
          this.assertExpression(captures[1]);
          tok = this.tok("while", captures[1]);
          this.incrementColumn(captures[0].length);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
        if (this.scan(/^while\b/)) {
          this.error("NO_WHILE_EXPRESSION", "missing expression for while");
        }
      },
      each: function() {
        var captures;
        if (captures = /^(?:each|for) +([a-zA-Z_$][\w$]*)(?: *, *([a-zA-Z_$][\w$]*))? * in *([^\n]+)/.exec(this.input)) {
          this.consume(captures[0].length);
          var tok = this.tok("each", captures[1]);
          tok.key = captures[2] || null;
          this.incrementColumn(captures[0].length - captures[3].length);
          this.assertExpression(captures[3]);
          tok.code = captures[3];
          this.incrementColumn(captures[3].length);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
        const name = /^each\b/.exec(this.input) ? "each" : "for";
        if (this.scan(/^(?:each|for)\b/)) {
          this.error("MALFORMED_EACH", "This `" + name + "` has a syntax error. `" + name + "` statements should be of the form: `" + name + " VARIABLE_NAME of JS_EXPRESSION`");
        }
        if (captures = /^- *(?:each|for) +([a-zA-Z_$][\w$]*)(?: *, *([a-zA-Z_$][\w$]*))? +in +([^\n]+)/.exec(this.input)) {
          this.error("MALFORMED_EACH", 'Pug each and for should no longer be prefixed with a dash ("-"). They are pug keywords and not part of JavaScript.');
        }
      },
      eachOf: function() {
        var captures;
        if (captures = /^(?:each|for) (.*?) of *([^\n]+)/.exec(this.input)) {
          this.consume(captures[0].length);
          var tok = this.tok("eachOf", captures[1]);
          tok.value = captures[1];
          this.incrementColumn(captures[0].length - captures[2].length);
          this.assertExpression(captures[2]);
          tok.code = captures[2];
          this.incrementColumn(captures[2].length);
          this.tokens.push(this.tokEnd(tok));
          if (!(/^[a-zA-Z_$][\w$]*$/.test(tok.value.trim()) || /^\[ *[a-zA-Z_$][\w$]* *\, *[a-zA-Z_$][\w$]* *\]$/.test(tok.value.trim()))) {
            this.error("MALFORMED_EACH_OF_LVAL", "The value variable for each must either be a valid identifier (e.g. `item`) or a pair of identifiers in square brackets (e.g. `[key, value]`).");
          }
          return true;
        }
        if (captures = /^- *(?:each|for) +([a-zA-Z_$][\w$]*)(?: *, *([a-zA-Z_$][\w$]*))? +of +([^\n]+)/.exec(this.input)) {
          this.error("MALFORMED_EACH", 'Pug each and for should not be prefixed with a dash ("-"). They are pug keywords and not part of JavaScript.');
        }
      },
      code: function() {
        var captures;
        if (captures = /^(!?=|-)[ \t]*([^\n]+)/.exec(this.input)) {
          var flags = captures[1];
          var code = captures[2];
          var shortened = 0;
          if (this.interpolated) {
            var parsed;
            try {
              parsed = characterParser.parseUntil(code, "]");
            } catch (err) {
              if (err.index !== void 0) {
                this.incrementColumn(captures[0].length - code.length + err.index);
              }
              if (err.code === "CHARACTER_PARSER:END_OF_STRING_REACHED") {
                this.error("NO_END_BRACKET", "End of line was reached with no closing bracket for interpolation.");
              } else if (err.code === "CHARACTER_PARSER:MISMATCHED_BRACKET") {
                this.error("BRACKET_MISMATCH", err.message);
              } else {
                throw err;
              }
            }
            shortened = code.length - parsed.end;
            code = parsed.src;
          }
          var consumed = captures[0].length - shortened;
          this.consume(consumed);
          var tok = this.tok("code", code);
          tok.mustEscape = flags.charAt(0) === "=";
          tok.buffer = flags.charAt(0) === "=" || flags.charAt(1) === "=";
          this.incrementColumn(captures[0].length - captures[2].length);
          if (tok.buffer)
            this.assertExpression(code);
          this.tokens.push(tok);
          this.incrementColumn(code.length);
          this.tokEnd(tok);
          return true;
        }
      },
      blockCode: function() {
        var tok;
        if (tok = this.scanEndOfLine(/^-/, "blockcode")) {
          this.tokens.push(this.tokEnd(tok));
          this.interpolationAllowed = false;
          this.callLexerFunction("pipelessText");
          return true;
        }
      },
      attribute: function(str) {
        var quote = "";
        var quoteRe = /['"]/;
        var key = "";
        var i;
        for (i = 0; i < str.length; i++) {
          if (!this.whitespaceRe.test(str[i]))
            break;
          if (str[i] === "\n") {
            this.incrementLine(1);
          } else {
            this.incrementColumn(1);
          }
        }
        if (i === str.length) {
          return "";
        }
        var tok = this.tok("attribute");
        if (quoteRe.test(str[i])) {
          quote = str[i];
          this.incrementColumn(1);
          i++;
        }
        for (; i < str.length; i++) {
          if (quote) {
            if (str[i] === quote) {
              this.incrementColumn(1);
              i++;
              break;
            }
          } else {
            if (this.whitespaceRe.test(str[i]) || str[i] === "!" || str[i] === "=" || str[i] === ",") {
              break;
            }
          }
          key += str[i];
          if (str[i] === "\n") {
            this.incrementLine(1);
          } else {
            this.incrementColumn(1);
          }
        }
        tok.name = key;
        var valueResponse = this.attributeValue(str.substr(i));
        if (valueResponse.val) {
          tok.val = valueResponse.val;
          tok.mustEscape = valueResponse.mustEscape;
        } else {
          tok.val = true;
          tok.mustEscape = true;
        }
        str = valueResponse.remainingSource;
        this.tokens.push(this.tokEnd(tok));
        for (i = 0; i < str.length; i++) {
          if (!this.whitespaceRe.test(str[i])) {
            break;
          }
          if (str[i] === "\n") {
            this.incrementLine(1);
          } else {
            this.incrementColumn(1);
          }
        }
        if (str[i] === ",") {
          this.incrementColumn(1);
          i++;
        }
        return str.substr(i);
      },
      attributeValue: function(str) {
        var quoteRe = /['"]/;
        var val = "";
        var done, i, x;
        var escapeAttr = true;
        var state = characterParser.defaultState();
        var col = this.colno;
        var line = this.lineno;
        for (i = 0; i < str.length; i++) {
          if (!this.whitespaceRe.test(str[i]))
            break;
          if (str[i] === "\n") {
            line++;
            col = 1;
          } else {
            col++;
          }
        }
        if (i === str.length) {
          return { remainingSource: str };
        }
        if (str[i] === "!") {
          escapeAttr = false;
          col++;
          i++;
          if (str[i] !== "=")
            this.error("INVALID_KEY_CHARACTER", "Unexpected character " + str[i] + " expected `=`");
        }
        if (str[i] !== "=") {
          if (i === 0 && str && !this.whitespaceRe.test(str[0]) && str[0] !== ",") {
            this.error("INVALID_KEY_CHARACTER", "Unexpected character " + str[0] + " expected `=`");
          } else {
            return { remainingSource: str };
          }
        }
        this.lineno = line;
        this.colno = col + 1;
        i++;
        for (; i < str.length; i++) {
          if (!this.whitespaceRe.test(str[i]))
            break;
          if (str[i] === "\n") {
            this.incrementLine(1);
          } else {
            this.incrementColumn(1);
          }
        }
        line = this.lineno;
        col = this.colno;
        for (; i < str.length; i++) {
          if (!(state.isNesting() || state.isString())) {
            if (this.whitespaceRe.test(str[i])) {
              done = false;
              for (x = i; x < str.length; x++) {
                if (!this.whitespaceRe.test(str[x])) {
                  const isNotPunctuator = !characterParser.isPunctuator(str[x]);
                  const isQuote = quoteRe.test(str[x]);
                  const isColon = str[x] === ":";
                  const isSpreadOperator = str[x] + str[x + 1] + str[x + 2] === "...";
                  if ((isNotPunctuator || isQuote || isColon || isSpreadOperator) && this.assertExpression(val, true)) {
                    done = true;
                  }
                  break;
                }
              }
              if (done || x === str.length) {
                break;
              }
            }
            if (str[i] === "," && this.assertExpression(val, true)) {
              break;
            }
          }
          state = characterParser.parseChar(str[i], state);
          val += str[i];
          if (str[i] === "\n") {
            line++;
            col = 1;
          } else {
            col++;
          }
        }
        this.assertExpression(val);
        this.lineno = line;
        this.colno = col;
        return { val, mustEscape: escapeAttr, remainingSource: str.substr(i) };
      },
      attrs: function() {
        var tok;
        if (this.input.charAt(0) == "(") {
          tok = this.tok("start-attributes");
          var index = this.bracketExpression().end;
          var str = this.input.substr(1, index - 1);
          this.incrementColumn(1);
          this.tokens.push(this.tokEnd(tok));
          this.assertNestingCorrect(str);
          this.consume(index + 1);
          while (str) {
            str = this.attribute(str);
          }
          tok = this.tok("end-attributes");
          this.incrementColumn(1);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      attributesBlock: function() {
        if (/^&attributes\b/.test(this.input)) {
          var consumed = 11;
          this.consume(consumed);
          var tok = this.tok("&attributes");
          this.incrementColumn(consumed);
          var args = this.bracketExpression();
          consumed = args.end + 1;
          this.consume(consumed);
          tok.val = args.src;
          this.incrementColumn(consumed);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      indent: function() {
        var captures = this.scanIndentation();
        var tok;
        if (captures) {
          var indents = captures[1].length;
          this.incrementLine(1);
          this.consume(indents + 1);
          if (this.input[0] == " " || this.input[0] == "	") {
            this.error("INVALID_INDENTATION", "Invalid indentation, you can use tabs or spaces but not both");
          }
          if (this.input[0] == "\n") {
            this.interpolationAllowed = true;
            return this.tokEnd(this.tok("newline"));
          }
          if (indents < this.indentStack[0]) {
            var outdent_count = 0;
            while (this.indentStack[0] > indents) {
              if (this.indentStack[1] < indents) {
                this.error("INCONSISTENT_INDENTATION", "Inconsistent indentation. Expecting either " + this.indentStack[1] + " or " + this.indentStack[0] + " spaces/tabs.");
              }
              outdent_count++;
              this.indentStack.shift();
            }
            while (outdent_count--) {
              this.colno = 1;
              tok = this.tok("outdent");
              this.colno = this.indentStack[0] + 1;
              this.tokens.push(this.tokEnd(tok));
            }
          } else if (indents && indents != this.indentStack[0]) {
            tok = this.tok("indent", indents);
            this.colno = 1 + indents;
            this.tokens.push(this.tokEnd(tok));
            this.indentStack.unshift(indents);
          } else {
            tok = this.tok("newline");
            this.colno = 1 + Math.min(this.indentStack[0] || 0, indents);
            this.tokens.push(this.tokEnd(tok));
          }
          this.interpolationAllowed = true;
          return true;
        }
      },
      pipelessText: function pipelessText(indents) {
        while (this.callLexerFunction("blank"))
          ;
        var captures = this.scanIndentation();
        indents = indents || captures && captures[1].length;
        if (indents > this.indentStack[0]) {
          this.tokens.push(this.tokEnd(this.tok("start-pipeless-text")));
          var tokens = [];
          var token_indent = [];
          var isMatch;
          var stringPtr = 0;
          do {
            var i = this.input.substr(stringPtr + 1).indexOf("\n");
            if (i == -1)
              i = this.input.length - stringPtr - 1;
            var str = this.input.substr(stringPtr + 1, i);
            var lineCaptures = this.indentRe.exec("\n" + str);
            var lineIndents = lineCaptures && lineCaptures[1].length;
            isMatch = lineIndents >= indents;
            token_indent.push(isMatch);
            isMatch = isMatch || !str.trim();
            if (isMatch) {
              stringPtr += str.length + 1;
              tokens.push(str.substr(indents));
            } else if (lineIndents > this.indentStack[0]) {
              this.tokens.pop();
              return pipelessText.call(this, lineCaptures[1].length);
            }
          } while (this.input.length - stringPtr && isMatch);
          this.consume(stringPtr);
          while (this.input.length === 0 && tokens[tokens.length - 1] === "")
            tokens.pop();
          tokens.forEach(function(token, i2) {
            var tok;
            this.incrementLine(1);
            if (i2 !== 0)
              tok = this.tok("newline");
            if (token_indent[i2])
              this.incrementColumn(indents);
            if (tok)
              this.tokens.push(this.tokEnd(tok));
            this.addText("text", token);
          }.bind(this));
          this.tokens.push(this.tokEnd(this.tok("end-pipeless-text")));
          return true;
        }
      },
      slash: function() {
        var tok = this.scan(/^\//, "slash");
        if (tok) {
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      colon: function() {
        var tok = this.scan(/^: +/, ":");
        if (tok) {
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      fail: function() {
        this.error("UNEXPECTED_TEXT", 'unexpected text "' + this.input.substr(0, 5) + '"');
      },
      callLexerFunction: function(func) {
        var rest = [];
        for (var i = 1; i < arguments.length; i++) {
          rest.push(arguments[i]);
        }
        var pluginArgs = [this].concat(rest);
        for (var i = 0; i < this.plugins.length; i++) {
          var plugin2 = this.plugins[i];
          if (plugin2[func] && plugin2[func].apply(plugin2, pluginArgs)) {
            return true;
          }
        }
        return this[func].apply(this, rest);
      },
      advance: function() {
        return this.callLexerFunction("blank") || this.callLexerFunction("eos") || this.callLexerFunction("endInterpolation") || this.callLexerFunction("yield") || this.callLexerFunction("doctype") || this.callLexerFunction("interpolation") || this.callLexerFunction("case") || this.callLexerFunction("when") || this.callLexerFunction("default") || this.callLexerFunction("extends") || this.callLexerFunction("append") || this.callLexerFunction("prepend") || this.callLexerFunction("block") || this.callLexerFunction("mixinBlock") || this.callLexerFunction("include") || this.callLexerFunction("mixin") || this.callLexerFunction("call") || this.callLexerFunction("conditional") || this.callLexerFunction("eachOf") || this.callLexerFunction("each") || this.callLexerFunction("while") || this.callLexerFunction("tag") || this.callLexerFunction("filter") || this.callLexerFunction("blockCode") || this.callLexerFunction("code") || this.callLexerFunction("id") || this.callLexerFunction("dot") || this.callLexerFunction("className") || this.callLexerFunction("attrs") || this.callLexerFunction("attributesBlock") || this.callLexerFunction("indent") || this.callLexerFunction("text") || this.callLexerFunction("textHtml") || this.callLexerFunction("comment") || this.callLexerFunction("slash") || this.callLexerFunction("colon") || this.fail();
      },
      getTokens: function() {
        while (!this.ended) {
          this.callLexerFunction("advance");
        }
        return this.tokens;
      }
    };
  }
});

// ../../node_modules/.pnpm/token-stream@1.0.0/node_modules/token-stream/index.js
var require_token_stream = __commonJS({
  "../../node_modules/.pnpm/token-stream@1.0.0/node_modules/token-stream/index.js"(exports2, module2) {
    "use strict";
    module2.exports = TokenStream;
    function TokenStream(tokens) {
      if (!Array.isArray(tokens)) {
        throw new TypeError("tokens must be passed to TokenStream as an array.");
      }
      this._tokens = tokens;
    }
    TokenStream.prototype.lookahead = function(index) {
      if (this._tokens.length <= index) {
        throw new Error("Cannot read past the end of a stream");
      }
      return this._tokens[index];
    };
    TokenStream.prototype.peek = function() {
      if (this._tokens.length === 0) {
        throw new Error("Cannot read past the end of a stream");
      }
      return this._tokens[0];
    };
    TokenStream.prototype.advance = function() {
      if (this._tokens.length === 0) {
        throw new Error("Cannot read past the end of a stream");
      }
      return this._tokens.shift();
    };
    TokenStream.prototype.defer = function(token) {
      this._tokens.unshift(token);
    };
  }
});

// ../../node_modules/.pnpm/pug-parser@6.0.0/node_modules/pug-parser/lib/inline-tags.js
var require_inline_tags = __commonJS({
  "../../node_modules/.pnpm/pug-parser@6.0.0/node_modules/pug-parser/lib/inline-tags.js"(exports2, module2) {
    "use strict";
    module2.exports = [
      "a",
      "abbr",
      "acronym",
      "b",
      "br",
      "code",
      "em",
      "font",
      "i",
      "img",
      "ins",
      "kbd",
      "map",
      "samp",
      "small",
      "span",
      "strong",
      "sub",
      "sup"
    ];
  }
});

// ../../node_modules/.pnpm/pug-parser@6.0.0/node_modules/pug-parser/index.js
var require_pug_parser = __commonJS({
  "../../node_modules/.pnpm/pug-parser@6.0.0/node_modules/pug-parser/index.js"(exports2, module2) {
    "use strict";
    var assert2 = require("assert");
    var TokenStream = require_token_stream();
    var error2 = require_pug_error();
    var inlineTags = require_inline_tags();
    module2.exports = parse2;
    module2.exports.Parser = Parser2;
    function parse2(tokens, options) {
      var parser2 = new Parser2(tokens, options);
      var ast = parser2.parse();
      return JSON.parse(JSON.stringify(ast));
    }
    function Parser2(tokens, options) {
      options = options || {};
      if (!Array.isArray(tokens)) {
        throw new Error('Expected tokens to be an Array but got "' + typeof tokens + '"');
      }
      if (typeof options !== "object") {
        throw new Error('Expected "options" to be an object but got "' + typeof options + '"');
      }
      this.tokens = new TokenStream(tokens);
      this.filename = options.filename;
      this.src = options.src;
      this.inMixin = 0;
      this.plugins = options.plugins || [];
    }
    Parser2.prototype = {
      constructor: Parser2,
      error: function(code, message, token) {
        var err = error2(code, message, {
          line: token.loc.start.line,
          column: token.loc.start.column,
          filename: this.filename,
          src: this.src
        });
        throw err;
      },
      advance: function() {
        return this.tokens.advance();
      },
      peek: function() {
        return this.tokens.peek();
      },
      lookahead: function(n2) {
        return this.tokens.lookahead(n2);
      },
      parse: function() {
        var block = this.emptyBlock(0);
        while (this.peek().type != "eos") {
          if (this.peek().type == "newline") {
            this.advance();
          } else if (this.peek().type == "text-html") {
            block.nodes = block.nodes.concat(this.parseTextHtml());
          } else {
            var expr = this.parseExpr();
            if (expr) {
              if (expr.type === "Block") {
                block.nodes = block.nodes.concat(expr.nodes);
              } else {
                block.nodes.push(expr);
              }
            }
          }
        }
        return block;
      },
      expect: function(type) {
        if (this.peek().type === type) {
          return this.advance();
        } else {
          this.error("INVALID_TOKEN", 'expected "' + type + '", but got "' + this.peek().type + '"', this.peek());
        }
      },
      accept: function(type) {
        if (this.peek().type === type) {
          return this.advance();
        }
      },
      initBlock: function(line, nodes) {
        if ((line | 0) !== line)
          throw new Error("`line` is not an integer");
        if (!Array.isArray(nodes))
          throw new Error("`nodes` is not an array");
        return {
          type: "Block",
          nodes,
          line,
          filename: this.filename
        };
      },
      emptyBlock: function(line) {
        return this.initBlock(line, []);
      },
      runPlugin: function(context, tok) {
        var rest = [this];
        for (var i = 2; i < arguments.length; i++) {
          rest.push(arguments[i]);
        }
        var pluginContext;
        for (var i = 0; i < this.plugins.length; i++) {
          var plugin2 = this.plugins[i];
          if (plugin2[context] && plugin2[context][tok.type]) {
            if (pluginContext)
              throw new Error("Multiple plugin handlers found for context " + JSON.stringify(context) + ", token type " + JSON.stringify(tok.type));
            pluginContext = plugin2[context];
          }
        }
        if (pluginContext)
          return pluginContext[tok.type].apply(pluginContext, rest);
      },
      parseExpr: function() {
        switch (this.peek().type) {
          case "tag":
            return this.parseTag();
          case "mixin":
            return this.parseMixin();
          case "block":
            return this.parseBlock();
          case "mixin-block":
            return this.parseMixinBlock();
          case "case":
            return this.parseCase();
          case "extends":
            return this.parseExtends();
          case "include":
            return this.parseInclude();
          case "doctype":
            return this.parseDoctype();
          case "filter":
            return this.parseFilter();
          case "comment":
            return this.parseComment();
          case "text":
          case "interpolated-code":
          case "start-pug-interpolation":
            return this.parseText({ block: true });
          case "text-html":
            return this.initBlock(this.peek().loc.start.line, this.parseTextHtml());
          case "dot":
            return this.parseDot();
          case "each":
            return this.parseEach();
          case "eachOf":
            return this.parseEachOf();
          case "code":
            return this.parseCode();
          case "blockcode":
            return this.parseBlockCode();
          case "if":
            return this.parseConditional();
          case "while":
            return this.parseWhile();
          case "call":
            return this.parseCall();
          case "interpolation":
            return this.parseInterpolation();
          case "yield":
            return this.parseYield();
          case "id":
          case "class":
            if (!this.peek().loc.start)
              debugger;
            this.tokens.defer({
              type: "tag",
              val: "div",
              loc: this.peek().loc,
              filename: this.filename
            });
            return this.parseExpr();
          default:
            var pluginResult = this.runPlugin("expressionTokens", this.peek());
            if (pluginResult)
              return pluginResult;
            this.error("INVALID_TOKEN", 'unexpected token "' + this.peek().type + '"', this.peek());
        }
      },
      parseDot: function() {
        this.advance();
        return this.parseTextBlock();
      },
      parseText: function(options) {
        var tags = [];
        var lineno = this.peek().loc.start.line;
        var nextTok = this.peek();
        loop:
          while (true) {
            switch (nextTok.type) {
              case "text":
                var tok = this.advance();
                tags.push({
                  type: "Text",
                  val: tok.val,
                  line: tok.loc.start.line,
                  column: tok.loc.start.column,
                  filename: this.filename
                });
                break;
              case "interpolated-code":
                var tok = this.advance();
                tags.push({
                  type: "Code",
                  val: tok.val,
                  buffer: tok.buffer,
                  mustEscape: tok.mustEscape !== false,
                  isInline: true,
                  line: tok.loc.start.line,
                  column: tok.loc.start.column,
                  filename: this.filename
                });
                break;
              case "newline":
                if (!options || !options.block)
                  break loop;
                var tok = this.advance();
                var nextType = this.peek().type;
                if (nextType === "text" || nextType === "interpolated-code") {
                  tags.push({
                    type: "Text",
                    val: "\n",
                    line: tok.loc.start.line,
                    column: tok.loc.start.column,
                    filename: this.filename
                  });
                }
                break;
              case "start-pug-interpolation":
                this.advance();
                tags.push(this.parseExpr());
                this.expect("end-pug-interpolation");
                break;
              default:
                var pluginResult = this.runPlugin("textTokens", nextTok, tags);
                if (pluginResult)
                  break;
                break loop;
            }
            nextTok = this.peek();
          }
        if (tags.length === 1)
          return tags[0];
        else
          return this.initBlock(lineno, tags);
      },
      parseTextHtml: function() {
        var nodes = [];
        var currentNode = null;
        loop:
          while (true) {
            switch (this.peek().type) {
              case "text-html":
                var text = this.advance();
                if (!currentNode) {
                  currentNode = {
                    type: "Text",
                    val: text.val,
                    filename: this.filename,
                    line: text.loc.start.line,
                    column: text.loc.start.column,
                    isHtml: true
                  };
                  nodes.push(currentNode);
                } else {
                  currentNode.val += "\n" + text.val;
                }
                break;
              case "indent":
                var block = this.block();
                block.nodes.forEach(function(node2) {
                  if (node2.isHtml) {
                    if (!currentNode) {
                      currentNode = node2;
                      nodes.push(currentNode);
                    } else {
                      currentNode.val += "\n" + node2.val;
                    }
                  } else {
                    currentNode = null;
                    nodes.push(node2);
                  }
                });
                break;
              case "code":
                currentNode = null;
                nodes.push(this.parseCode(true));
                break;
              case "newline":
                this.advance();
                break;
              default:
                break loop;
            }
          }
        return nodes;
      },
      parseBlockExpansion: function() {
        var tok = this.accept(":");
        if (tok) {
          var expr = this.parseExpr();
          return expr.type === "Block" ? expr : this.initBlock(tok.loc.start.line, [expr]);
        } else {
          return this.block();
        }
      },
      parseCase: function() {
        var tok = this.expect("case");
        var node2 = {
          type: "Case",
          expr: tok.val,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        var block = this.emptyBlock(tok.loc.start.line + 1);
        this.expect("indent");
        while (this.peek().type != "outdent") {
          switch (this.peek().type) {
            case "comment":
            case "newline":
              this.advance();
              break;
            case "when":
              block.nodes.push(this.parseWhen());
              break;
            case "default":
              block.nodes.push(this.parseDefault());
              break;
            default:
              var pluginResult = this.runPlugin("caseTokens", this.peek(), block);
              if (pluginResult)
                break;
              this.error("INVALID_TOKEN", 'Unexpected token "' + this.peek().type + '", expected "when", "default" or "newline"', this.peek());
          }
        }
        this.expect("outdent");
        node2.block = block;
        return node2;
      },
      parseWhen: function() {
        var tok = this.expect("when");
        if (this.peek().type !== "newline") {
          return {
            type: "When",
            expr: tok.val,
            block: this.parseBlockExpansion(),
            debug: false,
            line: tok.loc.start.line,
            column: tok.loc.start.column,
            filename: this.filename
          };
        } else {
          return {
            type: "When",
            expr: tok.val,
            debug: false,
            line: tok.loc.start.line,
            column: tok.loc.start.column,
            filename: this.filename
          };
        }
      },
      parseDefault: function() {
        var tok = this.expect("default");
        return {
          type: "When",
          expr: "default",
          block: this.parseBlockExpansion(),
          debug: false,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
      },
      parseCode: function(noBlock) {
        var tok = this.expect("code");
        assert2(typeof tok.mustEscape === "boolean", "Please update to the newest version of pug-lexer.");
        var node2 = {
          type: "Code",
          val: tok.val,
          buffer: tok.buffer,
          mustEscape: tok.mustEscape !== false,
          isInline: !!noBlock,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        if (node2.val.match(/^ *else/))
          node2.debug = false;
        if (noBlock)
          return node2;
        var block;
        block = this.peek().type == "indent";
        if (block) {
          if (tok.buffer) {
            this.error("BLOCK_IN_BUFFERED_CODE", "Buffered code cannot have a block attached to it", this.peek());
          }
          node2.block = this.block();
        }
        return node2;
      },
      parseConditional: function() {
        var tok = this.expect("if");
        var node2 = {
          type: "Conditional",
          test: tok.val,
          consequent: this.emptyBlock(tok.loc.start.line),
          alternate: null,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        if (this.peek().type == "indent") {
          node2.consequent = this.block();
        }
        var currentNode = node2;
        while (true) {
          if (this.peek().type === "newline") {
            this.expect("newline");
          } else if (this.peek().type === "else-if") {
            tok = this.expect("else-if");
            currentNode = currentNode.alternate = {
              type: "Conditional",
              test: tok.val,
              consequent: this.emptyBlock(tok.loc.start.line),
              alternate: null,
              line: tok.loc.start.line,
              column: tok.loc.start.column,
              filename: this.filename
            };
            if (this.peek().type == "indent") {
              currentNode.consequent = this.block();
            }
          } else if (this.peek().type === "else") {
            this.expect("else");
            if (this.peek().type === "indent") {
              currentNode.alternate = this.block();
            }
            break;
          } else {
            break;
          }
        }
        return node2;
      },
      parseWhile: function() {
        var tok = this.expect("while");
        var node2 = {
          type: "While",
          test: tok.val,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        if (this.peek().type == "indent") {
          node2.block = this.block();
        } else {
          node2.block = this.emptyBlock(tok.loc.start.line);
        }
        return node2;
      },
      parseBlockCode: function() {
        var tok = this.expect("blockcode");
        var line = tok.loc.start.line;
        var column = tok.loc.start.column;
        var body = this.peek();
        var text = "";
        if (body.type === "start-pipeless-text") {
          this.advance();
          while (this.peek().type !== "end-pipeless-text") {
            tok = this.advance();
            switch (tok.type) {
              case "text":
                text += tok.val;
                break;
              case "newline":
                text += "\n";
                break;
              default:
                var pluginResult = this.runPlugin("blockCodeTokens", tok, tok);
                if (pluginResult) {
                  text += pluginResult;
                  break;
                }
                this.error("INVALID_TOKEN", "Unexpected token type: " + tok.type, tok);
            }
          }
          this.advance();
        }
        return {
          type: "Code",
          val: text,
          buffer: false,
          mustEscape: false,
          isInline: false,
          line,
          column,
          filename: this.filename
        };
      },
      parseComment: function() {
        var tok = this.expect("comment");
        var block;
        if (block = this.parseTextBlock()) {
          return {
            type: "BlockComment",
            val: tok.val,
            block,
            buffer: tok.buffer,
            line: tok.loc.start.line,
            column: tok.loc.start.column,
            filename: this.filename
          };
        } else {
          return {
            type: "Comment",
            val: tok.val,
            buffer: tok.buffer,
            line: tok.loc.start.line,
            column: tok.loc.start.column,
            filename: this.filename
          };
        }
      },
      parseDoctype: function() {
        var tok = this.expect("doctype");
        return {
          type: "Doctype",
          val: tok.val,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
      },
      parseIncludeFilter: function() {
        var tok = this.expect("filter");
        var attrs = [];
        if (this.peek().type === "start-attributes") {
          attrs = this.attrs();
        }
        return {
          type: "IncludeFilter",
          name: tok.val,
          attrs,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
      },
      parseFilter: function() {
        var tok = this.expect("filter");
        var block, attrs = [];
        if (this.peek().type === "start-attributes") {
          attrs = this.attrs();
        }
        if (this.peek().type === "text") {
          var textToken = this.advance();
          block = this.initBlock(textToken.loc.start.line, [
            {
              type: "Text",
              val: textToken.val,
              line: textToken.loc.start.line,
              column: textToken.loc.start.column,
              filename: this.filename
            }
          ]);
        } else if (this.peek().type === "filter") {
          block = this.initBlock(tok.loc.start.line, [this.parseFilter()]);
        } else {
          block = this.parseTextBlock() || this.emptyBlock(tok.loc.start.line);
        }
        return {
          type: "Filter",
          name: tok.val,
          block,
          attrs,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
      },
      parseEach: function() {
        var tok = this.expect("each");
        var node2 = {
          type: "Each",
          obj: tok.code,
          val: tok.val,
          key: tok.key,
          block: this.block(),
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        if (this.peek().type == "else") {
          this.advance();
          node2.alternate = this.block();
        }
        return node2;
      },
      parseEachOf: function() {
        var tok = this.expect("eachOf");
        var node2 = {
          type: "EachOf",
          obj: tok.code,
          val: tok.val,
          block: this.block(),
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        return node2;
      },
      parseExtends: function() {
        var tok = this.expect("extends");
        var path3 = this.expect("path");
        return {
          type: "Extends",
          file: {
            type: "FileReference",
            path: path3.val.trim(),
            line: path3.loc.start.line,
            column: path3.loc.start.column,
            filename: this.filename
          },
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
      },
      parseBlock: function() {
        var tok = this.expect("block");
        var node2 = this.peek().type == "indent" ? this.block() : this.emptyBlock(tok.loc.start.line);
        node2.type = "NamedBlock";
        node2.name = tok.val.trim();
        node2.mode = tok.mode;
        node2.line = tok.loc.start.line;
        node2.column = tok.loc.start.column;
        return node2;
      },
      parseMixinBlock: function() {
        var tok = this.expect("mixin-block");
        if (!this.inMixin) {
          this.error("BLOCK_OUTISDE_MIXIN", "Anonymous blocks are not allowed unless they are part of a mixin.", tok);
        }
        return {
          type: "MixinBlock",
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
      },
      parseYield: function() {
        var tok = this.expect("yield");
        return {
          type: "YieldBlock",
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
      },
      parseInclude: function() {
        var tok = this.expect("include");
        var node2 = {
          type: "Include",
          file: {
            type: "FileReference",
            filename: this.filename
          },
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        var filters = [];
        while (this.peek().type === "filter") {
          filters.push(this.parseIncludeFilter());
        }
        var path3 = this.expect("path");
        node2.file.path = path3.val.trim();
        node2.file.line = path3.loc.start.line;
        node2.file.column = path3.loc.start.column;
        if ((/\.jade$/.test(node2.file.path) || /\.pug$/.test(node2.file.path)) && !filters.length) {
          node2.block = this.peek().type == "indent" ? this.block() : this.emptyBlock(tok.loc.start.line);
          if (/\.jade$/.test(node2.file.path)) {
            console.warn(this.filename + ", line " + tok.loc.start.line + ':\nThe .jade extension is deprecated, use .pug for "' + node2.file.path + '".');
          }
        } else {
          node2.type = "RawInclude";
          node2.filters = filters;
          if (this.peek().type === "indent") {
            this.error("RAW_INCLUDE_BLOCK", "Raw inclusion cannot contain a block", this.peek());
          }
        }
        return node2;
      },
      parseCall: function() {
        var tok = this.expect("call");
        var name = tok.val;
        var args = tok.args;
        var mixin = {
          type: "Mixin",
          name,
          args,
          block: this.emptyBlock(tok.loc.start.line),
          call: true,
          attrs: [],
          attributeBlocks: [],
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        this.tag(mixin);
        if (mixin.code) {
          mixin.block.nodes.push(mixin.code);
          delete mixin.code;
        }
        if (mixin.block.nodes.length === 0)
          mixin.block = null;
        return mixin;
      },
      parseMixin: function() {
        var tok = this.expect("mixin");
        var name = tok.val;
        var args = tok.args;
        if (this.peek().type == "indent") {
          this.inMixin++;
          var mixin = {
            type: "Mixin",
            name,
            args,
            block: this.block(),
            call: false,
            line: tok.loc.start.line,
            column: tok.loc.start.column,
            filename: this.filename
          };
          this.inMixin--;
          return mixin;
        } else {
          this.error("MIXIN_WITHOUT_BODY", "Mixin " + name + " declared without body", tok);
        }
      },
      parseTextBlock: function() {
        var tok = this.accept("start-pipeless-text");
        if (!tok)
          return;
        var block = this.emptyBlock(tok.loc.start.line);
        while (this.peek().type !== "end-pipeless-text") {
          var tok = this.advance();
          switch (tok.type) {
            case "text":
              block.nodes.push({
                type: "Text",
                val: tok.val,
                line: tok.loc.start.line,
                column: tok.loc.start.column,
                filename: this.filename
              });
              break;
            case "newline":
              block.nodes.push({
                type: "Text",
                val: "\n",
                line: tok.loc.start.line,
                column: tok.loc.start.column,
                filename: this.filename
              });
              break;
            case "start-pug-interpolation":
              block.nodes.push(this.parseExpr());
              this.expect("end-pug-interpolation");
              break;
            case "interpolated-code":
              block.nodes.push({
                type: "Code",
                val: tok.val,
                buffer: tok.buffer,
                mustEscape: tok.mustEscape !== false,
                isInline: true,
                line: tok.loc.start.line,
                column: tok.loc.start.column,
                filename: this.filename
              });
              break;
            default:
              var pluginResult = this.runPlugin("textBlockTokens", tok, block, tok);
              if (pluginResult)
                break;
              this.error("INVALID_TOKEN", "Unexpected token type: " + tok.type, tok);
          }
        }
        this.advance();
        return block;
      },
      block: function() {
        var tok = this.expect("indent");
        var block = this.emptyBlock(tok.loc.start.line);
        while (this.peek().type != "outdent") {
          if (this.peek().type == "newline") {
            this.advance();
          } else if (this.peek().type == "text-html") {
            block.nodes = block.nodes.concat(this.parseTextHtml());
          } else {
            var expr = this.parseExpr();
            if (expr.type === "Block") {
              block.nodes = block.nodes.concat(expr.nodes);
            } else {
              block.nodes.push(expr);
            }
          }
        }
        this.expect("outdent");
        return block;
      },
      parseInterpolation: function() {
        var tok = this.advance();
        var tag2 = {
          type: "InterpolatedTag",
          expr: tok.val,
          selfClosing: false,
          block: this.emptyBlock(tok.loc.start.line),
          attrs: [],
          attributeBlocks: [],
          isInline: false,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        return this.tag(tag2, { selfClosingAllowed: true });
      },
      parseTag: function() {
        var tok = this.advance();
        var tag2 = {
          type: "Tag",
          name: tok.val,
          selfClosing: false,
          block: this.emptyBlock(tok.loc.start.line),
          attrs: [],
          attributeBlocks: [],
          isInline: inlineTags.indexOf(tok.val) !== -1,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        return this.tag(tag2, { selfClosingAllowed: true });
      },
      tag: function(tag2, options) {
        var seenAttrs = false;
        var attributeNames = [];
        var selfClosingAllowed = options && options.selfClosingAllowed;
        out:
          while (true) {
            switch (this.peek().type) {
              case "id":
              case "class":
                var tok = this.advance();
                if (tok.type === "id") {
                  if (attributeNames.indexOf("id") !== -1) {
                    this.error("DUPLICATE_ID", 'Duplicate attribute "id" is not allowed.', tok);
                  }
                  attributeNames.push("id");
                }
                tag2.attrs.push({
                  name: tok.type,
                  val: "'" + tok.val + "'",
                  line: tok.loc.start.line,
                  column: tok.loc.start.column,
                  filename: this.filename,
                  mustEscape: false
                });
                continue;
              case "start-attributes":
                if (seenAttrs) {
                  console.warn(this.filename + ", line " + this.peek().loc.start.line + ":\nYou should not have pug tags with multiple attributes.");
                }
                seenAttrs = true;
                tag2.attrs = tag2.attrs.concat(this.attrs(attributeNames));
                continue;
              case "&attributes":
                var tok = this.advance();
                tag2.attributeBlocks.push({
                  type: "AttributeBlock",
                  val: tok.val,
                  line: tok.loc.start.line,
                  column: tok.loc.start.column,
                  filename: this.filename
                });
                break;
              default:
                var pluginResult = this.runPlugin("tagAttributeTokens", this.peek(), tag2, attributeNames);
                if (pluginResult)
                  break;
                break out;
            }
          }
        if (this.peek().type == "dot") {
          tag2.textOnly = true;
          this.advance();
        }
        switch (this.peek().type) {
          case "text":
          case "interpolated-code":
            var text = this.parseText();
            if (text.type === "Block") {
              tag2.block.nodes.push.apply(tag2.block.nodes, text.nodes);
            } else {
              tag2.block.nodes.push(text);
            }
            break;
          case "code":
            tag2.block.nodes.push(this.parseCode(true));
            break;
          case ":":
            this.advance();
            var expr = this.parseExpr();
            tag2.block = expr.type === "Block" ? expr : this.initBlock(tag2.line, [expr]);
            break;
          case "newline":
          case "indent":
          case "outdent":
          case "eos":
          case "start-pipeless-text":
          case "end-pug-interpolation":
            break;
          case "slash":
            if (selfClosingAllowed) {
              this.advance();
              tag2.selfClosing = true;
              break;
            }
          default:
            var pluginResult = this.runPlugin("tagTokens", this.peek(), tag2, options);
            if (pluginResult)
              break;
            this.error("INVALID_TOKEN", "Unexpected token `" + this.peek().type + "` expected `text`, `interpolated-code`, `code`, `:`" + (selfClosingAllowed ? ", `slash`" : "") + ", `newline` or `eos`", this.peek());
        }
        while (this.peek().type == "newline")
          this.advance();
        if (tag2.textOnly) {
          tag2.block = this.parseTextBlock() || this.emptyBlock(tag2.line);
        } else if (this.peek().type == "indent") {
          var block = this.block();
          for (var i = 0, len = block.nodes.length; i < len; ++i) {
            tag2.block.nodes.push(block.nodes[i]);
          }
        }
        return tag2;
      },
      attrs: function(attributeNames) {
        this.expect("start-attributes");
        var attrs = [];
        var tok = this.advance();
        while (tok.type === "attribute") {
          if (tok.name !== "class" && attributeNames) {
            if (attributeNames.indexOf(tok.name) !== -1) {
              this.error("DUPLICATE_ATTRIBUTE", 'Duplicate attribute "' + tok.name + '" is not allowed.', tok);
            }
            attributeNames.push(tok.name);
          }
          attrs.push({
            name: tok.name,
            val: tok.val,
            line: tok.loc.start.line,
            column: tok.loc.start.column,
            filename: this.filename,
            mustEscape: tok.mustEscape !== false
          });
          tok = this.advance();
        }
        this.tokens.defer(tok);
        this.expect("end-attributes");
        return attrs;
      }
    };
  }
});

// ../../packages/pug-language-service/out/baseParse.js
var require_baseParse = __commonJS({
  "../../packages/pug-language-service/out/baseParse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.baseParse = void 0;
    var shared = require_node2();
    var SourceMap3 = require_out();
    var vscode_languageserver_textdocument_1 = (init_main(), __toCommonJS(main_exports));
    var code_gen_1 = require_out2();
    var pugLex = require_pug_lexer();
    var pugParser = require_pug_parser();
    function baseParse2(pugCode) {
      const fileName = "foo.pug";
      const pugTextDocument = vscode_languageserver_textdocument_1.TextDocument.create(shared.fsPathToUri("foo.pug"), "jade", 0, pugCode);
      const codeGen = new code_gen_1.CodeGen();
      let error2;
      let fullPugTagEnd;
      let emptyLineEnds;
      let attrsBlocks;
      let ast;
      try {
        const tokens = pugLex(pugCode, { filename: fileName });
        emptyLineEnds = collectEmptyLineEnds(tokens);
        attrsBlocks = collectAttrsBlocks(tokens);
        ast = pugParser(tokens, { filename: fileName, src: pugCode });
        visitNode(ast, void 0, void 0);
        for (const emptyLineEnd of emptyLineEnds) {
          codeGen.addText("<");
          codeGen.addCode("x__VLS_", {
            start: emptyLineEnd,
            end: emptyLineEnd
          }, SourceMap3.Mode.Totally, { isEmptyTagCompletion: true });
          codeGen.addText(" />");
        }
        codeGen.addCode("", {
          start: pugCode.trimEnd().length,
          end: pugCode.trimEnd().length
        }, SourceMap3.Mode.Totally, void 0);
      } catch (e) {
        const _error = e;
        error2 = Object.assign(Object.assign({}, _error), { line: _error.line - 1, column: _error.column - 1 });
      }
      ;
      const htmlCode = codeGen.getText();
      const sourceMap2 = new SourceMap3.SourceMapBase(codeGen.getMappings());
      return {
        htmlCode,
        pugTextDocument,
        sourceMap: sourceMap2,
        error: error2,
        ast
      };
      function visitNode(node2, next, parent) {
        if (node2.type === "Block") {
          for (let i = 0; i < node2.nodes.length; i++) {
            visitNode(node2.nodes[i], node2.nodes[i + 1], node2);
          }
        } else if (node2.type === "Tag") {
          const pugTagRange = getDocRange(node2.line, node2.column, node2.name.length);
          const fullHtmlStart = codeGen.getText().length;
          fullPugTagEnd = pugTagRange.end;
          const selfClosing = node2.block.nodes.length === 0;
          addStartTag(node2, selfClosing);
          if (!selfClosing) {
            visitNode(node2.block, next, parent);
            addEndTag(node2, next, parent);
          }
          const fullHtmlEnd = codeGen.getText().length;
          codeGen.addMapping2({
            data: void 0,
            sourceRange: {
              start: pugTagRange.start,
              end: fullPugTagEnd
            },
            mappedRange: {
              start: fullHtmlStart,
              end: fullHtmlEnd
            },
            mode: SourceMap3.Mode.Totally
          });
        } else if (node2.type === "Text") {
          codeGen.addCode(node2.val, getDocRange(node2.line, node2.column, node2.val.length), SourceMap3.Mode.Offset, void 0);
        }
      }
      function addStartTag(node2, selfClosing) {
        codeGen.addCode("", getDocRange(node2.line, node2.column, 0), SourceMap3.Mode.Totally, void 0);
        codeGen.addText("<");
        const tagRange = getDocRange(node2.line, node2.column, node2.name.length);
        if (pugCode.substring(tagRange.start, tagRange.end) === node2.name) {
          codeGen.addCode(node2.name, tagRange, SourceMap3.Mode.Offset, void 0);
        } else {
          codeGen.addText(node2.name);
        }
        const noTitleAttrs = node2.attrs.filter((attr) => !attr.mustEscape && attr.name !== "class");
        const noTitleClassAttrs = node2.attrs.filter((attr) => !attr.mustEscape && attr.name === "class");
        const attrsBlock = attrsBlocks.get(getDocOffset(node2.line, node2.column));
        addClassesOrStyles(noTitleClassAttrs, "class");
        for (const attr of noTitleAttrs) {
          codeGen.addText(" ");
          codeGen.addText(attr.name);
          if (typeof attr.val !== "boolean") {
            codeGen.addText("=");
            codeGen.addCode(attr.val, getDocRange(attr.line, attr.column, attr.val.length), SourceMap3.Mode.Offset, void 0);
          }
        }
        if (attrsBlock) {
          codeGen.addText(" ");
          codeGen.addCode(attrsBlock.text, { start: attrsBlock.offset, end: attrsBlock.offset + attrsBlock.text.length }, SourceMap3.Mode.Offset, void 0);
        }
        if (selfClosing) {
          codeGen.addText(" />");
        } else {
          codeGen.addText(">");
        }
      }
      function addEndTag(node2, next, parent) {
        let nextStart;
        if (next) {
          if (next.type === "Block") {
            nextStart = getDocOffset(next.line, 1);
          } else {
            nextStart = getDocOffset(next.line, next.column);
          }
        } else if (!parent) {
          nextStart = pugCode.length;
        }
        if (nextStart !== void 0) {
          fullPugTagEnd = nextStart;
          codeGen.addCode("", {
            start: nextStart,
            end: nextStart
          }, SourceMap3.Mode.Totally, void 0);
        }
        codeGen.addText(`</${node2.name}>`);
      }
      function addClassesOrStyles(attrs, attrName) {
        if (!attrs.length)
          return;
        codeGen.addText(" ");
        codeGen.addText(attrName);
        codeGen.addText("=");
        codeGen.addText('"');
        for (const attr of attrs) {
          if (typeof attr.val !== "boolean") {
            codeGen.addText(" ");
            codeGen.addCode(attr.val.slice(1, -1), getDocRange(attr.line, attr.column + 1, attr.val.length - 2), SourceMap3.Mode.Offset, void 0);
          }
        }
        codeGen.addText('"');
      }
      function collectEmptyLineEnds(tokens) {
        const ends = [];
        for (const token of tokens) {
          if (token.type === "newline" || token.type === "outdent") {
            let currentLine = token.loc.start.line - 2;
            let prevLine = shared.getLineText(pugTextDocument, currentLine);
            while (prevLine.trim() === "") {
              ends.push(pugTextDocument.offsetAt({ line: currentLine + 1, character: 0 }) - 1);
              if (currentLine <= 0)
                break;
              currentLine--;
              prevLine = shared.getLineText(pugTextDocument, currentLine);
            }
          }
        }
        return ends.sort((a, b) => a - b);
      }
      function collectAttrsBlocks(tokens) {
        const blocks = /* @__PURE__ */ new Map();
        for (let i = 0; i < tokens.length; i++) {
          const token = tokens[i];
          if (token.type === "start-attributes") {
            let addPrevSpace = function(currentToken) {
              text += pugCode.substring(getDocOffset(prevToken.loc.end.line, prevToken.loc.end.column), getDocOffset(currentToken.loc.start.line, currentToken.loc.start.column)).replace(/,/g, "\n");
            };
            let tagStart = token;
            for (let j = i - 1; j >= 0; j--) {
              const prevToken2 = tokens[j];
              if (prevToken2.type === "newline" || prevToken2.type === "indent" || prevToken2.type === "outdent" || prevToken2.type === ":")
                break;
              tagStart = prevToken2;
              if (prevToken2.type === "tag")
                break;
            }
            let prevToken = token;
            let text = "";
            for (i++; i < tokens.length; i++) {
              const attrToken = tokens[i];
              addPrevSpace(attrToken);
              if (attrToken.type === "attribute") {
                let attrText = pugCode.substring(getDocOffset(attrToken.loc.start.line, attrToken.loc.start.column), getDocOffset(attrToken.loc.end.line, attrToken.loc.end.column));
                if (typeof attrToken.val === "string" && attrText.indexOf("=") >= 0) {
                  let valText = attrToken.val;
                  if (valText.startsWith("`") && valText.endsWith("`")) {
                    valText = `"${valText.slice(1, -1)}"`;
                  }
                  valText = valText.replace(/ \\\n/g, "//\n");
                  text += attrText.substring(0, attrText.lastIndexOf(attrToken.val)) + valText;
                } else {
                  text += attrText;
                }
              } else if (attrToken.type === "end-attributes") {
                blocks.set(getDocOffset(tagStart.loc.start.line, tagStart.loc.start.column), {
                  offset: getDocOffset(token.loc.end.line, token.loc.end.column),
                  text
                });
                break;
              }
              prevToken = attrToken;
            }
          }
        }
        return blocks;
      }
      function getDocOffset(pugLine, pugColumn) {
        return pugTextDocument.offsetAt({ line: pugLine - 1, character: pugColumn - 1 });
      }
      function getDocRange(pugLine, pugColumn, length2) {
        const start = pugTextDocument.offsetAt({ line: pugLine - 1, character: pugColumn - 1 });
        const end = start + length2;
        return {
          start,
          end
        };
      }
    }
    exports2.baseParse = baseParse2;
  }
});

// ../../packages/pug-language-service/out/pugDocument.js
var require_pugDocument = __commonJS({
  "../../packages/pug-language-service/out/pugDocument.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SourceMap = exports2.register = void 0;
    var source_map_1 = require_out();
    var vscode_languageserver_textdocument_1 = (init_main(), __toCommonJS(main_exports));
    var baseParse_1 = require_baseParse();
    function register(htmlLs) {
      return (pugCode) => {
        const parsed = (0, baseParse_1.baseParse)(pugCode);
        const htmlTextDocument = vscode_languageserver_textdocument_1.TextDocument.create("foo.html", "html", 0, parsed.htmlCode);
        const sourceMap2 = new SourceMap3(parsed.pugTextDocument, htmlTextDocument, parsed.sourceMap.mappings);
        const htmlDocument = htmlLs.parseHTMLDocument(htmlTextDocument);
        return {
          pugTextDocument: parsed.pugTextDocument,
          htmlTextDocument,
          htmlDocument,
          sourceMap: sourceMap2,
          error: parsed.error,
          ast: parsed.ast
        };
      };
    }
    exports2.register = register;
    var SourceMap3 = class extends source_map_1.SourceMapBase {
      constructor(sourceDocument, mappedDocument, _mappings) {
        super(_mappings);
        this.sourceDocument = sourceDocument;
        this.mappedDocument = mappedDocument;
        this._mappings = _mappings;
      }
      getSourceRange(start, end, filter2) {
        for (const mapped of this.getRanges(start, end !== null && end !== void 0 ? end : start, false, filter2)) {
          return mapped;
        }
      }
      getMappedRange(start, end, filter2) {
        for (const mapped of this.getRanges(start, end !== null && end !== void 0 ? end : start, true, filter2)) {
          return mapped;
        }
      }
      getSourceRanges(start, end, filter2) {
        return this.getRanges(start, end !== null && end !== void 0 ? end : start, false, filter2);
      }
      getMappedRanges(start, end, filter2) {
        return this.getRanges(start, end !== null && end !== void 0 ? end : start, true, filter2);
      }
      *getRanges(start, end, sourceToTarget, filter2) {
        const startIsNumber = typeof start === "number";
        const endIsNumber = typeof end === "number";
        const toDoc = sourceToTarget ? this.mappedDocument : this.sourceDocument;
        const fromDoc = sourceToTarget ? this.sourceDocument : this.mappedDocument;
        const startOffset = startIsNumber ? start : fromDoc.offsetAt(start);
        const endOffset = endIsNumber ? end : fromDoc.offsetAt(end);
        for (const mapped of super.getRanges(startOffset, endOffset, sourceToTarget, filter2)) {
          yield getMapped(mapped);
        }
        function getMapped(mapped) {
          if (startIsNumber) {
            return mapped;
          }
          return [{
            start: toDoc.positionAt(mapped[0].start),
            end: toDoc.positionAt(mapped[0].end)
          }, mapped[1]];
        }
      }
    };
    exports2.SourceMap = SourceMap3;
  }
});

// ../../packages/transforms/out/locationLike.js
var require_locationLike = __commonJS({
  "../../packages/transforms/out/locationLike.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transform = void 0;
    function transform2(location, getOtherRange) {
      const range2 = getOtherRange(location.range);
      if (!range2)
        return;
      return Object.assign(Object.assign({}, location), { range: range2 });
    }
    exports2.transform = transform2;
  }
});

// ../../packages/transforms/out/locationsLike.js
var require_locationsLike = __commonJS({
  "../../packages/transforms/out/locationsLike.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transform = void 0;
    var shared = require_node2();
    var locationLike_1 = require_locationLike();
    function transform2(locations, getOtherRange) {
      return locations.map((location) => (0, locationLike_1.transform)(location, getOtherRange)).filter(shared.notEmpty);
    }
    exports2.transform = transform2;
  }
});

// ../../packages/transforms/out/textEdit.js
var require_textEdit = __commonJS({
  "../../packages/transforms/out/textEdit.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transform = void 0;
    var vscode = (init_main2(), __toCommonJS(main_exports2));
    function transform2(textEdit, getOtherRange) {
      if (vscode.TextEdit.is(textEdit)) {
        const range2 = getOtherRange(textEdit.range);
        if (!range2)
          return;
        return Object.assign(Object.assign({}, textEdit), { range: range2 });
      } else if (vscode.InsertReplaceEdit.is(textEdit)) {
        const insert2 = getOtherRange(textEdit.insert);
        if (!insert2)
          return;
        const replace = getOtherRange(textEdit.replace);
        if (!replace)
          return;
        return Object.assign(Object.assign({}, textEdit), {
          insert: insert2,
          replace
        });
      }
    }
    exports2.transform = transform2;
  }
});

// ../../packages/transforms/out/completionItem.js
var require_completionItem = __commonJS({
  "../../packages/transforms/out/completionItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transform = void 0;
    var locationsLike_1 = require_locationsLike();
    var textEdit_1 = require_textEdit();
    function transform2(item, getOtherRange) {
      return Object.assign(Object.assign({}, item), { additionalTextEdits: item.additionalTextEdits ? (0, locationsLike_1.transform)(item.additionalTextEdits, getOtherRange) : void 0, textEdit: item.textEdit ? (0, textEdit_1.transform)(item.textEdit, getOtherRange) : void 0 });
    }
    exports2.transform = transform2;
  }
});

// ../../packages/transforms/out/completionList.js
var require_completionList = __commonJS({
  "../../packages/transforms/out/completionList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transform = void 0;
    var completionItem_1 = require_completionItem();
    function transform2(completionList, getOtherRange) {
      return {
        isIncomplete: completionList.isIncomplete,
        items: completionList.items.map((item) => (0, completionItem_1.transform)(item, getOtherRange))
      };
    }
    exports2.transform = transform2;
  }
});

// ../../packages/transforms/out/foldingRanges.js
var require_foldingRanges = __commonJS({
  "../../packages/transforms/out/foldingRanges.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transform = void 0;
    function transform2(ranges, getOtherRange) {
      var _a, _b;
      const result2 = [];
      for (const range2 of ranges) {
        const vueRange = getOtherRange({
          start: { line: range2.startLine, character: (_a = range2.startCharacter) !== null && _a !== void 0 ? _a : 0 },
          end: { line: range2.endLine, character: (_b = range2.endCharacter) !== null && _b !== void 0 ? _b : 0 }
        });
        if (vueRange) {
          range2.startLine = vueRange.start.line;
          range2.endLine = vueRange.end.line;
          if (range2.startCharacter !== void 0)
            range2.startCharacter = vueRange.start.character;
          if (range2.endCharacter !== void 0)
            range2.endCharacter = vueRange.end.character;
          result2.push(range2);
        }
      }
      return result2;
    }
    exports2.transform = transform2;
  }
});

// ../../packages/transforms/out/hover.js
var require_hover = __commonJS({
  "../../packages/transforms/out/hover.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transform = void 0;
    function transform2(hover, getOtherRange) {
      if (!(hover === null || hover === void 0 ? void 0 : hover.range)) {
        return hover;
      }
      const range2 = getOtherRange(hover.range);
      if (!range2)
        return;
      return Object.assign(Object.assign({}, hover), { range: range2 });
    }
    exports2.transform = transform2;
  }
});

// ../../packages/transforms/out/selectionRange.js
var require_selectionRange = __commonJS({
  "../../packages/transforms/out/selectionRange.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transform = void 0;
    function transform2(location, getOtherRange) {
      const range2 = getOtherRange(location.range);
      if (!range2)
        return;
      const parent = location.parent ? transform2(location.parent, getOtherRange) : void 0;
      return {
        range: range2,
        parent
      };
    }
    exports2.transform = transform2;
  }
});

// ../../packages/transforms/out/selectionRanges.js
var require_selectionRanges = __commonJS({
  "../../packages/transforms/out/selectionRanges.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transform = void 0;
    var shared = require_node2();
    var selectionRange_1 = require_selectionRange();
    function transform2(locations, getOtherRange) {
      return locations.map((location) => (0, selectionRange_1.transform)(location, getOtherRange)).filter(shared.notEmpty);
    }
    exports2.transform = transform2;
  }
});

// ../../packages/transforms/out/symbolInformation.js
var require_symbolInformation = __commonJS({
  "../../packages/transforms/out/symbolInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transform = void 0;
    function transform2(symbol, getOtherLocation) {
      const location = getOtherLocation(symbol.location);
      if (!location)
        return;
      return Object.assign(Object.assign({}, symbol), { location });
    }
    exports2.transform = transform2;
  }
});

// ../../packages/transforms/out/symbolInformations.js
var require_symbolInformations = __commonJS({
  "../../packages/transforms/out/symbolInformations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transform = void 0;
    var shared = require_node2();
    var symbolInformation_1 = require_symbolInformation();
    function transform2(locations, getOtherLocation) {
      return locations.map((location) => (0, symbolInformation_1.transform)(location, getOtherLocation)).filter(shared.notEmpty);
    }
    exports2.transform = transform2;
  }
});

// ../../packages/transforms/out/index.js
var require_out4 = __commonJS({
  "../../packages/transforms/out/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformTextEdit = exports2.transformSymbolInformations = exports2.transformSymbolInformation = exports2.transformSelectionRanges = exports2.transformSelectionRange = exports2.transformLocations = exports2.transformLocation = exports2.transformHover = exports2.transformFoldingRanges = exports2.transformCompletionList = exports2.transformCompletionItem = void 0;
    var completionItem_1 = require_completionItem();
    Object.defineProperty(exports2, "transformCompletionItem", { enumerable: true, get: function() {
      return completionItem_1.transform;
    } });
    var completionList_1 = require_completionList();
    Object.defineProperty(exports2, "transformCompletionList", { enumerable: true, get: function() {
      return completionList_1.transform;
    } });
    var foldingRanges_1 = require_foldingRanges();
    Object.defineProperty(exports2, "transformFoldingRanges", { enumerable: true, get: function() {
      return foldingRanges_1.transform;
    } });
    var hover_1 = require_hover();
    Object.defineProperty(exports2, "transformHover", { enumerable: true, get: function() {
      return hover_1.transform;
    } });
    var locationLike_1 = require_locationLike();
    Object.defineProperty(exports2, "transformLocation", { enumerable: true, get: function() {
      return locationLike_1.transform;
    } });
    var locationsLike_1 = require_locationsLike();
    Object.defineProperty(exports2, "transformLocations", { enumerable: true, get: function() {
      return locationsLike_1.transform;
    } });
    var selectionRange_1 = require_selectionRange();
    Object.defineProperty(exports2, "transformSelectionRange", { enumerable: true, get: function() {
      return selectionRange_1.transform;
    } });
    var selectionRanges_1 = require_selectionRanges();
    Object.defineProperty(exports2, "transformSelectionRanges", { enumerable: true, get: function() {
      return selectionRanges_1.transform;
    } });
    var symbolInformation_1 = require_symbolInformation();
    Object.defineProperty(exports2, "transformSymbolInformation", { enumerable: true, get: function() {
      return symbolInformation_1.transform;
    } });
    var symbolInformations_1 = require_symbolInformations();
    Object.defineProperty(exports2, "transformSymbolInformations", { enumerable: true, get: function() {
      return symbolInformations_1.transform;
    } });
    var textEdit_1 = require_textEdit();
    Object.defineProperty(exports2, "transformTextEdit", { enumerable: true, get: function() {
      return textEdit_1.transform;
    } });
  }
});

// ../../packages/pug-language-service/out/services/completion.js
var require_completion = __commonJS({
  "../../packages/pug-language-service/out/services/completion.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P || (P = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result2) {
          result2.done ? resolve2(result2.value) : adopt(result2.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.register = void 0;
    var transforms_1 = require_out4();
    function register(htmlLs) {
      return (pugDoc, pos, documentContext, options) => __awaiter2(this, void 0, void 0, function* () {
        var _a;
        const htmlRange = (_a = pugDoc.sourceMap.getMappedRange(pos)) === null || _a === void 0 ? void 0 : _a[0];
        if (!htmlRange)
          return;
        const htmlComplete = yield htmlLs.doComplete2(pugDoc.htmlTextDocument, htmlRange.start, pugDoc.htmlDocument, documentContext, options);
        return (0, transforms_1.transformCompletionList)(htmlComplete, (htmlRange2) => {
          var _a2;
          return (_a2 = pugDoc.sourceMap.getSourceRange(htmlRange2.start, htmlRange2.end)) === null || _a2 === void 0 ? void 0 : _a2[0];
        });
      });
    }
    exports2.register = register;
  }
});

// ../../packages/pug-language-service/out/services/documentHighlight.js
var require_documentHighlight = __commonJS({
  "../../packages/pug-language-service/out/services/documentHighlight.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.register = void 0;
    var transforms_1 = require_out4();
    function register(htmlLs) {
      return (pugDoc, pos) => {
        var _a;
        const htmlRange = (_a = pugDoc.sourceMap.getMappedRange(pos, pos, (data) => !(data === null || data === void 0 ? void 0 : data.isEmptyTagCompletion))) === null || _a === void 0 ? void 0 : _a[0];
        if (!htmlRange)
          return;
        const htmlResult = htmlLs.findDocumentHighlights(pugDoc.sourceMap.mappedDocument, htmlRange.start, pugDoc.htmlDocument);
        return (0, transforms_1.transformLocations)(htmlResult, (htmlRange2) => {
          var _a2;
          return (_a2 = pugDoc.sourceMap.getSourceRange(htmlRange2.start, htmlRange2.end)) === null || _a2 === void 0 ? void 0 : _a2[0];
        });
      };
    }
    exports2.register = register;
  }
});

// ../../packages/pug-language-service/out/services/documentLinks.js
var require_documentLinks = __commonJS({
  "../../packages/pug-language-service/out/services/documentLinks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.register = void 0;
    var transforms_1 = require_out4();
    function register(htmlLs) {
      return (pugDoc, docContext) => {
        const htmlResult = htmlLs.findDocumentLinks(pugDoc.sourceMap.mappedDocument, docContext);
        return (0, transforms_1.transformLocations)(htmlResult, (htmlRange) => {
          var _a;
          return (_a = pugDoc.sourceMap.getSourceRange(htmlRange.start, htmlRange.end)) === null || _a === void 0 ? void 0 : _a[0];
        });
      };
    }
    exports2.register = register;
  }
});

// ../../packages/pug-language-service/out/services/documentSymbol.js
var require_documentSymbol = __commonJS({
  "../../packages/pug-language-service/out/services/documentSymbol.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.register = void 0;
    var transforms_1 = require_out4();
    var vscode = (init_main2(), __toCommonJS(main_exports2));
    function register(htmlLs) {
      return (pugDoc) => {
        const htmlResult = htmlLs.findDocumentSymbols(pugDoc.sourceMap.mappedDocument, pugDoc.htmlDocument);
        return (0, transforms_1.transformSymbolInformations)(htmlResult, (htmlLocation) => {
          var _a;
          const pugRange = (_a = pugDoc.sourceMap.getSourceRange(htmlLocation.range.start, htmlLocation.range.end)) === null || _a === void 0 ? void 0 : _a[0];
          return pugRange ? vscode.Location.create(pugDoc.sourceMap.sourceDocument.uri, pugRange) : void 0;
        });
      };
    }
    exports2.register = register;
  }
});

// ../../packages/pug-language-service/out/services/hover.js
var require_hover2 = __commonJS({
  "../../packages/pug-language-service/out/services/hover.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.register = void 0;
    var transforms_1 = require_out4();
    function register(htmlLs) {
      return (docDoc, pos, options) => {
        var _a;
        const htmlRange = (_a = docDoc.sourceMap.getMappedRange(pos, pos, (data) => !(data === null || data === void 0 ? void 0 : data.isEmptyTagCompletion))) === null || _a === void 0 ? void 0 : _a[0];
        if (!htmlRange)
          return;
        const htmlResult = htmlLs.doHover(docDoc.sourceMap.mappedDocument, htmlRange.start, docDoc.htmlDocument, options);
        if (!htmlResult)
          return;
        return (0, transforms_1.transformHover)(htmlResult, (htmlRange2) => {
          var _a2;
          return (_a2 = docDoc.sourceMap.getSourceRange(htmlRange2.start, htmlRange2.end)) === null || _a2 === void 0 ? void 0 : _a2[0];
        });
      };
    }
    exports2.register = register;
  }
});

// ../../packages/pug-language-service/out/services/scanner.js
var require_scanner = __commonJS({
  "../../packages/pug-language-service/out/services/scanner.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.register = void 0;
    function register(htmlLs) {
      return (pugDoc, initialOffset = 0) => {
        var _a, _b;
        let htmlRange = (_a = pugDoc.sourceMap.getMappedRange(initialOffset, initialOffset, (data) => !(data === null || data === void 0 ? void 0 : data.isEmptyTagCompletion))) === null || _a === void 0 ? void 0 : _a[0];
        while (!htmlRange && initialOffset < pugDoc.pugTextDocument.getText().length) {
          initialOffset++;
          htmlRange = (_b = pugDoc.sourceMap.getMappedRange(initialOffset, initialOffset, (data) => !(data === null || data === void 0 ? void 0 : data.isEmptyTagCompletion))) === null || _b === void 0 ? void 0 : _b[0];
        }
        if (!htmlRange)
          return;
        const htmlScanner = htmlLs.createScanner(pugDoc.htmlTextDocument.getText(), htmlRange.start);
        let offset;
        let end;
        const scanner = {
          scan: () => {
            offset = void 0;
            end = void 0;
            return htmlScanner.scan();
          },
          getTokenOffset: () => {
            getTokenRange();
            return offset;
          },
          getTokenEnd: () => {
            getTokenRange();
            return end;
          },
          getTokenText: htmlScanner.getTokenText,
          getTokenLength: htmlScanner.getTokenLength,
          getTokenError: htmlScanner.getTokenError,
          getScannerState: htmlScanner.getScannerState
        };
        return scanner;
        function getTokenRange() {
          var _a2;
          if (offset === void 0 || end === void 0) {
            const htmlOffset = htmlScanner.getTokenOffset();
            const htmlEnd = htmlScanner.getTokenEnd();
            const pugRange = (_a2 = pugDoc.sourceMap.getSourceRange(htmlOffset, htmlEnd)) === null || _a2 === void 0 ? void 0 : _a2[0];
            if (pugRange) {
              offset = pugRange.start;
              end = pugRange.end;
            } else {
              offset = -1;
              end = -1;
            }
          }
        }
      };
    }
    exports2.register = register;
  }
});

// ../../packages/pug-language-service/out/services/selectionRanges.js
var require_selectionRanges2 = __commonJS({
  "../../packages/pug-language-service/out/services/selectionRanges.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.register = void 0;
    var shared = require_node2();
    var transforms_1 = require_out4();
    function register(htmlLs) {
      return (pugDoc, posArr) => {
        const htmlPosArr = posArr.map((position) => {
          var _a;
          return (_a = pugDoc.sourceMap.getMappedRange(position, position, (data) => !(data === null || data === void 0 ? void 0 : data.isEmptyTagCompletion))) === null || _a === void 0 ? void 0 : _a[0].start;
        }).filter(shared.notEmpty);
        const htmlResult = htmlLs.getSelectionRanges(pugDoc.sourceMap.mappedDocument, htmlPosArr);
        return (0, transforms_1.transformLocations)(htmlResult, (htmlRange) => {
          var _a;
          return (_a = pugDoc.sourceMap.getSourceRange(htmlRange.start, htmlRange.end)) === null || _a === void 0 ? void 0 : _a[0];
        });
      };
    }
    exports2.register = register;
  }
});

// ../../packages/pug-language-service/out/services/foldingRanges.js
var require_foldingRanges2 = __commonJS({
  "../../packages/pug-language-service/out/services/foldingRanges.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.register = void 0;
    var vscode = (init_main2(), __toCommonJS(main_exports2));
    function register() {
      return (pugDoc) => {
        const result2 = [];
        const docEndPos = pugDoc.pugTextDocument.positionAt(pugDoc.pugTextDocument.getText().length);
        if (pugDoc.ast) {
          visitNode(pugDoc.ast, findMinimalEndLine(docEndPos.line));
        }
        return result2;
        function visitNode(node2, endLine) {
          if (node2.type === "Block") {
            for (let i = 0; i < node2.nodes.length; i++) {
              const child = node2.nodes[i];
              const next = i + 1 < node2.nodes.length ? node2.nodes[i + 1] : void 0;
              visitNode(child, next ? findMinimalEndLine(next.line - 2) : endLine);
            }
          } else if (node2.type === "Tag" || node2.type === "BlockComment") {
            const nodeLine = node2.line - 1;
            if (nodeLine !== endLine) {
              result2.push(vscode.FoldingRange.create(nodeLine, endLine, void 0, void 0, node2.type === "BlockComment" ? vscode.FoldingRangeKind.Comment : void 0));
            }
            visitNode(node2.block, endLine);
          }
        }
        function findMinimalEndLine(endLine) {
          while (endLine > 0 && getLineText(endLine).trim() === "") {
            endLine--;
          }
          return endLine;
        }
        function getLineText(line) {
          if (line === docEndPos.line) {
            return pugDoc.pugTextDocument.getText({
              start: { line, character: 0 },
              end: docEndPos
            });
          }
          const text = pugDoc.pugTextDocument.getText({
            start: { line, character: 0 },
            end: { line: line + 1, character: 0 }
          });
          return text.substring(0, text.length - 1);
        }
      };
    }
    exports2.register = register;
  }
});

// ../../packages/pug-language-service/out/index.js
var require_out5 = __commonJS({
  "../../packages/pug-language-service/out/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLanguageService = exports2.baseParse = void 0;
    var pugDocument_1 = require_pugDocument();
    var completion_1 = require_completion();
    var documentHighlight_1 = require_documentHighlight();
    var documentLinks_1 = require_documentLinks();
    var documentSymbol_1 = require_documentSymbol();
    var hover_1 = require_hover2();
    var scanner_1 = require_scanner();
    var selectionRanges_1 = require_selectionRanges2();
    var foldingRanges_1 = require_foldingRanges2();
    var baseParse_1 = require_baseParse();
    Object.defineProperty(exports2, "baseParse", { enumerable: true, get: function() {
      return baseParse_1.baseParse;
    } });
    function getLanguageService(htmlLs) {
      return {
        parsePugDocument: (0, pugDocument_1.register)(htmlLs),
        doComplete: (0, completion_1.register)(htmlLs),
        findDocumentHighlights: (0, documentHighlight_1.register)(htmlLs),
        findDocumentLinks: (0, documentLinks_1.register)(htmlLs),
        findDocumentSymbols: (0, documentSymbol_1.register)(htmlLs),
        doHover: (0, hover_1.register)(htmlLs),
        createScanner: (0, scanner_1.register)(htmlLs),
        getSelectionRanges: (0, selectionRanges_1.register)(htmlLs),
        getFoldingRanges: (0, foldingRanges_1.register)()
      };
    }
    exports2.getLanguageService = getLanguageService;
  }
});

// ../../packages/vue-typescript/out/plugins/pug.js
var require_pug = __commonJS({
  "../../packages/vue-typescript/out/plugins/pug.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function default_1() {
      return {
        compileTemplate(template, lang) {
          if (lang === "pug") {
            let pug;
            try {
              pug = require_out5();
            } catch (_a) {
            }
            const pugDoc = pug === null || pug === void 0 ? void 0 : pug.baseParse(template);
            if (pugDoc) {
              return {
                html: pugDoc.htmlCode,
                mapping: (htmlStart, htmlEnd) => {
                  var _a, _b, _c, _d, _e;
                  const pugRange = (_a = pugDoc.sourceMap.getSourceRange(htmlStart, htmlEnd, (data) => !(data === null || data === void 0 ? void 0 : data.isEmptyTagCompletion))) === null || _a === void 0 ? void 0 : _a[0];
                  if (pugRange) {
                    return pugRange;
                  } else {
                    const pugStart = (_c = (_b = pugDoc.sourceMap.getSourceRange(htmlStart, htmlStart, (data) => !(data === null || data === void 0 ? void 0 : data.isEmptyTagCompletion))) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.start;
                    const pugEnd = (_e = (_d = pugDoc.sourceMap.getSourceRange(htmlEnd, htmlEnd, (data) => !(data === null || data === void 0 ? void 0 : data.isEmptyTagCompletion))) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.end;
                    if (pugStart !== void 0 && pugEnd !== void 0) {
                      return { start: pugStart, end: pugEnd };
                    }
                  }
                }
              };
            }
          }
        }
      };
    }
    exports2.default = default_1;
  }
});

// ../../packages/vue-typescript/out/utils/moduleSpecifierCache.js
var require_moduleSpecifierCache = __commonJS({
  "../../packages/vue-typescript/out/utils/moduleSpecifierCache.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createModuleSpecifierCache = void 0;
    function createModuleSpecifierCache() {
      let cache;
      let currentKey;
      const result2 = {
        get(fromFileName, toFileName, preferences) {
          if (!cache || currentKey !== key(fromFileName, preferences))
            return void 0;
          return cache.get(toFileName);
        },
        set(fromFileName, toFileName, preferences, modulePaths, moduleSpecifiers) {
          ensureCache(fromFileName, preferences).set(toFileName, createInfo(modulePaths, moduleSpecifiers, true));
          if (moduleSpecifiers) {
            for (const p of modulePaths) {
              if (p.isInNodeModules) {
              }
            }
          }
        },
        setModulePaths(fromFileName, toFileName, preferences, modulePaths) {
          const cache2 = ensureCache(fromFileName, preferences);
          const info = cache2.get(toFileName);
          if (info) {
            info.modulePaths = modulePaths;
          } else {
            cache2.set(toFileName, createInfo(modulePaths, void 0, void 0));
          }
        },
        setIsAutoImportable(fromFileName, toFileName, preferences, isAutoImportable) {
          const cache2 = ensureCache(fromFileName, preferences);
          const info = cache2.get(toFileName);
          if (info) {
            info.isAutoImportable = isAutoImportable;
          } else {
            cache2.set(toFileName, createInfo(void 0, void 0, isAutoImportable));
          }
        },
        clear() {
          cache === null || cache === void 0 ? void 0 : cache.clear();
          currentKey = void 0;
        },
        count() {
          return cache ? cache.size : 0;
        }
      };
      return result2;
      function ensureCache(fromFileName, preferences) {
        const newKey = key(fromFileName, preferences);
        if (cache && currentKey !== newKey) {
          result2.clear();
        }
        currentKey = newKey;
        return cache || (cache = /* @__PURE__ */ new Map());
      }
      function key(fromFileName, preferences) {
        return `${fromFileName},${preferences.importModuleSpecifierEnding},${preferences.importModuleSpecifierPreference}`;
      }
      function createInfo(modulePaths, moduleSpecifiers, isAutoImportable) {
        return { modulePaths, moduleSpecifiers, isAutoImportable };
      }
    }
    exports2.createModuleSpecifierCache = createModuleSpecifierCache;
  }
});

// ../../packages/vue-typescript/out/utils/packageJsonCache.js
var require_packageJsonCache = __commonJS({
  "../../packages/vue-typescript/out/utils/packageJsonCache.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createPackageJsonCache = exports2.canCreatePackageJsonCache = void 0;
    function canCreatePackageJsonCache(ts) {
      return "createPackageJsonInfo" in ts && "getDirectoryPath" in ts && "combinePaths" in ts && "tryFileExists" in ts && "forEachAncestorDirectory" in ts;
    }
    exports2.canCreatePackageJsonCache = canCreatePackageJsonCache;
    function createPackageJsonCache(ts, host) {
      const { createPackageJsonInfo, getDirectoryPath, combinePaths, tryFileExists, forEachAncestorDirectory } = ts;
      const packageJsons = /* @__PURE__ */ new Map();
      const directoriesWithoutPackageJson = /* @__PURE__ */ new Map();
      return {
        addOrUpdate,
        forEach: packageJsons.forEach.bind(packageJsons),
        get: packageJsons.get.bind(packageJsons),
        delete: (fileName) => {
          packageJsons.delete(fileName);
          directoriesWithoutPackageJson.set(getDirectoryPath(fileName), true);
        },
        getInDirectory: (directory) => {
          return packageJsons.get(combinePaths(directory, "package.json")) || void 0;
        },
        directoryHasPackageJson,
        searchDirectoryAndAncestors: (directory) => {
          forEachAncestorDirectory(directory, (ancestor) => {
            if (directoryHasPackageJson(ancestor) !== 3) {
              return true;
            }
            const packageJsonFileName = host.toPath(combinePaths(ancestor, "package.json"));
            if (tryFileExists(host, packageJsonFileName)) {
              addOrUpdate(packageJsonFileName);
            } else {
              directoriesWithoutPackageJson.set(ancestor, true);
            }
          });
        }
      };
      function addOrUpdate(fileName) {
        const packageJsonInfo = createPackageJsonInfo(fileName, host.host);
        packageJsons.set(fileName, packageJsonInfo);
        directoriesWithoutPackageJson.delete(getDirectoryPath(fileName));
      }
      function directoryHasPackageJson(directory) {
        return packageJsons.has(combinePaths(directory, "package.json")) ? -1 : directoriesWithoutPackageJson.has(directory) ? 0 : 3;
      }
    }
    exports2.createPackageJsonCache = createPackageJsonCache;
  }
});

// ../../packages/vue-typescript/out/utils/ts.js
var require_ts2 = __commonJS({
  "../../packages/vue-typescript/out/utils/ts.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createParsedCommandLine = exports2.injectCacheLogicToLanguageServiceHost = void 0;
    var moduleSpecifierCache_1 = require_moduleSpecifierCache();
    var packageJsonCache_1 = require_packageJsonCache();
    var path3 = require("path");
    function injectCacheLogicToLanguageServiceHost(ts, host, service) {
      const _createCacheableExportInfoMap = ts.createCacheableExportInfoMap;
      const _combinePaths = ts.combinePaths;
      const _forEachAncestorDirectory = ts.forEachAncestorDirectory;
      const _getDirectoryPath = ts.getDirectoryPath;
      const _toPath = ts.toPath;
      const _createGetCanonicalFileName = ts.createGetCanonicalFileName;
      if (!_createCacheableExportInfoMap || !_combinePaths || !_forEachAncestorDirectory || !_getDirectoryPath || !_toPath || !_createGetCanonicalFileName || !(0, packageJsonCache_1.canCreatePackageJsonCache)(ts))
        return;
      const moduleSpecifierCache = (0, moduleSpecifierCache_1.createModuleSpecifierCache)();
      const exportMapCache = _createCacheableExportInfoMap({
        getCurrentProgram() {
          return service.getProgram();
        },
        getPackageJsonAutoImportProvider() {
          return service.getProgram();
        }
      });
      const packageJsonCache = (0, packageJsonCache_1.createPackageJsonCache)(ts, Object.assign(Object.assign({}, host), {
        host: Object.assign({}, host),
        toPath
      }));
      host.getCachedExportInfoMap = () => exportMapCache;
      host.getModuleSpecifierCache = () => moduleSpecifierCache;
      host.getPackageJsonsVisibleToFile = (fileName, rootDir) => {
        const rootPath = rootDir && toPath(rootDir);
        const filePath = toPath(fileName);
        const result2 = [];
        const processDirectory = (directory) => {
          switch (packageJsonCache.directoryHasPackageJson(directory)) {
            case 3:
              packageJsonCache.searchDirectoryAndAncestors(directory);
              return processDirectory(directory);
            case -1:
              const packageJsonFileName = _combinePaths(directory, "package.json");
              const info = packageJsonCache.getInDirectory(directory);
              if (info)
                result2.push(info);
          }
          if (rootPath && rootPath === directory) {
            return true;
          }
        };
        _forEachAncestorDirectory(_getDirectoryPath(filePath), processDirectory);
        return result2;
      };
      function toPath(fileName) {
        var _a;
        return _toPath(fileName, host.getCurrentDirectory(), _createGetCanonicalFileName((_a = host.useCaseSensitiveFileNames) === null || _a === void 0 ? void 0 : _a.call(host)));
      }
    }
    exports2.injectCacheLogicToLanguageServiceHost = injectCacheLogicToLanguageServiceHost;
    function createParsedCommandLine(ts, parseConfigHost, tsConfig, extendsSet = /* @__PURE__ */ new Set()) {
      var _a;
      const tsConfigPath = ts.sys.resolvePath(tsConfig);
      const config2 = ts.readJsonConfigFile(tsConfigPath, ts.sys.readFile);
      const content = ts.parseJsonSourceFileConfigFileContent(config2, parseConfigHost, path3.dirname(tsConfigPath), {}, path3.basename(tsConfigPath));
      content.options.outDir = void 0;
      let baseVueOptions = {};
      const folder = path3.dirname(tsConfig);
      extendsSet.add(tsConfig);
      if (content.raw.extends) {
        try {
          const extendsPath = require.resolve(content.raw.extends, { paths: [folder] });
          if (!extendsSet.has(extendsPath)) {
            baseVueOptions = createParsedCommandLine(ts, parseConfigHost, extendsPath, extendsSet).vueOptions;
          }
        } catch (error2) {
          console.error(error2);
        }
      }
      return Object.assign(Object.assign({}, content), { vueOptions: Object.assign(Object.assign({}, baseVueOptions), resolveVueCompilerOptions((_a = content.raw.vueCompilerOptions) !== null && _a !== void 0 ? _a : {}, folder)) });
    }
    exports2.createParsedCommandLine = createParsedCommandLine;
    function resolveVueCompilerOptions(rawOptions, rootPath) {
      const result2 = Object.assign({}, rawOptions);
      let templateOptionsPath = rawOptions.experimentalTemplateCompilerOptionsRequirePath;
      if (templateOptionsPath) {
        if (!path3.isAbsolute(templateOptionsPath)) {
          templateOptionsPath = require.resolve(templateOptionsPath, { paths: [rootPath] });
        }
        try {
          result2.experimentalTemplateCompilerOptions = require(templateOptionsPath).default;
        } catch (error2) {
          console.warn('Failed to require "experimentalTemplateCompilerOptionsRequirePath":', templateOptionsPath);
          console.error(error2);
        }
      }
      return result2;
    }
  }
});

// ../../packages/vue-typescript/out/typescriptRuntime.js
var require_typescriptRuntime = __commonJS({
  "../../packages/vue-typescript/out/typescriptRuntime.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createTypeScriptRuntime = void 0;
    var path3 = require("path");
    var html_1 = require_html();
    var pug_1 = require_pug();
    var localTypes = require_localTypes();
    var ts_1 = require_ts2();
    var vueFile_1 = require_vueFile();
    var vueFiles_1 = require_vueFiles();
    function createTypeScriptRuntime(options) {
      const { typescript: ts } = options;
      const isVue2 = options.vueLsHost.getVueCompilationSettings().experimentalCompatMode === 2;
      const tsFileVersions = /* @__PURE__ */ new Map();
      const vueFiles = (0, vueFiles_1.createVueFiles)();
      const plugins = [
        (0, html_1.default)(),
        (0, pug_1.default)()
      ];
      const tsLsHost = createTsLsHost();
      const tsLsRaw = ts.createLanguageService(tsLsHost);
      const localTypesScript = ts.ScriptSnapshot.fromString(localTypes.getTypesCode(isVue2));
      let lastProjectVersion;
      let tsProjectVersion = 0;
      (0, ts_1.injectCacheLogicToLanguageServiceHost)(ts, tsLsHost, tsLsRaw);
      return {
        vueLsHost: options.vueLsHost,
        vueFiles,
        getTsLs: () => tsLsRaw,
        getTsLsHost: () => tsLsHost,
        update,
        dispose: () => {
          tsLsRaw.dispose();
        },
        getLocalTypesFiles: () => {
          const fileNames = getLocalTypesFiles();
          const code = localTypes.getTypesCode(isVue2);
          return {
            fileNames,
            code
          };
        }
      };
      function getLocalTypesFiles() {
        return vueFiles.getDirs().map((dir) => path3.join(dir, localTypes.typesFileName));
      }
      function update() {
        var _a, _b, _c, _d, _e, _f;
        const newProjectVersion = (_b = (_a = options.vueLsHost).getProjectVersion) === null || _b === void 0 ? void 0 : _b.call(_a);
        if (newProjectVersion === void 0 || newProjectVersion !== lastProjectVersion) {
          lastProjectVersion = newProjectVersion;
          const fileNames = options.vueLsHost.getScriptFileNames();
          const vueFileNames = new Set(fileNames.filter((file) => file.endsWith(".vue")));
          const tsFileNames = new Set(fileNames.filter((file) => !file.endsWith(".vue")));
          const fileNamesToRemove = [];
          const fileNamesToCreate = [];
          const fileNamesToUpdate = [];
          let tsFileUpdated = false;
          for (const vueFile of vueFiles.getAll()) {
            if (!vueFileNames.has(vueFile.fileName) && !((_d = (_c = options.vueLsHost).fileExists) === null || _d === void 0 ? void 0 : _d.call(_c, vueFile.fileName))) {
              fileNamesToRemove.push(vueFile.fileName);
            } else {
              const newVersion = options.vueLsHost.getScriptVersion(vueFile.fileName);
              if (vueFile.getVersion() !== newVersion) {
                fileNamesToUpdate.push(vueFile.fileName);
              }
            }
          }
          for (const nowFileName of vueFileNames) {
            if (!vueFiles.get(nowFileName)) {
              fileNamesToCreate.push(nowFileName);
            }
          }
          for (const tsFileVersion of tsFileVersions) {
            if (!vueFileNames.has(tsFileVersion[0]) && !((_f = (_e = options.vueLsHost).fileExists) === null || _f === void 0 ? void 0 : _f.call(_e, tsFileVersion[0]))) {
              tsFileVersions.delete(tsFileVersion[0]);
              tsFileUpdated = true;
            } else {
              const newVersion = options.vueLsHost.getScriptVersion(tsFileVersion[0]);
              if (tsFileVersion[1] !== newVersion) {
                tsFileVersions.set(tsFileVersion[0], newVersion);
                tsFileUpdated = true;
              }
            }
          }
          for (const nowFileName of tsFileNames) {
            if (!tsFileVersions.has(nowFileName)) {
              const newVersion = options.vueLsHost.getScriptVersion(nowFileName);
              tsFileVersions.set(nowFileName, newVersion);
              tsFileUpdated = true;
            }
          }
          if (tsFileUpdated) {
            tsProjectVersion++;
          }
          const finalUpdateFileNames = fileNamesToCreate.concat(fileNamesToUpdate);
          if (fileNamesToRemove.length) {
            unsetSourceFiles(fileNamesToRemove);
          }
          if (finalUpdateFileNames.length) {
            updateSourceFiles(finalUpdateFileNames);
          }
        }
      }
      function createTsLsHost() {
        const scriptSnapshots = /* @__PURE__ */ new Map();
        const fileVersions = /* @__PURE__ */ new WeakMap();
        const _tsHost = {
          fileExists: options.vueLsHost.fileExists ? (fileName) => {
            var _a, _b, _c, _d;
            const fileNameTrim = fileName.substring(0, fileName.lastIndexOf("."));
            if (fileNameTrim.endsWith(".vue")) {
              const vueFile = vueFiles.get(fileNameTrim);
              if (!vueFile) {
                const fileExists = !!((_b = (_a = options.vueLsHost).fileExists) === null || _b === void 0 ? void 0 : _b.call(_a, fileNameTrim));
                if (fileExists) {
                  updateSourceFiles([fileNameTrim]);
                }
              }
            }
            if (!!vueFiles.fromEmbeddedFileName(fileName)) {
              return true;
            }
            return !!((_d = (_c = options.vueLsHost).fileExists) === null || _d === void 0 ? void 0 : _d.call(_c, fileName));
          } : void 0,
          getProjectVersion: () => {
            return tsProjectVersion.toString();
          },
          getScriptFileNames,
          getScriptVersion,
          getScriptSnapshot,
          readDirectory: (_path2, extensions, exclude, include, depth) => {
            var _a, _b, _c;
            const result2 = (_c = (_b = (_a = options.vueLsHost).readDirectory) === null || _b === void 0 ? void 0 : _b.call(_a, _path2, extensions, exclude, include, depth)) !== null && _c !== void 0 ? _c : [];
            for (const vuePath of vueFiles.getFileNames()) {
              const vuePath2 = path3.join(_path2, path3.basename(vuePath));
              if (path3.relative(_path2.toLowerCase(), vuePath.toLowerCase()).startsWith("..")) {
                continue;
              }
              if (!depth && vuePath.toLowerCase() === vuePath2.toLowerCase()) {
                result2.push(vuePath2);
              } else if (depth) {
                result2.push(vuePath2);
              }
            }
            return result2;
          },
          getScriptKind(fileName) {
            switch (path3.extname(fileName)) {
              case ".vue":
                return ts.ScriptKind.TSX;
              case ".js":
                return ts.ScriptKind.JS;
              case ".jsx":
                return ts.ScriptKind.JSX;
              case ".ts":
                return ts.ScriptKind.TS;
              case ".tsx":
                return ts.ScriptKind.TSX;
              case ".json":
                return ts.ScriptKind.JSON;
              default:
                return ts.ScriptKind.Unknown;
            }
          }
        };
        const tsHost = new Proxy(_tsHost, {
          get: (target, property) => {
            return target[property] || options.vueLsHost[property];
          }
        });
        return tsHost;
        function getScriptFileNames() {
          const tsFileNames = getLocalTypesFiles();
          for (const mapped of vueFiles.getEmbeddeds()) {
            if (mapped.embedded.file.isTsHostFile) {
              tsFileNames.push(mapped.embedded.file.fileName);
            }
          }
          for (const fileName of options.vueLsHost.getScriptFileNames()) {
            if (options.isTsPlugin) {
              tsFileNames.push(fileName);
            } else if (!fileName.endsWith(".vue")) {
              tsFileNames.push(fileName);
            }
          }
          return tsFileNames;
        }
        function getScriptVersion(fileName) {
          var _a, _b, _c;
          const basename2 = path3.basename(fileName);
          if (basename2 === localTypes.typesFileName) {
            return "";
          }
          let mapped = vueFiles.fromEmbeddedFileName(fileName);
          if (mapped) {
            if (fileVersions.has(mapped.embedded.file)) {
              return fileVersions.get(mapped.embedded.file);
            } else {
              let version2 = (_c = (_b = (_a = ts.sys).createHash) === null || _b === void 0 ? void 0 : _b.call(_a, mapped.embedded.file.content)) !== null && _c !== void 0 ? _c : mapped.embedded.file.content;
              if (options.isVueTsc) {
                version2 = mapped.vueFile.getVersion() + ":" + version2;
              }
              fileVersions.set(mapped.embedded.file, version2);
              return version2;
            }
          }
          return options.vueLsHost.getScriptVersion(fileName);
        }
        function getScriptSnapshot(fileName) {
          const version2 = getScriptVersion(fileName);
          const cache = scriptSnapshots.get(fileName.toLowerCase());
          if (cache && cache[0] === version2) {
            return cache[1];
          }
          const basename2 = path3.basename(fileName);
          if (basename2 === localTypes.typesFileName) {
            return localTypesScript;
          }
          const mapped = vueFiles.fromEmbeddedFileName(fileName);
          if (mapped) {
            const text = mapped.embedded.file.content;
            const snapshot = ts.ScriptSnapshot.fromString(text);
            scriptSnapshots.set(fileName.toLowerCase(), [version2, snapshot]);
            return snapshot;
          }
          let tsScript = options.vueLsHost.getScriptSnapshot(fileName);
          if (tsScript) {
            if (basename2 === "runtime-dom.d.ts") {
              let tsScriptText = tsScript.getText(0, tsScript.getLength());
              tsScriptText = tsScriptText.replace("type ReservedProps = {", "type ReservedProps = { [name: string]: any");
              tsScript = ts.ScriptSnapshot.fromString(tsScriptText);
            }
            scriptSnapshots.set(fileName.toLowerCase(), [version2, tsScript]);
            return tsScript;
          }
        }
      }
      function updateSourceFiles(fileNames) {
        let vueScriptsUpdated = false;
        for (const fileName of fileNames) {
          const sourceFile = vueFiles.get(fileName);
          const scriptSnapshot = options.vueLsHost.getScriptSnapshot(fileName);
          if (!scriptSnapshot) {
            continue;
          }
          const scriptText = scriptSnapshot.getText(0, scriptSnapshot.getLength());
          const scriptVersion = options.vueLsHost.getScriptVersion(fileName);
          if (!sourceFile) {
            vueFiles.set(fileName, (0, vueFile_1.createVueFile)(fileName, scriptText, scriptVersion, plugins, options.vueLsHost.getVueCompilationSettings(), options.typescript, options.baseCssModuleType, options.getCssClasses, tsLsRaw, tsLsHost));
            vueScriptsUpdated = true;
          } else {
            const updates = sourceFile.update(scriptText, scriptVersion);
            if (updates.scriptUpdated) {
              vueScriptsUpdated = true;
            }
          }
        }
        if (vueScriptsUpdated) {
          tsProjectVersion++;
        }
      }
      function unsetSourceFiles(uris) {
        let updated = false;
        for (const uri of uris) {
          if (vueFiles.delete(uri)) {
            updated = true;
          }
        }
        if (updated) {
          tsProjectVersion++;
        }
      }
    }
    exports2.createTypeScriptRuntime = createTypeScriptRuntime;
  }
});

// ../../packages/vue-typescript/out/index.js
var require_out6 = __commonJS({
  "../../packages/vue-typescript/out/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.usePugPlugin = exports2.useHtmlPlugin = exports2.tsShared = exports2.localTypes = void 0;
    __exportStar(require_sourceMaps(), exports2);
    __exportStar(require_string(), exports2);
    __exportStar(require_vueFile(), exports2);
    __exportStar(require_vueFiles(), exports2);
    __exportStar(require_types2(), exports2);
    __exportStar(require_typescriptRuntime(), exports2);
    exports2.localTypes = require_localTypes();
    exports2.tsShared = require_ts2();
    var html_1 = require_html();
    Object.defineProperty(exports2, "useHtmlPlugin", { enumerable: true, get: function() {
      return html_1.default;
    } });
    var pug_1 = require_pug();
    Object.defineProperty(exports2, "usePugPlugin", { enumerable: true, get: function() {
      return pug_1.default;
    } });
  }
});

// ../../packages/typescript-vue-plugin/out/apis.js
var require_apis = __commonJS({
  "../../packages/typescript-vue-plugin/out/apis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.register = void 0;
    function register(context) {
      return {
        getCompletionsAtPosition,
        getDefinitionAtPosition,
        getDefinitionAndBoundSpan,
        getTypeDefinitionAtPosition,
        getImplementationAtPosition,
        findRenameLocations,
        getReferencesAtPosition,
        findReferences
      };
      function getCompletionsAtPosition(fileName, position, options) {
        const finalResult = context.getTsLs().getCompletionsAtPosition(fileName, position, options);
        if (finalResult) {
          finalResult.entries = finalResult.entries.filter((entry) => entry.name.indexOf("__VLS_") === -1);
        }
        return finalResult;
      }
      function getReferencesAtPosition(fileName, position) {
        return findLocations(fileName, position, "references");
      }
      function getDefinitionAtPosition(fileName, position) {
        return findLocations(fileName, position, "definition");
      }
      function getTypeDefinitionAtPosition(fileName, position) {
        return findLocations(fileName, position, "typeDefinition");
      }
      function getImplementationAtPosition(fileName, position) {
        return findLocations(fileName, position, "implementation");
      }
      function findRenameLocations(fileName, position, findInStrings, findInComments, providePrefixAndSuffixTextForRename) {
        return findLocations(fileName, position, "rename", findInStrings, findInComments, providePrefixAndSuffixTextForRename);
      }
      function findLocations(fileName, position, mode, findInStrings = false, findInComments = false, providePrefixAndSuffixTextForRename) {
        const tsLs = context.getTsLs();
        const loopChecker = /* @__PURE__ */ new Set();
        let symbols2 = [];
        if (tsLs)
          withTeleports(fileName, position, tsLs);
        return symbols2.map((s) => transformDocumentSpanLike(s)).filter(notEmpty);
        function withTeleports(fileName2, position2, tsLs2) {
          if (loopChecker.has(fileName2 + ":" + position2))
            return;
          loopChecker.add(fileName2 + ":" + position2);
          const _symbols = mode === "definition" ? tsLs2.getDefinitionAtPosition(fileName2, position2) : mode === "typeDefinition" ? tsLs2.getTypeDefinitionAtPosition(fileName2, position2) : mode === "references" ? tsLs2.getReferencesAtPosition(fileName2, position2) : mode === "implementation" ? tsLs2.getImplementationAtPosition(fileName2, position2) : mode === "rename" ? tsLs2.findRenameLocations(fileName2, position2, findInStrings, findInComments, providePrefixAndSuffixTextForRename) : void 0;
          if (!_symbols)
            return;
          symbols2 = symbols2.concat(_symbols);
          for (const ref of _symbols) {
            loopChecker.add(ref.fileName + ":" + ref.textSpan.start);
            const teleport = context.vueFiles.getTeleport(ref.fileName);
            if (!teleport)
              continue;
            for (const [teleRange] of teleport.findTeleports(ref.textSpan.start, ref.textSpan.start + ref.textSpan.length, (sideData) => {
              if ((mode === "definition" || mode === "typeDefinition" || mode === "implementation") && !sideData.capabilities.definitions)
                return false;
              if (mode === "references" && !sideData.capabilities.references)
                return false;
              if (mode === "rename" && !sideData.capabilities.rename)
                return false;
              return true;
            })) {
              if (loopChecker.has(ref.fileName + ":" + teleRange.start))
                continue;
              withTeleports(ref.fileName, teleRange.start, tsLs2);
            }
          }
        }
      }
      function getDefinitionAndBoundSpan(fileName, position) {
        const tsLs = context.getTsLs();
        const loopChecker = /* @__PURE__ */ new Set();
        let textSpan;
        let symbols2 = [];
        if (tsLs)
          withTeleports(fileName, position, tsLs);
        if (!textSpan)
          return;
        return {
          textSpan,
          definitions: symbols2 === null || symbols2 === void 0 ? void 0 : symbols2.map((s) => transformDocumentSpanLike(s)).filter(notEmpty)
        };
        function withTeleports(fileName2, position2, tsLs2) {
          if (loopChecker.has(fileName2 + ":" + position2))
            return;
          loopChecker.add(fileName2 + ":" + position2);
          const _symbols = tsLs2.getDefinitionAndBoundSpan(fileName2, position2);
          if (!_symbols)
            return;
          if (!textSpan) {
            textSpan = _symbols.textSpan;
          }
          if (!_symbols.definitions)
            return;
          symbols2 = symbols2.concat(_symbols.definitions);
          for (const ref of _symbols.definitions) {
            loopChecker.add(ref.fileName + ":" + ref.textSpan.start);
            const teleport = context.vueFiles.getTeleport(ref.fileName);
            if (!teleport)
              continue;
            for (const [teleRange] of teleport.findTeleports(ref.textSpan.start, ref.textSpan.start + ref.textSpan.length, (sideData) => !!sideData.capabilities.definitions)) {
              if (loopChecker.has(ref.fileName + ":" + teleRange.start))
                continue;
              withTeleports(ref.fileName, teleRange.start, tsLs2);
            }
          }
        }
      }
      function findReferences(fileName, position) {
        const tsLs = context.getTsLs();
        const loopChecker = /* @__PURE__ */ new Set();
        let symbols2 = [];
        if (tsLs)
          withTeleports(fileName, position, tsLs);
        return symbols2.map((s) => transformReferencedSymbol(s)).filter(notEmpty);
        function withTeleports(fileName2, position2, tsLs2) {
          if (loopChecker.has(fileName2 + ":" + position2))
            return;
          loopChecker.add(fileName2 + ":" + position2);
          const _symbols = tsLs2.findReferences(fileName2, position2);
          if (!_symbols)
            return;
          symbols2 = symbols2.concat(_symbols);
          for (const symbol of _symbols) {
            for (const ref of symbol.references) {
              loopChecker.add(ref.fileName + ":" + ref.textSpan.start);
              const teleport = context.vueFiles.getTeleport(ref.fileName);
              if (!teleport)
                continue;
              for (const [teleRange] of teleport.findTeleports(ref.textSpan.start, ref.textSpan.start + ref.textSpan.length, (sideData) => !!sideData.capabilities.references)) {
                if (loopChecker.has(ref.fileName + ":" + teleRange.start))
                  continue;
                withTeleports(ref.fileName, teleRange.start, tsLs2);
              }
            }
          }
        }
      }
      function transformReferencedSymbol(symbol) {
        const definition = transformDocumentSpanLike(symbol.definition);
        const references = symbol.references.map((r) => transformDocumentSpanLike(r)).filter(notEmpty);
        if (definition) {
          return {
            definition,
            references
          };
        } else if (references.length) {
          return {
            definition: Object.assign(Object.assign({}, symbol.definition), { fileName: references[0].fileName, textSpan: references[0].textSpan }),
            references
          };
        }
      }
      function transformDocumentSpanLike(documentSpan) {
        const textSpan = transformSpan(documentSpan.fileName, documentSpan.textSpan);
        if (!textSpan)
          return;
        const contextSpan = transformSpan(documentSpan.fileName, documentSpan.contextSpan);
        const originalTextSpan = transformSpan(documentSpan.originalFileName, documentSpan.originalTextSpan);
        const originalContextSpan = transformSpan(documentSpan.originalFileName, documentSpan.originalContextSpan);
        return Object.assign(Object.assign({}, documentSpan), { fileName: textSpan.fileName, textSpan: textSpan.textSpan, contextSpan: contextSpan === null || contextSpan === void 0 ? void 0 : contextSpan.textSpan, originalFileName: originalTextSpan === null || originalTextSpan === void 0 ? void 0 : originalTextSpan.fileName, originalTextSpan: originalTextSpan === null || originalTextSpan === void 0 ? void 0 : originalTextSpan.textSpan, originalContextSpan: originalContextSpan === null || originalContextSpan === void 0 ? void 0 : originalContextSpan.textSpan });
      }
      function transformSpan(fileName, textSpan) {
        if (!fileName)
          return;
        if (!textSpan)
          return;
        for (const vueLoc of context.vueFiles.fromEmbeddedLocation(fileName, textSpan.start, textSpan.start + textSpan.length)) {
          return {
            fileName: vueLoc.fileName,
            textSpan: {
              start: vueLoc.range.start,
              length: vueLoc.range.end - vueLoc.range.start
            }
          };
        }
      }
    }
    exports2.register = register;
    function notEmpty(value) {
      return value !== null && value !== void 0;
    }
  }
});

// ../../packages/typescript-vue-plugin/out/index.js
var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P || (P = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result2) {
      result2.done ? resolve2(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var vue = require_out6();
var path2 = require("path");
var apis = require_apis();
var vue_typescript_1 = require_out6();
var init2 = (modules) => {
  const { typescript: ts } = modules;
  const vueFilesGetter = /* @__PURE__ */ new WeakMap();
  const pluginModule = {
    create(info) {
      const proxyHost = createProxyHost(ts, info);
      if (proxyHost.getVueFiles().length === 0) {
        return info.languageService;
      }
      info.project.getScriptKind = (fileName) => {
        switch (path2.extname(fileName)) {
          case ".vue":
            return ts.ScriptKind.TSX;
          case ".js":
            return ts.ScriptKind.JS;
          case ".jsx":
            return ts.ScriptKind.JSX;
          case ".ts":
            return ts.ScriptKind.TS;
          case ".tsx":
            return ts.ScriptKind.TSX;
          case ".json":
            return ts.ScriptKind.JSON;
          default:
            return ts.ScriptKind.Unknown;
        }
      };
      const tsRuntime = vue.createTypeScriptRuntime({
        typescript: ts,
        baseCssModuleType: "any",
        getCssClasses: () => ({}),
        vueLsHost: proxyHost.host,
        isTsPlugin: true
      });
      const _tsPluginApis = apis.register(tsRuntime);
      const tsPluginProxy = {
        getSemanticDiagnostics: apiHook(tsRuntime.getTsLs().getSemanticDiagnostics),
        getEncodedSemanticClassifications: apiHook(tsRuntime.getTsLs().getEncodedSemanticClassifications),
        getCompletionsAtPosition: apiHook(_tsPluginApis.getCompletionsAtPosition),
        getCompletionEntryDetails: apiHook(tsRuntime.getTsLs().getCompletionEntryDetails),
        getCompletionEntrySymbol: apiHook(tsRuntime.getTsLs().getCompletionEntrySymbol),
        getQuickInfoAtPosition: apiHook(tsRuntime.getTsLs().getQuickInfoAtPosition),
        getSignatureHelpItems: apiHook(tsRuntime.getTsLs().getSignatureHelpItems),
        getRenameInfo: apiHook(tsRuntime.getTsLs().getRenameInfo),
        findRenameLocations: apiHook(_tsPluginApis.findRenameLocations),
        getDefinitionAtPosition: apiHook(_tsPluginApis.getDefinitionAtPosition),
        getDefinitionAndBoundSpan: apiHook(_tsPluginApis.getDefinitionAndBoundSpan),
        getTypeDefinitionAtPosition: apiHook(_tsPluginApis.getTypeDefinitionAtPosition),
        getImplementationAtPosition: apiHook(_tsPluginApis.getImplementationAtPosition),
        getReferencesAtPosition: apiHook(_tsPluginApis.getReferencesAtPosition),
        findReferences: apiHook(_tsPluginApis.findReferences)
      };
      vueFilesGetter.set(info.project, proxyHost.getVueFiles);
      return new Proxy(info.languageService, {
        get: (target, property) => {
          return tsPluginProxy[property] || target[property];
        }
      });
      function apiHook(api) {
        const handler = {
          apply(target, thisArg, argumentsList) {
            tsRuntime.update();
            return target.apply(thisArg, argumentsList);
          }
        };
        return new Proxy(api, handler);
      }
    },
    getExternalFiles(project) {
      const getVueFiles = vueFilesGetter.get(project);
      if (!getVueFiles) {
        return [];
      }
      return getVueFiles().filter((fileName) => project.fileExists(fileName));
    }
  };
  return pluginModule;
};
function createProxyHost(ts, info) {
  let projectVersion = 0;
  let reloadVueFilesSeq = 0;
  let sendDiagSeq = 0;
  let disposed = false;
  const vueFiles = /* @__PURE__ */ new Map();
  const host = {
    getNewLine: () => info.project.getNewLine(),
    useCaseSensitiveFileNames: () => info.project.useCaseSensitiveFileNames(),
    readFile: (path3) => info.project.readFile(path3),
    writeFile: (path3, content) => info.project.writeFile(path3, content),
    fileExists: (path3) => info.project.fileExists(path3),
    directoryExists: (path3) => info.project.directoryExists(path3),
    getDirectories: (path3) => info.project.getDirectories(path3),
    readDirectory: (path3, extensions, exclude, include, depth) => info.project.readDirectory(path3, extensions, exclude, include, depth),
    realpath: info.project.realpath ? (path3) => info.project.realpath(path3) : void 0,
    getCompilationSettings: () => info.project.getCompilationSettings(),
    getVueCompilationSettings: () => {
      var _a;
      return (_a = parsedCommandLine === null || parsedCommandLine === void 0 ? void 0 : parsedCommandLine.vueOptions) !== null && _a !== void 0 ? _a : {};
    },
    getCurrentDirectory: () => info.project.getCurrentDirectory(),
    getDefaultLibFileName: () => info.project.getDefaultLibFileName(),
    getProjectVersion: () => info.project.getProjectVersion() + "-" + projectVersion,
    getProjectReferences: () => info.project.getProjectReferences(),
    getScriptFileNames,
    getScriptVersion,
    getScriptSnapshot
  };
  update();
  const directoryWatcher = info.serverHost.watchDirectory(info.project.getCurrentDirectory(), onAnyDriveFileUpdated, true);
  const projectName = info.project.projectName;
  let tsconfigWatcher = info.project.fileExists(projectName) ? info.serverHost.watchFile(projectName, () => {
    onConfigUpdated();
    onProjectUpdated();
    parsedCommandLine = vue_typescript_1.tsShared.createParsedCommandLine(ts, ts.sys, projectName);
  }) : void 0;
  let parsedCommandLine = tsconfigWatcher ? vue_typescript_1.tsShared.createParsedCommandLine(ts, ts.sys, projectName) : void 0;
  return {
    host,
    getVueFiles: () => [...vueFiles.keys()],
    dispose
  };
  function onAnyDriveFileUpdated(fileName) {
    return __awaiter(this, void 0, void 0, function* () {
      if (fileName.endsWith(".vue") && info.project.fileExists(fileName) && !vueFiles.has(fileName)) {
        onConfigUpdated();
      }
    });
  }
  function onConfigUpdated() {
    return __awaiter(this, void 0, void 0, function* () {
      const seq = ++reloadVueFilesSeq;
      yield sleep(100);
      if (seq === reloadVueFilesSeq && !disposed) {
        update();
      }
    });
  }
  function getScriptFileNames() {
    return info.project.getScriptFileNames().concat([...vueFiles.keys()]);
  }
  function getScriptVersion(fileName) {
    if (vueFiles.has(fileName)) {
      return vueFiles.get(fileName).version.toString();
    }
    return info.project.getScriptVersion(fileName);
  }
  function getScriptSnapshot(fileName) {
    if (vueFiles.has(fileName)) {
      const version2 = getScriptVersion(fileName);
      const file = vueFiles.get(fileName);
      if (file.snapshotsVersion !== version2) {
        const text = getScriptText(fileName);
        if (text === void 0)
          return;
        file.snapshots = ts.ScriptSnapshot.fromString(text);
        file.snapshotsVersion = version2;
        return file.snapshots;
      }
      return file.snapshots;
    }
    return info.project.getScriptSnapshot(fileName);
  }
  function getScriptText(fileName) {
    if (info.project.fileExists(fileName)) {
      return info.project.readFile(fileName);
    }
  }
  function getVueFiles() {
    const parseConfigHost = {
      useCaseSensitiveFileNames: info.project.useCaseSensitiveFileNames(),
      readDirectory: (path3, extensions, exclude, include, depth) => {
        return info.project.readDirectory(path3, [".vue"], exclude, include, depth);
      },
      fileExists: (fileName) => info.project.fileExists(fileName),
      readFile: (fileName) => info.project.readFile(fileName)
    };
    const { fileNames } = ts.parseJsonConfigFileContent({}, parseConfigHost, info.project.getCurrentDirectory(), info.project.getCompilerOptions());
    return fileNames;
  }
  function update() {
    var _a;
    const newVueFiles = new Set(getVueFiles());
    let changed = false;
    for (const fileName of vueFiles.keys()) {
      if (!newVueFiles.has(fileName)) {
        (_a = vueFiles.get(fileName)) === null || _a === void 0 ? void 0 : _a.fileWatcher.close();
        vueFiles.delete(fileName);
        changed = true;
      }
    }
    for (const fileName of newVueFiles) {
      if (!vueFiles.has(fileName)) {
        const fileWatcher = info.serverHost.watchFile(fileName, (_, eventKind) => {
          var _a2;
          if (eventKind === ts.FileWatcherEventKind.Changed) {
            onFileChanged(fileName);
          } else if (eventKind === ts.FileWatcherEventKind.Deleted) {
            (_a2 = vueFiles.get(fileName)) === null || _a2 === void 0 ? void 0 : _a2.fileWatcher.close();
            vueFiles.delete(fileName);
            onProjectUpdated();
          }
        });
        vueFiles.set(fileName, {
          fileWatcher,
          version: 0,
          snapshots: void 0,
          snapshotsVersion: void 0
        });
        changed = true;
      }
    }
    if (changed) {
      onProjectUpdated();
    }
  }
  function onFileChanged(fileName) {
    fileName = path2.resolve(fileName);
    const file = vueFiles.get(fileName);
    if (file) {
      file.version++;
    }
    onProjectUpdated();
  }
  function onProjectUpdated() {
    return __awaiter(this, void 0, void 0, function* () {
      projectVersion++;
      const seq = ++sendDiagSeq;
      yield sleep(100);
      if (seq === sendDiagSeq) {
        info.project.refreshDiagnostics();
      }
    });
  }
  function dispose() {
    directoryWatcher.close();
    if (tsconfigWatcher) {
      tsconfigWatcher.close();
    }
    for (const [_, file] of vueFiles) {
      file.fileWatcher.close();
    }
    disposed = true;
  }
}
function sleep(ms) {
  return new Promise((resolve2) => setTimeout(resolve2, ms));
}
module.exports = init2;
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/*! https://mths.be/cssesc v3.0.0 by @mathias */
/*! https://mths.be/punycode v1.4.1 by @mathias */
